17:13:10: Sata Disconnector Board found in COM1.
17:13:14: *****************************************************

17:13:14: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   *

17:13:14: *                                                   *

17:13:14: *  Compatibility with this version is not verified! *

17:13:14: *****************************************************

17:13:17: [ DeviceSetupCompletion() , Command count = 7 ] 
17:13:17: Testname Mapping: ScriptName=[CF401_Call_All_Chapter_4] -> TestId=[CF401]
17:13:17: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 8 ] 
17:13:17: [ GetPhysicalChipsInfo() , Command count = 9 ] 
17:13:17: [ GetFileSize(0xEA) , Command count = 10 ] 
17:13:17: [ ReadFile(<0xA00/0x200, Arb>, 0xEA, 0x1) , Command count = 11 ] 
17:13:17: [ GetFileSize(0x16) , Command count = 12 ] 
17:13:17: [ GetCardStatus() , Command count = 13 ] 
17:13:17: [ GetFileSize(0x18) , Command count = 14 ] 
17:13:17: [ ReadFile(<0x1000/0x200, Arb>, 0x18, 0x8) , Command count = 15 ] 
17:13:17: [ GetFileSize(0x15) , Command count = 16 ] 
17:13:17: [ ReadFile(<0x1000/0x200, Arb>, 0x15, 0x1) , Command count = 17 ] 
17:13:17: Can not find revision of File 21 in file 'config.xml' or card is in the ROM mode
17:13:17: [ GetFileSize(0xE) , Command count = 18 ] 
17:13:17: [ ReadFile(<0x1000/0x200, Arb>, 0xE, 0x1) , Command count = 19 ] 
17:13:17: [ GetFileSize(0x1E) , Command count = 20 ] 
17:13:17: [ GetCardStatus() , Command count = 21 ] 
17:13:17: [ GetFileSize(0x21) , Command count = 22 ] 
17:13:17: [ GetCardStatus() , Command count = 23 ] 
17:13:17: [ GetFileSize(0x33) , Command count = 24 ] 
17:13:17: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x33, 0x1) , Command count = 25 ] 
17:13:17: [ GetFileSize(0x1F) , Command count = 26 ] 
17:13:17: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x1F, 0x1) , Command count = 27 ] 
17:13:17: [ GetFileSize(0x2A) , Command count = 28 ] 
17:13:17: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x2A, 0x1) , Command count = 29 ] 
17:13:17: [ ReadCfgConf(<0x1000/0x200, Spc, pat:0x0>, 0x1) , Command count = 30 ] 
17:13:17: [ ReadFirmwareParameter(<0x1000/0x200, Spc, pat:0x0>, 0x2) , Command count = 31 ] 
17:13:17: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_BE) , Command count = 32 ] 
17:13:17: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_PRODUCT) , Command count = 33 ] 
17:13:17: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_FE_SD) , Command count = 34 ] 
17:13:17: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, 0x0) , Command count = 35 ] 
17:13:17: [ GetFileSize(0x33) , Command count = 36 ] 
17:13:17: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 37 ] 
17:13:17: [ GetFileSize(0x33) , Command count = 38 ] 
17:13:17: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 39 ] 
17:13:18: [ GetIpVersionInfo() , Command count = 40 ] 
17:13:18: [ GetPhysicalChipsInfo() , Command count = 41 ] 
17:13:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x060DEBA0>, <0x200/0x200, Arb>) , Command count = 42 ] 
17:13:18: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 43 ] 

<<<<<<<<<<<<<<<         TEST HEADER          >>>>>>>>>>>>>>>

Application                :  TestRunner.py
Application version        :  SD_DVT 2.0.0
Application folder         :  C:\SDDVT_Python_Package\SDDVT
Command line               :  --protocol=sd --sdtestid=CF401 --dbconnection=none --adapter=SD05412_9ADT --sdConfiguration=SDR50 --projectconfig=C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB --paramsfile=C:\Colibri_SD_HC_I070_SDR104_Prof_C10_U3_V30_A1.txt --logfilename=C:\Results\[U]
Protocol                   :  sd
Serial number (CInfo)      :  sdin1091
Adapter                    :  SDR Tester (S#: SD05412_9ADT): (Slot#:0)
Adapter serial number      :  SD05412_9ADT
Adapter type               :  USD
Capacity                   :  32G
Firmware revision          :  6RB C030
Flashware revision         :  6RB C030
IP Version Info            :  '' 01.04.00... ID 0x20
                           :  '' 00.01.00... ID 0x10
Memory ID                  :  453CA9A27A510B140000000000000000
Controller                 :  81
Trim settings              :  <Unavailable>
Model revision             :  <Unavailable>
Stream name                :  <Unavailable>
FE IP                      :  1
Romware revision           :  RRBZ1152
Architecture               :  Gen 6
Model                      :  SanDisk   COLIBRI
Memory type                :  Unknown Device Type-2LC x 1
ASIC id                    :  81
Controller type            :  Unknown Controller   UMC-J
Driver version (actual)    :  10.0.0.1 (0x a.0.0.1)
Driver version (released)  :  7.1.4.3 (0x 7.1.4.3)
Date and time              :  2016-11-21 17:13:18
Host name                  :  SDDVT_Test2
Host IP address            :  10.65.153.121
Operating system           :  Microsoft Windows [Version 6.1.7601] Service Pack 1
SanDisk Python version     :  1.17.5rc3
CTF/PySFCL build number    :  1.3.0.131072
PySFCL version             :  1.3.0
CTF version                :  1.3
Python version             :  2.4.2
Project Name(Validation)   :  <None>


<<<<<<<<<<<<<<<      SFCL CONFIGURATION      >>>>>>>>>>>>>>>

[SD enumeration]
cmdtiming=0
useRelay=0
autocompare=0
relayPolarity=1
relaySleep=500
measureCmdLatency=1
logicalChunkSize=0
diagDisabled=0
diagCmdTimeout=800
useVddf=on
nethostloglevel=
nethostautoCompare=on
CmdManShowProgress=off
nethostsendtimeout=240000
nethostreceivetimeout=240000
countOfRetryCmdIfCrc=3
enableOORPatch=
lbaForSctpCommands=0x100
subProtocol=0
doDle=0
diagnosticChunkSize=128
logmsgformat=timeMessage
logtimeformat=time
relaySlot=0
unloadDll=on
hardTimeoutUnloadDll=on
minDuration=7200
remoteDevice=
skipProduction=0
ishighspeedmode=0
highfreqinhz=500
modeldelaytimeindiagnostic=0
sataPort0ToRelaySlot=0
sataPort1ToRelaySlot=0
sataPort2ToRelaySlot=0
sataPort3ToRelaySlot=0
relayToComportMapping=1
sdbToComportMapping=1
sataAdapterPort0=0
sataAdapterPort1=0
sataAdapterPort2=0
sataAdapterPort3=0
sataPort0ToMubIndx=1
sataPort1ToMubIndx=1
sataPort2ToMubIndx=1
sataPort3ToMubIndx=1

[Common]
enableChunkTraces=off
enablePythonTraceback=1
sctpPhaseDelay=0
printcommandcount=on
debugfilepath=
initXMLPath=\\regression.lab.sandisk.com\shared\configurations
delayBeforePwrCycle=0
delayAfterPwrCycle=0
reportCountStatistics=1
reportPackage=0
sfclConfig=Common

<<<<<<<<<<<<<<<          CARD INFO           >>>>>>>>>>>>>>>

Number Of LBAs  :  0x3b72400
Card Is Locked  :  No
Secure Area     :  0x28000
Card Secure     :  No
WP map          :

<<<<<<<<<<<<<<<           CID INFO           >>>>>>>>>>>>>>>

Manufacturer Id  :  0x3
Card/BGA         :  0
Application Id   :  0x5344
ProductName      :  AGGCD
ProductRev       :  0x80
SerialNumber     :  0x23482900
Reserved         :  0x23482900
Year             :  2000
Month            :  11
CRC Check Sum    :  0x5
Not Used         :

<<<<<<<<<<<<<<<           CSD INFO           >>>>>>>>>>>>>>>

CSD Structure                     :  0x1
reserv. 1                         :  0x0
TAAC                              :  0xe
NSAC*100                          :  0x0
data transfer rate                :  0x32
card command classes CCC          :  0x5b5
max. read data Blk. length        :  0x9
partial blocks for read allowed   :  0x0
write block misalignment          :  0x0
read block misalignment           :  0x0
DSR implemented                   :  0x0
reserved 2                        :  0x0
device size                       :  0xedc8
Reserv3                           :  0x0
SD Erase Blk Len En               :  0x1
SD Sec Size                       :  0x7f
write protect group size          :  0x0
write protect group enable        :  0x0
Reserv4                           :  0x0
write speed factor                :  0x2
max. write data blk. length       :  0x9
partial blocks for write allowed  :  0x0
File Format Group                 :  0x0
copy flag(OTP)                    :  0x1
permanent write protection        :  0x0
temporary write protection        :  0x0
File Format                       :  0x0
CRC                               :  0x0
<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165762
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165762
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

<<<<<<<<<<<<<<<    COMMAND LINE ARGUMENTS    >>>>>>>>>>>>>>>


Processed command-line options:
   --protocol                                       : sd
   --adapterspecifier                               : ain:-1,desc:SD05412_9ADT
   --extcmdset                                      : FBCC
   --sdtestid                                       : CF401
   --sdconfiguration                                : SDR50
   --cyclecount                                     : 1
   --testduration                                   : 20h
   --writereadpercent                               : 100
   --paramsfile                                     : 'C:\Colibri_SD_HC_I070_SDR104_Prof_C10_U3_V30_A1.txt'
   --randomseed                                     : 65092840525
   --projectconfig                                  : C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB
   --logfiledir                                     : C:\SDDVT_Python_Package\SDDVT\DvtTestLogs
   --hostlog                                        : 0
   --dbconnection                                   : 'none'
   --temperature                                    : 25
   --voltage                                        : 0.00
   --logfilename                                    : 'C:\Results\[U]'
   --logtostdout                                    : Y
   --overwriteexistinglogfile                       : Y
   --logrotationspecifier                           : NoRotation
   --loglevel                                       : <4, INFO>
   --testcomment                                    : None
   --dbproject                                      : CTFW_QA
   --mdfwprojectid                                  : None
   --mdconfigid                                     : None
   --mdtestid                                       : None
   --valid                                          : True
   --waitTime                                       : None
   --jitter                                         : F
   --testlimits                                     : <None>-<None>
   --LabID                                          : None
   --DutID                                          : None
   --LaunchId                                       : None
   --TestQueueId                                    : None
   --xfermode                                       : <N>
   --networkperiod                                  : <N>
   --networkpath                                    : <N>
   --dumpfile                                       : 
   --printcommandcount                              : N
   --debugfilepath                                  : <N>
   --chpfilename                                    : <N>
   --enablecmdhistory                               : Y
   --cmdhistextfilename                             : <N>
   --cmdhistcsvfilename                             : <N>
   --histdisplaysizes                               : 0,250
   --stoponcommands                                 : <N>
   --notifyemailid                                  : <N>
   --spyoncommands                                  : <N>
   --notifyoncommands                               : <N>
   --CmdManShowProgress                             : 'off'
   --enablePowerCycle                               : '1'
   --measureCmdLatency                              : '1'
   --useVddf                                        : 'on'
   --gvi                                            : 'off'
   --gviOnFly                                       : 'off'
   --gviEncryption                                  : '0'
   --remoteDevice                                   : ''
   --skipProduction                                 : '0'
   --forceMultipleMode                              : 'off'
   --countOfRetryCmdIfCrc                           : '3'
   --enableOORPatch                                 : 'on'
   --connectonly                                    : 'off'
   --nethostautocompare                             : 'on'
   --nethostpowercycle                              : '0'
   --nethostloglevel                                : '3'
   --nethostlogconsole                              : '0'
   --nethostsanitychecks                            : '0'
   --nethostsendtimeout                             : '240000'
   --nethostreceivetimeout                          : '240000'
   --subProtocol                                    : '0'
   --useVccq                                        : '3.3'
   --maxprotocoloverhead                            : '0'
   --maxprotocoltimingmode                          : '0'
   --isHighSpeedMode                                : '0'
   --highFreqInHz                                   : '500'
   --doDle                                          : '0'
   --lbaForSctpCommands                             : '0x100'
   --cmdfilename                                    : ''
   --cmdtofilewrites                                : '0'
   --cmdtiming                                      : '0'
   --cmdtocsv                                       : '0'
   --logicalChunkSize                               : '0'
   --diagnosticChunkSize                            : '128'
   --readChunkSize                                  : '0'
   --writeChunkSize                                 : '0'
   --useRelay                                       : '0'
   --sataPort0ToRelaySlot                           : '0'
   --sataPort1ToRelaySlot                           : '0'
   --sataPort2ToRelaySlot                           : '0'
   --sataPort3ToRelaySlot                           : '0'
   --relayToComportMapping                          : '1'
   --useSDB                                         : '0'
   --sdbToComportMapping                            : '1'
   --sataAdapterPort0                               : '0'
   --sataAdapterPort1                               : '0'
   --sataAdapterPort2                               : '0'
   --sataAdapterPort3                               : '0'
   --relayPolarity                                  : '1'
   --relaySleep                                     : '500'
   --diagCmdTimeout                                 : '800'
   --diagDisabled                                   : '0'
   --hardTimeout                                    : '30000'
   --commandscriptfolder                            : ''
   --commandscriptstart                             : '0'
   --logmsgformat                                   : 'timeMessage'
   --logtimeformat                                  : 'time'
   --relaySlot                                      : '0'
   --atbuRelaySlot                                  : '3'
   --diskCacheStore                                 : ''
   --stopOnStart                                    : '0'
   --notifyserver                                   : ''
   --notifyretry                                    : '2'
   --notifytimeout                                  : '60'
   --failonnotifytimeout                            : '0'
   --revertactions                                  : ''
   --timechangedetection                            : '0'
   --timechangecondition                            : '600'
   --timechangecheckinterval                        : '1000'
   --inputmonitor                                   : '1'
   --logtimeprecision                               : '2'
   --nonSndkDevEnumeration                          : '0'
   --modelini                                       : 'C:\Program Files\SanDisk\CTF\Dlls\model.ini'
   --sfclini                                        : 'C:\Program Files\SanDisk\CTF\Dlls\sfcl.ini'
   --relayForceDownload                             : 'off'
   --powercycleoninit                               : 'off'
   --stopBgOperationOnFail                          : 'off'
   --autocompare                                    : '0'
   --autocompareRandomseed                          : '12345678'
   --modeldelaytimeindiagnostic                     : '0'
   --ForceDownloadMechanism                         : '0'
   --EnableUARTDebugLog                             : '0'
   --UARTBaudRate                                   : '230400'
   --SerialUARTToCom                                : '0'
   --UARTDebugFilePath                              : ''
   --sataPort0ToMubIndx                             : '1'
   --sataPort1ToMubIndx                             : '1'
   --sataPort2ToMubIndx                             : '1'
   --sataPort3ToMubIndx                             : '1'
   --fclStep                                        : '0'
   --fclCollectReads                                : '0'
   --fclCollectWrites                               : '0'
   --fclCollectErases                               : '0'
   --fclCollectAOMReads                             : '0'
   --fclAomBase                                     : '10'
   --aomStep                                        : '0'
   --aomMapFile                                     : '0'
   --fclAomSaveFilesStep                            : '1000'
   --gfa                                            : '0'
   --atbuSoftwareLocation                           : ''
   --atbuMemoryName                                 : ''
   --atbuProfilesLocation                           : ''
   --atbuThresholdValue                             : '0'
   --atbuTransitionTime                             : '0'
   --atbuDcCompensation                             : ''


<<<<<<<<<<<<<<< RUNNING TEST: CF401_Call_All_Chapter_4 >>>>>>>>>>>>>>>



17:13:24: ###### Running Chapter 4 All scripts  ######
17:13:24: MaxLba of the card: 0x3B72400 
17:13:28: [GO7_globalPreTestingSettings]### Default Initialization Start
17:13:28: [DVTCommonLib]###  SwitchHostVoltageRegion called
17:13:28: [ SwitchHostVoltageRegion(False) , Command count = 44 ] 
17:13:28: [DVTCommonLib]###  SwitchHostVoltageRegion Completed 

17:13:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 45 ] 
17:13:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 46 ] 
17:13:30: [ CardInit() , Command count = 47 ] 
17:13:30: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 48 ] 

<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165762
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165762
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

17:13:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
17:13:31: ####CSD Registe 2.0 Values####
17:13:31: CSD_STRUCTURE                                 :0x1
17:13:31: Reserv1                                       :0x0
17:13:31: Time Access 1 TAAC                            :0xe
17:13:31: Time Access 2 NSAC*100                        :0x0
17:13:31: Data Transfer Rate TRAN_SPEED                 :0x32
17:13:31: Card Command Classess CCC                     :0x5b5
17:13:31: Max Read Data Block Length  READ_BL_LEN       :0x9
17:13:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:13:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:13:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:13:31: DSR(driver stage register)  DSR_IMP           :0x0
17:13:31: Reserv2                                       :0x0
17:13:31: Device Size C_SIZE                            :0xedc8
17:13:31: Reserv3                                       :0x0
17:13:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:13:31: Erase Sector Size SECTOR_SIZE                 :0x7f
17:13:31: Write Protect Group Size WP_GRP_SIZE          :0x0
17:13:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:13:31: Reserv4                                       :0x0
17:13:31: Write Speed Factor R2W_FACTOR                 :0x2
17:13:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:13:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:13:31: FILE_FORMAT_GRP                               :0x0
17:13:31: COPY flag                                     :0x1
17:13:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:13:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
17:13:31: File_Format                                   :0x0
17:13:31: CRC                                           :0x0
17:13:31: ####CSD Registe Values####  

17:13:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
17:13:32: ProductSerialNumber = 0x23482900
17:13:32: CardMaximumLBA      = 0x3b72400
17:13:32: CardCapacity        = 32G
17:13:32: Is card secure      = 0
17:13:32: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

17:13:32: [GO7_globalPreTestingSettings]### Default Initialization Completed 


17:13:32: ########################################
17:13:32: Stated Running script CH43311a_Basic_partial_read_test 
17:13:32: ########################################
17:13:32: ###### Basic Partial read test.
17:13:32: [CH43311a_Basic_partial_read_test]### globalCardCapacity is HC, Therefore return from the script.
17:13:32: ########################################
17:13:32: Finished Running script CH43311a_Basic_partial_read_test 
17:13:32: ########################################
17:13:32: ########################################
17:13:32: Stated Running script CH43311b_Single_Partial_Read 
17:13:32: ########################################
17:13:32: ###### Single Partial Read test.
17:13:32: [CH43311b_Single_Partial_Read]### globalCardCapacity is HC, Therefore return from the script.
17:13:32: ########################################
17:13:32: Finished Running script CH43311b_Single_Partial_Read 
17:13:32: ########################################
17:13:32: ########################################
17:13:32: Stated Running script CH43311c_Multiple_Partial_Read 
17:13:32: ########################################
17:13:32: ###### Random Write/Read on various bus width.
17:13:32: [CH43311c_Multiple_Partial_Read]### globalCardCapacity is HC, Therefore return from the script.
17:13:32: ########################################
17:13:32: Finished Running script CH43311c_Multiple_Partial_Read 
17:13:32: ########################################
17:13:32: ########################################
17:13:32: Stated Running script CH43311d_Multiple_Inremental_Partial_Read 
17:13:32: ########################################
17:13:32: ###### Multiple Incremental Read test.
17:13:32: [CH43311d_Multiple_Incremental_Partial_Read]### globalCardCapacity is HC, Therefore return from the script.
17:13:33: ########################################
17:13:33: Finished Running script CH43311d_Multiple_Inremental_Partial_Read 
17:13:33: ########################################
17:13:33: ########################################
17:13:33: Stated Running script CH43311e_Partial_Read_Misalignment 
17:13:33: ########################################
17:13:33: ######Partial_Read_Error_Test_Misalignment_Error Test.
17:13:33: [CH43311e_Partial_Read_Misalignment]### globalCardCapacity is HC, Therefore return from the script.
17:13:33: ########################################
17:13:33: Finished Running script CH43311e_Partial_Read_Misalignment 
17:13:33: ########################################
17:13:33: ########################################
17:13:33: Stated Running script CH43311f_Partial_Read_Combined 
17:13:33: ########################################
17:13:33: ######Partial_Read_Error_Test_Misalignment_Error Test.
17:13:33: [CH43311f_Partial_Read_Combined]### globalCardCapacity is HC, Therefore return from the script.
17:13:33: ########################################
17:13:33: Finished Running script CH43311f_Partial_Read_Combined 
17:13:33: ########################################
17:13:33: ########################################
17:13:33: Stated Running script CH4344_Send_Num_WR_Blocks 
17:13:33: ########################################
17:13:33: [CH4344_Send_Num_WR_Blocks.py]###### ACMD22 check on random BlockCount/data/address.
17:13:33: TAG --   4_3_4_4 - Send Number of Written Blocks ---
17:13:33: [CH4344_Num_WR_Blocks]### TEST CASE FIRST ITERATION IS STARTED.
17:13:39: FPGA Image Downloaded Is:SD_LEGACY-SDR2_2-01-00-0001.bin
17:13:39: [GO4_globalInitCard]### Switch to Specify Card Type
17:13:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:13:41: Host Frequency set to 25000 KHz
17:13:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:13:41: [GO18_globalSetVolt]### Set Host Voltage value.
17:13:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:13:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x061DBF00>, 0x0, True) , Command count = 49 ] 
17:13:42: [GO18_globalSetVolt]### Host voltage value is set.
17:13:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:13:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x061DBFC0>, 0x0, False) , Command count = 50 ] 
17:13:42: [GO18_globalSetVolt]### Host voltage value is set.
17:13:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 51 ] 
17:13:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:13:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 52 ] 
17:13:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:13:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:13:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:13:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:13:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:13:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 53 ] 
17:13:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:13:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:13:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DBF90>, <py_sfcl.CommandDataDefinition object at 0x061DBD80>) , Command count = 54 ] 
17:13:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:13:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E90F0>, <py_sfcl.CommandDataDefinition object at 0x061E9120>) , Command count = 55 ] 
17:13:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:13:42: [ SetCardRCA(0x1, 0xD555) , Command count = 56 ] 
17:13:42: [DVTCommonLib]### Identification :Idenfication of card completed 

17:13:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:13:42: Host Frequency set to 25000 KHz
17:13:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:13:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
17:13:42: ####CSD Registe 2.0 Values####
17:13:42: CSD_STRUCTURE                                 :0x1
17:13:42: Reserv1                                       :0x0
17:13:42: Time Access 1 TAAC                            :0xe
17:13:42: Time Access 2 NSAC*100                        :0x0
17:13:42: Data Transfer Rate TRAN_SPEED                 :0x32
17:13:42: Card Command Classess CCC                     :0x5b5
17:13:42: Max Read Data Block Length  READ_BL_LEN       :0x9
17:13:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:13:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:13:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:13:42: DSR(driver stage register)  DSR_IMP           :0x0
17:13:42: Reserv2                                       :0x0
17:13:42: Device Size C_SIZE                            :0xedc8
17:13:42: Reserv3                                       :0x0
17:13:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:13:42: Erase Sector Size SECTOR_SIZE                 :0x7f
17:13:42: Write Protect Group Size WP_GRP_SIZE          :0x0
17:13:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:13:42: Reserv4                                       :0x0
17:13:42: Write Speed Factor R2W_FACTOR                 :0x2
17:13:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:13:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:13:42: FILE_FORMAT_GRP                               :0x0
17:13:42: COPY flag                                     :0x1
17:13:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:13:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
17:13:42: File_Format                                   :0x0
17:13:42: CRC                                           :0x0
17:13:42: ####CSD Registe Values####  

17:13:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:13:42: [GetSCRRegisterEntry] Passed
17:13:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:13:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:13:42: Data_Status_After Erases          : 0
17:13:42: CPRM Security Support             : No Security
17:13:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:13:42: Spec. Version                     : Version 3.0X
17:13:42: Extended Security Support         : Extended_Security_Not_Supported
17:13:42: Command Support                   : COMMAND_SUPPORT
17:13:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:13:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9420>, <py_sfcl.CommandDataDefinition object at 0x061E9240>) , Command count = 57 ] 
17:13:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E92A0>, <py_sfcl.CommandDataDefinition object at 0x061E92D0>) , Command count = 58 ] 
17:13:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:13:42: [ SetBusWidth(0x4) , Command count = 59 ] 
17:13:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:13:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061E93F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 60 ] 
17:13:42: Protected Area Size 0x28000
17:13:42: Bus Width           2
17:13:42: Secure Mode         0
17:13:42: Speed  Class        4
17:13:42: Perf Move           0
17:13:42: Au Size             9
17:13:42: Erase Size          15
17:13:42: Erase Timeout       1
17:13:42: Erase offset        1
17:13:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:13:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:13:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:13:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 61 ] 
17:13:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:13:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:13:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:13:42: Host Frequency set to 100000 KHz
17:13:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:13:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
17:13:42: ####CSD Registe 2.0 Values####
17:13:42: CSD_STRUCTURE                                 :0x1
17:13:42: Reserv1                                       :0x0
17:13:42: Time Access 1 TAAC                            :0xe
17:13:42: Time Access 2 NSAC*100                        :0x0
17:13:42: Data Transfer Rate TRAN_SPEED                 :0xb
17:13:42: Card Command Classess CCC                     :0x5b5
17:13:42: Max Read Data Block Length  READ_BL_LEN       :0x9
17:13:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:13:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:13:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:13:42: DSR(driver stage register)  DSR_IMP           :0x0
17:13:42: Reserv2                                       :0x0
17:13:42: Device Size C_SIZE                            :0xedc8
17:13:42: Reserv3                                       :0x0
17:13:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:13:42: Erase Sector Size SECTOR_SIZE                 :0x7f
17:13:42: Write Protect Group Size WP_GRP_SIZE          :0x0
17:13:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:13:42: Reserv4                                       :0x0
17:13:42: Write Speed Factor R2W_FACTOR                 :0x2
17:13:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:13:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:13:43: FILE_FORMAT_GRP                               :0x0
17:13:43: COPY flag                                     :0x1
17:13:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:13:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
17:13:43: File_Format                                   :0x0
17:13:43: CRC                                           :0x0
17:13:43: ####CSD Registe Values####  

17:13:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9810>, <py_sfcl.CommandDataDefinition object at 0x061E9630>) , Command count = 62 ] 
17:13:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:13:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9690>, <py_sfcl.CommandDataDefinition object at 0x061E96C0>) , Command count = 63 ] 
17:13:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:13:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:13:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061E9750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 64 ] 
17:13:43: Protected Area Size 0x28000
17:13:43: Bus Width           2
17:13:43: Secure Mode         0
17:13:43: Speed  Class        4
17:13:43: Perf Move           0
17:13:43: Au Size             9
17:13:43: Erase Size          15
17:13:43: Erase Timeout       1
17:13:43: Erase offset        1
17:13:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:13:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:13:43: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x5F6694 to endLba:0x5F670A
17:13:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x5F6694 to EndLba:0x5F670A with Anyword Pattern 3
17:13:43: [ WrLbaNoData(0x5F6694, 0x76, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 65 ] 
17:13:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x5F6694 to EndLba:0x5F670A with Anyword Pattern 3 

17:13:43: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x5F6694 to endLba:0x5F670A
17:13:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x5F6694 to EndLba:0x5F670A with Anyword Pattern 3
17:13:43: [ RdLbaNoData(0x5F6694, 0x76, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 66 ] 
17:13:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x5F6694 to EndLba:0x5F670A with Anyword Pattern 3 

17:13:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E97B0>, <py_sfcl.CommandDataDefinition object at 0x061E9990>) , Command count = 67 ] 
17:13:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:43: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 68 ] 
17:13:43: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x76
17:13:43: [INFO] - Number of Written blocks matches as per argument provided.
17:13:43: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B4BF48 to endLba:0x3B4BFBF
17:13:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B4BF48 to EndLba:0x3B4BFBF with Anyword Pattern 2
17:13:43: [ WrLbaNoData(0x3B4BF48, 0x77, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 69 ] 
17:13:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B4BF48 to EndLba:0x3B4BFBF with Anyword Pattern 2 

17:13:43: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x3B4BF48 to endLba:0x3B4BFBF
17:13:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x3B4BF48 to EndLba:0x3B4BFBF with Anyword Pattern 2
17:13:44: [ RdLbaNoData(0x3B4BF48, 0x77, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 70 ] 
17:13:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x3B4BF48 to EndLba:0x3B4BFBF with Anyword Pattern 2 

17:13:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9AB0>, <py_sfcl.CommandDataDefinition object at 0x061E9B40>) , Command count = 71 ] 
17:13:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:44: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 72 ] 
17:13:44: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x77
17:13:44: [INFO] - Number of Written blocks matches as per argument provided.
17:13:44: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0xB73373 to endLba:0xB73392
17:13:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xB73373 to EndLba:0xB73392 with Anyword Pattern 3
17:13:44: [ WrLbaNoData(0xB73373, 0x1F, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 73 ] 
17:13:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xB73373 to EndLba:0xB73392 with Anyword Pattern 3 

17:13:44: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0xB73373 to endLba:0xB73392
17:13:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0xB73373 to EndLba:0xB73392 with Anyword Pattern 3
17:13:44: [ RdLbaNoData(0xB73373, 0x1F, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 74 ] 
17:13:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0xB73373 to EndLba:0xB73392 with Anyword Pattern 3 

17:13:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9BD0>, <py_sfcl.CommandDataDefinition object at 0x061E9C60>) , Command count = 75 ] 
17:13:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:44: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 76 ] 
17:13:44: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x1F
17:13:44: [INFO] - Number of Written blocks matches as per argument provided.
17:13:44: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x1ED0BAD to endLba:0x1ED0C28
17:13:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1ED0BAD to EndLba:0x1ED0C28 with Anyword Pattern 2
17:13:44: [ WrLbaNoData(0x1ED0BAD, 0x7B, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 77 ] 
17:13:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1ED0BAD to EndLba:0x1ED0C28 with Anyword Pattern 2 

17:13:44: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x1ED0BAD to endLba:0x1ED0C28
17:13:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x1ED0BAD to EndLba:0x1ED0C28 with Anyword Pattern 2
17:13:44: [ RdLbaNoData(0x1ED0BAD, 0x7B, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 78 ] 
17:13:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x1ED0BAD to EndLba:0x1ED0C28 with Anyword Pattern 2 

17:13:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9CF0>, <py_sfcl.CommandDataDefinition object at 0x061E9D80>) , Command count = 79 ] 
17:13:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:44: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 80 ] 
17:13:44: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x7B
17:13:44: [INFO] - Number of Written blocks matches as per argument provided.
17:13:44: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x26EDED0 to endLba:0x26EDF6F
17:13:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x26EDED0 to EndLba:0x26EDF6F with Anyword Pattern 2
17:13:44: [ WrLbaNoData(0x26EDED0, 0x9F, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 81 ] 
17:13:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x26EDED0 to EndLba:0x26EDF6F with Anyword Pattern 2 

17:13:44: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x26EDED0 to endLba:0x26EDF6F
17:13:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x26EDED0 to EndLba:0x26EDF6F with Anyword Pattern 2
17:13:44: [ RdLbaNoData(0x26EDED0, 0x9F, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 82 ] 
17:13:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x26EDED0 to EndLba:0x26EDF6F with Anyword Pattern 2 

17:13:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9E10>, <py_sfcl.CommandDataDefinition object at 0x061E9EA0>) , Command count = 83 ] 
17:13:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:44: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 84 ] 
17:13:44: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x9F
17:13:44: [INFO] - Number of Written blocks matches as per argument provided.
17:13:44: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0xD17A18 to endLba:0xD17A29
17:13:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xD17A18 to EndLba:0xD17A29 with Anyword Pattern 2
17:13:44: [ WrLbaNoData(0xD17A18, 0x11, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 85 ] 
17:13:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xD17A18 to EndLba:0xD17A29 with Anyword Pattern 2 

17:13:45: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0xD17A18 to endLba:0xD17A29
17:13:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0xD17A18 to EndLba:0xD17A29 with Anyword Pattern 2
17:13:45: [ RdLbaNoData(0xD17A18, 0x11, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 86 ] 
17:13:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0xD17A18 to EndLba:0xD17A29 with Anyword Pattern 2 

17:13:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9F30>, <py_sfcl.CommandDataDefinition object at 0x061E9FC0>) , Command count = 87 ] 
17:13:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:45: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 88 ] 
17:13:45: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x11
17:13:45: [INFO] - Number of Written blocks matches as per argument provided.
17:13:45: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x2E7E9A4 to endLba:0x2E7E9FA
17:13:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2E7E9A4 to EndLba:0x2E7E9FA with Anyword Pattern 1
17:13:45: [ WrLbaNoData(0x2E7E9A4, 0x56, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 89 ] 
17:13:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2E7E9A4 to EndLba:0x2E7E9FA with Anyword Pattern 1 

17:13:45: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x2E7E9A4 to endLba:0x2E7E9FA
17:13:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2E7E9A4 to EndLba:0x2E7E9FA with Anyword Pattern 1
17:13:45: [ RdLbaNoData(0x2E7E9A4, 0x56, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 90 ] 
17:13:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2E7E9A4 to EndLba:0x2E7E9FA with Anyword Pattern 1 

17:13:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED090>, <py_sfcl.CommandDataDefinition object at 0x061ED120>) , Command count = 91 ] 
17:13:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:45: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 92 ] 
17:13:45: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x56
17:13:45: [INFO] - Number of Written blocks matches as per argument provided.
17:13:45: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x28884A7 to endLba:0x288855A
17:13:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x28884A7 to EndLba:0x288855A with Anyword Pattern 1
17:13:45: [ WrLbaNoData(0x28884A7, 0xB3, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 93 ] 
17:13:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x28884A7 to EndLba:0x288855A with Anyword Pattern 1 

17:13:45: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x28884A7 to endLba:0x288855A
17:13:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x28884A7 to EndLba:0x288855A with Anyword Pattern 1
17:13:45: [ RdLbaNoData(0x28884A7, 0xB3, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 94 ] 
17:13:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x28884A7 to EndLba:0x288855A with Anyword Pattern 1 

17:13:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED1B0>, <py_sfcl.CommandDataDefinition object at 0x061ED240>) , Command count = 95 ] 
17:13:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:45: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 96 ] 
17:13:45: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xB3
17:13:45: [INFO] - Number of Written blocks matches as per argument provided.
17:13:45: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x100CF5A to endLba:0x100CF92
17:13:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x100CF5A to EndLba:0x100CF92 with Anyword Pattern 3
17:13:45: [ WrLbaNoData(0x100CF5A, 0x38, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 97 ] 
17:13:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x100CF5A to EndLba:0x100CF92 with Anyword Pattern 3 

17:13:45: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x100CF5A to endLba:0x100CF92
17:13:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x100CF5A to EndLba:0x100CF92 with Anyword Pattern 3
17:13:45: [ RdLbaNoData(0x100CF5A, 0x38, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 98 ] 
17:13:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x100CF5A to EndLba:0x100CF92 with Anyword Pattern 3 

17:13:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED2D0>, <py_sfcl.CommandDataDefinition object at 0x061ED360>) , Command count = 99 ] 
17:13:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:45: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 100 ] 
17:13:45: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x38
17:13:45: [INFO] - Number of Written blocks matches as per argument provided.
17:13:45: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x1C94B5E to endLba:0x1C94BB7
17:13:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1C94B5E to EndLba:0x1C94BB7 with Anyword Pattern 3
17:13:45: [ WrLbaNoData(0x1C94B5E, 0x59, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 101 ] 
17:13:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1C94B5E to EndLba:0x1C94BB7 with Anyword Pattern 3 

17:13:45: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x1C94B5E to endLba:0x1C94BB7
17:13:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x1C94B5E to EndLba:0x1C94BB7 with Anyword Pattern 3
17:13:45: [ RdLbaNoData(0x1C94B5E, 0x59, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 102 ] 
17:13:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x1C94B5E to EndLba:0x1C94BB7 with Anyword Pattern 3 

17:13:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED3F0>, <py_sfcl.CommandDataDefinition object at 0x061ED480>) , Command count = 103 ] 
17:13:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:46: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 104 ] 
17:13:46: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x59
17:13:46: [INFO] - Number of Written blocks matches as per argument provided.
17:13:46: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3A03FAA to endLba:0x3A04081
17:13:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3A03FAA to EndLba:0x3A04081 with Anyword Pattern 1
17:13:46: [ WrLbaNoData(0x3A03FAA, 0xD7, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 105 ] 
17:13:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3A03FAA to EndLba:0x3A04081 with Anyword Pattern 1 

17:13:46: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x3A03FAA to endLba:0x3A04081
17:13:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x3A03FAA to EndLba:0x3A04081 with Anyword Pattern 1
17:13:46: [ RdLbaNoData(0x3A03FAA, 0xD7, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 106 ] 
17:13:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x3A03FAA to EndLba:0x3A04081 with Anyword Pattern 1 

17:13:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED510>, <py_sfcl.CommandDataDefinition object at 0x061ED5A0>) , Command count = 107 ] 
17:13:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:46: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 108 ] 
17:13:46: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xD7
17:13:46: [INFO] - Number of Written blocks matches as per argument provided.
17:13:46: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x2C88A2C to endLba:0x2C88ADF
17:13:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2C88A2C to EndLba:0x2C88ADF with Anyword Pattern 3
17:13:46: [ WrLbaNoData(0x2C88A2C, 0xB3, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 109 ] 
17:13:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2C88A2C to EndLba:0x2C88ADF with Anyword Pattern 3 

17:13:46: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x2C88A2C to endLba:0x2C88ADF
17:13:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2C88A2C to EndLba:0x2C88ADF with Anyword Pattern 3
17:13:46: [ RdLbaNoData(0x2C88A2C, 0xB3, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 110 ] 
17:13:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2C88A2C to EndLba:0x2C88ADF with Anyword Pattern 3 

17:13:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED630>, <py_sfcl.CommandDataDefinition object at 0x061ED6C0>) , Command count = 111 ] 
17:13:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:46: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 112 ] 
17:13:46: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xB3
17:13:46: [INFO] - Number of Written blocks matches as per argument provided.
17:13:46: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x18E2620 to endLba:0x18E26A4
17:13:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x18E2620 to EndLba:0x18E26A4 with Anyword Pattern 2
17:13:46: [ WrLbaNoData(0x18E2620, 0x84, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 113 ] 
17:13:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x18E2620 to EndLba:0x18E26A4 with Anyword Pattern 2 

17:13:46: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x18E2620 to endLba:0x18E26A4
17:13:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x18E2620 to EndLba:0x18E26A4 with Anyword Pattern 2
17:13:46: [ RdLbaNoData(0x18E2620, 0x84, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 114 ] 
17:13:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x18E2620 to EndLba:0x18E26A4 with Anyword Pattern 2 

17:13:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED750>, <py_sfcl.CommandDataDefinition object at 0x061ED7E0>) , Command count = 115 ] 
17:13:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:46: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 116 ] 
17:13:46: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x84
17:13:46: [INFO] - Number of Written blocks matches as per argument provided.
17:13:46: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x2EC135E to endLba:0x2EC1432
17:13:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2EC135E to EndLba:0x2EC1432 with Anyword Pattern 1
17:13:46: [ WrLbaNoData(0x2EC135E, 0xD4, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 117 ] 
17:13:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2EC135E to EndLba:0x2EC1432 with Anyword Pattern 1 

17:13:46: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x2EC135E to endLba:0x2EC1432
17:13:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2EC135E to EndLba:0x2EC1432 with Anyword Pattern 1
17:13:47: [ RdLbaNoData(0x2EC135E, 0xD4, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 118 ] 
17:13:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2EC135E to EndLba:0x2EC1432 with Anyword Pattern 1 

17:13:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED870>, <py_sfcl.CommandDataDefinition object at 0x061ED900>) , Command count = 119 ] 
17:13:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:47: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 120 ] 
17:13:47: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xD4
17:13:47: [INFO] - Number of Written blocks matches as per argument provided.
17:13:47: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x35D6251 to endLba:0x35D629F
17:13:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x35D6251 to EndLba:0x35D629F with Anyword Pattern 3
17:13:47: [ WrLbaNoData(0x35D6251, 0x4E, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 121 ] 
17:13:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x35D6251 to EndLba:0x35D629F with Anyword Pattern 3 

17:13:47: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x35D6251 to endLba:0x35D629F
17:13:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x35D6251 to EndLba:0x35D629F with Anyword Pattern 3
17:13:47: [ RdLbaNoData(0x35D6251, 0x4E, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 122 ] 
17:13:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x35D6251 to EndLba:0x35D629F with Anyword Pattern 3 

17:13:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED990>, <py_sfcl.CommandDataDefinition object at 0x061EDA20>) , Command count = 123 ] 
17:13:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:47: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 124 ] 
17:13:47: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x4E
17:13:47: [INFO] - Number of Written blocks matches as per argument provided.
17:13:47: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x1133AF to endLba:0x11342B
17:13:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1133AF to EndLba:0x11342B with Anyword Pattern 3
17:13:47: [ WrLbaNoData(0x1133AF, 0x7C, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 125 ] 
17:13:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1133AF to EndLba:0x11342B with Anyword Pattern 3 

17:13:47: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x1133AF to endLba:0x11342B
17:13:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x1133AF to EndLba:0x11342B with Anyword Pattern 3
17:13:47: [ RdLbaNoData(0x1133AF, 0x7C, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 126 ] 
17:13:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x1133AF to EndLba:0x11342B with Anyword Pattern 3 

17:13:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDAB0>, <py_sfcl.CommandDataDefinition object at 0x061EDB40>) , Command count = 127 ] 
17:13:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:47: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 128 ] 
17:13:47: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x7C
17:13:47: [INFO] - Number of Written blocks matches as per argument provided.
17:13:47: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x1E5219 to endLba:0x1E528C
17:13:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1E5219 to EndLba:0x1E528C with Anyword Pattern 3
17:13:47: [ WrLbaNoData(0x1E5219, 0x73, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 129 ] 
17:13:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1E5219 to EndLba:0x1E528C with Anyword Pattern 3 

17:13:47: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x1E5219 to endLba:0x1E528C
17:13:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x1E5219 to EndLba:0x1E528C with Anyword Pattern 3
17:13:47: [ RdLbaNoData(0x1E5219, 0x73, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 130 ] 
17:13:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x1E5219 to EndLba:0x1E528C with Anyword Pattern 3 

17:13:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDBD0>, <py_sfcl.CommandDataDefinition object at 0x061EDC60>) , Command count = 131 ] 
17:13:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:47: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 132 ] 
17:13:47: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x73
17:13:47: [INFO] - Number of Written blocks matches as per argument provided.
17:13:47: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x2567434 to endLba:0x25674A8
17:13:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2567434 to EndLba:0x25674A8 with Anyword Pattern 1
17:13:47: [ WrLbaNoData(0x2567434, 0x74, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 133 ] 
17:13:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2567434 to EndLba:0x25674A8 with Anyword Pattern 1 

17:13:47: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x2567434 to endLba:0x25674A8
17:13:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2567434 to EndLba:0x25674A8 with Anyword Pattern 1
17:13:47: [ RdLbaNoData(0x2567434, 0x74, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 134 ] 
17:13:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2567434 to EndLba:0x25674A8 with Anyword Pattern 1 

17:13:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDCF0>, <py_sfcl.CommandDataDefinition object at 0x061EDD80>) , Command count = 135 ] 
17:13:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:48: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 136 ] 
17:13:48: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x74
17:13:48: [INFO] - Number of Written blocks matches as per argument provided.
17:13:48: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x2BA1211 to endLba:0x2BA12BF
17:13:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2BA1211 to EndLba:0x2BA12BF with Anyword Pattern 3
17:13:48: [ WrLbaNoData(0x2BA1211, 0xAE, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 137 ] 
17:13:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2BA1211 to EndLba:0x2BA12BF with Anyword Pattern 3 

17:13:48: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x2BA1211 to endLba:0x2BA12BF
17:13:48: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2BA1211 to EndLba:0x2BA12BF with Anyword Pattern 3
17:13:48: [ RdLbaNoData(0x2BA1211, 0xAE, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 138 ] 
17:13:48: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2BA1211 to EndLba:0x2BA12BF with Anyword Pattern 3 

17:13:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDE10>, <py_sfcl.CommandDataDefinition object at 0x061EDEA0>) , Command count = 139 ] 
17:13:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:48: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 140 ] 
17:13:48: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xAE
17:13:48: [INFO] - Number of Written blocks matches as per argument provided.
17:13:48: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x30F6466 to endLba:0x30F651F
17:13:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x30F6466 to EndLba:0x30F651F with Anyword Pattern 1
17:13:48: [ WrLbaNoData(0x30F6466, 0xB9, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 141 ] 
17:13:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x30F6466 to EndLba:0x30F651F with Anyword Pattern 1 

17:13:48: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x30F6466 to endLba:0x30F651F
17:13:48: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x30F6466 to EndLba:0x30F651F with Anyword Pattern 1
17:13:48: [ RdLbaNoData(0x30F6466, 0xB9, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 142 ] 
17:13:48: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x30F6466 to EndLba:0x30F651F with Anyword Pattern 1 

17:13:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDF30>, <py_sfcl.CommandDataDefinition object at 0x061EDFC0>) , Command count = 143 ] 
17:13:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:48: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 144 ] 
17:13:48: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xB9
17:13:48: [INFO] - Number of Written blocks matches as per argument provided.
17:13:48: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x26997E3 to endLba:0x26998C7
17:13:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x26997E3 to EndLba:0x26998C7 with Anyword Pattern 3
17:13:48: [ WrLbaNoData(0x26997E3, 0xE4, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 145 ] 
17:13:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x26997E3 to EndLba:0x26998C7 with Anyword Pattern 3 

17:13:48: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x26997E3 to endLba:0x26998C7
17:13:48: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x26997E3 to EndLba:0x26998C7 with Anyword Pattern 3
17:13:48: [ RdLbaNoData(0x26997E3, 0xE4, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 146 ] 
17:13:48: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x26997E3 to EndLba:0x26998C7 with Anyword Pattern 3 

17:13:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5090>, <py_sfcl.CommandDataDefinition object at 0x061F5120>) , Command count = 147 ] 
17:13:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:49: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 148 ] 
17:13:49: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xE4
17:13:49: [INFO] - Number of Written blocks matches as per argument provided.
17:13:49: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0xE3BF9E to endLba:0xE3C09D
17:13:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xE3BF9E to EndLba:0xE3C09D with Anyword Pattern 1
17:13:49: [ WrLbaNoData(0xE3BF9E, 0xFF, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 149 ] 
17:13:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xE3BF9E to EndLba:0xE3C09D with Anyword Pattern 1 

17:13:49: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0xE3BF9E to endLba:0xE3C09D
17:13:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0xE3BF9E to EndLba:0xE3C09D with Anyword Pattern 1
17:13:49: [ RdLbaNoData(0xE3BF9E, 0xFF, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 150 ] 
17:13:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0xE3BF9E to EndLba:0xE3C09D with Anyword Pattern 1 

17:13:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F51B0>, <py_sfcl.CommandDataDefinition object at 0x061F5240>) , Command count = 151 ] 
17:13:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:49: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 152 ] 
17:13:49: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xFF
17:13:49: [INFO] - Number of Written blocks matches as per argument provided.
17:13:49: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x8EAE48 to endLba:0x8EAF12
17:13:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x8EAE48 to EndLba:0x8EAF12 with Anyword Pattern 1
17:13:49: [ WrLbaNoData(0x8EAE48, 0xCA, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 153 ] 
17:13:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x8EAE48 to EndLba:0x8EAF12 with Anyword Pattern 1 

17:13:49: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x8EAE48 to endLba:0x8EAF12
17:13:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x8EAE48 to EndLba:0x8EAF12 with Anyword Pattern 1
17:13:49: [ RdLbaNoData(0x8EAE48, 0xCA, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 154 ] 
17:13:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x8EAE48 to EndLba:0x8EAF12 with Anyword Pattern 1 

17:13:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F52D0>, <py_sfcl.CommandDataDefinition object at 0x061F5360>) , Command count = 155 ] 
17:13:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:49: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 156 ] 
17:13:49: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xCA
17:13:49: [INFO] - Number of Written blocks matches as per argument provided.
17:13:49: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x1632B14 to endLba:0x1632B6C
17:13:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1632B14 to EndLba:0x1632B6C with Anyword Pattern 1
17:13:49: [ WrLbaNoData(0x1632B14, 0x58, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 157 ] 
17:13:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1632B14 to EndLba:0x1632B6C with Anyword Pattern 1 

17:13:49: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x1632B14 to endLba:0x1632B6C
17:13:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x1632B14 to EndLba:0x1632B6C with Anyword Pattern 1
17:13:49: [ RdLbaNoData(0x1632B14, 0x58, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 158 ] 
17:13:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x1632B14 to EndLba:0x1632B6C with Anyword Pattern 1 

17:13:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F53F0>, <py_sfcl.CommandDataDefinition object at 0x061F5480>) , Command count = 159 ] 
17:13:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:49: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 160 ] 
17:13:49: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x58
17:13:49: [INFO] - Number of Written blocks matches as per argument provided.
17:13:49: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x2ACD4FF to endLba:0x2ACD593
17:13:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2ACD4FF to EndLba:0x2ACD593 with Anyword Pattern 3
17:13:49: [ WrLbaNoData(0x2ACD4FF, 0x94, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 161 ] 
17:13:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2ACD4FF to EndLba:0x2ACD593 with Anyword Pattern 3 

17:13:49: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x2ACD4FF to endLba:0x2ACD593
17:13:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2ACD4FF to EndLba:0x2ACD593 with Anyword Pattern 3
17:13:49: [ RdLbaNoData(0x2ACD4FF, 0x94, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 162 ] 
17:13:50: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2ACD4FF to EndLba:0x2ACD593 with Anyword Pattern 3 

17:13:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5510>, <py_sfcl.CommandDataDefinition object at 0x061F55A0>) , Command count = 163 ] 
17:13:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:50: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 164 ] 
17:13:50: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x94
17:13:50: [INFO] - Number of Written blocks matches as per argument provided.
17:13:50: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x31DB40 to endLba:0x31DC04
17:13:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x31DB40 to EndLba:0x31DC04 with Anyword Pattern 3
17:13:50: [ WrLbaNoData(0x31DB40, 0xC4, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 165 ] 
17:13:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x31DB40 to EndLba:0x31DC04 with Anyword Pattern 3 

17:13:50: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x31DB40 to endLba:0x31DC04
17:13:50: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x31DB40 to EndLba:0x31DC04 with Anyword Pattern 3
17:13:50: [ RdLbaNoData(0x31DB40, 0xC4, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 166 ] 
17:13:50: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x31DB40 to EndLba:0x31DC04 with Anyword Pattern 3 

17:13:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5630>, <py_sfcl.CommandDataDefinition object at 0x061F56C0>) , Command count = 167 ] 
17:13:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:50: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 168 ] 
17:13:50: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xC4
17:13:50: [INFO] - Number of Written blocks matches as per argument provided.
17:13:50: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x30A0C51 to endLba:0x30A0D22
17:13:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x30A0C51 to EndLba:0x30A0D22 with Anyword Pattern 3
17:13:50: [ WrLbaNoData(0x30A0C51, 0xD1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 169 ] 
17:13:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x30A0C51 to EndLba:0x30A0D22 with Anyword Pattern 3 

17:13:50: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x30A0C51 to endLba:0x30A0D22
17:13:50: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x30A0C51 to EndLba:0x30A0D22 with Anyword Pattern 3
17:13:50: [ RdLbaNoData(0x30A0C51, 0xD1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 170 ] 
17:13:50: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x30A0C51 to EndLba:0x30A0D22 with Anyword Pattern 3 

17:13:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5750>, <py_sfcl.CommandDataDefinition object at 0x061F57E0>) , Command count = 171 ] 
17:13:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:50: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 172 ] 
17:13:50: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xD1
17:13:50: [INFO] - Number of Written blocks matches as per argument provided.
17:13:50: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B72318 to endLba:0x3B723FF
17:13:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B72318 to EndLba:0x3B723FF with Anyword Pattern 1
17:13:50: [ WrLbaNoData(0x3B72318, 0xE7, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 173 ] 
17:13:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B72318 to EndLba:0x3B723FF with Anyword Pattern 1 

17:13:50: [CH4344_Send_Num_WR_Blocks]#### Single Read to the card from startLba:0x3B72318 to endLba:0x3B723FF
17:13:50: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B72318 to EndLba:0x3B723FF with Anyword Pattern 1
17:13:50: [ RdLbaNoData(0x3B72318, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 174 ] 
17:13:50: [ RdLbaNoData(0x3B72319, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 175 ] 
17:13:50: [ RdLbaNoData(0x3B7231A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 176 ] 
17:13:50: [ RdLbaNoData(0x3B7231B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 177 ] 
17:13:50: [ RdLbaNoData(0x3B7231C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 178 ] 
17:13:50: [ RdLbaNoData(0x3B7231D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 179 ] 
17:13:50: [ RdLbaNoData(0x3B7231E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 180 ] 
17:13:50: [ RdLbaNoData(0x3B7231F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 181 ] 
17:13:51: [ RdLbaNoData(0x3B72320, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 182 ] 
17:13:51: [ RdLbaNoData(0x3B72321, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 183 ] 
17:13:51: [ RdLbaNoData(0x3B72322, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 184 ] 
17:13:51: [ RdLbaNoData(0x3B72323, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 185 ] 
17:13:51: [ RdLbaNoData(0x3B72324, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 186 ] 
17:13:51: [ RdLbaNoData(0x3B72325, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 187 ] 
17:13:51: [ RdLbaNoData(0x3B72326, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 188 ] 
17:13:51: [ RdLbaNoData(0x3B72327, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 189 ] 
17:13:51: [ RdLbaNoData(0x3B72328, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 190 ] 
17:13:51: [ RdLbaNoData(0x3B72329, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 191 ] 
17:13:51: [ RdLbaNoData(0x3B7232A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 192 ] 
17:13:51: [ RdLbaNoData(0x3B7232B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 193 ] 
17:13:51: [ RdLbaNoData(0x3B7232C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 194 ] 
17:13:51: [ RdLbaNoData(0x3B7232D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 195 ] 
17:13:51: [ RdLbaNoData(0x3B7232E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 196 ] 
17:13:51: [ RdLbaNoData(0x3B7232F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 197 ] 
17:13:51: [ RdLbaNoData(0x3B72330, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 198 ] 
17:13:51: [ RdLbaNoData(0x3B72331, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 199 ] 
17:13:51: [ RdLbaNoData(0x3B72332, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 200 ] 
17:13:51: [ RdLbaNoData(0x3B72333, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 201 ] 
17:13:51: [ RdLbaNoData(0x3B72334, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 202 ] 
17:13:51: [ RdLbaNoData(0x3B72335, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 203 ] 
17:13:51: [ RdLbaNoData(0x3B72336, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 204 ] 
17:13:51: [ RdLbaNoData(0x3B72337, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 205 ] 
17:13:51: [ RdLbaNoData(0x3B72338, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 206 ] 
17:13:51: [ RdLbaNoData(0x3B72339, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 207 ] 
17:13:51: [ RdLbaNoData(0x3B7233A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 208 ] 
17:13:51: [ RdLbaNoData(0x3B7233B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 209 ] 
17:13:51: [ RdLbaNoData(0x3B7233C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 210 ] 
17:13:51: [ RdLbaNoData(0x3B7233D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 211 ] 
17:13:51: [ RdLbaNoData(0x3B7233E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 212 ] 
17:13:51: [ RdLbaNoData(0x3B7233F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 213 ] 
17:13:51: [ RdLbaNoData(0x3B72340, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 214 ] 
17:13:51: [ RdLbaNoData(0x3B72341, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 215 ] 
17:13:51: [ RdLbaNoData(0x3B72342, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 216 ] 
17:13:51: [ RdLbaNoData(0x3B72343, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 217 ] 
17:13:51: [ RdLbaNoData(0x3B72344, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 218 ] 
17:13:51: [ RdLbaNoData(0x3B72345, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 219 ] 
17:13:52: [ RdLbaNoData(0x3B72346, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 220 ] 
17:13:52: [ RdLbaNoData(0x3B72347, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 221 ] 
17:13:52: [ RdLbaNoData(0x3B72348, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 222 ] 
17:13:52: [ RdLbaNoData(0x3B72349, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 223 ] 
17:13:52: [ RdLbaNoData(0x3B7234A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 224 ] 
17:13:52: [ RdLbaNoData(0x3B7234B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 225 ] 
17:13:52: [ RdLbaNoData(0x3B7234C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 226 ] 
17:13:52: [ RdLbaNoData(0x3B7234D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 227 ] 
17:13:52: [ RdLbaNoData(0x3B7234E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 228 ] 
17:13:52: [ RdLbaNoData(0x3B7234F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 229 ] 
17:13:52: [ RdLbaNoData(0x3B72350, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 230 ] 
17:13:52: [ RdLbaNoData(0x3B72351, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 231 ] 
17:13:52: [ RdLbaNoData(0x3B72352, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 232 ] 
17:13:52: [ RdLbaNoData(0x3B72353, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 233 ] 
17:13:52: [ RdLbaNoData(0x3B72354, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 234 ] 
17:13:52: [ RdLbaNoData(0x3B72355, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 235 ] 
17:13:52: [ RdLbaNoData(0x3B72356, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 236 ] 
17:13:52: [ RdLbaNoData(0x3B72357, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 237 ] 
17:13:52: [ RdLbaNoData(0x3B72358, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 238 ] 
17:13:52: [ RdLbaNoData(0x3B72359, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 239 ] 
17:13:52: [ RdLbaNoData(0x3B7235A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 240 ] 
17:13:52: [ RdLbaNoData(0x3B7235B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 241 ] 
17:13:52: [ RdLbaNoData(0x3B7235C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 242 ] 
17:13:52: [ RdLbaNoData(0x3B7235D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 243 ] 
17:13:52: [ RdLbaNoData(0x3B7235E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 244 ] 
17:13:52: [ RdLbaNoData(0x3B7235F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 245 ] 
17:13:52: [ RdLbaNoData(0x3B72360, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 246 ] 
17:13:52: [ RdLbaNoData(0x3B72361, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 247 ] 
17:13:52: [ RdLbaNoData(0x3B72362, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 248 ] 
17:13:52: [ RdLbaNoData(0x3B72363, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 249 ] 
17:13:52: [ RdLbaNoData(0x3B72364, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 250 ] 
17:13:52: [ RdLbaNoData(0x3B72365, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 251 ] 
17:13:52: [ RdLbaNoData(0x3B72366, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 252 ] 
17:13:52: [ RdLbaNoData(0x3B72367, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 253 ] 
17:13:52: [ RdLbaNoData(0x3B72368, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 254 ] 
17:13:52: [ RdLbaNoData(0x3B72369, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 255 ] 
17:13:52: [ RdLbaNoData(0x3B7236A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 256 ] 
17:13:52: [ RdLbaNoData(0x3B7236B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 257 ] 
17:13:53: [ RdLbaNoData(0x3B7236C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 258 ] 
17:13:53: [ RdLbaNoData(0x3B7236D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 259 ] 
17:13:53: [ RdLbaNoData(0x3B7236E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 260 ] 
17:13:53: [ RdLbaNoData(0x3B7236F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 261 ] 
17:13:53: [ RdLbaNoData(0x3B72370, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 262 ] 
17:13:53: [ RdLbaNoData(0x3B72371, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 263 ] 
17:13:53: [ RdLbaNoData(0x3B72372, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 264 ] 
17:13:53: [ RdLbaNoData(0x3B72373, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 265 ] 
17:13:53: [ RdLbaNoData(0x3B72374, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 266 ] 
17:13:53: [ RdLbaNoData(0x3B72375, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 267 ] 
17:13:53: [ RdLbaNoData(0x3B72376, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 268 ] 
17:13:53: [ RdLbaNoData(0x3B72377, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 269 ] 
17:13:53: [ RdLbaNoData(0x3B72378, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 270 ] 
17:13:53: [ RdLbaNoData(0x3B72379, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 271 ] 
17:13:53: [ RdLbaNoData(0x3B7237A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 272 ] 
17:13:53: [ RdLbaNoData(0x3B7237B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 273 ] 
17:13:53: [ RdLbaNoData(0x3B7237C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 274 ] 
17:13:53: [ RdLbaNoData(0x3B7237D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 275 ] 
17:13:53: [ RdLbaNoData(0x3B7237E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 276 ] 
17:13:53: [ RdLbaNoData(0x3B7237F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 277 ] 
17:13:53: [ RdLbaNoData(0x3B72380, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 278 ] 
17:13:53: [ RdLbaNoData(0x3B72381, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 279 ] 
17:13:53: [ RdLbaNoData(0x3B72382, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 280 ] 
17:13:53: [ RdLbaNoData(0x3B72383, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 281 ] 
17:13:53: [ RdLbaNoData(0x3B72384, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 282 ] 
17:13:53: [ RdLbaNoData(0x3B72385, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 283 ] 
17:13:53: [ RdLbaNoData(0x3B72386, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 284 ] 
17:13:53: [ RdLbaNoData(0x3B72387, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 285 ] 
17:13:53: [ RdLbaNoData(0x3B72388, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 286 ] 
17:13:53: [ RdLbaNoData(0x3B72389, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 287 ] 
17:13:53: [ RdLbaNoData(0x3B7238A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 288 ] 
17:13:53: [ RdLbaNoData(0x3B7238B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 289 ] 
17:13:53: [ RdLbaNoData(0x3B7238C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 290 ] 
17:13:53: [ RdLbaNoData(0x3B7238D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 291 ] 
17:13:53: [ RdLbaNoData(0x3B7238E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 292 ] 
17:13:53: [ RdLbaNoData(0x3B7238F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 293 ] 
17:13:53: [ RdLbaNoData(0x3B72390, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 294 ] 
17:13:53: [ RdLbaNoData(0x3B72391, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 295 ] 
17:13:54: [ RdLbaNoData(0x3B72392, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 296 ] 
17:13:54: [ RdLbaNoData(0x3B72393, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 297 ] 
17:13:54: [ RdLbaNoData(0x3B72394, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 298 ] 
17:13:54: [ RdLbaNoData(0x3B72395, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 299 ] 
17:13:54: [ RdLbaNoData(0x3B72396, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 300 ] 
17:13:54: [ RdLbaNoData(0x3B72397, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 301 ] 
17:13:54: [ RdLbaNoData(0x3B72398, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 302 ] 
17:13:54: [ RdLbaNoData(0x3B72399, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 303 ] 
17:13:54: [ RdLbaNoData(0x3B7239A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 304 ] 
17:13:54: [ RdLbaNoData(0x3B7239B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 305 ] 
17:13:54: [ RdLbaNoData(0x3B7239C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 306 ] 
17:13:54: [ RdLbaNoData(0x3B7239D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 307 ] 
17:13:54: [ RdLbaNoData(0x3B7239E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 308 ] 
17:13:54: [ RdLbaNoData(0x3B7239F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 309 ] 
17:13:54: [ RdLbaNoData(0x3B723A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 310 ] 
17:13:54: [ RdLbaNoData(0x3B723A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 311 ] 
17:13:54: [ RdLbaNoData(0x3B723A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 312 ] 
17:13:54: [ RdLbaNoData(0x3B723A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 313 ] 
17:13:54: [ RdLbaNoData(0x3B723A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 314 ] 
17:13:54: [ RdLbaNoData(0x3B723A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 315 ] 
17:13:54: [ RdLbaNoData(0x3B723A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 316 ] 
17:13:54: [ RdLbaNoData(0x3B723A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 317 ] 
17:13:54: [ RdLbaNoData(0x3B723A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 318 ] 
17:13:54: [ RdLbaNoData(0x3B723A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 319 ] 
17:13:54: [ RdLbaNoData(0x3B723AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 320 ] 
17:13:54: [ RdLbaNoData(0x3B723AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 321 ] 
17:13:54: [ RdLbaNoData(0x3B723AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 322 ] 
17:13:54: [ RdLbaNoData(0x3B723AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 323 ] 
17:13:54: [ RdLbaNoData(0x3B723AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 324 ] 
17:13:54: [ RdLbaNoData(0x3B723AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 325 ] 
17:13:54: [ RdLbaNoData(0x3B723B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 326 ] 
17:13:54: [ RdLbaNoData(0x3B723B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 327 ] 
17:13:55: [ RdLbaNoData(0x3B723B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 328 ] 
17:13:55: [ RdLbaNoData(0x3B723B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 329 ] 
17:13:55: [ RdLbaNoData(0x3B723B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 330 ] 
17:13:55: [ RdLbaNoData(0x3B723B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 331 ] 
17:13:55: [ RdLbaNoData(0x3B723B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 332 ] 
17:13:55: [ RdLbaNoData(0x3B723B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 333 ] 
17:13:55: [ RdLbaNoData(0x3B723B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 334 ] 
17:13:55: [ RdLbaNoData(0x3B723B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 335 ] 
17:13:55: [ RdLbaNoData(0x3B723BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 336 ] 
17:13:55: [ RdLbaNoData(0x3B723BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 337 ] 
17:13:55: [ RdLbaNoData(0x3B723BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 338 ] 
17:13:55: [ RdLbaNoData(0x3B723BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 339 ] 
17:13:55: [ RdLbaNoData(0x3B723BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 340 ] 
17:13:55: [ RdLbaNoData(0x3B723BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 341 ] 
17:13:55: [ RdLbaNoData(0x3B723C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 342 ] 
17:13:55: [ RdLbaNoData(0x3B723C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 343 ] 
17:13:55: [ RdLbaNoData(0x3B723C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 344 ] 
17:13:55: [ RdLbaNoData(0x3B723C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 345 ] 
17:13:55: [ RdLbaNoData(0x3B723C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 346 ] 
17:13:55: [ RdLbaNoData(0x3B723C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 347 ] 
17:13:55: [ RdLbaNoData(0x3B723C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 348 ] 
17:13:55: [ RdLbaNoData(0x3B723C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 349 ] 
17:13:55: [ RdLbaNoData(0x3B723C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 350 ] 
17:13:55: [ RdLbaNoData(0x3B723C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 351 ] 
17:13:55: [ RdLbaNoData(0x3B723CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 352 ] 
17:13:55: [ RdLbaNoData(0x3B723CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 353 ] 
17:13:55: [ RdLbaNoData(0x3B723CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 354 ] 
17:13:55: [ RdLbaNoData(0x3B723CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 355 ] 
17:13:55: [ RdLbaNoData(0x3B723CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 356 ] 
17:13:55: [ RdLbaNoData(0x3B723CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 357 ] 
17:13:55: [ RdLbaNoData(0x3B723D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 358 ] 
17:13:55: [ RdLbaNoData(0x3B723D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 359 ] 
17:13:55: [ RdLbaNoData(0x3B723D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 360 ] 
17:13:56: [ RdLbaNoData(0x3B723D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 361 ] 
17:13:56: [ RdLbaNoData(0x3B723D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 362 ] 
17:13:56: [ RdLbaNoData(0x3B723D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 363 ] 
17:13:56: [ RdLbaNoData(0x3B723D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 364 ] 
17:13:56: [ RdLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 365 ] 
17:13:56: [ RdLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 366 ] 
17:13:56: [ RdLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 367 ] 
17:13:56: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 368 ] 
17:13:56: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 369 ] 
17:13:56: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 370 ] 
17:13:56: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 371 ] 
17:13:56: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 372 ] 
17:13:56: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 373 ] 
17:13:56: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 374 ] 
17:13:56: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 375 ] 
17:13:56: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 376 ] 
17:13:56: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 377 ] 
17:13:56: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 378 ] 
17:13:56: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 379 ] 
17:13:56: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 380 ] 
17:13:56: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 381 ] 
17:13:56: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 382 ] 
17:13:56: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 383 ] 
17:13:56: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 384 ] 
17:13:56: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 385 ] 
17:13:56: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 386 ] 
17:13:56: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 387 ] 
17:13:56: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 388 ] 
17:13:56: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 389 ] 
17:13:56: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 390 ] 
17:13:56: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 391 ] 
17:13:56: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 392 ] 
17:13:56: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 393 ] 
17:13:56: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 394 ] 
17:13:56: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 395 ] 
17:13:56: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 396 ] 
17:13:57: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 397 ] 
17:13:57: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 398 ] 
17:13:57: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 399 ] 
17:13:57: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 400 ] 
17:13:57: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 401 ] 
17:13:57: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 402 ] 
17:13:57: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 403 ] 
17:13:57: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 404 ] 
17:13:57: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B72318 to EndLba:0x3B723FF with Anyword Pattern 1 

17:13:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5870>, <py_sfcl.CommandDataDefinition object at 0x061F5210>) , Command count = 405 ] 
17:13:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:13:57: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 406 ] 
17:13:57: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xE7
17:13:57: [INFO] - Number of Written blocks matches as per argument provided.
17:13:57: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B7235C to endLba:0x3B723FF
17:13:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7235C to EndLba:0x3B723FF with Anyword Pattern 3
17:13:57: [ WrLbaNoData(0x3B7235C, 0xA3, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 407 ] 
17:13:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7235C to EndLba:0x3B723FF with Anyword Pattern 3 

17:13:57: [CH4344_Send_Num_WR_Blocks]#### Single Read to the card from startLba:0x3B7235C to endLba:0x3B723FF
17:13:57: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B7235C to EndLba:0x3B723FF with Anyword Pattern 3
17:13:57: [ RdLbaNoData(0x3B7235C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 408 ] 
17:13:57: [ RdLbaNoData(0x3B7235D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 409 ] 
17:13:57: [ RdLbaNoData(0x3B7235E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 410 ] 
17:13:57: [ RdLbaNoData(0x3B7235F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 411 ] 
17:13:57: [ RdLbaNoData(0x3B72360, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 412 ] 
17:13:57: [ RdLbaNoData(0x3B72361, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 413 ] 
17:13:57: [ RdLbaNoData(0x3B72362, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 414 ] 
17:13:57: [ RdLbaNoData(0x3B72363, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 415 ] 
17:13:57: [ RdLbaNoData(0x3B72364, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 416 ] 
17:13:57: [ RdLbaNoData(0x3B72365, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 417 ] 
17:13:57: [ RdLbaNoData(0x3B72366, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 418 ] 
17:13:57: [ RdLbaNoData(0x3B72367, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 419 ] 
17:13:57: [ RdLbaNoData(0x3B72368, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 420 ] 
17:13:57: [ RdLbaNoData(0x3B72369, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 421 ] 
17:13:57: [ RdLbaNoData(0x3B7236A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 422 ] 
17:13:57: [ RdLbaNoData(0x3B7236B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 423 ] 
17:13:57: [ RdLbaNoData(0x3B7236C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 424 ] 
17:13:57: [ RdLbaNoData(0x3B7236D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 425 ] 
17:13:57: [ RdLbaNoData(0x3B7236E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 426 ] 
17:13:57: [ RdLbaNoData(0x3B7236F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 427 ] 
17:13:57: [ RdLbaNoData(0x3B72370, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 428 ] 
17:13:58: [ RdLbaNoData(0x3B72371, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 429 ] 
17:13:58: [ RdLbaNoData(0x3B72372, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 430 ] 
17:13:58: [ RdLbaNoData(0x3B72373, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 431 ] 
17:13:58: [ RdLbaNoData(0x3B72374, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 432 ] 
17:13:58: [ RdLbaNoData(0x3B72375, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 433 ] 
17:13:58: [ RdLbaNoData(0x3B72376, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 434 ] 
17:13:58: [ RdLbaNoData(0x3B72377, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 435 ] 
17:13:58: [ RdLbaNoData(0x3B72378, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 436 ] 
17:13:58: [ RdLbaNoData(0x3B72379, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 437 ] 
17:13:58: [ RdLbaNoData(0x3B7237A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 438 ] 
17:13:58: [ RdLbaNoData(0x3B7237B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 439 ] 
17:13:58: [ RdLbaNoData(0x3B7237C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 440 ] 
17:13:58: [ RdLbaNoData(0x3B7237D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 441 ] 
17:13:58: [ RdLbaNoData(0x3B7237E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 442 ] 
17:13:58: [ RdLbaNoData(0x3B7237F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 443 ] 
17:13:58: [ RdLbaNoData(0x3B72380, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 444 ] 
17:13:58: [ RdLbaNoData(0x3B72381, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 445 ] 
17:13:58: [ RdLbaNoData(0x3B72382, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 446 ] 
17:13:58: [ RdLbaNoData(0x3B72383, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 447 ] 
17:13:58: [ RdLbaNoData(0x3B72384, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 448 ] 
17:13:58: [ RdLbaNoData(0x3B72385, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 449 ] 
17:13:58: [ RdLbaNoData(0x3B72386, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 450 ] 
17:13:58: [ RdLbaNoData(0x3B72387, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 451 ] 
17:13:58: [ RdLbaNoData(0x3B72388, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 452 ] 
17:13:58: [ RdLbaNoData(0x3B72389, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 453 ] 
17:13:58: [ RdLbaNoData(0x3B7238A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 454 ] 
17:13:58: [ RdLbaNoData(0x3B7238B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 455 ] 
17:13:58: [ RdLbaNoData(0x3B7238C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 456 ] 
17:13:58: [ RdLbaNoData(0x3B7238D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 457 ] 
17:13:58: [ RdLbaNoData(0x3B7238E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 458 ] 
17:13:58: [ RdLbaNoData(0x3B7238F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 459 ] 
17:13:59: [ RdLbaNoData(0x3B72390, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 460 ] 
17:13:59: [ RdLbaNoData(0x3B72391, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 461 ] 
17:13:59: [ RdLbaNoData(0x3B72392, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 462 ] 
17:13:59: [ RdLbaNoData(0x3B72393, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 463 ] 
17:13:59: [ RdLbaNoData(0x3B72394, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 464 ] 
17:13:59: [ RdLbaNoData(0x3B72395, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 465 ] 
17:13:59: [ RdLbaNoData(0x3B72396, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 466 ] 
17:13:59: [ RdLbaNoData(0x3B72397, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 467 ] 
17:13:59: [ RdLbaNoData(0x3B72398, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 468 ] 
17:13:59: [ RdLbaNoData(0x3B72399, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 469 ] 
17:13:59: [ RdLbaNoData(0x3B7239A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 470 ] 
17:13:59: [ RdLbaNoData(0x3B7239B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 471 ] 
17:13:59: [ RdLbaNoData(0x3B7239C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 472 ] 
17:13:59: [ RdLbaNoData(0x3B7239D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 473 ] 
17:13:59: [ RdLbaNoData(0x3B7239E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 474 ] 
17:13:59: [ RdLbaNoData(0x3B7239F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 475 ] 
17:13:59: [ RdLbaNoData(0x3B723A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 476 ] 
17:13:59: [ RdLbaNoData(0x3B723A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 477 ] 
17:13:59: [ RdLbaNoData(0x3B723A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 478 ] 
17:13:59: [ RdLbaNoData(0x3B723A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 479 ] 
17:13:59: [ RdLbaNoData(0x3B723A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 480 ] 
17:13:59: [ RdLbaNoData(0x3B723A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 481 ] 
17:13:59: [ RdLbaNoData(0x3B723A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 482 ] 
17:13:59: [ RdLbaNoData(0x3B723A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 483 ] 
17:13:59: [ RdLbaNoData(0x3B723A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 484 ] 
17:13:59: [ RdLbaNoData(0x3B723A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 485 ] 
17:13:59: [ RdLbaNoData(0x3B723AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 486 ] 
17:13:59: [ RdLbaNoData(0x3B723AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 487 ] 
17:13:59: [ RdLbaNoData(0x3B723AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 488 ] 
17:13:59: [ RdLbaNoData(0x3B723AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 489 ] 
17:13:59: [ RdLbaNoData(0x3B723AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 490 ] 
17:13:59: [ RdLbaNoData(0x3B723AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 491 ] 
17:14:00: [ RdLbaNoData(0x3B723B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 492 ] 
17:14:00: [ RdLbaNoData(0x3B723B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 493 ] 
17:14:00: [ RdLbaNoData(0x3B723B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 494 ] 
17:14:00: [ RdLbaNoData(0x3B723B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 495 ] 
17:14:00: [ RdLbaNoData(0x3B723B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 496 ] 
17:14:00: [ RdLbaNoData(0x3B723B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 497 ] 
17:14:00: [ RdLbaNoData(0x3B723B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 498 ] 
17:14:00: [ RdLbaNoData(0x3B723B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 499 ] 
17:14:00: [ RdLbaNoData(0x3B723B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 500 ] 
17:14:00: [ RdLbaNoData(0x3B723B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 501 ] 
17:14:00: [ RdLbaNoData(0x3B723BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 502 ] 
17:14:00: [ RdLbaNoData(0x3B723BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 503 ] 
17:14:00: [ RdLbaNoData(0x3B723BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 504 ] 
17:14:00: [ RdLbaNoData(0x3B723BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 505 ] 
17:14:00: [ RdLbaNoData(0x3B723BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 506 ] 
17:14:00: [ RdLbaNoData(0x3B723BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 507 ] 
17:14:00: [ RdLbaNoData(0x3B723C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 508 ] 
17:14:00: [ RdLbaNoData(0x3B723C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 509 ] 
17:14:00: [ RdLbaNoData(0x3B723C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 510 ] 
17:14:00: [ RdLbaNoData(0x3B723C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 511 ] 
17:14:00: [ RdLbaNoData(0x3B723C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 512 ] 
17:14:00: [ RdLbaNoData(0x3B723C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 513 ] 
17:14:00: [ RdLbaNoData(0x3B723C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 514 ] 
17:14:00: [ RdLbaNoData(0x3B723C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 515 ] 
17:14:00: [ RdLbaNoData(0x3B723C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 516 ] 
17:14:00: [ RdLbaNoData(0x3B723C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 517 ] 
17:14:00: [ RdLbaNoData(0x3B723CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 518 ] 
17:14:00: [ RdLbaNoData(0x3B723CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 519 ] 
17:14:00: [ RdLbaNoData(0x3B723CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 520 ] 
17:14:00: [ RdLbaNoData(0x3B723CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 521 ] 
17:14:00: [ RdLbaNoData(0x3B723CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 522 ] 
17:14:00: [ RdLbaNoData(0x3B723CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 523 ] 
17:14:01: [ RdLbaNoData(0x3B723D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 524 ] 
17:14:01: [ RdLbaNoData(0x3B723D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 525 ] 
17:14:01: [ RdLbaNoData(0x3B723D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 526 ] 
17:14:01: [ RdLbaNoData(0x3B723D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 527 ] 
17:14:01: [ RdLbaNoData(0x3B723D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 528 ] 
17:14:01: [ RdLbaNoData(0x3B723D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 529 ] 
17:14:01: [ RdLbaNoData(0x3B723D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 530 ] 
17:14:01: [ RdLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 531 ] 
17:14:01: [ RdLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 532 ] 
17:14:01: [ RdLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 533 ] 
17:14:01: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 534 ] 
17:14:01: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 535 ] 
17:14:01: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 536 ] 
17:14:01: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 537 ] 
17:14:01: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 538 ] 
17:14:01: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 539 ] 
17:14:01: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 540 ] 
17:14:01: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 541 ] 
17:14:01: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 542 ] 
17:14:01: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 543 ] 
17:14:01: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 544 ] 
17:14:01: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 545 ] 
17:14:01: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 546 ] 
17:14:01: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 547 ] 
17:14:01: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 548 ] 
17:14:01: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 549 ] 
17:14:01: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 550 ] 
17:14:01: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 551 ] 
17:14:01: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 552 ] 
17:14:01: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 553 ] 
17:14:01: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 554 ] 
17:14:01: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 555 ] 
17:14:01: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 556 ] 
17:14:01: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 557 ] 
17:14:01: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 558 ] 
17:14:01: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 559 ] 
17:14:01: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 560 ] 
17:14:01: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 561 ] 
17:14:02: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 562 ] 
17:14:02: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 563 ] 
17:14:02: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 564 ] 
17:14:02: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 565 ] 
17:14:02: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 566 ] 
17:14:02: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 567 ] 
17:14:02: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 568 ] 
17:14:02: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 569 ] 
17:14:02: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 570 ] 
17:14:02: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B7235C to EndLba:0x3B723FF with Anyword Pattern 3 

17:14:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F52A0>, <py_sfcl.CommandDataDefinition object at 0x061E9A80>) , Command count = 571 ] 
17:14:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:02: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 572 ] 
17:14:02: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xA3
17:14:02: [INFO] - Number of Written blocks matches as per argument provided.
17:14:02: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B72322 to endLba:0x3B723FF
17:14:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B72322 to EndLba:0x3B723FF with Anyword Pattern 3
17:14:02: [ WrLbaNoData(0x3B72322, 0xDD, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 573 ] 
17:14:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B72322 to EndLba:0x3B723FF with Anyword Pattern 3 

17:14:02: [CH4344_Send_Num_WR_Blocks]#### Single Read to the card from startLba:0x3B72322 to endLba:0x3B723FF
17:14:02: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B72322 to EndLba:0x3B723FF with Anyword Pattern 3
17:14:02: [ RdLbaNoData(0x3B72322, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 574 ] 
17:14:02: [ RdLbaNoData(0x3B72323, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 575 ] 
17:14:02: [ RdLbaNoData(0x3B72324, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 576 ] 
17:14:02: [ RdLbaNoData(0x3B72325, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 577 ] 
17:14:02: [ RdLbaNoData(0x3B72326, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 578 ] 
17:14:02: [ RdLbaNoData(0x3B72327, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 579 ] 
17:14:02: [ RdLbaNoData(0x3B72328, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 580 ] 
17:14:02: [ RdLbaNoData(0x3B72329, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 581 ] 
17:14:02: [ RdLbaNoData(0x3B7232A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 582 ] 
17:14:02: [ RdLbaNoData(0x3B7232B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 583 ] 
17:14:02: [ RdLbaNoData(0x3B7232C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 584 ] 
17:14:02: [ RdLbaNoData(0x3B7232D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 585 ] 
17:14:02: [ RdLbaNoData(0x3B7232E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 586 ] 
17:14:03: [ RdLbaNoData(0x3B7232F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 587 ] 
17:14:03: [ RdLbaNoData(0x3B72330, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 588 ] 
17:14:03: [ RdLbaNoData(0x3B72331, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 589 ] 
17:14:03: [ RdLbaNoData(0x3B72332, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 590 ] 
17:14:03: [ RdLbaNoData(0x3B72333, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 591 ] 
17:14:03: [ RdLbaNoData(0x3B72334, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 592 ] 
17:14:03: [ RdLbaNoData(0x3B72335, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 593 ] 
17:14:03: [ RdLbaNoData(0x3B72336, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 594 ] 
17:14:03: [ RdLbaNoData(0x3B72337, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 595 ] 
17:14:03: [ RdLbaNoData(0x3B72338, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 596 ] 
17:14:03: [ RdLbaNoData(0x3B72339, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 597 ] 
17:14:03: [ RdLbaNoData(0x3B7233A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 598 ] 
17:14:03: [ RdLbaNoData(0x3B7233B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 599 ] 
17:14:03: [ RdLbaNoData(0x3B7233C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 600 ] 
17:14:03: [ RdLbaNoData(0x3B7233D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 601 ] 
17:14:03: [ RdLbaNoData(0x3B7233E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 602 ] 
17:14:03: [ RdLbaNoData(0x3B7233F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 603 ] 
17:14:03: [ RdLbaNoData(0x3B72340, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 604 ] 
17:14:03: [ RdLbaNoData(0x3B72341, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 605 ] 
17:14:03: [ RdLbaNoData(0x3B72342, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 606 ] 
17:14:03: [ RdLbaNoData(0x3B72343, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 607 ] 
17:14:03: [ RdLbaNoData(0x3B72344, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 608 ] 
17:14:03: [ RdLbaNoData(0x3B72345, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 609 ] 
17:14:03: [ RdLbaNoData(0x3B72346, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 610 ] 
17:14:03: [ RdLbaNoData(0x3B72347, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 611 ] 
17:14:03: [ RdLbaNoData(0x3B72348, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 612 ] 
17:14:03: [ RdLbaNoData(0x3B72349, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 613 ] 
17:14:03: [ RdLbaNoData(0x3B7234A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 614 ] 
17:14:03: [ RdLbaNoData(0x3B7234B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 615 ] 
17:14:03: [ RdLbaNoData(0x3B7234C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 616 ] 
17:14:03: [ RdLbaNoData(0x3B7234D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 617 ] 
17:14:03: [ RdLbaNoData(0x3B7234E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 618 ] 
17:14:04: [ RdLbaNoData(0x3B7234F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 619 ] 
17:14:04: [ RdLbaNoData(0x3B72350, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 620 ] 
17:14:04: [ RdLbaNoData(0x3B72351, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 621 ] 
17:14:04: [ RdLbaNoData(0x3B72352, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 622 ] 
17:14:04: [ RdLbaNoData(0x3B72353, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 623 ] 
17:14:04: [ RdLbaNoData(0x3B72354, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 624 ] 
17:14:04: [ RdLbaNoData(0x3B72355, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 625 ] 
17:14:04: [ RdLbaNoData(0x3B72356, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 626 ] 
17:14:04: [ RdLbaNoData(0x3B72357, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 627 ] 
17:14:04: [ RdLbaNoData(0x3B72358, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 628 ] 
17:14:04: [ RdLbaNoData(0x3B72359, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 629 ] 
17:14:04: [ RdLbaNoData(0x3B7235A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 630 ] 
17:14:04: [ RdLbaNoData(0x3B7235B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 631 ] 
17:14:04: [ RdLbaNoData(0x3B7235C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 632 ] 
17:14:04: [ RdLbaNoData(0x3B7235D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 633 ] 
17:14:04: [ RdLbaNoData(0x3B7235E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 634 ] 
17:14:04: [ RdLbaNoData(0x3B7235F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 635 ] 
17:14:04: [ RdLbaNoData(0x3B72360, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 636 ] 
17:14:04: [ RdLbaNoData(0x3B72361, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 637 ] 
17:14:04: [ RdLbaNoData(0x3B72362, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 638 ] 
17:14:04: [ RdLbaNoData(0x3B72363, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 639 ] 
17:14:04: [ RdLbaNoData(0x3B72364, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 640 ] 
17:14:04: [ RdLbaNoData(0x3B72365, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 641 ] 
17:14:04: [ RdLbaNoData(0x3B72366, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 642 ] 
17:14:04: [ RdLbaNoData(0x3B72367, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 643 ] 
17:14:04: [ RdLbaNoData(0x3B72368, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 644 ] 
17:14:04: [ RdLbaNoData(0x3B72369, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 645 ] 
17:14:04: [ RdLbaNoData(0x3B7236A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 646 ] 
17:14:04: [ RdLbaNoData(0x3B7236B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 647 ] 
17:14:04: [ RdLbaNoData(0x3B7236C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 648 ] 
17:14:04: [ RdLbaNoData(0x3B7236D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 649 ] 
17:14:04: [ RdLbaNoData(0x3B7236E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 650 ] 
17:14:04: [ RdLbaNoData(0x3B7236F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 651 ] 
17:14:04: [ RdLbaNoData(0x3B72370, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 652 ] 
17:14:04: [ RdLbaNoData(0x3B72371, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 653 ] 
17:14:04: [ RdLbaNoData(0x3B72372, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 654 ] 
17:14:04: [ RdLbaNoData(0x3B72373, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 655 ] 
17:14:04: [ RdLbaNoData(0x3B72374, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 656 ] 
17:14:05: [ RdLbaNoData(0x3B72375, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 657 ] 
17:14:05: [ RdLbaNoData(0x3B72376, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 658 ] 
17:14:05: [ RdLbaNoData(0x3B72377, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 659 ] 
17:14:05: [ RdLbaNoData(0x3B72378, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 660 ] 
17:14:05: [ RdLbaNoData(0x3B72379, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 661 ] 
17:14:05: [ RdLbaNoData(0x3B7237A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 662 ] 
17:14:05: [ RdLbaNoData(0x3B7237B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 663 ] 
17:14:05: [ RdLbaNoData(0x3B7237C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 664 ] 
17:14:05: [ RdLbaNoData(0x3B7237D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 665 ] 
17:14:05: [ RdLbaNoData(0x3B7237E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 666 ] 
17:14:05: [ RdLbaNoData(0x3B7237F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 667 ] 
17:14:05: [ RdLbaNoData(0x3B72380, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 668 ] 
17:14:05: [ RdLbaNoData(0x3B72381, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 669 ] 
17:14:05: [ RdLbaNoData(0x3B72382, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 670 ] 
17:14:05: [ RdLbaNoData(0x3B72383, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 671 ] 
17:14:05: [ RdLbaNoData(0x3B72384, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 672 ] 
17:14:05: [ RdLbaNoData(0x3B72385, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 673 ] 
17:14:05: [ RdLbaNoData(0x3B72386, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 674 ] 
17:14:05: [ RdLbaNoData(0x3B72387, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 675 ] 
17:14:05: [ RdLbaNoData(0x3B72388, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 676 ] 
17:14:05: [ RdLbaNoData(0x3B72389, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 677 ] 
17:14:05: [ RdLbaNoData(0x3B7238A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 678 ] 
17:14:05: [ RdLbaNoData(0x3B7238B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 679 ] 
17:14:05: [ RdLbaNoData(0x3B7238C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 680 ] 
17:14:05: [ RdLbaNoData(0x3B7238D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 681 ] 
17:14:05: [ RdLbaNoData(0x3B7238E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 682 ] 
17:14:05: [ RdLbaNoData(0x3B7238F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 683 ] 
17:14:05: [ RdLbaNoData(0x3B72390, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 684 ] 
17:14:05: [ RdLbaNoData(0x3B72391, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 685 ] 
17:14:05: [ RdLbaNoData(0x3B72392, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 686 ] 
17:14:05: [ RdLbaNoData(0x3B72393, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 687 ] 
17:14:06: [ RdLbaNoData(0x3B72394, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 688 ] 
17:14:06: [ RdLbaNoData(0x3B72395, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 689 ] 
17:14:06: [ RdLbaNoData(0x3B72396, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 690 ] 
17:14:06: [ RdLbaNoData(0x3B72397, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 691 ] 
17:14:06: [ RdLbaNoData(0x3B72398, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 692 ] 
17:14:06: [ RdLbaNoData(0x3B72399, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 693 ] 
17:14:06: [ RdLbaNoData(0x3B7239A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 694 ] 
17:14:06: [ RdLbaNoData(0x3B7239B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 695 ] 
17:14:06: [ RdLbaNoData(0x3B7239C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 696 ] 
17:14:06: [ RdLbaNoData(0x3B7239D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 697 ] 
17:14:06: [ RdLbaNoData(0x3B7239E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 698 ] 
17:14:06: [ RdLbaNoData(0x3B7239F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 699 ] 
17:14:06: [ RdLbaNoData(0x3B723A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 700 ] 
17:14:06: [ RdLbaNoData(0x3B723A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 701 ] 
17:14:06: [ RdLbaNoData(0x3B723A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 702 ] 
17:14:06: [ RdLbaNoData(0x3B723A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 703 ] 
17:14:06: [ RdLbaNoData(0x3B723A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 704 ] 
17:14:06: [ RdLbaNoData(0x3B723A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 705 ] 
17:14:06: [ RdLbaNoData(0x3B723A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 706 ] 
17:14:06: [ RdLbaNoData(0x3B723A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 707 ] 
17:14:06: [ RdLbaNoData(0x3B723A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 708 ] 
17:14:06: [ RdLbaNoData(0x3B723A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 709 ] 
17:14:06: [ RdLbaNoData(0x3B723AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 710 ] 
17:14:06: [ RdLbaNoData(0x3B723AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 711 ] 
17:14:06: [ RdLbaNoData(0x3B723AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 712 ] 
17:14:06: [ RdLbaNoData(0x3B723AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 713 ] 
17:14:06: [ RdLbaNoData(0x3B723AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 714 ] 
17:14:06: [ RdLbaNoData(0x3B723AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 715 ] 
17:14:06: [ RdLbaNoData(0x3B723B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 716 ] 
17:14:06: [ RdLbaNoData(0x3B723B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 717 ] 
17:14:06: [ RdLbaNoData(0x3B723B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 718 ] 
17:14:06: [ RdLbaNoData(0x3B723B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 719 ] 
17:14:07: [ RdLbaNoData(0x3B723B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 720 ] 
17:14:07: [ RdLbaNoData(0x3B723B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 721 ] 
17:14:07: [ RdLbaNoData(0x3B723B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 722 ] 
17:14:07: [ RdLbaNoData(0x3B723B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 723 ] 
17:14:07: [ RdLbaNoData(0x3B723B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 724 ] 
17:14:07: [ RdLbaNoData(0x3B723B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 725 ] 
17:14:07: [ RdLbaNoData(0x3B723BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 726 ] 
17:14:07: [ RdLbaNoData(0x3B723BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 727 ] 
17:14:07: [ RdLbaNoData(0x3B723BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 728 ] 
17:14:07: [ RdLbaNoData(0x3B723BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 729 ] 
17:14:07: [ RdLbaNoData(0x3B723BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 730 ] 
17:14:07: [ RdLbaNoData(0x3B723BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 731 ] 
17:14:07: [ RdLbaNoData(0x3B723C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 732 ] 
17:14:07: [ RdLbaNoData(0x3B723C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 733 ] 
17:14:07: [ RdLbaNoData(0x3B723C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 734 ] 
17:14:07: [ RdLbaNoData(0x3B723C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 735 ] 
17:14:07: [ RdLbaNoData(0x3B723C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 736 ] 
17:14:07: [ RdLbaNoData(0x3B723C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 737 ] 
17:14:07: [ RdLbaNoData(0x3B723C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 738 ] 
17:14:07: [ RdLbaNoData(0x3B723C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 739 ] 
17:14:07: [ RdLbaNoData(0x3B723C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 740 ] 
17:14:07: [ RdLbaNoData(0x3B723C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 741 ] 
17:14:07: [ RdLbaNoData(0x3B723CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 742 ] 
17:14:07: [ RdLbaNoData(0x3B723CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 743 ] 
17:14:07: [ RdLbaNoData(0x3B723CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 744 ] 
17:14:07: [ RdLbaNoData(0x3B723CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 745 ] 
17:14:07: [ RdLbaNoData(0x3B723CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 746 ] 
17:14:07: [ RdLbaNoData(0x3B723CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 747 ] 
17:14:07: [ RdLbaNoData(0x3B723D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 748 ] 
17:14:07: [ RdLbaNoData(0x3B723D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 749 ] 
17:14:07: [ RdLbaNoData(0x3B723D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 750 ] 
17:14:07: [ RdLbaNoData(0x3B723D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 751 ] 
17:14:07: [ RdLbaNoData(0x3B723D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 752 ] 
17:14:07: [ RdLbaNoData(0x3B723D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 753 ] 
17:14:07: [ RdLbaNoData(0x3B723D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 754 ] 
17:14:07: [ RdLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 755 ] 
17:14:08: [ RdLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 756 ] 
17:14:08: [ RdLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 757 ] 
17:14:08: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 758 ] 
17:14:08: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 759 ] 
17:14:08: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 760 ] 
17:14:08: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 761 ] 
17:14:08: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 762 ] 
17:14:08: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 763 ] 
17:14:08: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 764 ] 
17:14:08: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 765 ] 
17:14:08: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 766 ] 
17:14:08: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 767 ] 
17:14:08: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 768 ] 
17:14:08: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 769 ] 
17:14:08: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 770 ] 
17:14:08: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 771 ] 
17:14:08: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 772 ] 
17:14:08: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 773 ] 
17:14:08: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 774 ] 
17:14:08: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 775 ] 
17:14:08: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 776 ] 
17:14:08: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 777 ] 
17:14:08: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 778 ] 
17:14:08: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 779 ] 
17:14:08: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 780 ] 
17:14:08: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 781 ] 
17:14:08: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 782 ] 
17:14:08: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 783 ] 
17:14:08: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 784 ] 
17:14:08: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 785 ] 
17:14:08: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 786 ] 
17:14:08: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 787 ] 
17:14:08: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 788 ] 
17:14:09: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 789 ] 
17:14:09: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 790 ] 
17:14:09: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 791 ] 
17:14:09: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 792 ] 
17:14:09: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 793 ] 
17:14:09: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 794 ] 
17:14:09: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B72322 to EndLba:0x3B723FF with Anyword Pattern 3 

17:14:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE7E0>, <py_sfcl.CommandDataDefinition object at 0x05415F60>) , Command count = 795 ] 
17:14:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:09: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 796 ] 
17:14:09: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xDD
17:14:09: [INFO] - Number of Written blocks matches as per argument provided.
17:14:09: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B723C7 to endLba:0x3B723FF
17:14:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B723C7 to EndLba:0x3B723FF with Anyword Pattern 1
17:14:09: [ WrLbaNoData(0x3B723C7, 0x38, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 797 ] 
17:14:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B723C7 to EndLba:0x3B723FF with Anyword Pattern 1 

17:14:09: [CH4344_Send_Num_WR_Blocks]#### Single Read to the card from startLba:0x3B723C7 to endLba:0x3B723FF
17:14:09: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B723C7 to EndLba:0x3B723FF with Anyword Pattern 1
17:14:09: [ RdLbaNoData(0x3B723C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 798 ] 
17:14:09: [ RdLbaNoData(0x3B723C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 799 ] 
17:14:09: [ RdLbaNoData(0x3B723C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 800 ] 
17:14:09: [ RdLbaNoData(0x3B723CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 801 ] 
17:14:09: [ RdLbaNoData(0x3B723CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 802 ] 
17:14:09: [ RdLbaNoData(0x3B723CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 803 ] 
17:14:09: [ RdLbaNoData(0x3B723CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 804 ] 
17:14:09: [ RdLbaNoData(0x3B723CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 805 ] 
17:14:09: [ RdLbaNoData(0x3B723CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 806 ] 
17:14:09: [ RdLbaNoData(0x3B723D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 807 ] 
17:14:09: [ RdLbaNoData(0x3B723D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 808 ] 
17:14:09: [ RdLbaNoData(0x3B723D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 809 ] 
17:14:09: [ RdLbaNoData(0x3B723D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 810 ] 
17:14:09: [ RdLbaNoData(0x3B723D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 811 ] 
17:14:09: [ RdLbaNoData(0x3B723D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 812 ] 
17:14:09: [ RdLbaNoData(0x3B723D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 813 ] 
17:14:09: [ RdLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 814 ] 
17:14:10: [ RdLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 815 ] 
17:14:10: [ RdLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 816 ] 
17:14:10: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 817 ] 
17:14:10: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 818 ] 
17:14:10: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 819 ] 
17:14:10: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 820 ] 
17:14:10: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 821 ] 
17:14:10: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 822 ] 
17:14:10: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 823 ] 
17:14:10: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 824 ] 
17:14:10: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 825 ] 
17:14:10: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 826 ] 
17:14:10: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 827 ] 
17:14:10: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 828 ] 
17:14:10: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 829 ] 
17:14:10: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 830 ] 
17:14:10: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 831 ] 
17:14:10: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 832 ] 
17:14:10: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 833 ] 
17:14:10: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 834 ] 
17:14:10: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 835 ] 
17:14:10: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 836 ] 
17:14:10: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 837 ] 
17:14:10: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 838 ] 
17:14:10: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 839 ] 
17:14:10: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 840 ] 
17:14:10: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 841 ] 
17:14:10: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 842 ] 
17:14:10: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 843 ] 
17:14:10: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 844 ] 
17:14:10: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 845 ] 
17:14:10: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 846 ] 
17:14:10: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 847 ] 
17:14:10: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 848 ] 
17:14:10: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 849 ] 
17:14:10: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 850 ] 
17:14:10: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 851 ] 
17:14:11: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 852 ] 
17:14:11: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 853 ] 
17:14:11: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B723C7 to EndLba:0x3B723FF with Anyword Pattern 1 

17:14:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DECC0>, <py_sfcl.CommandDataDefinition object at 0x061ED1B0>) , Command count = 854 ] 
17:14:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:11: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 855 ] 
17:14:11: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x38
17:14:11: [INFO] - Number of Written blocks matches as per argument provided.
17:14:11: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B723A0 to endLba:0x3B723FF
17:14:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B723A0 to EndLba:0x3B723FF with Anyword Pattern 2
17:14:11: [ WrLbaNoData(0x3B723A0, 0x5F, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 856 ] 
17:14:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B723A0 to EndLba:0x3B723FF with Anyword Pattern 2 

17:14:11: [CH4344_Send_Num_WR_Blocks]#### Single Read to the card from startLba:0x3B723A0 to endLba:0x3B723FF
17:14:11: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B723A0 to EndLba:0x3B723FF with Anyword Pattern 2
17:14:11: [ RdLbaNoData(0x3B723A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 857 ] 
17:14:11: [ RdLbaNoData(0x3B723A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 858 ] 
17:14:11: [ RdLbaNoData(0x3B723A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 859 ] 
17:14:11: [ RdLbaNoData(0x3B723A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 860 ] 
17:14:11: [ RdLbaNoData(0x3B723A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 861 ] 
17:14:11: [ RdLbaNoData(0x3B723A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 862 ] 
17:14:11: [ RdLbaNoData(0x3B723A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 863 ] 
17:14:11: [ RdLbaNoData(0x3B723A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 864 ] 
17:14:11: [ RdLbaNoData(0x3B723A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 865 ] 
17:14:11: [ RdLbaNoData(0x3B723A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 866 ] 
17:14:11: [ RdLbaNoData(0x3B723AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 867 ] 
17:14:11: [ RdLbaNoData(0x3B723AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 868 ] 
17:14:11: [ RdLbaNoData(0x3B723AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 869 ] 
17:14:11: [ RdLbaNoData(0x3B723AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 870 ] 
17:14:11: [ RdLbaNoData(0x3B723AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 871 ] 
17:14:11: [ RdLbaNoData(0x3B723AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 872 ] 
17:14:11: [ RdLbaNoData(0x3B723B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 873 ] 
17:14:11: [ RdLbaNoData(0x3B723B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 874 ] 
17:14:11: [ RdLbaNoData(0x3B723B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 875 ] 
17:14:11: [ RdLbaNoData(0x3B723B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 876 ] 
17:14:11: [ RdLbaNoData(0x3B723B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 877 ] 
17:14:11: [ RdLbaNoData(0x3B723B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 878 ] 
17:14:12: [ RdLbaNoData(0x3B723B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 879 ] 
17:14:12: [ RdLbaNoData(0x3B723B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 880 ] 
17:14:12: [ RdLbaNoData(0x3B723B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 881 ] 
17:14:12: [ RdLbaNoData(0x3B723B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 882 ] 
17:14:12: [ RdLbaNoData(0x3B723BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 883 ] 
17:14:12: [ RdLbaNoData(0x3B723BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 884 ] 
17:14:12: [ RdLbaNoData(0x3B723BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 885 ] 
17:14:12: [ RdLbaNoData(0x3B723BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 886 ] 
17:14:12: [ RdLbaNoData(0x3B723BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 887 ] 
17:14:12: [ RdLbaNoData(0x3B723BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 888 ] 
17:14:12: [ RdLbaNoData(0x3B723C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 889 ] 
17:14:12: [ RdLbaNoData(0x3B723C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 890 ] 
17:14:12: [ RdLbaNoData(0x3B723C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 891 ] 
17:14:12: [ RdLbaNoData(0x3B723C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 892 ] 
17:14:12: [ RdLbaNoData(0x3B723C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 893 ] 
17:14:12: [ RdLbaNoData(0x3B723C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 894 ] 
17:14:12: [ RdLbaNoData(0x3B723C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 895 ] 
17:14:12: [ RdLbaNoData(0x3B723C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 896 ] 
17:14:12: [ RdLbaNoData(0x3B723C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 897 ] 
17:14:12: [ RdLbaNoData(0x3B723C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 898 ] 
17:14:12: [ RdLbaNoData(0x3B723CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 899 ] 
17:14:12: [ RdLbaNoData(0x3B723CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 900 ] 
17:14:12: [ RdLbaNoData(0x3B723CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 901 ] 
17:14:12: [ RdLbaNoData(0x3B723CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 902 ] 
17:14:12: [ RdLbaNoData(0x3B723CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 903 ] 
17:14:12: [ RdLbaNoData(0x3B723CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 904 ] 
17:14:12: [ RdLbaNoData(0x3B723D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 905 ] 
17:14:12: [ RdLbaNoData(0x3B723D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 906 ] 
17:14:12: [ RdLbaNoData(0x3B723D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 907 ] 
17:14:12: [ RdLbaNoData(0x3B723D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 908 ] 
17:14:12: [ RdLbaNoData(0x3B723D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 909 ] 
17:14:13: [ RdLbaNoData(0x3B723D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 910 ] 
17:14:13: [ RdLbaNoData(0x3B723D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 911 ] 
17:14:13: [ RdLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 912 ] 
17:14:13: [ RdLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 913 ] 
17:14:13: [ RdLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 914 ] 
17:14:13: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 915 ] 
17:14:13: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 916 ] 
17:14:13: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 917 ] 
17:14:13: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 918 ] 
17:14:13: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 919 ] 
17:14:13: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 920 ] 
17:14:13: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 921 ] 
17:14:13: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 922 ] 
17:14:13: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 923 ] 
17:14:13: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 924 ] 
17:14:13: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 925 ] 
17:14:13: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 926 ] 
17:14:13: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 927 ] 
17:14:13: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 928 ] 
17:14:13: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 929 ] 
17:14:13: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 930 ] 
17:14:13: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 931 ] 
17:14:13: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 932 ] 
17:14:13: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 933 ] 
17:14:13: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 934 ] 
17:14:13: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 935 ] 
17:14:13: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 936 ] 
17:14:13: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 937 ] 
17:14:13: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 938 ] 
17:14:13: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 939 ] 
17:14:13: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 940 ] 
17:14:13: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 941 ] 
17:14:13: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 942 ] 
17:14:13: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 943 ] 
17:14:13: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 944 ] 
17:14:14: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 945 ] 
17:14:14: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 946 ] 
17:14:14: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 947 ] 
17:14:14: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 948 ] 
17:14:14: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 949 ] 
17:14:14: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 950 ] 
17:14:14: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 951 ] 
17:14:14: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B723A0 to EndLba:0x3B723FF with Anyword Pattern 2 

17:14:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED300>, <py_sfcl.CommandDataDefinition object at 0x061F5CF0>) , Command count = 952 ] 
17:14:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:14: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 953 ] 
17:14:14: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x5F
17:14:14: [INFO] - Number of Written blocks matches as per argument provided.
17:14:14: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B7236A to endLba:0x3B723FF
17:14:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7236A to EndLba:0x3B723FF with Anyword Pattern 1
17:14:14: [ WrLbaNoData(0x3B7236A, 0x95, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 954 ] 
17:14:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7236A to EndLba:0x3B723FF with Anyword Pattern 1 

17:14:14: [CH4344_Send_Num_WR_Blocks]#### Single Read to the card from startLba:0x3B7236A to endLba:0x3B723FF
17:14:14: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B7236A to EndLba:0x3B723FF with Anyword Pattern 1
17:14:14: [ RdLbaNoData(0x3B7236A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 955 ] 
17:14:14: [ RdLbaNoData(0x3B7236B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 956 ] 
17:14:14: [ RdLbaNoData(0x3B7236C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 957 ] 
17:14:14: [ RdLbaNoData(0x3B7236D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 958 ] 
17:14:14: [ RdLbaNoData(0x3B7236E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 959 ] 
17:14:14: [ RdLbaNoData(0x3B7236F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 960 ] 
17:14:14: [ RdLbaNoData(0x3B72370, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 961 ] 
17:14:14: [ RdLbaNoData(0x3B72371, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 962 ] 
17:14:14: [ RdLbaNoData(0x3B72372, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 963 ] 
17:14:14: [ RdLbaNoData(0x3B72373, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 964 ] 
17:14:14: [ RdLbaNoData(0x3B72374, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 965 ] 
17:14:14: [ RdLbaNoData(0x3B72375, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 966 ] 
17:14:14: [ RdLbaNoData(0x3B72376, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 967 ] 
17:14:14: [ RdLbaNoData(0x3B72377, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 968 ] 
17:14:14: [ RdLbaNoData(0x3B72378, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 969 ] 
17:14:14: [ RdLbaNoData(0x3B72379, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 970 ] 
17:14:15: [ RdLbaNoData(0x3B7237A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 971 ] 
17:14:15: [ RdLbaNoData(0x3B7237B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 972 ] 
17:14:15: [ RdLbaNoData(0x3B7237C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 973 ] 
17:14:15: [ RdLbaNoData(0x3B7237D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 974 ] 
17:14:15: [ RdLbaNoData(0x3B7237E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 975 ] 
17:14:15: [ RdLbaNoData(0x3B7237F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 976 ] 
17:14:15: [ RdLbaNoData(0x3B72380, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 977 ] 
17:14:15: [ RdLbaNoData(0x3B72381, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 978 ] 
17:14:15: [ RdLbaNoData(0x3B72382, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 979 ] 
17:14:15: [ RdLbaNoData(0x3B72383, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 980 ] 
17:14:15: [ RdLbaNoData(0x3B72384, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 981 ] 
17:14:15: [ RdLbaNoData(0x3B72385, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 982 ] 
17:14:15: [ RdLbaNoData(0x3B72386, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 983 ] 
17:14:15: [ RdLbaNoData(0x3B72387, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 984 ] 
17:14:15: [ RdLbaNoData(0x3B72388, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 985 ] 
17:14:15: [ RdLbaNoData(0x3B72389, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 986 ] 
17:14:15: [ RdLbaNoData(0x3B7238A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 987 ] 
17:14:15: [ RdLbaNoData(0x3B7238B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 988 ] 
17:14:15: [ RdLbaNoData(0x3B7238C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 989 ] 
17:14:15: [ RdLbaNoData(0x3B7238D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 990 ] 
17:14:15: [ RdLbaNoData(0x3B7238E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 991 ] 
17:14:15: [ RdLbaNoData(0x3B7238F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 992 ] 
17:14:15: [ RdLbaNoData(0x3B72390, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 993 ] 
17:14:15: [ RdLbaNoData(0x3B72391, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 994 ] 
17:14:15: [ RdLbaNoData(0x3B72392, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 995 ] 
17:14:15: [ RdLbaNoData(0x3B72393, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 996 ] 
17:14:15: [ RdLbaNoData(0x3B72394, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 997 ] 
17:14:15: [ RdLbaNoData(0x3B72395, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 998 ] 
17:14:15: [ RdLbaNoData(0x3B72396, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 999 ] 
17:14:16: [ RdLbaNoData(0x3B72397, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1000 ] 
17:14:16: [ RdLbaNoData(0x3B72398, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1001 ] 
17:14:16: [ RdLbaNoData(0x3B72399, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1002 ] 
17:14:16: [ RdLbaNoData(0x3B7239A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1003 ] 
17:14:16: [ RdLbaNoData(0x3B7239B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1004 ] 
17:14:16: [ RdLbaNoData(0x3B7239C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1005 ] 
17:14:16: [ RdLbaNoData(0x3B7239D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1006 ] 
17:14:16: [ RdLbaNoData(0x3B7239E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1007 ] 
17:14:16: [ RdLbaNoData(0x3B7239F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1008 ] 
17:14:16: [ RdLbaNoData(0x3B723A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1009 ] 
17:14:16: [ RdLbaNoData(0x3B723A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1010 ] 
17:14:16: [ RdLbaNoData(0x3B723A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1011 ] 
17:14:16: [ RdLbaNoData(0x3B723A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1012 ] 
17:14:16: [ RdLbaNoData(0x3B723A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1013 ] 
17:14:16: [ RdLbaNoData(0x3B723A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1014 ] 
17:14:16: [ RdLbaNoData(0x3B723A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1015 ] 
17:14:16: [ RdLbaNoData(0x3B723A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1016 ] 
17:14:16: [ RdLbaNoData(0x3B723A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1017 ] 
17:14:16: [ RdLbaNoData(0x3B723A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1018 ] 
17:14:16: [ RdLbaNoData(0x3B723AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1019 ] 
17:14:16: [ RdLbaNoData(0x3B723AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1020 ] 
17:14:16: [ RdLbaNoData(0x3B723AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1021 ] 
17:14:16: [ RdLbaNoData(0x3B723AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1022 ] 
17:14:16: [ RdLbaNoData(0x3B723AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1023 ] 
17:14:16: [ RdLbaNoData(0x3B723AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1024 ] 
17:14:16: [ RdLbaNoData(0x3B723B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1025 ] 
17:14:16: [ RdLbaNoData(0x3B723B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1026 ] 
17:14:16: [ RdLbaNoData(0x3B723B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1027 ] 
17:14:16: [ RdLbaNoData(0x3B723B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1028 ] 
17:14:16: [ RdLbaNoData(0x3B723B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1029 ] 
17:14:16: [ RdLbaNoData(0x3B723B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1030 ] 
17:14:16: [ RdLbaNoData(0x3B723B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1031 ] 
17:14:16: [ RdLbaNoData(0x3B723B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1032 ] 
17:14:16: [ RdLbaNoData(0x3B723B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1033 ] 
17:14:16: [ RdLbaNoData(0x3B723B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1034 ] 
17:14:16: [ RdLbaNoData(0x3B723BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1035 ] 
17:14:16: [ RdLbaNoData(0x3B723BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1036 ] 
17:14:17: [ RdLbaNoData(0x3B723BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1037 ] 
17:14:17: [ RdLbaNoData(0x3B723BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1038 ] 
17:14:17: [ RdLbaNoData(0x3B723BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1039 ] 
17:14:17: [ RdLbaNoData(0x3B723BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1040 ] 
17:14:17: [ RdLbaNoData(0x3B723C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1041 ] 
17:14:17: [ RdLbaNoData(0x3B723C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1042 ] 
17:14:17: [ RdLbaNoData(0x3B723C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1043 ] 
17:14:17: [ RdLbaNoData(0x3B723C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1044 ] 
17:14:17: [ RdLbaNoData(0x3B723C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1045 ] 
17:14:17: [ RdLbaNoData(0x3B723C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1046 ] 
17:14:17: [ RdLbaNoData(0x3B723C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1047 ] 
17:14:17: [ RdLbaNoData(0x3B723C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1048 ] 
17:14:17: [ RdLbaNoData(0x3B723C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1049 ] 
17:14:17: [ RdLbaNoData(0x3B723C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1050 ] 
17:14:17: [ RdLbaNoData(0x3B723CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1051 ] 
17:14:17: [ RdLbaNoData(0x3B723CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1052 ] 
17:14:17: [ RdLbaNoData(0x3B723CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1053 ] 
17:14:17: [ RdLbaNoData(0x3B723CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1054 ] 
17:14:17: [ RdLbaNoData(0x3B723CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1055 ] 
17:14:17: [ RdLbaNoData(0x3B723CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1056 ] 
17:14:17: [ RdLbaNoData(0x3B723D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1057 ] 
17:14:17: [ RdLbaNoData(0x3B723D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1058 ] 
17:14:17: [ RdLbaNoData(0x3B723D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1059 ] 
17:14:17: [ RdLbaNoData(0x3B723D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1060 ] 
17:14:17: [ RdLbaNoData(0x3B723D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1061 ] 
17:14:17: [ RdLbaNoData(0x3B723D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1062 ] 
17:14:17: [ RdLbaNoData(0x3B723D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1063 ] 
17:14:17: [ RdLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1064 ] 
17:14:17: [ RdLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1065 ] 
17:14:17: [ RdLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1066 ] 
17:14:17: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1067 ] 
17:14:17: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1068 ] 
17:14:17: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1069 ] 
17:14:17: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1070 ] 
17:14:17: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1071 ] 
17:14:18: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1072 ] 
17:14:18: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1073 ] 
17:14:18: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1074 ] 
17:14:18: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1075 ] 
17:14:18: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1076 ] 
17:14:18: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1077 ] 
17:14:18: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1078 ] 
17:14:18: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1079 ] 
17:14:18: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1080 ] 
17:14:18: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1081 ] 
17:14:18: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1082 ] 
17:14:18: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1083 ] 
17:14:18: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1084 ] 
17:14:18: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1085 ] 
17:14:18: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1086 ] 
17:14:18: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1087 ] 
17:14:18: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1088 ] 
17:14:18: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1089 ] 
17:14:18: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1090 ] 
17:14:18: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1091 ] 
17:14:18: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1092 ] 
17:14:18: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1093 ] 
17:14:18: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1094 ] 
17:14:18: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1095 ] 
17:14:18: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1096 ] 
17:14:18: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1097 ] 
17:14:18: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1098 ] 
17:14:18: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1099 ] 
17:14:18: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1100 ] 
17:14:18: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1101 ] 
17:14:18: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1102 ] 
17:14:18: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1103 ] 
17:14:18: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B7236A to EndLba:0x3B723FF with Anyword Pattern 1 

17:14:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5D50>, <py_sfcl.CommandDataDefinition object at 0x061EDE70>) , Command count = 1104 ] 
17:14:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:19: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1105 ] 
17:14:19: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x95
17:14:19: [INFO] - Number of Written blocks matches as per argument provided.
17:14:19: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B723DF to endLba:0x3B723FF
17:14:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B723DF to EndLba:0x3B723FF with Anyword Pattern 2
17:14:19: [ WrLbaNoData(0x3B723DF, 0x20, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1106 ] 
17:14:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B723DF to EndLba:0x3B723FF with Anyword Pattern 2 

17:14:19: [CH4344_Send_Num_WR_Blocks]#### Single Read to the card from startLba:0x3B723DF to endLba:0x3B723FF
17:14:19: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B723DF to EndLba:0x3B723FF with Anyword Pattern 2
17:14:19: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1107 ] 
17:14:19: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1108 ] 
17:14:19: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1109 ] 
17:14:19: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1110 ] 
17:14:19: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1111 ] 
17:14:19: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1112 ] 
17:14:19: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1113 ] 
17:14:19: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1114 ] 
17:14:19: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1115 ] 
17:14:19: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1116 ] 
17:14:19: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1117 ] 
17:14:19: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1118 ] 
17:14:19: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1119 ] 
17:14:19: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1120 ] 
17:14:19: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1121 ] 
17:14:19: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1122 ] 
17:14:19: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1123 ] 
17:14:19: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1124 ] 
17:14:19: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1125 ] 
17:14:19: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1126 ] 
17:14:19: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1127 ] 
17:14:19: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1128 ] 
17:14:19: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1129 ] 
17:14:19: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1130 ] 
17:14:19: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1131 ] 
17:14:20: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1132 ] 
17:14:20: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1133 ] 
17:14:20: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1134 ] 
17:14:20: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1135 ] 
17:14:20: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1136 ] 
17:14:20: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1137 ] 
17:14:20: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1138 ] 
17:14:20: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B723DF to EndLba:0x3B723FF with Anyword Pattern 2 

17:14:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE9F0>, <py_sfcl.CommandDataDefinition object at 0x061EDBA0>) , Command count = 1139 ] 
17:14:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:20: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1140 ] 
17:14:20: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x20
17:14:20: [INFO] - Number of Written blocks matches as per argument provided.
17:14:20: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B723B8 to endLba:0x3B723FF
17:14:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B723B8 to EndLba:0x3B723FF with Anyword Pattern 3
17:14:20: [ WrLbaNoData(0x3B723B8, 0x47, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1141 ] 
17:14:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B723B8 to EndLba:0x3B723FF with Anyword Pattern 3 

17:14:20: [CH4344_Send_Num_WR_Blocks]#### Single Read to the card from startLba:0x3B723B8 to endLba:0x3B723FF
17:14:20: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B723B8 to EndLba:0x3B723FF with Anyword Pattern 3
17:14:20: [ RdLbaNoData(0x3B723B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1142 ] 
17:14:20: [ RdLbaNoData(0x3B723B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1143 ] 
17:14:20: [ RdLbaNoData(0x3B723BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1144 ] 
17:14:20: [ RdLbaNoData(0x3B723BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1145 ] 
17:14:20: [ RdLbaNoData(0x3B723BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1146 ] 
17:14:20: [ RdLbaNoData(0x3B723BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1147 ] 
17:14:20: [ RdLbaNoData(0x3B723BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1148 ] 
17:14:20: [ RdLbaNoData(0x3B723BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1149 ] 
17:14:20: [ RdLbaNoData(0x3B723C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1150 ] 
17:14:20: [ RdLbaNoData(0x3B723C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1151 ] 
17:14:20: [ RdLbaNoData(0x3B723C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1152 ] 
17:14:20: [ RdLbaNoData(0x3B723C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1153 ] 
17:14:20: [ RdLbaNoData(0x3B723C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1154 ] 
17:14:20: [ RdLbaNoData(0x3B723C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1155 ] 
17:14:20: [ RdLbaNoData(0x3B723C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1156 ] 
17:14:20: [ RdLbaNoData(0x3B723C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1157 ] 
17:14:20: [ RdLbaNoData(0x3B723C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1158 ] 
17:14:20: [ RdLbaNoData(0x3B723C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1159 ] 
17:14:20: [ RdLbaNoData(0x3B723CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1160 ] 
17:14:20: [ RdLbaNoData(0x3B723CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1161 ] 
17:14:20: [ RdLbaNoData(0x3B723CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1162 ] 
17:14:21: [ RdLbaNoData(0x3B723CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1163 ] 
17:14:21: [ RdLbaNoData(0x3B723CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1164 ] 
17:14:21: [ RdLbaNoData(0x3B723CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1165 ] 
17:14:21: [ RdLbaNoData(0x3B723D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1166 ] 
17:14:21: [ RdLbaNoData(0x3B723D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1167 ] 
17:14:21: [ RdLbaNoData(0x3B723D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1168 ] 
17:14:21: [ RdLbaNoData(0x3B723D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1169 ] 
17:14:21: [ RdLbaNoData(0x3B723D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1170 ] 
17:14:21: [ RdLbaNoData(0x3B723D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1171 ] 
17:14:21: [ RdLbaNoData(0x3B723D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1172 ] 
17:14:21: [ RdLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1173 ] 
17:14:21: [ RdLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1174 ] 
17:14:21: [ RdLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1175 ] 
17:14:21: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1176 ] 
17:14:21: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1177 ] 
17:14:21: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1178 ] 
17:14:21: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1179 ] 
17:14:21: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1180 ] 
17:14:21: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1181 ] 
17:14:21: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1182 ] 
17:14:21: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1183 ] 
17:14:21: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1184 ] 
17:14:21: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1185 ] 
17:14:21: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1186 ] 
17:14:21: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1187 ] 
17:14:21: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1188 ] 
17:14:22: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1189 ] 
17:14:22: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1190 ] 
17:14:22: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1191 ] 
17:14:22: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1192 ] 
17:14:22: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1193 ] 
17:14:22: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1194 ] 
17:14:22: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1195 ] 
17:14:22: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1196 ] 
17:14:22: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1197 ] 
17:14:22: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1198 ] 
17:14:22: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1199 ] 
17:14:22: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1200 ] 
17:14:22: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1201 ] 
17:14:22: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1202 ] 
17:14:22: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1203 ] 
17:14:22: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1204 ] 
17:14:22: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1205 ] 
17:14:22: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1206 ] 
17:14:22: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1207 ] 
17:14:22: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1208 ] 
17:14:22: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1209 ] 
17:14:22: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1210 ] 
17:14:22: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1211 ] 
17:14:22: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1212 ] 
17:14:22: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B723B8 to EndLba:0x3B723FF with Anyword Pattern 3 

17:14:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5EA0>, <py_sfcl.CommandDataDefinition object at 0x061EDC30>) , Command count = 1213 ] 
17:14:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:22: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1214 ] 
17:14:22: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x47
17:14:22: [INFO] - Number of Written blocks matches as per argument provided.
17:14:22: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B72377 to endLba:0x3B723FF
17:14:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B72377 to EndLba:0x3B723FF with Anyword Pattern 1
17:14:22: [ WrLbaNoData(0x3B72377, 0x88, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1215 ] 
17:14:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B72377 to EndLba:0x3B723FF with Anyword Pattern 1 

17:14:22: [CH4344_Send_Num_WR_Blocks]#### Single Read to the card from startLba:0x3B72377 to endLba:0x3B723FF
17:14:22: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B72377 to EndLba:0x3B723FF with Anyword Pattern 1
17:14:22: [ RdLbaNoData(0x3B72377, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1216 ] 
17:14:22: [ RdLbaNoData(0x3B72378, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1217 ] 
17:14:22: [ RdLbaNoData(0x3B72379, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1218 ] 
17:14:22: [ RdLbaNoData(0x3B7237A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1219 ] 
17:14:22: [ RdLbaNoData(0x3B7237B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1220 ] 
17:14:22: [ RdLbaNoData(0x3B7237C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1221 ] 
17:14:22: [ RdLbaNoData(0x3B7237D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1222 ] 
17:14:22: [ RdLbaNoData(0x3B7237E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1223 ] 
17:14:22: [ RdLbaNoData(0x3B7237F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1224 ] 
17:14:23: [ RdLbaNoData(0x3B72380, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1225 ] 
17:14:23: [ RdLbaNoData(0x3B72381, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1226 ] 
17:14:23: [ RdLbaNoData(0x3B72382, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1227 ] 
17:14:23: [ RdLbaNoData(0x3B72383, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1228 ] 
17:14:23: [ RdLbaNoData(0x3B72384, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1229 ] 
17:14:23: [ RdLbaNoData(0x3B72385, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1230 ] 
17:14:23: [ RdLbaNoData(0x3B72386, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1231 ] 
17:14:23: [ RdLbaNoData(0x3B72387, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1232 ] 
17:14:23: [ RdLbaNoData(0x3B72388, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1233 ] 
17:14:23: [ RdLbaNoData(0x3B72389, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1234 ] 
17:14:23: [ RdLbaNoData(0x3B7238A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1235 ] 
17:14:23: [ RdLbaNoData(0x3B7238B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1236 ] 
17:14:23: [ RdLbaNoData(0x3B7238C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1237 ] 
17:14:23: [ RdLbaNoData(0x3B7238D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1238 ] 
17:14:23: [ RdLbaNoData(0x3B7238E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1239 ] 
17:14:23: [ RdLbaNoData(0x3B7238F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1240 ] 
17:14:23: [ RdLbaNoData(0x3B72390, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1241 ] 
17:14:23: [ RdLbaNoData(0x3B72391, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1242 ] 
17:14:23: [ RdLbaNoData(0x3B72392, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1243 ] 
17:14:23: [ RdLbaNoData(0x3B72393, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1244 ] 
17:14:23: [ RdLbaNoData(0x3B72394, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1245 ] 
17:14:23: [ RdLbaNoData(0x3B72395, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1246 ] 
17:14:23: [ RdLbaNoData(0x3B72396, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1247 ] 
17:14:23: [ RdLbaNoData(0x3B72397, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1248 ] 
17:14:23: [ RdLbaNoData(0x3B72398, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1249 ] 
17:14:23: [ RdLbaNoData(0x3B72399, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1250 ] 
17:14:23: [ RdLbaNoData(0x3B7239A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1251 ] 
17:14:23: [ RdLbaNoData(0x3B7239B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1252 ] 
17:14:23: [ RdLbaNoData(0x3B7239C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1253 ] 
17:14:23: [ RdLbaNoData(0x3B7239D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1254 ] 
17:14:23: [ RdLbaNoData(0x3B7239E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1255 ] 
17:14:23: [ RdLbaNoData(0x3B7239F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1256 ] 
17:14:24: [ RdLbaNoData(0x3B723A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1257 ] 
17:14:24: [ RdLbaNoData(0x3B723A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1258 ] 
17:14:24: [ RdLbaNoData(0x3B723A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1259 ] 
17:14:24: [ RdLbaNoData(0x3B723A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1260 ] 
17:14:24: [ RdLbaNoData(0x3B723A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1261 ] 
17:14:24: [ RdLbaNoData(0x3B723A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1262 ] 
17:14:24: [ RdLbaNoData(0x3B723A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1263 ] 
17:14:24: [ RdLbaNoData(0x3B723A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1264 ] 
17:14:24: [ RdLbaNoData(0x3B723A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1265 ] 
17:14:24: [ RdLbaNoData(0x3B723A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1266 ] 
17:14:24: [ RdLbaNoData(0x3B723AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1267 ] 
17:14:24: [ RdLbaNoData(0x3B723AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1268 ] 
17:14:24: [ RdLbaNoData(0x3B723AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1269 ] 
17:14:24: [ RdLbaNoData(0x3B723AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1270 ] 
17:14:24: [ RdLbaNoData(0x3B723AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1271 ] 
17:14:24: [ RdLbaNoData(0x3B723AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1272 ] 
17:14:24: [ RdLbaNoData(0x3B723B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1273 ] 
17:14:24: [ RdLbaNoData(0x3B723B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1274 ] 
17:14:24: [ RdLbaNoData(0x3B723B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1275 ] 
17:14:24: [ RdLbaNoData(0x3B723B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1276 ] 
17:14:24: [ RdLbaNoData(0x3B723B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1277 ] 
17:14:24: [ RdLbaNoData(0x3B723B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1278 ] 
17:14:24: [ RdLbaNoData(0x3B723B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1279 ] 
17:14:24: [ RdLbaNoData(0x3B723B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1280 ] 
17:14:24: [ RdLbaNoData(0x3B723B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1281 ] 
17:14:24: [ RdLbaNoData(0x3B723B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1282 ] 
17:14:24: [ RdLbaNoData(0x3B723BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1283 ] 
17:14:24: [ RdLbaNoData(0x3B723BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1284 ] 
17:14:24: [ RdLbaNoData(0x3B723BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1285 ] 
17:14:24: [ RdLbaNoData(0x3B723BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1286 ] 
17:14:24: [ RdLbaNoData(0x3B723BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1287 ] 
17:14:24: [ RdLbaNoData(0x3B723BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1288 ] 
17:14:25: [ RdLbaNoData(0x3B723C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1289 ] 
17:14:25: [ RdLbaNoData(0x3B723C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1290 ] 
17:14:25: [ RdLbaNoData(0x3B723C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1291 ] 
17:14:25: [ RdLbaNoData(0x3B723C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1292 ] 
17:14:25: [ RdLbaNoData(0x3B723C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1293 ] 
17:14:25: [ RdLbaNoData(0x3B723C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1294 ] 
17:14:25: [ RdLbaNoData(0x3B723C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1295 ] 
17:14:25: [ RdLbaNoData(0x3B723C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1296 ] 
17:14:25: [ RdLbaNoData(0x3B723C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1297 ] 
17:14:25: [ RdLbaNoData(0x3B723C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1298 ] 
17:14:25: [ RdLbaNoData(0x3B723CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1299 ] 
17:14:25: [ RdLbaNoData(0x3B723CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1300 ] 
17:14:25: [ RdLbaNoData(0x3B723CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1301 ] 
17:14:25: [ RdLbaNoData(0x3B723CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1302 ] 
17:14:25: [ RdLbaNoData(0x3B723CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1303 ] 
17:14:25: [ RdLbaNoData(0x3B723CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1304 ] 
17:14:25: [ RdLbaNoData(0x3B723D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1305 ] 
17:14:25: [ RdLbaNoData(0x3B723D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1306 ] 
17:14:25: [ RdLbaNoData(0x3B723D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1307 ] 
17:14:25: [ RdLbaNoData(0x3B723D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1308 ] 
17:14:25: [ RdLbaNoData(0x3B723D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1309 ] 
17:14:25: [ RdLbaNoData(0x3B723D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1310 ] 
17:14:25: [ RdLbaNoData(0x3B723D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1311 ] 
17:14:25: [ RdLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1312 ] 
17:14:25: [ RdLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1313 ] 
17:14:25: [ RdLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1314 ] 
17:14:25: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1315 ] 
17:14:25: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1316 ] 
17:14:25: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1317 ] 
17:14:25: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1318 ] 
17:14:25: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1319 ] 
17:14:26: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1320 ] 
17:14:26: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1321 ] 
17:14:26: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1322 ] 
17:14:26: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1323 ] 
17:14:26: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1324 ] 
17:14:26: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1325 ] 
17:14:26: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1326 ] 
17:14:26: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1327 ] 
17:14:26: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1328 ] 
17:14:26: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1329 ] 
17:14:26: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1330 ] 
17:14:26: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1331 ] 
17:14:26: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1332 ] 
17:14:26: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1333 ] 
17:14:26: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1334 ] 
17:14:26: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1335 ] 
17:14:26: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1336 ] 
17:14:26: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1337 ] 
17:14:26: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1338 ] 
17:14:26: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1339 ] 
17:14:26: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1340 ] 
17:14:26: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1341 ] 
17:14:26: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1342 ] 
17:14:26: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1343 ] 
17:14:26: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1344 ] 
17:14:26: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1345 ] 
17:14:26: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1346 ] 
17:14:26: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1347 ] 
17:14:26: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1348 ] 
17:14:26: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1349 ] 
17:14:26: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1350 ] 
17:14:26: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1351 ] 
17:14:26: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B72377 to EndLba:0x3B723FF with Anyword Pattern 1 

17:14:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5F00>, <py_sfcl.CommandDataDefinition object at 0x061ED0C0>) , Command count = 1352 ] 
17:14:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:26: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1353 ] 
17:14:26: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x88
17:14:26: [INFO] - Number of Written blocks matches as per argument provided.
17:14:26: [CH4344_Num_WR_Blocks]### globalDVTTestScope is AsicDVT. TEST CASE SECOND ITERATION IS STARTED.
17:14:26: [GO4_globalInitCard]### Switch to Specify Card Type
17:14:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:14:29: Host Frequency set to 25000 KHz
17:14:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:14:29: [GO18_globalSetVolt]### Set Host Voltage value.
17:14:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:14:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x061E9690>, 0x0, True) , Command count = 1354 ] 
17:14:29: [GO18_globalSetVolt]### Host voltage value is set.
17:14:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:14:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x061ED300>, 0x0, False) , Command count = 1355 ] 
17:14:29: [GO18_globalSetVolt]### Host voltage value is set.
17:14:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1356 ] 
17:14:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:14:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1357 ] 
17:14:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:14:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:14:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:14:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:14:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:14:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1358 ] 
17:14:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:14:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:14:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E99F0>, <py_sfcl.CommandDataDefinition object at 0x061E92A0>) , Command count = 1359 ] 
17:14:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:14:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED210>, <py_sfcl.CommandDataDefinition object at 0x061DBE70>) , Command count = 1360 ] 
17:14:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:14:29: [ SetCardRCA(0x1, 0xD555) , Command count = 1361 ] 
17:14:29: [DVTCommonLib]### Identification :Idenfication of card completed 

17:14:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:14:29: Host Frequency set to 25000 KHz
17:14:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:14:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
17:14:29: ####CSD Registe 2.0 Values####
17:14:29: CSD_STRUCTURE                                 :0x1
17:14:29: Reserv1                                       :0x0
17:14:29: Time Access 1 TAAC                            :0xe
17:14:29: Time Access 2 NSAC*100                        :0x0
17:14:29: Data Transfer Rate TRAN_SPEED                 :0x32
17:14:29: Card Command Classess CCC                     :0x5b5
17:14:29: Max Read Data Block Length  READ_BL_LEN       :0x9
17:14:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:14:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:14:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:14:29: DSR(driver stage register)  DSR_IMP           :0x0
17:14:29: Reserv2                                       :0x0
17:14:29: Device Size C_SIZE                            :0xedc8
17:14:29: Reserv3                                       :0x0
17:14:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:14:29: Erase Sector Size SECTOR_SIZE                 :0x7f
17:14:29: Write Protect Group Size WP_GRP_SIZE          :0x0
17:14:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:14:29: Reserv4                                       :0x0
17:14:29: Write Speed Factor R2W_FACTOR                 :0x2
17:14:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:14:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:14:29: FILE_FORMAT_GRP                               :0x0
17:14:29: COPY flag                                     :0x1
17:14:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:14:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
17:14:29: File_Format                                   :0x0
17:14:29: CRC                                           :0x0
17:14:29: ####CSD Registe Values####  

17:14:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:14:29: [GetSCRRegisterEntry] Passed
17:14:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:14:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:14:29: Data_Status_After Erases          : 0
17:14:29: CPRM Security Support             : No Security
17:14:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:14:29: Spec. Version                     : Version 3.0X
17:14:29: Extended Security Support         : Extended_Security_Not_Supported
17:14:29: Command Support                   : COMMAND_SUPPORT
17:14:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:14:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED2D0>, <py_sfcl.CommandDataDefinition object at 0x061DBF60>) , Command count = 1362 ] 
17:14:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED3C0>, <py_sfcl.CommandDataDefinition object at 0x053CB540>) , Command count = 1363 ] 
17:14:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:14:29: [ SetBusWidth(0x4) , Command count = 1364 ] 
17:14:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:14:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061FF030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1365 ] 
17:14:29: Protected Area Size 0x28000
17:14:29: Bus Width           2
17:14:29: Secure Mode         0
17:14:29: Speed  Class        4
17:14:29: Perf Move           0
17:14:29: Au Size             9
17:14:29: Erase Size          15
17:14:29: Erase Timeout       1
17:14:29: Erase offset        1
17:14:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:14:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:14:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:14:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1366 ] 
17:14:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:14:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:14:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:14:29: Host Frequency set to 100000 KHz
17:14:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:14:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
17:14:29: ####CSD Registe 2.0 Values####
17:14:29: CSD_STRUCTURE                                 :0x1
17:14:29: Reserv1                                       :0x0
17:14:29: Time Access 1 TAAC                            :0xe
17:14:29: Time Access 2 NSAC*100                        :0x0
17:14:29: Data Transfer Rate TRAN_SPEED                 :0xb
17:14:29: Card Command Classess CCC                     :0x5b5
17:14:29: Max Read Data Block Length  READ_BL_LEN       :0x9
17:14:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:14:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:14:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:14:29: DSR(driver stage register)  DSR_IMP           :0x0
17:14:29: Reserv2                                       :0x0
17:14:29: Device Size C_SIZE                            :0xedc8
17:14:29: Reserv3                                       :0x0
17:14:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:14:30: Erase Sector Size SECTOR_SIZE                 :0x7f
17:14:30: Write Protect Group Size WP_GRP_SIZE          :0x0
17:14:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:14:30: Reserv4                                       :0x0
17:14:30: Write Speed Factor R2W_FACTOR                 :0x2
17:14:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:14:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:14:30: FILE_FORMAT_GRP                               :0x0
17:14:30: COPY flag                                     :0x1
17:14:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:14:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
17:14:30: File_Format                                   :0x0
17:14:30: CRC                                           :0x0
17:14:30: ####CSD Registe Values####  

17:14:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED4E0>, <py_sfcl.CommandDataDefinition object at 0x061FF210>) , Command count = 1367 ] 
17:14:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:14:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED540>, <py_sfcl.CommandDataDefinition object at 0x061FF090>) , Command count = 1368 ] 
17:14:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:14:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:14:30: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x289B03E to endLba:0x289B098
17:14:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x289B03E to EndLba:0x289B098 with Anyword Pattern 1
17:14:30: [ WrLbaNoData(0x289B03E, 0x5A, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1369 ] 
17:14:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x289B03E to EndLba:0x289B098 with Anyword Pattern 1 

17:14:30: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x289B03E to endLba:0x289B098
17:14:30: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x289B03E to EndLba:0x289B098 with Anyword Pattern 1
17:14:30: [ RdLbaNoData(0x289B03E, 0x5A, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1370 ] 
17:14:30: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x289B03E to EndLba:0x289B098 with Anyword Pattern 1 

17:14:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED570>, <py_sfcl.CommandDataDefinition object at 0x061ED600>) , Command count = 1371 ] 
17:14:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:30: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1372 ] 
17:14:30: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x5A
17:14:31: [INFO] - Number of Written blocks matches as per argument provided.
17:14:31: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x178C12 to endLba:0x178C67
17:14:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x178C12 to EndLba:0x178C67 with Anyword Pattern 1
17:14:31: [ WrLbaNoData(0x178C12, 0x55, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1373 ] 
17:14:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x178C12 to EndLba:0x178C67 with Anyword Pattern 1 

17:14:31: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x178C12 to endLba:0x178C67
17:14:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x178C12 to EndLba:0x178C67 with Anyword Pattern 1
17:14:31: [ RdLbaNoData(0x178C12, 0x55, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1374 ] 
17:14:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x178C12 to EndLba:0x178C67 with Anyword Pattern 1 

17:14:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED690>, <py_sfcl.CommandDataDefinition object at 0x061ED720>) , Command count = 1375 ] 
17:14:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:31: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1376 ] 
17:14:31: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x55
17:14:31: [INFO] - Number of Written blocks matches as per argument provided.
17:14:31: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x376EB31 to endLba:0x376EB5C
17:14:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x376EB31 to EndLba:0x376EB5C with Anyword Pattern 1
17:14:31: [ WrLbaNoData(0x376EB31, 0x2B, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1377 ] 
17:14:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x376EB31 to EndLba:0x376EB5C with Anyword Pattern 1 

17:14:31: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x376EB31 to endLba:0x376EB5C
17:14:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x376EB31 to EndLba:0x376EB5C with Anyword Pattern 1
17:14:31: [ RdLbaNoData(0x376EB31, 0x2B, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1378 ] 
17:14:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x376EB31 to EndLba:0x376EB5C with Anyword Pattern 1 

17:14:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED7B0>, <py_sfcl.CommandDataDefinition object at 0x061ED840>) , Command count = 1379 ] 
17:14:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:31: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1380 ] 
17:14:31: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x2B
17:14:31: [INFO] - Number of Written blocks matches as per argument provided.
17:14:31: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x1E73868 to endLba:0x1E73927
17:14:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1E73868 to EndLba:0x1E73927 with Anyword Pattern 3
17:14:31: [ WrLbaNoData(0x1E73868, 0xBF, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1381 ] 
17:14:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1E73868 to EndLba:0x1E73927 with Anyword Pattern 3 

17:14:31: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x1E73868 to endLba:0x1E73927
17:14:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x1E73868 to EndLba:0x1E73927 with Anyword Pattern 3
17:14:31: [ RdLbaNoData(0x1E73868, 0xBF, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1382 ] 
17:14:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x1E73868 to EndLba:0x1E73927 with Anyword Pattern 3 

17:14:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DBE40>, <py_sfcl.CommandDataDefinition object at 0x061F5510>) , Command count = 1383 ] 
17:14:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:31: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1384 ] 
17:14:31: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xBF
17:14:31: [INFO] - Number of Written blocks matches as per argument provided.
17:14:31: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B262C9 to endLba:0x3B263B1
17:14:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B262C9 to EndLba:0x3B263B1 with Anyword Pattern 3
17:14:31: [ WrLbaNoData(0x3B262C9, 0xE8, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1385 ] 
17:14:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B262C9 to EndLba:0x3B263B1 with Anyword Pattern 3 

17:14:31: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x3B262C9 to endLba:0x3B263B1
17:14:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x3B262C9 to EndLba:0x3B263B1 with Anyword Pattern 3
17:14:31: [ RdLbaNoData(0x3B262C9, 0xE8, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1386 ] 
17:14:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x3B262C9 to EndLba:0x3B263B1 with Anyword Pattern 3 

17:14:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED9F0>, <py_sfcl.CommandDataDefinition object at 0x061EDA80>) , Command count = 1387 ] 
17:14:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:32: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1388 ] 
17:14:32: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xE8
17:14:32: [INFO] - Number of Written blocks matches as per argument provided.
17:14:32: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x2AD3873 to endLba:0x2AD38B0
17:14:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2AD3873 to EndLba:0x2AD38B0 with Anyword Pattern 3
17:14:32: [ WrLbaNoData(0x2AD3873, 0x3D, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1389 ] 
17:14:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2AD3873 to EndLba:0x2AD38B0 with Anyword Pattern 3 

17:14:32: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x2AD3873 to endLba:0x2AD38B0
17:14:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2AD3873 to EndLba:0x2AD38B0 with Anyword Pattern 3
17:14:32: [ RdLbaNoData(0x2AD3873, 0x3D, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1390 ] 
17:14:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2AD3873 to EndLba:0x2AD38B0 with Anyword Pattern 3 

17:14:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5D50>, <py_sfcl.CommandDataDefinition object at 0x060DE7E0>) , Command count = 1391 ] 
17:14:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:32: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1392 ] 
17:14:32: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x3D
17:14:32: [INFO] - Number of Written blocks matches as per argument provided.
17:14:32: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3127956 to endLba:0x3127A02
17:14:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3127956 to EndLba:0x3127A02 with Anyword Pattern 1
17:14:32: [ WrLbaNoData(0x3127956, 0xAC, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1393 ] 
17:14:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3127956 to EndLba:0x3127A02 with Anyword Pattern 1 

17:14:32: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x3127956 to endLba:0x3127A02
17:14:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x3127956 to EndLba:0x3127A02 with Anyword Pattern 1
17:14:32: [ RdLbaNoData(0x3127956, 0xAC, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1394 ] 
17:14:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x3127956 to EndLba:0x3127A02 with Anyword Pattern 1 

17:14:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDAB0>, <py_sfcl.CommandDataDefinition object at 0x061EDCC0>) , Command count = 1395 ] 
17:14:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:32: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1396 ] 
17:14:32: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xAC
17:14:32: [INFO] - Number of Written blocks matches as per argument provided.
17:14:32: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3474435 to endLba:0x3474528
17:14:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3474435 to EndLba:0x3474528 with Anyword Pattern 1
17:14:32: [ WrLbaNoData(0x3474435, 0xF3, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1397 ] 
17:14:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3474435 to EndLba:0x3474528 with Anyword Pattern 1 

17:14:32: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x3474435 to endLba:0x3474528
17:14:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x3474435 to EndLba:0x3474528 with Anyword Pattern 1
17:14:32: [ RdLbaNoData(0x3474435, 0xF3, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1398 ] 
17:14:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x3474435 to EndLba:0x3474528 with Anyword Pattern 1 

17:14:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDD50>, <py_sfcl.CommandDataDefinition object at 0x061EDD80>) , Command count = 1399 ] 
17:14:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:32: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1400 ] 
17:14:32: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xF3
17:14:32: [INFO] - Number of Written blocks matches as per argument provided.
17:14:32: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x25F072B to endLba:0x25F0772
17:14:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x25F072B to EndLba:0x25F0772 with Anyword Pattern 3
17:14:32: [ WrLbaNoData(0x25F072B, 0x47, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1401 ] 
17:14:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x25F072B to EndLba:0x25F0772 with Anyword Pattern 3 

17:14:32: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x25F072B to endLba:0x25F0772
17:14:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x25F072B to EndLba:0x25F0772 with Anyword Pattern 3
17:14:33: [ RdLbaNoData(0x25F072B, 0x47, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1402 ] 
17:14:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x25F072B to EndLba:0x25F0772 with Anyword Pattern 3 

17:14:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDED0>, <py_sfcl.CommandDataDefinition object at 0x061EDF00>) , Command count = 1403 ] 
17:14:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:33: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1404 ] 
17:14:33: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x47
17:14:33: [INFO] - Number of Written blocks matches as per argument provided.
17:14:33: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x20FFEEB to endLba:0x20FFF69
17:14:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x20FFEEB to EndLba:0x20FFF69 with Anyword Pattern 1
17:14:33: [ WrLbaNoData(0x20FFEEB, 0x7E, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1405 ] 
17:14:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x20FFEEB to EndLba:0x20FFF69 with Anyword Pattern 1 

17:14:33: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x20FFEEB to endLba:0x20FFF69
17:14:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x20FFEEB to EndLba:0x20FFF69 with Anyword Pattern 1
17:14:33: [ RdLbaNoData(0x20FFEEB, 0x7E, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1406 ] 
17:14:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x20FFEEB to EndLba:0x20FFF69 with Anyword Pattern 1 

17:14:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDF90>, <py_sfcl.CommandDataDefinition object at 0x061F5060>) , Command count = 1407 ] 
17:14:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:33: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1408 ] 
17:14:33: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x7E
17:14:33: [INFO] - Number of Written blocks matches as per argument provided.
17:14:33: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0xB10582 to endLba:0xB105FC
17:14:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xB10582 to EndLba:0xB105FC with Anyword Pattern 2
17:14:33: [ WrLbaNoData(0xB10582, 0x7A, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1409 ] 
17:14:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xB10582 to EndLba:0xB105FC with Anyword Pattern 2 

17:14:33: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0xB10582 to endLba:0xB105FC
17:14:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0xB10582 to EndLba:0xB105FC with Anyword Pattern 2
17:14:33: [ RdLbaNoData(0xB10582, 0x7A, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1410 ] 
17:14:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0xB10582 to EndLba:0xB105FC with Anyword Pattern 2 

17:14:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F50F0>, <py_sfcl.CommandDataDefinition object at 0x061F5180>) , Command count = 1411 ] 
17:14:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:33: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1412 ] 
17:14:33: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x7A
17:14:33: [INFO] - Number of Written blocks matches as per argument provided.
17:14:33: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x23596EB to endLba:0x235972A
17:14:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x23596EB to EndLba:0x235972A with Anyword Pattern 3
17:14:33: [ WrLbaNoData(0x23596EB, 0x3F, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1413 ] 
17:14:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x23596EB to EndLba:0x235972A with Anyword Pattern 3 

17:14:33: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x23596EB to endLba:0x235972A
17:14:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23596EB to EndLba:0x235972A with Anyword Pattern 3
17:14:33: [ RdLbaNoData(0x23596EB, 0x3F, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1414 ] 
17:14:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23596EB to EndLba:0x235972A with Anyword Pattern 3 

17:14:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F58A0>, <py_sfcl.CommandDataDefinition object at 0x061F51E0>) , Command count = 1415 ] 
17:14:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:33: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1416 ] 
17:14:33: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x3F
17:14:33: [INFO] - Number of Written blocks matches as per argument provided.
17:14:33: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x354EC98 to endLba:0x354ECE3
17:14:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x354EC98 to EndLba:0x354ECE3 with Anyword Pattern 2
17:14:34: [ WrLbaNoData(0x354EC98, 0x4B, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1417 ] 
17:14:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x354EC98 to EndLba:0x354ECE3 with Anyword Pattern 2 

17:14:34: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x354EC98 to endLba:0x354ECE3
17:14:34: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x354EC98 to EndLba:0x354ECE3 with Anyword Pattern 2
17:14:34: [ RdLbaNoData(0x354EC98, 0x4B, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1418 ] 
17:14:34: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x354EC98 to EndLba:0x354ECE3 with Anyword Pattern 2 

17:14:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5330>, <py_sfcl.CommandDataDefinition object at 0x061F53C0>) , Command count = 1419 ] 
17:14:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:34: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1420 ] 
17:14:34: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x4B
17:14:34: [INFO] - Number of Written blocks matches as per argument provided.
17:14:34: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x2A0EDBE to endLba:0x2A0EE05
17:14:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2A0EDBE to EndLba:0x2A0EE05 with Anyword Pattern 2
17:14:34: [ WrLbaNoData(0x2A0EDBE, 0x47, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1421 ] 
17:14:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2A0EDBE to EndLba:0x2A0EE05 with Anyword Pattern 2 

17:14:34: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x2A0EDBE to endLba:0x2A0EE05
17:14:34: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2A0EDBE to EndLba:0x2A0EE05 with Anyword Pattern 2
17:14:34: [ RdLbaNoData(0x2A0EDBE, 0x47, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1422 ] 
17:14:34: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2A0EDBE to EndLba:0x2A0EE05 with Anyword Pattern 2 

17:14:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5450>, <py_sfcl.CommandDataDefinition object at 0x061F54E0>) , Command count = 1423 ] 
17:14:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:34: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1424 ] 
17:14:34: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x47
17:14:34: [INFO] - Number of Written blocks matches as per argument provided.
17:14:34: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x301A65C to endLba:0x301A73B
17:14:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x301A65C to EndLba:0x301A73B with Anyword Pattern 3
17:14:34: [ WrLbaNoData(0x301A65C, 0xDF, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1425 ] 
17:14:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x301A65C to EndLba:0x301A73B with Anyword Pattern 3 

17:14:34: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x301A65C to endLba:0x301A73B
17:14:34: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x301A65C to EndLba:0x301A73B with Anyword Pattern 3
17:14:34: [ RdLbaNoData(0x301A65C, 0xDF, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1426 ] 
17:14:34: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x301A65C to EndLba:0x301A73B with Anyword Pattern 3 

17:14:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5570>, <py_sfcl.CommandDataDefinition object at 0x061F5600>) , Command count = 1427 ] 
17:14:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:34: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1428 ] 
17:14:34: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xDF
17:14:34: [INFO] - Number of Written blocks matches as per argument provided.
17:14:34: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x203978 to endLba:0x203A0C
17:14:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x203978 to EndLba:0x203A0C with Anyword Pattern 1
17:14:34: [ WrLbaNoData(0x203978, 0x94, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1429 ] 
17:14:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x203978 to EndLba:0x203A0C with Anyword Pattern 1 

17:14:34: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x203978 to endLba:0x203A0C
17:14:34: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x203978 to EndLba:0x203A0C with Anyword Pattern 1
17:14:34: [ RdLbaNoData(0x203978, 0x94, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1430 ] 
17:14:34: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x203978 to EndLba:0x203A0C with Anyword Pattern 1 

17:14:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5690>, <py_sfcl.CommandDataDefinition object at 0x061F5720>) , Command count = 1431 ] 
17:14:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:34: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1432 ] 
17:14:34: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x94
17:14:34: [INFO] - Number of Written blocks matches as per argument provided.
17:14:34: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0xF8A46A to endLba:0xF8A4C3
17:14:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xF8A46A to EndLba:0xF8A4C3 with Anyword Pattern 1
17:14:35: [ WrLbaNoData(0xF8A46A, 0x59, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1433 ] 
17:14:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xF8A46A to EndLba:0xF8A4C3 with Anyword Pattern 1 

17:14:35: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0xF8A46A to endLba:0xF8A4C3
17:14:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0xF8A46A to EndLba:0xF8A4C3 with Anyword Pattern 1
17:14:35: [ RdLbaNoData(0xF8A46A, 0x59, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1434 ] 
17:14:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0xF8A46A to EndLba:0xF8A4C3 with Anyword Pattern 1 

17:14:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F57B0>, <py_sfcl.CommandDataDefinition object at 0x061F5120>) , Command count = 1435 ] 
17:14:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:35: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1436 ] 
17:14:35: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x59
17:14:35: [INFO] - Number of Written blocks matches as per argument provided.
17:14:35: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x110BBB5 to endLba:0x110BBE1
17:14:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x110BBB5 to EndLba:0x110BBE1 with Anyword Pattern 3
17:14:35: [ WrLbaNoData(0x110BBB5, 0x2C, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1437 ] 
17:14:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x110BBB5 to EndLba:0x110BBE1 with Anyword Pattern 3 

17:14:35: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x110BBB5 to endLba:0x110BBE1
17:14:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x110BBB5 to EndLba:0x110BBE1 with Anyword Pattern 3
17:14:35: [ RdLbaNoData(0x110BBB5, 0x2C, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1438 ] 
17:14:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x110BBB5 to EndLba:0x110BBE1 with Anyword Pattern 3 

17:14:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5960>, <py_sfcl.CommandDataDefinition object at 0x061F59C0>) , Command count = 1439 ] 
17:14:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:35: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1440 ] 
17:14:35: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x2C
17:14:35: [INFO] - Number of Written blocks matches as per argument provided.
17:14:35: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x27AF82F to endLba:0x27AF902
17:14:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x27AF82F to EndLba:0x27AF902 with Anyword Pattern 2
17:14:35: [ WrLbaNoData(0x27AF82F, 0xD3, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1441 ] 
17:14:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x27AF82F to EndLba:0x27AF902 with Anyword Pattern 2 

17:14:35: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x27AF82F to endLba:0x27AF902
17:14:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x27AF82F to EndLba:0x27AF902 with Anyword Pattern 2
17:14:35: [ RdLbaNoData(0x27AF82F, 0xD3, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1442 ] 
17:14:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x27AF82F to EndLba:0x27AF902 with Anyword Pattern 2 

17:14:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5A20>, <py_sfcl.CommandDataDefinition object at 0x061F5A80>) , Command count = 1443 ] 
17:14:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:35: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1444 ] 
17:14:35: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xD3
17:14:35: [INFO] - Number of Written blocks matches as per argument provided.
17:14:35: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x2088B3C to endLba:0x2088B8C
17:14:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2088B3C to EndLba:0x2088B8C with Anyword Pattern 1
17:14:35: [ WrLbaNoData(0x2088B3C, 0x50, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1445 ] 
17:14:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2088B3C to EndLba:0x2088B8C with Anyword Pattern 1 

17:14:35: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x2088B3C to endLba:0x2088B8C
17:14:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2088B3C to EndLba:0x2088B8C with Anyword Pattern 1
17:14:35: [ RdLbaNoData(0x2088B3C, 0x50, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1446 ] 
17:14:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2088B3C to EndLba:0x2088B8C with Anyword Pattern 1 

17:14:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5AE0>, <py_sfcl.CommandDataDefinition object at 0x061F5B40>) , Command count = 1447 ] 
17:14:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:35: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1448 ] 
17:14:35: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x50
17:14:35: [INFO] - Number of Written blocks matches as per argument provided.
17:14:35: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x22EC55E to endLba:0x22EC624
17:14:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x22EC55E to EndLba:0x22EC624 with Anyword Pattern 1
17:14:35: [ WrLbaNoData(0x22EC55E, 0xC6, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1449 ] 
17:14:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x22EC55E to EndLba:0x22EC624 with Anyword Pattern 1 

17:14:36: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x22EC55E to endLba:0x22EC624
17:14:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x22EC55E to EndLba:0x22EC624 with Anyword Pattern 1
17:14:36: [ RdLbaNoData(0x22EC55E, 0xC6, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1450 ] 
17:14:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x22EC55E to EndLba:0x22EC624 with Anyword Pattern 1 

17:14:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5BA0>, <py_sfcl.CommandDataDefinition object at 0x061F5C00>) , Command count = 1451 ] 
17:14:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:36: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1452 ] 
17:14:36: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xC6
17:14:36: [INFO] - Number of Written blocks matches as per argument provided.
17:14:36: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x23EAE0C to endLba:0x23EAEE3
17:14:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x23EAE0C to EndLba:0x23EAEE3 with Anyword Pattern 1
17:14:36: [ WrLbaNoData(0x23EAE0C, 0xD7, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1453 ] 
17:14:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x23EAE0C to EndLba:0x23EAEE3 with Anyword Pattern 1 

17:14:36: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x23EAE0C to endLba:0x23EAEE3
17:14:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23EAE0C to EndLba:0x23EAEE3 with Anyword Pattern 1
17:14:36: [ RdLbaNoData(0x23EAE0C, 0xD7, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1454 ] 
17:14:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23EAE0C to EndLba:0x23EAEE3 with Anyword Pattern 1 

17:14:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5810>, <py_sfcl.CommandDataDefinition object at 0x060DECC0>) , Command count = 1455 ] 
17:14:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:36: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1456 ] 
17:14:36: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xD7
17:14:36: [INFO] - Number of Written blocks matches as per argument provided.
17:14:36: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x240AA40 to endLba:0x240AAF8
17:14:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x240AA40 to EndLba:0x240AAF8 with Anyword Pattern 3
17:14:36: [ WrLbaNoData(0x240AA40, 0xB8, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1457 ] 
17:14:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x240AA40 to EndLba:0x240AAF8 with Anyword Pattern 3 

17:14:36: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x240AA40 to endLba:0x240AAF8
17:14:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x240AA40 to EndLba:0x240AAF8 with Anyword Pattern 3
17:14:36: [ RdLbaNoData(0x240AA40, 0xB8, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1458 ] 
17:14:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x240AA40 to EndLba:0x240AAF8 with Anyword Pattern 3 

17:14:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9780>, <py_sfcl.CommandDataDefinition object at 0x061F5D80>) , Command count = 1459 ] 
17:14:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:36: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1460 ] 
17:14:36: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xB8
17:14:36: [INFO] - Number of Written blocks matches as per argument provided.
17:14:36: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x317894 to endLba:0x3178AB
17:14:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x317894 to EndLba:0x3178AB with Anyword Pattern 1
17:14:36: [ WrLbaNoData(0x317894, 0x17, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1461 ] 
17:14:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x317894 to EndLba:0x3178AB with Anyword Pattern 1 

17:14:36: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x317894 to endLba:0x3178AB
17:14:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x317894 to EndLba:0x3178AB with Anyword Pattern 1
17:14:36: [ RdLbaNoData(0x317894, 0x17, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1462 ] 
17:14:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x317894 to EndLba:0x3178AB with Anyword Pattern 1 

17:14:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5DE0>, <py_sfcl.CommandDataDefinition object at 0x061ED1B0>) , Command count = 1463 ] 
17:14:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:36: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1464 ] 
17:14:36: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x17
17:14:37: [INFO] - Number of Written blocks matches as per argument provided.
17:14:37: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0xD69F3C to endLba:0xD69F45
17:14:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xD69F3C to EndLba:0xD69F45 with Anyword Pattern 2
17:14:37: [ WrLbaNoData(0xD69F3C, 0x9, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1465 ] 
17:14:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xD69F3C to EndLba:0xD69F45 with Anyword Pattern 2 

17:14:37: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0xD69F3C to endLba:0xD69F45
17:14:37: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0xD69F3C to EndLba:0xD69F45 with Anyword Pattern 2
17:14:37: [ RdLbaNoData(0xD69F3C, 0x9, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1466 ] 
17:14:37: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0xD69F3C to EndLba:0xD69F45 with Anyword Pattern 2 

17:14:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9D20>, <py_sfcl.CommandDataDefinition object at 0x061F5E70>) , Command count = 1467 ] 
17:14:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:37: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1468 ] 
17:14:37: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x9
17:14:37: [INFO] - Number of Written blocks matches as per argument provided.
17:14:37: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0xE8D232 to endLba:0xE8D2BA
17:14:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xE8D232 to EndLba:0xE8D2BA with Anyword Pattern 2
17:14:37: [ WrLbaNoData(0xE8D232, 0x88, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1469 ] 
17:14:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xE8D232 to EndLba:0xE8D2BA with Anyword Pattern 2 

17:14:37: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0xE8D232 to endLba:0xE8D2BA
17:14:37: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0xE8D232 to EndLba:0xE8D2BA with Anyword Pattern 2
17:14:37: [ RdLbaNoData(0xE8D232, 0x88, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1470 ] 
17:14:37: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0xE8D232 to EndLba:0xE8D2BA with Anyword Pattern 2 

17:14:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5F60>, <py_sfcl.CommandDataDefinition object at 0x061F5FC0>) , Command count = 1471 ] 
17:14:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:37: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1472 ] 
17:14:37: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x88
17:14:37: [INFO] - Number of Written blocks matches as per argument provided.
17:14:37: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x24D9FED to endLba:0x24DA0E9
17:14:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x24D9FED to EndLba:0x24DA0E9 with Anyword Pattern 2
17:14:37: [ WrLbaNoData(0x24D9FED, 0xFC, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1473 ] 
17:14:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x24D9FED to EndLba:0x24DA0E9 with Anyword Pattern 2 

17:14:37: [CH4344_Send_Num_WR_Blocks]#### MultipleRead to the card from startLba:0x24D9FED to endLba:0x24DA0E9
17:14:37: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x24D9FED to EndLba:0x24DA0E9 with Anyword Pattern 2
17:14:37: [ RdLbaNoData(0x24D9FED, 0xFC, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1474 ] 
17:14:37: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x24D9FED to EndLba:0x24DA0E9 with Anyword Pattern 2 

17:14:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5360>, <py_sfcl.CommandDataDefinition object at 0x061F5390>) , Command count = 1475 ] 
17:14:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:37: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1476 ] 
17:14:37: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xFC
17:14:37: [INFO] - Number of Written blocks matches as per argument provided.
17:14:37: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B723DA to endLba:0x3B723FF
17:14:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B723DA to EndLba:0x3B723FF with Anyword Pattern 1
17:14:37: [ WrLbaNoData(0x3B723DA, 0x25, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1477 ] 
17:14:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B723DA to EndLba:0x3B723FF with Anyword Pattern 1 

17:14:37: [CH4344_Send_Num_WR_Blocks]#### Single Read to the card from startLba:0x3B723DA to endLba:0x3B723FF
17:14:37: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B723DA to EndLba:0x3B723FF with Anyword Pattern 1
17:14:37: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1478 ] 
17:14:37: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1479 ] 
17:14:38: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1480 ] 
17:14:38: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1481 ] 
17:14:38: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1482 ] 
17:14:38: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1483 ] 
17:14:38: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1484 ] 
17:14:38: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1485 ] 
17:14:38: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1486 ] 
17:14:38: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1487 ] 
17:14:38: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1488 ] 
17:14:38: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1489 ] 
17:14:38: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1490 ] 
17:14:38: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1491 ] 
17:14:38: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1492 ] 
17:14:38: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1493 ] 
17:14:38: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1494 ] 
17:14:38: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1495 ] 
17:14:38: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1496 ] 
17:14:38: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1497 ] 
17:14:38: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1498 ] 
17:14:38: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1499 ] 
17:14:38: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1500 ] 
17:14:38: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1501 ] 
17:14:38: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1502 ] 
17:14:38: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1503 ] 
17:14:38: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1504 ] 
17:14:38: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1505 ] 
17:14:38: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1506 ] 
17:14:38: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1507 ] 
17:14:38: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1508 ] 
17:14:38: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1509 ] 
17:14:38: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1510 ] 
17:14:38: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1511 ] 
17:14:38: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1512 ] 
17:14:38: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1513 ] 
17:14:38: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1514 ] 
17:14:38: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B723DA to EndLba:0x3B723FF with Anyword Pattern 1 

17:14:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED330>, <py_sfcl.CommandDataDefinition object at 0x061E9660>) , Command count = 1515 ] 
17:14:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:39: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1516 ] 
17:14:39: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x25
17:14:39: [INFO] - Number of Written blocks matches as per argument provided.
17:14:39: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B7239B to endLba:0x3B723FF
17:14:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7239B to EndLba:0x3B723FF with Anyword Pattern 2
17:14:39: [ WrLbaNoData(0x3B7239B, 0x64, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1517 ] 
17:14:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7239B to EndLba:0x3B723FF with Anyword Pattern 2 

17:14:39: [CH4344_Send_Num_WR_Blocks]#### Single Read to the card from startLba:0x3B7239B to endLba:0x3B723FF
17:14:39: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B7239B to EndLba:0x3B723FF with Anyword Pattern 2
17:14:39: [ RdLbaNoData(0x3B7239B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1518 ] 
17:14:39: [ RdLbaNoData(0x3B7239C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1519 ] 
17:14:39: [ RdLbaNoData(0x3B7239D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1520 ] 
17:14:39: [ RdLbaNoData(0x3B7239E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1521 ] 
17:14:39: [ RdLbaNoData(0x3B7239F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1522 ] 
17:14:39: [ RdLbaNoData(0x3B723A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1523 ] 
17:14:39: [ RdLbaNoData(0x3B723A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1524 ] 
17:14:39: [ RdLbaNoData(0x3B723A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1525 ] 
17:14:39: [ RdLbaNoData(0x3B723A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1526 ] 
17:14:39: [ RdLbaNoData(0x3B723A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1527 ] 
17:14:39: [ RdLbaNoData(0x3B723A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1528 ] 
17:14:39: [ RdLbaNoData(0x3B723A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1529 ] 
17:14:39: [ RdLbaNoData(0x3B723A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1530 ] 
17:14:39: [ RdLbaNoData(0x3B723A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1531 ] 
17:14:39: [ RdLbaNoData(0x3B723A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1532 ] 
17:14:39: [ RdLbaNoData(0x3B723AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1533 ] 
17:14:39: [ RdLbaNoData(0x3B723AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1534 ] 
17:14:39: [ RdLbaNoData(0x3B723AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1535 ] 
17:14:39: [ RdLbaNoData(0x3B723AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1536 ] 
17:14:39: [ RdLbaNoData(0x3B723AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1537 ] 
17:14:39: [ RdLbaNoData(0x3B723AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1538 ] 
17:14:39: [ RdLbaNoData(0x3B723B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1539 ] 
17:14:39: [ RdLbaNoData(0x3B723B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1540 ] 
17:14:39: [ RdLbaNoData(0x3B723B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1541 ] 
17:14:39: [ RdLbaNoData(0x3B723B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1542 ] 
17:14:39: [ RdLbaNoData(0x3B723B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1543 ] 
17:14:39: [ RdLbaNoData(0x3B723B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1544 ] 
17:14:39: [ RdLbaNoData(0x3B723B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1545 ] 
17:14:39: [ RdLbaNoData(0x3B723B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1546 ] 
17:14:39: [ RdLbaNoData(0x3B723B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1547 ] 
17:14:40: [ RdLbaNoData(0x3B723B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1548 ] 
17:14:40: [ RdLbaNoData(0x3B723BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1549 ] 
17:14:40: [ RdLbaNoData(0x3B723BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1550 ] 
17:14:40: [ RdLbaNoData(0x3B723BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1551 ] 
17:14:40: [ RdLbaNoData(0x3B723BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1552 ] 
17:14:40: [ RdLbaNoData(0x3B723BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1553 ] 
17:14:40: [ RdLbaNoData(0x3B723BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1554 ] 
17:14:40: [ RdLbaNoData(0x3B723C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1555 ] 
17:14:40: [ RdLbaNoData(0x3B723C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1556 ] 
17:14:40: [ RdLbaNoData(0x3B723C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1557 ] 
17:14:40: [ RdLbaNoData(0x3B723C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1558 ] 
17:14:40: [ RdLbaNoData(0x3B723C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1559 ] 
17:14:40: [ RdLbaNoData(0x3B723C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1560 ] 
17:14:40: [ RdLbaNoData(0x3B723C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1561 ] 
17:14:40: [ RdLbaNoData(0x3B723C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1562 ] 
17:14:40: [ RdLbaNoData(0x3B723C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1563 ] 
17:14:40: [ RdLbaNoData(0x3B723C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1564 ] 
17:14:40: [ RdLbaNoData(0x3B723CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1565 ] 
17:14:40: [ RdLbaNoData(0x3B723CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1566 ] 
17:14:40: [ RdLbaNoData(0x3B723CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1567 ] 
17:14:40: [ RdLbaNoData(0x3B723CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1568 ] 
17:14:40: [ RdLbaNoData(0x3B723CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1569 ] 
17:14:40: [ RdLbaNoData(0x3B723CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1570 ] 
17:14:40: [ RdLbaNoData(0x3B723D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1571 ] 
17:14:40: [ RdLbaNoData(0x3B723D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1572 ] 
17:14:40: [ RdLbaNoData(0x3B723D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1573 ] 
17:14:40: [ RdLbaNoData(0x3B723D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1574 ] 
17:14:40: [ RdLbaNoData(0x3B723D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1575 ] 
17:14:40: [ RdLbaNoData(0x3B723D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1576 ] 
17:14:40: [ RdLbaNoData(0x3B723D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1577 ] 
17:14:40: [ RdLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1578 ] 
17:14:40: [ RdLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1579 ] 
17:14:40: [ RdLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1580 ] 
17:14:40: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1581 ] 
17:14:40: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1582 ] 
17:14:40: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1583 ] 
17:14:40: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1584 ] 
17:14:40: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1585 ] 
17:14:40: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1586 ] 
17:14:41: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1587 ] 
17:14:41: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1588 ] 
17:14:41: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1589 ] 
17:14:41: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1590 ] 
17:14:41: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1591 ] 
17:14:41: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1592 ] 
17:14:41: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1593 ] 
17:14:41: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1594 ] 
17:14:41: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1595 ] 
17:14:41: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1596 ] 
17:14:41: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1597 ] 
17:14:41: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1598 ] 
17:14:41: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1599 ] 
17:14:41: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1600 ] 
17:14:41: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1601 ] 
17:14:41: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1602 ] 
17:14:41: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1603 ] 
17:14:41: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1604 ] 
17:14:41: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1605 ] 
17:14:41: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1606 ] 
17:14:41: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1607 ] 
17:14:41: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1608 ] 
17:14:41: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1609 ] 
17:14:41: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1610 ] 
17:14:41: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1611 ] 
17:14:41: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1612 ] 
17:14:41: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1613 ] 
17:14:41: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1614 ] 
17:14:41: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1615 ] 
17:14:41: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1616 ] 
17:14:41: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1617 ] 
17:14:41: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B7239B to EndLba:0x3B723FF with Anyword Pattern 2 

17:14:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053F7930>, <py_sfcl.CommandDataDefinition object at 0x061ED420>) , Command count = 1618 ] 
17:14:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:42: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1619 ] 
17:14:42: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x64
17:14:42: [INFO] - Number of Written blocks matches as per argument provided.
17:14:42: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B72314 to endLba:0x3B723FF
17:14:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B72314 to EndLba:0x3B723FF with Anyword Pattern 2
17:14:42: [ WrLbaNoData(0x3B72314, 0xEB, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1620 ] 
17:14:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B72314 to EndLba:0x3B723FF with Anyword Pattern 2 

17:14:42: [CH4344_Send_Num_WR_Blocks]#### Single Read to the card from startLba:0x3B72314 to endLba:0x3B723FF
17:14:42: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B72314 to EndLba:0x3B723FF with Anyword Pattern 2
17:14:42: [ RdLbaNoData(0x3B72314, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1621 ] 
17:14:42: [ RdLbaNoData(0x3B72315, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1622 ] 
17:14:42: [ RdLbaNoData(0x3B72316, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1623 ] 
17:14:42: [ RdLbaNoData(0x3B72317, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1624 ] 
17:14:42: [ RdLbaNoData(0x3B72318, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1625 ] 
17:14:42: [ RdLbaNoData(0x3B72319, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1626 ] 
17:14:42: [ RdLbaNoData(0x3B7231A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1627 ] 
17:14:42: [ RdLbaNoData(0x3B7231B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1628 ] 
17:14:42: [ RdLbaNoData(0x3B7231C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1629 ] 
17:14:42: [ RdLbaNoData(0x3B7231D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1630 ] 
17:14:42: [ RdLbaNoData(0x3B7231E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1631 ] 
17:14:42: [ RdLbaNoData(0x3B7231F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1632 ] 
17:14:42: [ RdLbaNoData(0x3B72320, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1633 ] 
17:14:42: [ RdLbaNoData(0x3B72321, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1634 ] 
17:14:42: [ RdLbaNoData(0x3B72322, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1635 ] 
17:14:42: [ RdLbaNoData(0x3B72323, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1636 ] 
17:14:42: [ RdLbaNoData(0x3B72324, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1637 ] 
17:14:42: [ RdLbaNoData(0x3B72325, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1638 ] 
17:14:42: [ RdLbaNoData(0x3B72326, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1639 ] 
17:14:42: [ RdLbaNoData(0x3B72327, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1640 ] 
17:14:42: [ RdLbaNoData(0x3B72328, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1641 ] 
17:14:42: [ RdLbaNoData(0x3B72329, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1642 ] 
17:14:42: [ RdLbaNoData(0x3B7232A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1643 ] 
17:14:42: [ RdLbaNoData(0x3B7232B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1644 ] 
17:14:42: [ RdLbaNoData(0x3B7232C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1645 ] 
17:14:42: [ RdLbaNoData(0x3B7232D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1646 ] 
17:14:42: [ RdLbaNoData(0x3B7232E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1647 ] 
17:14:42: [ RdLbaNoData(0x3B7232F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1648 ] 
17:14:42: [ RdLbaNoData(0x3B72330, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1649 ] 
17:14:43: [ RdLbaNoData(0x3B72331, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1650 ] 
17:14:43: [ RdLbaNoData(0x3B72332, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1651 ] 
17:14:43: [ RdLbaNoData(0x3B72333, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1652 ] 
17:14:43: [ RdLbaNoData(0x3B72334, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1653 ] 
17:14:43: [ RdLbaNoData(0x3B72335, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1654 ] 
17:14:43: [ RdLbaNoData(0x3B72336, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1655 ] 
17:14:43: [ RdLbaNoData(0x3B72337, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1656 ] 
17:14:43: [ RdLbaNoData(0x3B72338, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1657 ] 
17:14:43: [ RdLbaNoData(0x3B72339, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1658 ] 
17:14:43: [ RdLbaNoData(0x3B7233A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1659 ] 
17:14:43: [ RdLbaNoData(0x3B7233B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1660 ] 
17:14:43: [ RdLbaNoData(0x3B7233C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1661 ] 
17:14:43: [ RdLbaNoData(0x3B7233D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1662 ] 
17:14:43: [ RdLbaNoData(0x3B7233E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1663 ] 
17:14:43: [ RdLbaNoData(0x3B7233F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1664 ] 
17:14:43: [ RdLbaNoData(0x3B72340, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1665 ] 
17:14:43: [ RdLbaNoData(0x3B72341, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1666 ] 
17:14:43: [ RdLbaNoData(0x3B72342, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1667 ] 
17:14:43: [ RdLbaNoData(0x3B72343, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1668 ] 
17:14:43: [ RdLbaNoData(0x3B72344, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1669 ] 
17:14:43: [ RdLbaNoData(0x3B72345, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1670 ] 
17:14:43: [ RdLbaNoData(0x3B72346, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1671 ] 
17:14:43: [ RdLbaNoData(0x3B72347, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1672 ] 
17:14:43: [ RdLbaNoData(0x3B72348, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1673 ] 
17:14:43: [ RdLbaNoData(0x3B72349, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1674 ] 
17:14:43: [ RdLbaNoData(0x3B7234A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1675 ] 
17:14:44: [ RdLbaNoData(0x3B7234B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1676 ] 
17:14:44: [ RdLbaNoData(0x3B7234C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1677 ] 
17:14:44: [ RdLbaNoData(0x3B7234D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1678 ] 
17:14:44: [ RdLbaNoData(0x3B7234E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1679 ] 
17:14:44: [ RdLbaNoData(0x3B7234F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1680 ] 
17:14:44: [ RdLbaNoData(0x3B72350, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1681 ] 
17:14:44: [ RdLbaNoData(0x3B72351, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1682 ] 
17:14:44: [ RdLbaNoData(0x3B72352, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1683 ] 
17:14:44: [ RdLbaNoData(0x3B72353, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1684 ] 
17:14:44: [ RdLbaNoData(0x3B72354, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1685 ] 
17:14:44: [ RdLbaNoData(0x3B72355, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1686 ] 
17:14:44: [ RdLbaNoData(0x3B72356, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1687 ] 
17:14:44: [ RdLbaNoData(0x3B72357, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1688 ] 
17:14:44: [ RdLbaNoData(0x3B72358, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1689 ] 
17:14:44: [ RdLbaNoData(0x3B72359, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1690 ] 
17:14:44: [ RdLbaNoData(0x3B7235A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1691 ] 
17:14:44: [ RdLbaNoData(0x3B7235B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1692 ] 
17:14:44: [ RdLbaNoData(0x3B7235C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1693 ] 
17:14:44: [ RdLbaNoData(0x3B7235D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1694 ] 
17:14:44: [ RdLbaNoData(0x3B7235E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1695 ] 
17:14:44: [ RdLbaNoData(0x3B7235F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1696 ] 
17:14:44: [ RdLbaNoData(0x3B72360, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1697 ] 
17:14:44: [ RdLbaNoData(0x3B72361, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1698 ] 
17:14:44: [ RdLbaNoData(0x3B72362, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1699 ] 
17:14:44: [ RdLbaNoData(0x3B72363, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1700 ] 
17:14:44: [ RdLbaNoData(0x3B72364, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1701 ] 
17:14:44: [ RdLbaNoData(0x3B72365, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1702 ] 
17:14:44: [ RdLbaNoData(0x3B72366, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1703 ] 
17:14:44: [ RdLbaNoData(0x3B72367, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1704 ] 
17:14:44: [ RdLbaNoData(0x3B72368, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1705 ] 
17:14:44: [ RdLbaNoData(0x3B72369, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1706 ] 
17:14:45: [ RdLbaNoData(0x3B7236A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1707 ] 
17:14:45: [ RdLbaNoData(0x3B7236B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1708 ] 
17:14:45: [ RdLbaNoData(0x3B7236C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1709 ] 
17:14:45: [ RdLbaNoData(0x3B7236D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1710 ] 
17:14:45: [ RdLbaNoData(0x3B7236E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1711 ] 
17:14:45: [ RdLbaNoData(0x3B7236F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1712 ] 
17:14:45: [ RdLbaNoData(0x3B72370, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1713 ] 
17:14:45: [ RdLbaNoData(0x3B72371, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1714 ] 
17:14:45: [ RdLbaNoData(0x3B72372, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1715 ] 
17:14:45: [ RdLbaNoData(0x3B72373, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1716 ] 
17:14:45: [ RdLbaNoData(0x3B72374, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1717 ] 
17:14:45: [ RdLbaNoData(0x3B72375, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1718 ] 
17:14:45: [ RdLbaNoData(0x3B72376, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1719 ] 
17:14:45: [ RdLbaNoData(0x3B72377, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1720 ] 
17:14:45: [ RdLbaNoData(0x3B72378, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1721 ] 
17:14:45: [ RdLbaNoData(0x3B72379, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1722 ] 
17:14:45: [ RdLbaNoData(0x3B7237A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1723 ] 
17:14:45: [ RdLbaNoData(0x3B7237B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1724 ] 
17:14:45: [ RdLbaNoData(0x3B7237C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1725 ] 
17:14:45: [ RdLbaNoData(0x3B7237D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1726 ] 
17:14:45: [ RdLbaNoData(0x3B7237E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1727 ] 
17:14:45: [ RdLbaNoData(0x3B7237F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1728 ] 
17:14:45: [ RdLbaNoData(0x3B72380, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1729 ] 
17:14:45: [ RdLbaNoData(0x3B72381, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1730 ] 
17:14:45: [ RdLbaNoData(0x3B72382, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1731 ] 
17:14:45: [ RdLbaNoData(0x3B72383, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1732 ] 
17:14:45: [ RdLbaNoData(0x3B72384, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1733 ] 
17:14:45: [ RdLbaNoData(0x3B72385, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1734 ] 
17:14:45: [ RdLbaNoData(0x3B72386, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1735 ] 
17:14:45: [ RdLbaNoData(0x3B72387, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1736 ] 
17:14:45: [ RdLbaNoData(0x3B72388, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1737 ] 
17:14:45: [ RdLbaNoData(0x3B72389, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1738 ] 
17:14:45: [ RdLbaNoData(0x3B7238A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1739 ] 
17:14:45: [ RdLbaNoData(0x3B7238B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1740 ] 
17:14:45: [ RdLbaNoData(0x3B7238C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1741 ] 
17:14:45: [ RdLbaNoData(0x3B7238D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1742 ] 
17:14:45: [ RdLbaNoData(0x3B7238E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1743 ] 
17:14:45: [ RdLbaNoData(0x3B7238F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1744 ] 
17:14:46: [ RdLbaNoData(0x3B72390, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1745 ] 
17:14:46: [ RdLbaNoData(0x3B72391, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1746 ] 
17:14:46: [ RdLbaNoData(0x3B72392, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1747 ] 
17:14:46: [ RdLbaNoData(0x3B72393, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1748 ] 
17:14:46: [ RdLbaNoData(0x3B72394, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1749 ] 
17:14:46: [ RdLbaNoData(0x3B72395, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1750 ] 
17:14:46: [ RdLbaNoData(0x3B72396, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1751 ] 
17:14:46: [ RdLbaNoData(0x3B72397, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1752 ] 
17:14:46: [ RdLbaNoData(0x3B72398, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1753 ] 
17:14:46: [ RdLbaNoData(0x3B72399, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1754 ] 
17:14:46: [ RdLbaNoData(0x3B7239A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1755 ] 
17:14:46: [ RdLbaNoData(0x3B7239B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1756 ] 
17:14:46: [ RdLbaNoData(0x3B7239C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1757 ] 
17:14:46: [ RdLbaNoData(0x3B7239D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1758 ] 
17:14:46: [ RdLbaNoData(0x3B7239E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1759 ] 
17:14:46: [ RdLbaNoData(0x3B7239F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1760 ] 
17:14:46: [ RdLbaNoData(0x3B723A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1761 ] 
17:14:46: [ RdLbaNoData(0x3B723A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1762 ] 
17:14:46: [ RdLbaNoData(0x3B723A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1763 ] 
17:14:46: [ RdLbaNoData(0x3B723A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1764 ] 
17:14:46: [ RdLbaNoData(0x3B723A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1765 ] 
17:14:46: [ RdLbaNoData(0x3B723A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1766 ] 
17:14:46: [ RdLbaNoData(0x3B723A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1767 ] 
17:14:46: [ RdLbaNoData(0x3B723A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1768 ] 
17:14:46: [ RdLbaNoData(0x3B723A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1769 ] 
17:14:46: [ RdLbaNoData(0x3B723A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1770 ] 
17:14:46: [ RdLbaNoData(0x3B723AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1771 ] 
17:14:46: [ RdLbaNoData(0x3B723AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1772 ] 
17:14:46: [ RdLbaNoData(0x3B723AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1773 ] 
17:14:46: [ RdLbaNoData(0x3B723AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1774 ] 
17:14:46: [ RdLbaNoData(0x3B723AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1775 ] 
17:14:46: [ RdLbaNoData(0x3B723AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1776 ] 
17:14:46: [ RdLbaNoData(0x3B723B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1777 ] 
17:14:46: [ RdLbaNoData(0x3B723B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1778 ] 
17:14:46: [ RdLbaNoData(0x3B723B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1779 ] 
17:14:46: [ RdLbaNoData(0x3B723B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1780 ] 
17:14:46: [ RdLbaNoData(0x3B723B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1781 ] 
17:14:47: [ RdLbaNoData(0x3B723B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1782 ] 
17:14:47: [ RdLbaNoData(0x3B723B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1783 ] 
17:14:47: [ RdLbaNoData(0x3B723B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1784 ] 
17:14:47: [ RdLbaNoData(0x3B723B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1785 ] 
17:14:47: [ RdLbaNoData(0x3B723B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1786 ] 
17:14:47: [ RdLbaNoData(0x3B723BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1787 ] 
17:14:47: [ RdLbaNoData(0x3B723BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1788 ] 
17:14:47: [ RdLbaNoData(0x3B723BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1789 ] 
17:14:47: [ RdLbaNoData(0x3B723BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1790 ] 
17:14:47: [ RdLbaNoData(0x3B723BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1791 ] 
17:14:47: [ RdLbaNoData(0x3B723BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1792 ] 
17:14:47: [ RdLbaNoData(0x3B723C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1793 ] 
17:14:47: [ RdLbaNoData(0x3B723C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1794 ] 
17:14:47: [ RdLbaNoData(0x3B723C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1795 ] 
17:14:47: [ RdLbaNoData(0x3B723C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1796 ] 
17:14:47: [ RdLbaNoData(0x3B723C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1797 ] 
17:14:47: [ RdLbaNoData(0x3B723C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1798 ] 
17:14:47: [ RdLbaNoData(0x3B723C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1799 ] 
17:14:47: [ RdLbaNoData(0x3B723C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1800 ] 
17:14:47: [ RdLbaNoData(0x3B723C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1801 ] 
17:14:47: [ RdLbaNoData(0x3B723C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1802 ] 
17:14:47: [ RdLbaNoData(0x3B723CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1803 ] 
17:14:47: [ RdLbaNoData(0x3B723CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1804 ] 
17:14:47: [ RdLbaNoData(0x3B723CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1805 ] 
17:14:47: [ RdLbaNoData(0x3B723CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1806 ] 
17:14:47: [ RdLbaNoData(0x3B723CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1807 ] 
17:14:47: [ RdLbaNoData(0x3B723CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1808 ] 
17:14:47: [ RdLbaNoData(0x3B723D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1809 ] 
17:14:47: [ RdLbaNoData(0x3B723D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1810 ] 
17:14:47: [ RdLbaNoData(0x3B723D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1811 ] 
17:14:47: [ RdLbaNoData(0x3B723D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1812 ] 
17:14:47: [ RdLbaNoData(0x3B723D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1813 ] 
17:14:48: [ RdLbaNoData(0x3B723D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1814 ] 
17:14:48: [ RdLbaNoData(0x3B723D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1815 ] 
17:14:48: [ RdLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1816 ] 
17:14:48: [ RdLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1817 ] 
17:14:48: [ RdLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1818 ] 
17:14:48: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1819 ] 
17:14:48: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1820 ] 
17:14:48: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1821 ] 
17:14:48: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1822 ] 
17:14:48: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1823 ] 
17:14:48: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1824 ] 
17:14:48: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1825 ] 
17:14:48: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1826 ] 
17:14:48: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1827 ] 
17:14:48: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1828 ] 
17:14:48: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1829 ] 
17:14:48: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1830 ] 
17:14:48: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1831 ] 
17:14:48: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1832 ] 
17:14:48: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1833 ] 
17:14:48: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1834 ] 
17:14:48: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1835 ] 
17:14:48: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1836 ] 
17:14:48: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1837 ] 
17:14:48: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1838 ] 
17:14:48: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1839 ] 
17:14:48: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1840 ] 
17:14:48: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1841 ] 
17:14:48: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1842 ] 
17:14:48: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1843 ] 
17:14:48: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1844 ] 
17:14:48: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1845 ] 
17:14:48: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1846 ] 
17:14:48: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1847 ] 
17:14:49: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1848 ] 
17:14:49: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1849 ] 
17:14:49: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1850 ] 
17:14:49: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1851 ] 
17:14:49: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1852 ] 
17:14:49: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1853 ] 
17:14:49: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1854 ] 
17:14:49: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1855 ] 
17:14:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B72314 to EndLba:0x3B723FF with Anyword Pattern 2 

17:14:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5ED0>, <py_sfcl.CommandDataDefinition object at 0x061EDD20>) , Command count = 1856 ] 
17:14:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:49: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1857 ] 
17:14:49: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xEB
17:14:49: [INFO] - Number of Written blocks matches as per argument provided.
17:14:49: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B7237F to endLba:0x3B723FF
17:14:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7237F to EndLba:0x3B723FF with Anyword Pattern 2
17:14:49: [ WrLbaNoData(0x3B7237F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1858 ] 
17:14:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7237F to EndLba:0x3B723FF with Anyword Pattern 2 

17:14:49: [CH4344_Send_Num_WR_Blocks]#### Single Read to the card from startLba:0x3B7237F to endLba:0x3B723FF
17:14:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B7237F to EndLba:0x3B723FF with Anyword Pattern 2
17:14:49: [ RdLbaNoData(0x3B7237F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1859 ] 
17:14:49: [ RdLbaNoData(0x3B72380, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1860 ] 
17:14:49: [ RdLbaNoData(0x3B72381, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1861 ] 
17:14:49: [ RdLbaNoData(0x3B72382, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1862 ] 
17:14:49: [ RdLbaNoData(0x3B72383, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1863 ] 
17:14:49: [ RdLbaNoData(0x3B72384, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1864 ] 
17:14:49: [ RdLbaNoData(0x3B72385, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1865 ] 
17:14:49: [ RdLbaNoData(0x3B72386, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1866 ] 
17:14:49: [ RdLbaNoData(0x3B72387, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1867 ] 
17:14:49: [ RdLbaNoData(0x3B72388, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1868 ] 
17:14:49: [ RdLbaNoData(0x3B72389, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1869 ] 
17:14:49: [ RdLbaNoData(0x3B7238A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1870 ] 
17:14:49: [ RdLbaNoData(0x3B7238B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1871 ] 
17:14:49: [ RdLbaNoData(0x3B7238C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1872 ] 
17:14:49: [ RdLbaNoData(0x3B7238D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1873 ] 
17:14:49: [ RdLbaNoData(0x3B7238E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1874 ] 
17:14:49: [ RdLbaNoData(0x3B7238F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1875 ] 
17:14:49: [ RdLbaNoData(0x3B72390, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1876 ] 
17:14:50: [ RdLbaNoData(0x3B72391, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1877 ] 
17:14:50: [ RdLbaNoData(0x3B72392, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1878 ] 
17:14:50: [ RdLbaNoData(0x3B72393, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1879 ] 
17:14:50: [ RdLbaNoData(0x3B72394, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1880 ] 
17:14:50: [ RdLbaNoData(0x3B72395, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1881 ] 
17:14:50: [ RdLbaNoData(0x3B72396, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1882 ] 
17:14:50: [ RdLbaNoData(0x3B72397, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1883 ] 
17:14:50: [ RdLbaNoData(0x3B72398, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1884 ] 
17:14:50: [ RdLbaNoData(0x3B72399, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1885 ] 
17:14:50: [ RdLbaNoData(0x3B7239A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1886 ] 
17:14:50: [ RdLbaNoData(0x3B7239B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1887 ] 
17:14:50: [ RdLbaNoData(0x3B7239C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1888 ] 
17:14:50: [ RdLbaNoData(0x3B7239D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1889 ] 
17:14:50: [ RdLbaNoData(0x3B7239E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1890 ] 
17:14:50: [ RdLbaNoData(0x3B7239F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1891 ] 
17:14:50: [ RdLbaNoData(0x3B723A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1892 ] 
17:14:50: [ RdLbaNoData(0x3B723A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1893 ] 
17:14:50: [ RdLbaNoData(0x3B723A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1894 ] 
17:14:50: [ RdLbaNoData(0x3B723A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1895 ] 
17:14:50: [ RdLbaNoData(0x3B723A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1896 ] 
17:14:50: [ RdLbaNoData(0x3B723A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1897 ] 
17:14:50: [ RdLbaNoData(0x3B723A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1898 ] 
17:14:50: [ RdLbaNoData(0x3B723A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1899 ] 
17:14:50: [ RdLbaNoData(0x3B723A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1900 ] 
17:14:50: [ RdLbaNoData(0x3B723A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1901 ] 
17:14:50: [ RdLbaNoData(0x3B723AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1902 ] 
17:14:50: [ RdLbaNoData(0x3B723AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1903 ] 
17:14:50: [ RdLbaNoData(0x3B723AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1904 ] 
17:14:50: [ RdLbaNoData(0x3B723AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1905 ] 
17:14:50: [ RdLbaNoData(0x3B723AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1906 ] 
17:14:50: [ RdLbaNoData(0x3B723AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1907 ] 
17:14:51: [ RdLbaNoData(0x3B723B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1908 ] 
17:14:51: [ RdLbaNoData(0x3B723B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1909 ] 
17:14:51: [ RdLbaNoData(0x3B723B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1910 ] 
17:14:51: [ RdLbaNoData(0x3B723B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1911 ] 
17:14:51: [ RdLbaNoData(0x3B723B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1912 ] 
17:14:51: [ RdLbaNoData(0x3B723B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1913 ] 
17:14:51: [ RdLbaNoData(0x3B723B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1914 ] 
17:14:51: [ RdLbaNoData(0x3B723B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1915 ] 
17:14:51: [ RdLbaNoData(0x3B723B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1916 ] 
17:14:51: [ RdLbaNoData(0x3B723B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1917 ] 
17:14:51: [ RdLbaNoData(0x3B723BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1918 ] 
17:14:51: [ RdLbaNoData(0x3B723BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1919 ] 
17:14:51: [ RdLbaNoData(0x3B723BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1920 ] 
17:14:51: [ RdLbaNoData(0x3B723BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1921 ] 
17:14:51: [ RdLbaNoData(0x3B723BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1922 ] 
17:14:51: [ RdLbaNoData(0x3B723BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1923 ] 
17:14:51: [ RdLbaNoData(0x3B723C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1924 ] 
17:14:51: [ RdLbaNoData(0x3B723C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1925 ] 
17:14:51: [ RdLbaNoData(0x3B723C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1926 ] 
17:14:51: [ RdLbaNoData(0x3B723C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1927 ] 
17:14:51: [ RdLbaNoData(0x3B723C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1928 ] 
17:14:51: [ RdLbaNoData(0x3B723C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1929 ] 
17:14:51: [ RdLbaNoData(0x3B723C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1930 ] 
17:14:51: [ RdLbaNoData(0x3B723C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1931 ] 
17:14:51: [ RdLbaNoData(0x3B723C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1932 ] 
17:14:51: [ RdLbaNoData(0x3B723C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1933 ] 
17:14:51: [ RdLbaNoData(0x3B723CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1934 ] 
17:14:51: [ RdLbaNoData(0x3B723CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1935 ] 
17:14:51: [ RdLbaNoData(0x3B723CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1936 ] 
17:14:51: [ RdLbaNoData(0x3B723CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1937 ] 
17:14:51: [ RdLbaNoData(0x3B723CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1938 ] 
17:14:51: [ RdLbaNoData(0x3B723CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1939 ] 
17:14:51: [ RdLbaNoData(0x3B723D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1940 ] 
17:14:51: [ RdLbaNoData(0x3B723D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1941 ] 
17:14:51: [ RdLbaNoData(0x3B723D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1942 ] 
17:14:51: [ RdLbaNoData(0x3B723D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1943 ] 
17:14:51: [ RdLbaNoData(0x3B723D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1944 ] 
17:14:52: [ RdLbaNoData(0x3B723D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1945 ] 
17:14:52: [ RdLbaNoData(0x3B723D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1946 ] 
17:14:52: [ RdLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1947 ] 
17:14:52: [ RdLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1948 ] 
17:14:52: [ RdLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1949 ] 
17:14:52: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1950 ] 
17:14:52: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1951 ] 
17:14:52: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1952 ] 
17:14:52: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1953 ] 
17:14:52: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1954 ] 
17:14:52: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1955 ] 
17:14:52: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1956 ] 
17:14:52: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1957 ] 
17:14:52: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1958 ] 
17:14:52: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1959 ] 
17:14:52: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1960 ] 
17:14:52: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1961 ] 
17:14:52: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1962 ] 
17:14:52: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1963 ] 
17:14:52: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1964 ] 
17:14:52: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1965 ] 
17:14:52: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1966 ] 
17:14:52: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1967 ] 
17:14:52: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1968 ] 
17:14:52: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1969 ] 
17:14:52: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1970 ] 
17:14:52: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1971 ] 
17:14:52: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1972 ] 
17:14:52: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1973 ] 
17:14:52: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1974 ] 
17:14:52: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1975 ] 
17:14:52: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1976 ] 
17:14:53: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1977 ] 
17:14:53: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1978 ] 
17:14:53: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1979 ] 
17:14:53: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1980 ] 
17:14:53: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1981 ] 
17:14:53: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1982 ] 
17:14:53: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1983 ] 
17:14:53: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1984 ] 
17:14:53: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1985 ] 
17:14:53: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1986 ] 
17:14:53: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B7237F to EndLba:0x3B723FF with Anyword Pattern 2 

17:14:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9690>, <py_sfcl.CommandDataDefinition object at 0x061EDDB0>) , Command count = 1987 ] 
17:14:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:53: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 1988 ] 
17:14:53: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x80
17:14:53: [INFO] - Number of Written blocks matches as per argument provided.
17:14:53: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B723D7 to endLba:0x3B723FF
17:14:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B723D7 to EndLba:0x3B723FF with Anyword Pattern 3
17:14:53: [ WrLbaNoData(0x3B723D7, 0x28, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 1989 ] 
17:14:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B723D7 to EndLba:0x3B723FF with Anyword Pattern 3 

17:14:53: [CH4344_Send_Num_WR_Blocks]#### Single Read to the card from startLba:0x3B723D7 to endLba:0x3B723FF
17:14:53: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B723D7 to EndLba:0x3B723FF with Anyword Pattern 3
17:14:53: [ RdLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1990 ] 
17:14:53: [ RdLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1991 ] 
17:14:53: [ RdLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1992 ] 
17:14:53: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1993 ] 
17:14:53: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1994 ] 
17:14:53: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1995 ] 
17:14:53: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1996 ] 
17:14:53: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1997 ] 
17:14:53: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1998 ] 
17:14:53: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1999 ] 
17:14:53: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2000 ] 
17:14:53: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2001 ] 
17:14:53: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2002 ] 
17:14:53: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2003 ] 
17:14:53: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2004 ] 
17:14:54: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2005 ] 
17:14:54: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2006 ] 
17:14:54: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2007 ] 
17:14:54: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2008 ] 
17:14:54: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2009 ] 
17:14:54: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2010 ] 
17:14:54: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2011 ] 
17:14:54: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2012 ] 
17:14:54: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2013 ] 
17:14:54: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2014 ] 
17:14:54: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2015 ] 
17:14:54: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2016 ] 
17:14:54: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2017 ] 
17:14:54: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2018 ] 
17:14:54: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2019 ] 
17:14:54: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2020 ] 
17:14:54: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2021 ] 
17:14:54: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2022 ] 
17:14:54: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2023 ] 
17:14:54: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2024 ] 
17:14:54: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2025 ] 
17:14:54: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2026 ] 
17:14:54: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2027 ] 
17:14:54: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2028 ] 
17:14:54: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2029 ] 
17:14:54: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B723D7 to EndLba:0x3B723FF with Anyword Pattern 3 

17:14:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDC90>, <py_sfcl.CommandDataDefinition object at 0x052F43C0>) , Command count = 2030 ] 
17:14:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:54: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 2031 ] 
17:14:54: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x28
17:14:54: [INFO] - Number of Written blocks matches as per argument provided.
17:14:54: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B72389 to endLba:0x3B723FF
17:14:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B72389 to EndLba:0x3B723FF with Anyword Pattern 1
17:14:54: [ WrLbaNoData(0x3B72389, 0x76, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2032 ] 
17:14:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B72389 to EndLba:0x3B723FF with Anyword Pattern 1 

17:14:54: [CH4344_Send_Num_WR_Blocks]#### Single Read to the card from startLba:0x3B72389 to endLba:0x3B723FF
17:14:54: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B72389 to EndLba:0x3B723FF with Anyword Pattern 1
17:14:54: [ RdLbaNoData(0x3B72389, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2033 ] 
17:14:55: [ RdLbaNoData(0x3B7238A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2034 ] 
17:14:55: [ RdLbaNoData(0x3B7238B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2035 ] 
17:14:55: [ RdLbaNoData(0x3B7238C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2036 ] 
17:14:55: [ RdLbaNoData(0x3B7238D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2037 ] 
17:14:55: [ RdLbaNoData(0x3B7238E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2038 ] 
17:14:55: [ RdLbaNoData(0x3B7238F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2039 ] 
17:14:55: [ RdLbaNoData(0x3B72390, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2040 ] 
17:14:55: [ RdLbaNoData(0x3B72391, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2041 ] 
17:14:55: [ RdLbaNoData(0x3B72392, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2042 ] 
17:14:55: [ RdLbaNoData(0x3B72393, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2043 ] 
17:14:55: [ RdLbaNoData(0x3B72394, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2044 ] 
17:14:55: [ RdLbaNoData(0x3B72395, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2045 ] 
17:14:55: [ RdLbaNoData(0x3B72396, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2046 ] 
17:14:55: [ RdLbaNoData(0x3B72397, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2047 ] 
17:14:55: [ RdLbaNoData(0x3B72398, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2048 ] 
17:14:55: [ RdLbaNoData(0x3B72399, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2049 ] 
17:14:55: [ RdLbaNoData(0x3B7239A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2050 ] 
17:14:55: [ RdLbaNoData(0x3B7239B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2051 ] 
17:14:55: [ RdLbaNoData(0x3B7239C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2052 ] 
17:14:55: [ RdLbaNoData(0x3B7239D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2053 ] 
17:14:55: [ RdLbaNoData(0x3B7239E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2054 ] 
17:14:55: [ RdLbaNoData(0x3B7239F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2055 ] 
17:14:55: [ RdLbaNoData(0x3B723A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2056 ] 
17:14:55: [ RdLbaNoData(0x3B723A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2057 ] 
17:14:55: [ RdLbaNoData(0x3B723A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2058 ] 
17:14:55: [ RdLbaNoData(0x3B723A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2059 ] 
17:14:55: [ RdLbaNoData(0x3B723A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2060 ] 
17:14:55: [ RdLbaNoData(0x3B723A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2061 ] 
17:14:55: [ RdLbaNoData(0x3B723A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2062 ] 
17:14:55: [ RdLbaNoData(0x3B723A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2063 ] 
17:14:55: [ RdLbaNoData(0x3B723A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2064 ] 
17:14:55: [ RdLbaNoData(0x3B723A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2065 ] 
17:14:56: [ RdLbaNoData(0x3B723AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2066 ] 
17:14:56: [ RdLbaNoData(0x3B723AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2067 ] 
17:14:56: [ RdLbaNoData(0x3B723AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2068 ] 
17:14:56: [ RdLbaNoData(0x3B723AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2069 ] 
17:14:56: [ RdLbaNoData(0x3B723AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2070 ] 
17:14:56: [ RdLbaNoData(0x3B723AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2071 ] 
17:14:56: [ RdLbaNoData(0x3B723B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2072 ] 
17:14:56: [ RdLbaNoData(0x3B723B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2073 ] 
17:14:56: [ RdLbaNoData(0x3B723B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2074 ] 
17:14:56: [ RdLbaNoData(0x3B723B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2075 ] 
17:14:56: [ RdLbaNoData(0x3B723B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2076 ] 
17:14:56: [ RdLbaNoData(0x3B723B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2077 ] 
17:14:56: [ RdLbaNoData(0x3B723B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2078 ] 
17:14:56: [ RdLbaNoData(0x3B723B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2079 ] 
17:14:56: [ RdLbaNoData(0x3B723B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2080 ] 
17:14:56: [ RdLbaNoData(0x3B723B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2081 ] 
17:14:56: [ RdLbaNoData(0x3B723BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2082 ] 
17:14:56: [ RdLbaNoData(0x3B723BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2083 ] 
17:14:56: [ RdLbaNoData(0x3B723BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2084 ] 
17:14:56: [ RdLbaNoData(0x3B723BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2085 ] 
17:14:56: [ RdLbaNoData(0x3B723BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2086 ] 
17:14:56: [ RdLbaNoData(0x3B723BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2087 ] 
17:14:56: [ RdLbaNoData(0x3B723C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2088 ] 
17:14:56: [ RdLbaNoData(0x3B723C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2089 ] 
17:14:56: [ RdLbaNoData(0x3B723C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2090 ] 
17:14:56: [ RdLbaNoData(0x3B723C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2091 ] 
17:14:56: [ RdLbaNoData(0x3B723C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2092 ] 
17:14:56: [ RdLbaNoData(0x3B723C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2093 ] 
17:14:56: [ RdLbaNoData(0x3B723C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2094 ] 
17:14:56: [ RdLbaNoData(0x3B723C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2095 ] 
17:14:56: [ RdLbaNoData(0x3B723C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2096 ] 
17:14:56: [ RdLbaNoData(0x3B723C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2097 ] 
17:14:56: [ RdLbaNoData(0x3B723CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2098 ] 
17:14:56: [ RdLbaNoData(0x3B723CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2099 ] 
17:14:56: [ RdLbaNoData(0x3B723CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2100 ] 
17:14:57: [ RdLbaNoData(0x3B723CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2101 ] 
17:14:57: [ RdLbaNoData(0x3B723CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2102 ] 
17:14:57: [ RdLbaNoData(0x3B723CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2103 ] 
17:14:57: [ RdLbaNoData(0x3B723D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2104 ] 
17:14:57: [ RdLbaNoData(0x3B723D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2105 ] 
17:14:57: [ RdLbaNoData(0x3B723D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2106 ] 
17:14:57: [ RdLbaNoData(0x3B723D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2107 ] 
17:14:57: [ RdLbaNoData(0x3B723D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2108 ] 
17:14:57: [ RdLbaNoData(0x3B723D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2109 ] 
17:14:57: [ RdLbaNoData(0x3B723D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2110 ] 
17:14:57: [ RdLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2111 ] 
17:14:57: [ RdLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2112 ] 
17:14:57: [ RdLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2113 ] 
17:14:57: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2114 ] 
17:14:57: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2115 ] 
17:14:57: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2116 ] 
17:14:57: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2117 ] 
17:14:57: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2118 ] 
17:14:57: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2119 ] 
17:14:57: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2120 ] 
17:14:57: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2121 ] 
17:14:57: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2122 ] 
17:14:57: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2123 ] 
17:14:57: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2124 ] 
17:14:57: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2125 ] 
17:14:57: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2126 ] 
17:14:57: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2127 ] 
17:14:57: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2128 ] 
17:14:57: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2129 ] 
17:14:57: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2130 ] 
17:14:57: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2131 ] 
17:14:57: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2132 ] 
17:14:57: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2133 ] 
17:14:57: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2134 ] 
17:14:58: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2135 ] 
17:14:58: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2136 ] 
17:14:58: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2137 ] 
17:14:58: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2138 ] 
17:14:58: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2139 ] 
17:14:58: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2140 ] 
17:14:58: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2141 ] 
17:14:58: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2142 ] 
17:14:58: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2143 ] 
17:14:58: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2144 ] 
17:14:58: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2145 ] 
17:14:58: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2146 ] 
17:14:58: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2147 ] 
17:14:58: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2148 ] 
17:14:58: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2149 ] 
17:14:58: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2150 ] 
17:14:58: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B72389 to EndLba:0x3B723FF with Anyword Pattern 1 

17:14:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0540D1B0>, <py_sfcl.CommandDataDefinition object at 0x054154B0>) , Command count = 2151 ] 
17:14:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:14:58: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 2152 ] 
17:14:58: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x76
17:14:58: [INFO] - Number of Written blocks matches as per argument provided.
17:14:58: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B723D6 to endLba:0x3B723FF
17:14:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B723D6 to EndLba:0x3B723FF with Anyword Pattern 1
17:14:58: [ WrLbaNoData(0x3B723D6, 0x29, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2153 ] 
17:14:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B723D6 to EndLba:0x3B723FF with Anyword Pattern 1 

17:14:58: [CH4344_Send_Num_WR_Blocks]#### Single Read to the card from startLba:0x3B723D6 to endLba:0x3B723FF
17:14:58: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B723D6 to EndLba:0x3B723FF with Anyword Pattern 1
17:14:58: [ RdLbaNoData(0x3B723D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2154 ] 
17:14:58: [ RdLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2155 ] 
17:14:58: [ RdLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2156 ] 
17:14:58: [ RdLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2157 ] 
17:14:58: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2158 ] 
17:14:58: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2159 ] 
17:14:58: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2160 ] 
17:14:58: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2161 ] 
17:14:59: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2162 ] 
17:14:59: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2163 ] 
17:14:59: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2164 ] 
17:14:59: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2165 ] 
17:14:59: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2166 ] 
17:14:59: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2167 ] 
17:14:59: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2168 ] 
17:14:59: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2169 ] 
17:14:59: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2170 ] 
17:14:59: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2171 ] 
17:14:59: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2172 ] 
17:14:59: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2173 ] 
17:14:59: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2174 ] 
17:14:59: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2175 ] 
17:14:59: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2176 ] 
17:14:59: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2177 ] 
17:14:59: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2178 ] 
17:14:59: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2179 ] 
17:14:59: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2180 ] 
17:14:59: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2181 ] 
17:14:59: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2182 ] 
17:14:59: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2183 ] 
17:14:59: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2184 ] 
17:14:59: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2185 ] 
17:14:59: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2186 ] 
17:14:59: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2187 ] 
17:14:59: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2188 ] 
17:14:59: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2189 ] 
17:14:59: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2190 ] 
17:14:59: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2191 ] 
17:15:00: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2192 ] 
17:15:00: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2193 ] 
17:15:00: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2194 ] 
17:15:00: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B723D6 to EndLba:0x3B723FF with Anyword Pattern 1 

17:15:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDBD0>, <py_sfcl.CommandDataDefinition object at 0x061F5930>) , Command count = 2195 ] 
17:15:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:15:00: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 2196 ] 
17:15:00: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x29
17:15:00: [INFO] - Number of Written blocks matches as per argument provided.
17:15:00: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B7235E to endLba:0x3B723FF
17:15:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7235E to EndLba:0x3B723FF with Anyword Pattern 3
17:15:00: [ WrLbaNoData(0x3B7235E, 0xA1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2197 ] 
17:15:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7235E to EndLba:0x3B723FF with Anyword Pattern 3 

17:15:00: [CH4344_Send_Num_WR_Blocks]#### Single Read to the card from startLba:0x3B7235E to endLba:0x3B723FF
17:15:00: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B7235E to EndLba:0x3B723FF with Anyword Pattern 3
17:15:00: [ RdLbaNoData(0x3B7235E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2198 ] 
17:15:00: [ RdLbaNoData(0x3B7235F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2199 ] 
17:15:00: [ RdLbaNoData(0x3B72360, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2200 ] 
17:15:00: [ RdLbaNoData(0x3B72361, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2201 ] 
17:15:00: [ RdLbaNoData(0x3B72362, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2202 ] 
17:15:00: [ RdLbaNoData(0x3B72363, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2203 ] 
17:15:00: [ RdLbaNoData(0x3B72364, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2204 ] 
17:15:00: [ RdLbaNoData(0x3B72365, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2205 ] 
17:15:00: [ RdLbaNoData(0x3B72366, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2206 ] 
17:15:00: [ RdLbaNoData(0x3B72367, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2207 ] 
17:15:00: [ RdLbaNoData(0x3B72368, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2208 ] 
17:15:00: [ RdLbaNoData(0x3B72369, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2209 ] 
17:15:00: [ RdLbaNoData(0x3B7236A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2210 ] 
17:15:00: [ RdLbaNoData(0x3B7236B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2211 ] 
17:15:00: [ RdLbaNoData(0x3B7236C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2212 ] 
17:15:00: [ RdLbaNoData(0x3B7236D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2213 ] 
17:15:00: [ RdLbaNoData(0x3B7236E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2214 ] 
17:15:00: [ RdLbaNoData(0x3B7236F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2215 ] 
17:15:00: [ RdLbaNoData(0x3B72370, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2216 ] 
17:15:01: [ RdLbaNoData(0x3B72371, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2217 ] 
17:15:01: [ RdLbaNoData(0x3B72372, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2218 ] 
17:15:01: [ RdLbaNoData(0x3B72373, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2219 ] 
17:15:01: [ RdLbaNoData(0x3B72374, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2220 ] 
17:15:01: [ RdLbaNoData(0x3B72375, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2221 ] 
17:15:01: [ RdLbaNoData(0x3B72376, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2222 ] 
17:15:01: [ RdLbaNoData(0x3B72377, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2223 ] 
17:15:01: [ RdLbaNoData(0x3B72378, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2224 ] 
17:15:01: [ RdLbaNoData(0x3B72379, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2225 ] 
17:15:01: [ RdLbaNoData(0x3B7237A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2226 ] 
17:15:01: [ RdLbaNoData(0x3B7237B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2227 ] 
17:15:01: [ RdLbaNoData(0x3B7237C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2228 ] 
17:15:01: [ RdLbaNoData(0x3B7237D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2229 ] 
17:15:01: [ RdLbaNoData(0x3B7237E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2230 ] 
17:15:01: [ RdLbaNoData(0x3B7237F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2231 ] 
17:15:01: [ RdLbaNoData(0x3B72380, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2232 ] 
17:15:01: [ RdLbaNoData(0x3B72381, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2233 ] 
17:15:01: [ RdLbaNoData(0x3B72382, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2234 ] 
17:15:01: [ RdLbaNoData(0x3B72383, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2235 ] 
17:15:01: [ RdLbaNoData(0x3B72384, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2236 ] 
17:15:01: [ RdLbaNoData(0x3B72385, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2237 ] 
17:15:01: [ RdLbaNoData(0x3B72386, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2238 ] 
17:15:01: [ RdLbaNoData(0x3B72387, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2239 ] 
17:15:01: [ RdLbaNoData(0x3B72388, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2240 ] 
17:15:01: [ RdLbaNoData(0x3B72389, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2241 ] 
17:15:01: [ RdLbaNoData(0x3B7238A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2242 ] 
17:15:01: [ RdLbaNoData(0x3B7238B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2243 ] 
17:15:01: [ RdLbaNoData(0x3B7238C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2244 ] 
17:15:01: [ RdLbaNoData(0x3B7238D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2245 ] 
17:15:01: [ RdLbaNoData(0x3B7238E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2246 ] 
17:15:01: [ RdLbaNoData(0x3B7238F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2247 ] 
17:15:01: [ RdLbaNoData(0x3B72390, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2248 ] 
17:15:01: [ RdLbaNoData(0x3B72391, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2249 ] 
17:15:01: [ RdLbaNoData(0x3B72392, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2250 ] 
17:15:01: [ RdLbaNoData(0x3B72393, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2251 ] 
17:15:01: [ RdLbaNoData(0x3B72394, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2252 ] 
17:15:01: [ RdLbaNoData(0x3B72395, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2253 ] 
17:15:01: [ RdLbaNoData(0x3B72396, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2254 ] 
17:15:02: [ RdLbaNoData(0x3B72397, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2255 ] 
17:15:02: [ RdLbaNoData(0x3B72398, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2256 ] 
17:15:02: [ RdLbaNoData(0x3B72399, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2257 ] 
17:15:02: [ RdLbaNoData(0x3B7239A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2258 ] 
17:15:02: [ RdLbaNoData(0x3B7239B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2259 ] 
17:15:02: [ RdLbaNoData(0x3B7239C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2260 ] 
17:15:02: [ RdLbaNoData(0x3B7239D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2261 ] 
17:15:02: [ RdLbaNoData(0x3B7239E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2262 ] 
17:15:02: [ RdLbaNoData(0x3B7239F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2263 ] 
17:15:02: [ RdLbaNoData(0x3B723A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2264 ] 
17:15:02: [ RdLbaNoData(0x3B723A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2265 ] 
17:15:02: [ RdLbaNoData(0x3B723A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2266 ] 
17:15:02: [ RdLbaNoData(0x3B723A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2267 ] 
17:15:02: [ RdLbaNoData(0x3B723A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2268 ] 
17:15:02: [ RdLbaNoData(0x3B723A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2269 ] 
17:15:02: [ RdLbaNoData(0x3B723A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2270 ] 
17:15:02: [ RdLbaNoData(0x3B723A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2271 ] 
17:15:02: [ RdLbaNoData(0x3B723A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2272 ] 
17:15:02: [ RdLbaNoData(0x3B723A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2273 ] 
17:15:02: [ RdLbaNoData(0x3B723AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2274 ] 
17:15:02: [ RdLbaNoData(0x3B723AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2275 ] 
17:15:02: [ RdLbaNoData(0x3B723AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2276 ] 
17:15:02: [ RdLbaNoData(0x3B723AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2277 ] 
17:15:02: [ RdLbaNoData(0x3B723AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2278 ] 
17:15:02: [ RdLbaNoData(0x3B723AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2279 ] 
17:15:02: [ RdLbaNoData(0x3B723B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2280 ] 
17:15:02: [ RdLbaNoData(0x3B723B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2281 ] 
17:15:02: [ RdLbaNoData(0x3B723B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2282 ] 
17:15:02: [ RdLbaNoData(0x3B723B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2283 ] 
17:15:02: [ RdLbaNoData(0x3B723B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2284 ] 
17:15:02: [ RdLbaNoData(0x3B723B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2285 ] 
17:15:03: [ RdLbaNoData(0x3B723B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2286 ] 
17:15:03: [ RdLbaNoData(0x3B723B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2287 ] 
17:15:03: [ RdLbaNoData(0x3B723B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2288 ] 
17:15:03: [ RdLbaNoData(0x3B723B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2289 ] 
17:15:03: [ RdLbaNoData(0x3B723BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2290 ] 
17:15:03: [ RdLbaNoData(0x3B723BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2291 ] 
17:15:03: [ RdLbaNoData(0x3B723BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2292 ] 
17:15:03: [ RdLbaNoData(0x3B723BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2293 ] 
17:15:03: [ RdLbaNoData(0x3B723BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2294 ] 
17:15:03: [ RdLbaNoData(0x3B723BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2295 ] 
17:15:03: [ RdLbaNoData(0x3B723C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2296 ] 
17:15:03: [ RdLbaNoData(0x3B723C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2297 ] 
17:15:03: [ RdLbaNoData(0x3B723C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2298 ] 
17:15:03: [ RdLbaNoData(0x3B723C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2299 ] 
17:15:03: [ RdLbaNoData(0x3B723C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2300 ] 
17:15:03: [ RdLbaNoData(0x3B723C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2301 ] 
17:15:03: [ RdLbaNoData(0x3B723C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2302 ] 
17:15:03: [ RdLbaNoData(0x3B723C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2303 ] 
17:15:03: [ RdLbaNoData(0x3B723C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2304 ] 
17:15:03: [ RdLbaNoData(0x3B723C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2305 ] 
17:15:03: [ RdLbaNoData(0x3B723CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2306 ] 
17:15:03: [ RdLbaNoData(0x3B723CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2307 ] 
17:15:03: [ RdLbaNoData(0x3B723CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2308 ] 
17:15:03: [ RdLbaNoData(0x3B723CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2309 ] 
17:15:03: [ RdLbaNoData(0x3B723CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2310 ] 
17:15:03: [ RdLbaNoData(0x3B723CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2311 ] 
17:15:03: [ RdLbaNoData(0x3B723D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2312 ] 
17:15:03: [ RdLbaNoData(0x3B723D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2313 ] 
17:15:03: [ RdLbaNoData(0x3B723D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2314 ] 
17:15:03: [ RdLbaNoData(0x3B723D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2315 ] 
17:15:03: [ RdLbaNoData(0x3B723D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2316 ] 
17:15:03: [ RdLbaNoData(0x3B723D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2317 ] 
17:15:03: [ RdLbaNoData(0x3B723D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2318 ] 
17:15:03: [ RdLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2319 ] 
17:15:03: [ RdLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2320 ] 
17:15:03: [ RdLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2321 ] 
17:15:03: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2322 ] 
17:15:03: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2323 ] 
17:15:04: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2324 ] 
17:15:04: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2325 ] 
17:15:04: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2326 ] 
17:15:04: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2327 ] 
17:15:04: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2328 ] 
17:15:04: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2329 ] 
17:15:04: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2330 ] 
17:15:04: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2331 ] 
17:15:04: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2332 ] 
17:15:04: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2333 ] 
17:15:04: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2334 ] 
17:15:04: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2335 ] 
17:15:04: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2336 ] 
17:15:04: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2337 ] 
17:15:04: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2338 ] 
17:15:04: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2339 ] 
17:15:04: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2340 ] 
17:15:04: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2341 ] 
17:15:04: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2342 ] 
17:15:04: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2343 ] 
17:15:04: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2344 ] 
17:15:04: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2345 ] 
17:15:04: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2346 ] 
17:15:04: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2347 ] 
17:15:04: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2348 ] 
17:15:04: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2349 ] 
17:15:04: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2350 ] 
17:15:04: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2351 ] 
17:15:04: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2352 ] 
17:15:04: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2353 ] 
17:15:04: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2354 ] 
17:15:05: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2355 ] 
17:15:05: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2356 ] 
17:15:05: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2357 ] 
17:15:05: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2358 ] 
17:15:05: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B7235E to EndLba:0x3B723FF with Anyword Pattern 3 

17:15:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5990>, <py_sfcl.CommandDataDefinition object at 0x053F7930>) , Command count = 2359 ] 
17:15:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:15:05: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 2360 ] 
17:15:05: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0xA1
17:15:05: [INFO] - Number of Written blocks matches as per argument provided.
17:15:05: [CH4344_Send_Num_WR_Blocks]#### MultipleWrite to the card from startLba:0x3B723FF to endLba:0x3B723FF
17:15:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B723FF to EndLba:0x3B72400 with Anyword Pattern 2
17:15:05: [ WrLbaNoData(0x3B723FF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2361 ] 
17:15:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B723FF to EndLba:0x3B72400 with Anyword Pattern 2 

17:15:05: [CH4344_Send_Num_WR_Blocks]#### Single Read to the card from startLba:0x3B723FF to endLba:0x3B723FF
17:15:05: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B723FF to EndLba:0x3B72400 with Anyword Pattern 2
17:15:05: [ RdLbaNoData(0x3B723FF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2362 ] 
17:15:05: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B723FF to EndLba:0x3B72400 with Anyword Pattern 2 

17:15:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED240>, <py_sfcl.CommandDataDefinition object at 0x061F5D20>) , Command count = 2363 ] 
17:15:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:15:05: [ CardGetLastWriteBlocks(0x1, <0x200/0x200, Spc, pat:0x0>) , Command count = 2364 ] 
17:15:05: ACMD22[ SEND_NUM_WR_BLOCKS ] Passed with block count: 0x1
17:15:05: [ERROR] - Number of Written blocks does not match as per argument provided.
17:15:05: [CH4344_Num_WR_Blocks]### TEST CASE EXECUTION IS COMPLETED.
17:15:05: ########################################
17:15:05: Finished Running script CH4344_Send_Num_WR_Blocks 
17:15:05: ########################################
17:15:05: ########################################
17:15:05: Stated Running script CF409_Card_functional_4_3_6_1_PWP_TWP_managment 
17:15:05: ########################################
17:15:05: [CF409_Card_functional_4_3_6_1_PWP_TWP_managment]###[INFO] : Execution Started 
17:15:05: [CF409_Card_functional_4_3_6_1_PWP_TWP_managment]###[INFO] TEST CASE ITERATION IS STARTED.

17:15:05: [CF409_Card_functional_4_3_6_1_PWP_TWP_managment]###[INFO] Name: 4_3_6_1 - Write Protect management (Temporary+Permanent WP)
17:15:05: [GO4_globalInitCard]### Switch to Specify Card Type
17:15:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:15:07: Host Frequency set to 25000 KHz
17:15:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:15:07: [GO18_globalSetVolt]### Set Host Voltage value.
17:15:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:15:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x061FF660>, 0x0, True) , Command count = 2365 ] 
17:15:07: [GO18_globalSetVolt]### Host voltage value is set.
17:15:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:15:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x061F5F00>, 0x0, False) , Command count = 2366 ] 
17:15:07: [GO18_globalSetVolt]### Host voltage value is set.
17:15:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2367 ] 
17:15:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:15:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2368 ] 
17:15:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:15:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:15:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:15:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:15:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:15:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2369 ] 
17:15:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:15:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:15:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053CB690>, <py_sfcl.CommandDataDefinition object at 0x061ED210>) , Command count = 2370 ] 
17:15:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:15:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9720>, <py_sfcl.CommandDataDefinition object at 0x061FF7E0>) , Command count = 2371 ] 
17:15:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:15:07: [ SetCardRCA(0x1, 0xD555) , Command count = 2372 ] 
17:15:08: [DVTCommonLib]### Identification :Idenfication of card completed 

17:15:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:15:08: Host Frequency set to 25000 KHz
17:15:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:15:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
17:15:08: ####CSD Registe 2.0 Values####
17:15:08: CSD_STRUCTURE                                 :0x1
17:15:08: Reserv1                                       :0x0
17:15:08: Time Access 1 TAAC                            :0xe
17:15:08: Time Access 2 NSAC*100                        :0x0
17:15:08: Data Transfer Rate TRAN_SPEED                 :0x32
17:15:08: Card Command Classess CCC                     :0x5b5
17:15:08: Max Read Data Block Length  READ_BL_LEN       :0x9
17:15:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:15:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:15:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:15:08: DSR(driver stage register)  DSR_IMP           :0x0
17:15:08: Reserv2                                       :0x0
17:15:08: Device Size C_SIZE                            :0xedc8
17:15:08: Reserv3                                       :0x0
17:15:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:15:08: Erase Sector Size SECTOR_SIZE                 :0x7f
17:15:08: Write Protect Group Size WP_GRP_SIZE          :0x0
17:15:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:15:08: Reserv4                                       :0x0
17:15:08: Write Speed Factor R2W_FACTOR                 :0x2
17:15:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:15:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:15:08: FILE_FORMAT_GRP                               :0x0
17:15:08: COPY flag                                     :0x1
17:15:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:15:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
17:15:08: File_Format                                   :0x0
17:15:08: CRC                                           :0x0
17:15:08: ####CSD Registe Values####  

17:15:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:15:08: [GetSCRRegisterEntry] Passed
17:15:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:15:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:15:08: Data_Status_After Erases          : 0
17:15:08: CPRM Security Support             : No Security
17:15:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:15:08: Spec. Version                     : Version 3.0X
17:15:08: Extended Security Support         : Extended_Security_Not_Supported
17:15:08: Command Support                   : COMMAND_SUPPORT
17:15:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:15:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9660>, <py_sfcl.CommandDataDefinition object at 0x061FF5D0>) , Command count = 2373 ] 
17:15:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:15:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053F7390>, <py_sfcl.CommandDataDefinition object at 0x061FF720>) , Command count = 2374 ] 
17:15:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:15:08: [ SetBusWidth(0x4) , Command count = 2375 ] 
17:15:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:15:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061FF6C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2376 ] 
17:15:08: Protected Area Size 0x28000
17:15:08: Bus Width           2
17:15:08: Secure Mode         0
17:15:08: Speed  Class        4
17:15:08: Perf Move           0
17:15:08: Au Size             9
17:15:08: Erase Size          15
17:15:08: Erase Timeout       1
17:15:08: Erase offset        1
17:15:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:15:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:15:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:15:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2377 ] 
17:15:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:15:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:15:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:15:08: Host Frequency set to 100000 KHz
17:15:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:15:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
17:15:08: ####CSD Registe 2.0 Values####
17:15:08: CSD_STRUCTURE                                 :0x1
17:15:08: Reserv1                                       :0x0
17:15:08: Time Access 1 TAAC                            :0xe
17:15:08: Time Access 2 NSAC*100                        :0x0
17:15:08: Data Transfer Rate TRAN_SPEED                 :0xb
17:15:08: Card Command Classess CCC                     :0x5b5
17:15:08: Max Read Data Block Length  READ_BL_LEN       :0x9
17:15:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:15:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:15:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:15:08: DSR(driver stage register)  DSR_IMP           :0x0
17:15:08: Reserv2                                       :0x0
17:15:08: Device Size C_SIZE                            :0xedc8
17:15:08: Reserv3                                       :0x0
17:15:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:15:08: Erase Sector Size SECTOR_SIZE                 :0x7f
17:15:08: Write Protect Group Size WP_GRP_SIZE          :0x0
17:15:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:15:08: Reserv4                                       :0x0
17:15:08: Write Speed Factor R2W_FACTOR                 :0x2
17:15:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:15:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:15:08: FILE_FORMAT_GRP                               :0x0
17:15:08: COPY flag                                     :0x1
17:15:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:15:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
17:15:08: File_Format                                   :0x0
17:15:08: CRC                                           :0x0
17:15:08: ####CSD Registe Values####  

17:15:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED540>, <py_sfcl.CommandDataDefinition object at 0x061FF480>) , Command count = 2378 ] 
17:15:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:15:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED0F0>, <py_sfcl.CommandDataDefinition object at 0x061FF630>) , Command count = 2379 ] 
17:15:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:15:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:15:09: [CF409_Card_functional_4_3_6_1_PWP_TWP_managment]###[INFO] :CommandsWith_NoWP Block Called 

17:15:09: [CF409_Card_functional_4_3_6_1_PWP_TWP_managment]###[INFO] Erase Started 

17:15:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D2030>, <py_sfcl.CommandDataDefinition object at 0x061ED330>) , Command count = 2380 ] 
17:15:09: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
17:15:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED600>, <py_sfcl.CommandDataDefinition object at 0x061FF570>) , Command count = 2381 ] 
17:15:09: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
17:15:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED570>, <py_sfcl.CommandDataDefinition object at 0x061FF4E0>) , Command count = 2382 ] 
17:15:19: [ GetCardStatus() , Command count = 2383 ] 
17:15:19: CMD38[ ERASE_COMMAND ] Erasing the Card......
17:15:19: CMD38[ ERASE_COMMAND ] Card is Busy programming,Continuing to Test..
17:15:49: CMD38[ ERASE_COMMAND ] Passed with R1 type response
17:15:49: [CF409_Card_functional_4_3_6_1_PWP_TWP_managment]###[INFO] Erase Completed 

17:15:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x101 with Zero's Pattern
17:15:49: [ WrLbaNoData(0x0, 0x101, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 2384 ] 
17:15:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x101 with Zero's Pattern 

17:15:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x0 to EndLba:0x101 with Zero's Pattern
17:15:49: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2385 ] 
17:15:49: [ RdLbaNoData(0x1, 0x2, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2386 ] 
17:15:49: [ RdLbaNoData(0x2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2387 ] 
17:15:49: [ RdLbaNoData(0x3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2388 ] 
17:15:49: [ RdLbaNoData(0x4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2389 ] 
17:15:49: [ RdLbaNoData(0x5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2390 ] 
17:15:49: [ RdLbaNoData(0x6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2391 ] 
17:15:49: [ RdLbaNoData(0x7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2392 ] 
17:15:49: [ RdLbaNoData(0x8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2393 ] 
17:15:49: [ RdLbaNoData(0x9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2394 ] 
17:15:49: [ RdLbaNoData(0xA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2395 ] 
17:15:49: [ RdLbaNoData(0xB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2396 ] 
17:15:49: [ RdLbaNoData(0xC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2397 ] 
17:15:49: [ RdLbaNoData(0xD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2398 ] 
17:15:49: [ RdLbaNoData(0xE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2399 ] 
17:15:49: [ RdLbaNoData(0xF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2400 ] 
17:15:49: [ RdLbaNoData(0x10, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2401 ] 
17:15:49: [ RdLbaNoData(0x11, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2402 ] 
17:15:49: [ RdLbaNoData(0x12, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2403 ] 
17:15:49: [ RdLbaNoData(0x13, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2404 ] 
17:15:49: [ RdLbaNoData(0x14, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2405 ] 
17:15:49: [ RdLbaNoData(0x15, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2406 ] 
17:15:49: [ RdLbaNoData(0x16, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2407 ] 
17:15:49: [ RdLbaNoData(0x17, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2408 ] 
17:15:49: [ RdLbaNoData(0x18, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2409 ] 
17:15:49: [ RdLbaNoData(0x19, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2410 ] 
17:15:49: [ RdLbaNoData(0x1A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2411 ] 
17:15:49: [ RdLbaNoData(0x1B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2412 ] 
17:15:49: [ RdLbaNoData(0x1C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2413 ] 
17:15:49: [ RdLbaNoData(0x1D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2414 ] 
17:15:49: [ RdLbaNoData(0x1E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2415 ] 
17:15:49: [ RdLbaNoData(0x1F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2416 ] 
17:15:49: [ RdLbaNoData(0x20, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2417 ] 
17:15:49: [ RdLbaNoData(0x21, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2418 ] 
17:15:49: [ RdLbaNoData(0x22, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2419 ] 
17:15:49: [ RdLbaNoData(0x23, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2420 ] 
17:15:49: [ RdLbaNoData(0x24, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2421 ] 
17:15:49: [ RdLbaNoData(0x25, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2422 ] 
17:15:49: [ RdLbaNoData(0x26, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2423 ] 
17:15:49: [ RdLbaNoData(0x27, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2424 ] 
17:15:49: [ RdLbaNoData(0x28, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2425 ] 
17:15:49: [ RdLbaNoData(0x29, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2426 ] 
17:15:49: [ RdLbaNoData(0x2A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2427 ] 
17:15:49: [ RdLbaNoData(0x2B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2428 ] 
17:15:49: [ RdLbaNoData(0x2C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2429 ] 
17:15:49: [ RdLbaNoData(0x2D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2430 ] 
17:15:49: [ RdLbaNoData(0x2E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2431 ] 
17:15:49: [ RdLbaNoData(0x2F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2432 ] 
17:15:49: [ RdLbaNoData(0x30, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2433 ] 
17:15:50: [ RdLbaNoData(0x31, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2434 ] 
17:15:50: [ RdLbaNoData(0x32, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2435 ] 
17:15:50: [ RdLbaNoData(0x33, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2436 ] 
17:15:50: [ RdLbaNoData(0x34, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2437 ] 
17:15:50: [ RdLbaNoData(0x35, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2438 ] 
17:15:50: [ RdLbaNoData(0x36, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2439 ] 
17:15:50: [ RdLbaNoData(0x37, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2440 ] 
17:15:50: [ RdLbaNoData(0x38, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2441 ] 
17:15:50: [ RdLbaNoData(0x39, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2442 ] 
17:15:50: [ RdLbaNoData(0x3A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2443 ] 
17:15:50: [ RdLbaNoData(0x3B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2444 ] 
17:15:50: [ RdLbaNoData(0x3C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2445 ] 
17:15:50: [ RdLbaNoData(0x3D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2446 ] 
17:15:50: [ RdLbaNoData(0x3E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2447 ] 
17:15:50: [ RdLbaNoData(0x3F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2448 ] 
17:15:50: [ RdLbaNoData(0x40, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2449 ] 
17:15:50: [ RdLbaNoData(0x41, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2450 ] 
17:15:50: [ RdLbaNoData(0x42, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2451 ] 
17:15:50: [ RdLbaNoData(0x43, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2452 ] 
17:15:50: [ RdLbaNoData(0x44, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2453 ] 
17:15:50: [ RdLbaNoData(0x45, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2454 ] 
17:15:50: [ RdLbaNoData(0x46, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2455 ] 
17:15:50: [ RdLbaNoData(0x47, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2456 ] 
17:15:50: [ RdLbaNoData(0x48, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2457 ] 
17:15:50: [ RdLbaNoData(0x49, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2458 ] 
17:15:50: [ RdLbaNoData(0x4A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2459 ] 
17:15:50: [ RdLbaNoData(0x4B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2460 ] 
17:15:50: [ RdLbaNoData(0x4C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2461 ] 
17:15:50: [ RdLbaNoData(0x4D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2462 ] 
17:15:50: [ RdLbaNoData(0x4E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2463 ] 
17:15:50: [ RdLbaNoData(0x4F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2464 ] 
17:15:50: [ RdLbaNoData(0x50, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2465 ] 
17:15:50: [ RdLbaNoData(0x51, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2466 ] 
17:15:50: [ RdLbaNoData(0x52, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2467 ] 
17:15:50: [ RdLbaNoData(0x53, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2468 ] 
17:15:50: [ RdLbaNoData(0x54, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2469 ] 
17:15:50: [ RdLbaNoData(0x55, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2470 ] 
17:15:50: [ RdLbaNoData(0x56, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2471 ] 
17:15:50: [ RdLbaNoData(0x57, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2472 ] 
17:15:50: [ RdLbaNoData(0x58, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2473 ] 
17:15:50: [ RdLbaNoData(0x59, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2474 ] 
17:15:50: [ RdLbaNoData(0x5A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2475 ] 
17:15:50: [ RdLbaNoData(0x5B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2476 ] 
17:15:50: [ RdLbaNoData(0x5C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2477 ] 
17:15:50: [ RdLbaNoData(0x5D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2478 ] 
17:15:50: [ RdLbaNoData(0x5E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2479 ] 
17:15:51: [ RdLbaNoData(0x5F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2480 ] 
17:15:51: [ RdLbaNoData(0x60, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2481 ] 
17:15:51: [ RdLbaNoData(0x61, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2482 ] 
17:15:51: [ RdLbaNoData(0x62, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2483 ] 
17:15:51: [ RdLbaNoData(0x63, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2484 ] 
17:15:51: [ RdLbaNoData(0x64, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2485 ] 
17:15:51: [ RdLbaNoData(0x65, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2486 ] 
17:15:51: [ RdLbaNoData(0x66, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2487 ] 
17:15:51: [ RdLbaNoData(0x67, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2488 ] 
17:15:51: [ RdLbaNoData(0x68, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2489 ] 
17:15:51: [ RdLbaNoData(0x69, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2490 ] 
17:15:51: [ RdLbaNoData(0x6A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2491 ] 
17:15:51: [ RdLbaNoData(0x6B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2492 ] 
17:15:51: [ RdLbaNoData(0x6C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2493 ] 
17:15:51: [ RdLbaNoData(0x6D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2494 ] 
17:15:51: [ RdLbaNoData(0x6E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2495 ] 
17:15:51: [ RdLbaNoData(0x6F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2496 ] 
17:15:51: [ RdLbaNoData(0x70, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2497 ] 
17:15:51: [ RdLbaNoData(0x71, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2498 ] 
17:15:51: [ RdLbaNoData(0x72, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2499 ] 
17:15:51: [ RdLbaNoData(0x73, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2500 ] 
17:15:51: [ RdLbaNoData(0x74, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2501 ] 
17:15:51: [ RdLbaNoData(0x75, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2502 ] 
17:15:51: [ RdLbaNoData(0x76, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2503 ] 
17:15:51: [ RdLbaNoData(0x77, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2504 ] 
17:15:51: [ RdLbaNoData(0x78, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2505 ] 
17:15:51: [ RdLbaNoData(0x79, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2506 ] 
17:15:51: [ RdLbaNoData(0x7A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2507 ] 
17:15:51: [ RdLbaNoData(0x7B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2508 ] 
17:15:51: [ RdLbaNoData(0x7C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2509 ] 
17:15:51: [ RdLbaNoData(0x7D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2510 ] 
17:15:51: [ RdLbaNoData(0x7E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2511 ] 
17:15:51: [ RdLbaNoData(0x7F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2512 ] 
17:15:51: [ RdLbaNoData(0x80, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2513 ] 
17:15:51: [ RdLbaNoData(0x81, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2514 ] 
17:15:51: [ RdLbaNoData(0x82, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2515 ] 
17:15:51: [ RdLbaNoData(0x83, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2516 ] 
17:15:51: [ RdLbaNoData(0x84, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2517 ] 
17:15:52: [ RdLbaNoData(0x85, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2518 ] 
17:15:52: [ RdLbaNoData(0x86, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2519 ] 
17:15:52: [ RdLbaNoData(0x87, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2520 ] 
17:15:52: [ RdLbaNoData(0x88, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2521 ] 
17:15:52: [ RdLbaNoData(0x89, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2522 ] 
17:15:52: [ RdLbaNoData(0x8A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2523 ] 
17:15:52: [ RdLbaNoData(0x8B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2524 ] 
17:15:52: [ RdLbaNoData(0x8C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2525 ] 
17:15:52: [ RdLbaNoData(0x8D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2526 ] 
17:15:52: [ RdLbaNoData(0x8E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2527 ] 
17:15:52: [ RdLbaNoData(0x8F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2528 ] 
17:15:52: [ RdLbaNoData(0x90, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2529 ] 
17:15:52: [ RdLbaNoData(0x91, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2530 ] 
17:15:52: [ RdLbaNoData(0x92, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2531 ] 
17:15:52: [ RdLbaNoData(0x93, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2532 ] 
17:15:52: [ RdLbaNoData(0x94, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2533 ] 
17:15:52: [ RdLbaNoData(0x95, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2534 ] 
17:15:52: [ RdLbaNoData(0x96, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2535 ] 
17:15:52: [ RdLbaNoData(0x97, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2536 ] 
17:15:52: [ RdLbaNoData(0x98, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2537 ] 
17:15:52: [ RdLbaNoData(0x99, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2538 ] 
17:15:52: [ RdLbaNoData(0x9A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2539 ] 
17:15:52: [ RdLbaNoData(0x9B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2540 ] 
17:15:52: [ RdLbaNoData(0x9C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2541 ] 
17:15:52: [ RdLbaNoData(0x9D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2542 ] 
17:15:52: [ RdLbaNoData(0x9E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2543 ] 
17:15:52: [ RdLbaNoData(0x9F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2544 ] 
17:15:52: [ RdLbaNoData(0xA0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2545 ] 
17:15:52: [ RdLbaNoData(0xA1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2546 ] 
17:15:52: [ RdLbaNoData(0xA2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2547 ] 
17:15:52: [ RdLbaNoData(0xA3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2548 ] 
17:15:52: [ RdLbaNoData(0xA4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2549 ] 
17:15:52: [ RdLbaNoData(0xA5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2550 ] 
17:15:52: [ RdLbaNoData(0xA6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2551 ] 
17:15:52: [ RdLbaNoData(0xA7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2552 ] 
17:15:52: [ RdLbaNoData(0xA8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2553 ] 
17:15:52: [ RdLbaNoData(0xA9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2554 ] 
17:15:52: [ RdLbaNoData(0xAA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2555 ] 
17:15:52: [ RdLbaNoData(0xAB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2556 ] 
17:15:53: [ RdLbaNoData(0xAC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2557 ] 
17:15:53: [ RdLbaNoData(0xAD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2558 ] 
17:15:53: [ RdLbaNoData(0xAE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2559 ] 
17:15:53: [ RdLbaNoData(0xAF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2560 ] 
17:15:53: [ RdLbaNoData(0xB0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2561 ] 
17:15:53: [ RdLbaNoData(0xB1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2562 ] 
17:15:53: [ RdLbaNoData(0xB2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2563 ] 
17:15:53: [ RdLbaNoData(0xB3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2564 ] 
17:15:53: [ RdLbaNoData(0xB4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2565 ] 
17:15:53: [ RdLbaNoData(0xB5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2566 ] 
17:15:53: [ RdLbaNoData(0xB6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2567 ] 
17:15:53: [ RdLbaNoData(0xB7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2568 ] 
17:15:53: [ RdLbaNoData(0xB8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2569 ] 
17:15:53: [ RdLbaNoData(0xB9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2570 ] 
17:15:53: [ RdLbaNoData(0xBA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2571 ] 
17:15:53: [ RdLbaNoData(0xBB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2572 ] 
17:15:53: [ RdLbaNoData(0xBC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2573 ] 
17:15:53: [ RdLbaNoData(0xBD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2574 ] 
17:15:53: [ RdLbaNoData(0xBE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2575 ] 
17:15:53: [ RdLbaNoData(0xBF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2576 ] 
17:15:53: [ RdLbaNoData(0xC0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2577 ] 
17:15:53: [ RdLbaNoData(0xC1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2578 ] 
17:15:53: [ RdLbaNoData(0xC2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2579 ] 
17:15:53: [ RdLbaNoData(0xC3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2580 ] 
17:15:53: [ RdLbaNoData(0xC4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2581 ] 
17:15:53: [ RdLbaNoData(0xC5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2582 ] 
17:15:53: [ RdLbaNoData(0xC6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2583 ] 
17:15:53: [ RdLbaNoData(0xC7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2584 ] 
17:15:53: [ RdLbaNoData(0xC8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2585 ] 
17:15:53: [ RdLbaNoData(0xC9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2586 ] 
17:15:53: [ RdLbaNoData(0xCA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2587 ] 
17:15:53: [ RdLbaNoData(0xCB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2588 ] 
17:15:54: [ RdLbaNoData(0xCC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2589 ] 
17:15:54: [ RdLbaNoData(0xCD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2590 ] 
17:15:54: [ RdLbaNoData(0xCE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2591 ] 
17:15:54: [ RdLbaNoData(0xCF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2592 ] 
17:15:54: [ RdLbaNoData(0xD0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2593 ] 
17:15:54: [ RdLbaNoData(0xD1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2594 ] 
17:15:54: [ RdLbaNoData(0xD2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2595 ] 
17:15:54: [ RdLbaNoData(0xD3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2596 ] 
17:15:54: [ RdLbaNoData(0xD4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2597 ] 
17:15:54: [ RdLbaNoData(0xD5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2598 ] 
17:15:54: [ RdLbaNoData(0xD6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2599 ] 
17:15:54: [ RdLbaNoData(0xD7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2600 ] 
17:15:54: [ RdLbaNoData(0xD8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2601 ] 
17:15:54: [ RdLbaNoData(0xD9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2602 ] 
17:15:54: [ RdLbaNoData(0xDA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2603 ] 
17:15:54: [ RdLbaNoData(0xDB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2604 ] 
17:15:54: [ RdLbaNoData(0xDC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2605 ] 
17:15:54: [ RdLbaNoData(0xDD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2606 ] 
17:15:54: [ RdLbaNoData(0xDE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2607 ] 
17:15:54: [ RdLbaNoData(0xDF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2608 ] 
17:15:54: [ RdLbaNoData(0xE0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2609 ] 
17:15:54: [ RdLbaNoData(0xE1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2610 ] 
17:15:54: [ RdLbaNoData(0xE2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2611 ] 
17:15:54: [ RdLbaNoData(0xE3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2612 ] 
17:15:54: [ RdLbaNoData(0xE4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2613 ] 
17:15:54: [ RdLbaNoData(0xE5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2614 ] 
17:15:54: [ RdLbaNoData(0xE6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2615 ] 
17:15:54: [ RdLbaNoData(0xE7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2616 ] 
17:15:54: [ RdLbaNoData(0xE8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2617 ] 
17:15:54: [ RdLbaNoData(0xE9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2618 ] 
17:15:54: [ RdLbaNoData(0xEA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2619 ] 
17:15:54: [ RdLbaNoData(0xEB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2620 ] 
17:15:54: [ RdLbaNoData(0xEC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2621 ] 
17:15:55: [ RdLbaNoData(0xED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2622 ] 
17:15:55: [ RdLbaNoData(0xEE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2623 ] 
17:15:55: [ RdLbaNoData(0xEF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2624 ] 
17:15:55: [ RdLbaNoData(0xF0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2625 ] 
17:15:55: [ RdLbaNoData(0xF1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2626 ] 
17:15:55: [ RdLbaNoData(0xF2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2627 ] 
17:15:55: [ RdLbaNoData(0xF3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2628 ] 
17:15:55: [ RdLbaNoData(0xF4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2629 ] 
17:15:55: [ RdLbaNoData(0xF5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2630 ] 
17:15:55: [ RdLbaNoData(0xF6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2631 ] 
17:15:55: [ RdLbaNoData(0xF7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2632 ] 
17:15:55: [ RdLbaNoData(0xF8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2633 ] 
17:15:55: [ RdLbaNoData(0xF9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2634 ] 
17:15:55: [ RdLbaNoData(0xFA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2635 ] 
17:15:55: [ RdLbaNoData(0xFB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2636 ] 
17:15:55: [ RdLbaNoData(0xFC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2637 ] 
17:15:55: [ RdLbaNoData(0xFD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2638 ] 
17:15:55: [ RdLbaNoData(0xFE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2639 ] 
17:15:55: [ RdLbaNoData(0xFF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2640 ] 
17:15:55: [ RdLbaNoData(0x100, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2641 ] 
17:15:55: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x0 to EndLba:0x101 with Zero's Pattern 

17:15:55: [CF409_Card_functional_4_3_6_1_PWP_TWP_managment]###[INFO] Erase Started 

17:15:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED7B0>, <py_sfcl.CommandDataDefinition object at 0x061EDBD0>) , Command count = 2642 ] 
17:15:55: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
17:15:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED8A0>, <py_sfcl.CommandDataDefinition object at 0x061ED9C0>) , Command count = 2643 ] 
17:15:55: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
17:16:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED840>, <py_sfcl.CommandDataDefinition object at 0x061ED2D0>) , Command count = 2644 ] 
17:16:06: [ GetCardStatus() , Command count = 2645 ] 
17:16:06: CMD38[ ERASE_COMMAND ] Erasing the Card......
17:16:06: CMD38[ ERASE_COMMAND ] Card is Busy programming,Continuing to Test..
17:16:36: CMD38[ ERASE_COMMAND ] Passed with R1 type response
17:16:36: [CF409_Card_functional_4_3_6_1_PWP_TWP_managment]###[INFO] Erase Completed 

17:16:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B72300 to EndLba:0x3B72400 with Zero's Pattern
17:16:36: [ WrLbaNoData(0x3B72300, 0x100, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 2646 ] 
17:16:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B72300 to EndLba:0x3B72400 with Zero's Pattern 

17:16:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B72300 to EndLba:0x3B72400 with Zero's Pattern
17:16:36: [ RdLbaNoData(0x3B72300, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2647 ] 
17:16:36: [ RdLbaNoData(0x3B72301, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2648 ] 
17:16:36: [ RdLbaNoData(0x3B72302, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2649 ] 
17:16:36: [ RdLbaNoData(0x3B72303, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2650 ] 
17:16:36: [ RdLbaNoData(0x3B72304, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2651 ] 
17:16:36: [ RdLbaNoData(0x3B72305, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2652 ] 
17:16:36: [ RdLbaNoData(0x3B72306, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2653 ] 
17:16:36: [ RdLbaNoData(0x3B72307, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2654 ] 
17:16:36: [ RdLbaNoData(0x3B72308, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2655 ] 
17:16:36: [ RdLbaNoData(0x3B72309, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2656 ] 
17:16:36: [ RdLbaNoData(0x3B7230A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2657 ] 
17:16:36: [ RdLbaNoData(0x3B7230B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2658 ] 
17:16:36: [ RdLbaNoData(0x3B7230C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2659 ] 
17:16:36: [ RdLbaNoData(0x3B7230D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2660 ] 
17:16:36: [ RdLbaNoData(0x3B7230E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2661 ] 
17:16:36: [ RdLbaNoData(0x3B7230F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2662 ] 
17:16:36: [ RdLbaNoData(0x3B72310, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2663 ] 
17:16:36: [ RdLbaNoData(0x3B72311, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2664 ] 
17:16:36: [ RdLbaNoData(0x3B72312, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2665 ] 
17:16:36: [ RdLbaNoData(0x3B72313, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2666 ] 
17:16:36: [ RdLbaNoData(0x3B72314, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2667 ] 
17:16:36: [ RdLbaNoData(0x3B72315, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2668 ] 
17:16:36: [ RdLbaNoData(0x3B72316, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2669 ] 
17:16:36: [ RdLbaNoData(0x3B72317, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2670 ] 
17:16:36: [ RdLbaNoData(0x3B72318, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2671 ] 
17:16:36: [ RdLbaNoData(0x3B72319, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2672 ] 
17:16:36: [ RdLbaNoData(0x3B7231A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2673 ] 
17:16:36: [ RdLbaNoData(0x3B7231B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2674 ] 
17:16:36: [ RdLbaNoData(0x3B7231C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2675 ] 
17:16:36: [ RdLbaNoData(0x3B7231D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2676 ] 
17:16:36: [ RdLbaNoData(0x3B7231E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2677 ] 
17:16:36: [ RdLbaNoData(0x3B7231F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2678 ] 
17:16:36: [ RdLbaNoData(0x3B72320, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2679 ] 
17:16:36: [ RdLbaNoData(0x3B72321, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2680 ] 
17:16:36: [ RdLbaNoData(0x3B72322, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2681 ] 
17:16:36: [ RdLbaNoData(0x3B72323, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2682 ] 
17:16:36: [ RdLbaNoData(0x3B72324, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2683 ] 
17:16:36: [ RdLbaNoData(0x3B72325, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2684 ] 
17:16:36: [ RdLbaNoData(0x3B72326, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2685 ] 
17:16:36: [ RdLbaNoData(0x3B72327, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2686 ] 
17:16:36: [ RdLbaNoData(0x3B72328, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2687 ] 
17:16:36: [ RdLbaNoData(0x3B72329, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2688 ] 
17:16:36: [ RdLbaNoData(0x3B7232A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2689 ] 
17:16:36: [ RdLbaNoData(0x3B7232B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2690 ] 
17:16:36: [ RdLbaNoData(0x3B7232C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2691 ] 
17:16:36: [ RdLbaNoData(0x3B7232D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2692 ] 
17:16:36: [ RdLbaNoData(0x3B7232E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2693 ] 
17:16:36: [ RdLbaNoData(0x3B7232F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2694 ] 
17:16:36: [ RdLbaNoData(0x3B72330, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2695 ] 
17:16:36: [ RdLbaNoData(0x3B72331, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2696 ] 
17:16:36: [ RdLbaNoData(0x3B72332, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2697 ] 
17:16:36: [ RdLbaNoData(0x3B72333, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2698 ] 
17:16:36: [ RdLbaNoData(0x3B72334, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2699 ] 
17:16:36: [ RdLbaNoData(0x3B72335, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2700 ] 
17:16:37: [ RdLbaNoData(0x3B72336, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2701 ] 
17:16:37: [ RdLbaNoData(0x3B72337, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2702 ] 
17:16:37: [ RdLbaNoData(0x3B72338, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2703 ] 
17:16:37: [ RdLbaNoData(0x3B72339, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2704 ] 
17:16:37: [ RdLbaNoData(0x3B7233A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2705 ] 
17:16:37: [ RdLbaNoData(0x3B7233B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2706 ] 
17:16:37: [ RdLbaNoData(0x3B7233C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2707 ] 
17:16:37: [ RdLbaNoData(0x3B7233D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2708 ] 
17:16:37: [ RdLbaNoData(0x3B7233E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2709 ] 
17:16:37: [ RdLbaNoData(0x3B7233F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2710 ] 
17:16:37: [ RdLbaNoData(0x3B72340, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2711 ] 
17:16:37: [ RdLbaNoData(0x3B72341, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2712 ] 
17:16:37: [ RdLbaNoData(0x3B72342, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2713 ] 
17:16:37: [ RdLbaNoData(0x3B72343, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2714 ] 
17:16:37: [ RdLbaNoData(0x3B72344, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2715 ] 
17:16:37: [ RdLbaNoData(0x3B72345, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2716 ] 
17:16:37: [ RdLbaNoData(0x3B72346, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2717 ] 
17:16:37: [ RdLbaNoData(0x3B72347, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2718 ] 
17:16:37: [ RdLbaNoData(0x3B72348, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2719 ] 
17:16:37: [ RdLbaNoData(0x3B72349, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2720 ] 
17:16:37: [ RdLbaNoData(0x3B7234A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2721 ] 
17:16:37: [ RdLbaNoData(0x3B7234B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2722 ] 
17:16:37: [ RdLbaNoData(0x3B7234C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2723 ] 
17:16:37: [ RdLbaNoData(0x3B7234D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2724 ] 
17:16:37: [ RdLbaNoData(0x3B7234E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2725 ] 
17:16:37: [ RdLbaNoData(0x3B7234F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2726 ] 
17:16:37: [ RdLbaNoData(0x3B72350, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2727 ] 
17:16:37: [ RdLbaNoData(0x3B72351, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2728 ] 
17:16:37: [ RdLbaNoData(0x3B72352, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2729 ] 
17:16:37: [ RdLbaNoData(0x3B72353, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2730 ] 
17:16:37: [ RdLbaNoData(0x3B72354, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2731 ] 
17:16:37: [ RdLbaNoData(0x3B72355, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2732 ] 
17:16:37: [ RdLbaNoData(0x3B72356, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2733 ] 
17:16:37: [ RdLbaNoData(0x3B72357, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2734 ] 
17:16:37: [ RdLbaNoData(0x3B72358, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2735 ] 
17:16:37: [ RdLbaNoData(0x3B72359, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2736 ] 
17:16:37: [ RdLbaNoData(0x3B7235A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2737 ] 
17:16:37: [ RdLbaNoData(0x3B7235B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2738 ] 
17:16:38: [ RdLbaNoData(0x3B7235C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2739 ] 
17:16:38: [ RdLbaNoData(0x3B7235D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2740 ] 
17:16:38: [ RdLbaNoData(0x3B7235E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2741 ] 
17:16:38: [ RdLbaNoData(0x3B7235F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2742 ] 
17:16:38: [ RdLbaNoData(0x3B72360, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2743 ] 
17:16:38: [ RdLbaNoData(0x3B72361, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2744 ] 
17:16:38: [ RdLbaNoData(0x3B72362, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2745 ] 
17:16:38: [ RdLbaNoData(0x3B72363, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2746 ] 
17:16:38: [ RdLbaNoData(0x3B72364, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2747 ] 
17:16:38: [ RdLbaNoData(0x3B72365, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2748 ] 
17:16:38: [ RdLbaNoData(0x3B72366, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2749 ] 
17:16:38: [ RdLbaNoData(0x3B72367, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2750 ] 
17:16:38: [ RdLbaNoData(0x3B72368, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2751 ] 
17:16:38: [ RdLbaNoData(0x3B72369, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2752 ] 
17:16:38: [ RdLbaNoData(0x3B7236A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2753 ] 
17:16:38: [ RdLbaNoData(0x3B7236B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2754 ] 
17:16:38: [ RdLbaNoData(0x3B7236C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2755 ] 
17:16:38: [ RdLbaNoData(0x3B7236D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2756 ] 
17:16:38: [ RdLbaNoData(0x3B7236E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2757 ] 
17:16:38: [ RdLbaNoData(0x3B7236F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2758 ] 
17:16:38: [ RdLbaNoData(0x3B72370, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2759 ] 
17:16:38: [ RdLbaNoData(0x3B72371, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2760 ] 
17:16:38: [ RdLbaNoData(0x3B72372, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2761 ] 
17:16:38: [ RdLbaNoData(0x3B72373, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2762 ] 
17:16:38: [ RdLbaNoData(0x3B72374, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2763 ] 
17:16:38: [ RdLbaNoData(0x3B72375, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2764 ] 
17:16:38: [ RdLbaNoData(0x3B72376, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2765 ] 
17:16:38: [ RdLbaNoData(0x3B72377, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2766 ] 
17:16:38: [ RdLbaNoData(0x3B72378, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2767 ] 
17:16:38: [ RdLbaNoData(0x3B72379, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2768 ] 
17:16:38: [ RdLbaNoData(0x3B7237A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2769 ] 
17:16:38: [ RdLbaNoData(0x3B7237B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2770 ] 
17:16:38: [ RdLbaNoData(0x3B7237C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2771 ] 
17:16:38: [ RdLbaNoData(0x3B7237D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2772 ] 
17:16:38: [ RdLbaNoData(0x3B7237E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2773 ] 
17:16:38: [ RdLbaNoData(0x3B7237F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2774 ] 
17:16:38: [ RdLbaNoData(0x3B72380, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2775 ] 
17:16:38: [ RdLbaNoData(0x3B72381, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2776 ] 
17:16:39: [ RdLbaNoData(0x3B72382, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2777 ] 
17:16:39: [ RdLbaNoData(0x3B72383, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2778 ] 
17:16:39: [ RdLbaNoData(0x3B72384, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2779 ] 
17:16:39: [ RdLbaNoData(0x3B72385, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2780 ] 
17:16:39: [ RdLbaNoData(0x3B72386, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2781 ] 
17:16:39: [ RdLbaNoData(0x3B72387, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2782 ] 
17:16:39: [ RdLbaNoData(0x3B72388, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2783 ] 
17:16:39: [ RdLbaNoData(0x3B72389, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2784 ] 
17:16:39: [ RdLbaNoData(0x3B7238A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2785 ] 
17:16:39: [ RdLbaNoData(0x3B7238B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2786 ] 
17:16:39: [ RdLbaNoData(0x3B7238C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2787 ] 
17:16:39: [ RdLbaNoData(0x3B7238D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2788 ] 
17:16:39: [ RdLbaNoData(0x3B7238E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2789 ] 
17:16:39: [ RdLbaNoData(0x3B7238F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2790 ] 
17:16:39: [ RdLbaNoData(0x3B72390, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2791 ] 
17:16:39: [ RdLbaNoData(0x3B72391, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2792 ] 
17:16:39: [ RdLbaNoData(0x3B72392, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2793 ] 
17:16:39: [ RdLbaNoData(0x3B72393, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2794 ] 
17:16:39: [ RdLbaNoData(0x3B72394, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2795 ] 
17:16:39: [ RdLbaNoData(0x3B72395, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2796 ] 
17:16:39: [ RdLbaNoData(0x3B72396, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2797 ] 
17:16:39: [ RdLbaNoData(0x3B72397, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2798 ] 
17:16:39: [ RdLbaNoData(0x3B72398, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2799 ] 
17:16:39: [ RdLbaNoData(0x3B72399, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2800 ] 
17:16:39: [ RdLbaNoData(0x3B7239A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2801 ] 
17:16:39: [ RdLbaNoData(0x3B7239B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2802 ] 
17:16:39: [ RdLbaNoData(0x3B7239C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2803 ] 
17:16:39: [ RdLbaNoData(0x3B7239D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2804 ] 
17:16:39: [ RdLbaNoData(0x3B7239E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2805 ] 
17:16:39: [ RdLbaNoData(0x3B7239F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2806 ] 
17:16:39: [ RdLbaNoData(0x3B723A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2807 ] 
17:16:39: [ RdLbaNoData(0x3B723A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2808 ] 
17:16:39: [ RdLbaNoData(0x3B723A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2809 ] 
17:16:39: [ RdLbaNoData(0x3B723A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2810 ] 
17:16:39: [ RdLbaNoData(0x3B723A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2811 ] 
17:16:40: [ RdLbaNoData(0x3B723A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2812 ] 
17:16:40: [ RdLbaNoData(0x3B723A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2813 ] 
17:16:40: [ RdLbaNoData(0x3B723A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2814 ] 
17:16:40: [ RdLbaNoData(0x3B723A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2815 ] 
17:16:40: [ RdLbaNoData(0x3B723A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2816 ] 
17:16:40: [ RdLbaNoData(0x3B723AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2817 ] 
17:16:40: [ RdLbaNoData(0x3B723AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2818 ] 
17:16:40: [ RdLbaNoData(0x3B723AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2819 ] 
17:16:40: [ RdLbaNoData(0x3B723AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2820 ] 
17:16:40: [ RdLbaNoData(0x3B723AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2821 ] 
17:16:40: [ RdLbaNoData(0x3B723AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2822 ] 
17:16:40: [ RdLbaNoData(0x3B723B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2823 ] 
17:16:40: [ RdLbaNoData(0x3B723B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2824 ] 
17:16:40: [ RdLbaNoData(0x3B723B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2825 ] 
17:16:40: [ RdLbaNoData(0x3B723B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2826 ] 
17:16:40: [ RdLbaNoData(0x3B723B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2827 ] 
17:16:40: [ RdLbaNoData(0x3B723B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2828 ] 
17:16:40: [ RdLbaNoData(0x3B723B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2829 ] 
17:16:40: [ RdLbaNoData(0x3B723B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2830 ] 
17:16:40: [ RdLbaNoData(0x3B723B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2831 ] 
17:16:40: [ RdLbaNoData(0x3B723B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2832 ] 
17:16:40: [ RdLbaNoData(0x3B723BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2833 ] 
17:16:40: [ RdLbaNoData(0x3B723BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2834 ] 
17:16:40: [ RdLbaNoData(0x3B723BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2835 ] 
17:16:40: [ RdLbaNoData(0x3B723BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2836 ] 
17:16:40: [ RdLbaNoData(0x3B723BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2837 ] 
17:16:40: [ RdLbaNoData(0x3B723BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2838 ] 
17:16:40: [ RdLbaNoData(0x3B723C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2839 ] 
17:16:40: [ RdLbaNoData(0x3B723C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2840 ] 
17:16:40: [ RdLbaNoData(0x3B723C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2841 ] 
17:16:40: [ RdLbaNoData(0x3B723C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2842 ] 
17:16:40: [ RdLbaNoData(0x3B723C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2843 ] 
17:16:40: [ RdLbaNoData(0x3B723C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2844 ] 
17:16:40: [ RdLbaNoData(0x3B723C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2845 ] 
17:16:41: [ RdLbaNoData(0x3B723C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2846 ] 
17:16:41: [ RdLbaNoData(0x3B723C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2847 ] 
17:16:41: [ RdLbaNoData(0x3B723C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2848 ] 
17:16:41: [ RdLbaNoData(0x3B723CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2849 ] 
17:16:41: [ RdLbaNoData(0x3B723CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2850 ] 
17:16:41: [ RdLbaNoData(0x3B723CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2851 ] 
17:16:41: [ RdLbaNoData(0x3B723CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2852 ] 
17:16:41: [ RdLbaNoData(0x3B723CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2853 ] 
17:16:41: [ RdLbaNoData(0x3B723CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2854 ] 
17:16:41: [ RdLbaNoData(0x3B723D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2855 ] 
17:16:41: [ RdLbaNoData(0x3B723D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2856 ] 
17:16:41: [ RdLbaNoData(0x3B723D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2857 ] 
17:16:41: [ RdLbaNoData(0x3B723D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2858 ] 
17:16:41: [ RdLbaNoData(0x3B723D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2859 ] 
17:16:41: [ RdLbaNoData(0x3B723D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2860 ] 
17:16:41: [ RdLbaNoData(0x3B723D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2861 ] 
17:16:41: [ RdLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2862 ] 
17:16:41: [ RdLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2863 ] 
17:16:41: [ RdLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2864 ] 
17:16:41: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2865 ] 
17:16:41: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2866 ] 
17:16:41: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2867 ] 
17:16:41: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2868 ] 
17:16:41: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2869 ] 
17:16:41: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2870 ] 
17:16:41: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2871 ] 
17:16:41: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2872 ] 
17:16:41: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2873 ] 
17:16:41: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2874 ] 
17:16:41: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2875 ] 
17:16:41: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2876 ] 
17:16:41: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2877 ] 
17:16:41: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2878 ] 
17:16:41: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2879 ] 
17:16:41: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2880 ] 
17:16:41: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2881 ] 
17:16:41: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2882 ] 
17:16:42: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2883 ] 
17:16:42: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2884 ] 
17:16:42: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2885 ] 
17:16:42: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2886 ] 
17:16:42: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2887 ] 
17:16:42: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2888 ] 
17:16:42: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2889 ] 
17:16:42: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2890 ] 
17:16:42: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2891 ] 
17:16:42: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2892 ] 
17:16:42: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2893 ] 
17:16:42: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2894 ] 
17:16:42: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2895 ] 
17:16:42: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2896 ] 
17:16:42: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2897 ] 
17:16:42: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2898 ] 
17:16:42: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2899 ] 
17:16:42: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2900 ] 
17:16:42: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2901 ] 
17:16:42: [ RdLbaNoData(0x3B723FF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2902 ] 
17:16:42: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B72300 to EndLba:0x3B72400 with Zero's Pattern 

17:16:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x101 with Anyword Pattern 78
17:16:42: [ WrLbaNoData(0x0, 0x101, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2903 ] 
17:16:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x101 with Anyword Pattern 78 

17:16:42: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x101 with Anyword Pattern 78
17:16:42: [ RdLbaNoData(0x0, 0x101, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2904 ] 
17:16:42: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x101 with Anyword Pattern 78 

17:16:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B72300 to EndLba:0x3B723FC with Anyword Pattern 78
17:16:42: [ WrLbaNoData(0x3B72300, 0xFC, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2905 ] 
17:16:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B72300 to EndLba:0x3B723FC with Anyword Pattern 78 

17:16:42: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x3B72300 to EndLba:0x3B723FC with Anyword Pattern 78
17:16:42: [ RdLbaNoData(0x3B72300, 0xFC, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2906 ] 
17:16:42: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x3B72300 to EndLba:0x3B723FC with Anyword Pattern 78 

17:16:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :SingleWrite from StartLba: 0x0 to EndLba:0x101 with Anyword Pattern 78
17:16:43: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2907 ] 
17:16:43: [ WrLbaNoData(0x1, 0x2, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2908 ] 
17:16:43: [ WrLbaNoData(0x2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2909 ] 
17:16:43: [ WrLbaNoData(0x3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2910 ] 
17:16:43: [ WrLbaNoData(0x4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2911 ] 
17:16:43: [ WrLbaNoData(0x5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2912 ] 
17:16:43: [ WrLbaNoData(0x6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2913 ] 
17:16:43: [ WrLbaNoData(0x7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2914 ] 
17:16:43: [ WrLbaNoData(0x8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2915 ] 
17:16:43: [ WrLbaNoData(0x9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2916 ] 
17:16:43: [ WrLbaNoData(0xA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2917 ] 
17:16:43: [ WrLbaNoData(0xB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2918 ] 
17:16:43: [ WrLbaNoData(0xC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2919 ] 
17:16:43: [ WrLbaNoData(0xD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2920 ] 
17:16:43: [ WrLbaNoData(0xE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2921 ] 
17:16:43: [ WrLbaNoData(0xF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2922 ] 
17:16:43: [ WrLbaNoData(0x10, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2923 ] 
17:16:43: [ WrLbaNoData(0x11, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2924 ] 
17:16:43: [ WrLbaNoData(0x12, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2925 ] 
17:16:43: [ WrLbaNoData(0x13, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2926 ] 
17:16:43: [ WrLbaNoData(0x14, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2927 ] 
17:16:43: [ WrLbaNoData(0x15, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2928 ] 
17:16:43: [ WrLbaNoData(0x16, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2929 ] 
17:16:43: [ WrLbaNoData(0x17, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2930 ] 
17:16:43: [ WrLbaNoData(0x18, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2931 ] 
17:16:43: [ WrLbaNoData(0x19, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2932 ] 
17:16:43: [ WrLbaNoData(0x1A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2933 ] 
17:16:43: [ WrLbaNoData(0x1B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2934 ] 
17:16:43: [ WrLbaNoData(0x1C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2935 ] 
17:16:43: [ WrLbaNoData(0x1D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2936 ] 
17:16:43: [ WrLbaNoData(0x1E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2937 ] 
17:16:43: [ WrLbaNoData(0x1F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2938 ] 
17:16:43: [ WrLbaNoData(0x20, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2939 ] 
17:16:44: [ WrLbaNoData(0x21, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2940 ] 
17:16:44: [ WrLbaNoData(0x22, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2941 ] 
17:16:44: [ WrLbaNoData(0x23, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2942 ] 
17:16:44: [ WrLbaNoData(0x24, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2943 ] 
17:16:44: [ WrLbaNoData(0x25, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2944 ] 
17:16:44: [ WrLbaNoData(0x26, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2945 ] 
17:16:44: [ WrLbaNoData(0x27, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2946 ] 
17:16:44: [ WrLbaNoData(0x28, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2947 ] 
17:16:44: [ WrLbaNoData(0x29, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2948 ] 
17:16:44: [ WrLbaNoData(0x2A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2949 ] 
17:16:44: [ WrLbaNoData(0x2B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2950 ] 
17:16:44: [ WrLbaNoData(0x2C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2951 ] 
17:16:44: [ WrLbaNoData(0x2D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2952 ] 
17:16:44: [ WrLbaNoData(0x2E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2953 ] 
17:16:44: [ WrLbaNoData(0x2F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2954 ] 
17:16:44: [ WrLbaNoData(0x30, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2955 ] 
17:16:44: [ WrLbaNoData(0x31, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2956 ] 
17:16:44: [ WrLbaNoData(0x32, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2957 ] 
17:16:44: [ WrLbaNoData(0x33, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2958 ] 
17:16:44: [ WrLbaNoData(0x34, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2959 ] 
17:16:44: [ WrLbaNoData(0x35, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2960 ] 
17:16:44: [ WrLbaNoData(0x36, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2961 ] 
17:16:44: [ WrLbaNoData(0x37, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2962 ] 
17:16:44: [ WrLbaNoData(0x38, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2963 ] 
17:16:44: [ WrLbaNoData(0x39, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2964 ] 
17:16:44: [ WrLbaNoData(0x3A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2965 ] 
17:16:44: [ WrLbaNoData(0x3B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2966 ] 
17:16:44: [ WrLbaNoData(0x3C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2967 ] 
17:16:44: [ WrLbaNoData(0x3D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2968 ] 
17:16:44: [ WrLbaNoData(0x3E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2969 ] 
17:16:44: [ WrLbaNoData(0x3F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2970 ] 
17:16:44: [ WrLbaNoData(0x40, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2971 ] 
17:16:44: [ WrLbaNoData(0x41, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2972 ] 
17:16:44: [ WrLbaNoData(0x42, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2973 ] 
17:16:45: [ WrLbaNoData(0x43, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2974 ] 
17:16:45: [ WrLbaNoData(0x44, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2975 ] 
17:16:45: [ WrLbaNoData(0x45, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2976 ] 
17:16:45: [ WrLbaNoData(0x46, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2977 ] 
17:16:45: [ WrLbaNoData(0x47, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2978 ] 
17:16:45: [ WrLbaNoData(0x48, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2979 ] 
17:16:45: [ WrLbaNoData(0x49, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2980 ] 
17:16:45: [ WrLbaNoData(0x4A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2981 ] 
17:16:45: [ WrLbaNoData(0x4B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2982 ] 
17:16:45: [ WrLbaNoData(0x4C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2983 ] 
17:16:45: [ WrLbaNoData(0x4D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2984 ] 
17:16:45: [ WrLbaNoData(0x4E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2985 ] 
17:16:45: [ WrLbaNoData(0x4F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2986 ] 
17:16:45: [ WrLbaNoData(0x50, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2987 ] 
17:16:45: [ WrLbaNoData(0x51, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2988 ] 
17:16:45: [ WrLbaNoData(0x52, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2989 ] 
17:16:45: [ WrLbaNoData(0x53, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2990 ] 
17:16:45: [ WrLbaNoData(0x54, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2991 ] 
17:16:45: [ WrLbaNoData(0x55, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2992 ] 
17:16:45: [ WrLbaNoData(0x56, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2993 ] 
17:16:45: [ WrLbaNoData(0x57, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2994 ] 
17:16:45: [ WrLbaNoData(0x58, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2995 ] 
17:16:45: [ WrLbaNoData(0x59, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2996 ] 
17:16:45: [ WrLbaNoData(0x5A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2997 ] 
17:16:45: [ WrLbaNoData(0x5B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2998 ] 
17:16:45: [ WrLbaNoData(0x5C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 2999 ] 
17:16:45: [ WrLbaNoData(0x5D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3000 ] 
17:16:45: [ WrLbaNoData(0x5E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3001 ] 
17:16:45: [ WrLbaNoData(0x5F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3002 ] 
17:16:45: [ WrLbaNoData(0x60, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3003 ] 
17:16:45: [ WrLbaNoData(0x61, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3004 ] 
17:16:45: [ WrLbaNoData(0x62, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3005 ] 
17:16:45: [ WrLbaNoData(0x63, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3006 ] 
17:16:45: [ WrLbaNoData(0x64, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3007 ] 
17:16:45: [ WrLbaNoData(0x65, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3008 ] 
17:16:45: [ WrLbaNoData(0x66, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3009 ] 
17:16:45: [ WrLbaNoData(0x67, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3010 ] 
17:16:45: [ WrLbaNoData(0x68, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3011 ] 
17:16:45: [ WrLbaNoData(0x69, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3012 ] 
17:16:46: [ WrLbaNoData(0x6A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3013 ] 
17:16:46: [ WrLbaNoData(0x6B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3014 ] 
17:16:46: [ WrLbaNoData(0x6C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3015 ] 
17:16:46: [ WrLbaNoData(0x6D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3016 ] 
17:16:46: [ WrLbaNoData(0x6E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3017 ] 
17:16:46: [ WrLbaNoData(0x6F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3018 ] 
17:16:46: [ WrLbaNoData(0x70, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3019 ] 
17:16:46: [ WrLbaNoData(0x71, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3020 ] 
17:16:46: [ WrLbaNoData(0x72, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3021 ] 
17:16:46: [ WrLbaNoData(0x73, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3022 ] 
17:16:46: [ WrLbaNoData(0x74, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3023 ] 
17:16:46: [ WrLbaNoData(0x75, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3024 ] 
17:16:46: [ WrLbaNoData(0x76, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3025 ] 
17:16:46: [ WrLbaNoData(0x77, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3026 ] 
17:16:46: [ WrLbaNoData(0x78, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3027 ] 
17:16:46: [ WrLbaNoData(0x79, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3028 ] 
17:16:46: [ WrLbaNoData(0x7A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3029 ] 
17:16:46: [ WrLbaNoData(0x7B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3030 ] 
17:16:46: [ WrLbaNoData(0x7C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3031 ] 
17:16:46: [ WrLbaNoData(0x7D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3032 ] 
17:16:46: [ WrLbaNoData(0x7E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3033 ] 
17:16:46: [ WrLbaNoData(0x7F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3034 ] 
17:16:46: [ WrLbaNoData(0x80, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3035 ] 
17:16:46: [ WrLbaNoData(0x81, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3036 ] 
17:16:46: [ WrLbaNoData(0x82, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3037 ] 
17:16:46: [ WrLbaNoData(0x83, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3038 ] 
17:16:46: [ WrLbaNoData(0x84, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3039 ] 
17:16:46: [ WrLbaNoData(0x85, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3040 ] 
17:16:46: [ WrLbaNoData(0x86, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3041 ] 
17:16:46: [ WrLbaNoData(0x87, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3042 ] 
17:16:46: [ WrLbaNoData(0x88, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3043 ] 
17:16:46: [ WrLbaNoData(0x89, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3044 ] 
17:16:46: [ WrLbaNoData(0x8A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3045 ] 
17:16:46: [ WrLbaNoData(0x8B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3046 ] 
17:16:46: [ WrLbaNoData(0x8C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3047 ] 
17:16:47: [ WrLbaNoData(0x8D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3048 ] 
17:16:47: [ WrLbaNoData(0x8E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3049 ] 
17:16:47: [ WrLbaNoData(0x8F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3050 ] 
17:16:47: [ WrLbaNoData(0x90, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3051 ] 
17:16:47: [ WrLbaNoData(0x91, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3052 ] 
17:16:47: [ WrLbaNoData(0x92, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3053 ] 
17:16:47: [ WrLbaNoData(0x93, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3054 ] 
17:16:47: [ WrLbaNoData(0x94, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3055 ] 
17:16:47: [ WrLbaNoData(0x95, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3056 ] 
17:16:47: [ WrLbaNoData(0x96, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3057 ] 
17:16:47: [ WrLbaNoData(0x97, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3058 ] 
17:16:47: [ WrLbaNoData(0x98, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3059 ] 
17:16:47: [ WrLbaNoData(0x99, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3060 ] 
17:16:47: [ WrLbaNoData(0x9A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3061 ] 
17:16:47: [ WrLbaNoData(0x9B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3062 ] 
17:16:47: [ WrLbaNoData(0x9C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3063 ] 
17:16:47: [ WrLbaNoData(0x9D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3064 ] 
17:16:47: [ WrLbaNoData(0x9E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3065 ] 
17:16:47: [ WrLbaNoData(0x9F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3066 ] 
17:16:47: [ WrLbaNoData(0xA0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3067 ] 
17:16:47: [ WrLbaNoData(0xA1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3068 ] 
17:16:47: [ WrLbaNoData(0xA2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3069 ] 
17:16:47: [ WrLbaNoData(0xA3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3070 ] 
17:16:47: [ WrLbaNoData(0xA4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3071 ] 
17:16:47: [ WrLbaNoData(0xA5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3072 ] 
17:16:47: [ WrLbaNoData(0xA6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3073 ] 
17:16:47: [ WrLbaNoData(0xA7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3074 ] 
17:16:47: [ WrLbaNoData(0xA8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3075 ] 
17:16:47: [ WrLbaNoData(0xA9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3076 ] 
17:16:47: [ WrLbaNoData(0xAA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3077 ] 
17:16:47: [ WrLbaNoData(0xAB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3078 ] 
17:16:47: [ WrLbaNoData(0xAC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3079 ] 
17:16:47: [ WrLbaNoData(0xAD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3080 ] 
17:16:47: [ WrLbaNoData(0xAE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3081 ] 
17:16:47: [ WrLbaNoData(0xAF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3082 ] 
17:16:47: [ WrLbaNoData(0xB0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3083 ] 
17:16:47: [ WrLbaNoData(0xB1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3084 ] 
17:16:47: [ WrLbaNoData(0xB2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3085 ] 
17:16:47: [ WrLbaNoData(0xB3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3086 ] 
17:16:47: [ WrLbaNoData(0xB4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3087 ] 
17:16:48: [ WrLbaNoData(0xB5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3088 ] 
17:16:48: [ WrLbaNoData(0xB6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3089 ] 
17:16:48: [ WrLbaNoData(0xB7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3090 ] 
17:16:48: [ WrLbaNoData(0xB8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3091 ] 
17:16:48: [ WrLbaNoData(0xB9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3092 ] 
17:16:48: [ WrLbaNoData(0xBA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3093 ] 
17:16:48: [ WrLbaNoData(0xBB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3094 ] 
17:16:48: [ WrLbaNoData(0xBC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3095 ] 
17:16:48: [ WrLbaNoData(0xBD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3096 ] 
17:16:48: [ WrLbaNoData(0xBE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3097 ] 
17:16:48: [ WrLbaNoData(0xBF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3098 ] 
17:16:48: [ WrLbaNoData(0xC0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3099 ] 
17:16:48: [ WrLbaNoData(0xC1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3100 ] 
17:16:48: [ WrLbaNoData(0xC2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3101 ] 
17:16:48: [ WrLbaNoData(0xC3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3102 ] 
17:16:48: [ WrLbaNoData(0xC4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3103 ] 
17:16:48: [ WrLbaNoData(0xC5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3104 ] 
17:16:48: [ WrLbaNoData(0xC6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3105 ] 
17:16:48: [ WrLbaNoData(0xC7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3106 ] 
17:16:48: [ WrLbaNoData(0xC8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3107 ] 
17:16:48: [ WrLbaNoData(0xC9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3108 ] 
17:16:48: [ WrLbaNoData(0xCA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3109 ] 
17:16:48: [ WrLbaNoData(0xCB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3110 ] 
17:16:48: [ WrLbaNoData(0xCC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3111 ] 
17:16:48: [ WrLbaNoData(0xCD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3112 ] 
17:16:48: [ WrLbaNoData(0xCE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3113 ] 
17:16:48: [ WrLbaNoData(0xCF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3114 ] 
17:16:48: [ WrLbaNoData(0xD0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3115 ] 
17:16:48: [ WrLbaNoData(0xD1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3116 ] 
17:16:48: [ WrLbaNoData(0xD2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3117 ] 
17:16:48: [ WrLbaNoData(0xD3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3118 ] 
17:16:48: [ WrLbaNoData(0xD4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3119 ] 
17:16:48: [ WrLbaNoData(0xD5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3120 ] 
17:16:48: [ WrLbaNoData(0xD6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3121 ] 
17:16:48: [ WrLbaNoData(0xD7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3122 ] 
17:16:48: [ WrLbaNoData(0xD8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3123 ] 
17:16:48: [ WrLbaNoData(0xD9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3124 ] 
17:16:48: [ WrLbaNoData(0xDA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3125 ] 
17:16:48: [ WrLbaNoData(0xDB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3126 ] 
17:16:48: [ WrLbaNoData(0xDC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3127 ] 
17:16:48: [ WrLbaNoData(0xDD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3128 ] 
17:16:49: [ WrLbaNoData(0xDE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3129 ] 
17:16:49: [ WrLbaNoData(0xDF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3130 ] 
17:16:49: [ WrLbaNoData(0xE0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3131 ] 
17:16:49: [ WrLbaNoData(0xE1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3132 ] 
17:16:49: [ WrLbaNoData(0xE2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3133 ] 
17:16:49: [ WrLbaNoData(0xE3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3134 ] 
17:16:49: [ WrLbaNoData(0xE4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3135 ] 
17:16:49: [ WrLbaNoData(0xE5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3136 ] 
17:16:49: [ WrLbaNoData(0xE6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3137 ] 
17:16:49: [ WrLbaNoData(0xE7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3138 ] 
17:16:49: [ WrLbaNoData(0xE8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3139 ] 
17:16:49: [ WrLbaNoData(0xE9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3140 ] 
17:16:49: [ WrLbaNoData(0xEA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3141 ] 
17:16:49: [ WrLbaNoData(0xEB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3142 ] 
17:16:49: [ WrLbaNoData(0xEC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3143 ] 
17:16:49: [ WrLbaNoData(0xED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3144 ] 
17:16:49: [ WrLbaNoData(0xEE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3145 ] 
17:16:49: [ WrLbaNoData(0xEF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3146 ] 
17:16:49: [ WrLbaNoData(0xF0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3147 ] 
17:16:49: [ WrLbaNoData(0xF1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3148 ] 
17:16:49: [ WrLbaNoData(0xF2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3149 ] 
17:16:49: [ WrLbaNoData(0xF3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3150 ] 
17:16:49: [ WrLbaNoData(0xF4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3151 ] 
17:16:49: [ WrLbaNoData(0xF5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3152 ] 
17:16:49: [ WrLbaNoData(0xF6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3153 ] 
17:16:49: [ WrLbaNoData(0xF7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3154 ] 
17:16:49: [ WrLbaNoData(0xF8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3155 ] 
17:16:49: [ WrLbaNoData(0xF9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3156 ] 
17:16:49: [ WrLbaNoData(0xFA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3157 ] 
17:16:49: [ WrLbaNoData(0xFB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3158 ] 
17:16:49: [ WrLbaNoData(0xFC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3159 ] 
17:16:49: [ WrLbaNoData(0xFD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3160 ] 
17:16:49: [ WrLbaNoData(0xFE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3161 ] 
17:16:50: [ WrLbaNoData(0xFF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3162 ] 
17:16:50: [ WrLbaNoData(0x100, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3163 ] 
17:16:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done SingleWrite from StartLba: 0x0 to EndLba:0x101 with Anyword Pattern 78 

17:16:50: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x0 to EndLba:0x101 with Anyword Pattern 78
17:16:50: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3164 ] 
17:16:50: [ RdLbaNoData(0x1, 0x2, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3165 ] 
17:16:50: [ RdLbaNoData(0x2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3166 ] 
17:16:50: [ RdLbaNoData(0x3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3167 ] 
17:16:50: [ RdLbaNoData(0x4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3168 ] 
17:16:50: [ RdLbaNoData(0x5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3169 ] 
17:16:50: [ RdLbaNoData(0x6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3170 ] 
17:16:50: [ RdLbaNoData(0x7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3171 ] 
17:16:50: [ RdLbaNoData(0x8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3172 ] 
17:16:50: [ RdLbaNoData(0x9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3173 ] 
17:16:50: [ RdLbaNoData(0xA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3174 ] 
17:16:50: [ RdLbaNoData(0xB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3175 ] 
17:16:50: [ RdLbaNoData(0xC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3176 ] 
17:16:50: [ RdLbaNoData(0xD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3177 ] 
17:16:50: [ RdLbaNoData(0xE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3178 ] 
17:16:50: [ RdLbaNoData(0xF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3179 ] 
17:16:50: [ RdLbaNoData(0x10, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3180 ] 
17:16:50: [ RdLbaNoData(0x11, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3181 ] 
17:16:50: [ RdLbaNoData(0x12, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3182 ] 
17:16:50: [ RdLbaNoData(0x13, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3183 ] 
17:16:50: [ RdLbaNoData(0x14, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3184 ] 
17:16:50: [ RdLbaNoData(0x15, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3185 ] 
17:16:50: [ RdLbaNoData(0x16, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3186 ] 
17:16:50: [ RdLbaNoData(0x17, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3187 ] 
17:16:50: [ RdLbaNoData(0x18, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3188 ] 
17:16:50: [ RdLbaNoData(0x19, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3189 ] 
17:16:50: [ RdLbaNoData(0x1A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3190 ] 
17:16:50: [ RdLbaNoData(0x1B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3191 ] 
17:16:50: [ RdLbaNoData(0x1C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3192 ] 
17:16:50: [ RdLbaNoData(0x1D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3193 ] 
17:16:50: [ RdLbaNoData(0x1E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3194 ] 
17:16:50: [ RdLbaNoData(0x1F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3195 ] 
17:16:50: [ RdLbaNoData(0x20, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3196 ] 
17:16:50: [ RdLbaNoData(0x21, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3197 ] 
17:16:50: [ RdLbaNoData(0x22, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3198 ] 
17:16:50: [ RdLbaNoData(0x23, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3199 ] 
17:16:51: [ RdLbaNoData(0x24, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3200 ] 
17:16:51: [ RdLbaNoData(0x25, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3201 ] 
17:16:51: [ RdLbaNoData(0x26, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3202 ] 
17:16:51: [ RdLbaNoData(0x27, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3203 ] 
17:16:51: [ RdLbaNoData(0x28, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3204 ] 
17:16:51: [ RdLbaNoData(0x29, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3205 ] 
17:16:51: [ RdLbaNoData(0x2A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3206 ] 
17:16:51: [ RdLbaNoData(0x2B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3207 ] 
17:16:51: [ RdLbaNoData(0x2C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3208 ] 
17:16:51: [ RdLbaNoData(0x2D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3209 ] 
17:16:51: [ RdLbaNoData(0x2E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3210 ] 
17:16:51: [ RdLbaNoData(0x2F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3211 ] 
17:16:51: [ RdLbaNoData(0x30, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3212 ] 
17:16:51: [ RdLbaNoData(0x31, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3213 ] 
17:16:51: [ RdLbaNoData(0x32, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3214 ] 
17:16:51: [ RdLbaNoData(0x33, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3215 ] 
17:16:51: [ RdLbaNoData(0x34, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3216 ] 
17:16:51: [ RdLbaNoData(0x35, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3217 ] 
17:16:51: [ RdLbaNoData(0x36, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3218 ] 
17:16:51: [ RdLbaNoData(0x37, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3219 ] 
17:16:51: [ RdLbaNoData(0x38, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3220 ] 
17:16:51: [ RdLbaNoData(0x39, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3221 ] 
17:16:51: [ RdLbaNoData(0x3A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3222 ] 
17:16:51: [ RdLbaNoData(0x3B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3223 ] 
17:16:51: [ RdLbaNoData(0x3C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3224 ] 
17:16:51: [ RdLbaNoData(0x3D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3225 ] 
17:16:51: [ RdLbaNoData(0x3E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3226 ] 
17:16:51: [ RdLbaNoData(0x3F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3227 ] 
17:16:51: [ RdLbaNoData(0x40, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3228 ] 
17:16:51: [ RdLbaNoData(0x41, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3229 ] 
17:16:51: [ RdLbaNoData(0x42, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3230 ] 
17:16:51: [ RdLbaNoData(0x43, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3231 ] 
17:16:51: [ RdLbaNoData(0x44, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3232 ] 
17:16:51: [ RdLbaNoData(0x45, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3233 ] 
17:16:51: [ RdLbaNoData(0x46, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3234 ] 
17:16:51: [ RdLbaNoData(0x47, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3235 ] 
17:16:51: [ RdLbaNoData(0x48, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3236 ] 
17:16:51: [ RdLbaNoData(0x49, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3237 ] 
17:16:51: [ RdLbaNoData(0x4A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3238 ] 
17:16:52: [ RdLbaNoData(0x4B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3239 ] 
17:16:52: [ RdLbaNoData(0x4C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3240 ] 
17:16:52: [ RdLbaNoData(0x4D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3241 ] 
17:16:52: [ RdLbaNoData(0x4E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3242 ] 
17:16:52: [ RdLbaNoData(0x4F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3243 ] 
17:16:52: [ RdLbaNoData(0x50, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3244 ] 
17:16:52: [ RdLbaNoData(0x51, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3245 ] 
17:16:52: [ RdLbaNoData(0x52, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3246 ] 
17:16:52: [ RdLbaNoData(0x53, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3247 ] 
17:16:52: [ RdLbaNoData(0x54, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3248 ] 
17:16:52: [ RdLbaNoData(0x55, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3249 ] 
17:16:52: [ RdLbaNoData(0x56, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3250 ] 
17:16:52: [ RdLbaNoData(0x57, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3251 ] 
17:16:52: [ RdLbaNoData(0x58, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3252 ] 
17:16:52: [ RdLbaNoData(0x59, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3253 ] 
17:16:52: [ RdLbaNoData(0x5A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3254 ] 
17:16:52: [ RdLbaNoData(0x5B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3255 ] 
17:16:52: [ RdLbaNoData(0x5C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3256 ] 
17:16:52: [ RdLbaNoData(0x5D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3257 ] 
17:16:52: [ RdLbaNoData(0x5E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3258 ] 
17:16:52: [ RdLbaNoData(0x5F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3259 ] 
17:16:52: [ RdLbaNoData(0x60, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3260 ] 
17:16:52: [ RdLbaNoData(0x61, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3261 ] 
17:16:52: [ RdLbaNoData(0x62, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3262 ] 
17:16:52: [ RdLbaNoData(0x63, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3263 ] 
17:16:52: [ RdLbaNoData(0x64, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3264 ] 
17:16:52: [ RdLbaNoData(0x65, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3265 ] 
17:16:52: [ RdLbaNoData(0x66, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3266 ] 
17:16:52: [ RdLbaNoData(0x67, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3267 ] 
17:16:52: [ RdLbaNoData(0x68, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3268 ] 
17:16:52: [ RdLbaNoData(0x69, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3269 ] 
17:16:52: [ RdLbaNoData(0x6A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3270 ] 
17:16:52: [ RdLbaNoData(0x6B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3271 ] 
17:16:52: [ RdLbaNoData(0x6C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3272 ] 
17:16:52: [ RdLbaNoData(0x6D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3273 ] 
17:16:52: [ RdLbaNoData(0x6E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3274 ] 
17:16:52: [ RdLbaNoData(0x6F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3275 ] 
17:16:52: [ RdLbaNoData(0x70, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3276 ] 
17:16:52: [ RdLbaNoData(0x71, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3277 ] 
17:16:53: [ RdLbaNoData(0x72, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3278 ] 
17:16:53: [ RdLbaNoData(0x73, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3279 ] 
17:16:53: [ RdLbaNoData(0x74, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3280 ] 
17:16:53: [ RdLbaNoData(0x75, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3281 ] 
17:16:53: [ RdLbaNoData(0x76, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3282 ] 
17:16:53: [ RdLbaNoData(0x77, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3283 ] 
17:16:53: [ RdLbaNoData(0x78, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3284 ] 
17:16:53: [ RdLbaNoData(0x79, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3285 ] 
17:16:53: [ RdLbaNoData(0x7A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3286 ] 
17:16:53: [ RdLbaNoData(0x7B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3287 ] 
17:16:53: [ RdLbaNoData(0x7C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3288 ] 
17:16:53: [ RdLbaNoData(0x7D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3289 ] 
17:16:53: [ RdLbaNoData(0x7E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3290 ] 
17:16:53: [ RdLbaNoData(0x7F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3291 ] 
17:16:53: [ RdLbaNoData(0x80, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3292 ] 
17:16:53: [ RdLbaNoData(0x81, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3293 ] 
17:16:53: [ RdLbaNoData(0x82, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3294 ] 
17:16:53: [ RdLbaNoData(0x83, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3295 ] 
17:16:53: [ RdLbaNoData(0x84, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3296 ] 
17:16:53: [ RdLbaNoData(0x85, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3297 ] 
17:16:53: [ RdLbaNoData(0x86, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3298 ] 
17:16:53: [ RdLbaNoData(0x87, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3299 ] 
17:16:53: [ RdLbaNoData(0x88, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3300 ] 
17:16:53: [ RdLbaNoData(0x89, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3301 ] 
17:16:53: [ RdLbaNoData(0x8A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3302 ] 
17:16:53: [ RdLbaNoData(0x8B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3303 ] 
17:16:53: [ RdLbaNoData(0x8C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3304 ] 
17:16:53: [ RdLbaNoData(0x8D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3305 ] 
17:16:53: [ RdLbaNoData(0x8E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3306 ] 
17:16:53: [ RdLbaNoData(0x8F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3307 ] 
17:16:53: [ RdLbaNoData(0x90, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3308 ] 
17:16:53: [ RdLbaNoData(0x91, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3309 ] 
17:16:54: [ RdLbaNoData(0x92, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3310 ] 
17:16:54: [ RdLbaNoData(0x93, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3311 ] 
17:16:54: [ RdLbaNoData(0x94, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3312 ] 
17:16:54: [ RdLbaNoData(0x95, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3313 ] 
17:16:54: [ RdLbaNoData(0x96, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3314 ] 
17:16:54: [ RdLbaNoData(0x97, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3315 ] 
17:16:54: [ RdLbaNoData(0x98, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3316 ] 
17:16:54: [ RdLbaNoData(0x99, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3317 ] 
17:16:54: [ RdLbaNoData(0x9A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3318 ] 
17:16:54: [ RdLbaNoData(0x9B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3319 ] 
17:16:54: [ RdLbaNoData(0x9C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3320 ] 
17:16:54: [ RdLbaNoData(0x9D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3321 ] 
17:16:54: [ RdLbaNoData(0x9E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3322 ] 
17:16:54: [ RdLbaNoData(0x9F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3323 ] 
17:16:54: [ RdLbaNoData(0xA0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3324 ] 
17:16:54: [ RdLbaNoData(0xA1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3325 ] 
17:16:54: [ RdLbaNoData(0xA2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3326 ] 
17:16:54: [ RdLbaNoData(0xA3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3327 ] 
17:16:54: [ RdLbaNoData(0xA4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3328 ] 
17:16:54: [ RdLbaNoData(0xA5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3329 ] 
17:16:54: [ RdLbaNoData(0xA6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3330 ] 
17:16:54: [ RdLbaNoData(0xA7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3331 ] 
17:16:54: [ RdLbaNoData(0xA8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3332 ] 
17:16:54: [ RdLbaNoData(0xA9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3333 ] 
17:16:54: [ RdLbaNoData(0xAA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3334 ] 
17:16:54: [ RdLbaNoData(0xAB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3335 ] 
17:16:54: [ RdLbaNoData(0xAC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3336 ] 
17:16:54: [ RdLbaNoData(0xAD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3337 ] 
17:16:54: [ RdLbaNoData(0xAE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3338 ] 
17:16:54: [ RdLbaNoData(0xAF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3339 ] 
17:16:54: [ RdLbaNoData(0xB0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3340 ] 
17:16:54: [ RdLbaNoData(0xB1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3341 ] 
17:16:54: [ RdLbaNoData(0xB2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3342 ] 
17:16:54: [ RdLbaNoData(0xB3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3343 ] 
17:16:54: [ RdLbaNoData(0xB4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3344 ] 
17:16:54: [ RdLbaNoData(0xB5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3345 ] 
17:16:54: [ RdLbaNoData(0xB6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3346 ] 
17:16:55: [ RdLbaNoData(0xB7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3347 ] 
17:16:55: [ RdLbaNoData(0xB8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3348 ] 
17:16:55: [ RdLbaNoData(0xB9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3349 ] 
17:16:55: [ RdLbaNoData(0xBA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3350 ] 
17:16:55: [ RdLbaNoData(0xBB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3351 ] 
17:16:55: [ RdLbaNoData(0xBC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3352 ] 
17:16:55: [ RdLbaNoData(0xBD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3353 ] 
17:16:55: [ RdLbaNoData(0xBE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3354 ] 
17:16:55: [ RdLbaNoData(0xBF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3355 ] 
17:16:55: [ RdLbaNoData(0xC0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3356 ] 
17:16:55: [ RdLbaNoData(0xC1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3357 ] 
17:16:55: [ RdLbaNoData(0xC2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3358 ] 
17:16:55: [ RdLbaNoData(0xC3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3359 ] 
17:16:55: [ RdLbaNoData(0xC4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3360 ] 
17:16:55: [ RdLbaNoData(0xC5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3361 ] 
17:16:55: [ RdLbaNoData(0xC6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3362 ] 
17:16:55: [ RdLbaNoData(0xC7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3363 ] 
17:16:55: [ RdLbaNoData(0xC8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3364 ] 
17:16:55: [ RdLbaNoData(0xC9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3365 ] 
17:16:55: [ RdLbaNoData(0xCA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3366 ] 
17:16:55: [ RdLbaNoData(0xCB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3367 ] 
17:16:55: [ RdLbaNoData(0xCC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3368 ] 
17:16:55: [ RdLbaNoData(0xCD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3369 ] 
17:16:55: [ RdLbaNoData(0xCE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3370 ] 
17:16:55: [ RdLbaNoData(0xCF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3371 ] 
17:16:55: [ RdLbaNoData(0xD0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3372 ] 
17:16:55: [ RdLbaNoData(0xD1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3373 ] 
17:16:55: [ RdLbaNoData(0xD2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3374 ] 
17:16:55: [ RdLbaNoData(0xD3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3375 ] 
17:16:55: [ RdLbaNoData(0xD4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3376 ] 
17:16:55: [ RdLbaNoData(0xD5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3377 ] 
17:16:55: [ RdLbaNoData(0xD6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3378 ] 
17:16:55: [ RdLbaNoData(0xD7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3379 ] 
17:16:55: [ RdLbaNoData(0xD8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3380 ] 
17:16:56: [ RdLbaNoData(0xD9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3381 ] 
17:16:56: [ RdLbaNoData(0xDA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3382 ] 
17:16:56: [ RdLbaNoData(0xDB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3383 ] 
17:16:56: [ RdLbaNoData(0xDC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3384 ] 
17:16:56: [ RdLbaNoData(0xDD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3385 ] 
17:16:56: [ RdLbaNoData(0xDE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3386 ] 
17:16:56: [ RdLbaNoData(0xDF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3387 ] 
17:16:56: [ RdLbaNoData(0xE0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3388 ] 
17:16:56: [ RdLbaNoData(0xE1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3389 ] 
17:16:56: [ RdLbaNoData(0xE2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3390 ] 
17:16:56: [ RdLbaNoData(0xE3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3391 ] 
17:16:56: [ RdLbaNoData(0xE4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3392 ] 
17:16:56: [ RdLbaNoData(0xE5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3393 ] 
17:16:56: [ RdLbaNoData(0xE6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3394 ] 
17:16:56: [ RdLbaNoData(0xE7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3395 ] 
17:16:56: [ RdLbaNoData(0xE8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3396 ] 
17:16:56: [ RdLbaNoData(0xE9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3397 ] 
17:16:56: [ RdLbaNoData(0xEA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3398 ] 
17:16:56: [ RdLbaNoData(0xEB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3399 ] 
17:16:56: [ RdLbaNoData(0xEC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3400 ] 
17:16:56: [ RdLbaNoData(0xED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3401 ] 
17:16:56: [ RdLbaNoData(0xEE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3402 ] 
17:16:56: [ RdLbaNoData(0xEF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3403 ] 
17:16:56: [ RdLbaNoData(0xF0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3404 ] 
17:16:56: [ RdLbaNoData(0xF1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3405 ] 
17:16:56: [ RdLbaNoData(0xF2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3406 ] 
17:16:56: [ RdLbaNoData(0xF3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3407 ] 
17:16:56: [ RdLbaNoData(0xF4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3408 ] 
17:16:56: [ RdLbaNoData(0xF5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3409 ] 
17:16:56: [ RdLbaNoData(0xF6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3410 ] 
17:16:56: [ RdLbaNoData(0xF7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3411 ] 
17:16:56: [ RdLbaNoData(0xF8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3412 ] 
17:16:56: [ RdLbaNoData(0xF9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3413 ] 
17:16:57: [ RdLbaNoData(0xFA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3414 ] 
17:16:57: [ RdLbaNoData(0xFB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3415 ] 
17:16:57: [ RdLbaNoData(0xFC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3416 ] 
17:16:57: [ RdLbaNoData(0xFD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3417 ] 
17:16:57: [ RdLbaNoData(0xFE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3418 ] 
17:16:57: [ RdLbaNoData(0xFF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3419 ] 
17:16:57: [ RdLbaNoData(0x100, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3420 ] 
17:16:57: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x0 to EndLba:0x101 with Anyword Pattern 78 

17:16:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :SingleWrite from StartLba: 0x3B72300 to EndLba:0x3B72400 with Anyword Pattern 78
17:16:57: [ WrLbaNoData(0x3B72300, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3421 ] 
17:16:57: [ WrLbaNoData(0x3B72301, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3422 ] 
17:16:57: [ WrLbaNoData(0x3B72302, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3423 ] 
17:16:57: [ WrLbaNoData(0x3B72303, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3424 ] 
17:16:57: [ WrLbaNoData(0x3B72304, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3425 ] 
17:16:57: [ WrLbaNoData(0x3B72305, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3426 ] 
17:16:57: [ WrLbaNoData(0x3B72306, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3427 ] 
17:16:57: [ WrLbaNoData(0x3B72307, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3428 ] 
17:16:57: [ WrLbaNoData(0x3B72308, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3429 ] 
17:16:57: [ WrLbaNoData(0x3B72309, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3430 ] 
17:16:57: [ WrLbaNoData(0x3B7230A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3431 ] 
17:16:57: [ WrLbaNoData(0x3B7230B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3432 ] 
17:16:57: [ WrLbaNoData(0x3B7230C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3433 ] 
17:16:57: [ WrLbaNoData(0x3B7230D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3434 ] 
17:16:57: [ WrLbaNoData(0x3B7230E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3435 ] 
17:16:57: [ WrLbaNoData(0x3B7230F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3436 ] 
17:16:57: [ WrLbaNoData(0x3B72310, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3437 ] 
17:16:57: [ WrLbaNoData(0x3B72311, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3438 ] 
17:16:57: [ WrLbaNoData(0x3B72312, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3439 ] 
17:16:57: [ WrLbaNoData(0x3B72313, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3440 ] 
17:16:57: [ WrLbaNoData(0x3B72314, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3441 ] 
17:16:57: [ WrLbaNoData(0x3B72315, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3442 ] 
17:16:57: [ WrLbaNoData(0x3B72316, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3443 ] 
17:16:57: [ WrLbaNoData(0x3B72317, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3444 ] 
17:16:58: [ WrLbaNoData(0x3B72318, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3445 ] 
17:16:58: [ WrLbaNoData(0x3B72319, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3446 ] 
17:16:58: [ WrLbaNoData(0x3B7231A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3447 ] 
17:16:58: [ WrLbaNoData(0x3B7231B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3448 ] 
17:16:58: [ WrLbaNoData(0x3B7231C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3449 ] 
17:16:58: [ WrLbaNoData(0x3B7231D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3450 ] 
17:16:58: [ WrLbaNoData(0x3B7231E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3451 ] 
17:16:58: [ WrLbaNoData(0x3B7231F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3452 ] 
17:16:58: [ WrLbaNoData(0x3B72320, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3453 ] 
17:16:58: [ WrLbaNoData(0x3B72321, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3454 ] 
17:16:58: [ WrLbaNoData(0x3B72322, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3455 ] 
17:16:58: [ WrLbaNoData(0x3B72323, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3456 ] 
17:16:58: [ WrLbaNoData(0x3B72324, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3457 ] 
17:16:58: [ WrLbaNoData(0x3B72325, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3458 ] 
17:16:58: [ WrLbaNoData(0x3B72326, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3459 ] 
17:16:58: [ WrLbaNoData(0x3B72327, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3460 ] 
17:16:58: [ WrLbaNoData(0x3B72328, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3461 ] 
17:16:58: [ WrLbaNoData(0x3B72329, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3462 ] 
17:16:58: [ WrLbaNoData(0x3B7232A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3463 ] 
17:16:58: [ WrLbaNoData(0x3B7232B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3464 ] 
17:16:58: [ WrLbaNoData(0x3B7232C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3465 ] 
17:16:58: [ WrLbaNoData(0x3B7232D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3466 ] 
17:16:58: [ WrLbaNoData(0x3B7232E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3467 ] 
17:16:58: [ WrLbaNoData(0x3B7232F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3468 ] 
17:16:58: [ WrLbaNoData(0x3B72330, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3469 ] 
17:16:58: [ WrLbaNoData(0x3B72331, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3470 ] 
17:16:58: [ WrLbaNoData(0x3B72332, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3471 ] 
17:16:58: [ WrLbaNoData(0x3B72333, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3472 ] 
17:16:58: [ WrLbaNoData(0x3B72334, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3473 ] 
17:16:58: [ WrLbaNoData(0x3B72335, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3474 ] 
17:16:58: [ WrLbaNoData(0x3B72336, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3475 ] 
17:16:58: [ WrLbaNoData(0x3B72337, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3476 ] 
17:16:59: [ WrLbaNoData(0x3B72338, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3477 ] 
17:16:59: [ WrLbaNoData(0x3B72339, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3478 ] 
17:16:59: [ WrLbaNoData(0x3B7233A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3479 ] 
17:16:59: [ WrLbaNoData(0x3B7233B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3480 ] 
17:16:59: [ WrLbaNoData(0x3B7233C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3481 ] 
17:16:59: [ WrLbaNoData(0x3B7233D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3482 ] 
17:16:59: [ WrLbaNoData(0x3B7233E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3483 ] 
17:16:59: [ WrLbaNoData(0x3B7233F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3484 ] 
17:16:59: [ WrLbaNoData(0x3B72340, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3485 ] 
17:16:59: [ WrLbaNoData(0x3B72341, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3486 ] 
17:16:59: [ WrLbaNoData(0x3B72342, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3487 ] 
17:16:59: [ WrLbaNoData(0x3B72343, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3488 ] 
17:16:59: [ WrLbaNoData(0x3B72344, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3489 ] 
17:16:59: [ WrLbaNoData(0x3B72345, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3490 ] 
17:16:59: [ WrLbaNoData(0x3B72346, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3491 ] 
17:16:59: [ WrLbaNoData(0x3B72347, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3492 ] 
17:16:59: [ WrLbaNoData(0x3B72348, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3493 ] 
17:16:59: [ WrLbaNoData(0x3B72349, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3494 ] 
17:16:59: [ WrLbaNoData(0x3B7234A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3495 ] 
17:16:59: [ WrLbaNoData(0x3B7234B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3496 ] 
17:16:59: [ WrLbaNoData(0x3B7234C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3497 ] 
17:16:59: [ WrLbaNoData(0x3B7234D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3498 ] 
17:16:59: [ WrLbaNoData(0x3B7234E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3499 ] 
17:16:59: [ WrLbaNoData(0x3B7234F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3500 ] 
17:16:59: [ WrLbaNoData(0x3B72350, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3501 ] 
17:16:59: [ WrLbaNoData(0x3B72351, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3502 ] 
17:16:59: [ WrLbaNoData(0x3B72352, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3503 ] 
17:16:59: [ WrLbaNoData(0x3B72353, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3504 ] 
17:16:59: [ WrLbaNoData(0x3B72354, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3505 ] 
17:16:59: [ WrLbaNoData(0x3B72355, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3506 ] 
17:16:59: [ WrLbaNoData(0x3B72356, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3507 ] 
17:16:59: [ WrLbaNoData(0x3B72357, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3508 ] 
17:16:59: [ WrLbaNoData(0x3B72358, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3509 ] 
17:16:59: [ WrLbaNoData(0x3B72359, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3510 ] 
17:16:59: [ WrLbaNoData(0x3B7235A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3511 ] 
17:16:59: [ WrLbaNoData(0x3B7235B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3512 ] 
17:16:59: [ WrLbaNoData(0x3B7235C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3513 ] 
17:16:59: [ WrLbaNoData(0x3B7235D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3514 ] 
17:16:59: [ WrLbaNoData(0x3B7235E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3515 ] 
17:17:00: [ WrLbaNoData(0x3B7235F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3516 ] 
17:17:00: [ WrLbaNoData(0x3B72360, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3517 ] 
17:17:00: [ WrLbaNoData(0x3B72361, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3518 ] 
17:17:00: [ WrLbaNoData(0x3B72362, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3519 ] 
17:17:00: [ WrLbaNoData(0x3B72363, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3520 ] 
17:17:00: [ WrLbaNoData(0x3B72364, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3521 ] 
17:17:00: [ WrLbaNoData(0x3B72365, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3522 ] 
17:17:00: [ WrLbaNoData(0x3B72366, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3523 ] 
17:17:00: [ WrLbaNoData(0x3B72367, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3524 ] 
17:17:00: [ WrLbaNoData(0x3B72368, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3525 ] 
17:17:00: [ WrLbaNoData(0x3B72369, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3526 ] 
17:17:00: [ WrLbaNoData(0x3B7236A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3527 ] 
17:17:00: [ WrLbaNoData(0x3B7236B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3528 ] 
17:17:00: [ WrLbaNoData(0x3B7236C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3529 ] 
17:17:00: [ WrLbaNoData(0x3B7236D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3530 ] 
17:17:00: [ WrLbaNoData(0x3B7236E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3531 ] 
17:17:00: [ WrLbaNoData(0x3B7236F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3532 ] 
17:17:00: [ WrLbaNoData(0x3B72370, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3533 ] 
17:17:00: [ WrLbaNoData(0x3B72371, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3534 ] 
17:17:00: [ WrLbaNoData(0x3B72372, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3535 ] 
17:17:00: [ WrLbaNoData(0x3B72373, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3536 ] 
17:17:00: [ WrLbaNoData(0x3B72374, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3537 ] 
17:17:00: [ WrLbaNoData(0x3B72375, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3538 ] 
17:17:00: [ WrLbaNoData(0x3B72376, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3539 ] 
17:17:00: [ WrLbaNoData(0x3B72377, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3540 ] 
17:17:00: [ WrLbaNoData(0x3B72378, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3541 ] 
17:17:00: [ WrLbaNoData(0x3B72379, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3542 ] 
17:17:00: [ WrLbaNoData(0x3B7237A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3543 ] 
17:17:00: [ WrLbaNoData(0x3B7237B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3544 ] 
17:17:00: [ WrLbaNoData(0x3B7237C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3545 ] 
17:17:00: [ WrLbaNoData(0x3B7237D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3546 ] 
17:17:00: [ WrLbaNoData(0x3B7237E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3547 ] 
17:17:00: [ WrLbaNoData(0x3B7237F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3548 ] 
17:17:01: [ WrLbaNoData(0x3B72380, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3549 ] 
17:17:01: [ WrLbaNoData(0x3B72381, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3550 ] 
17:17:01: [ WrLbaNoData(0x3B72382, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3551 ] 
17:17:01: [ WrLbaNoData(0x3B72383, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3552 ] 
17:17:01: [ WrLbaNoData(0x3B72384, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3553 ] 
17:17:01: [ WrLbaNoData(0x3B72385, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3554 ] 
17:17:01: [ WrLbaNoData(0x3B72386, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3555 ] 
17:17:01: [ WrLbaNoData(0x3B72387, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3556 ] 
17:17:01: [ WrLbaNoData(0x3B72388, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3557 ] 
17:17:01: [ WrLbaNoData(0x3B72389, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3558 ] 
17:17:01: [ WrLbaNoData(0x3B7238A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3559 ] 
17:17:01: [ WrLbaNoData(0x3B7238B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3560 ] 
17:17:01: [ WrLbaNoData(0x3B7238C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3561 ] 
17:17:01: [ WrLbaNoData(0x3B7238D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3562 ] 
17:17:01: [ WrLbaNoData(0x3B7238E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3563 ] 
17:17:01: [ WrLbaNoData(0x3B7238F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3564 ] 
17:17:01: [ WrLbaNoData(0x3B72390, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3565 ] 
17:17:01: [ WrLbaNoData(0x3B72391, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3566 ] 
17:17:01: [ WrLbaNoData(0x3B72392, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3567 ] 
17:17:01: [ WrLbaNoData(0x3B72393, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3568 ] 
17:17:01: [ WrLbaNoData(0x3B72394, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3569 ] 
17:17:01: [ WrLbaNoData(0x3B72395, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3570 ] 
17:17:01: [ WrLbaNoData(0x3B72396, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3571 ] 
17:17:01: [ WrLbaNoData(0x3B72397, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3572 ] 
17:17:01: [ WrLbaNoData(0x3B72398, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3573 ] 
17:17:01: [ WrLbaNoData(0x3B72399, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3574 ] 
17:17:01: [ WrLbaNoData(0x3B7239A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3575 ] 
17:17:01: [ WrLbaNoData(0x3B7239B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3576 ] 
17:17:01: [ WrLbaNoData(0x3B7239C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3577 ] 
17:17:01: [ WrLbaNoData(0x3B7239D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3578 ] 
17:17:01: [ WrLbaNoData(0x3B7239E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3579 ] 
17:17:01: [ WrLbaNoData(0x3B7239F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3580 ] 
17:17:01: [ WrLbaNoData(0x3B723A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3581 ] 
17:17:01: [ WrLbaNoData(0x3B723A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3582 ] 
17:17:01: [ WrLbaNoData(0x3B723A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3583 ] 
17:17:01: [ WrLbaNoData(0x3B723A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3584 ] 
17:17:01: [ WrLbaNoData(0x3B723A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3585 ] 
17:17:01: [ WrLbaNoData(0x3B723A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3586 ] 
17:17:01: [ WrLbaNoData(0x3B723A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3587 ] 
17:17:02: [ WrLbaNoData(0x3B723A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3588 ] 
17:17:02: [ WrLbaNoData(0x3B723A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3589 ] 
17:17:02: [ WrLbaNoData(0x3B723A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3590 ] 
17:17:02: [ WrLbaNoData(0x3B723AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3591 ] 
17:17:02: [ WrLbaNoData(0x3B723AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3592 ] 
17:17:02: [ WrLbaNoData(0x3B723AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3593 ] 
17:17:02: [ WrLbaNoData(0x3B723AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3594 ] 
17:17:02: [ WrLbaNoData(0x3B723AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3595 ] 
17:17:02: [ WrLbaNoData(0x3B723AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3596 ] 
17:17:02: [ WrLbaNoData(0x3B723B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3597 ] 
17:17:02: [ WrLbaNoData(0x3B723B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3598 ] 
17:17:02: [ WrLbaNoData(0x3B723B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3599 ] 
17:17:02: [ WrLbaNoData(0x3B723B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3600 ] 
17:17:02: [ WrLbaNoData(0x3B723B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3601 ] 
17:17:02: [ WrLbaNoData(0x3B723B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3602 ] 
17:17:02: [ WrLbaNoData(0x3B723B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3603 ] 
17:17:02: [ WrLbaNoData(0x3B723B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3604 ] 
17:17:02: [ WrLbaNoData(0x3B723B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3605 ] 
17:17:02: [ WrLbaNoData(0x3B723B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3606 ] 
17:17:02: [ WrLbaNoData(0x3B723BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3607 ] 
17:17:02: [ WrLbaNoData(0x3B723BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3608 ] 
17:17:02: [ WrLbaNoData(0x3B723BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3609 ] 
17:17:02: [ WrLbaNoData(0x3B723BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3610 ] 
17:17:02: [ WrLbaNoData(0x3B723BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3611 ] 
17:17:02: [ WrLbaNoData(0x3B723BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3612 ] 
17:17:02: [ WrLbaNoData(0x3B723C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3613 ] 
17:17:02: [ WrLbaNoData(0x3B723C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3614 ] 
17:17:02: [ WrLbaNoData(0x3B723C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3615 ] 
17:17:02: [ WrLbaNoData(0x3B723C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3616 ] 
17:17:02: [ WrLbaNoData(0x3B723C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3617 ] 
17:17:02: [ WrLbaNoData(0x3B723C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3618 ] 
17:17:02: [ WrLbaNoData(0x3B723C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3619 ] 
17:17:02: [ WrLbaNoData(0x3B723C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3620 ] 
17:17:03: [ WrLbaNoData(0x3B723C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3621 ] 
17:17:03: [ WrLbaNoData(0x3B723C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3622 ] 
17:17:03: [ WrLbaNoData(0x3B723CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3623 ] 
17:17:03: [ WrLbaNoData(0x3B723CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3624 ] 
17:17:03: [ WrLbaNoData(0x3B723CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3625 ] 
17:17:03: [ WrLbaNoData(0x3B723CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3626 ] 
17:17:03: [ WrLbaNoData(0x3B723CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3627 ] 
17:17:03: [ WrLbaNoData(0x3B723CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3628 ] 
17:17:03: [ WrLbaNoData(0x3B723D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3629 ] 
17:17:03: [ WrLbaNoData(0x3B723D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3630 ] 
17:17:03: [ WrLbaNoData(0x3B723D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3631 ] 
17:17:03: [ WrLbaNoData(0x3B723D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3632 ] 
17:17:03: [ WrLbaNoData(0x3B723D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3633 ] 
17:17:03: [ WrLbaNoData(0x3B723D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3634 ] 
17:17:03: [ WrLbaNoData(0x3B723D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3635 ] 
17:17:03: [ WrLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3636 ] 
17:17:03: [ WrLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3637 ] 
17:17:03: [ WrLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3638 ] 
17:17:03: [ WrLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3639 ] 
17:17:03: [ WrLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3640 ] 
17:17:03: [ WrLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3641 ] 
17:17:03: [ WrLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3642 ] 
17:17:03: [ WrLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3643 ] 
17:17:03: [ WrLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3644 ] 
17:17:03: [ WrLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3645 ] 
17:17:03: [ WrLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3646 ] 
17:17:03: [ WrLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3647 ] 
17:17:03: [ WrLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3648 ] 
17:17:03: [ WrLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3649 ] 
17:17:03: [ WrLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3650 ] 
17:17:03: [ WrLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3651 ] 
17:17:03: [ WrLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3652 ] 
17:17:04: [ WrLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3653 ] 
17:17:04: [ WrLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3654 ] 
17:17:04: [ WrLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3655 ] 
17:17:04: [ WrLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3656 ] 
17:17:04: [ WrLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3657 ] 
17:17:04: [ WrLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3658 ] 
17:17:04: [ WrLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3659 ] 
17:17:04: [ WrLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3660 ] 
17:17:04: [ WrLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3661 ] 
17:17:04: [ WrLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3662 ] 
17:17:04: [ WrLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3663 ] 
17:17:04: [ WrLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3664 ] 
17:17:04: [ WrLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3665 ] 
17:17:04: [ WrLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3666 ] 
17:17:04: [ WrLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3667 ] 
17:17:04: [ WrLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3668 ] 
17:17:04: [ WrLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3669 ] 
17:17:04: [ WrLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3670 ] 
17:17:04: [ WrLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3671 ] 
17:17:04: [ WrLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3672 ] 
17:17:04: [ WrLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3673 ] 
17:17:04: [ WrLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3674 ] 
17:17:04: [ WrLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3675 ] 
17:17:04: [ WrLbaNoData(0x3B723FF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3676 ] 
17:17:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done SingleWrite from StartLba: 0x3B72300 to EndLba:0x3B72400 with Anyword Pattern 78 

17:17:04: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B72300 to EndLba:0x3B72400 with Anyword Pattern 78
17:17:04: [ RdLbaNoData(0x3B72300, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3677 ] 
17:17:04: [ RdLbaNoData(0x3B72301, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3678 ] 
17:17:04: [ RdLbaNoData(0x3B72302, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3679 ] 
17:17:04: [ RdLbaNoData(0x3B72303, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3680 ] 
17:17:04: [ RdLbaNoData(0x3B72304, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3681 ] 
17:17:04: [ RdLbaNoData(0x3B72305, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3682 ] 
17:17:04: [ RdLbaNoData(0x3B72306, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3683 ] 
17:17:05: [ RdLbaNoData(0x3B72307, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3684 ] 
17:17:05: [ RdLbaNoData(0x3B72308, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3685 ] 
17:17:05: [ RdLbaNoData(0x3B72309, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3686 ] 
17:17:05: [ RdLbaNoData(0x3B7230A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3687 ] 
17:17:05: [ RdLbaNoData(0x3B7230B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3688 ] 
17:17:05: [ RdLbaNoData(0x3B7230C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3689 ] 
17:17:05: [ RdLbaNoData(0x3B7230D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3690 ] 
17:17:05: [ RdLbaNoData(0x3B7230E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3691 ] 
17:17:05: [ RdLbaNoData(0x3B7230F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3692 ] 
17:17:05: [ RdLbaNoData(0x3B72310, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3693 ] 
17:17:05: [ RdLbaNoData(0x3B72311, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3694 ] 
17:17:05: [ RdLbaNoData(0x3B72312, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3695 ] 
17:17:05: [ RdLbaNoData(0x3B72313, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3696 ] 
17:17:05: [ RdLbaNoData(0x3B72314, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3697 ] 
17:17:05: [ RdLbaNoData(0x3B72315, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3698 ] 
17:17:05: [ RdLbaNoData(0x3B72316, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3699 ] 
17:17:05: [ RdLbaNoData(0x3B72317, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3700 ] 
17:17:05: [ RdLbaNoData(0x3B72318, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3701 ] 
17:17:05: [ RdLbaNoData(0x3B72319, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3702 ] 
17:17:05: [ RdLbaNoData(0x3B7231A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3703 ] 
17:17:05: [ RdLbaNoData(0x3B7231B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3704 ] 
17:17:05: [ RdLbaNoData(0x3B7231C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3705 ] 
17:17:05: [ RdLbaNoData(0x3B7231D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3706 ] 
17:17:05: [ RdLbaNoData(0x3B7231E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3707 ] 
17:17:05: [ RdLbaNoData(0x3B7231F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3708 ] 
17:17:05: [ RdLbaNoData(0x3B72320, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3709 ] 
17:17:05: [ RdLbaNoData(0x3B72321, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3710 ] 
17:17:05: [ RdLbaNoData(0x3B72322, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3711 ] 
17:17:05: [ RdLbaNoData(0x3B72323, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3712 ] 
17:17:05: [ RdLbaNoData(0x3B72324, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3713 ] 
17:17:05: [ RdLbaNoData(0x3B72325, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3714 ] 
17:17:06: [ RdLbaNoData(0x3B72326, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3715 ] 
17:17:06: [ RdLbaNoData(0x3B72327, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3716 ] 
17:17:06: [ RdLbaNoData(0x3B72328, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3717 ] 
17:17:06: [ RdLbaNoData(0x3B72329, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3718 ] 
17:17:06: [ RdLbaNoData(0x3B7232A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3719 ] 
17:17:06: [ RdLbaNoData(0x3B7232B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3720 ] 
17:17:06: [ RdLbaNoData(0x3B7232C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3721 ] 
17:17:06: [ RdLbaNoData(0x3B7232D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3722 ] 
17:17:06: [ RdLbaNoData(0x3B7232E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3723 ] 
17:17:06: [ RdLbaNoData(0x3B7232F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3724 ] 
17:17:06: [ RdLbaNoData(0x3B72330, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3725 ] 
17:17:06: [ RdLbaNoData(0x3B72331, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3726 ] 
17:17:06: [ RdLbaNoData(0x3B72332, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3727 ] 
17:17:06: [ RdLbaNoData(0x3B72333, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3728 ] 
17:17:06: [ RdLbaNoData(0x3B72334, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3729 ] 
17:17:06: [ RdLbaNoData(0x3B72335, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3730 ] 
17:17:06: [ RdLbaNoData(0x3B72336, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3731 ] 
17:17:06: [ RdLbaNoData(0x3B72337, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3732 ] 
17:17:06: [ RdLbaNoData(0x3B72338, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3733 ] 
17:17:06: [ RdLbaNoData(0x3B72339, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3734 ] 
17:17:06: [ RdLbaNoData(0x3B7233A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3735 ] 
17:17:06: [ RdLbaNoData(0x3B7233B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3736 ] 
17:17:06: [ RdLbaNoData(0x3B7233C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3737 ] 
17:17:06: [ RdLbaNoData(0x3B7233D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3738 ] 
17:17:06: [ RdLbaNoData(0x3B7233E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3739 ] 
17:17:06: [ RdLbaNoData(0x3B7233F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3740 ] 
17:17:06: [ RdLbaNoData(0x3B72340, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3741 ] 
17:17:06: [ RdLbaNoData(0x3B72341, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3742 ] 
17:17:06: [ RdLbaNoData(0x3B72342, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3743 ] 
17:17:06: [ RdLbaNoData(0x3B72343, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3744 ] 
17:17:06: [ RdLbaNoData(0x3B72344, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3745 ] 
17:17:06: [ RdLbaNoData(0x3B72345, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3746 ] 
17:17:06: [ RdLbaNoData(0x3B72346, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3747 ] 
17:17:06: [ RdLbaNoData(0x3B72347, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3748 ] 
17:17:06: [ RdLbaNoData(0x3B72348, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3749 ] 
17:17:06: [ RdLbaNoData(0x3B72349, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3750 ] 
17:17:06: [ RdLbaNoData(0x3B7234A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3751 ] 
17:17:06: [ RdLbaNoData(0x3B7234B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3752 ] 
17:17:06: [ RdLbaNoData(0x3B7234C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3753 ] 
17:17:06: [ RdLbaNoData(0x3B7234D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3754 ] 
17:17:06: [ RdLbaNoData(0x3B7234E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3755 ] 
17:17:06: [ RdLbaNoData(0x3B7234F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3756 ] 
17:17:06: [ RdLbaNoData(0x3B72350, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3757 ] 
17:17:06: [ RdLbaNoData(0x3B72351, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3758 ] 
17:17:06: [ RdLbaNoData(0x3B72352, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3759 ] 
17:17:06: [ RdLbaNoData(0x3B72353, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3760 ] 
17:17:06: [ RdLbaNoData(0x3B72354, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3761 ] 
17:17:06: [ RdLbaNoData(0x3B72355, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3762 ] 
17:17:06: [ RdLbaNoData(0x3B72356, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3763 ] 
17:17:06: [ RdLbaNoData(0x3B72357, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3764 ] 
17:17:06: [ RdLbaNoData(0x3B72358, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3765 ] 
17:17:07: [ RdLbaNoData(0x3B72359, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3766 ] 
17:17:07: [ RdLbaNoData(0x3B7235A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3767 ] 
17:17:07: [ RdLbaNoData(0x3B7235B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3768 ] 
17:17:07: [ RdLbaNoData(0x3B7235C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3769 ] 
17:17:07: [ RdLbaNoData(0x3B7235D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3770 ] 
17:17:07: [ RdLbaNoData(0x3B7235E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3771 ] 
17:17:07: [ RdLbaNoData(0x3B7235F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3772 ] 
17:17:07: [ RdLbaNoData(0x3B72360, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3773 ] 
17:17:07: [ RdLbaNoData(0x3B72361, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3774 ] 
17:17:07: [ RdLbaNoData(0x3B72362, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3775 ] 
17:17:07: [ RdLbaNoData(0x3B72363, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3776 ] 
17:17:07: [ RdLbaNoData(0x3B72364, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3777 ] 
17:17:07: [ RdLbaNoData(0x3B72365, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3778 ] 
17:17:07: [ RdLbaNoData(0x3B72366, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3779 ] 
17:17:07: [ RdLbaNoData(0x3B72367, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3780 ] 
17:17:07: [ RdLbaNoData(0x3B72368, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3781 ] 
17:17:07: [ RdLbaNoData(0x3B72369, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3782 ] 
17:17:07: [ RdLbaNoData(0x3B7236A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3783 ] 
17:17:07: [ RdLbaNoData(0x3B7236B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3784 ] 
17:17:07: [ RdLbaNoData(0x3B7236C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3785 ] 
17:17:07: [ RdLbaNoData(0x3B7236D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3786 ] 
17:17:07: [ RdLbaNoData(0x3B7236E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3787 ] 
17:17:07: [ RdLbaNoData(0x3B7236F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3788 ] 
17:17:07: [ RdLbaNoData(0x3B72370, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3789 ] 
17:17:07: [ RdLbaNoData(0x3B72371, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3790 ] 
17:17:07: [ RdLbaNoData(0x3B72372, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3791 ] 
17:17:07: [ RdLbaNoData(0x3B72373, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3792 ] 
17:17:07: [ RdLbaNoData(0x3B72374, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3793 ] 
17:17:07: [ RdLbaNoData(0x3B72375, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3794 ] 
17:17:07: [ RdLbaNoData(0x3B72376, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3795 ] 
17:17:07: [ RdLbaNoData(0x3B72377, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3796 ] 
17:17:07: [ RdLbaNoData(0x3B72378, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3797 ] 
17:17:07: [ RdLbaNoData(0x3B72379, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3798 ] 
17:17:07: [ RdLbaNoData(0x3B7237A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3799 ] 
17:17:07: [ RdLbaNoData(0x3B7237B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3800 ] 
17:17:07: [ RdLbaNoData(0x3B7237C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3801 ] 
17:17:07: [ RdLbaNoData(0x3B7237D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3802 ] 
17:17:07: [ RdLbaNoData(0x3B7237E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3803 ] 
17:17:07: [ RdLbaNoData(0x3B7237F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3804 ] 
17:17:07: [ RdLbaNoData(0x3B72380, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3805 ] 
17:17:07: [ RdLbaNoData(0x3B72381, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3806 ] 
17:17:07: [ RdLbaNoData(0x3B72382, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3807 ] 
17:17:07: [ RdLbaNoData(0x3B72383, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3808 ] 
17:17:07: [ RdLbaNoData(0x3B72384, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3809 ] 
17:17:07: [ RdLbaNoData(0x3B72385, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3810 ] 
17:17:07: [ RdLbaNoData(0x3B72386, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3811 ] 
17:17:07: [ RdLbaNoData(0x3B72387, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3812 ] 
17:17:07: [ RdLbaNoData(0x3B72388, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3813 ] 
17:17:07: [ RdLbaNoData(0x3B72389, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3814 ] 
17:17:07: [ RdLbaNoData(0x3B7238A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3815 ] 
17:17:07: [ RdLbaNoData(0x3B7238B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3816 ] 
17:17:07: [ RdLbaNoData(0x3B7238C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3817 ] 
17:17:07: [ RdLbaNoData(0x3B7238D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3818 ] 
17:17:07: [ RdLbaNoData(0x3B7238E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3819 ] 
17:17:07: [ RdLbaNoData(0x3B7238F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3820 ] 
17:17:07: [ RdLbaNoData(0x3B72390, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3821 ] 
17:17:07: [ RdLbaNoData(0x3B72391, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3822 ] 
17:17:07: [ RdLbaNoData(0x3B72392, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3823 ] 
17:17:08: [ RdLbaNoData(0x3B72393, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3824 ] 
17:17:08: [ RdLbaNoData(0x3B72394, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3825 ] 
17:17:08: [ RdLbaNoData(0x3B72395, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3826 ] 
17:17:08: [ RdLbaNoData(0x3B72396, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3827 ] 
17:17:08: [ RdLbaNoData(0x3B72397, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3828 ] 
17:17:08: [ RdLbaNoData(0x3B72398, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3829 ] 
17:17:08: [ RdLbaNoData(0x3B72399, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3830 ] 
17:17:08: [ RdLbaNoData(0x3B7239A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3831 ] 
17:17:08: [ RdLbaNoData(0x3B7239B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3832 ] 
17:17:08: [ RdLbaNoData(0x3B7239C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3833 ] 
17:17:08: [ RdLbaNoData(0x3B7239D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3834 ] 
17:17:08: [ RdLbaNoData(0x3B7239E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3835 ] 
17:17:08: [ RdLbaNoData(0x3B7239F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3836 ] 
17:17:08: [ RdLbaNoData(0x3B723A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3837 ] 
17:17:08: [ RdLbaNoData(0x3B723A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3838 ] 
17:17:08: [ RdLbaNoData(0x3B723A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3839 ] 
17:17:08: [ RdLbaNoData(0x3B723A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3840 ] 
17:17:08: [ RdLbaNoData(0x3B723A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3841 ] 
17:17:08: [ RdLbaNoData(0x3B723A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3842 ] 
17:17:08: [ RdLbaNoData(0x3B723A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3843 ] 
17:17:08: [ RdLbaNoData(0x3B723A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3844 ] 
17:17:08: [ RdLbaNoData(0x3B723A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3845 ] 
17:17:08: [ RdLbaNoData(0x3B723A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3846 ] 
17:17:08: [ RdLbaNoData(0x3B723AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3847 ] 
17:17:08: [ RdLbaNoData(0x3B723AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3848 ] 
17:17:08: [ RdLbaNoData(0x3B723AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3849 ] 
17:17:08: [ RdLbaNoData(0x3B723AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3850 ] 
17:17:08: [ RdLbaNoData(0x3B723AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3851 ] 
17:17:08: [ RdLbaNoData(0x3B723AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3852 ] 
17:17:08: [ RdLbaNoData(0x3B723B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3853 ] 
17:17:08: [ RdLbaNoData(0x3B723B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3854 ] 
17:17:08: [ RdLbaNoData(0x3B723B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3855 ] 
17:17:08: [ RdLbaNoData(0x3B723B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3856 ] 
17:17:08: [ RdLbaNoData(0x3B723B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3857 ] 
17:17:08: [ RdLbaNoData(0x3B723B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3858 ] 
17:17:08: [ RdLbaNoData(0x3B723B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3859 ] 
17:17:08: [ RdLbaNoData(0x3B723B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3860 ] 
17:17:08: [ RdLbaNoData(0x3B723B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3861 ] 
17:17:08: [ RdLbaNoData(0x3B723B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3862 ] 
17:17:08: [ RdLbaNoData(0x3B723BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3863 ] 
17:17:08: [ RdLbaNoData(0x3B723BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3864 ] 
17:17:08: [ RdLbaNoData(0x3B723BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3865 ] 
17:17:08: [ RdLbaNoData(0x3B723BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3866 ] 
17:17:08: [ RdLbaNoData(0x3B723BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3867 ] 
17:17:08: [ RdLbaNoData(0x3B723BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3868 ] 
17:17:08: [ RdLbaNoData(0x3B723C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3869 ] 
17:17:08: [ RdLbaNoData(0x3B723C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3870 ] 
17:17:08: [ RdLbaNoData(0x3B723C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3871 ] 
17:17:08: [ RdLbaNoData(0x3B723C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3872 ] 
17:17:08: [ RdLbaNoData(0x3B723C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3873 ] 
17:17:08: [ RdLbaNoData(0x3B723C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3874 ] 
17:17:08: [ RdLbaNoData(0x3B723C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3875 ] 
17:17:08: [ RdLbaNoData(0x3B723C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3876 ] 
17:17:08: [ RdLbaNoData(0x3B723C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3877 ] 
17:17:08: [ RdLbaNoData(0x3B723C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3878 ] 
17:17:08: [ RdLbaNoData(0x3B723CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3879 ] 
17:17:08: [ RdLbaNoData(0x3B723CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3880 ] 
17:17:08: [ RdLbaNoData(0x3B723CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3881 ] 
17:17:08: [ RdLbaNoData(0x3B723CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3882 ] 
17:17:08: [ RdLbaNoData(0x3B723CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3883 ] 
17:17:08: [ RdLbaNoData(0x3B723CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3884 ] 
17:17:09: [ RdLbaNoData(0x3B723D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3885 ] 
17:17:09: [ RdLbaNoData(0x3B723D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3886 ] 
17:17:09: [ RdLbaNoData(0x3B723D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3887 ] 
17:17:09: [ RdLbaNoData(0x3B723D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3888 ] 
17:17:09: [ RdLbaNoData(0x3B723D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3889 ] 
17:17:09: [ RdLbaNoData(0x3B723D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3890 ] 
17:17:09: [ RdLbaNoData(0x3B723D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3891 ] 
17:17:09: [ RdLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3892 ] 
17:17:09: [ RdLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3893 ] 
17:17:09: [ RdLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3894 ] 
17:17:09: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3895 ] 
17:17:09: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3896 ] 
17:17:09: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3897 ] 
17:17:09: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3898 ] 
17:17:09: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3899 ] 
17:17:09: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3900 ] 
17:17:09: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3901 ] 
17:17:09: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3902 ] 
17:17:09: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3903 ] 
17:17:09: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3904 ] 
17:17:09: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3905 ] 
17:17:09: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3906 ] 
17:17:09: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3907 ] 
17:17:09: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3908 ] 
17:17:09: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3909 ] 
17:17:09: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3910 ] 
17:17:09: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3911 ] 
17:17:09: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3912 ] 
17:17:09: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3913 ] 
17:17:09: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3914 ] 
17:17:09: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3915 ] 
17:17:09: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3916 ] 
17:17:09: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3917 ] 
17:17:09: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3918 ] 
17:17:09: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3919 ] 
17:17:09: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3920 ] 
17:17:09: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3921 ] 
17:17:09: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3922 ] 
17:17:09: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3923 ] 
17:17:09: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3924 ] 
17:17:09: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3925 ] 
17:17:09: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3926 ] 
17:17:09: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3927 ] 
17:17:09: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3928 ] 
17:17:09: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3929 ] 
17:17:09: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3930 ] 
17:17:09: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3931 ] 
17:17:09: [ RdLbaNoData(0x3B723FF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3932 ] 
17:17:09: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B72300 to EndLba:0x3B72400 with Anyword Pattern 78 

17:17:09: [CF409_Card_functional_4_3_6_1_PWP_TWP_managment]###[INFO] :CommandsWith_NoWP Block Completed 

17:17:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDAE0>, <py_sfcl.CommandDataDefinition object at 0x061F5090>) , Command count = 3933 ] 
17:17:09: [ GetCardStatus() , Command count = 3934 ] 
17:17:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5510>, <py_sfcl.CommandDataDefinition object at 0x061F5750>) , Command count = 3935 ] 
17:17:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:17:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDAE0>, <py_sfcl.CommandDataDefinition object at 0x061F5090>) , Command count = 3936 ] 
17:17:09: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64]
17:17:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FF540>, <py_sfcl.CommandDataDefinition object at 0x061FF720>) , Command count = 3937 ] 
17:17:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:17:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F58A0>, <py_sfcl.CommandDataDefinition object at 0x061FF6F0>) , Command count = 3938 ] 
17:17:10: CMD27[ PROGRAM_CSD ] Passed with R1 type response:[27, 0, 0, 9, 0, 29]
17:17:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F57E0>, <py_sfcl.CommandDataDefinition object at 0x061FF690>) , Command count = 3939 ] 
17:17:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDD80>, <py_sfcl.CommandDataDefinition object at 0x061FF7E0>) , Command count = 3940 ] 
17:17:10: [ GetCardStatus() , Command count = 3941 ] 
17:17:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5330>, <py_sfcl.CommandDataDefinition object at 0x061FF780>) , Command count = 3942 ] 
17:17:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:17:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDD80>, <py_sfcl.CommandDataDefinition object at 0x061E9FC0>) , Command count = 3943 ] 
17:17:10: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:17:10: TMP_WRITE_PROTECT bit is enabled. Card is put to Write Protected Mode
17:17:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F53C0>, <py_sfcl.CommandDataDefinition object at 0x061FF840>) , Command count = 3944 ] 
17:17:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:17:10: [CF409_Card_functional_4_3_6_1_PWP_TWP_managment]###[INFO] :CommandsWith_WP Block Called 

17:17:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :SingleWrite from StartLba: 0x0 to EndLba:0x101 with Anyword Pattern 170
17:17:10: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 3945 ] 
17:17:10: [ GetCardStatus() , Command count = 3946 ] 
17:17:10: [DVTCommonLib]### WriteWithFPGAPattern[ERROR] :SingleWrite Failed from StartLba:0x0 to EndLba:0x101 with Anyword Pattern 170
17:17:10: [DVTCommonLib]### Exception_Details :Exception raised!!!, Error Number is 10 and Error Message is 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0xAL (10) executing command 'WrLbaNoData'
   Description : Attempt to write a write-protected sector
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No

17:17:10: [CF409_Card_functional_4_3_6_1_PWP_TWP_managment]###[INFO] :Expected to fail with Write Protection Error 

17:17:10: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x0 to EndLba:0x101 with Anyword Pattern 78
17:17:10: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3947 ] 
17:17:10: [ RdLbaNoData(0x1, 0x2, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3948 ] 
17:17:10: [ RdLbaNoData(0x2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3949 ] 
17:17:10: [ RdLbaNoData(0x3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3950 ] 
17:17:10: [ RdLbaNoData(0x4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3951 ] 
17:17:10: [ RdLbaNoData(0x5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3952 ] 
17:17:10: [ RdLbaNoData(0x6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3953 ] 
17:17:10: [ RdLbaNoData(0x7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3954 ] 
17:17:10: [ RdLbaNoData(0x8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3955 ] 
17:17:10: [ RdLbaNoData(0x9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3956 ] 
17:17:10: [ RdLbaNoData(0xA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3957 ] 
17:17:10: [ RdLbaNoData(0xB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3958 ] 
17:17:10: [ RdLbaNoData(0xC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3959 ] 
17:17:10: [ RdLbaNoData(0xD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3960 ] 
17:17:10: [ RdLbaNoData(0xE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3961 ] 
17:17:10: [ RdLbaNoData(0xF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3962 ] 
17:17:10: [ RdLbaNoData(0x10, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3963 ] 
17:17:10: [ RdLbaNoData(0x11, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3964 ] 
17:17:10: [ RdLbaNoData(0x12, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3965 ] 
17:17:10: [ RdLbaNoData(0x13, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3966 ] 
17:17:10: [ RdLbaNoData(0x14, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3967 ] 
17:17:10: [ RdLbaNoData(0x15, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3968 ] 
17:17:10: [ RdLbaNoData(0x16, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3969 ] 
17:17:10: [ RdLbaNoData(0x17, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3970 ] 
17:17:10: [ RdLbaNoData(0x18, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3971 ] 
17:17:10: [ RdLbaNoData(0x19, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3972 ] 
17:17:10: [ RdLbaNoData(0x1A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3973 ] 
17:17:11: [ RdLbaNoData(0x1B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3974 ] 
17:17:11: [ RdLbaNoData(0x1C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3975 ] 
17:17:11: [ RdLbaNoData(0x1D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3976 ] 
17:17:11: [ RdLbaNoData(0x1E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3977 ] 
17:17:11: [ RdLbaNoData(0x1F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3978 ] 
17:17:11: [ RdLbaNoData(0x20, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3979 ] 
17:17:11: [ RdLbaNoData(0x21, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3980 ] 
17:17:11: [ RdLbaNoData(0x22, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3981 ] 
17:17:11: [ RdLbaNoData(0x23, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3982 ] 
17:17:11: [ RdLbaNoData(0x24, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3983 ] 
17:17:11: [ RdLbaNoData(0x25, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3984 ] 
17:17:11: [ RdLbaNoData(0x26, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3985 ] 
17:17:11: [ RdLbaNoData(0x27, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3986 ] 
17:17:11: [ RdLbaNoData(0x28, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3987 ] 
17:17:11: [ RdLbaNoData(0x29, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3988 ] 
17:17:11: [ RdLbaNoData(0x2A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3989 ] 
17:17:11: [ RdLbaNoData(0x2B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3990 ] 
17:17:11: [ RdLbaNoData(0x2C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3991 ] 
17:17:11: [ RdLbaNoData(0x2D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3992 ] 
17:17:11: [ RdLbaNoData(0x2E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3993 ] 
17:17:11: [ RdLbaNoData(0x2F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3994 ] 
17:17:11: [ RdLbaNoData(0x30, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3995 ] 
17:17:11: [ RdLbaNoData(0x31, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3996 ] 
17:17:11: [ RdLbaNoData(0x32, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3997 ] 
17:17:11: [ RdLbaNoData(0x33, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3998 ] 
17:17:11: [ RdLbaNoData(0x34, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3999 ] 
17:17:11: [ RdLbaNoData(0x35, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4000 ] 
17:17:11: [ RdLbaNoData(0x36, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4001 ] 
17:17:11: [ RdLbaNoData(0x37, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4002 ] 
17:17:11: [ RdLbaNoData(0x38, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4003 ] 
17:17:11: [ RdLbaNoData(0x39, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4004 ] 
17:17:11: [ RdLbaNoData(0x3A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4005 ] 
17:17:11: [ RdLbaNoData(0x3B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4006 ] 
17:17:11: [ RdLbaNoData(0x3C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4007 ] 
17:17:11: [ RdLbaNoData(0x3D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4008 ] 
17:17:11: [ RdLbaNoData(0x3E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4009 ] 
17:17:11: [ RdLbaNoData(0x3F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4010 ] 
17:17:11: [ RdLbaNoData(0x40, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4011 ] 
17:17:11: [ RdLbaNoData(0x41, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4012 ] 
17:17:11: [ RdLbaNoData(0x42, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4013 ] 
17:17:11: [ RdLbaNoData(0x43, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4014 ] 
17:17:11: [ RdLbaNoData(0x44, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4015 ] 
17:17:11: [ RdLbaNoData(0x45, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4016 ] 
17:17:11: [ RdLbaNoData(0x46, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4017 ] 
17:17:11: [ RdLbaNoData(0x47, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4018 ] 
17:17:11: [ RdLbaNoData(0x48, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4019 ] 
17:17:11: [ RdLbaNoData(0x49, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4020 ] 
17:17:11: [ RdLbaNoData(0x4A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4021 ] 
17:17:11: [ RdLbaNoData(0x4B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4022 ] 
17:17:11: [ RdLbaNoData(0x4C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4023 ] 
17:17:11: [ RdLbaNoData(0x4D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4024 ] 
17:17:11: [ RdLbaNoData(0x4E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4025 ] 
17:17:12: [ RdLbaNoData(0x4F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4026 ] 
17:17:12: [ RdLbaNoData(0x50, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4027 ] 
17:17:12: [ RdLbaNoData(0x51, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4028 ] 
17:17:12: [ RdLbaNoData(0x52, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4029 ] 
17:17:12: [ RdLbaNoData(0x53, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4030 ] 
17:17:12: [ RdLbaNoData(0x54, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4031 ] 
17:17:12: [ RdLbaNoData(0x55, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4032 ] 
17:17:12: [ RdLbaNoData(0x56, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4033 ] 
17:17:12: [ RdLbaNoData(0x57, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4034 ] 
17:17:12: [ RdLbaNoData(0x58, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4035 ] 
17:17:12: [ RdLbaNoData(0x59, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4036 ] 
17:17:12: [ RdLbaNoData(0x5A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4037 ] 
17:17:12: [ RdLbaNoData(0x5B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4038 ] 
17:17:12: [ RdLbaNoData(0x5C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4039 ] 
17:17:12: [ RdLbaNoData(0x5D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4040 ] 
17:17:12: [ RdLbaNoData(0x5E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4041 ] 
17:17:12: [ RdLbaNoData(0x5F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4042 ] 
17:17:12: [ RdLbaNoData(0x60, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4043 ] 
17:17:12: [ RdLbaNoData(0x61, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4044 ] 
17:17:12: [ RdLbaNoData(0x62, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4045 ] 
17:17:12: [ RdLbaNoData(0x63, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4046 ] 
17:17:12: [ RdLbaNoData(0x64, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4047 ] 
17:17:12: [ RdLbaNoData(0x65, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4048 ] 
17:17:12: [ RdLbaNoData(0x66, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4049 ] 
17:17:12: [ RdLbaNoData(0x67, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4050 ] 
17:17:12: [ RdLbaNoData(0x68, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4051 ] 
17:17:12: [ RdLbaNoData(0x69, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4052 ] 
17:17:12: [ RdLbaNoData(0x6A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4053 ] 
17:17:12: [ RdLbaNoData(0x6B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4054 ] 
17:17:12: [ RdLbaNoData(0x6C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4055 ] 
17:17:12: [ RdLbaNoData(0x6D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4056 ] 
17:17:12: [ RdLbaNoData(0x6E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4057 ] 
17:17:12: [ RdLbaNoData(0x6F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4058 ] 
17:17:12: [ RdLbaNoData(0x70, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4059 ] 
17:17:12: [ RdLbaNoData(0x71, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4060 ] 
17:17:12: [ RdLbaNoData(0x72, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4061 ] 
17:17:12: [ RdLbaNoData(0x73, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4062 ] 
17:17:12: [ RdLbaNoData(0x74, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4063 ] 
17:17:12: [ RdLbaNoData(0x75, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4064 ] 
17:17:12: [ RdLbaNoData(0x76, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4065 ] 
17:17:12: [ RdLbaNoData(0x77, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4066 ] 
17:17:12: [ RdLbaNoData(0x78, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4067 ] 
17:17:12: [ RdLbaNoData(0x79, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4068 ] 
17:17:12: [ RdLbaNoData(0x7A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4069 ] 
17:17:12: [ RdLbaNoData(0x7B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4070 ] 
17:17:12: [ RdLbaNoData(0x7C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4071 ] 
17:17:12: [ RdLbaNoData(0x7D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4072 ] 
17:17:12: [ RdLbaNoData(0x7E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4073 ] 
17:17:12: [ RdLbaNoData(0x7F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4074 ] 
17:17:12: [ RdLbaNoData(0x80, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4075 ] 
17:17:12: [ RdLbaNoData(0x81, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4076 ] 
17:17:12: [ RdLbaNoData(0x82, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4077 ] 
17:17:12: [ RdLbaNoData(0x83, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4078 ] 
17:17:12: [ RdLbaNoData(0x84, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4079 ] 
17:17:12: [ RdLbaNoData(0x85, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4080 ] 
17:17:12: [ RdLbaNoData(0x86, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4081 ] 
17:17:12: [ RdLbaNoData(0x87, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4082 ] 
17:17:12: [ RdLbaNoData(0x88, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4083 ] 
17:17:13: [ RdLbaNoData(0x89, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4084 ] 
17:17:13: [ RdLbaNoData(0x8A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4085 ] 
17:17:13: [ RdLbaNoData(0x8B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4086 ] 
17:17:13: [ RdLbaNoData(0x8C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4087 ] 
17:17:13: [ RdLbaNoData(0x8D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4088 ] 
17:17:13: [ RdLbaNoData(0x8E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4089 ] 
17:17:13: [ RdLbaNoData(0x8F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4090 ] 
17:17:13: [ RdLbaNoData(0x90, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4091 ] 
17:17:13: [ RdLbaNoData(0x91, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4092 ] 
17:17:13: [ RdLbaNoData(0x92, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4093 ] 
17:17:13: [ RdLbaNoData(0x93, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4094 ] 
17:17:13: [ RdLbaNoData(0x94, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4095 ] 
17:17:13: [ RdLbaNoData(0x95, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4096 ] 
17:17:13: [ RdLbaNoData(0x96, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4097 ] 
17:17:13: [ RdLbaNoData(0x97, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4098 ] 
17:17:13: [ RdLbaNoData(0x98, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4099 ] 
17:17:13: [ RdLbaNoData(0x99, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4100 ] 
17:17:13: [ RdLbaNoData(0x9A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4101 ] 
17:17:13: [ RdLbaNoData(0x9B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4102 ] 
17:17:13: [ RdLbaNoData(0x9C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4103 ] 
17:17:13: [ RdLbaNoData(0x9D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4104 ] 
17:17:13: [ RdLbaNoData(0x9E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4105 ] 
17:17:13: [ RdLbaNoData(0x9F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4106 ] 
17:17:13: [ RdLbaNoData(0xA0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4107 ] 
17:17:13: [ RdLbaNoData(0xA1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4108 ] 
17:17:13: [ RdLbaNoData(0xA2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4109 ] 
17:17:13: [ RdLbaNoData(0xA3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4110 ] 
17:17:13: [ RdLbaNoData(0xA4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4111 ] 
17:17:13: [ RdLbaNoData(0xA5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4112 ] 
17:17:13: [ RdLbaNoData(0xA6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4113 ] 
17:17:13: [ RdLbaNoData(0xA7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4114 ] 
17:17:13: [ RdLbaNoData(0xA8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4115 ] 
17:17:13: [ RdLbaNoData(0xA9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4116 ] 
17:17:13: [ RdLbaNoData(0xAA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4117 ] 
17:17:13: [ RdLbaNoData(0xAB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4118 ] 
17:17:13: [ RdLbaNoData(0xAC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4119 ] 
17:17:13: [ RdLbaNoData(0xAD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4120 ] 
17:17:13: [ RdLbaNoData(0xAE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4121 ] 
17:17:13: [ RdLbaNoData(0xAF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4122 ] 
17:17:13: [ RdLbaNoData(0xB0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4123 ] 
17:17:13: [ RdLbaNoData(0xB1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4124 ] 
17:17:13: [ RdLbaNoData(0xB2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4125 ] 
17:17:13: [ RdLbaNoData(0xB3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4126 ] 
17:17:13: [ RdLbaNoData(0xB4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4127 ] 
17:17:13: [ RdLbaNoData(0xB5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4128 ] 
17:17:13: [ RdLbaNoData(0xB6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4129 ] 
17:17:13: [ RdLbaNoData(0xB7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4130 ] 
17:17:13: [ RdLbaNoData(0xB8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4131 ] 
17:17:13: [ RdLbaNoData(0xB9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4132 ] 
17:17:13: [ RdLbaNoData(0xBA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4133 ] 
17:17:13: [ RdLbaNoData(0xBB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4134 ] 
17:17:13: [ RdLbaNoData(0xBC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4135 ] 
17:17:14: [ RdLbaNoData(0xBD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4136 ] 
17:17:14: [ RdLbaNoData(0xBE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4137 ] 
17:17:14: [ RdLbaNoData(0xBF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4138 ] 
17:17:14: [ RdLbaNoData(0xC0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4139 ] 
17:17:14: [ RdLbaNoData(0xC1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4140 ] 
17:17:14: [ RdLbaNoData(0xC2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4141 ] 
17:17:14: [ RdLbaNoData(0xC3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4142 ] 
17:17:14: [ RdLbaNoData(0xC4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4143 ] 
17:17:14: [ RdLbaNoData(0xC5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4144 ] 
17:17:14: [ RdLbaNoData(0xC6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4145 ] 
17:17:14: [ RdLbaNoData(0xC7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4146 ] 
17:17:14: [ RdLbaNoData(0xC8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4147 ] 
17:17:14: [ RdLbaNoData(0xC9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4148 ] 
17:17:14: [ RdLbaNoData(0xCA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4149 ] 
17:17:14: [ RdLbaNoData(0xCB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4150 ] 
17:17:14: [ RdLbaNoData(0xCC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4151 ] 
17:17:14: [ RdLbaNoData(0xCD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4152 ] 
17:17:14: [ RdLbaNoData(0xCE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4153 ] 
17:17:14: [ RdLbaNoData(0xCF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4154 ] 
17:17:14: [ RdLbaNoData(0xD0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4155 ] 
17:17:14: [ RdLbaNoData(0xD1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4156 ] 
17:17:14: [ RdLbaNoData(0xD2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4157 ] 
17:17:14: [ RdLbaNoData(0xD3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4158 ] 
17:17:14: [ RdLbaNoData(0xD4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4159 ] 
17:17:14: [ RdLbaNoData(0xD5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4160 ] 
17:17:14: [ RdLbaNoData(0xD6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4161 ] 
17:17:14: [ RdLbaNoData(0xD7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4162 ] 
17:17:14: [ RdLbaNoData(0xD8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4163 ] 
17:17:14: [ RdLbaNoData(0xD9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4164 ] 
17:17:14: [ RdLbaNoData(0xDA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4165 ] 
17:17:14: [ RdLbaNoData(0xDB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4166 ] 
17:17:14: [ RdLbaNoData(0xDC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4167 ] 
17:17:14: [ RdLbaNoData(0xDD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4168 ] 
17:17:14: [ RdLbaNoData(0xDE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4169 ] 
17:17:14: [ RdLbaNoData(0xDF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4170 ] 
17:17:14: [ RdLbaNoData(0xE0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4171 ] 
17:17:14: [ RdLbaNoData(0xE1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4172 ] 
17:17:14: [ RdLbaNoData(0xE2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4173 ] 
17:17:14: [ RdLbaNoData(0xE3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4174 ] 
17:17:14: [ RdLbaNoData(0xE4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4175 ] 
17:17:14: [ RdLbaNoData(0xE5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4176 ] 
17:17:14: [ RdLbaNoData(0xE6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4177 ] 
17:17:14: [ RdLbaNoData(0xE7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4178 ] 
17:17:14: [ RdLbaNoData(0xE8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4179 ] 
17:17:14: [ RdLbaNoData(0xE9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4180 ] 
17:17:14: [ RdLbaNoData(0xEA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4181 ] 
17:17:14: [ RdLbaNoData(0xEB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4182 ] 
17:17:14: [ RdLbaNoData(0xEC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4183 ] 
17:17:14: [ RdLbaNoData(0xED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4184 ] 
17:17:14: [ RdLbaNoData(0xEE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4185 ] 
17:17:14: [ RdLbaNoData(0xEF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4186 ] 
17:17:14: [ RdLbaNoData(0xF0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4187 ] 
17:17:14: [ RdLbaNoData(0xF1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4188 ] 
17:17:14: [ RdLbaNoData(0xF2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4189 ] 
17:17:14: [ RdLbaNoData(0xF3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4190 ] 
17:17:14: [ RdLbaNoData(0xF4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4191 ] 
17:17:14: [ RdLbaNoData(0xF5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4192 ] 
17:17:14: [ RdLbaNoData(0xF6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4193 ] 
17:17:14: [ RdLbaNoData(0xF7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4194 ] 
17:17:15: [ RdLbaNoData(0xF8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4195 ] 
17:17:15: [ RdLbaNoData(0xF9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4196 ] 
17:17:15: [ RdLbaNoData(0xFA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4197 ] 
17:17:15: [ RdLbaNoData(0xFB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4198 ] 
17:17:15: [ RdLbaNoData(0xFC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4199 ] 
17:17:15: [ RdLbaNoData(0xFD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4200 ] 
17:17:15: [ RdLbaNoData(0xFE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4201 ] 
17:17:15: [ RdLbaNoData(0xFF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4202 ] 
17:17:15: [ RdLbaNoData(0x100, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4203 ] 
17:17:15: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x0 to EndLba:0x101 with Anyword Pattern 78 

17:17:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :SingleWrite from StartLba: 0x3B72300 to EndLba:0x3B72400 with Anyword Pattern 170
17:17:15: [ WrLbaNoData(0x3B72300, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 4204 ] 
17:17:15: [ GetCardStatus() , Command count = 4205 ] 
17:17:15: [DVTCommonLib]### WriteWithFPGAPattern[ERROR] :SingleWrite Failed from StartLba:0x3B72300 to EndLba:0x3B72400 with Anyword Pattern 170
17:17:15: [DVTCommonLib]### Exception_Details :Exception raised!!!, Error Number is 10 and Error Message is 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0xAL (10) executing command 'WrLbaNoData'
   Description : Attempt to write a write-protected sector
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(0x3B72300, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No

17:17:15: [CF409_Card_functional_4_3_6_1_PWP_TWP_managment]###[INFO] :Expected to fail with Write Protection Error 

17:17:15: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B72300 to EndLba:0x3B72400 with Anyword Pattern 78
17:17:15: [ RdLbaNoData(0x3B72300, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4206 ] 
17:17:15: [ RdLbaNoData(0x3B72301, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4207 ] 
17:17:15: [ RdLbaNoData(0x3B72302, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4208 ] 
17:17:15: [ RdLbaNoData(0x3B72303, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4209 ] 
17:17:15: [ RdLbaNoData(0x3B72304, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4210 ] 
17:17:15: [ RdLbaNoData(0x3B72305, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4211 ] 
17:17:15: [ RdLbaNoData(0x3B72306, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4212 ] 
17:17:15: [ RdLbaNoData(0x3B72307, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4213 ] 
17:17:15: [ RdLbaNoData(0x3B72308, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4214 ] 
17:17:15: [ RdLbaNoData(0x3B72309, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4215 ] 
17:17:15: [ RdLbaNoData(0x3B7230A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4216 ] 
17:17:15: [ RdLbaNoData(0x3B7230B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4217 ] 
17:17:15: [ RdLbaNoData(0x3B7230C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4218 ] 
17:17:15: [ RdLbaNoData(0x3B7230D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4219 ] 
17:17:15: [ RdLbaNoData(0x3B7230E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4220 ] 
17:17:15: [ RdLbaNoData(0x3B7230F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4221 ] 
17:17:15: [ RdLbaNoData(0x3B72310, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4222 ] 
17:17:15: [ RdLbaNoData(0x3B72311, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4223 ] 
17:17:15: [ RdLbaNoData(0x3B72312, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4224 ] 
17:17:15: [ RdLbaNoData(0x3B72313, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4225 ] 
17:17:15: [ RdLbaNoData(0x3B72314, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4226 ] 
17:17:15: [ RdLbaNoData(0x3B72315, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4227 ] 
17:17:15: [ RdLbaNoData(0x3B72316, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4228 ] 
17:17:15: [ RdLbaNoData(0x3B72317, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4229 ] 
17:17:15: [ RdLbaNoData(0x3B72318, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4230 ] 
17:17:15: [ RdLbaNoData(0x3B72319, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4231 ] 
17:17:15: [ RdLbaNoData(0x3B7231A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4232 ] 
17:17:15: [ RdLbaNoData(0x3B7231B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4233 ] 
17:17:15: [ RdLbaNoData(0x3B7231C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4234 ] 
17:17:15: [ RdLbaNoData(0x3B7231D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4235 ] 
17:17:15: [ RdLbaNoData(0x3B7231E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4236 ] 
17:17:15: [ RdLbaNoData(0x3B7231F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4237 ] 
17:17:16: [ RdLbaNoData(0x3B72320, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4238 ] 
17:17:16: [ RdLbaNoData(0x3B72321, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4239 ] 
17:17:16: [ RdLbaNoData(0x3B72322, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4240 ] 
17:17:16: [ RdLbaNoData(0x3B72323, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4241 ] 
17:17:16: [ RdLbaNoData(0x3B72324, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4242 ] 
17:17:16: [ RdLbaNoData(0x3B72325, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4243 ] 
17:17:16: [ RdLbaNoData(0x3B72326, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4244 ] 
17:17:16: [ RdLbaNoData(0x3B72327, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4245 ] 
17:17:16: [ RdLbaNoData(0x3B72328, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4246 ] 
17:17:16: [ RdLbaNoData(0x3B72329, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4247 ] 
17:17:16: [ RdLbaNoData(0x3B7232A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4248 ] 
17:17:16: [ RdLbaNoData(0x3B7232B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4249 ] 
17:17:16: [ RdLbaNoData(0x3B7232C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4250 ] 
17:17:16: [ RdLbaNoData(0x3B7232D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4251 ] 
17:17:16: [ RdLbaNoData(0x3B7232E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4252 ] 
17:17:16: [ RdLbaNoData(0x3B7232F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4253 ] 
17:17:16: [ RdLbaNoData(0x3B72330, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4254 ] 
17:17:16: [ RdLbaNoData(0x3B72331, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4255 ] 
17:17:16: [ RdLbaNoData(0x3B72332, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4256 ] 
17:17:16: [ RdLbaNoData(0x3B72333, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4257 ] 
17:17:16: [ RdLbaNoData(0x3B72334, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4258 ] 
17:17:16: [ RdLbaNoData(0x3B72335, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4259 ] 
17:17:16: [ RdLbaNoData(0x3B72336, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4260 ] 
17:17:16: [ RdLbaNoData(0x3B72337, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4261 ] 
17:17:16: [ RdLbaNoData(0x3B72338, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4262 ] 
17:17:16: [ RdLbaNoData(0x3B72339, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4263 ] 
17:17:16: [ RdLbaNoData(0x3B7233A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4264 ] 
17:17:16: [ RdLbaNoData(0x3B7233B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4265 ] 
17:17:16: [ RdLbaNoData(0x3B7233C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4266 ] 
17:17:16: [ RdLbaNoData(0x3B7233D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4267 ] 
17:17:16: [ RdLbaNoData(0x3B7233E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4268 ] 
17:17:16: [ RdLbaNoData(0x3B7233F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4269 ] 
17:17:16: [ RdLbaNoData(0x3B72340, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4270 ] 
17:17:16: [ RdLbaNoData(0x3B72341, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4271 ] 
17:17:16: [ RdLbaNoData(0x3B72342, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4272 ] 
17:17:16: [ RdLbaNoData(0x3B72343, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4273 ] 
17:17:16: [ RdLbaNoData(0x3B72344, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4274 ] 
17:17:16: [ RdLbaNoData(0x3B72345, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4275 ] 
17:17:16: [ RdLbaNoData(0x3B72346, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4276 ] 
17:17:16: [ RdLbaNoData(0x3B72347, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4277 ] 
17:17:16: [ RdLbaNoData(0x3B72348, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4278 ] 
17:17:16: [ RdLbaNoData(0x3B72349, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4279 ] 
17:17:16: [ RdLbaNoData(0x3B7234A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4280 ] 
17:17:16: [ RdLbaNoData(0x3B7234B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4281 ] 
17:17:16: [ RdLbaNoData(0x3B7234C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4282 ] 
17:17:16: [ RdLbaNoData(0x3B7234D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4283 ] 
17:17:16: [ RdLbaNoData(0x3B7234E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4284 ] 
17:17:16: [ RdLbaNoData(0x3B7234F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4285 ] 
17:17:16: [ RdLbaNoData(0x3B72350, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4286 ] 
17:17:16: [ RdLbaNoData(0x3B72351, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4287 ] 
17:17:16: [ RdLbaNoData(0x3B72352, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4288 ] 
17:17:16: [ RdLbaNoData(0x3B72353, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4289 ] 
17:17:16: [ RdLbaNoData(0x3B72354, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4290 ] 
17:17:16: [ RdLbaNoData(0x3B72355, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4291 ] 
17:17:16: [ RdLbaNoData(0x3B72356, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4292 ] 
17:17:16: [ RdLbaNoData(0x3B72357, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4293 ] 
17:17:17: [ RdLbaNoData(0x3B72358, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4294 ] 
17:17:17: [ RdLbaNoData(0x3B72359, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4295 ] 
17:17:17: [ RdLbaNoData(0x3B7235A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4296 ] 
17:17:17: [ RdLbaNoData(0x3B7235B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4297 ] 
17:17:17: [ RdLbaNoData(0x3B7235C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4298 ] 
17:17:17: [ RdLbaNoData(0x3B7235D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4299 ] 
17:17:17: [ RdLbaNoData(0x3B7235E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4300 ] 
17:17:17: [ RdLbaNoData(0x3B7235F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4301 ] 
17:17:17: [ RdLbaNoData(0x3B72360, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4302 ] 
17:17:17: [ RdLbaNoData(0x3B72361, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4303 ] 
17:17:17: [ RdLbaNoData(0x3B72362, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4304 ] 
17:17:17: [ RdLbaNoData(0x3B72363, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4305 ] 
17:17:17: [ RdLbaNoData(0x3B72364, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4306 ] 
17:17:17: [ RdLbaNoData(0x3B72365, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4307 ] 
17:17:17: [ RdLbaNoData(0x3B72366, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4308 ] 
17:17:17: [ RdLbaNoData(0x3B72367, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4309 ] 
17:17:17: [ RdLbaNoData(0x3B72368, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4310 ] 
17:17:17: [ RdLbaNoData(0x3B72369, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4311 ] 
17:17:17: [ RdLbaNoData(0x3B7236A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4312 ] 
17:17:17: [ RdLbaNoData(0x3B7236B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4313 ] 
17:17:17: [ RdLbaNoData(0x3B7236C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4314 ] 
17:17:17: [ RdLbaNoData(0x3B7236D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4315 ] 
17:17:17: [ RdLbaNoData(0x3B7236E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4316 ] 
17:17:17: [ RdLbaNoData(0x3B7236F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4317 ] 
17:17:17: [ RdLbaNoData(0x3B72370, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4318 ] 
17:17:17: [ RdLbaNoData(0x3B72371, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4319 ] 
17:17:17: [ RdLbaNoData(0x3B72372, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4320 ] 
17:17:17: [ RdLbaNoData(0x3B72373, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4321 ] 
17:17:17: [ RdLbaNoData(0x3B72374, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4322 ] 
17:17:17: [ RdLbaNoData(0x3B72375, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4323 ] 
17:17:17: [ RdLbaNoData(0x3B72376, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4324 ] 
17:17:17: [ RdLbaNoData(0x3B72377, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4325 ] 
17:17:17: [ RdLbaNoData(0x3B72378, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4326 ] 
17:17:17: [ RdLbaNoData(0x3B72379, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4327 ] 
17:17:17: [ RdLbaNoData(0x3B7237A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4328 ] 
17:17:17: [ RdLbaNoData(0x3B7237B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4329 ] 
17:17:17: [ RdLbaNoData(0x3B7237C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4330 ] 
17:17:17: [ RdLbaNoData(0x3B7237D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4331 ] 
17:17:17: [ RdLbaNoData(0x3B7237E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4332 ] 
17:17:17: [ RdLbaNoData(0x3B7237F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4333 ] 
17:17:17: [ RdLbaNoData(0x3B72380, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4334 ] 
17:17:17: [ RdLbaNoData(0x3B72381, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4335 ] 
17:17:17: [ RdLbaNoData(0x3B72382, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4336 ] 
17:17:17: [ RdLbaNoData(0x3B72383, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4337 ] 
17:17:17: [ RdLbaNoData(0x3B72384, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4338 ] 
17:17:17: [ RdLbaNoData(0x3B72385, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4339 ] 
17:17:17: [ RdLbaNoData(0x3B72386, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4340 ] 
17:17:17: [ RdLbaNoData(0x3B72387, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4341 ] 
17:17:17: [ RdLbaNoData(0x3B72388, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4342 ] 
17:17:17: [ RdLbaNoData(0x3B72389, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4343 ] 
17:17:17: [ RdLbaNoData(0x3B7238A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4344 ] 
17:17:17: [ RdLbaNoData(0x3B7238B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4345 ] 
17:17:17: [ RdLbaNoData(0x3B7238C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4346 ] 
17:17:17: [ RdLbaNoData(0x3B7238D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4347 ] 
17:17:17: [ RdLbaNoData(0x3B7238E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4348 ] 
17:17:18: [ RdLbaNoData(0x3B7238F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4349 ] 
17:17:18: [ RdLbaNoData(0x3B72390, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4350 ] 
17:17:18: [ RdLbaNoData(0x3B72391, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4351 ] 
17:17:18: [ RdLbaNoData(0x3B72392, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4352 ] 
17:17:18: [ RdLbaNoData(0x3B72393, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4353 ] 
17:17:18: [ RdLbaNoData(0x3B72394, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4354 ] 
17:17:18: [ RdLbaNoData(0x3B72395, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4355 ] 
17:17:18: [ RdLbaNoData(0x3B72396, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4356 ] 
17:17:18: [ RdLbaNoData(0x3B72397, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4357 ] 
17:17:18: [ RdLbaNoData(0x3B72398, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4358 ] 
17:17:18: [ RdLbaNoData(0x3B72399, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4359 ] 
17:17:18: [ RdLbaNoData(0x3B7239A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4360 ] 
17:17:18: [ RdLbaNoData(0x3B7239B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4361 ] 
17:17:18: [ RdLbaNoData(0x3B7239C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4362 ] 
17:17:18: [ RdLbaNoData(0x3B7239D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4363 ] 
17:17:18: [ RdLbaNoData(0x3B7239E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4364 ] 
17:17:18: [ RdLbaNoData(0x3B7239F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4365 ] 
17:17:18: [ RdLbaNoData(0x3B723A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4366 ] 
17:17:18: [ RdLbaNoData(0x3B723A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4367 ] 
17:17:18: [ RdLbaNoData(0x3B723A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4368 ] 
17:17:18: [ RdLbaNoData(0x3B723A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4369 ] 
17:17:18: [ RdLbaNoData(0x3B723A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4370 ] 
17:17:18: [ RdLbaNoData(0x3B723A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4371 ] 
17:17:18: [ RdLbaNoData(0x3B723A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4372 ] 
17:17:18: [ RdLbaNoData(0x3B723A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4373 ] 
17:17:18: [ RdLbaNoData(0x3B723A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4374 ] 
17:17:18: [ RdLbaNoData(0x3B723A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4375 ] 
17:17:18: [ RdLbaNoData(0x3B723AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4376 ] 
17:17:18: [ RdLbaNoData(0x3B723AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4377 ] 
17:17:18: [ RdLbaNoData(0x3B723AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4378 ] 
17:17:18: [ RdLbaNoData(0x3B723AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4379 ] 
17:17:18: [ RdLbaNoData(0x3B723AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4380 ] 
17:17:18: [ RdLbaNoData(0x3B723AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4381 ] 
17:17:18: [ RdLbaNoData(0x3B723B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4382 ] 
17:17:18: [ RdLbaNoData(0x3B723B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4383 ] 
17:17:18: [ RdLbaNoData(0x3B723B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4384 ] 
17:17:18: [ RdLbaNoData(0x3B723B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4385 ] 
17:17:18: [ RdLbaNoData(0x3B723B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4386 ] 
17:17:18: [ RdLbaNoData(0x3B723B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4387 ] 
17:17:18: [ RdLbaNoData(0x3B723B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4388 ] 
17:17:18: [ RdLbaNoData(0x3B723B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4389 ] 
17:17:18: [ RdLbaNoData(0x3B723B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4390 ] 
17:17:18: [ RdLbaNoData(0x3B723B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4391 ] 
17:17:18: [ RdLbaNoData(0x3B723BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4392 ] 
17:17:18: [ RdLbaNoData(0x3B723BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4393 ] 
17:17:18: [ RdLbaNoData(0x3B723BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4394 ] 
17:17:18: [ RdLbaNoData(0x3B723BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4395 ] 
17:17:18: [ RdLbaNoData(0x3B723BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4396 ] 
17:17:18: [ RdLbaNoData(0x3B723BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4397 ] 
17:17:18: [ RdLbaNoData(0x3B723C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4398 ] 
17:17:18: [ RdLbaNoData(0x3B723C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4399 ] 
17:17:18: [ RdLbaNoData(0x3B723C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4400 ] 
17:17:18: [ RdLbaNoData(0x3B723C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4401 ] 
17:17:18: [ RdLbaNoData(0x3B723C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4402 ] 
17:17:18: [ RdLbaNoData(0x3B723C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4403 ] 
17:17:18: [ RdLbaNoData(0x3B723C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4404 ] 
17:17:18: [ RdLbaNoData(0x3B723C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4405 ] 
17:17:18: [ RdLbaNoData(0x3B723C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4406 ] 
17:17:19: [ RdLbaNoData(0x3B723C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4407 ] 
17:17:19: [ RdLbaNoData(0x3B723CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4408 ] 
17:17:19: [ RdLbaNoData(0x3B723CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4409 ] 
17:17:19: [ RdLbaNoData(0x3B723CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4410 ] 
17:17:19: [ RdLbaNoData(0x3B723CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4411 ] 
17:17:19: [ RdLbaNoData(0x3B723CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4412 ] 
17:17:19: [ RdLbaNoData(0x3B723CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4413 ] 
17:17:19: [ RdLbaNoData(0x3B723D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4414 ] 
17:17:19: [ RdLbaNoData(0x3B723D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4415 ] 
17:17:19: [ RdLbaNoData(0x3B723D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4416 ] 
17:17:19: [ RdLbaNoData(0x3B723D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4417 ] 
17:17:19: [ RdLbaNoData(0x3B723D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4418 ] 
17:17:19: [ RdLbaNoData(0x3B723D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4419 ] 
17:17:19: [ RdLbaNoData(0x3B723D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4420 ] 
17:17:19: [ RdLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4421 ] 
17:17:19: [ RdLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4422 ] 
17:17:19: [ RdLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4423 ] 
17:17:19: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4424 ] 
17:17:19: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4425 ] 
17:17:19: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4426 ] 
17:17:19: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4427 ] 
17:17:19: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4428 ] 
17:17:19: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4429 ] 
17:17:19: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4430 ] 
17:17:19: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4431 ] 
17:17:19: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4432 ] 
17:17:19: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4433 ] 
17:17:19: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4434 ] 
17:17:19: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4435 ] 
17:17:19: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4436 ] 
17:17:19: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4437 ] 
17:17:19: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4438 ] 
17:17:19: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4439 ] 
17:17:19: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4440 ] 
17:17:19: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4441 ] 
17:17:19: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4442 ] 
17:17:19: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4443 ] 
17:17:19: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4444 ] 
17:17:19: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4445 ] 
17:17:19: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4446 ] 
17:17:19: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4447 ] 
17:17:19: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4448 ] 
17:17:19: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4449 ] 
17:17:19: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4450 ] 
17:17:19: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4451 ] 
17:17:19: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4452 ] 
17:17:19: [ RdLbaNoData(0x3B723F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4453 ] 
17:17:19: [ RdLbaNoData(0x3B723F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4454 ] 
17:17:19: [ RdLbaNoData(0x3B723F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4455 ] 
17:17:19: [ RdLbaNoData(0x3B723FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4456 ] 
17:17:19: [ RdLbaNoData(0x3B723FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4457 ] 
17:17:19: [ RdLbaNoData(0x3B723FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4458 ] 
17:17:19: [ RdLbaNoData(0x3B723FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4459 ] 
17:17:19: [ RdLbaNoData(0x3B723FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4460 ] 
17:17:19: [ RdLbaNoData(0x3B723FF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4461 ] 
17:17:19: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B72300 to EndLba:0x3B72400 with Anyword Pattern 78 

17:17:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x101 with Anyword Pattern 170
17:17:19: [ WrLbaNoData(0x0, 0x101, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 4462 ] 
17:17:19: [ GetCardStatus() , Command count = 4463 ] 
17:17:19: [DVTCommonLib]### WriteWithFPGAPattern[ERROR] :MultipleWrite Failed from StartLba:0x0 to EndLba:0x101 with Anyword Pattern 170
17:17:19: [DVTCommonLib]### Exception_Details :Exception raised!!!, Error Number is 10 and Error Message is 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0xAL (10) executing command 'WrLbaNoData'
   Description : Attempt to write a write-protected sector
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(0x0, 0x101, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No

17:17:19: [CF409_Card_functional_4_3_6_1_PWP_TWP_managment]###[INFO] :Expected to fail with Write Protection Error 

17:17:20: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x101 with Anyword Pattern 78
17:17:20: [ RdLbaNoData(0x0, 0x101, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4464 ] 
17:17:20: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x101 with Anyword Pattern 78 

17:17:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B72300 to EndLba:0x3B723FC with Anyword Pattern 170
17:17:20: [ WrLbaNoData(0x3B72300, 0xFC, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0) , Command count = 4465 ] 
17:17:20: [ GetCardStatus() , Command count = 4466 ] 
17:17:20: [DVTCommonLib]### WriteWithFPGAPattern[ERROR] :MultipleWrite Failed from StartLba:0x3B72300 to EndLba:0x3B723FC with Anyword Pattern 170
17:17:20: [DVTCommonLib]### Exception_Details :Exception raised!!!, Error Number is 10 and Error Message is 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0xAL (10) executing command 'WrLbaNoData'
   Description : Attempt to write a write-protected sector
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(0x3B72300, 0xFC, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No

17:17:20: [CF409_Card_functional_4_3_6_1_PWP_TWP_managment]###[INFO] :Expected to fail with Write Protection Error 

17:17:20: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x3B72300 to EndLba:0x3B723F7 with Anyword Pattern 78
17:17:20: [ RdLbaNoData(0x3B72300, 0xF7, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4467 ] 
17:17:20: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x3B72300 to EndLba:0x3B723F7 with Anyword Pattern 78 

17:17:20: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x3B72300 to EndLba:0x3B723F7 with Anyword Pattern 78
17:17:20: [ RdLbaNoData(0x3B72300, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4468 ] 
17:17:20: [ RdLbaNoData(0x3B72301, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4469 ] 
17:17:20: [ RdLbaNoData(0x3B72302, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4470 ] 
17:17:20: [ RdLbaNoData(0x3B72303, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4471 ] 
17:17:20: [ RdLbaNoData(0x3B72304, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4472 ] 
17:17:20: [ RdLbaNoData(0x3B72305, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4473 ] 
17:17:20: [ RdLbaNoData(0x3B72306, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4474 ] 
17:17:20: [ RdLbaNoData(0x3B72307, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4475 ] 
17:17:20: [ RdLbaNoData(0x3B72308, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4476 ] 
17:17:20: [ RdLbaNoData(0x3B72309, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4477 ] 
17:17:20: [ RdLbaNoData(0x3B7230A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4478 ] 
17:17:20: [ RdLbaNoData(0x3B7230B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4479 ] 
17:17:20: [ RdLbaNoData(0x3B7230C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4480 ] 
17:17:20: [ RdLbaNoData(0x3B7230D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4481 ] 
17:17:20: [ RdLbaNoData(0x3B7230E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4482 ] 
17:17:20: [ RdLbaNoData(0x3B7230F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4483 ] 
17:17:20: [ RdLbaNoData(0x3B72310, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4484 ] 
17:17:20: [ RdLbaNoData(0x3B72311, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4485 ] 
17:17:20: [ RdLbaNoData(0x3B72312, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4486 ] 
17:17:20: [ RdLbaNoData(0x3B72313, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4487 ] 
17:17:20: [ RdLbaNoData(0x3B72314, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4488 ] 
17:17:20: [ RdLbaNoData(0x3B72315, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4489 ] 
17:17:20: [ RdLbaNoData(0x3B72316, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4490 ] 
17:17:20: [ RdLbaNoData(0x3B72317, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4491 ] 
17:17:20: [ RdLbaNoData(0x3B72318, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4492 ] 
17:17:20: [ RdLbaNoData(0x3B72319, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4493 ] 
17:17:21: [ RdLbaNoData(0x3B7231A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4494 ] 
17:17:21: [ RdLbaNoData(0x3B7231B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4495 ] 
17:17:21: [ RdLbaNoData(0x3B7231C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4496 ] 
17:17:21: [ RdLbaNoData(0x3B7231D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4497 ] 
17:17:21: [ RdLbaNoData(0x3B7231E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4498 ] 
17:17:21: [ RdLbaNoData(0x3B7231F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4499 ] 
17:17:21: [ RdLbaNoData(0x3B72320, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4500 ] 
17:17:21: [ RdLbaNoData(0x3B72321, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4501 ] 
17:17:21: [ RdLbaNoData(0x3B72322, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4502 ] 
17:17:21: [ RdLbaNoData(0x3B72323, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4503 ] 
17:17:21: [ RdLbaNoData(0x3B72324, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4504 ] 
17:17:21: [ RdLbaNoData(0x3B72325, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4505 ] 
17:17:21: [ RdLbaNoData(0x3B72326, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4506 ] 
17:17:21: [ RdLbaNoData(0x3B72327, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4507 ] 
17:17:21: [ RdLbaNoData(0x3B72328, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4508 ] 
17:17:21: [ RdLbaNoData(0x3B72329, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4509 ] 
17:17:21: [ RdLbaNoData(0x3B7232A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4510 ] 
17:17:21: [ RdLbaNoData(0x3B7232B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4511 ] 
17:17:21: [ RdLbaNoData(0x3B7232C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4512 ] 
17:17:21: [ RdLbaNoData(0x3B7232D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4513 ] 
17:17:21: [ RdLbaNoData(0x3B7232E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4514 ] 
17:17:21: [ RdLbaNoData(0x3B7232F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4515 ] 
17:17:21: [ RdLbaNoData(0x3B72330, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4516 ] 
17:17:21: [ RdLbaNoData(0x3B72331, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4517 ] 
17:17:21: [ RdLbaNoData(0x3B72332, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4518 ] 
17:17:21: [ RdLbaNoData(0x3B72333, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4519 ] 
17:17:21: [ RdLbaNoData(0x3B72334, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4520 ] 
17:17:21: [ RdLbaNoData(0x3B72335, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4521 ] 
17:17:21: [ RdLbaNoData(0x3B72336, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4522 ] 
17:17:21: [ RdLbaNoData(0x3B72337, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4523 ] 
17:17:21: [ RdLbaNoData(0x3B72338, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4524 ] 
17:17:21: [ RdLbaNoData(0x3B72339, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4525 ] 
17:17:21: [ RdLbaNoData(0x3B7233A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4526 ] 
17:17:21: [ RdLbaNoData(0x3B7233B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4527 ] 
17:17:21: [ RdLbaNoData(0x3B7233C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4528 ] 
17:17:21: [ RdLbaNoData(0x3B7233D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4529 ] 
17:17:21: [ RdLbaNoData(0x3B7233E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4530 ] 
17:17:21: [ RdLbaNoData(0x3B7233F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4531 ] 
17:17:21: [ RdLbaNoData(0x3B72340, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4532 ] 
17:17:21: [ RdLbaNoData(0x3B72341, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4533 ] 
17:17:21: [ RdLbaNoData(0x3B72342, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4534 ] 
17:17:21: [ RdLbaNoData(0x3B72343, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4535 ] 
17:17:21: [ RdLbaNoData(0x3B72344, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4536 ] 
17:17:21: [ RdLbaNoData(0x3B72345, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4537 ] 
17:17:21: [ RdLbaNoData(0x3B72346, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4538 ] 
17:17:21: [ RdLbaNoData(0x3B72347, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4539 ] 
17:17:21: [ RdLbaNoData(0x3B72348, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4540 ] 
17:17:21: [ RdLbaNoData(0x3B72349, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4541 ] 
17:17:21: [ RdLbaNoData(0x3B7234A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4542 ] 
17:17:21: [ RdLbaNoData(0x3B7234B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4543 ] 
17:17:21: [ RdLbaNoData(0x3B7234C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4544 ] 
17:17:21: [ RdLbaNoData(0x3B7234D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4545 ] 
17:17:21: [ RdLbaNoData(0x3B7234E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4546 ] 
17:17:21: [ RdLbaNoData(0x3B7234F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4547 ] 
17:17:21: [ RdLbaNoData(0x3B72350, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4548 ] 
17:17:21: [ RdLbaNoData(0x3B72351, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4549 ] 
17:17:21: [ RdLbaNoData(0x3B72352, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4550 ] 
17:17:21: [ RdLbaNoData(0x3B72353, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4551 ] 
17:17:21: [ RdLbaNoData(0x3B72354, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4552 ] 
17:17:21: [ RdLbaNoData(0x3B72355, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4553 ] 
17:17:21: [ RdLbaNoData(0x3B72356, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4554 ] 
17:17:22: [ RdLbaNoData(0x3B72357, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4555 ] 
17:17:22: [ RdLbaNoData(0x3B72358, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4556 ] 
17:17:22: [ RdLbaNoData(0x3B72359, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4557 ] 
17:17:22: [ RdLbaNoData(0x3B7235A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4558 ] 
17:17:22: [ RdLbaNoData(0x3B7235B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4559 ] 
17:17:22: [ RdLbaNoData(0x3B7235C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4560 ] 
17:17:22: [ RdLbaNoData(0x3B7235D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4561 ] 
17:17:22: [ RdLbaNoData(0x3B7235E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4562 ] 
17:17:22: [ RdLbaNoData(0x3B7235F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4563 ] 
17:17:22: [ RdLbaNoData(0x3B72360, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4564 ] 
17:17:22: [ RdLbaNoData(0x3B72361, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4565 ] 
17:17:22: [ RdLbaNoData(0x3B72362, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4566 ] 
17:17:22: [ RdLbaNoData(0x3B72363, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4567 ] 
17:17:22: [ RdLbaNoData(0x3B72364, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4568 ] 
17:17:22: [ RdLbaNoData(0x3B72365, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4569 ] 
17:17:22: [ RdLbaNoData(0x3B72366, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4570 ] 
17:17:22: [ RdLbaNoData(0x3B72367, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4571 ] 
17:17:22: [ RdLbaNoData(0x3B72368, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4572 ] 
17:17:22: [ RdLbaNoData(0x3B72369, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4573 ] 
17:17:22: [ RdLbaNoData(0x3B7236A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4574 ] 
17:17:22: [ RdLbaNoData(0x3B7236B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4575 ] 
17:17:22: [ RdLbaNoData(0x3B7236C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4576 ] 
17:17:22: [ RdLbaNoData(0x3B7236D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4577 ] 
17:17:22: [ RdLbaNoData(0x3B7236E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4578 ] 
17:17:22: [ RdLbaNoData(0x3B7236F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4579 ] 
17:17:22: [ RdLbaNoData(0x3B72370, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4580 ] 
17:17:22: [ RdLbaNoData(0x3B72371, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4581 ] 
17:17:22: [ RdLbaNoData(0x3B72372, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4582 ] 
17:17:22: [ RdLbaNoData(0x3B72373, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4583 ] 
17:17:22: [ RdLbaNoData(0x3B72374, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4584 ] 
17:17:22: [ RdLbaNoData(0x3B72375, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4585 ] 
17:17:22: [ RdLbaNoData(0x3B72376, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4586 ] 
17:17:22: [ RdLbaNoData(0x3B72377, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4587 ] 
17:17:22: [ RdLbaNoData(0x3B72378, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4588 ] 
17:17:22: [ RdLbaNoData(0x3B72379, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4589 ] 
17:17:22: [ RdLbaNoData(0x3B7237A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4590 ] 
17:17:22: [ RdLbaNoData(0x3B7237B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4591 ] 
17:17:22: [ RdLbaNoData(0x3B7237C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4592 ] 
17:17:22: [ RdLbaNoData(0x3B7237D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4593 ] 
17:17:22: [ RdLbaNoData(0x3B7237E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4594 ] 
17:17:22: [ RdLbaNoData(0x3B7237F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4595 ] 
17:17:22: [ RdLbaNoData(0x3B72380, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4596 ] 
17:17:22: [ RdLbaNoData(0x3B72381, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4597 ] 
17:17:22: [ RdLbaNoData(0x3B72382, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4598 ] 
17:17:22: [ RdLbaNoData(0x3B72383, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4599 ] 
17:17:22: [ RdLbaNoData(0x3B72384, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4600 ] 
17:17:22: [ RdLbaNoData(0x3B72385, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4601 ] 
17:17:22: [ RdLbaNoData(0x3B72386, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4602 ] 
17:17:22: [ RdLbaNoData(0x3B72387, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4603 ] 
17:17:22: [ RdLbaNoData(0x3B72388, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4604 ] 
17:17:22: [ RdLbaNoData(0x3B72389, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4605 ] 
17:17:22: [ RdLbaNoData(0x3B7238A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4606 ] 
17:17:22: [ RdLbaNoData(0x3B7238B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4607 ] 
17:17:22: [ RdLbaNoData(0x3B7238C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4608 ] 
17:17:23: [ RdLbaNoData(0x3B7238D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4609 ] 
17:17:23: [ RdLbaNoData(0x3B7238E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4610 ] 
17:17:23: [ RdLbaNoData(0x3B7238F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4611 ] 
17:17:23: [ RdLbaNoData(0x3B72390, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4612 ] 
17:17:23: [ RdLbaNoData(0x3B72391, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4613 ] 
17:17:23: [ RdLbaNoData(0x3B72392, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4614 ] 
17:17:23: [ RdLbaNoData(0x3B72393, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4615 ] 
17:17:23: [ RdLbaNoData(0x3B72394, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4616 ] 
17:17:23: [ RdLbaNoData(0x3B72395, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4617 ] 
17:17:23: [ RdLbaNoData(0x3B72396, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4618 ] 
17:17:23: [ RdLbaNoData(0x3B72397, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4619 ] 
17:17:23: [ RdLbaNoData(0x3B72398, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4620 ] 
17:17:23: [ RdLbaNoData(0x3B72399, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4621 ] 
17:17:23: [ RdLbaNoData(0x3B7239A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4622 ] 
17:17:23: [ RdLbaNoData(0x3B7239B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4623 ] 
17:17:23: [ RdLbaNoData(0x3B7239C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4624 ] 
17:17:23: [ RdLbaNoData(0x3B7239D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4625 ] 
17:17:23: [ RdLbaNoData(0x3B7239E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4626 ] 
17:17:23: [ RdLbaNoData(0x3B7239F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4627 ] 
17:17:23: [ RdLbaNoData(0x3B723A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4628 ] 
17:17:23: [ RdLbaNoData(0x3B723A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4629 ] 
17:17:23: [ RdLbaNoData(0x3B723A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4630 ] 
17:17:23: [ RdLbaNoData(0x3B723A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4631 ] 
17:17:23: [ RdLbaNoData(0x3B723A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4632 ] 
17:17:23: [ RdLbaNoData(0x3B723A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4633 ] 
17:17:23: [ RdLbaNoData(0x3B723A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4634 ] 
17:17:23: [ RdLbaNoData(0x3B723A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4635 ] 
17:17:23: [ RdLbaNoData(0x3B723A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4636 ] 
17:17:23: [ RdLbaNoData(0x3B723A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4637 ] 
17:17:23: [ RdLbaNoData(0x3B723AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4638 ] 
17:17:23: [ RdLbaNoData(0x3B723AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4639 ] 
17:17:23: [ RdLbaNoData(0x3B723AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4640 ] 
17:17:23: [ RdLbaNoData(0x3B723AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4641 ] 
17:17:23: [ RdLbaNoData(0x3B723AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4642 ] 
17:17:23: [ RdLbaNoData(0x3B723AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4643 ] 
17:17:23: [ RdLbaNoData(0x3B723B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4644 ] 
17:17:23: [ RdLbaNoData(0x3B723B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4645 ] 
17:17:23: [ RdLbaNoData(0x3B723B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4646 ] 
17:17:23: [ RdLbaNoData(0x3B723B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4647 ] 
17:17:23: [ RdLbaNoData(0x3B723B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4648 ] 
17:17:23: [ RdLbaNoData(0x3B723B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4649 ] 
17:17:23: [ RdLbaNoData(0x3B723B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4650 ] 
17:17:23: [ RdLbaNoData(0x3B723B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4651 ] 
17:17:23: [ RdLbaNoData(0x3B723B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4652 ] 
17:17:23: [ RdLbaNoData(0x3B723B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4653 ] 
17:17:23: [ RdLbaNoData(0x3B723BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4654 ] 
17:17:23: [ RdLbaNoData(0x3B723BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4655 ] 
17:17:23: [ RdLbaNoData(0x3B723BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4656 ] 
17:17:23: [ RdLbaNoData(0x3B723BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4657 ] 
17:17:23: [ RdLbaNoData(0x3B723BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4658 ] 
17:17:23: [ RdLbaNoData(0x3B723BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4659 ] 
17:17:23: [ RdLbaNoData(0x3B723C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4660 ] 
17:17:23: [ RdLbaNoData(0x3B723C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4661 ] 
17:17:23: [ RdLbaNoData(0x3B723C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4662 ] 
17:17:23: [ RdLbaNoData(0x3B723C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4663 ] 
17:17:23: [ RdLbaNoData(0x3B723C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4664 ] 
17:17:23: [ RdLbaNoData(0x3B723C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4665 ] 
17:17:24: [ RdLbaNoData(0x3B723C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4666 ] 
17:17:24: [ RdLbaNoData(0x3B723C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4667 ] 
17:17:24: [ RdLbaNoData(0x3B723C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4668 ] 
17:17:24: [ RdLbaNoData(0x3B723C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4669 ] 
17:17:24: [ RdLbaNoData(0x3B723CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4670 ] 
17:17:24: [ RdLbaNoData(0x3B723CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4671 ] 
17:17:24: [ RdLbaNoData(0x3B723CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4672 ] 
17:17:24: [ RdLbaNoData(0x3B723CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4673 ] 
17:17:24: [ RdLbaNoData(0x3B723CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4674 ] 
17:17:24: [ RdLbaNoData(0x3B723CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4675 ] 
17:17:24: [ RdLbaNoData(0x3B723D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4676 ] 
17:17:24: [ RdLbaNoData(0x3B723D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4677 ] 
17:17:24: [ RdLbaNoData(0x3B723D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4678 ] 
17:17:24: [ RdLbaNoData(0x3B723D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4679 ] 
17:17:24: [ RdLbaNoData(0x3B723D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4680 ] 
17:17:24: [ RdLbaNoData(0x3B723D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4681 ] 
17:17:24: [ RdLbaNoData(0x3B723D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4682 ] 
17:17:24: [ RdLbaNoData(0x3B723D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4683 ] 
17:17:24: [ RdLbaNoData(0x3B723D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4684 ] 
17:17:24: [ RdLbaNoData(0x3B723D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4685 ] 
17:17:24: [ RdLbaNoData(0x3B723DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4686 ] 
17:17:24: [ RdLbaNoData(0x3B723DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4687 ] 
17:17:24: [ RdLbaNoData(0x3B723DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4688 ] 
17:17:24: [ RdLbaNoData(0x3B723DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4689 ] 
17:17:24: [ RdLbaNoData(0x3B723DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4690 ] 
17:17:24: [ RdLbaNoData(0x3B723DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4691 ] 
17:17:24: [ RdLbaNoData(0x3B723E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4692 ] 
17:17:24: [ RdLbaNoData(0x3B723E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4693 ] 
17:17:24: [ RdLbaNoData(0x3B723E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4694 ] 
17:17:24: [ RdLbaNoData(0x3B723E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4695 ] 
17:17:24: [ RdLbaNoData(0x3B723E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4696 ] 
17:17:24: [ RdLbaNoData(0x3B723E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4697 ] 
17:17:24: [ RdLbaNoData(0x3B723E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4698 ] 
17:17:24: [ RdLbaNoData(0x3B723E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4699 ] 
17:17:24: [ RdLbaNoData(0x3B723E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4700 ] 
17:17:24: [ RdLbaNoData(0x3B723E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4701 ] 
17:17:24: [ RdLbaNoData(0x3B723EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4702 ] 
17:17:24: [ RdLbaNoData(0x3B723EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4703 ] 
17:17:24: [ RdLbaNoData(0x3B723EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4704 ] 
17:17:24: [ RdLbaNoData(0x3B723ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4705 ] 
17:17:24: [ RdLbaNoData(0x3B723EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4706 ] 
17:17:24: [ RdLbaNoData(0x3B723EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4707 ] 
17:17:24: [ RdLbaNoData(0x3B723F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4708 ] 
17:17:24: [ RdLbaNoData(0x3B723F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4709 ] 
17:17:24: [ RdLbaNoData(0x3B723F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4710 ] 
17:17:24: [ RdLbaNoData(0x3B723F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4711 ] 
17:17:24: [ RdLbaNoData(0x3B723F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4712 ] 
17:17:24: [ RdLbaNoData(0x3B723F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4713 ] 
17:17:24: [ RdLbaNoData(0x3B723F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WORD, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4714 ] 
17:17:24: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done SingleRead from StartLba: 0x3B72300 to EndLba:0x3B723F7 with Anyword Pattern 78 

17:17:24: [CF409_Card_functional_4_3_6_1_PWP_TWP_managment]###[INFO] Erase Started 

17:17:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDF00>, <py_sfcl.CommandDataDefinition object at 0x054154B0>) , Command count = 4715 ] 
17:17:24: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
17:17:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F59F0>, <py_sfcl.CommandDataDefinition object at 0x061FF840>) , Command count = 4716 ] 
17:17:24: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
17:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5960>, <py_sfcl.CommandDataDefinition object at 0x061FF420>) , Command count = 4717 ] 
17:17:35: [ GetCardStatus() , Command count = 4718 ] 
17:17:35: CMD38[ ERASE_COMMAND ] Erasing the Card......
17:17:35: CMD38[ ERASE_COMMAND ] Card is Busy programming,Continuing to Test..
17:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DBD80>, <py_sfcl.CommandDataDefinition object at 0x0540D1B0>) , Command count = 4719 ] 
17:17:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:35: Failed Running script <module 'CF409_Card_functional_4_3_6_1_PWP_TWP_managment' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_4_Card_Functional\CF409_Card_functional_4_3_6_1_PWP_TWP_managment.py'> with error 
TestFailedError:                                   
   [CF409_Card_functional_4_3_6_1_PWP_TWP_managment]###[ERROR] :On Erase Operation Write Protection Error didn't occur
 
17:17:35: ########################################
17:17:35: ########################################
17:17:35: Stated Running script CH4362_GWP_management 
17:17:35: ########################################
17:17:35: ###### GWP Management Test. 
17:17:35: [CH4361_4_3_6_2_GWP_managment]### globalCardCapacity is HC. Script is not compatiable with HC cards.
17:17:35: ########################################
17:17:35: Finished Running script CH4362_GWP_management 
17:17:35: ########################################
17:17:35: ########################################
17:17:35: Stated Running script CF402_Card_functional_4_3_7_1_General_Lock_Unlock_operation 
17:17:35: ########################################
17:17:35: ###### General Lock Unlock Operation test. 
17:17:35: [CF402_Card_functional_4_3_7_1_General_Lock_Unlock_operation]### globallockunlock is NO, Therefore Continuing the test case.
17:17:35: [CF402_Card_functional_4_3_7_1_General_Lock_Unlock_operation]### TEST CASE ITERATION IS STARTED.
17:17:35: [GO4_globalInitCard]### Switch to Specify Card Type
17:17:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:17:37: Host Frequency set to 25000 KHz
17:17:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:17:37: [GO18_globalSetVolt]### Set Host Voltage value.
17:17:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:17:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x061FFE40>, 0x0, True) , Command count = 4720 ] 
17:17:37: [GO18_globalSetVolt]### Host voltage value is set.
17:17:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:17:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x061F5A50>, 0x0, False) , Command count = 4721 ] 
17:17:37: [GO18_globalSetVolt]### Host voltage value is set.
17:17:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4722 ] 
17:17:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:17:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4723 ] 
17:17:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:17:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:17:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:17:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:17:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:17:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4724 ] 
17:17:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:17:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:17:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5B10>, <py_sfcl.CommandDataDefinition object at 0x061FF3C0>) , Command count = 4725 ] 
17:17:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:17:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5AE0>, <py_sfcl.CommandDataDefinition object at 0x061FFFC0>) , Command count = 4726 ] 
17:17:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:17:37: [ SetCardRCA(0x1, 0xD555) , Command count = 4727 ] 
17:17:37: [DVTCommonLib]### Identification :Idenfication of card completed 

17:17:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:17:38: Host Frequency set to 25000 KHz
17:17:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:17:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:17:38: ####CSD Registe 2.0 Values####
17:17:38: CSD_STRUCTURE                                 :0x1
17:17:38: Reserv1                                       :0x0
17:17:38: Time Access 1 TAAC                            :0xe
17:17:38: Time Access 2 NSAC*100                        :0x0
17:17:38: Data Transfer Rate TRAN_SPEED                 :0x32
17:17:38: Card Command Classess CCC                     :0x5b5
17:17:38: Max Read Data Block Length  READ_BL_LEN       :0x9
17:17:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:17:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:17:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:17:38: DSR(driver stage register)  DSR_IMP           :0x0
17:17:38: Reserv2                                       :0x0
17:17:38: Device Size C_SIZE                            :0xedc8
17:17:38: Reserv3                                       :0x0
17:17:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:17:38: Erase Sector Size SECTOR_SIZE                 :0x7f
17:17:38: Write Protect Group Size WP_GRP_SIZE          :0x0
17:17:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:17:38: Reserv4                                       :0x0
17:17:38: Write Speed Factor R2W_FACTOR                 :0x2
17:17:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:17:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:17:38: FILE_FORMAT_GRP                               :0x0
17:17:38: COPY flag                                     :0x1
17:17:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:17:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:17:38: File_Format                                   :0x0
17:17:38: CRC                                           :0x0
17:17:38: ####CSD Registe Values####  

17:17:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:17:38: [GetSCRRegisterEntry] Passed
17:17:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:17:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:17:38: Data_Status_After Erases          : 0
17:17:38: CPRM Security Support             : No Security
17:17:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:17:38: Spec. Version                     : Version 3.0X
17:17:38: Extended Security Support         : Extended_Security_Not_Supported
17:17:38: Command Support                   : COMMAND_SUPPORT
17:17:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:17:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5B40>, <py_sfcl.CommandDataDefinition object at 0x062551E0>) , Command count = 4728 ] 
17:17:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:17:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5BD0>, <py_sfcl.CommandDataDefinition object at 0x06255060>) , Command count = 4729 ] 
17:17:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:17:38: [ SetBusWidth(0x4) , Command count = 4730 ] 
17:17:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:17:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062550C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4731 ] 
17:17:38: Protected Area Size 0x28000
17:17:38: Bus Width           2
17:17:38: Secure Mode         0
17:17:38: Speed  Class        4
17:17:38: Perf Move           0
17:17:38: Au Size             9
17:17:38: Erase Size          15
17:17:38: Erase Timeout       1
17:17:38: Erase offset        1
17:17:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:17:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:17:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:17:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4732 ] 
17:17:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:17:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:17:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:17:38: Host Frequency set to 100000 KHz
17:17:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:17:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:17:38: ####CSD Registe 2.0 Values####
17:17:38: CSD_STRUCTURE                                 :0x1
17:17:38: Reserv1                                       :0x0
17:17:38: Time Access 1 TAAC                            :0xe
17:17:38: Time Access 2 NSAC*100                        :0x0
17:17:38: Data Transfer Rate TRAN_SPEED                 :0xb
17:17:38: Card Command Classess CCC                     :0x5b5
17:17:38: Max Read Data Block Length  READ_BL_LEN       :0x9
17:17:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:17:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:17:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:17:38: DSR(driver stage register)  DSR_IMP           :0x0
17:17:38: Reserv2                                       :0x0
17:17:38: Device Size C_SIZE                            :0xedc8
17:17:38: Reserv3                                       :0x0
17:17:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:17:38: Erase Sector Size SECTOR_SIZE                 :0x7f
17:17:38: Write Protect Group Size WP_GRP_SIZE          :0x0
17:17:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:17:38: Reserv4                                       :0x0
17:17:38: Write Speed Factor R2W_FACTOR                 :0x2
17:17:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:17:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:17:38: FILE_FORMAT_GRP                               :0x0
17:17:38: COPY flag                                     :0x1
17:17:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:17:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:17:38: File_Format                                   :0x0
17:17:38: CRC                                           :0x0
17:17:38: ####CSD Registe Values####  

17:17:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DECC0>, <py_sfcl.CommandDataDefinition object at 0x06255360>) , Command count = 4733 ] 
17:17:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:17:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5810>, <py_sfcl.CommandDataDefinition object at 0x062551B0>) , Command count = 4734 ] 
17:17:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:17:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:17:38: [CF402_Card_functional_4_3_7_1_General_Lock_Unlock_operation]#####  TAG 4_3_7_1    #### 
17:17:38: [CF402_Card_functional_4_3_7_1_General_Lock_Unlock_operation]##### Single Read to the card from startLba:0x0 to endSector:0x100
17:17:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625A060>, <py_sfcl.CommandDataDefinition object at 0x0625A180>) , Command count = 4735 ] 
17:17:38: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED1E0>, <py_sfcl.CommandDataDefinition object at 0x0625A120>) , Command count = 4736 ] 
17:17:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:38:  Read & Verify  Lba:0x00000000 Transfer Length:0x0001   
17:17:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9960>, <py_sfcl.CommandDataDefinition object at 0x0625A030>) , Command count = 4737 ] 
17:17:39: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5CC0>, <py_sfcl.CommandDataDefinition object at 0x061E9780>) , Command count = 4738 ] 
17:17:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:39:  Read & Verify  Lba:0x00000001 Transfer Length:0x0001   
17:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5DB0>, <py_sfcl.CommandDataDefinition object at 0x0625A210>) , Command count = 4739 ] 
17:17:39: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5D80>, <py_sfcl.CommandDataDefinition object at 0x0625A270>) , Command count = 4740 ] 
17:17:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:39:  Read & Verify  Lba:0x00000002 Transfer Length:0x0001   
17:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5E10>, <py_sfcl.CommandDataDefinition object at 0x0625A2D0>) , Command count = 4741 ] 
17:17:39: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625A330>, <py_sfcl.CommandDataDefinition object at 0x0625A360>) , Command count = 4742 ] 
17:17:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:39:  Read & Verify  Lba:0x00000003 Transfer Length:0x0001   
17:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE9F0>, <py_sfcl.CommandDataDefinition object at 0x0625A3C0>) , Command count = 4743 ] 
17:17:39: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED090>, <py_sfcl.CommandDataDefinition object at 0x0625A420>) , Command count = 4744 ] 
17:17:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:39:  Read & Verify  Lba:0x00000004 Transfer Length:0x0001   
17:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED6C0>, <py_sfcl.CommandDataDefinition object at 0x061EDBA0>) , Command count = 4745 ] 
17:17:39: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9D20>, <py_sfcl.CommandDataDefinition object at 0x0625A4B0>) , Command count = 4746 ] 
17:17:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:39:  Read & Verify  Lba:0x00000005 Transfer Length:0x0001   
17:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5F30>, <py_sfcl.CommandDataDefinition object at 0x0625A510>) , Command count = 4747 ] 
17:17:39: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED870>, <py_sfcl.CommandDataDefinition object at 0x0625A570>) , Command count = 4748 ] 
17:17:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:39:  Read & Verify  Lba:0x00000006 Transfer Length:0x0001   
17:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5F90>, <py_sfcl.CommandDataDefinition object at 0x0625A5D0>) , Command count = 4749 ] 
17:17:39: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5F60>, <py_sfcl.CommandDataDefinition object at 0x0625A630>) , Command count = 4750 ] 
17:17:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:39:  Read & Verify  Lba:0x00000007 Transfer Length:0x0001   
17:17:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F55D0>, <py_sfcl.CommandDataDefinition object at 0x0625A690>) , Command count = 4751 ] 
17:17:40: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5FC0>, <py_sfcl.CommandDataDefinition object at 0x0625A6F0>) , Command count = 4752 ] 
17:17:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:40:  Read & Verify  Lba:0x00000008 Transfer Length:0x0001   
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F54B0>, <py_sfcl.CommandDataDefinition object at 0x0625A750>) , Command count = 4753 ] 
17:17:40: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDF30>, <py_sfcl.CommandDataDefinition object at 0x0625A7B0>) , Command count = 4754 ] 
17:17:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:40:  Read & Verify  Lba:0x00000009 Transfer Length:0x0001   
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDFC0>, <py_sfcl.CommandDataDefinition object at 0x0625A810>) , Command count = 4755 ] 
17:17:40: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDE10>, <py_sfcl.CommandDataDefinition object at 0x0625A870>) , Command count = 4756 ] 
17:17:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:40:  Read & Verify  Lba:0x0000000A Transfer Length:0x0001   
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDEA0>, <py_sfcl.CommandDataDefinition object at 0x0625A8D0>) , Command count = 4757 ] 
17:17:40: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5ED0>, <py_sfcl.CommandDataDefinition object at 0x0625A930>) , Command count = 4758 ] 
17:17:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:40:  Read & Verify  Lba:0x0000000B Transfer Length:0x0001   
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDC30>, <py_sfcl.CommandDataDefinition object at 0x0625A990>) , Command count = 4759 ] 
17:17:40: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDE70>, <py_sfcl.CommandDataDefinition object at 0x0625A9F0>) , Command count = 4760 ] 
17:17:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:40:  Read & Verify  Lba:0x0000000C Transfer Length:0x0001   
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED960>, <py_sfcl.CommandDataDefinition object at 0x0625AA50>) , Command count = 4761 ] 
17:17:40: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA50>, <py_sfcl.CommandDataDefinition object at 0x0625AAB0>) , Command count = 4762 ] 
17:17:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:40:  Read & Verify  Lba:0x0000000D Transfer Length:0x0001   
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED930>, <py_sfcl.CommandDataDefinition object at 0x0625AB10>) , Command count = 4763 ] 
17:17:40: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED1B0>, <py_sfcl.CommandDataDefinition object at 0x0625AB70>) , Command count = 4764 ] 
17:17:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:40:  Read & Verify  Lba:0x0000000E Transfer Length:0x0001   
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED810>, <py_sfcl.CommandDataDefinition object at 0x0625ABD0>) , Command count = 4765 ] 
17:17:40: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05405930>, <py_sfcl.CommandDataDefinition object at 0x0625AC30>) , Command count = 4766 ] 
17:17:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:40:  Read & Verify  Lba:0x0000000F Transfer Length:0x0001   
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED6F0>, <py_sfcl.CommandDataDefinition object at 0x0625AC90>) , Command count = 4767 ] 
17:17:40: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5270>, <py_sfcl.CommandDataDefinition object at 0x0625ACF0>) , Command count = 4768 ] 
17:17:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:40:  Read & Verify  Lba:0x00000010 Transfer Length:0x0001   
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED5D0>, <py_sfcl.CommandDataDefinition object at 0x0625AD50>) , Command count = 4769 ] 
17:17:40: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED360>, <py_sfcl.CommandDataDefinition object at 0x0625ADB0>) , Command count = 4770 ] 
17:17:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:40:  Read & Verify  Lba:0x00000011 Transfer Length:0x0001   
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED4B0>, <py_sfcl.CommandDataDefinition object at 0x0625AE10>) , Command count = 4771 ] 
17:17:40: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED390>, <py_sfcl.CommandDataDefinition object at 0x0625AE70>) , Command count = 4772 ] 
17:17:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:41:  Read & Verify  Lba:0x00000012 Transfer Length:0x0001   
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED120>, <py_sfcl.CommandDataDefinition object at 0x0625AED0>) , Command count = 4773 ] 
17:17:41: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED270>, <py_sfcl.CommandDataDefinition object at 0x0625AF30>) , Command count = 4774 ] 
17:17:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:41:  Read & Verify  Lba:0x00000013 Transfer Length:0x0001   
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9E40>, <py_sfcl.CommandDataDefinition object at 0x0625AF90>) , Command count = 4775 ] 
17:17:41: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9F30>, <py_sfcl.CommandDataDefinition object at 0x0625C030>) , Command count = 4776 ] 
17:17:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:41:  Read & Verify  Lba:0x00000014 Transfer Length:0x0001   
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED5A0>, <py_sfcl.CommandDataDefinition object at 0x0625C090>) , Command count = 4777 ] 
17:17:41: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9E10>, <py_sfcl.CommandDataDefinition object at 0x0625C0F0>) , Command count = 4778 ] 
17:17:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:41:  Read & Verify  Lba:0x00000015 Transfer Length:0x0001   
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9EA0>, <py_sfcl.CommandDataDefinition object at 0x0625C150>) , Command count = 4779 ] 
17:17:41: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9ED0>, <py_sfcl.CommandDataDefinition object at 0x0625C1B0>) , Command count = 4780 ] 
17:17:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:41:  Read & Verify  Lba:0x00000016 Transfer Length:0x0001   
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9C60>, <py_sfcl.CommandDataDefinition object at 0x0625C210>) , Command count = 4781 ] 
17:17:41: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9DB0>, <py_sfcl.CommandDataDefinition object at 0x0625C270>) , Command count = 4782 ] 
17:17:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:41:  Read & Verify  Lba:0x00000017 Transfer Length:0x0001   
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9B70>, <py_sfcl.CommandDataDefinition object at 0x0625C2D0>) , Command count = 4783 ] 
17:17:41: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E96C0>, <py_sfcl.CommandDataDefinition object at 0x0625C330>) , Command count = 4784 ] 
17:17:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:41:  Read & Verify  Lba:0x00000018 Transfer Length:0x0001   
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E99C0>, <py_sfcl.CommandDataDefinition object at 0x0625C390>) , Command count = 4785 ] 
17:17:41: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9630>, <py_sfcl.CommandDataDefinition object at 0x0625C3F0>) , Command count = 4786 ] 
17:17:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:41:  Read & Verify  Lba:0x00000019 Transfer Length:0x0001   
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E96F0>, <py_sfcl.CommandDataDefinition object at 0x0625C450>) , Command count = 4787 ] 
17:17:41: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052F4540>, <py_sfcl.CommandDataDefinition object at 0x0625C4B0>) , Command count = 4788 ] 
17:17:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:41:  Read & Verify  Lba:0x0000001A Transfer Length:0x0001   
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E92D0>, <py_sfcl.CommandDataDefinition object at 0x0625C510>) , Command count = 4789 ] 
17:17:41: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5360>, <py_sfcl.CommandDataDefinition object at 0x0625C570>) , Command count = 4790 ] 
17:17:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:41:  Read & Verify  Lba:0x0000001B Transfer Length:0x0001   
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5C90>, <py_sfcl.CommandDataDefinition object at 0x0625C5D0>) , Command count = 4791 ] 
17:17:41: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5390>, <py_sfcl.CommandDataDefinition object at 0x0625C630>) , Command count = 4792 ] 
17:17:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:41:  Read & Verify  Lba:0x0000001C Transfer Length:0x0001   
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053C6CF0>, <py_sfcl.CommandDataDefinition object at 0x0625C690>) , Command count = 4793 ] 
17:17:41: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05400C30>, <py_sfcl.CommandDataDefinition object at 0x0625C6F0>) , Command count = 4794 ] 
17:17:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:41:  Read & Verify  Lba:0x0000001D Transfer Length:0x0001   
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05405630>, <py_sfcl.CommandDataDefinition object at 0x0625C750>) , Command count = 4795 ] 
17:17:41: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDDE0>, <py_sfcl.CommandDataDefinition object at 0x0625C7B0>) , Command count = 4796 ] 
17:17:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:41:  Read & Verify  Lba:0x0000001E Transfer Length:0x0001   
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054056F0>, <py_sfcl.CommandDataDefinition object at 0x0625C810>) , Command count = 4797 ] 
17:17:42: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9450>, <py_sfcl.CommandDataDefinition object at 0x0625C870>) , Command count = 4798 ] 
17:17:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:42:  Read & Verify  Lba:0x0000001F Transfer Length:0x0001   
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E97B0>, <py_sfcl.CommandDataDefinition object at 0x0625C8D0>) , Command count = 4799 ] 
17:17:42: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0540D180>, <py_sfcl.CommandDataDefinition object at 0x0625C930>) , Command count = 4800 ] 
17:17:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:42:  Read & Verify  Lba:0x00000020 Transfer Length:0x0001   
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9690>, <py_sfcl.CommandDataDefinition object at 0x0625C990>) , Command count = 4801 ] 
17:17:42: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612FDE0>, <py_sfcl.CommandDataDefinition object at 0x0625C9F0>) , Command count = 4802 ] 
17:17:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:42:  Read & Verify  Lba:0x00000021 Transfer Length:0x0001   
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDDB0>, <py_sfcl.CommandDataDefinition object at 0x0625CA50>) , Command count = 4803 ] 
17:17:42: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05405780>, <py_sfcl.CommandDataDefinition object at 0x0625CAB0>) , Command count = 4804 ] 
17:17:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:42:  Read & Verify  Lba:0x00000022 Transfer Length:0x0001   
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0540DE10>, <py_sfcl.CommandDataDefinition object at 0x0625CB10>) , Command count = 4805 ] 
17:17:42: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0540DFC0>, <py_sfcl.CommandDataDefinition object at 0x0625CB70>) , Command count = 4806 ] 
17:17:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:42:  Read & Verify  Lba:0x00000023 Transfer Length:0x0001   
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDC00>, <py_sfcl.CommandDataDefinition object at 0x0625CBD0>) , Command count = 4807 ] 
17:17:42: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05415ED0>, <py_sfcl.CommandDataDefinition object at 0x0625CC30>) , Command count = 4808 ] 
17:17:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:42:  Read & Verify  Lba:0x00000024 Transfer Length:0x0001   
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED8D0>, <py_sfcl.CommandDataDefinition object at 0x0625CC90>) , Command count = 4809 ] 
17:17:42: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05415F00>, <py_sfcl.CommandDataDefinition object at 0x0625CCF0>) , Command count = 4810 ] 
17:17:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:42:  Read & Verify  Lba:0x00000025 Transfer Length:0x0001   
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0540DBD0>, <py_sfcl.CommandDataDefinition object at 0x0625CD50>) , Command count = 4811 ] 
17:17:42: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05415300>, <py_sfcl.CommandDataDefinition object at 0x0625CDB0>) , Command count = 4812 ] 
17:17:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:42:  Read & Verify  Lba:0x00000026 Transfer Length:0x0001   
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE180>, <py_sfcl.CommandDataDefinition object at 0x0625CE10>) , Command count = 4813 ] 
17:17:42: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE1B0>, <py_sfcl.CommandDataDefinition object at 0x0625CE70>) , Command count = 4814 ] 
17:17:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:42:  Read & Verify  Lba:0x00000027 Transfer Length:0x0001   
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE1E0>, <py_sfcl.CommandDataDefinition object at 0x0625CED0>) , Command count = 4815 ] 
17:17:42: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE210>, <py_sfcl.CommandDataDefinition object at 0x0625CF30>) , Command count = 4816 ] 
17:17:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:42:  Read & Verify  Lba:0x00000028 Transfer Length:0x0001   
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE330>, <py_sfcl.CommandDataDefinition object at 0x0625CF90>) , Command count = 4817 ] 
17:17:42: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE3C0>, <py_sfcl.CommandDataDefinition object at 0x0625D030>) , Command count = 4818 ] 
17:17:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:43:  Read & Verify  Lba:0x00000029 Transfer Length:0x0001   
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE450>, <py_sfcl.CommandDataDefinition object at 0x0625D090>) , Command count = 4819 ] 
17:17:43: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE480>, <py_sfcl.CommandDataDefinition object at 0x0625D0F0>) , Command count = 4820 ] 
17:17:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:43:  Read & Verify  Lba:0x0000002A Transfer Length:0x0001   
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE4B0>, <py_sfcl.CommandDataDefinition object at 0x0625D150>) , Command count = 4821 ] 
17:17:43: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE4E0>, <py_sfcl.CommandDataDefinition object at 0x0625D1B0>) , Command count = 4822 ] 
17:17:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:43:  Read & Verify  Lba:0x0000002B Transfer Length:0x0001   
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053D29C0>, <py_sfcl.CommandDataDefinition object at 0x0625D210>) , Command count = 4823 ] 
17:17:43: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE570>, <py_sfcl.CommandDataDefinition object at 0x0625D270>) , Command count = 4824 ] 
17:17:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:43:  Read & Verify  Lba:0x0000002C Transfer Length:0x0001   
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE510>, <py_sfcl.CommandDataDefinition object at 0x0625D2D0>) , Command count = 4825 ] 
17:17:43: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F52A0>, <py_sfcl.CommandDataDefinition object at 0x0625D330>) , Command count = 4826 ] 
17:17:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:43:  Read & Verify  Lba:0x0000002D Transfer Length:0x0001   
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E97E0>, <py_sfcl.CommandDataDefinition object at 0x0625D390>) , Command count = 4827 ] 
17:17:43: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E90C0>, <py_sfcl.CommandDataDefinition object at 0x0625D3F0>) , Command count = 4828 ] 
17:17:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:43:  Read & Verify  Lba:0x0000002E Transfer Length:0x0001   
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE540>, <py_sfcl.CommandDataDefinition object at 0x0625D450>) , Command count = 4829 ] 
17:17:43: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060EB060>, <py_sfcl.CommandDataDefinition object at 0x0625D4B0>) , Command count = 4830 ] 
17:17:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:43:  Read & Verify  Lba:0x0000002F Transfer Length:0x0001   
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9A80>, <py_sfcl.CommandDataDefinition object at 0x0625D510>) , Command count = 4831 ] 
17:17:43: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D20C0>, <py_sfcl.CommandDataDefinition object at 0x0625D570>) , Command count = 4832 ] 
17:17:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:43:  Read & Verify  Lba:0x00000030 Transfer Length:0x0001   
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F58D0>, <py_sfcl.CommandDataDefinition object at 0x0625D5D0>) , Command count = 4833 ] 
17:17:43: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D2180>, <py_sfcl.CommandDataDefinition object at 0x0625D630>) , Command count = 4834 ] 
17:17:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:43:  Read & Verify  Lba:0x00000031 Transfer Length:0x0001   
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D22A0>, <py_sfcl.CommandDataDefinition object at 0x0625D690>) , Command count = 4835 ] 
17:17:43: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DECF0>, <py_sfcl.CommandDataDefinition object at 0x0625D6F0>) , Command count = 4836 ] 
17:17:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:43:  Read & Verify  Lba:0x00000032 Transfer Length:0x0001   
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9240>, <py_sfcl.CommandDataDefinition object at 0x0625D750>) , Command count = 4837 ] 
17:17:43: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9300>, <py_sfcl.CommandDataDefinition object at 0x0625D7B0>) , Command count = 4838 ] 
17:17:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:43:  Read & Verify  Lba:0x00000033 Transfer Length:0x0001   
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9120>, <py_sfcl.CommandDataDefinition object at 0x0625D810>) , Command count = 4839 ] 
17:17:43: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9090>, <py_sfcl.CommandDataDefinition object at 0x0625D870>) , Command count = 4840 ] 
17:17:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:43:  Read & Verify  Lba:0x00000034 Transfer Length:0x0001   
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9060>, <py_sfcl.CommandDataDefinition object at 0x0625D8D0>) , Command count = 4841 ] 
17:17:43: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9150>, <py_sfcl.CommandDataDefinition object at 0x0625D930>) , Command count = 4842 ] 
17:17:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:44:  Read & Verify  Lba:0x00000035 Transfer Length:0x0001   
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9210>, <py_sfcl.CommandDataDefinition object at 0x0625D990>) , Command count = 4843 ] 
17:17:44: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E90F0>, <py_sfcl.CommandDataDefinition object at 0x0625D9F0>) , Command count = 4844 ] 
17:17:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:44:  Read & Verify  Lba:0x00000036 Transfer Length:0x0001   
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9420>, <py_sfcl.CommandDataDefinition object at 0x0625DA50>) , Command count = 4845 ] 
17:17:44: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9390>, <py_sfcl.CommandDataDefinition object at 0x0625DAB0>) , Command count = 4846 ] 
17:17:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:44:  Read & Verify  Lba:0x00000037 Transfer Length:0x0001   
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DEB70>, <py_sfcl.CommandDataDefinition object at 0x0625DB10>) , Command count = 4847 ] 
17:17:44: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9600>, <py_sfcl.CommandDataDefinition object at 0x0625DB70>) , Command count = 4848 ] 
17:17:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:44:  Read & Verify  Lba:0x00000038 Transfer Length:0x0001   
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9270>, <py_sfcl.CommandDataDefinition object at 0x0625DBD0>) , Command count = 4849 ] 
17:17:44: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E98D0>, <py_sfcl.CommandDataDefinition object at 0x0625DC30>) , Command count = 4850 ] 
17:17:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:44:  Read & Verify  Lba:0x00000039 Transfer Length:0x0001   
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDB40>, <py_sfcl.CommandDataDefinition object at 0x0625DC90>) , Command count = 4851 ] 
17:17:44: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5C60>, <py_sfcl.CommandDataDefinition object at 0x0625DCF0>) , Command count = 4852 ] 
17:17:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:44:  Read & Verify  Lba:0x0000003A Transfer Length:0x0001   
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05405750>, <py_sfcl.CommandDataDefinition object at 0x0625DD50>) , Command count = 4853 ] 
17:17:44: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5870>, <py_sfcl.CommandDataDefinition object at 0x0625DDB0>) , Command count = 4854 ] 
17:17:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:44:  Read & Verify  Lba:0x0000003B Transfer Length:0x0001   
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F51B0>, <py_sfcl.CommandDataDefinition object at 0x0625DE10>) , Command count = 4855 ] 
17:17:44: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5240>, <py_sfcl.CommandDataDefinition object at 0x0625DE70>) , Command count = 4856 ] 
17:17:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:44:  Read & Verify  Lba:0x0000003C Transfer Length:0x0001   
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5210>, <py_sfcl.CommandDataDefinition object at 0x0625DED0>) , Command count = 4857 ] 
17:17:44: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA20>, <py_sfcl.CommandDataDefinition object at 0x0625DF30>) , Command count = 4858 ] 
17:17:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:44:  Read & Verify  Lba:0x0000003D Transfer Length:0x0001   
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED990>, <py_sfcl.CommandDataDefinition object at 0x0625DF90>) , Command count = 4859 ] 
17:17:44: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDB70>, <py_sfcl.CommandDataDefinition object at 0x0625E030>) , Command count = 4860 ] 
17:17:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:44:  Read & Verify  Lba:0x0000003E Transfer Length:0x0001   
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9B10>, <py_sfcl.CommandDataDefinition object at 0x0625E090>) , Command count = 4861 ] 
17:17:44: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9990>, <py_sfcl.CommandDataDefinition object at 0x0625E0F0>) , Command count = 4862 ] 
17:17:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:44:  Read & Verify  Lba:0x0000003F Transfer Length:0x0001   
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9BA0>, <py_sfcl.CommandDataDefinition object at 0x0625E150>) , Command count = 4863 ] 
17:17:44: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9C00>, <py_sfcl.CommandDataDefinition object at 0x0625E1B0>) , Command count = 4864 ] 
17:17:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:44:  Read & Verify  Lba:0x00000040 Transfer Length:0x0001   
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9C30>, <py_sfcl.CommandDataDefinition object at 0x0625E210>) , Command count = 4865 ] 
17:17:44: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9BD0>, <py_sfcl.CommandDataDefinition object at 0x0625E270>) , Command count = 4866 ] 
17:17:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:44:  Read & Verify  Lba:0x00000041 Transfer Length:0x0001   
17:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9CC0>, <py_sfcl.CommandDataDefinition object at 0x0625E2D0>) , Command count = 4867 ] 
17:17:45: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9AE0>, <py_sfcl.CommandDataDefinition object at 0x0625E330>) , Command count = 4868 ] 
17:17:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:45:  Read & Verify  Lba:0x00000042 Transfer Length:0x0001   
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9D50>, <py_sfcl.CommandDataDefinition object at 0x0625E390>) , Command count = 4869 ] 
17:17:45: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9CF0>, <py_sfcl.CommandDataDefinition object at 0x0625E3F0>) , Command count = 4870 ] 
17:17:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:45:  Read & Verify  Lba:0x00000043 Transfer Length:0x0001   
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9DE0>, <py_sfcl.CommandDataDefinition object at 0x0625E450>) , Command count = 4871 ] 
17:17:45: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9D80>, <py_sfcl.CommandDataDefinition object at 0x0625E4B0>) , Command count = 4872 ] 
17:17:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:45:  Read & Verify  Lba:0x00000044 Transfer Length:0x0001   
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9E70>, <py_sfcl.CommandDataDefinition object at 0x0625E510>) , Command count = 4873 ] 
17:17:45: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED030>, <py_sfcl.CommandDataDefinition object at 0x0625E570>) , Command count = 4874 ] 
17:17:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:45:  Read & Verify  Lba:0x00000045 Transfer Length:0x0001   
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9F00>, <py_sfcl.CommandDataDefinition object at 0x0625E5D0>) , Command count = 4875 ] 
17:17:45: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9F60>, <py_sfcl.CommandDataDefinition object at 0x0625E630>) , Command count = 4876 ] 
17:17:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:45:  Read & Verify  Lba:0x00000046 Transfer Length:0x0001   
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9F90>, <py_sfcl.CommandDataDefinition object at 0x0625E690>) , Command count = 4877 ] 
17:17:45: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5930>, <py_sfcl.CommandDataDefinition object at 0x0625E6F0>) , Command count = 4878 ] 
17:17:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:45:  Read & Verify  Lba:0x00000047 Transfer Length:0x0001   
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5120>, <py_sfcl.CommandDataDefinition object at 0x0625E750>) , Command count = 4879 ] 
17:17:45: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DBF90>, <py_sfcl.CommandDataDefinition object at 0x0625E7B0>) , Command count = 4880 ] 
17:17:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:45:  Read & Verify  Lba:0x00000048 Transfer Length:0x0001   
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053F7930>, <py_sfcl.CommandDataDefinition object at 0x0625E810>) , Command count = 4881 ] 
17:17:45: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5990>, <py_sfcl.CommandDataDefinition object at 0x0625E870>) , Command count = 4882 ] 
17:17:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:45:  Read & Verify  Lba:0x00000049 Transfer Length:0x0001   
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DBE40>, <py_sfcl.CommandDataDefinition object at 0x0625E8D0>) , Command count = 4883 ] 
17:17:45: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED300>, <py_sfcl.CommandDataDefinition object at 0x0625E930>) , Command count = 4884 ] 
17:17:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:45:  Read & Verify  Lba:0x0000004A Transfer Length:0x0001   
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED4E0>, <py_sfcl.CommandDataDefinition object at 0x0625E990>) , Command count = 4885 ] 
17:17:45: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E99F0>, <py_sfcl.CommandDataDefinition object at 0x0625E9F0>) , Command count = 4886 ] 
17:17:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:45:  Read & Verify  Lba:0x0000004B Transfer Length:0x0001   
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED150>, <py_sfcl.CommandDataDefinition object at 0x0625EA50>) , Command count = 4887 ] 
17:17:45: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054056C0>, <py_sfcl.CommandDataDefinition object at 0x0625EAB0>) , Command count = 4888 ] 
17:17:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:45:  Read & Verify  Lba:0x0000004C Transfer Length:0x0001   
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5D20>, <py_sfcl.CommandDataDefinition object at 0x0625EB10>) , Command count = 4889 ] 
17:17:45: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053CB690>, <py_sfcl.CommandDataDefinition object at 0x0625EB70>) , Command count = 4890 ] 
17:17:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:45:  Read & Verify  Lba:0x0000004D Transfer Length:0x0001   
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9750>, <py_sfcl.CommandDataDefinition object at 0x0625EBD0>) , Command count = 4891 ] 
17:17:46: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9720>, <py_sfcl.CommandDataDefinition object at 0x0625EC30>) , Command count = 4892 ] 
17:17:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:46:  Read & Verify  Lba:0x0000004E Transfer Length:0x0001   
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9660>, <py_sfcl.CommandDataDefinition object at 0x0625EC90>) , Command count = 4893 ] 
17:17:46: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED0C0>, <py_sfcl.CommandDataDefinition object at 0x0625ECF0>) , Command count = 4894 ] 
17:17:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:46:  Read & Verify  Lba:0x0000004F Transfer Length:0x0001   
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED450>, <py_sfcl.CommandDataDefinition object at 0x0625ED50>) , Command count = 4895 ] 
17:17:46: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED210>, <py_sfcl.CommandDataDefinition object at 0x0625EDB0>) , Command count = 4896 ] 
17:17:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:46:  Read & Verify  Lba:0x00000050 Transfer Length:0x0001   
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053F7390>, <py_sfcl.CommandDataDefinition object at 0x0625EE10>) , Command count = 4897 ] 
17:17:46: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED240>, <py_sfcl.CommandDataDefinition object at 0x0625EE70>) , Command count = 4898 ] 
17:17:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:46:  Read & Verify  Lba:0x00000051 Transfer Length:0x0001   
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED0F0>, <py_sfcl.CommandDataDefinition object at 0x0625EED0>) , Command count = 4899 ] 
17:17:46: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D2030>, <py_sfcl.CommandDataDefinition object at 0x0625EF30>) , Command count = 4900 ] 
17:17:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:46:  Read & Verify  Lba:0x00000052 Transfer Length:0x0001   
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED330>, <py_sfcl.CommandDataDefinition object at 0x0625EF90>) , Command count = 4901 ] 
17:17:46: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DBED0>, <py_sfcl.CommandDataDefinition object at 0x06260030>) , Command count = 4902 ] 
17:17:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:46:  Read & Verify  Lba:0x00000053 Transfer Length:0x0001   
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DBF60>, <py_sfcl.CommandDataDefinition object at 0x06260090>) , Command count = 4903 ] 
17:17:46: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5EA0>, <py_sfcl.CommandDataDefinition object at 0x062600F0>) , Command count = 4904 ] 
17:17:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:46:  Read & Verify  Lba:0x00000054 Transfer Length:0x0001   
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED420>, <py_sfcl.CommandDataDefinition object at 0x06260150>) , Command count = 4905 ] 
17:17:46: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED690>, <py_sfcl.CommandDataDefinition object at 0x062601B0>) , Command count = 4906 ] 
17:17:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:46:  Read & Verify  Lba:0x00000055 Transfer Length:0x0001   
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED7E0>, <py_sfcl.CommandDataDefinition object at 0x06260210>) , Command count = 4907 ] 
17:17:46: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED720>, <py_sfcl.CommandDataDefinition object at 0x06260270>) , Command count = 4908 ] 
17:17:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:46:  Read & Verify  Lba:0x00000056 Transfer Length:0x0001   
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED570>, <py_sfcl.CommandDataDefinition object at 0x062602D0>) , Command count = 4909 ] 
17:17:46: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED7B0>, <py_sfcl.CommandDataDefinition object at 0x06260330>) , Command count = 4910 ] 
17:17:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:46:  Read & Verify  Lba:0x00000057 Transfer Length:0x0001   
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDBD0>, <py_sfcl.CommandDataDefinition object at 0x06260390>) , Command count = 4911 ] 
17:17:46: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05415F60>, <py_sfcl.CommandDataDefinition object at 0x062603F0>) , Command count = 4912 ] 
17:17:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:46:  Read & Verify  Lba:0x00000058 Transfer Length:0x0001   
17:17:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED660>, <py_sfcl.CommandDataDefinition object at 0x06260450>) , Command count = 4913 ] 
17:17:47: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED180>, <py_sfcl.CommandDataDefinition object at 0x062604B0>) , Command count = 4914 ] 
17:17:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:47:  Read & Verify  Lba:0x00000059 Transfer Length:0x0001   
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDB10>, <py_sfcl.CommandDataDefinition object at 0x06260510>) , Command count = 4915 ] 
17:17:47: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED750>, <py_sfcl.CommandDataDefinition object at 0x06260570>) , Command count = 4916 ] 
17:17:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:47:  Read & Verify  Lba:0x0000005A Transfer Length:0x0001   
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED900>, <py_sfcl.CommandDataDefinition object at 0x062605D0>) , Command count = 4917 ] 
17:17:47: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED2A0>, <py_sfcl.CommandDataDefinition object at 0x06260630>) , Command count = 4918 ] 
17:17:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:47:  Read & Verify  Lba:0x0000005B Transfer Length:0x0001   
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED9F0>, <py_sfcl.CommandDataDefinition object at 0x06260690>) , Command count = 4919 ] 
17:17:47: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDD20>, <py_sfcl.CommandDataDefinition object at 0x062606F0>) , Command count = 4920 ] 
17:17:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:47:  Read & Verify  Lba:0x0000005C Transfer Length:0x0001   
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA80>, <py_sfcl.CommandDataDefinition object at 0x06260750>) , Command count = 4921 ] 
17:17:47: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE7E0>, <py_sfcl.CommandDataDefinition object at 0x062607B0>) , Command count = 4922 ] 
17:17:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:47:  Read & Verify  Lba:0x0000005D Transfer Length:0x0001   
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0540D240>, <py_sfcl.CommandDataDefinition object at 0x06260810>) , Command count = 4923 ] 
17:17:47: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DBD50>, <py_sfcl.CommandDataDefinition object at 0x06260870>) , Command count = 4924 ] 
17:17:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:47:  Read & Verify  Lba:0x0000005E Transfer Length:0x0001   
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5D50>, <py_sfcl.CommandDataDefinition object at 0x062608D0>) , Command count = 4925 ] 
17:17:47: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDAB0>, <py_sfcl.CommandDataDefinition object at 0x06260930>) , Command count = 4926 ] 
17:17:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:47:  Read & Verify  Lba:0x0000005F Transfer Length:0x0001   
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052F43C0>, <py_sfcl.CommandDataDefinition object at 0x06260990>) , Command count = 4927 ] 
17:17:47: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDCC0>, <py_sfcl.CommandDataDefinition object at 0x062609F0>) , Command count = 4928 ] 
17:17:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:47:  Read & Verify  Lba:0x00000060 Transfer Length:0x0001   
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDCF0>, <py_sfcl.CommandDataDefinition object at 0x06260A50>) , Command count = 4929 ] 
17:17:47: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDD50>, <py_sfcl.CommandDataDefinition object at 0x06260AB0>) , Command count = 4930 ] 
17:17:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:47:  Read & Verify  Lba:0x00000061 Transfer Length:0x0001   
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED780>, <py_sfcl.CommandDataDefinition object at 0x06260B10>) , Command count = 4931 ] 
17:17:47: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5300>, <py_sfcl.CommandDataDefinition object at 0x06260B70>) , Command count = 4932 ] 
17:17:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:47:  Read & Verify  Lba:0x00000062 Transfer Length:0x0001   
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9810>, <py_sfcl.CommandDataDefinition object at 0x06260BD0>) , Command count = 4933 ] 
17:17:47: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDED0>, <py_sfcl.CommandDataDefinition object at 0x06260C30>) , Command count = 4934 ] 
17:17:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:48:  Read & Verify  Lba:0x00000063 Transfer Length:0x0001   
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDF60>, <py_sfcl.CommandDataDefinition object at 0x06260C90>) , Command count = 4935 ] 
17:17:48: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5030>, <py_sfcl.CommandDataDefinition object at 0x06260CF0>) , Command count = 4936 ] 
17:17:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:48:  Read & Verify  Lba:0x00000064 Transfer Length:0x0001   
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5150>, <py_sfcl.CommandDataDefinition object at 0x06260D50>) , Command count = 4937 ] 
17:17:48: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5060>, <py_sfcl.CommandDataDefinition object at 0x06260DB0>) , Command count = 4938 ] 
17:17:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:48:  Read & Verify  Lba:0x00000065 Transfer Length:0x0001   
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED2D0>, <py_sfcl.CommandDataDefinition object at 0x06260E10>) , Command count = 4939 ] 
17:17:48: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED840>, <py_sfcl.CommandDataDefinition object at 0x06260E70>) , Command count = 4940 ] 
17:17:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:48:  Read & Verify  Lba:0x00000066 Transfer Length:0x0001   
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F50F0>, <py_sfcl.CommandDataDefinition object at 0x06260ED0>) , Command count = 4941 ] 
17:17:48: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F56F0>, <py_sfcl.CommandDataDefinition object at 0x06260F30>) , Command count = 4942 ] 
17:17:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:48:  Read & Verify  Lba:0x00000067 Transfer Length:0x0001   
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5510>, <py_sfcl.CommandDataDefinition object at 0x06260F90>) , Command count = 4943 ] 
17:17:48: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDAE0>, <py_sfcl.CommandDataDefinition object at 0x06261030>) , Command count = 4944 ] 
17:17:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:48:  Read & Verify  Lba:0x00000068 Transfer Length:0x0001   
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5090>, <py_sfcl.CommandDataDefinition object at 0x06261090>) , Command count = 4945 ] 
17:17:48: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F58A0>, <py_sfcl.CommandDataDefinition object at 0x062610F0>) , Command count = 4946 ] 
17:17:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:48:  Read & Verify  Lba:0x00000069 Transfer Length:0x0001   
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F57E0>, <py_sfcl.CommandDataDefinition object at 0x06261150>) , Command count = 4947 ] 
17:17:48: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDC90>, <py_sfcl.CommandDataDefinition object at 0x062611B0>) , Command count = 4948 ] 
17:17:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:48:  Read & Verify  Lba:0x0000006A Transfer Length:0x0001   
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5750>, <py_sfcl.CommandDataDefinition object at 0x06261210>) , Command count = 4949 ] 
17:17:48: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9FC0>, <py_sfcl.CommandDataDefinition object at 0x06261270>) , Command count = 4950 ] 
17:17:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:48:  Read & Verify  Lba:0x0000006B Transfer Length:0x0001   
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDD80>, <py_sfcl.CommandDataDefinition object at 0x062612D0>) , Command count = 4951 ] 
17:17:48: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5330>, <py_sfcl.CommandDataDefinition object at 0x06261330>) , Command count = 4952 ] 
17:17:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:48:  Read & Verify  Lba:0x0000006C Transfer Length:0x0001   
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5450>, <py_sfcl.CommandDataDefinition object at 0x06261390>) , Command count = 4953 ] 
17:17:48: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDF90>, <py_sfcl.CommandDataDefinition object at 0x062613F0>) , Command count = 4954 ] 
17:17:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:48:  Read & Verify  Lba:0x0000006D Transfer Length:0x0001   
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5180>, <py_sfcl.CommandDataDefinition object at 0x06261450>) , Command count = 4955 ] 
17:17:48: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F54E0>, <py_sfcl.CommandDataDefinition object at 0x062614B0>) , Command count = 4956 ] 
17:17:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:48:  Read & Verify  Lba:0x0000006E Transfer Length:0x0001   
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5480>, <py_sfcl.CommandDataDefinition object at 0x06261510>) , Command count = 4957 ] 
17:17:48: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5570>, <py_sfcl.CommandDataDefinition object at 0x06261570>) , Command count = 4958 ] 
17:17:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:48:  Read & Verify  Lba:0x0000006F Transfer Length:0x0001   
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F53F0>, <py_sfcl.CommandDataDefinition object at 0x062615D0>) , Command count = 4959 ] 
17:17:49: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5630>, <py_sfcl.CommandDataDefinition object at 0x06261630>) , Command count = 4960 ] 
17:17:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:49:  Read & Verify  Lba:0x00000070 Transfer Length:0x0001   
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5660>, <py_sfcl.CommandDataDefinition object at 0x06261690>) , Command count = 4961 ] 
17:17:49: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F51E0>, <py_sfcl.CommandDataDefinition object at 0x062616F0>) , Command count = 4962 ] 
17:17:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:49:  Read & Verify  Lba:0x00000071 Transfer Length:0x0001   
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5780>, <py_sfcl.CommandDataDefinition object at 0x06261750>) , Command count = 4963 ] 
17:17:49: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5720>, <py_sfcl.CommandDataDefinition object at 0x062617B0>) , Command count = 4964 ] 
17:17:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:49:  Read & Verify  Lba:0x00000072 Transfer Length:0x0001   
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5690>, <py_sfcl.CommandDataDefinition object at 0x06261810>) , Command count = 4965 ] 
17:17:49: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F53C0>, <py_sfcl.CommandDataDefinition object at 0x061F5E70>) , Command count = 4966 ] 
17:17:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:49:  Read & Verify  Lba:0x00000073 Transfer Length:0x0001   
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDF00>, <py_sfcl.CommandDataDefinition object at 0x054154B0>) , Command count = 4967 ] 
17:17:49: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261870>, <py_sfcl.CommandDataDefinition object at 0x062618A0>) , Command count = 4968 ] 
17:17:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:49:  Read & Verify  Lba:0x00000074 Transfer Length:0x0001   
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E93C0>, <py_sfcl.CommandDataDefinition object at 0x06261900>) , Command count = 4969 ] 
17:17:49: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FF780>, <py_sfcl.CommandDataDefinition object at 0x061FF7E0>) , Command count = 4970 ] 
17:17:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:49:  Read & Verify  Lba:0x00000075 Transfer Length:0x0001   
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FFF00>, <py_sfcl.CommandDataDefinition object at 0x061FFDE0>) , Command count = 4971 ] 
17:17:49: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FFE40>, <py_sfcl.CommandDataDefinition object at 0x061FFC30>) , Command count = 4972 ] 
17:17:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:49:  Read & Verify  Lba:0x00000076 Transfer Length:0x0001   
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5A20>, <py_sfcl.CommandDataDefinition object at 0x062619C0>) , Command count = 4973 ] 
17:17:49: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E92A0>, <py_sfcl.CommandDataDefinition object at 0x06261A20>) , Command count = 4974 ] 
17:17:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:49:  Read & Verify  Lba:0x00000077 Transfer Length:0x0001   
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5A80>, <py_sfcl.CommandDataDefinition object at 0x06261A80>) , Command count = 4975 ] 
17:17:49: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DBD80>, <py_sfcl.CommandDataDefinition object at 0x0540D1B0>) , Command count = 4976 ] 
17:17:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:49:  Read & Verify  Lba:0x00000078 Transfer Length:0x0001   
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5B10>, <py_sfcl.CommandDataDefinition object at 0x061FF3C0>) , Command count = 4977 ] 
17:17:49: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5B70>, <py_sfcl.CommandDataDefinition object at 0x06261AE0>) , Command count = 4978 ] 
17:17:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:49:  Read & Verify  Lba:0x00000079 Transfer Length:0x0001   
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5AE0>, <py_sfcl.CommandDataDefinition object at 0x061FFFC0>) , Command count = 4979 ] 
17:17:49: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5B40>, <py_sfcl.CommandDataDefinition object at 0x062551E0>) , Command count = 4980 ] 
17:17:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:49:  Read & Verify  Lba:0x0000007A Transfer Length:0x0001   
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5BA0>, <py_sfcl.CommandDataDefinition object at 0x06261B40>) , Command count = 4981 ] 
17:17:49: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED3F0>, <py_sfcl.CommandDataDefinition object at 0x062550F0>) , Command count = 4982 ] 
17:17:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:49:  Read & Verify  Lba:0x0000007B Transfer Length:0x0001   
17:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06255150>, <py_sfcl.CommandDataDefinition object at 0x06261BD0>) , Command count = 4983 ] 
17:17:50: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5BD0>, <py_sfcl.CommandDataDefinition object at 0x06255060>) , Command count = 4984 ] 
17:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:50:  Read & Verify  Lba:0x0000007C Transfer Length:0x0001   
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261C30>, <py_sfcl.CommandDataDefinition object at 0x06261C60>) , Command count = 4985 ] 
17:17:50: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5810>, <py_sfcl.CommandDataDefinition object at 0x062551B0>) , Command count = 4986 ] 
17:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:50:  Read & Verify  Lba:0x0000007D Transfer Length:0x0001   
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625A060>, <py_sfcl.CommandDataDefinition object at 0x0625A180>) , Command count = 4987 ] 
17:17:50: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261CC0>, <py_sfcl.CommandDataDefinition object at 0x06261CF0>) , Command count = 4988 ] 
17:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:50:  Read & Verify  Lba:0x0000007E Transfer Length:0x0001   
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9960>, <py_sfcl.CommandDataDefinition object at 0x0625A030>) , Command count = 4989 ] 
17:17:50: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5CC0>, <py_sfcl.CommandDataDefinition object at 0x061E9780>) , Command count = 4990 ] 
17:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:50:  Read & Verify  Lba:0x0000007F Transfer Length:0x0001   
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5DB0>, <py_sfcl.CommandDataDefinition object at 0x0625A210>) , Command count = 4991 ] 
17:17:50: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5D80>, <py_sfcl.CommandDataDefinition object at 0x0625A270>) , Command count = 4992 ] 
17:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:50:  Read & Verify  Lba:0x00000080 Transfer Length:0x0001   
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5E10>, <py_sfcl.CommandDataDefinition object at 0x0625A2D0>) , Command count = 4993 ] 
17:17:50: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625A330>, <py_sfcl.CommandDataDefinition object at 0x0625A360>) , Command count = 4994 ] 
17:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:50:  Read & Verify  Lba:0x00000081 Transfer Length:0x0001   
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261D50>, <py_sfcl.CommandDataDefinition object at 0x06261D80>) , Command count = 4995 ] 
17:17:50: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED090>, <py_sfcl.CommandDataDefinition object at 0x0625A420>) , Command count = 4996 ] 
17:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:50:  Read & Verify  Lba:0x00000082 Transfer Length:0x0001   
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED6C0>, <py_sfcl.CommandDataDefinition object at 0x061EDBA0>) , Command count = 4997 ] 
17:17:50: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9D20>, <py_sfcl.CommandDataDefinition object at 0x0625A4B0>) , Command count = 4998 ] 
17:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:50:  Read & Verify  Lba:0x00000083 Transfer Length:0x0001   
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5F30>, <py_sfcl.CommandDataDefinition object at 0x0625A510>) , Command count = 4999 ] 
17:17:50: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED870>, <py_sfcl.CommandDataDefinition object at 0x0625A570>) , Command count = 5000 ] 
17:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:50:  Read & Verify  Lba:0x00000084 Transfer Length:0x0001   
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5F90>, <py_sfcl.CommandDataDefinition object at 0x0625A5D0>) , Command count = 5001 ] 
17:17:50: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5F60>, <py_sfcl.CommandDataDefinition object at 0x0625A630>) , Command count = 5002 ] 
17:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:50:  Read & Verify  Lba:0x00000085 Transfer Length:0x0001   
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F55D0>, <py_sfcl.CommandDataDefinition object at 0x0625A690>) , Command count = 5003 ] 
17:17:50: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5FC0>, <py_sfcl.CommandDataDefinition object at 0x0625A6F0>) , Command count = 5004 ] 
17:17:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:51:  Read & Verify  Lba:0x00000086 Transfer Length:0x0001   
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F54B0>, <py_sfcl.CommandDataDefinition object at 0x0625A750>) , Command count = 5005 ] 
17:17:51: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDF30>, <py_sfcl.CommandDataDefinition object at 0x0625A7B0>) , Command count = 5006 ] 
17:17:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:51:  Read & Verify  Lba:0x00000087 Transfer Length:0x0001   
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDFC0>, <py_sfcl.CommandDataDefinition object at 0x0625A810>) , Command count = 5007 ] 
17:17:51: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDE10>, <py_sfcl.CommandDataDefinition object at 0x0625A870>) , Command count = 5008 ] 
17:17:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:51:  Read & Verify  Lba:0x00000088 Transfer Length:0x0001   
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDEA0>, <py_sfcl.CommandDataDefinition object at 0x0625A8D0>) , Command count = 5009 ] 
17:17:51: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5ED0>, <py_sfcl.CommandDataDefinition object at 0x0625A930>) , Command count = 5010 ] 
17:17:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:51:  Read & Verify  Lba:0x00000089 Transfer Length:0x0001   
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDC30>, <py_sfcl.CommandDataDefinition object at 0x0625A990>) , Command count = 5011 ] 
17:17:51: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDE70>, <py_sfcl.CommandDataDefinition object at 0x0625A9F0>) , Command count = 5012 ] 
17:17:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:51:  Read & Verify  Lba:0x0000008A Transfer Length:0x0001   
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED960>, <py_sfcl.CommandDataDefinition object at 0x0625AA50>) , Command count = 5013 ] 
17:17:51: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA50>, <py_sfcl.CommandDataDefinition object at 0x0625AAB0>) , Command count = 5014 ] 
17:17:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:51:  Read & Verify  Lba:0x0000008B Transfer Length:0x0001   
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED930>, <py_sfcl.CommandDataDefinition object at 0x0625AB10>) , Command count = 5015 ] 
17:17:51: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED1B0>, <py_sfcl.CommandDataDefinition object at 0x0625AB70>) , Command count = 5016 ] 
17:17:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:51:  Read & Verify  Lba:0x0000008C Transfer Length:0x0001   
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED810>, <py_sfcl.CommandDataDefinition object at 0x0625ABD0>) , Command count = 5017 ] 
17:17:51: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05405930>, <py_sfcl.CommandDataDefinition object at 0x0625AC30>) , Command count = 5018 ] 
17:17:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:51:  Read & Verify  Lba:0x0000008D Transfer Length:0x0001   
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED6F0>, <py_sfcl.CommandDataDefinition object at 0x0625AC90>) , Command count = 5019 ] 
17:17:51: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5270>, <py_sfcl.CommandDataDefinition object at 0x0625ACF0>) , Command count = 5020 ] 
17:17:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:51:  Read & Verify  Lba:0x0000008E Transfer Length:0x0001   
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED5D0>, <py_sfcl.CommandDataDefinition object at 0x0625AD50>) , Command count = 5021 ] 
17:17:51: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED360>, <py_sfcl.CommandDataDefinition object at 0x0625ADB0>) , Command count = 5022 ] 
17:17:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:51:  Read & Verify  Lba:0x0000008F Transfer Length:0x0001   
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED4B0>, <py_sfcl.CommandDataDefinition object at 0x0625AE10>) , Command count = 5023 ] 
17:17:51: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED390>, <py_sfcl.CommandDataDefinition object at 0x0625AE70>) , Command count = 5024 ] 
17:17:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:51:  Read & Verify  Lba:0x00000090 Transfer Length:0x0001   
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED120>, <py_sfcl.CommandDataDefinition object at 0x0625AED0>) , Command count = 5025 ] 
17:17:51: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED270>, <py_sfcl.CommandDataDefinition object at 0x0625AF30>) , Command count = 5026 ] 
17:17:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:51:  Read & Verify  Lba:0x00000091 Transfer Length:0x0001   
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9E40>, <py_sfcl.CommandDataDefinition object at 0x0625AF90>) , Command count = 5027 ] 
17:17:51: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9F30>, <py_sfcl.CommandDataDefinition object at 0x0625C030>) , Command count = 5028 ] 
17:17:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:51:  Read & Verify  Lba:0x00000092 Transfer Length:0x0001   
17:17:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED5A0>, <py_sfcl.CommandDataDefinition object at 0x0625C090>) , Command count = 5029 ] 
17:17:52: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9E10>, <py_sfcl.CommandDataDefinition object at 0x0625C0F0>) , Command count = 5030 ] 
17:17:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:52:  Read & Verify  Lba:0x00000093 Transfer Length:0x0001   
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9EA0>, <py_sfcl.CommandDataDefinition object at 0x0625C150>) , Command count = 5031 ] 
17:17:52: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9ED0>, <py_sfcl.CommandDataDefinition object at 0x0625C1B0>) , Command count = 5032 ] 
17:17:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:52:  Read & Verify  Lba:0x00000094 Transfer Length:0x0001   
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9C60>, <py_sfcl.CommandDataDefinition object at 0x0625C210>) , Command count = 5033 ] 
17:17:52: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9DB0>, <py_sfcl.CommandDataDefinition object at 0x0625C270>) , Command count = 5034 ] 
17:17:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:52:  Read & Verify  Lba:0x00000095 Transfer Length:0x0001   
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9B70>, <py_sfcl.CommandDataDefinition object at 0x0625C2D0>) , Command count = 5035 ] 
17:17:52: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E96C0>, <py_sfcl.CommandDataDefinition object at 0x0625C330>) , Command count = 5036 ] 
17:17:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:52:  Read & Verify  Lba:0x00000096 Transfer Length:0x0001   
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E99C0>, <py_sfcl.CommandDataDefinition object at 0x0625C390>) , Command count = 5037 ] 
17:17:52: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9630>, <py_sfcl.CommandDataDefinition object at 0x0625C3F0>) , Command count = 5038 ] 
17:17:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:52:  Read & Verify  Lba:0x00000097 Transfer Length:0x0001   
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E96F0>, <py_sfcl.CommandDataDefinition object at 0x0625C450>) , Command count = 5039 ] 
17:17:52: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052F4540>, <py_sfcl.CommandDataDefinition object at 0x0625C4B0>) , Command count = 5040 ] 
17:17:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:52:  Read & Verify  Lba:0x00000098 Transfer Length:0x0001   
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E92D0>, <py_sfcl.CommandDataDefinition object at 0x0625C510>) , Command count = 5041 ] 
17:17:52: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5360>, <py_sfcl.CommandDataDefinition object at 0x0625C570>) , Command count = 5042 ] 
17:17:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:52:  Read & Verify  Lba:0x00000099 Transfer Length:0x0001   
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5C90>, <py_sfcl.CommandDataDefinition object at 0x0625C5D0>) , Command count = 5043 ] 
17:17:52: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5390>, <py_sfcl.CommandDataDefinition object at 0x0625C630>) , Command count = 5044 ] 
17:17:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:52:  Read & Verify  Lba:0x0000009A Transfer Length:0x0001   
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053C6CF0>, <py_sfcl.CommandDataDefinition object at 0x0625C690>) , Command count = 5045 ] 
17:17:52: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05400C30>, <py_sfcl.CommandDataDefinition object at 0x0625C6F0>) , Command count = 5046 ] 
17:17:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:52:  Read & Verify  Lba:0x0000009B Transfer Length:0x0001   
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05405630>, <py_sfcl.CommandDataDefinition object at 0x0625C750>) , Command count = 5047 ] 
17:17:52: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDDE0>, <py_sfcl.CommandDataDefinition object at 0x0625C7B0>) , Command count = 5048 ] 
17:17:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:52:  Read & Verify  Lba:0x0000009C Transfer Length:0x0001   
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054056F0>, <py_sfcl.CommandDataDefinition object at 0x0625C810>) , Command count = 5049 ] 
17:17:52: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9450>, <py_sfcl.CommandDataDefinition object at 0x0625C870>) , Command count = 5050 ] 
17:17:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:53:  Read & Verify  Lba:0x0000009D Transfer Length:0x0001   
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E97B0>, <py_sfcl.CommandDataDefinition object at 0x0625C8D0>) , Command count = 5051 ] 
17:17:53: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0540D180>, <py_sfcl.CommandDataDefinition object at 0x0625C930>) , Command count = 5052 ] 
17:17:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:53:  Read & Verify  Lba:0x0000009E Transfer Length:0x0001   
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9690>, <py_sfcl.CommandDataDefinition object at 0x0625C990>) , Command count = 5053 ] 
17:17:53: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612FDE0>, <py_sfcl.CommandDataDefinition object at 0x0625C9F0>) , Command count = 5054 ] 
17:17:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:53:  Read & Verify  Lba:0x0000009F Transfer Length:0x0001   
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDDB0>, <py_sfcl.CommandDataDefinition object at 0x0625CA50>) , Command count = 5055 ] 
17:17:53: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05405780>, <py_sfcl.CommandDataDefinition object at 0x0625CAB0>) , Command count = 5056 ] 
17:17:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:53:  Read & Verify  Lba:0x000000A0 Transfer Length:0x0001   
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0540DE10>, <py_sfcl.CommandDataDefinition object at 0x0625CB10>) , Command count = 5057 ] 
17:17:53: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0540DFC0>, <py_sfcl.CommandDataDefinition object at 0x0625CB70>) , Command count = 5058 ] 
17:17:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:53:  Read & Verify  Lba:0x000000A1 Transfer Length:0x0001   
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDC00>, <py_sfcl.CommandDataDefinition object at 0x0625CBD0>) , Command count = 5059 ] 
17:17:53: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05415ED0>, <py_sfcl.CommandDataDefinition object at 0x0625CC30>) , Command count = 5060 ] 
17:17:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:53:  Read & Verify  Lba:0x000000A2 Transfer Length:0x0001   
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED8D0>, <py_sfcl.CommandDataDefinition object at 0x0625CC90>) , Command count = 5061 ] 
17:17:53: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05415F00>, <py_sfcl.CommandDataDefinition object at 0x0625CCF0>) , Command count = 5062 ] 
17:17:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:53:  Read & Verify  Lba:0x000000A3 Transfer Length:0x0001   
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0540DBD0>, <py_sfcl.CommandDataDefinition object at 0x0625CD50>) , Command count = 5063 ] 
17:17:53: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05415300>, <py_sfcl.CommandDataDefinition object at 0x0625CDB0>) , Command count = 5064 ] 
17:17:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:53:  Read & Verify  Lba:0x000000A4 Transfer Length:0x0001   
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE180>, <py_sfcl.CommandDataDefinition object at 0x0625CE10>) , Command count = 5065 ] 
17:17:53: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE1B0>, <py_sfcl.CommandDataDefinition object at 0x0625CE70>) , Command count = 5066 ] 
17:17:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:53:  Read & Verify  Lba:0x000000A5 Transfer Length:0x0001   
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE1E0>, <py_sfcl.CommandDataDefinition object at 0x0625CED0>) , Command count = 5067 ] 
17:17:53: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE210>, <py_sfcl.CommandDataDefinition object at 0x0625CF30>) , Command count = 5068 ] 
17:17:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:53:  Read & Verify  Lba:0x000000A6 Transfer Length:0x0001   
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE330>, <py_sfcl.CommandDataDefinition object at 0x0625CF90>) , Command count = 5069 ] 
17:17:53: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE3C0>, <py_sfcl.CommandDataDefinition object at 0x0625D030>) , Command count = 5070 ] 
17:17:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:53:  Read & Verify  Lba:0x000000A7 Transfer Length:0x0001   
17:17:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE450>, <py_sfcl.CommandDataDefinition object at 0x0625D090>) , Command count = 5071 ] 
17:17:54: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE480>, <py_sfcl.CommandDataDefinition object at 0x0625D0F0>) , Command count = 5072 ] 
17:17:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:54:  Read & Verify  Lba:0x000000A8 Transfer Length:0x0001   
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE4B0>, <py_sfcl.CommandDataDefinition object at 0x0625D150>) , Command count = 5073 ] 
17:17:54: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE4E0>, <py_sfcl.CommandDataDefinition object at 0x0625D1B0>) , Command count = 5074 ] 
17:17:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:54:  Read & Verify  Lba:0x000000A9 Transfer Length:0x0001   
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053D29C0>, <py_sfcl.CommandDataDefinition object at 0x0625D210>) , Command count = 5075 ] 
17:17:54: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE570>, <py_sfcl.CommandDataDefinition object at 0x0625D270>) , Command count = 5076 ] 
17:17:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:54:  Read & Verify  Lba:0x000000AA Transfer Length:0x0001   
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE510>, <py_sfcl.CommandDataDefinition object at 0x0625D2D0>) , Command count = 5077 ] 
17:17:54: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F52A0>, <py_sfcl.CommandDataDefinition object at 0x0625D330>) , Command count = 5078 ] 
17:17:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:54:  Read & Verify  Lba:0x000000AB Transfer Length:0x0001   
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E97E0>, <py_sfcl.CommandDataDefinition object at 0x0625D390>) , Command count = 5079 ] 
17:17:54: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E90C0>, <py_sfcl.CommandDataDefinition object at 0x0625D3F0>) , Command count = 5080 ] 
17:17:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:54:  Read & Verify  Lba:0x000000AC Transfer Length:0x0001   
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE540>, <py_sfcl.CommandDataDefinition object at 0x0625D450>) , Command count = 5081 ] 
17:17:54: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060EB060>, <py_sfcl.CommandDataDefinition object at 0x0625D4B0>) , Command count = 5082 ] 
17:17:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:54:  Read & Verify  Lba:0x000000AD Transfer Length:0x0001   
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9A80>, <py_sfcl.CommandDataDefinition object at 0x0625D510>) , Command count = 5083 ] 
17:17:54: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D20C0>, <py_sfcl.CommandDataDefinition object at 0x0625D570>) , Command count = 5084 ] 
17:17:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:54:  Read & Verify  Lba:0x000000AE Transfer Length:0x0001   
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F58D0>, <py_sfcl.CommandDataDefinition object at 0x0625D5D0>) , Command count = 5085 ] 
17:17:54: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D2180>, <py_sfcl.CommandDataDefinition object at 0x0625D630>) , Command count = 5086 ] 
17:17:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:54:  Read & Verify  Lba:0x000000AF Transfer Length:0x0001   
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D22A0>, <py_sfcl.CommandDataDefinition object at 0x0625D690>) , Command count = 5087 ] 
17:17:54: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DECF0>, <py_sfcl.CommandDataDefinition object at 0x0625D6F0>) , Command count = 5088 ] 
17:17:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:54:  Read & Verify  Lba:0x000000B0 Transfer Length:0x0001   
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9240>, <py_sfcl.CommandDataDefinition object at 0x0625D750>) , Command count = 5089 ] 
17:17:54: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9300>, <py_sfcl.CommandDataDefinition object at 0x0625D7B0>) , Command count = 5090 ] 
17:17:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:54:  Read & Verify  Lba:0x000000B1 Transfer Length:0x0001   
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9120>, <py_sfcl.CommandDataDefinition object at 0x0625D810>) , Command count = 5091 ] 
17:17:54: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9090>, <py_sfcl.CommandDataDefinition object at 0x0625D870>) , Command count = 5092 ] 
17:17:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:54:  Read & Verify  Lba:0x000000B2 Transfer Length:0x0001   
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9060>, <py_sfcl.CommandDataDefinition object at 0x0625D8D0>) , Command count = 5093 ] 
17:17:54: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9150>, <py_sfcl.CommandDataDefinition object at 0x0625D930>) , Command count = 5094 ] 
17:17:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:54:  Read & Verify  Lba:0x000000B3 Transfer Length:0x0001   
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9210>, <py_sfcl.CommandDataDefinition object at 0x0625D990>) , Command count = 5095 ] 
17:17:54: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E90F0>, <py_sfcl.CommandDataDefinition object at 0x0625D9F0>) , Command count = 5096 ] 
17:17:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:55:  Read & Verify  Lba:0x000000B4 Transfer Length:0x0001   
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9420>, <py_sfcl.CommandDataDefinition object at 0x0625DA50>) , Command count = 5097 ] 
17:17:55: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9390>, <py_sfcl.CommandDataDefinition object at 0x0625DAB0>) , Command count = 5098 ] 
17:17:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:55:  Read & Verify  Lba:0x000000B5 Transfer Length:0x0001   
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DEB70>, <py_sfcl.CommandDataDefinition object at 0x0625DB10>) , Command count = 5099 ] 
17:17:55: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9600>, <py_sfcl.CommandDataDefinition object at 0x0625DB70>) , Command count = 5100 ] 
17:17:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:55:  Read & Verify  Lba:0x000000B6 Transfer Length:0x0001   
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9270>, <py_sfcl.CommandDataDefinition object at 0x0625DBD0>) , Command count = 5101 ] 
17:17:55: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E98D0>, <py_sfcl.CommandDataDefinition object at 0x0625DC30>) , Command count = 5102 ] 
17:17:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:55:  Read & Verify  Lba:0x000000B7 Transfer Length:0x0001   
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDB40>, <py_sfcl.CommandDataDefinition object at 0x0625DC90>) , Command count = 5103 ] 
17:17:55: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5C60>, <py_sfcl.CommandDataDefinition object at 0x0625DCF0>) , Command count = 5104 ] 
17:17:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:55:  Read & Verify  Lba:0x000000B8 Transfer Length:0x0001   
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05405750>, <py_sfcl.CommandDataDefinition object at 0x0625DD50>) , Command count = 5105 ] 
17:17:55: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5870>, <py_sfcl.CommandDataDefinition object at 0x0625DDB0>) , Command count = 5106 ] 
17:17:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:55:  Read & Verify  Lba:0x000000B9 Transfer Length:0x0001   
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F51B0>, <py_sfcl.CommandDataDefinition object at 0x0625DE10>) , Command count = 5107 ] 
17:17:55: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5240>, <py_sfcl.CommandDataDefinition object at 0x0625DE70>) , Command count = 5108 ] 
17:17:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:55:  Read & Verify  Lba:0x000000BA Transfer Length:0x0001   
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5210>, <py_sfcl.CommandDataDefinition object at 0x0625DED0>) , Command count = 5109 ] 
17:17:55: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA20>, <py_sfcl.CommandDataDefinition object at 0x0625DF30>) , Command count = 5110 ] 
17:17:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:55:  Read & Verify  Lba:0x000000BB Transfer Length:0x0001   
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED990>, <py_sfcl.CommandDataDefinition object at 0x0625DF90>) , Command count = 5111 ] 
17:17:55: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDB70>, <py_sfcl.CommandDataDefinition object at 0x0625E030>) , Command count = 5112 ] 
17:17:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:55:  Read & Verify  Lba:0x000000BC Transfer Length:0x0001   
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9B10>, <py_sfcl.CommandDataDefinition object at 0x0625E090>) , Command count = 5113 ] 
17:17:55: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9990>, <py_sfcl.CommandDataDefinition object at 0x0625E0F0>) , Command count = 5114 ] 
17:17:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:55:  Read & Verify  Lba:0x000000BD Transfer Length:0x0001   
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9BA0>, <py_sfcl.CommandDataDefinition object at 0x0625E150>) , Command count = 5115 ] 
17:17:55: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9C00>, <py_sfcl.CommandDataDefinition object at 0x0625E1B0>) , Command count = 5116 ] 
17:17:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:55:  Read & Verify  Lba:0x000000BE Transfer Length:0x0001   
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9C30>, <py_sfcl.CommandDataDefinition object at 0x0625E210>) , Command count = 5117 ] 
17:17:55: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9BD0>, <py_sfcl.CommandDataDefinition object at 0x0625E270>) , Command count = 5118 ] 
17:17:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:55:  Read & Verify  Lba:0x000000BF Transfer Length:0x0001   
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9CC0>, <py_sfcl.CommandDataDefinition object at 0x0625E2D0>) , Command count = 5119 ] 
17:17:55: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9AE0>, <py_sfcl.CommandDataDefinition object at 0x0625E330>) , Command count = 5120 ] 
17:17:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:56:  Read & Verify  Lba:0x000000C0 Transfer Length:0x0001   
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9D50>, <py_sfcl.CommandDataDefinition object at 0x0625E390>) , Command count = 5121 ] 
17:17:56: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9CF0>, <py_sfcl.CommandDataDefinition object at 0x0625E3F0>) , Command count = 5122 ] 
17:17:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:56:  Read & Verify  Lba:0x000000C1 Transfer Length:0x0001   
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9DE0>, <py_sfcl.CommandDataDefinition object at 0x0625E450>) , Command count = 5123 ] 
17:17:56: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9D80>, <py_sfcl.CommandDataDefinition object at 0x0625E4B0>) , Command count = 5124 ] 
17:17:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:56:  Read & Verify  Lba:0x000000C2 Transfer Length:0x0001   
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9E70>, <py_sfcl.CommandDataDefinition object at 0x0625E510>) , Command count = 5125 ] 
17:17:56: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED030>, <py_sfcl.CommandDataDefinition object at 0x0625E570>) , Command count = 5126 ] 
17:17:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:56:  Read & Verify  Lba:0x000000C3 Transfer Length:0x0001   
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9F00>, <py_sfcl.CommandDataDefinition object at 0x0625E5D0>) , Command count = 5127 ] 
17:17:56: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9F60>, <py_sfcl.CommandDataDefinition object at 0x0625E630>) , Command count = 5128 ] 
17:17:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:56:  Read & Verify  Lba:0x000000C4 Transfer Length:0x0001   
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9F90>, <py_sfcl.CommandDataDefinition object at 0x0625E690>) , Command count = 5129 ] 
17:17:56: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5930>, <py_sfcl.CommandDataDefinition object at 0x0625E6F0>) , Command count = 5130 ] 
17:17:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:56:  Read & Verify  Lba:0x000000C5 Transfer Length:0x0001   
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5120>, <py_sfcl.CommandDataDefinition object at 0x0625E750>) , Command count = 5131 ] 
17:17:56: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DBF90>, <py_sfcl.CommandDataDefinition object at 0x0625E7B0>) , Command count = 5132 ] 
17:17:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:56:  Read & Verify  Lba:0x000000C6 Transfer Length:0x0001   
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053F7930>, <py_sfcl.CommandDataDefinition object at 0x0625E810>) , Command count = 5133 ] 
17:17:56: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5990>, <py_sfcl.CommandDataDefinition object at 0x0625E870>) , Command count = 5134 ] 
17:17:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:56:  Read & Verify  Lba:0x000000C7 Transfer Length:0x0001   
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DBE40>, <py_sfcl.CommandDataDefinition object at 0x0625E8D0>) , Command count = 5135 ] 
17:17:56: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED300>, <py_sfcl.CommandDataDefinition object at 0x0625E930>) , Command count = 5136 ] 
17:17:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:56:  Read & Verify  Lba:0x000000C8 Transfer Length:0x0001   
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED4E0>, <py_sfcl.CommandDataDefinition object at 0x0625E990>) , Command count = 5137 ] 
17:17:56: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E99F0>, <py_sfcl.CommandDataDefinition object at 0x0625E9F0>) , Command count = 5138 ] 
17:17:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:56:  Read & Verify  Lba:0x000000C9 Transfer Length:0x0001   
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED150>, <py_sfcl.CommandDataDefinition object at 0x0625EA50>) , Command count = 5139 ] 
17:17:56: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054056C0>, <py_sfcl.CommandDataDefinition object at 0x0625EAB0>) , Command count = 5140 ] 
17:17:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:56:  Read & Verify  Lba:0x000000CA Transfer Length:0x0001   
17:17:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5D20>, <py_sfcl.CommandDataDefinition object at 0x0625EB10>) , Command count = 5141 ] 
17:17:56: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053CB690>, <py_sfcl.CommandDataDefinition object at 0x0625EB70>) , Command count = 5142 ] 
17:17:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:57:  Read & Verify  Lba:0x000000CB Transfer Length:0x0001   
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9750>, <py_sfcl.CommandDataDefinition object at 0x0625EBD0>) , Command count = 5143 ] 
17:17:57: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9720>, <py_sfcl.CommandDataDefinition object at 0x0625EC30>) , Command count = 5144 ] 
17:17:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:57:  Read & Verify  Lba:0x000000CC Transfer Length:0x0001   
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9660>, <py_sfcl.CommandDataDefinition object at 0x0625EC90>) , Command count = 5145 ] 
17:17:57: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED0C0>, <py_sfcl.CommandDataDefinition object at 0x0625ECF0>) , Command count = 5146 ] 
17:17:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:57:  Read & Verify  Lba:0x000000CD Transfer Length:0x0001   
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED450>, <py_sfcl.CommandDataDefinition object at 0x0625ED50>) , Command count = 5147 ] 
17:17:57: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED210>, <py_sfcl.CommandDataDefinition object at 0x0625EDB0>) , Command count = 5148 ] 
17:17:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:57:  Read & Verify  Lba:0x000000CE Transfer Length:0x0001   
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053F7390>, <py_sfcl.CommandDataDefinition object at 0x0625EE10>) , Command count = 5149 ] 
17:17:57: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED240>, <py_sfcl.CommandDataDefinition object at 0x0625EE70>) , Command count = 5150 ] 
17:17:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:57:  Read & Verify  Lba:0x000000CF Transfer Length:0x0001   
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED0F0>, <py_sfcl.CommandDataDefinition object at 0x0625EED0>) , Command count = 5151 ] 
17:17:57: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D2030>, <py_sfcl.CommandDataDefinition object at 0x0625EF30>) , Command count = 5152 ] 
17:17:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:57:  Read & Verify  Lba:0x000000D0 Transfer Length:0x0001   
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED330>, <py_sfcl.CommandDataDefinition object at 0x0625EF90>) , Command count = 5153 ] 
17:17:57: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DBED0>, <py_sfcl.CommandDataDefinition object at 0x06260030>) , Command count = 5154 ] 
17:17:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:57:  Read & Verify  Lba:0x000000D1 Transfer Length:0x0001   
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DBF60>, <py_sfcl.CommandDataDefinition object at 0x06260090>) , Command count = 5155 ] 
17:17:57: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5EA0>, <py_sfcl.CommandDataDefinition object at 0x062600F0>) , Command count = 5156 ] 
17:17:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:57:  Read & Verify  Lba:0x000000D2 Transfer Length:0x0001   
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED420>, <py_sfcl.CommandDataDefinition object at 0x06260150>) , Command count = 5157 ] 
17:17:57: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED690>, <py_sfcl.CommandDataDefinition object at 0x062601B0>) , Command count = 5158 ] 
17:17:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:57:  Read & Verify  Lba:0x000000D3 Transfer Length:0x0001   
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED7E0>, <py_sfcl.CommandDataDefinition object at 0x06260210>) , Command count = 5159 ] 
17:17:57: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED720>, <py_sfcl.CommandDataDefinition object at 0x06260270>) , Command count = 5160 ] 
17:17:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:57:  Read & Verify  Lba:0x000000D4 Transfer Length:0x0001   
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED570>, <py_sfcl.CommandDataDefinition object at 0x062602D0>) , Command count = 5161 ] 
17:17:57: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED7B0>, <py_sfcl.CommandDataDefinition object at 0x06260330>) , Command count = 5162 ] 
17:17:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:57:  Read & Verify  Lba:0x000000D5 Transfer Length:0x0001   
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDBD0>, <py_sfcl.CommandDataDefinition object at 0x06260390>) , Command count = 5163 ] 
17:17:57: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05415F60>, <py_sfcl.CommandDataDefinition object at 0x062603F0>) , Command count = 5164 ] 
17:17:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:57:  Read & Verify  Lba:0x000000D6 Transfer Length:0x0001   
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED660>, <py_sfcl.CommandDataDefinition object at 0x06260450>) , Command count = 5165 ] 
17:17:57: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED180>, <py_sfcl.CommandDataDefinition object at 0x062604B0>) , Command count = 5166 ] 
17:17:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:58:  Read & Verify  Lba:0x000000D7 Transfer Length:0x0001   
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDB10>, <py_sfcl.CommandDataDefinition object at 0x06260510>) , Command count = 5167 ] 
17:17:58: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED750>, <py_sfcl.CommandDataDefinition object at 0x06260570>) , Command count = 5168 ] 
17:17:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:58:  Read & Verify  Lba:0x000000D8 Transfer Length:0x0001   
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED900>, <py_sfcl.CommandDataDefinition object at 0x062605D0>) , Command count = 5169 ] 
17:17:58: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED2A0>, <py_sfcl.CommandDataDefinition object at 0x06260630>) , Command count = 5170 ] 
17:17:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:58:  Read & Verify  Lba:0x000000D9 Transfer Length:0x0001   
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED9F0>, <py_sfcl.CommandDataDefinition object at 0x06260690>) , Command count = 5171 ] 
17:17:58: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDD20>, <py_sfcl.CommandDataDefinition object at 0x062606F0>) , Command count = 5172 ] 
17:17:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:58:  Read & Verify  Lba:0x000000DA Transfer Length:0x0001   
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA80>, <py_sfcl.CommandDataDefinition object at 0x06260750>) , Command count = 5173 ] 
17:17:58: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE7E0>, <py_sfcl.CommandDataDefinition object at 0x062607B0>) , Command count = 5174 ] 
17:17:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:58:  Read & Verify  Lba:0x000000DB Transfer Length:0x0001   
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0540D240>, <py_sfcl.CommandDataDefinition object at 0x06260810>) , Command count = 5175 ] 
17:17:58: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DBD50>, <py_sfcl.CommandDataDefinition object at 0x06260870>) , Command count = 5176 ] 
17:17:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:58:  Read & Verify  Lba:0x000000DC Transfer Length:0x0001   
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5D50>, <py_sfcl.CommandDataDefinition object at 0x062608D0>) , Command count = 5177 ] 
17:17:58: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDAB0>, <py_sfcl.CommandDataDefinition object at 0x06260930>) , Command count = 5178 ] 
17:17:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:58:  Read & Verify  Lba:0x000000DD Transfer Length:0x0001   
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052F43C0>, <py_sfcl.CommandDataDefinition object at 0x06260990>) , Command count = 5179 ] 
17:17:58: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDCC0>, <py_sfcl.CommandDataDefinition object at 0x062609F0>) , Command count = 5180 ] 
17:17:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:58:  Read & Verify  Lba:0x000000DE Transfer Length:0x0001   
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDCF0>, <py_sfcl.CommandDataDefinition object at 0x06260A50>) , Command count = 5181 ] 
17:17:58: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDD50>, <py_sfcl.CommandDataDefinition object at 0x06260AB0>) , Command count = 5182 ] 
17:17:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:58:  Read & Verify  Lba:0x000000DF Transfer Length:0x0001   
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED780>, <py_sfcl.CommandDataDefinition object at 0x06260B10>) , Command count = 5183 ] 
17:17:58: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5300>, <py_sfcl.CommandDataDefinition object at 0x06260B70>) , Command count = 5184 ] 
17:17:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:58:  Read & Verify  Lba:0x000000E0 Transfer Length:0x0001   
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F52D0>, <py_sfcl.CommandDataDefinition object at 0x061E9810>) , Command count = 5185 ] 
17:17:58: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDED0>, <py_sfcl.CommandDataDefinition object at 0x06260C30>) , Command count = 5186 ] 
17:17:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:58:  Read & Verify  Lba:0x000000E1 Transfer Length:0x0001   
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDF60>, <py_sfcl.CommandDataDefinition object at 0x06260C90>) , Command count = 5187 ] 
17:17:58: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5030>, <py_sfcl.CommandDataDefinition object at 0x06260CF0>) , Command count = 5188 ] 
17:17:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:58:  Read & Verify  Lba:0x000000E2 Transfer Length:0x0001   
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5150>, <py_sfcl.CommandDataDefinition object at 0x06260D50>) , Command count = 5189 ] 
17:17:58: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5060>, <py_sfcl.CommandDataDefinition object at 0x06260DB0>) , Command count = 5190 ] 
17:17:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:58:  Read & Verify  Lba:0x000000E3 Transfer Length:0x0001   
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED2D0>, <py_sfcl.CommandDataDefinition object at 0x06260E10>) , Command count = 5191 ] 
17:17:59: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED840>, <py_sfcl.CommandDataDefinition object at 0x06260E70>) , Command count = 5192 ] 
17:17:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:59:  Read & Verify  Lba:0x000000E4 Transfer Length:0x0001   
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F50F0>, <py_sfcl.CommandDataDefinition object at 0x06260ED0>) , Command count = 5193 ] 
17:17:59: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F56F0>, <py_sfcl.CommandDataDefinition object at 0x06260F30>) , Command count = 5194 ] 
17:17:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:59:  Read & Verify  Lba:0x000000E5 Transfer Length:0x0001   
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5510>, <py_sfcl.CommandDataDefinition object at 0x06260F90>) , Command count = 5195 ] 
17:17:59: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDAE0>, <py_sfcl.CommandDataDefinition object at 0x06261030>) , Command count = 5196 ] 
17:17:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:59:  Read & Verify  Lba:0x000000E6 Transfer Length:0x0001   
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5090>, <py_sfcl.CommandDataDefinition object at 0x06261090>) , Command count = 5197 ] 
17:17:59: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F58A0>, <py_sfcl.CommandDataDefinition object at 0x062610F0>) , Command count = 5198 ] 
17:17:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:59:  Read & Verify  Lba:0x000000E7 Transfer Length:0x0001   
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F57E0>, <py_sfcl.CommandDataDefinition object at 0x06261150>) , Command count = 5199 ] 
17:17:59: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDC90>, <py_sfcl.CommandDataDefinition object at 0x062611B0>) , Command count = 5200 ] 
17:17:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:59:  Read & Verify  Lba:0x000000E8 Transfer Length:0x0001   
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5750>, <py_sfcl.CommandDataDefinition object at 0x06261210>) , Command count = 5201 ] 
17:17:59: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9FC0>, <py_sfcl.CommandDataDefinition object at 0x06261270>) , Command count = 5202 ] 
17:17:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:59:  Read & Verify  Lba:0x000000E9 Transfer Length:0x0001   
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDD80>, <py_sfcl.CommandDataDefinition object at 0x062612D0>) , Command count = 5203 ] 
17:17:59: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5330>, <py_sfcl.CommandDataDefinition object at 0x06261330>) , Command count = 5204 ] 
17:17:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:59:  Read & Verify  Lba:0x000000EA Transfer Length:0x0001   
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5450>, <py_sfcl.CommandDataDefinition object at 0x06261390>) , Command count = 5205 ] 
17:17:59: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDF90>, <py_sfcl.CommandDataDefinition object at 0x062613F0>) , Command count = 5206 ] 
17:17:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:59:  Read & Verify  Lba:0x000000EB Transfer Length:0x0001   
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5180>, <py_sfcl.CommandDataDefinition object at 0x06261450>) , Command count = 5207 ] 
17:17:59: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F54E0>, <py_sfcl.CommandDataDefinition object at 0x062614B0>) , Command count = 5208 ] 
17:17:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:59:  Read & Verify  Lba:0x000000EC Transfer Length:0x0001   
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5480>, <py_sfcl.CommandDataDefinition object at 0x06261510>) , Command count = 5209 ] 
17:17:59: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5570>, <py_sfcl.CommandDataDefinition object at 0x06261570>) , Command count = 5210 ] 
17:17:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:17:59:  Read & Verify  Lba:0x000000ED Transfer Length:0x0001   
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F53F0>, <py_sfcl.CommandDataDefinition object at 0x062615D0>) , Command count = 5211 ] 
17:17:59: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5630>, <py_sfcl.CommandDataDefinition object at 0x06261630>) , Command count = 5212 ] 
17:18:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:00:  Read & Verify  Lba:0x000000EE Transfer Length:0x0001   
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5660>, <py_sfcl.CommandDataDefinition object at 0x06261690>) , Command count = 5213 ] 
17:18:00: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F51E0>, <py_sfcl.CommandDataDefinition object at 0x062616F0>) , Command count = 5214 ] 
17:18:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:00:  Read & Verify  Lba:0x000000EF Transfer Length:0x0001   
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5780>, <py_sfcl.CommandDataDefinition object at 0x06261750>) , Command count = 5215 ] 
17:18:00: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5720>, <py_sfcl.CommandDataDefinition object at 0x062617B0>) , Command count = 5216 ] 
17:18:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:00:  Read & Verify  Lba:0x000000F0 Transfer Length:0x0001   
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5690>, <py_sfcl.CommandDataDefinition object at 0x061F50C0>) , Command count = 5217 ] 
17:18:00: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F53C0>, <py_sfcl.CommandDataDefinition object at 0x061F5E70>) , Command count = 5218 ] 
17:18:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:00:  Read & Verify  Lba:0x000000F1 Transfer Length:0x0001   
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDF00>, <py_sfcl.CommandDataDefinition object at 0x054154B0>) , Command count = 5219 ] 
17:18:00: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261870>, <py_sfcl.CommandDataDefinition object at 0x062618A0>) , Command count = 5220 ] 
17:18:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:00:  Read & Verify  Lba:0x000000F2 Transfer Length:0x0001   
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E93C0>, <py_sfcl.CommandDataDefinition object at 0x061FF810>) , Command count = 5221 ] 
17:18:00: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FF780>, <py_sfcl.CommandDataDefinition object at 0x061FF7E0>) , Command count = 5222 ] 
17:18:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:00:  Read & Verify  Lba:0x000000F3 Transfer Length:0x0001   
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FFF00>, <py_sfcl.CommandDataDefinition object at 0x061FFDE0>) , Command count = 5223 ] 
17:18:00: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FFE40>, <py_sfcl.CommandDataDefinition object at 0x061FFC30>) , Command count = 5224 ] 
17:18:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:00:  Read & Verify  Lba:0x000000F4 Transfer Length:0x0001   
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5A20>, <py_sfcl.CommandDataDefinition object at 0x062619C0>) , Command count = 5225 ] 
17:18:00: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E92A0>, <py_sfcl.CommandDataDefinition object at 0x06261A20>) , Command count = 5226 ] 
17:18:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:00:  Read & Verify  Lba:0x000000F5 Transfer Length:0x0001   
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5A80>, <py_sfcl.CommandDataDefinition object at 0x061FF5D0>) , Command count = 5227 ] 
17:18:00: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DBD80>, <py_sfcl.CommandDataDefinition object at 0x0540D1B0>) , Command count = 5228 ] 
17:18:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:00:  Read & Verify  Lba:0x000000F6 Transfer Length:0x0001   
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5B10>, <py_sfcl.CommandDataDefinition object at 0x061FF3C0>) , Command count = 5229 ] 
17:18:00: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5B70>, <py_sfcl.CommandDataDefinition object at 0x06255030>) , Command count = 5230 ] 
17:18:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:00:  Read & Verify  Lba:0x000000F7 Transfer Length:0x0001   
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5AE0>, <py_sfcl.CommandDataDefinition object at 0x061FFFC0>) , Command count = 5231 ] 
17:18:00: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5B40>, <py_sfcl.CommandDataDefinition object at 0x062551E0>) , Command count = 5232 ] 
17:18:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:00:  Read & Verify  Lba:0x000000F8 Transfer Length:0x0001   
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5BA0>, <py_sfcl.CommandDataDefinition object at 0x06261B40>) , Command count = 5233 ] 
17:18:00: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED3F0>, <py_sfcl.CommandDataDefinition object at 0x062550F0>) , Command count = 5234 ] 
17:18:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:00:  Read & Verify  Lba:0x000000F9 Transfer Length:0x0001   
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06255150>, <py_sfcl.CommandDataDefinition object at 0x06255180>) , Command count = 5235 ] 
17:18:00: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5BD0>, <py_sfcl.CommandDataDefinition object at 0x06255060>) , Command count = 5236 ] 
17:18:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:00:  Read & Verify  Lba:0x000000FA Transfer Length:0x0001   
17:18:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625A150>, <py_sfcl.CommandDataDefinition object at 0x06261C30>) , Command count = 5237 ] 
17:18:01: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5810>, <py_sfcl.CommandDataDefinition object at 0x062551B0>) , Command count = 5238 ] 
17:18:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:01:  Read & Verify  Lba:0x000000FB Transfer Length:0x0001   
17:18:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625A060>, <py_sfcl.CommandDataDefinition object at 0x0625A180>) , Command count = 5239 ] 
17:18:01: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625A1E0>, <py_sfcl.CommandDataDefinition object at 0x06261CC0>) , Command count = 5240 ] 
17:18:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:01:  Read & Verify  Lba:0x000000FC Transfer Length:0x0001   
17:18:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9960>, <py_sfcl.CommandDataDefinition object at 0x0625A030>) , Command count = 5241 ] 
17:18:01: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5CC0>, <py_sfcl.CommandDataDefinition object at 0x061E9780>) , Command count = 5242 ] 
17:18:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:01:  Read & Verify  Lba:0x000000FD Transfer Length:0x0001   
17:18:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5DB0>, <py_sfcl.CommandDataDefinition object at 0x0625A210>) , Command count = 5243 ] 
17:18:01: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5D80>, <py_sfcl.CommandDataDefinition object at 0x0625A270>) , Command count = 5244 ] 
17:18:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:01:  Read & Verify  Lba:0x000000FE Transfer Length:0x0001   
17:18:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5E10>, <py_sfcl.CommandDataDefinition object at 0x0625A2D0>) , Command count = 5245 ] 
17:18:01: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625A330>, <py_sfcl.CommandDataDefinition object at 0x0625A360>) , Command count = 5246 ] 
17:18:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:01:  Read & Verify  Lba:0x000000FF Transfer Length:0x0001   
17:18:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625A480>, <py_sfcl.CommandDataDefinition object at 0x06261D50>) , Command count = 5247 ] 
17:18:01: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED090>, <py_sfcl.CommandDataDefinition object at 0x0625A420>) , Command count = 5248 ] 
17:18:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:01:  Read & Verify  Lba:0x00000100 Transfer Length:0x0001   
17:18:01: [CF402_Card_functional_4_3_7_1_General_Lock_Unlock_operation]##### Single Write to the card from startLba:0x0 to endSector:0x100
17:18:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED6C0>, <py_sfcl.CommandDataDefinition object at 0x061EDBA0>) , Command count = 5249 ] 
17:18:01: CMD24[ WRITE_BLOCK ] Passed with R1 type response:[24, 0, 0, 9, 0, 11]
17:18:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9D20>, <py_sfcl.CommandDataDefinition object at 0x0625A4B0>) , Command count = 5250 ] 
17:18:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'WP_VIOLATION', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:01:  Write Lba:0x00000000 Transfer Length:0x0001 FAILED 

17:18:01: Failed Running script <module 'CF402_Card_functional_4_3_7_1_General_Lock_Unlock_operation' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_4_Card_Functional\CF402_Card_functional_4_3_7_1_General_Lock_Unlock_operation.pyc'> with error 
TestFailedError:                                   
   [CF409_Card_functional_4_3_6_1_PWP_TWP_managment]###[ERROR] :On Erase Operation Write Protection Error didn't occur
 
17:18:01: ########################################
17:18:01: ########################################
17:18:01: Stated Running script CH4372_Parameter_and_ResultCMD42 
17:18:01: ########################################
17:18:01: ###### Running Parameter and Result of CMD42 test 
17:18:01: [CH4372_Parameter_and_Result_Of_CMD42]### globallockunlock value is not 'No', test script is continued.
17:18:01: [CH4372_Parameter_and_Result_Of_CMD42]### TEST CASE FIRST ITERATION IS STARTED.
17:18:01: [GO4_globalInitCard]### Switch to Specify Card Type
17:18:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:04: Host Frequency set to 25000 KHz
17:18:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:04: [GO18_globalSetVolt]### Set Host Voltage value.
17:18:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:18:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x06265270>, 0x0, True) , Command count = 5251 ] 
17:18:04: [GO18_globalSetVolt]### Host voltage value is set.
17:18:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:18:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x061ED870>, 0x0, False) , Command count = 5252 ] 
17:18:04: [GO18_globalSetVolt]### Host voltage value is set.
17:18:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5253 ] 
17:18:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:18:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5254 ] 
17:18:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:18:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:18:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:18:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:18:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:18:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5255 ] 
17:18:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:18:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:18:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5FC0>, <py_sfcl.CommandDataDefinition object at 0x0625A6F0>) , Command count = 5256 ] 
17:18:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:18:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F54B0>, <py_sfcl.CommandDataDefinition object at 0x0625A750>) , Command count = 5257 ] 
17:18:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:18:04: [ SetCardRCA(0x1, 0xD555) , Command count = 5258 ] 
17:18:04: [DVTCommonLib]### Identification :Idenfication of card completed 

17:18:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:04: Host Frequency set to 25000 KHz
17:18:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:04: ####CSD Registe 2.0 Values####
17:18:04: CSD_STRUCTURE                                 :0x1
17:18:04: Reserv1                                       :0x0
17:18:04: Time Access 1 TAAC                            :0xe
17:18:04: Time Access 2 NSAC*100                        :0x0
17:18:04: Data Transfer Rate TRAN_SPEED                 :0x32
17:18:04: Card Command Classess CCC                     :0x5b5
17:18:04: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:04: DSR(driver stage register)  DSR_IMP           :0x0
17:18:04: Reserv2                                       :0x0
17:18:04: Device Size C_SIZE                            :0xedc8
17:18:04: Reserv3                                       :0x0
17:18:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:04: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:04: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:04: Reserv4                                       :0x0
17:18:04: Write Speed Factor R2W_FACTOR                 :0x2
17:18:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:04: FILE_FORMAT_GRP                               :0x0
17:18:04: COPY flag                                     :0x1
17:18:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:04: File_Format                                   :0x0
17:18:04: CRC                                           :0x0
17:18:04: ####CSD Registe Values####  

17:18:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:18:04: [GetSCRRegisterEntry] Passed
17:18:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:18:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:18:04: Data_Status_After Erases          : 0
17:18:04: CPRM Security Support             : No Security
17:18:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:18:04: Spec. Version                     : Version 3.0X
17:18:04: Extended Security Support         : Extended_Security_Not_Supported
17:18:04: Command Support                   : COMMAND_SUPPORT
17:18:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:18:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDFC0>, <py_sfcl.CommandDataDefinition object at 0x0625A5D0>) , Command count = 5259 ] 
17:18:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:18:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDE10>, <py_sfcl.CommandDataDefinition object at 0x0625A870>) , Command count = 5260 ] 
17:18:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:18:04: [ SetBusWidth(0x4) , Command count = 5261 ] 
17:18:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:18:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0625A930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5262 ] 
17:18:04: Protected Area Size 0x28000
17:18:04: Bus Width           2
17:18:04: Secure Mode         0
17:18:04: Speed  Class        4
17:18:04: Perf Move           0
17:18:04: Au Size             9
17:18:04: Erase Size          15
17:18:04: Erase Timeout       1
17:18:04: Erase offset        1
17:18:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:18:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:18:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:18:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5263 ] 
17:18:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:18:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:18:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:18:04: Host Frequency set to 100000 KHz
17:18:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:18:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:04: ####CSD Registe 2.0 Values####
17:18:04: CSD_STRUCTURE                                 :0x1
17:18:04: Reserv1                                       :0x0
17:18:04: Time Access 1 TAAC                            :0xe
17:18:04: Time Access 2 NSAC*100                        :0x0
17:18:04: Data Transfer Rate TRAN_SPEED                 :0xb
17:18:04: Card Command Classess CCC                     :0x5b5
17:18:04: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:04: DSR(driver stage register)  DSR_IMP           :0x0
17:18:04: Reserv2                                       :0x0
17:18:04: Device Size C_SIZE                            :0xedc8
17:18:04: Reserv3                                       :0x0
17:18:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:04: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:04: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:04: Reserv4                                       :0x0
17:18:05: Write Speed Factor R2W_FACTOR                 :0x2
17:18:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:05: FILE_FORMAT_GRP                               :0x0
17:18:05: COPY flag                                     :0x1
17:18:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:05: File_Format                                   :0x0
17:18:05: CRC                                           :0x0
17:18:05: ####CSD Registe Values####  

17:18:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDE70>, <py_sfcl.CommandDataDefinition object at 0x0625A630>) , Command count = 5264 ] 
17:18:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:18:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED960>, <py_sfcl.CommandDataDefinition object at 0x0625AA50>) , Command count = 5265 ] 
17:18:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:18:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:18:05: UNLOCKING the card
17:18:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA50>, <py_sfcl.CommandDataDefinition object at 0x0625AAB0>) , Command count = 5266 ] 
17:18:05: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
17:18:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDE40>, <py_sfcl.CommandDataDefinition object at 0x061ED930>) , Command count = 5267 ] 
17:18:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'LOCK_UNLOCK_FAILED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:05: [GO4_globalInitCard]### Switch to Specify Card Type
17:18:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:07: Host Frequency set to 25000 KHz
17:18:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:07: [GO18_globalSetVolt]### Set Host Voltage value.
17:18:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:18:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x061ED1B0>, 0x0, True) , Command count = 5268 ] 
17:18:07: [GO18_globalSetVolt]### Host voltage value is set.
17:18:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:18:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x061ED810>, 0x0, False) , Command count = 5269 ] 
17:18:07: [GO18_globalSetVolt]### Host voltage value is set.
17:18:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5270 ] 
17:18:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:18:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5271 ] 
17:18:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:18:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:18:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:18:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:18:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:18:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5272 ] 
17:18:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:18:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:18:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED5D0>, <py_sfcl.CommandDataDefinition object at 0x0625AD50>) , Command count = 5273 ] 
17:18:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:18:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED360>, <py_sfcl.CommandDataDefinition object at 0x0625ADB0>) , Command count = 5274 ] 
17:18:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:18:07: [ SetCardRCA(0x1, 0xD555) , Command count = 5275 ] 
17:18:07: [DVTCommonLib]### Identification :Idenfication of card completed 

17:18:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:07: Host Frequency set to 25000 KHz
17:18:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:07: ####CSD Registe 2.0 Values####
17:18:07: CSD_STRUCTURE                                 :0x1
17:18:07: Reserv1                                       :0x0
17:18:07: Time Access 1 TAAC                            :0xe
17:18:07: Time Access 2 NSAC*100                        :0x0
17:18:07: Data Transfer Rate TRAN_SPEED                 :0x32
17:18:07: Card Command Classess CCC                     :0x5b5
17:18:07: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:07: DSR(driver stage register)  DSR_IMP           :0x0
17:18:07: Reserv2                                       :0x0
17:18:07: Device Size C_SIZE                            :0xedc8
17:18:07: Reserv3                                       :0x0
17:18:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:07: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:07: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:07: Reserv4                                       :0x0
17:18:07: Write Speed Factor R2W_FACTOR                 :0x2
17:18:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:07: FILE_FORMAT_GRP                               :0x0
17:18:07: COPY flag                                     :0x1
17:18:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:07: File_Format                                   :0x0
17:18:07: CRC                                           :0x0
17:18:07: ####CSD Registe Values####  

17:18:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:18:07: [GetSCRRegisterEntry] Passed
17:18:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:18:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:18:07: Data_Status_After Erases          : 0
17:18:07: CPRM Security Support             : No Security
17:18:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:18:07: Spec. Version                     : Version 3.0X
17:18:07: Extended Security Support         : Extended_Security_Not_Supported
17:18:07: Command Support                   : COMMAND_SUPPORT
17:18:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:18:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED390>, <py_sfcl.CommandDataDefinition object at 0x0625AC30>) , Command count = 5276 ] 
17:18:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:18:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED120>, <py_sfcl.CommandDataDefinition object at 0x0625AED0>) , Command count = 5277 ] 
17:18:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:18:07: [ SetBusWidth(0x4) , Command count = 5278 ] 
17:18:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:18:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0625C0C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5279 ] 
17:18:07: Protected Area Size 0x28000
17:18:07: Bus Width           2
17:18:07: Secure Mode         0
17:18:07: Speed  Class        4
17:18:07: Perf Move           0
17:18:07: Au Size             9
17:18:07: Erase Size          15
17:18:07: Erase Timeout       1
17:18:07: Erase offset        1
17:18:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:18:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:18:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:18:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5280 ] 
17:18:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:18:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:18:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:18:07: Host Frequency set to 100000 KHz
17:18:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:18:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:07: ####CSD Registe 2.0 Values####
17:18:07: CSD_STRUCTURE                                 :0x1
17:18:07: Reserv1                                       :0x0
17:18:07: Time Access 1 TAAC                            :0xe
17:18:08: Time Access 2 NSAC*100                        :0x0
17:18:08: Data Transfer Rate TRAN_SPEED                 :0xb
17:18:08: Card Command Classess CCC                     :0x5b5
17:18:08: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:08: DSR(driver stage register)  DSR_IMP           :0x0
17:18:08: Reserv2                                       :0x0
17:18:08: Device Size C_SIZE                            :0xedc8
17:18:08: Reserv3                                       :0x0
17:18:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:08: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:08: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:08: Reserv4                                       :0x0
17:18:08: Write Speed Factor R2W_FACTOR                 :0x2
17:18:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:08: FILE_FORMAT_GRP                               :0x0
17:18:08: COPY flag                                     :0x1
17:18:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:08: File_Format                                   :0x0
17:18:08: CRC                                           :0x0
17:18:08: ####CSD Registe Values####  

17:18:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED5A0>, <py_sfcl.CommandDataDefinition object at 0x0625C090>) , Command count = 5281 ] 
17:18:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:18:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9E10>, <py_sfcl.CommandDataDefinition object at 0x0625C0F0>) , Command count = 5282 ] 
17:18:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:18:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:18:08: Setting the Bus Width to 4.
17:18:08: [ SetBusWidth(0x4) , Command count = 5283 ] 
17:18:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9ED0>, <py_sfcl.CommandDataDefinition object at 0x061E9EA0>) , Command count = 5284 ] 
17:18:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:18:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9C60>, <py_sfcl.CommandDataDefinition object at 0x0625C210>) , Command count = 5285 ] 
17:18:08: ACMD13[ SD_STATUS ] Passed with R1 type response:[13, 0, 0, 9, 32, 11]
17:18:08: Bus Width is set to 4.
17:18:08: UNLOCKING the card
17:18:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C270>, <py_sfcl.CommandDataDefinition object at 0x0625C360>) , Command count = 5286 ] 
17:18:08: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
17:18:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9DB0>, <py_sfcl.CommandDataDefinition object at 0x061E9B70>) , Command count = 5287 ] 
17:18:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'LOCK_UNLOCK_FAILED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:08: [GO4_globalInitCard]### Switch to Specify Card Type
17:18:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:11: Host Frequency set to 25000 KHz
17:18:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:11: [GO18_globalSetVolt]### Set Host Voltage value.
17:18:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:18:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x061E96C0>, 0x0, True) , Command count = 5288 ] 
17:18:11: [GO18_globalSetVolt]### Host voltage value is set.
17:18:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:18:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x061E99C0>, 0x0, False) , Command count = 5289 ] 
17:18:11: [GO18_globalSetVolt]### Host voltage value is set.
17:18:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5290 ] 
17:18:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:18:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5291 ] 
17:18:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:18:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:18:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:18:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:18:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:18:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5292 ] 
17:18:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:18:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E92D0>, <py_sfcl.CommandDataDefinition object at 0x0625C510>) , Command count = 5293 ] 
17:18:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5360>, <py_sfcl.CommandDataDefinition object at 0x0625C570>) , Command count = 5294 ] 
17:18:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:18:11: [ SetCardRCA(0x1, 0xD555) , Command count = 5295 ] 
17:18:11: [DVTCommonLib]### Identification :Idenfication of card completed 

17:18:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:11: Host Frequency set to 25000 KHz
17:18:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:11: ####CSD Registe 2.0 Values####
17:18:11: CSD_STRUCTURE                                 :0x1
17:18:11: Reserv1                                       :0x0
17:18:11: Time Access 1 TAAC                            :0xe
17:18:11: Time Access 2 NSAC*100                        :0x0
17:18:11: Data Transfer Rate TRAN_SPEED                 :0x32
17:18:11: Card Command Classess CCC                     :0x5b5
17:18:11: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:11: DSR(driver stage register)  DSR_IMP           :0x0
17:18:11: Reserv2                                       :0x0
17:18:11: Device Size C_SIZE                            :0xedc8
17:18:11: Reserv3                                       :0x0
17:18:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:11: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:11: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:11: Reserv4                                       :0x0
17:18:11: Write Speed Factor R2W_FACTOR                 :0x2
17:18:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:11: FILE_FORMAT_GRP                               :0x0
17:18:11: COPY flag                                     :0x1
17:18:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:11: File_Format                                   :0x0
17:18:11: CRC                                           :0x0
17:18:11: ####CSD Registe Values####  

17:18:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:18:11: [GetSCRRegisterEntry] Passed
17:18:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:18:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:18:11: Data_Status_After Erases          : 0
17:18:11: CPRM Security Support             : No Security
17:18:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:18:11: Spec. Version                     : Version 3.0X
17:18:11: Extended Security Support         : Extended_Security_Not_Supported
17:18:11: Command Support                   : COMMAND_SUPPORT
17:18:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5390>, <py_sfcl.CommandDataDefinition object at 0x0625C3F0>) , Command count = 5296 ] 
17:18:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053C6CF0>, <py_sfcl.CommandDataDefinition object at 0x0625C690>) , Command count = 5297 ] 
17:18:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:18:11: [ SetBusWidth(0x4) , Command count = 5298 ] 
17:18:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:18:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0625C750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5299 ] 
17:18:11: Protected Area Size 0x28000
17:18:11: Bus Width           2
17:18:11: Secure Mode         0
17:18:11: Speed  Class        4
17:18:11: Perf Move           0
17:18:11: Au Size             9
17:18:11: Erase Size          15
17:18:11: Erase Timeout       1
17:18:11: Erase offset        1
17:18:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:18:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:18:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:18:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5300 ] 
17:18:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:18:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:18:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:18:11: Host Frequency set to 100000 KHz
17:18:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:18:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:11: ####CSD Registe 2.0 Values####
17:18:11: CSD_STRUCTURE                                 :0x1
17:18:11: Reserv1                                       :0x0
17:18:11: Time Access 1 TAAC                            :0xe
17:18:11: Time Access 2 NSAC*100                        :0x0
17:18:11: Data Transfer Rate TRAN_SPEED                 :0xb
17:18:11: Card Command Classess CCC                     :0x5b5
17:18:11: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:11: DSR(driver stage register)  DSR_IMP           :0x0
17:18:11: Reserv2                                       :0x0
17:18:11: Device Size C_SIZE                            :0xedc8
17:18:11: Reserv3                                       :0x0
17:18:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:11: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:11: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:11: Reserv4                                       :0x0
17:18:11: Write Speed Factor R2W_FACTOR                 :0x2
17:18:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:11: FILE_FORMAT_GRP                               :0x0
17:18:11: COPY flag                                     :0x1
17:18:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:12: File_Format                                   :0x0
17:18:12: CRC                                           :0x0
17:18:12: ####CSD Registe Values####  

17:18:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054056F0>, <py_sfcl.CommandDataDefinition object at 0x0625C5A0>) , Command count = 5301 ] 
17:18:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:18:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9450>, <py_sfcl.CommandDataDefinition object at 0x0625C870>) , Command count = 5302 ] 
17:18:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:18:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:18:12: Setting the Bus Width to 1.
17:18:12: [ SetBusWidth(0x1) , Command count = 5303 ] 
17:18:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0540D180>, <py_sfcl.CommandDataDefinition object at 0x0625C930>) , Command count = 5304 ] 
17:18:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:18:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5900>, <py_sfcl.CommandDataDefinition object at 0x061E9690>) , Command count = 5305 ] 
17:18:12: ACMD13[ SD_STATUS ] Passed with R1 type response:[13, 0, 0, 9, 32, 11]
17:18:12: Bus Width is set to 1.
17:18:12: UNLOCKING the card
17:18:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C9F0>, <py_sfcl.CommandDataDefinition object at 0x0625CAE0>) , Command count = 5306 ] 
17:18:12: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
17:18:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612FDE0>, <py_sfcl.CommandDataDefinition object at 0x061EDDB0>) , Command count = 5307 ] 
17:18:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'LOCK_UNLOCK_FAILED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:12: [GO4_globalInitCard]### Switch to Specify Card Type
17:18:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:14: Host Frequency set to 25000 KHz
17:18:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:14: [GO18_globalSetVolt]### Set Host Voltage value.
17:18:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:18:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x05405780>, 0x0, True) , Command count = 5308 ] 
17:18:14: [GO18_globalSetVolt]### Host voltage value is set.
17:18:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:18:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x0540DE10>, 0x0, False) , Command count = 5309 ] 
17:18:14: [GO18_globalSetVolt]### Host voltage value is set.
17:18:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5310 ] 
17:18:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:18:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5311 ] 
17:18:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:18:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:18:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:18:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:18:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:18:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5312 ] 
17:18:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:18:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:18:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED8D0>, <py_sfcl.CommandDataDefinition object at 0x0625CC90>) , Command count = 5313 ] 
17:18:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:18:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05415F00>, <py_sfcl.CommandDataDefinition object at 0x0625CCF0>) , Command count = 5314 ] 
17:18:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:18:15: [ SetCardRCA(0x1, 0xD555) , Command count = 5315 ] 
17:18:15: [DVTCommonLib]### Identification :Idenfication of card completed 

17:18:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:15: Host Frequency set to 25000 KHz
17:18:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:15: ####CSD Registe 2.0 Values####
17:18:15: CSD_STRUCTURE                                 :0x1
17:18:15: Reserv1                                       :0x0
17:18:15: Time Access 1 TAAC                            :0xe
17:18:15: Time Access 2 NSAC*100                        :0x0
17:18:15: Data Transfer Rate TRAN_SPEED                 :0x32
17:18:15: Card Command Classess CCC                     :0x5b5
17:18:15: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:15: DSR(driver stage register)  DSR_IMP           :0x0
17:18:15: Reserv2                                       :0x0
17:18:15: Device Size C_SIZE                            :0xedc8
17:18:15: Reserv3                                       :0x0
17:18:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:15: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:15: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:15: Reserv4                                       :0x0
17:18:15: Write Speed Factor R2W_FACTOR                 :0x2
17:18:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:15: FILE_FORMAT_GRP                               :0x0
17:18:15: COPY flag                                     :0x1
17:18:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:15: File_Format                                   :0x0
17:18:15: CRC                                           :0x0
17:18:15: ####CSD Registe Values####  

17:18:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:18:15: [GetSCRRegisterEntry] Passed
17:18:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:18:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:18:15: Data_Status_After Erases          : 0
17:18:15: CPRM Security Support             : No Security
17:18:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:18:15: Spec. Version                     : Version 3.0X
17:18:15: Extended Security Support         : Extended_Security_Not_Supported
17:18:15: Command Support                   : COMMAND_SUPPORT
17:18:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:18:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05415300>, <py_sfcl.CommandDataDefinition object at 0x0625CB70>) , Command count = 5316 ] 
17:18:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:18:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE180>, <py_sfcl.CommandDataDefinition object at 0x0625CE10>) , Command count = 5317 ] 
17:18:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:18:15: [ SetBusWidth(0x4) , Command count = 5318 ] 
17:18:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:18:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0625CED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5319 ] 
17:18:15: Protected Area Size 0x28000
17:18:15: Bus Width           2
17:18:15: Secure Mode         0
17:18:15: Speed  Class        4
17:18:15: Perf Move           0
17:18:15: Au Size             9
17:18:15: Erase Size          15
17:18:15: Erase Timeout       1
17:18:15: Erase offset        1
17:18:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:18:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:18:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:18:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5320 ] 
17:18:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:18:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:18:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:18:15: Host Frequency set to 100000 KHz
17:18:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:18:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:15: ####CSD Registe 2.0 Values####
17:18:15: CSD_STRUCTURE                                 :0x1
17:18:15: Reserv1                                       :0x0
17:18:15: Time Access 1 TAAC                            :0xe
17:18:15: Time Access 2 NSAC*100                        :0x0
17:18:15: Data Transfer Rate TRAN_SPEED                 :0xb
17:18:15: Card Command Classess CCC                     :0x5b5
17:18:15: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:15: DSR(driver stage register)  DSR_IMP           :0x0
17:18:15: Reserv2                                       :0x0
17:18:15: Device Size C_SIZE                            :0xedc8
17:18:15: Reserv3                                       :0x0
17:18:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:15: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:15: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:15: Reserv4                                       :0x0
17:18:15: Write Speed Factor R2W_FACTOR                 :0x2
17:18:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:15: FILE_FORMAT_GRP                               :0x0
17:18:15: COPY flag                                     :0x1
17:18:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:15: File_Format                                   :0x0
17:18:15: CRC                                           :0x0
17:18:15: ####CSD Registe Values####  

17:18:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE330>, <py_sfcl.CommandDataDefinition object at 0x0625D0C0>) , Command count = 5321 ] 
17:18:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:18:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE3C0>, <py_sfcl.CommandDataDefinition object at 0x0625D030>) , Command count = 5322 ] 
17:18:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:18:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:18:15: [CH4372_ParameterResultCMD42]### Trying to LOCK the card with new password: 1234 
17:18:15: LOCKING the card
17:18:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D090>, <py_sfcl.CommandDataDefinition object at 0x0625D180>) , Command count = 5323 ] 
17:18:15: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
17:18:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE450>, <py_sfcl.CommandDataDefinition object at 0x060DE480>) , Command count = 5324 ] 
17:18:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:15: [CH4372_ParameterResultCMD42]### Card is in Locked  and Card is in 'Tran' state.
17:18:15: [CH4372_ParameterResultCMD42]### Trying to LOCK the locked card with new password: 1234 
17:18:15: [CH4372_ParameterResultCMD42]### Trying to LOCK the card with new password: 1234 
17:18:15: LOCKING the card
17:18:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D150>, <py_sfcl.CommandDataDefinition object at 0x0625D240>) , Command count = 5325 ] 
17:18:15: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
17:18:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE4B0>, <py_sfcl.CommandDataDefinition object at 0x060DE4E0>) , Command count = 5326 ] 
17:18:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'LOCK_UNLOCK_FAILED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:16: [CH4372_ParameterResultCMD42]### Card is in Locked  and Card is in 'Tran' state.
17:18:16: CLEAR the card
17:18:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D210>, <py_sfcl.CommandDataDefinition object at 0x0625D300>) , Command count = 5327 ] 
17:18:16: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
17:18:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053D29C0>, <py_sfcl.CommandDataDefinition object at 0x060DE570>) , Command count = 5328 ] 
17:18:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:16: [CH4372_ParameterResultCMD42]### Card is not locked  and Card is in 'Tran' state.
17:18:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE510>, <py_sfcl.CommandDataDefinition object at 0x0625D2D0>) , Command count = 5329 ] 
17:18:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:16: [CH4372_ParameterResultCMD42]### Trying to LOCK the card with new password: 1234 
17:18:16: LOCKING the card
17:18:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D330>, <py_sfcl.CommandDataDefinition object at 0x0625D420>) , Command count = 5330 ] 
17:18:16: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
17:18:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F52A0>, <py_sfcl.CommandDataDefinition object at 0x061E97E0>) , Command count = 5331 ] 
17:18:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:16: [CH4372_ParameterResultCMD42]### Card is in Locked  and Card is in 'Tran' state.
17:18:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E90C0>, <py_sfcl.CommandDataDefinition object at 0x0625D3F0>) , Command count = 5332 ] 
17:18:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:16: [CH4372_ParameterResultCMD42]### Card is in Locked state 
17:18:16: CLEAR the card
17:18:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D450>, <py_sfcl.CommandDataDefinition object at 0x0625D540>) , Command count = 5333 ] 
17:18:16: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
17:18:16: Set password in the card
17:18:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060EB060>, <py_sfcl.CommandDataDefinition object at 0x0625D4B0>) , Command count = 5334 ] 
17:18:16: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 3, 0, 9, 0, 13]
17:18:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE540>, <py_sfcl.CommandDataDefinition object at 0x061E9A80>) , Command count = 5335 ] 
17:18:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'LOCK_UNLOCK_FAILED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:16: [CH4372_ParameterResultCMD42]### Card is locked and in state 'Tran' as expected.
17:18:16: CLEAR the card
17:18:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D570>, <py_sfcl.CommandDataDefinition object at 0x0625D660>) , Command count = 5336 ] 
17:18:16: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
17:18:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D20C0>, <py_sfcl.CommandDataDefinition object at 0x061F58D0>) , Command count = 5337 ] 
17:18:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:16: [CH4372_ParameterResultCMD42]### Card is not locked  and Card is in 'Tran' state.
17:18:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D2180>, <py_sfcl.CommandDataDefinition object at 0x0625D630>) , Command count = 5338 ] 
17:18:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:17: [CH4372_ParameterResultCMD42]### Card is not locked  and Card is in 'Tran' state.
17:18:17: LOCKING the card
17:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D690>, <py_sfcl.CommandDataDefinition object at 0x0625D780>) , Command count = 5339 ] 
17:18:17: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
17:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D22A0>, <py_sfcl.CommandDataDefinition object at 0x060DECF0>) , Command count = 5340 ] 
17:18:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'LOCK_UNLOCK_FAILED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:17: [CH4372_ParameterResultCMD42]### Card is not locked  and Card is in 'Tran' state.
17:18:17: [CH4372_ParameterResultCMD42]##### SingleReadAddress to the card from startLba:0x0 to endSector:0x5
17:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9240>, <py_sfcl.CommandDataDefinition object at 0x0625D750>) , Command count = 5341 ] 
17:18:17: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9300>, <py_sfcl.CommandDataDefinition object at 0x0625D7B0>) , Command count = 5342 ] 
17:18:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:17:  Read & Verify  Lba:0x00000000 Transfer Length:0x0001   
17:18:17: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x0 and transferLen:0x1
17:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9120>, <py_sfcl.CommandDataDefinition object at 0x0625D810>) , Command count = 5343 ] 
17:18:17: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9090>, <py_sfcl.CommandDataDefinition object at 0x0625D870>) , Command count = 5344 ] 
17:18:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:17:  Read & Verify  Lba:0x00000001 Transfer Length:0x0001   
17:18:17: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x1 and transferLen:0x1
17:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9060>, <py_sfcl.CommandDataDefinition object at 0x0625D8D0>) , Command count = 5345 ] 
17:18:17: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9150>, <py_sfcl.CommandDataDefinition object at 0x0625D930>) , Command count = 5346 ] 
17:18:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:17:  Read & Verify  Lba:0x00000002 Transfer Length:0x0001   
17:18:17: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x2 and transferLen:0x1
17:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9210>, <py_sfcl.CommandDataDefinition object at 0x0625D990>) , Command count = 5347 ] 
17:18:17: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E90F0>, <py_sfcl.CommandDataDefinition object at 0x0625D9F0>) , Command count = 5348 ] 
17:18:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:17:  Read & Verify  Lba:0x00000003 Transfer Length:0x0001   
17:18:17: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x3 and transferLen:0x1
17:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9420>, <py_sfcl.CommandDataDefinition object at 0x0625DA50>) , Command count = 5349 ] 
17:18:17: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9390>, <py_sfcl.CommandDataDefinition object at 0x0625DAB0>) , Command count = 5350 ] 
17:18:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:17:  Read & Verify  Lba:0x00000004 Transfer Length:0x0001   
17:18:17: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x4 and transferLen:0x1
17:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DEB70>, <py_sfcl.CommandDataDefinition object at 0x0625DB10>) , Command count = 5351 ] 
17:18:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:17: [CH4372_ParameterResultCMD42]### Card is not locked  and Card is in 'Tran' state.
17:18:17: LOCKING the card
17:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625DB70>, <py_sfcl.CommandDataDefinition object at 0x0625DC60>) , Command count = 5352 ] 
17:18:17: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
17:18:17: Set password in the card
17:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9270>, <py_sfcl.CommandDataDefinition object at 0x0625DBD0>) , Command count = 5353 ] 
17:18:17: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 1, 0, 9, 0, 12]
17:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9600>, <py_sfcl.CommandDataDefinition object at 0x061E98D0>) , Command count = 5354 ] 
17:18:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:17: Failed as expected, continuing the test.
17:18:17: [CH4372_ParameterResultCMD42]### Card is not locked  and Card is in 'Tran' state.
17:18:17: [CH4372_ParameterResultCMD42]##### SingleReadAddress to the card from startLba:0x0 to endSector:0x5
17:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDB40>, <py_sfcl.CommandDataDefinition object at 0x0625DC90>) , Command count = 5355 ] 
17:18:17: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5C60>, <py_sfcl.CommandDataDefinition object at 0x0625DCF0>) , Command count = 5356 ] 
17:18:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:18:  Read & Verify  Lba:0x00000000 Transfer Length:0x0001   
17:18:18: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x0 and transferLen:0x1
17:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05405750>, <py_sfcl.CommandDataDefinition object at 0x0625DD50>) , Command count = 5357 ] 
17:18:18: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5870>, <py_sfcl.CommandDataDefinition object at 0x0625DDB0>) , Command count = 5358 ] 
17:18:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:18:  Read & Verify  Lba:0x00000001 Transfer Length:0x0001   
17:18:18: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x1 and transferLen:0x1
17:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F51B0>, <py_sfcl.CommandDataDefinition object at 0x0625DE10>) , Command count = 5359 ] 
17:18:18: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5240>, <py_sfcl.CommandDataDefinition object at 0x0625DE70>) , Command count = 5360 ] 
17:18:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:18:  Read & Verify  Lba:0x00000002 Transfer Length:0x0001   
17:18:18: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x2 and transferLen:0x1
17:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5210>, <py_sfcl.CommandDataDefinition object at 0x0625DED0>) , Command count = 5361 ] 
17:18:18: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA20>, <py_sfcl.CommandDataDefinition object at 0x0625E060>) , Command count = 5362 ] 
17:18:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:18:  Read & Verify  Lba:0x00000003 Transfer Length:0x0001   
17:18:18: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x3 and transferLen:0x1
17:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED990>, <py_sfcl.CommandDataDefinition object at 0x0625E0C0>) , Command count = 5363 ] 
17:18:18: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDB70>, <py_sfcl.CommandDataDefinition object at 0x0625E030>) , Command count = 5364 ] 
17:18:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:18:  Read & Verify  Lba:0x00000004 Transfer Length:0x0001   
17:18:18: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x4 and transferLen:0x1
17:18:18: CLEAR the card
17:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625E090>, <py_sfcl.CommandDataDefinition object at 0x0625E180>) , Command count = 5365 ] 
17:18:18: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
17:18:18: [CH4372_Parameter_and_Result_Of_CMD42]### globalDVTTestScope is AsicDVT. TEST CASE SECOND ITERATION IS STARTED.
17:18:18: [GO4_globalInitCard]### Switch to Specify Card Type
17:18:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:20: Host Frequency set to 25000 KHz
17:18:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:20: [GO18_globalSetVolt]### Set Host Voltage value.
17:18:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:18:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x061E9B10>, 0x0, True) , Command count = 5366 ] 
17:18:20: [GO18_globalSetVolt]### Host voltage value is set.
17:18:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:18:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x061E9BA0>, 0x0, False) , Command count = 5367 ] 
17:18:20: [GO18_globalSetVolt]### Host voltage value is set.
17:18:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5368 ] 
17:18:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:18:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5369 ] 
17:18:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:18:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:18:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:18:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:18:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:18:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5370 ] 
17:18:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:18:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:18:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9CC0>, <py_sfcl.CommandDataDefinition object at 0x0625E2D0>) , Command count = 5371 ] 
17:18:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:18:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9AE0>, <py_sfcl.CommandDataDefinition object at 0x0625E330>) , Command count = 5372 ] 
17:18:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:18:21: [ SetCardRCA(0x1, 0xD555) , Command count = 5373 ] 
17:18:21: [DVTCommonLib]### Identification :Idenfication of card completed 

17:18:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:21: Host Frequency set to 25000 KHz
17:18:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:21: ####CSD Registe 2.0 Values####
17:18:21: CSD_STRUCTURE                                 :0x1
17:18:21: Reserv1                                       :0x0
17:18:21: Time Access 1 TAAC                            :0xe
17:18:21: Time Access 2 NSAC*100                        :0x0
17:18:21: Data Transfer Rate TRAN_SPEED                 :0x32
17:18:21: Card Command Classess CCC                     :0x5b5
17:18:21: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:21: DSR(driver stage register)  DSR_IMP           :0x0
17:18:21: Reserv2                                       :0x0
17:18:21: Device Size C_SIZE                            :0xedc8
17:18:21: Reserv3                                       :0x0
17:18:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:21: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:21: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:21: Reserv4                                       :0x0
17:18:21: Write Speed Factor R2W_FACTOR                 :0x2
17:18:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:21: FILE_FORMAT_GRP                               :0x0
17:18:21: COPY flag                                     :0x1
17:18:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:21: File_Format                                   :0x0
17:18:21: CRC                                           :0x0
17:18:21: ####CSD Registe Values####  

17:18:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:18:21: [GetSCRRegisterEntry] Passed
17:18:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:18:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:18:21: Data_Status_After Erases          : 0
17:18:21: CPRM Security Support             : No Security
17:18:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:18:21: Spec. Version                     : Version 3.0X
17:18:21: Extended Security Support         : Extended_Security_Not_Supported
17:18:21: Command Support                   : COMMAND_SUPPORT
17:18:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:18:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9CF0>, <py_sfcl.CommandDataDefinition object at 0x0625E1B0>) , Command count = 5374 ] 
17:18:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:18:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9DE0>, <py_sfcl.CommandDataDefinition object at 0x0625E450>) , Command count = 5375 ] 
17:18:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:18:21: [ SetBusWidth(0x4) , Command count = 5376 ] 
17:18:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:18:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0625E510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5377 ] 
17:18:21: Protected Area Size 0x28000
17:18:21: Bus Width           2
17:18:21: Secure Mode         0
17:18:21: Speed  Class        4
17:18:21: Perf Move           0
17:18:21: Au Size             9
17:18:21: Erase Size          15
17:18:21: Erase Timeout       1
17:18:21: Erase offset        1
17:18:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:18:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:18:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:18:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5378 ] 
17:18:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:18:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:18:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:18:21: Host Frequency set to 100000 KHz
17:18:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:18:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:21: ####CSD Registe 2.0 Values####
17:18:21: CSD_STRUCTURE                                 :0x1
17:18:21: Reserv1                                       :0x0
17:18:21: Time Access 1 TAAC                            :0xe
17:18:21: Time Access 2 NSAC*100                        :0x0
17:18:21: Data Transfer Rate TRAN_SPEED                 :0xb
17:18:21: Card Command Classess CCC                     :0x5b5
17:18:21: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:21: DSR(driver stage register)  DSR_IMP           :0x0
17:18:21: Reserv2                                       :0x0
17:18:21: Device Size C_SIZE                            :0xedc8
17:18:21: Reserv3                                       :0x0
17:18:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:21: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:21: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:21: Reserv4                                       :0x0
17:18:21: Write Speed Factor R2W_FACTOR                 :0x2
17:18:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:21: FILE_FORMAT_GRP                               :0x0
17:18:21: COPY flag                                     :0x1
17:18:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:21: File_Format                                   :0x0
17:18:21: CRC                                           :0x0
17:18:21: ####CSD Registe Values####  

17:18:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9F00>, <py_sfcl.CommandDataDefinition object at 0x0625E210>) , Command count = 5379 ] 
17:18:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:18:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9F60>, <py_sfcl.CommandDataDefinition object at 0x0625E630>) , Command count = 5380 ] 
17:18:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:18:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:18:21: UNLOCKING the card
17:18:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625E690>, <py_sfcl.CommandDataDefinition object at 0x0625E780>) , Command count = 5381 ] 
17:18:22: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
17:18:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9F90>, <py_sfcl.CommandDataDefinition object at 0x061F5DE0>) , Command count = 5382 ] 
17:18:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'LOCK_UNLOCK_FAILED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:22: [GO4_globalInitCard]### Switch to Specify Card Type
17:18:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:24: Host Frequency set to 25000 KHz
17:18:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:24: [GO18_globalSetVolt]### Set Host Voltage value.
17:18:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:18:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x061F5120>, 0x0, True) , Command count = 5383 ] 
17:18:24: [GO18_globalSetVolt]### Host voltage value is set.
17:18:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:18:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x061DBF90>, 0x0, False) , Command count = 5384 ] 
17:18:24: [GO18_globalSetVolt]### Host voltage value is set.
17:18:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5385 ] 
17:18:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:18:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5386 ] 
17:18:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:18:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:18:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:18:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:18:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:18:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5387 ] 
17:18:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:18:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:18:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED300>, <py_sfcl.CommandDataDefinition object at 0x0625E930>) , Command count = 5388 ] 
17:18:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:18:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED4E0>, <py_sfcl.CommandDataDefinition object at 0x0625E990>) , Command count = 5389 ] 
17:18:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:18:24: [ SetCardRCA(0x1, 0xD555) , Command count = 5390 ] 
17:18:24: [DVTCommonLib]### Identification :Idenfication of card completed 

17:18:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:24: Host Frequency set to 25000 KHz
17:18:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:24: ####CSD Registe 2.0 Values####
17:18:24: CSD_STRUCTURE                                 :0x1
17:18:24: Reserv1                                       :0x0
17:18:24: Time Access 1 TAAC                            :0xe
17:18:24: Time Access 2 NSAC*100                        :0x0
17:18:24: Data Transfer Rate TRAN_SPEED                 :0x32
17:18:24: Card Command Classess CCC                     :0x5b5
17:18:24: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:24: DSR(driver stage register)  DSR_IMP           :0x0
17:18:24: Reserv2                                       :0x0
17:18:24: Device Size C_SIZE                            :0xedc8
17:18:24: Reserv3                                       :0x0
17:18:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:24: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:24: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:24: Reserv4                                       :0x0
17:18:24: Write Speed Factor R2W_FACTOR                 :0x2
17:18:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:24: FILE_FORMAT_GRP                               :0x0
17:18:24: COPY flag                                     :0x1
17:18:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:24: File_Format                                   :0x0
17:18:24: CRC                                           :0x0
17:18:24: ####CSD Registe Values####  

17:18:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:18:24: [GetSCRRegisterEntry] Passed
17:18:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:18:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:18:24: Data_Status_After Erases          : 0
17:18:24: CPRM Security Support             : No Security
17:18:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:18:24: Spec. Version                     : Version 3.0X
17:18:24: Extended Security Support         : Extended_Security_Not_Supported
17:18:24: Command Support                   : COMMAND_SUPPORT
17:18:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:18:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED150>, <py_sfcl.CommandDataDefinition object at 0x0625E810>) , Command count = 5391 ] 
17:18:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:18:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054056C0>, <py_sfcl.CommandDataDefinition object at 0x0625EAB0>) , Command count = 5392 ] 
17:18:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:18:24: [ SetBusWidth(0x4) , Command count = 5393 ] 
17:18:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:18:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0625EB70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5394 ] 
17:18:24: Protected Area Size 0x28000
17:18:24: Bus Width           2
17:18:24: Secure Mode         0
17:18:24: Speed  Class        4
17:18:24: Perf Move           0
17:18:24: Au Size             9
17:18:24: Erase Size          15
17:18:24: Erase Timeout       1
17:18:24: Erase offset        1
17:18:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:18:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:18:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:18:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5395 ] 
17:18:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:18:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:18:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:18:24: Host Frequency set to 100000 KHz
17:18:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:18:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:24: ####CSD Registe 2.0 Values####
17:18:24: CSD_STRUCTURE                                 :0x1
17:18:24: Reserv1                                       :0x0
17:18:24: Time Access 1 TAAC                            :0xe
17:18:24: Time Access 2 NSAC*100                        :0x0
17:18:24: Data Transfer Rate TRAN_SPEED                 :0xb
17:18:24: Card Command Classess CCC                     :0x5b5
17:18:24: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:25: DSR(driver stage register)  DSR_IMP           :0x0
17:18:25: Reserv2                                       :0x0
17:18:25: Device Size C_SIZE                            :0xedc8
17:18:25: Reserv3                                       :0x0
17:18:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:25: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:25: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:25: Reserv4                                       :0x0
17:18:25: Write Speed Factor R2W_FACTOR                 :0x2
17:18:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:25: FILE_FORMAT_GRP                               :0x0
17:18:25: COPY flag                                     :0x1
17:18:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:25: File_Format                                   :0x0
17:18:25: CRC                                           :0x0
17:18:25: ####CSD Registe Values####  

17:18:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9720>, <py_sfcl.CommandDataDefinition object at 0x0625E9C0>) , Command count = 5396 ] 
17:18:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:18:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9660>, <py_sfcl.CommandDataDefinition object at 0x0625EC90>) , Command count = 5397 ] 
17:18:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:18:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:18:25: Setting the Bus Width to 4.
17:18:25: [ SetBusWidth(0x4) , Command count = 5398 ] 
17:18:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED450>, <py_sfcl.CommandDataDefinition object at 0x0625ED50>) , Command count = 5399 ] 
17:18:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:18:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED210>, <py_sfcl.CommandDataDefinition object at 0x0625EDB0>) , Command count = 5400 ] 
17:18:25: ACMD13[ SD_STATUS ] Passed with R1 type response:[13, 0, 0, 9, 32, 11]
17:18:25: Bus Width is set to 4.
17:18:25: UNLOCKING the card
17:18:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625EE10>, <py_sfcl.CommandDataDefinition object at 0x0625EF00>) , Command count = 5401 ] 
17:18:25: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
17:18:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053F7390>, <py_sfcl.CommandDataDefinition object at 0x061ED240>) , Command count = 5402 ] 
17:18:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'LOCK_UNLOCK_FAILED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:25: [GO4_globalInitCard]### Switch to Specify Card Type
17:18:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:27: Host Frequency set to 25000 KHz
17:18:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:27: [GO18_globalSetVolt]### Set Host Voltage value.
17:18:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:18:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x061ED0F0>, 0x0, True) , Command count = 5403 ] 
17:18:27: [GO18_globalSetVolt]### Host voltage value is set.
17:18:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:18:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x061D2030>, 0x0, False) , Command count = 5404 ] 
17:18:27: [GO18_globalSetVolt]### Host voltage value is set.
17:18:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5405 ] 
17:18:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:18:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5406 ] 
17:18:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:18:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:18:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:18:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:18:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:18:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5407 ] 
17:18:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:18:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:18:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5EA0>, <py_sfcl.CommandDataDefinition object at 0x062600F0>) , Command count = 5408 ] 
17:18:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:18:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED420>, <py_sfcl.CommandDataDefinition object at 0x06260150>) , Command count = 5409 ] 
17:18:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:18:28: [ SetCardRCA(0x1, 0xD555) , Command count = 5410 ] 
17:18:28: [DVTCommonLib]### Identification :Idenfication of card completed 

17:18:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:28: Host Frequency set to 25000 KHz
17:18:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:28: ####CSD Registe 2.0 Values####
17:18:28: CSD_STRUCTURE                                 :0x1
17:18:28: Reserv1                                       :0x0
17:18:28: Time Access 1 TAAC                            :0xe
17:18:28: Time Access 2 NSAC*100                        :0x0
17:18:28: Data Transfer Rate TRAN_SPEED                 :0x32
17:18:28: Card Command Classess CCC                     :0x5b5
17:18:28: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:28: DSR(driver stage register)  DSR_IMP           :0x0
17:18:28: Reserv2                                       :0x0
17:18:28: Device Size C_SIZE                            :0xedc8
17:18:28: Reserv3                                       :0x0
17:18:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:28: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:28: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:28: Reserv4                                       :0x0
17:18:28: Write Speed Factor R2W_FACTOR                 :0x2
17:18:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:28: FILE_FORMAT_GRP                               :0x0
17:18:28: COPY flag                                     :0x1
17:18:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:28: File_Format                                   :0x0
17:18:28: CRC                                           :0x0
17:18:28: ####CSD Registe Values####  

17:18:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:18:28: [GetSCRRegisterEntry] Passed
17:18:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:18:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:18:28: Data_Status_After Erases          : 0
17:18:28: CPRM Security Support             : No Security
17:18:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:18:28: Spec. Version                     : Version 3.0X
17:18:28: Extended Security Support         : Extended_Security_Not_Supported
17:18:28: Command Support                   : COMMAND_SUPPORT
17:18:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:18:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED7E0>, <py_sfcl.CommandDataDefinition object at 0x06260210>) , Command count = 5411 ] 
17:18:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:18:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED720>, <py_sfcl.CommandDataDefinition object at 0x06260270>) , Command count = 5412 ] 
17:18:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:18:28: [ SetBusWidth(0x4) , Command count = 5413 ] 
17:18:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:18:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06260330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5414 ] 
17:18:28: Protected Area Size 0x28000
17:18:28: Bus Width           2
17:18:28: Secure Mode         0
17:18:28: Speed  Class        4
17:18:28: Perf Move           0
17:18:28: Au Size             9
17:18:28: Erase Size          15
17:18:28: Erase Timeout       1
17:18:28: Erase offset        1
17:18:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:18:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:18:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:18:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5415 ] 
17:18:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:18:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:18:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:18:28: Host Frequency set to 100000 KHz
17:18:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:18:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:28: ####CSD Registe 2.0 Values####
17:18:28: CSD_STRUCTURE                                 :0x1
17:18:28: Reserv1                                       :0x0
17:18:28: Time Access 1 TAAC                            :0xe
17:18:28: Time Access 2 NSAC*100                        :0x0
17:18:28: Data Transfer Rate TRAN_SPEED                 :0xb
17:18:28: Card Command Classess CCC                     :0x5b5
17:18:28: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:28: DSR(driver stage register)  DSR_IMP           :0x0
17:18:28: Reserv2                                       :0x0
17:18:28: Device Size C_SIZE                            :0xedc8
17:18:28: Reserv3                                       :0x0
17:18:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:28: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:28: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:28: Reserv4                                       :0x0
17:18:28: Write Speed Factor R2W_FACTOR                 :0x2
17:18:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:28: FILE_FORMAT_GRP                               :0x0
17:18:28: COPY flag                                     :0x1
17:18:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:28: File_Format                                   :0x0
17:18:28: CRC                                           :0x0
17:18:28: ####CSD Registe Values####  

17:18:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05415F60>, <py_sfcl.CommandDataDefinition object at 0x06260090>) , Command count = 5416 ] 
17:18:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:18:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED660>, <py_sfcl.CommandDataDefinition object at 0x06260450>) , Command count = 5417 ] 
17:18:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:18:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:18:29: Setting the Bus Width to 1.
17:18:29: [ SetBusWidth(0x1) , Command count = 5418 ] 
17:18:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDB10>, <py_sfcl.CommandDataDefinition object at 0x061ED180>) , Command count = 5419 ] 
17:18:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:18:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED750>, <py_sfcl.CommandDataDefinition object at 0x06260570>) , Command count = 5420 ] 
17:18:29: ACMD13[ SD_STATUS ] Passed with R1 type response:[13, 0, 0, 9, 32, 11]
17:18:29: Bus Width is set to 1.
17:18:29: UNLOCKING the card
17:18:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062605D0>, <py_sfcl.CommandDataDefinition object at 0x062606C0>) , Command count = 5421 ] 
17:18:29: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
17:18:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED900>, <py_sfcl.CommandDataDefinition object at 0x061ED2A0>) , Command count = 5422 ] 
17:18:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'LOCK_UNLOCK_FAILED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:29: [GO4_globalInitCard]### Switch to Specify Card Type
17:18:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:31: Host Frequency set to 25000 KHz
17:18:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:31: [GO18_globalSetVolt]### Set Host Voltage value.
17:18:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:18:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x061ED9F0>, 0x0, True) , Command count = 5423 ] 
17:18:31: [GO18_globalSetVolt]### Host voltage value is set.
17:18:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:18:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x061EDD20>, 0x0, False) , Command count = 5424 ] 
17:18:31: [GO18_globalSetVolt]### Host voltage value is set.
17:18:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5425 ] 
17:18:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:18:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5426 ] 
17:18:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:18:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:18:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:18:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:18:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:18:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5427 ] 
17:18:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:18:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:18:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DBD50>, <py_sfcl.CommandDataDefinition object at 0x06260870>) , Command count = 5428 ] 
17:18:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:18:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5D50>, <py_sfcl.CommandDataDefinition object at 0x062608D0>) , Command count = 5429 ] 
17:18:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:18:31: [ SetCardRCA(0x1, 0xD555) , Command count = 5430 ] 
17:18:31: [DVTCommonLib]### Identification :Idenfication of card completed 

17:18:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:31: Host Frequency set to 25000 KHz
17:18:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:31: ####CSD Registe 2.0 Values####
17:18:31: CSD_STRUCTURE                                 :0x1
17:18:31: Reserv1                                       :0x0
17:18:31: Time Access 1 TAAC                            :0xe
17:18:31: Time Access 2 NSAC*100                        :0x0
17:18:31: Data Transfer Rate TRAN_SPEED                 :0x32
17:18:31: Card Command Classess CCC                     :0x5b5
17:18:31: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:31: DSR(driver stage register)  DSR_IMP           :0x0
17:18:31: Reserv2                                       :0x0
17:18:31: Device Size C_SIZE                            :0xedc8
17:18:31: Reserv3                                       :0x0
17:18:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:31: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:31: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:31: Reserv4                                       :0x0
17:18:31: Write Speed Factor R2W_FACTOR                 :0x2
17:18:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:31: FILE_FORMAT_GRP                               :0x0
17:18:31: COPY flag                                     :0x1
17:18:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:31: File_Format                                   :0x0
17:18:31: CRC                                           :0x0
17:18:31: ####CSD Registe Values####  

17:18:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:18:31: [GetSCRRegisterEntry] Passed
17:18:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:18:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:18:31: Data_Status_After Erases          : 0
17:18:31: CPRM Security Support             : No Security
17:18:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:18:31: Spec. Version                     : Version 3.0X
17:18:31: Extended Security Support         : Extended_Security_Not_Supported
17:18:31: Command Support                   : COMMAND_SUPPORT
17:18:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:18:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052F43C0>, <py_sfcl.CommandDataDefinition object at 0x06260750>) , Command count = 5431 ] 
17:18:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:18:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDCC0>, <py_sfcl.CommandDataDefinition object at 0x062609F0>) , Command count = 5432 ] 
17:18:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:18:31: [ SetBusWidth(0x4) , Command count = 5433 ] 
17:18:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:18:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06260AB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5434 ] 
17:18:31: Protected Area Size 0x28000
17:18:31: Bus Width           2
17:18:31: Secure Mode         0
17:18:31: Speed  Class        4
17:18:31: Perf Move           0
17:18:31: Au Size             9
17:18:31: Erase Size          15
17:18:31: Erase Timeout       1
17:18:31: Erase offset        1
17:18:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:18:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:18:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:18:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5435 ] 
17:18:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:18:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:18:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:18:32: Host Frequency set to 100000 KHz
17:18:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:18:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:32: ####CSD Registe 2.0 Values####
17:18:32: CSD_STRUCTURE                                 :0x1
17:18:32: Reserv1                                       :0x0
17:18:32: Time Access 1 TAAC                            :0xe
17:18:32: Time Access 2 NSAC*100                        :0x0
17:18:32: Data Transfer Rate TRAN_SPEED                 :0xb
17:18:32: Card Command Classess CCC                     :0x5b5
17:18:32: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:32: DSR(driver stage register)  DSR_IMP           :0x0
17:18:32: Reserv2                                       :0x0
17:18:32: Device Size C_SIZE                            :0xedc8
17:18:32: Reserv3                                       :0x0
17:18:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:32: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:32: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:32: Reserv4                                       :0x0
17:18:32: Write Speed Factor R2W_FACTOR                 :0x2
17:18:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:32: FILE_FORMAT_GRP                               :0x0
17:18:32: COPY flag                                     :0x1
17:18:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:32: File_Format                                   :0x0
17:18:32: CRC                                           :0x0
17:18:32: ####CSD Registe Values####  

17:18:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5300>, <py_sfcl.CommandDataDefinition object at 0x06260900>) , Command count = 5436 ] 
17:18:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:18:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F52D0>, <py_sfcl.CommandDataDefinition object at 0x061E9810>) , Command count = 5437 ] 
17:18:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:18:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:18:32: [CH4372_ParameterResultCMD42]### Trying to LOCK the card with new password: 1234 
17:18:32: LOCKING the card
17:18:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDED0>, <py_sfcl.CommandDataDefinition object at 0x06260C30>) , Command count = 5438 ] 
17:18:32: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
17:18:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED480>, <py_sfcl.CommandDataDefinition object at 0x061EDF60>) , Command count = 5439 ] 
17:18:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:32: [CH4372_ParameterResultCMD42]### Card is in Locked  and Card is in 'Tran' state.
17:18:32: [CH4372_ParameterResultCMD42]### Trying to LOCK the locked card with new password: 1234 
17:18:32: [CH4372_ParameterResultCMD42]### Trying to LOCK the card with new password: 1234 
17:18:33: LOCKING the card
17:18:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06260CF0>, <py_sfcl.CommandDataDefinition object at 0x06260DE0>) , Command count = 5440 ] 
17:18:33: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
17:18:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5030>, <py_sfcl.CommandDataDefinition object at 0x061F5150>) , Command count = 5441 ] 
17:18:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'LOCK_UNLOCK_FAILED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:33: [CH4372_ParameterResultCMD42]### Card is in Locked  and Card is in 'Tran' state.
17:18:33: CLEAR the card
17:18:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06260BD0>, <py_sfcl.CommandDataDefinition object at 0x06260B10>) , Command count = 5442 ] 
17:18:33: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
17:18:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED2D0>, <py_sfcl.CommandDataDefinition object at 0x06260E40>) , Command count = 5443 ] 
17:18:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:33: [CH4372_ParameterResultCMD42]### Card is not locked  and Card is in 'Tran' state.
17:18:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED840>, <py_sfcl.CommandDataDefinition object at 0x06260E70>) , Command count = 5444 ] 
17:18:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:33: [CH4372_ParameterResultCMD42]### Trying to LOCK the card with new password: 1234 
17:18:33: LOCKING the card
17:18:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06260ED0>, <py_sfcl.CommandDataDefinition object at 0x06260FC0>) , Command count = 5445 ] 
17:18:33: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
17:18:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F50F0>, <py_sfcl.CommandDataDefinition object at 0x061F56F0>) , Command count = 5446 ] 
17:18:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:33: [CH4372_ParameterResultCMD42]### Card is in Locked  and Card is in 'Tran' state.
17:18:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5510>, <py_sfcl.CommandDataDefinition object at 0x062610C0>) , Command count = 5447 ] 
17:18:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:33: [CH4372_ParameterResultCMD42]### Card is in Locked state 
17:18:33: CLEAR the card
17:18:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261030>, <py_sfcl.CommandDataDefinition object at 0x06261120>) , Command count = 5448 ] 
17:18:33: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
17:18:33: Set password in the card
17:18:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5090>, <py_sfcl.CommandDataDefinition object at 0x06261090>) , Command count = 5449 ] 
17:18:33: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 3, 0, 9, 0, 13]
17:18:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDAE0>, <py_sfcl.CommandDataDefinition object at 0x061F58A0>) , Command count = 5450 ] 
17:18:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'LOCK_UNLOCK_FAILED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:33: [CH4372_ParameterResultCMD42]### Card is locked and in state 'Tran' as expected.
17:18:33: CLEAR the card
17:18:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261150>, <py_sfcl.CommandDataDefinition object at 0x06261240>) , Command count = 5451 ] 
17:18:33: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
17:18:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F57E0>, <py_sfcl.CommandDataDefinition object at 0x061EDC90>) , Command count = 5452 ] 
17:18:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:33: [CH4372_ParameterResultCMD42]### Card is not locked  and Card is in 'Tran' state.
17:18:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5750>, <py_sfcl.CommandDataDefinition object at 0x06261210>) , Command count = 5453 ] 
17:18:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:33: [CH4372_ParameterResultCMD42]### Card is not locked  and Card is in 'Tran' state.
17:18:33: LOCKING the card
17:18:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261270>, <py_sfcl.CommandDataDefinition object at 0x06261360>) , Command count = 5454 ] 
17:18:33: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
17:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9FC0>, <py_sfcl.CommandDataDefinition object at 0x061EDD80>) , Command count = 5455 ] 
17:18:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'LOCK_UNLOCK_FAILED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:34: [CH4372_ParameterResultCMD42]### Card is not locked  and Card is in 'Tran' state.
17:18:34: [CH4372_ParameterResultCMD42]##### SingleReadAddress to the card from startLba:0x0 to endSector:0x5
17:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5330>, <py_sfcl.CommandDataDefinition object at 0x06261330>) , Command count = 5456 ] 
17:18:34: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5450>, <py_sfcl.CommandDataDefinition object at 0x06261390>) , Command count = 5457 ] 
17:18:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:34:  Read & Verify  Lba:0x00000000 Transfer Length:0x0001   
17:18:34: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x0 and transferLen:0x1
17:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDF90>, <py_sfcl.CommandDataDefinition object at 0x062613F0>) , Command count = 5458 ] 
17:18:34: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5180>, <py_sfcl.CommandDataDefinition object at 0x06261450>) , Command count = 5459 ] 
17:18:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:34:  Read & Verify  Lba:0x00000001 Transfer Length:0x0001   
17:18:34: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x1 and transferLen:0x1
17:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F54E0>, <py_sfcl.CommandDataDefinition object at 0x062614B0>) , Command count = 5460 ] 
17:18:34: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5480>, <py_sfcl.CommandDataDefinition object at 0x06261510>) , Command count = 5461 ] 
17:18:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:34:  Read & Verify  Lba:0x00000002 Transfer Length:0x0001   
17:18:34: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x2 and transferLen:0x1
17:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5570>, <py_sfcl.CommandDataDefinition object at 0x06261570>) , Command count = 5462 ] 
17:18:34: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F53F0>, <py_sfcl.CommandDataDefinition object at 0x062615D0>) , Command count = 5463 ] 
17:18:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:34:  Read & Verify  Lba:0x00000003 Transfer Length:0x0001   
17:18:34: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x3 and transferLen:0x1
17:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5630>, <py_sfcl.CommandDataDefinition object at 0x06261630>) , Command count = 5464 ] 
17:18:34: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5660>, <py_sfcl.CommandDataDefinition object at 0x06261690>) , Command count = 5465 ] 
17:18:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:34:  Read & Verify  Lba:0x00000004 Transfer Length:0x0001   
17:18:34: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x4 and transferLen:0x1
17:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F51E0>, <py_sfcl.CommandDataDefinition object at 0x062616F0>) , Command count = 5466 ] 
17:18:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:34: [CH4372_ParameterResultCMD42]### Card is not locked  and Card is in 'Tran' state.
17:18:34: LOCKING the card
17:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261750>, <py_sfcl.CommandDataDefinition object at 0x06261840>) , Command count = 5467 ] 
17:18:34: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
17:18:34: Set password in the card
17:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5720>, <py_sfcl.CommandDataDefinition object at 0x062617B0>) , Command count = 5468 ] 
17:18:34: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 1, 0, 9, 0, 12]
17:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5780>, <py_sfcl.CommandDataDefinition object at 0x061F5690>) , Command count = 5469 ] 
17:18:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:34: Failed as expected, continuing the test.
17:18:34: [CH4372_ParameterResultCMD42]### Card is not locked  and Card is in 'Tran' state.
17:18:34: [CH4372_ParameterResultCMD42]##### SingleReadAddress to the card from startLba:0x0 to endSector:0x5
17:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F53C0>, <py_sfcl.CommandDataDefinition object at 0x061F5E70>) , Command count = 5470 ] 
17:18:34: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDF00>, <py_sfcl.CommandDataDefinition object at 0x054154B0>) , Command count = 5471 ] 
17:18:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:34:  Read & Verify  Lba:0x00000000 Transfer Length:0x0001   
17:18:34: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x0 and transferLen:0x1
17:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261870>, <py_sfcl.CommandDataDefinition object at 0x062618A0>) , Command count = 5472 ] 
17:18:34: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E93C0>, <py_sfcl.CommandDataDefinition object at 0x06261960>) , Command count = 5473 ] 
17:18:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:35:  Read & Verify  Lba:0x00000001 Transfer Length:0x0001   
17:18:35: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x1 and transferLen:0x1
17:18:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261990>, <py_sfcl.CommandDataDefinition object at 0x061FF780>) , Command count = 5474 ] 
17:18:35: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062619F0>, <py_sfcl.CommandDataDefinition object at 0x061FFF00>) , Command count = 5475 ] 
17:18:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:35:  Read & Verify  Lba:0x00000002 Transfer Length:0x0001   
17:18:35: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x2 and transferLen:0x1
17:18:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261A50>, <py_sfcl.CommandDataDefinition object at 0x061FFE40>) , Command count = 5476 ] 
17:18:35: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5A20>, <py_sfcl.CommandDataDefinition object at 0x062619C0>) , Command count = 5477 ] 
17:18:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:35:  Read & Verify  Lba:0x00000003 Transfer Length:0x0001   
17:18:35: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x3 and transferLen:0x1
17:18:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E92A0>, <py_sfcl.CommandDataDefinition object at 0x06261A20>) , Command count = 5478 ] 
17:18:35: CMD17[ READ_SINGLE_BLOCK ] Passed with R1 type response:[17, 0, 0, 9, 0, 12]
17:18:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5A80>, <py_sfcl.CommandDataDefinition object at 0x061FF5D0>) , Command count = 5479 ] 
17:18:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:35:  Read & Verify  Lba:0x00000004 Transfer Length:0x0001   
17:18:35: [CH4372_ParameterResultCMD42]### Single Read from StartLba:0x4 and transferLen:0x1
17:18:35: CLEAR the card
17:18:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0540D1B0>, <py_sfcl.CommandDataDefinition object at 0x06261B10>) , Command count = 5480 ] 
17:18:35: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
17:18:35: UNLOCKING the card
17:18:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5B10>, <py_sfcl.CommandDataDefinition object at 0x061FF3C0>) , Command count = 5481 ] 
17:18:35: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
17:18:35: ########################################
17:18:35: Finished Running script CH4372_Parameter_and_ResultCMD42 
17:18:35: ########################################
17:18:35: ########################################
17:18:35: Stated Running script CF403_Card_functional_4_3_7_4_Card_Lock_Unlock_Operation 
17:18:35: ########################################
17:18:35: ###### Running Card Lock Unlock Operation test 
17:18:35: [CF403_Card_functional_4_3_7_4_Card_Lock_Unlock_Operation]### globallockunlock is NO, Therefore Continuing the test case.
17:18:35: [CF403_Card_functional_4_3_7_4_Card_Lock_Unlock_Operation]### TEST CASE ITERATION IS STARTED.
17:18:35: [GO4_globalInitCard]### Switch to Specify Card Type
17:18:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:37: Host Frequency set to 25000 KHz
17:18:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:37: [GO18_globalSetVolt]### Set Host Voltage value.
17:18:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:18:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x0625C750>, 0x0, True) , Command count = 5482 ] 
17:18:37: [GO18_globalSetVolt]### Host voltage value is set.
17:18:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:18:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x061F5AE0>, 0x0, False) , Command count = 5483 ] 
17:18:37: [GO18_globalSetVolt]### Host voltage value is set.
17:18:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5484 ] 
17:18:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:18:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5485 ] 
17:18:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:18:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:18:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:18:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:18:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:18:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5486 ] 
17:18:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:18:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06255150>, <py_sfcl.CommandDataDefinition object at 0x06255180>) , Command count = 5487 ] 
17:18:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06255060>, <py_sfcl.CommandDataDefinition object at 0x06261C60>) , Command count = 5488 ] 
17:18:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:18:38: [ SetCardRCA(0x1, 0xD555) , Command count = 5489 ] 
17:18:38: [DVTCommonLib]### Identification :Idenfication of card completed 

17:18:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:38: Host Frequency set to 25000 KHz
17:18:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:38: ####CSD Registe 2.0 Values####
17:18:38: CSD_STRUCTURE                                 :0x1
17:18:38: Reserv1                                       :0x0
17:18:38: Time Access 1 TAAC                            :0xe
17:18:38: Time Access 2 NSAC*100                        :0x0
17:18:38: Data Transfer Rate TRAN_SPEED                 :0x32
17:18:38: Card Command Classess CCC                     :0x5b5
17:18:38: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:38: DSR(driver stage register)  DSR_IMP           :0x0
17:18:38: Reserv2                                       :0x0
17:18:38: Device Size C_SIZE                            :0xedc8
17:18:38: Reserv3                                       :0x0
17:18:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:38: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:38: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:38: Reserv4                                       :0x0
17:18:38: Write Speed Factor R2W_FACTOR                 :0x2
17:18:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:38: FILE_FORMAT_GRP                               :0x0
17:18:38: COPY flag                                     :0x1
17:18:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:38: File_Format                                   :0x0
17:18:38: CRC                                           :0x0
17:18:38: ####CSD Registe Values####  

17:18:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:18:38: [GetSCRRegisterEntry] Passed
17:18:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:18:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:18:38: Data_Status_After Erases          : 0
17:18:38: CPRM Security Support             : No Security
17:18:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:18:38: Spec. Version                     : Version 3.0X
17:18:38: Extended Security Support         : Extended_Security_Not_Supported
17:18:38: Command Support                   : COMMAND_SUPPORT
17:18:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062551B0>, <py_sfcl.CommandDataDefinition object at 0x06261D20>) , Command count = 5490 ] 
17:18:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261CF0>, <py_sfcl.CommandDataDefinition object at 0x06261BA0>) , Command count = 5491 ] 
17:18:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:18:38: [ SetBusWidth(0x4) , Command count = 5492 ] 
17:18:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:18:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061F5BD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5493 ] 
17:18:38: Protected Area Size 0x28000
17:18:38: Bus Width           2
17:18:38: Secure Mode         0
17:18:38: Speed  Class        4
17:18:38: Perf Move           0
17:18:38: Au Size             9
17:18:38: Erase Size          15
17:18:38: Erase Timeout       1
17:18:38: Erase offset        1
17:18:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:18:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:18:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:18:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5494 ] 
17:18:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:18:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:18:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:18:38: Host Frequency set to 100000 KHz
17:18:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:18:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:38: ####CSD Registe 2.0 Values####
17:18:38: CSD_STRUCTURE                                 :0x1
17:18:38: Reserv1                                       :0x0
17:18:38: Time Access 1 TAAC                            :0xe
17:18:38: Time Access 2 NSAC*100                        :0x0
17:18:38: Data Transfer Rate TRAN_SPEED                 :0xb
17:18:38: Card Command Classess CCC                     :0x5b5
17:18:38: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:38: DSR(driver stage register)  DSR_IMP           :0x0
17:18:38: Reserv2                                       :0x0
17:18:38: Device Size C_SIZE                            :0xedc8
17:18:38: Reserv3                                       :0x0
17:18:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:38: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:38: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:38: Reserv4                                       :0x0
17:18:38: Write Speed Factor R2W_FACTOR                 :0x2
17:18:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:38: FILE_FORMAT_GRP                               :0x0
17:18:38: COPY flag                                     :0x1
17:18:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:38: File_Format                                   :0x0
17:18:38: CRC                                           :0x0
17:18:38: ####CSD Registe Values####  

17:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5DB0>, <py_sfcl.CommandDataDefinition object at 0x061F5B40>) , Command count = 5495 ] 
17:18:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5D80>, <py_sfcl.CommandDataDefinition object at 0x0625C8D0>) , Command count = 5496 ] 
17:18:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:18:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:18:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5E10>, <py_sfcl.CommandDataDefinition object at 0x06261DB0>) , Command count = 5497 ] 
17:18:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625CC60>, <py_sfcl.CommandDataDefinition object at 0x0625C420>) , Command count = 5498 ] 
17:18:39: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
17:18:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261D50>, <py_sfcl.CommandDataDefinition object at 0x0625C7B0>) , Command count = 5499 ] 
17:18:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261D80>, <py_sfcl.CommandDataDefinition object at 0x061ED090>) , Command count = 5500 ] 
17:18:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:39: [CF403_Card_functional_4_3_7_4_Card_Lock_Unlock_Operation]##### CARD IS LOCKED and Ready for Data as expected.
17:18:45: ***************************************************** 

17:18:45: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   * 

17:18:45: *                                                   * 

17:18:45: *  Compatibility with this version is not verified! * 

17:18:45: ***************************************************** 

17:18:49: ######################################################################################################################################################
17:18:49: Resetting the card and passing init sequence again
17:18:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5503 ] 
17:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5F90>, <py_sfcl.CommandDataDefinition object at 0x061F5A50>) , Command count = 5504 ] 
17:18:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5AB0>, <py_sfcl.CommandDataDefinition object at 0x0625CD50>) , Command count = 5505 ] 
17:18:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:18:50: [ SetCardRCA(0x1, 0xD555) , Command count = 5506 ] 
17:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9D20>, <py_sfcl.CommandDataDefinition object at 0x0625CF60>) , Command count = 5507 ] 
17:18:50: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5FC0>, <py_sfcl.CommandDataDefinition object at 0x0625C240>) , Command count = 5508 ] 
17:18:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 2, 0, 7, 0, 15]
17:18:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:50: ####CSD Registe 2.0 Values####
17:18:50: CSD_STRUCTURE                                 :0x1
17:18:50: Reserv1                                       :0x0
17:18:50: Time Access 1 TAAC                            :0xe
17:18:50: Time Access 2 NSAC*100                        :0x0
17:18:50: Data Transfer Rate TRAN_SPEED                 :0x32
17:18:50: Card Command Classess CCC                     :0x5b5
17:18:50: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:50: DSR(driver stage register)  DSR_IMP           :0x0
17:18:50: Reserv2                                       :0x0
17:18:50: Device Size C_SIZE                            :0xedc8
17:18:50: Reserv3                                       :0x0
17:18:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:50: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:50: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:50: Reserv4                                       :0x0
17:18:50: Write Speed Factor R2W_FACTOR                 :0x2
17:18:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:50: FILE_FORMAT_GRP                               :0x0
17:18:50: COPY flag                                     :0x1
17:18:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:50: File_Format                                   :0x0
17:18:50: CRC                                           :0x0
17:18:50: ####CSD Registe Values####  

17:18:50: CSD Values: {'R2W_FACTOR': '0x2', 'READ_BL_LEN': '0x9', 'Reserv2': '0x0', 'TRAN_SPEED': '0x32', 'Reserv1': '0x0', 'READ_BL_PARTIAL': '0x0', 'Reserv4': '0x0', 'CRC': '0x0', 'ERASE_BLK_EN': '0x1', 'CCC': '0x5b5', 'DSR_IMP': '0x0', 'FILE_FORMAT_GRP': '0x0', 'Reserv3': '0x0', 'NSAC': '0x0', 'READ_BLK_MISALIGN': '0x0', 'WP_GRP_SIZE': '0x0', 'PERM_WRITE_PROTECT': '0x0', 'CSD_STRUCTURE': '0x1', 'WRITE_BL_LEN': '0x9', 'COPY': '0x1', 'TMP_WRITE_PROTECT': '0x1', 'C_SIZE': '0xedc8', 'WRITE_BL_PARTIAL': '0x0', 'SECTOR_SIZE': '0x7f', 'TAAC': '0xe', 'FILE_FORMAT': '0x0', 'WRITE_BLK_MISALIGN': '0x0', 'WP_GRP_ENABLE': '0x0'}
17:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625CF30>, <py_sfcl.CommandDataDefinition object at 0x0625CBA0>) , Command count = 5509 ] 
17:18:50: [ GetCardStatus() , Command count = 5510 ] 
17:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDF30>, <py_sfcl.CommandDataDefinition object at 0x0625C450>) , Command count = 5511 ] 
17:18:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625CBA0>, <py_sfcl.CommandDataDefinition object at 0x0625CF30>) , Command count = 5512 ] 
17:18:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 2, 0, 7, 0, 15]
17:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5C30>, <py_sfcl.CommandDataDefinition object at 0x0625AA20>) , Command count = 5513 ] 
17:18:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:50: [CF403_Card_functional_4_3_7_4_Card_Lock_Unlock_Operation]##### CARD IS LOCKED and Ready for Data as expected.
17:18:50: [GET_CID] Passed and returns CID 16 byte buffer: [3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11, 0]
17:18:50: ######## CID VALUES FOR THIS CARD ########
17:18:50: Manufacturer ID            : 3
17:18:50: OEM/Application ID         : 21316
17:18:50: Product Name               : AGGCD
17:18:50: Product Revision           : 128
17:18:50: Product Serial Number      : 591931648
17:18:50: Manufacturing Date         : November 2000
17:18:50: Checksum                   : 0
17:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625A990>, <py_sfcl.CommandDataDefinition object at 0x0625A810>) , Command count = 5514 ] 
17:18:50: [ GetCardStatus() , Command count = 5515 ] 
17:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDE70>, <py_sfcl.CommandDataDefinition object at 0x0625A630>) , Command count = 5516 ] 
17:18:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED960>, <py_sfcl.CommandDataDefinition object at 0x0625A810>) , Command count = 5517 ] 
17:18:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 2, 0, 7, 0, 15]
17:18:50: Manufacturer ID: 3
17:18:50: OEM/Application ID: 21316
17:18:50: Product Name: AGGCD
17:18:50: Product Revision: 128
17:18:50: Product Serial Number: 591931648
17:18:50: Manufacturing Date: November 2000
17:18:50: Checksum: 0
17:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA50>, <py_sfcl.CommandDataDefinition object at 0x0625AAB0>) , Command count = 5518 ] 
17:18:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED870>, <py_sfcl.CommandDataDefinition object at 0x0625A8A0>) , Command count = 5519 ] 
17:18:50: ACMD42[ SET_CLR_CARD_DETECT ] Passed with R1 type response:[42, 2, 0, 9, 32, 1]
17:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED1B0>, <py_sfcl.CommandDataDefinition object at 0x0625ABD0>) , Command count = 5520 ] 
17:18:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05405930>, <py_sfcl.CommandDataDefinition object at 0x0625A6F0>) , Command count = 5521 ] 
17:18:50: ACMD42[ SET_CLR_CARD_DETECT ] Passed with R1 type response:[42, 2, 0, 9, 32, 1]
17:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED510>, <py_sfcl.CommandDataDefinition object at 0x061F5F60>) , Command count = 5522 ] 
17:18:50: CMD15[ GO_INACTIVE_STATE ] Passed with R0 type response
17:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5270>, <py_sfcl.CommandDataDefinition object at 0x0625A840>) , Command count = 5523 ] 
17:18:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:18:52: ######################################################################################################################################################
17:18:52: Resetting the card and passing init sequence again
17:18:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5524 ] 
17:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED5D0>, <py_sfcl.CommandDataDefinition object at 0x061ED930>) , Command count = 5525 ] 
17:18:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED4B0>, <py_sfcl.CommandDataDefinition object at 0x0625AEA0>) , Command count = 5526 ] 
17:18:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:18:53: [ SetCardRCA(0x1, 0xD555) , Command count = 5527 ] 
17:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED390>, <py_sfcl.CommandDataDefinition object at 0x0625AC30>) , Command count = 5528 ] 
17:18:53: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED270>, <py_sfcl.CommandDataDefinition object at 0x0625ADB0>) , Command count = 5529 ] 
17:18:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 2, 0, 7, 0, 15]
17:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5ED0>, <py_sfcl.CommandDataDefinition object at 0x0625C060>) , Command count = 5530 ] 
17:18:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C030>, <py_sfcl.CommandDataDefinition object at 0x0625A420>) , Command count = 5531 ] 
17:18:53: [ GetCardStatus() , Command count = 5532 ] 
17:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C180>, <py_sfcl.CommandDataDefinition object at 0x0625C120>) , Command count = 5533 ] 
17:18:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C030>, <py_sfcl.CommandDataDefinition object at 0x061F5E40>) , Command count = 5534 ] 
17:18:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9E10>, <py_sfcl.CommandDataDefinition object at 0x0625C0F0>) , Command count = 5535 ] 
17:18:53: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625A300>, <py_sfcl.CommandDataDefinition object at 0x0625A030>) , Command count = 5536 ] 
17:18:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 2, 0, 7, 0, 15]
17:18:53: Card Capacity is High/Extended
17:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9C60>, <py_sfcl.CommandDataDefinition object at 0x0625C210>) , Command count = 5537 ] 
17:18:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:53: [CF403_Card_functional_4_3_7_4_Card_Lock_Unlock_Operation]##### CARD IS LOCKED and Ready for Data as expected.
17:18:53: CLEAR the card
17:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C360>, <py_sfcl.CommandDataDefinition object at 0x0625C2D0>) , Command count = 5538 ] 
17:18:53: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
17:18:53: [CF403_Card_functional_4_3_7_4_Card_Lock_Unlock_Operation]### HC CARD - TEST CASE ITERATION IS COMPLETED.
17:18:53: [CF403_Card_functional_4_3_7_4_Card_Lock_Unlock_Operation]### TEST CASE SECOND ITERATION IS STARTED.
17:18:53: [GO4_globalInitCard]### Switch to Specify Card Type
17:18:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:55: Host Frequency set to 25000 KHz
17:18:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:55: [GO18_globalSetVolt]### Set Host Voltage value.
17:18:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:18:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x061ED810>, 0x0, True) , Command count = 5539 ] 
17:18:55: [GO18_globalSetVolt]### Host voltage value is set.
17:18:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:18:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x061E96C0>, 0x0, False) , Command count = 5540 ] 
17:18:55: [GO18_globalSetVolt]### Host voltage value is set.
17:18:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5541 ] 
17:18:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:18:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5542 ] 
17:18:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:18:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:18:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:18:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:18:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:18:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5543 ] 
17:18:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:18:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:18:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9DB0>, <py_sfcl.CommandDataDefinition object at 0x061E9B70>) , Command count = 5544 ] 
17:18:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:18:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E92D0>, <py_sfcl.CommandDataDefinition object at 0x0625C510>) , Command count = 5545 ] 
17:18:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:18:55: [ SetCardRCA(0x1, 0xD555) , Command count = 5546 ] 
17:18:55: [DVTCommonLib]### Identification :Idenfication of card completed 

17:18:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:18:55: Host Frequency set to 25000 KHz
17:18:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:18:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:55: ####CSD Registe 2.0 Values####
17:18:55: CSD_STRUCTURE                                 :0x1
17:18:55: Reserv1                                       :0x0
17:18:55: Time Access 1 TAAC                            :0xe
17:18:55: Time Access 2 NSAC*100                        :0x0
17:18:55: Data Transfer Rate TRAN_SPEED                 :0x32
17:18:55: Card Command Classess CCC                     :0x5b5
17:18:55: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:55: DSR(driver stage register)  DSR_IMP           :0x0
17:18:55: Reserv2                                       :0x0
17:18:55: Device Size C_SIZE                            :0xedc8
17:18:55: Reserv3                                       :0x0
17:18:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:55: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:55: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:55: Reserv4                                       :0x0
17:18:55: Write Speed Factor R2W_FACTOR                 :0x2
17:18:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:55: FILE_FORMAT_GRP                               :0x0
17:18:55: COPY flag                                     :0x1
17:18:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:55: File_Format                                   :0x0
17:18:55: CRC                                           :0x0
17:18:55: ####CSD Registe Values####  

17:18:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:18:55: [GetSCRRegisterEntry] Passed
17:18:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:18:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:18:55: Data_Status_After Erases          : 0
17:18:55: CPRM Security Support             : No Security
17:18:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:18:55: Spec. Version                     : Version 3.0X
17:18:55: Extended Security Support         : Extended_Security_Not_Supported
17:18:55: Command Support                   : COMMAND_SUPPORT
17:18:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:18:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5360>, <py_sfcl.CommandDataDefinition object at 0x0625C570>) , Command count = 5547 ] 
17:18:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:18:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5390>, <py_sfcl.CommandDataDefinition object at 0x0625C3F0>) , Command count = 5548 ] 
17:18:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:18:55: [ SetBusWidth(0x4) , Command count = 5549 ] 
17:18:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:18:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0625C840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5550 ] 
17:18:55: Protected Area Size 0x28000
17:18:55: Bus Width           2
17:18:55: Secure Mode         0
17:18:55: Speed  Class        4
17:18:55: Perf Move           0
17:18:55: Au Size             9
17:18:55: Erase Size          15
17:18:55: Erase Timeout       1
17:18:55: Erase offset        1
17:18:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:18:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:18:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:18:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5551 ] 
17:18:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:18:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:18:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:18:55: Host Frequency set to 100000 KHz
17:18:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:18:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:18:55: ####CSD Registe 2.0 Values####
17:18:55: CSD_STRUCTURE                                 :0x1
17:18:55: Reserv1                                       :0x0
17:18:55: Time Access 1 TAAC                            :0xe
17:18:56: Time Access 2 NSAC*100                        :0x0
17:18:56: Data Transfer Rate TRAN_SPEED                 :0xb
17:18:56: Card Command Classess CCC                     :0x5b5
17:18:56: Max Read Data Block Length  READ_BL_LEN       :0x9
17:18:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:18:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:18:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:18:56: DSR(driver stage register)  DSR_IMP           :0x0
17:18:56: Reserv2                                       :0x0
17:18:56: Device Size C_SIZE                            :0xedc8
17:18:56: Reserv3                                       :0x0
17:18:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:18:56: Erase Sector Size SECTOR_SIZE                 :0x7f
17:18:56: Write Protect Group Size WP_GRP_SIZE          :0x0
17:18:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:18:56: Reserv4                                       :0x0
17:18:56: Write Speed Factor R2W_FACTOR                 :0x2
17:18:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:18:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:18:56: FILE_FORMAT_GRP                               :0x0
17:18:56: COPY flag                                     :0x1
17:18:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:18:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:18:56: File_Format                                   :0x0
17:18:56: CRC                                           :0x0
17:18:56: ####CSD Registe Values####  

17:18:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053C6CF0>, <py_sfcl.CommandDataDefinition object at 0x0625C690>) , Command count = 5552 ] 
17:18:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:18:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054056F0>, <py_sfcl.CommandDataDefinition object at 0x0625C5A0>) , Command count = 5553 ] 
17:18:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:18:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:18:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5060>, <py_sfcl.CommandDataDefinition object at 0x061E97B0>) , Command count = 5554 ] 
17:18:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625A240>, <py_sfcl.CommandDataDefinition object at 0x0625A180>) , Command count = 5555 ] 
17:18:56: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
17:18:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0540D180>, <py_sfcl.CommandDataDefinition object at 0x0625C930>) , Command count = 5556 ] 
17:18:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5900>, <py_sfcl.CommandDataDefinition object at 0x061E9690>) , Command count = 5557 ] 
17:18:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:18:56: [CF403_Card_functional_4_3_7_4_Card_Lock_Unlock_Operation]##### CARD IS LOCKED and Ready for Data as expected.
17:19:02: ***************************************************** 

17:19:02: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   * 

17:19:02: *                                                   * 

17:19:02: *  Compatibility with this version is not verified! * 

17:19:02: ***************************************************** 

17:19:07: ######################################################################################################################################################
17:19:07: Resetting the card and passing init sequence again
17:19:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5560 ] 
17:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0540DFC0>, <py_sfcl.CommandDataDefinition object at 0x05405780>) , Command count = 5561 ] 
17:19:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E96F0>, <py_sfcl.CommandDataDefinition object at 0x0625CB10>) , Command count = 5562 ] 
17:19:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:19:07: [ SetCardRCA(0x1, 0xD555) , Command count = 5563 ] 
17:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612FDE0>, <py_sfcl.CommandDataDefinition object at 0x061EDDB0>) , Command count = 5564 ] 
17:19:07: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED8D0>, <py_sfcl.CommandDataDefinition object at 0x0625CC90>) , Command count = 5565 ] 
17:19:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 2, 0, 7, 0, 15]
17:19:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:19:07: ####CSD Registe 2.0 Values####
17:19:07: CSD_STRUCTURE                                 :0x1
17:19:07: Reserv1                                       :0x0
17:19:07: Time Access 1 TAAC                            :0xe
17:19:07: Time Access 2 NSAC*100                        :0x0
17:19:07: Data Transfer Rate TRAN_SPEED                 :0x32
17:19:07: Card Command Classess CCC                     :0x5b5
17:19:07: Max Read Data Block Length  READ_BL_LEN       :0x9
17:19:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:19:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:19:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:19:07: DSR(driver stage register)  DSR_IMP           :0x0
17:19:07: Reserv2                                       :0x0
17:19:07: Device Size C_SIZE                            :0xedc8
17:19:07: Reserv3                                       :0x0
17:19:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:19:07: Erase Sector Size SECTOR_SIZE                 :0x7f
17:19:07: Write Protect Group Size WP_GRP_SIZE          :0x0
17:19:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:19:07: Reserv4                                       :0x0
17:19:07: Write Speed Factor R2W_FACTOR                 :0x2
17:19:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:19:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:19:07: FILE_FORMAT_GRP                               :0x0
17:19:07: COPY flag                                     :0x1
17:19:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:19:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:19:07: File_Format                                   :0x0
17:19:07: CRC                                           :0x0
17:19:07: ####CSD Registe Values####  

17:19:07: CSD Values: {'R2W_FACTOR': '0x2', 'READ_BL_LEN': '0x9', 'Reserv2': '0x0', 'TRAN_SPEED': '0x32', 'Reserv1': '0x0', 'READ_BL_PARTIAL': '0x0', 'Reserv4': '0x0', 'CRC': '0x0', 'ERASE_BLK_EN': '0x1', 'CCC': '0x5b5', 'DSR_IMP': '0x0', 'FILE_FORMAT_GRP': '0x0', 'Reserv3': '0x0', 'NSAC': '0x0', 'READ_BLK_MISALIGN': '0x0', 'WP_GRP_SIZE': '0x0', 'PERM_WRITE_PROTECT': '0x0', 'CSD_STRUCTURE': '0x1', 'WRITE_BL_LEN': '0x9', 'COPY': '0x1', 'TMP_WRITE_PROTECT': '0x1', 'C_SIZE': '0xedc8', 'WRITE_BL_PARTIAL': '0x0', 'SECTOR_SIZE': '0x7f', 'TAAC': '0xe', 'FILE_FORMAT': '0x0', 'WRITE_BLK_MISALIGN': '0x0', 'WP_GRP_ENABLE': '0x0'}
17:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C9F0>, <py_sfcl.CommandDataDefinition object at 0x0625CAE0>) , Command count = 5566 ] 
17:19:07: [ GetCardStatus() , Command count = 5567 ] 
17:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05415300>, <py_sfcl.CommandDataDefinition object at 0x0625CB70>) , Command count = 5568 ] 
17:19:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625CAE0>, <py_sfcl.CommandDataDefinition object at 0x0625C9F0>) , Command count = 5569 ] 
17:19:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 2, 0, 7, 0, 15]
17:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05405630>, <py_sfcl.CommandDataDefinition object at 0x0625CFC0>) , Command count = 5570 ] 
17:19:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:19:07: [CF403_Card_functional_4_3_7_4_Card_Lock_Unlock_Operation]##### CARD IS LOCKED and Ready for Data as expected.
17:19:07: [GET_CID] Passed and returns CID 16 byte buffer: [3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11, 0]
17:19:07: ######## CID VALUES FOR THIS CARD ########
17:19:07: Manufacturer ID            : 3
17:19:07: OEM/Application ID         : 21316
17:19:07: Product Name               : AGGCD
17:19:07: Product Revision           : 128
17:19:07: Product Serial Number      : 591931648
17:19:07: Manufacturing Date         : November 2000
17:19:07: Checksum                   : 0
17:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D060>, <py_sfcl.CommandDataDefinition object at 0x0625AF00>) , Command count = 5571 ] 
17:19:07: [ GetCardStatus() , Command count = 5572 ] 
17:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D120>, <py_sfcl.CommandDataDefinition object at 0x0625D0C0>) , Command count = 5573 ] 
17:19:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE3C0>, <py_sfcl.CommandDataDefinition object at 0x0625D060>) , Command count = 5574 ] 
17:19:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 2, 0, 7, 0, 15]
17:19:07: Manufacturer ID: 3
17:19:07: OEM/Application ID: 21316
17:19:07: Product Name: AGGCD
17:19:07: Product Revision: 128
17:19:07: Product Serial Number: 591931648
17:19:07: Manufacturing Date: November 2000
17:19:07: Checksum: 0
17:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D090>, <py_sfcl.CommandDataDefinition object at 0x0625D180>) , Command count = 5575 ] 
17:19:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE450>, <py_sfcl.CommandDataDefinition object at 0x060DE480>) , Command count = 5576 ] 
17:19:07: ACMD42[ SET_CLR_CARD_DETECT ] Passed with R1 type response:[42, 2, 0, 9, 32, 1]
17:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D150>, <py_sfcl.CommandDataDefinition object at 0x0625D240>) , Command count = 5577 ] 
17:19:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE4B0>, <py_sfcl.CommandDataDefinition object at 0x060DE4E0>) , Command count = 5578 ] 
17:19:08: ACMD42[ SET_CLR_CARD_DETECT ] Passed with R1 type response:[42, 2, 0, 9, 32, 1]
17:19:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9450>, <py_sfcl.CommandDataDefinition object at 0x0625D210>) , Command count = 5579 ] 
17:19:08: CMD15[ GO_INACTIVE_STATE ] Passed with R0 type response
17:19:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053D29C0>, <py_sfcl.CommandDataDefinition object at 0x060DE570>) , Command count = 5580 ] 
17:19:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:19:10: ######################################################################################################################################################
17:19:10: Resetting the card and passing init sequence again
17:19:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5581 ] 
17:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D330>, <py_sfcl.CommandDataDefinition object at 0x0625D420>) , Command count = 5582 ] 
17:19:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F52A0>, <py_sfcl.CommandDataDefinition object at 0x061E97E0>) , Command count = 5583 ] 
17:19:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:19:10: [ SetCardRCA(0x1, 0xD555) , Command count = 5584 ] 
17:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D450>, <py_sfcl.CommandDataDefinition object at 0x0625D540>) , Command count = 5585 ] 
17:19:10: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060EB060>, <py_sfcl.CommandDataDefinition object at 0x0625D4B0>) , Command count = 5586 ] 
17:19:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 2, 0, 7, 0, 15]
17:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE540>, <py_sfcl.CommandDataDefinition object at 0x061E9A80>) , Command count = 5587 ] 
17:19:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D570>, <py_sfcl.CommandDataDefinition object at 0x0625D660>) , Command count = 5588 ] 
17:19:10: [ GetCardStatus() , Command count = 5589 ] 
17:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D2180>, <py_sfcl.CommandDataDefinition object at 0x061F58D0>) , Command count = 5590 ] 
17:19:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D660>, <py_sfcl.CommandDataDefinition object at 0x0625D570>) , Command count = 5591 ] 
17:19:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D22A0>, <py_sfcl.CommandDataDefinition object at 0x060DECF0>) , Command count = 5592 ] 
17:19:10: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9240>, <py_sfcl.CommandDataDefinition object at 0x0625D750>) , Command count = 5593 ] 
17:19:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 2, 0, 7, 0, 15]
17:19:10: Card Capacity is High/Extended
17:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9300>, <py_sfcl.CommandDataDefinition object at 0x0625D7B0>) , Command count = 5594 ] 
17:19:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:19:10: [CF403_Card_functional_4_3_7_4_Card_Lock_Unlock_Operation]##### CARD IS LOCKED and Ready for Data as expected.
17:19:10: CLEAR the card
17:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D810>, <py_sfcl.CommandDataDefinition object at 0x0625D960>) , Command count = 5595 ] 
17:19:10: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
17:19:10: [CF403_Card_functional_4_3_7_4_Card_Lock_Unlock_Operation]### HC CARD - TEST CASE ITERATION IS COMPLETED.
17:19:10: [CF403_Card_functional_4_3_7_4_Card_Lock_Unlock_Operation]### TEST CASE EXECUTION IS COMPLETED.
17:19:10: ########################################
17:19:10: Finished Running script CF403_Card_functional_4_3_7_4_Card_Lock_Unlock_Operation 
17:19:10: ########################################
17:19:10: ########################################
17:19:10: Stated Running script CF404_Card_functional_4_3_7_5_Forced_erase 
17:19:10: ########################################
17:19:10: ###### Running Forced Erase Test 
17:19:10: [CF402_Card_functional_4_3_7_1_General_Lock_Unlock_operation]### globallockunlock is NO, Therefore Continuing the test case.
17:19:10: [CF402_Card_functional_4_3_7_1_General_Lock_Unlock_operation]### TEST CASE ITERATION IS STARTED.
17:19:10: [GO4_globalInitCard]### Switch to Specify Card Type
17:19:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:19:12: Host Frequency set to 25000 KHz
17:19:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:19:12: [GO18_globalSetVolt]### Set Host Voltage value.
17:19:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:19:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x06260120>, 0x0, True) , Command count = 5596 ] 
17:19:12: [GO18_globalSetVolt]### Host voltage value is set.
17:19:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:19:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x061E9060>, 0x0, False) , Command count = 5597 ] 
17:19:12: [GO18_globalSetVolt]### Host voltage value is set.
17:19:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5598 ] 
17:19:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:19:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5599 ] 
17:19:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:19:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:19:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:19:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:19:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:19:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5600 ] 
17:19:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:19:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:19:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9420>, <py_sfcl.CommandDataDefinition object at 0x0625DA50>) , Command count = 5601 ] 
17:19:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:19:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9390>, <py_sfcl.CommandDataDefinition object at 0x0625DAB0>) , Command count = 5602 ] 
17:19:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:19:13: [ SetCardRCA(0x1, 0xD555) , Command count = 5603 ] 
17:19:13: [DVTCommonLib]### Identification :Idenfication of card completed 

17:19:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:19:13: Host Frequency set to 25000 KHz
17:19:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:19:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:19:13: ####CSD Registe 2.0 Values####
17:19:13: CSD_STRUCTURE                                 :0x1
17:19:13: Reserv1                                       :0x0
17:19:13: Time Access 1 TAAC                            :0xe
17:19:13: Time Access 2 NSAC*100                        :0x0
17:19:13: Data Transfer Rate TRAN_SPEED                 :0x32
17:19:13: Card Command Classess CCC                     :0x5b5
17:19:13: Max Read Data Block Length  READ_BL_LEN       :0x9
17:19:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:19:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:19:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:19:13: DSR(driver stage register)  DSR_IMP           :0x0
17:19:13: Reserv2                                       :0x0
17:19:13: Device Size C_SIZE                            :0xedc8
17:19:13: Reserv3                                       :0x0
17:19:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:19:13: Erase Sector Size SECTOR_SIZE                 :0x7f
17:19:13: Write Protect Group Size WP_GRP_SIZE          :0x0
17:19:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:19:13: Reserv4                                       :0x0
17:19:13: Write Speed Factor R2W_FACTOR                 :0x2
17:19:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:19:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:19:13: FILE_FORMAT_GRP                               :0x0
17:19:13: COPY flag                                     :0x1
17:19:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:19:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:19:13: File_Format                                   :0x0
17:19:13: CRC                                           :0x0
17:19:13: ####CSD Registe Values####  

17:19:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:19:13: [GetSCRRegisterEntry] Passed
17:19:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:19:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:19:13: Data_Status_After Erases          : 0
17:19:13: CPRM Security Support             : No Security
17:19:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:19:13: Spec. Version                     : Version 3.0X
17:19:13: Extended Security Support         : Extended_Security_Not_Supported
17:19:13: Command Support                   : COMMAND_SUPPORT
17:19:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:19:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625DB70>, <py_sfcl.CommandDataDefinition object at 0x0625DC60>) , Command count = 5604 ] 
17:19:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:19:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9270>, <py_sfcl.CommandDataDefinition object at 0x0625DBD0>) , Command count = 5605 ] 
17:19:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:19:13: [ SetBusWidth(0x4) , Command count = 5606 ] 
17:19:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:19:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061E98D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5607 ] 
17:19:13: Protected Area Size 0x28000
17:19:13: Bus Width           2
17:19:13: Secure Mode         0
17:19:13: Speed  Class        4
17:19:13: Perf Move           0
17:19:13: Au Size             9
17:19:13: Erase Size          15
17:19:13: Erase Timeout       1
17:19:13: Erase offset        1
17:19:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:19:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:19:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:19:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5608 ] 
17:19:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:19:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:19:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:19:13: Host Frequency set to 100000 KHz
17:19:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:19:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:19:13: ####CSD Registe 2.0 Values####
17:19:13: CSD_STRUCTURE                                 :0x1
17:19:13: Reserv1                                       :0x0
17:19:13: Time Access 1 TAAC                            :0xe
17:19:13: Time Access 2 NSAC*100                        :0x0
17:19:13: Data Transfer Rate TRAN_SPEED                 :0xb
17:19:13: Card Command Classess CCC                     :0x5b5
17:19:13: Max Read Data Block Length  READ_BL_LEN       :0x9
17:19:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:19:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:19:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:19:13: DSR(driver stage register)  DSR_IMP           :0x0
17:19:13: Reserv2                                       :0x0
17:19:13: Device Size C_SIZE                            :0xedc8
17:19:13: Reserv3                                       :0x0
17:19:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:19:13: Erase Sector Size SECTOR_SIZE                 :0x7f
17:19:13: Write Protect Group Size WP_GRP_SIZE          :0x0
17:19:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:19:13: Reserv4                                       :0x0
17:19:13: Write Speed Factor R2W_FACTOR                 :0x2
17:19:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:19:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:19:13: FILE_FORMAT_GRP                               :0x0
17:19:13: COPY flag                                     :0x1
17:19:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:19:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:19:13: File_Format                                   :0x0
17:19:13: CRC                                           :0x0
17:19:13: ####CSD Registe Values####  

17:19:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05405750>, <py_sfcl.CommandDataDefinition object at 0x0625DAE0>) , Command count = 5609 ] 
17:19:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:19:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5870>, <py_sfcl.CommandDataDefinition object at 0x0625DDB0>) , Command count = 5610 ] 
17:19:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:19:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:19:14: [GO4_globalInitCard]### Switch to Specify Card Type
17:19:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:19:16: Host Frequency set to 25000 KHz
17:19:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:19:16: [GO18_globalSetVolt]### Set Host Voltage value.
17:19:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:19:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x061F51B0>, 0x0, True) , Command count = 5611 ] 
17:19:16: [GO18_globalSetVolt]### Host voltage value is set.
17:19:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:19:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x061F5240>, 0x0, False) , Command count = 5612 ] 
17:19:16: [GO18_globalSetVolt]### Host voltage value is set.
17:19:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5613 ] 
17:19:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:19:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5614 ] 
17:19:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:19:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:19:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:19:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:19:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:19:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5615 ] 
17:19:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:19:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:19:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDB70>, <py_sfcl.CommandDataDefinition object at 0x0625DD20>) , Command count = 5616 ] 
17:19:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:19:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0540DE10>, <py_sfcl.CommandDataDefinition object at 0x061E9990>) , Command count = 5617 ] 
17:19:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:19:16: [ SetCardRCA(0x1, 0xD555) , Command count = 5618 ] 
17:19:16: [DVTCommonLib]### Identification :Idenfication of card completed 

17:19:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:19:16: Host Frequency set to 25000 KHz
17:19:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:19:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:19:16: ####CSD Registe 2.0 Values####
17:19:16: CSD_STRUCTURE                                 :0x1
17:19:16: Reserv1                                       :0x0
17:19:16: Time Access 1 TAAC                            :0xe
17:19:16: Time Access 2 NSAC*100                        :0x0
17:19:16: Data Transfer Rate TRAN_SPEED                 :0x32
17:19:16: Card Command Classess CCC                     :0x5b5
17:19:16: Max Read Data Block Length  READ_BL_LEN       :0x9
17:19:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:19:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:19:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:19:16: DSR(driver stage register)  DSR_IMP           :0x0
17:19:16: Reserv2                                       :0x0
17:19:16: Device Size C_SIZE                            :0xedc8
17:19:16: Reserv3                                       :0x0
17:19:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:19:16: Erase Sector Size SECTOR_SIZE                 :0x7f
17:19:16: Write Protect Group Size WP_GRP_SIZE          :0x0
17:19:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:19:16: Reserv4                                       :0x0
17:19:16: Write Speed Factor R2W_FACTOR                 :0x2
17:19:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:19:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:19:16: FILE_FORMAT_GRP                               :0x0
17:19:16: COPY flag                                     :0x1
17:19:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:19:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:19:16: File_Format                                   :0x0
17:19:16: CRC                                           :0x0
17:19:16: ####CSD Registe Values####  

17:19:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:19:16: [GetSCRRegisterEntry] Passed
17:19:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:19:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:19:16: Data_Status_After Erases          : 0
17:19:16: CPRM Security Support             : No Security
17:19:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:19:16: Spec. Version                     : Version 3.0X
17:19:16: Extended Security Support         : Extended_Security_Not_Supported
17:19:16: Command Support                   : COMMAND_SUPPORT
17:19:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:19:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9C00>, <py_sfcl.CommandDataDefinition object at 0x0625DB10>) , Command count = 5619 ] 
17:19:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:19:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDC00>, <py_sfcl.CommandDataDefinition object at 0x0625DFC0>) , Command count = 5620 ] 
17:19:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:19:16: [ SetBusWidth(0x4) , Command count = 5621 ] 
17:19:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:19:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0625DEA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5622 ] 
17:19:16: Protected Area Size 0x28000
17:19:16: Bus Width           2
17:19:16: Secure Mode         0
17:19:16: Speed  Class        4
17:19:16: Perf Move           0
17:19:16: Au Size             9
17:19:16: Erase Size          15
17:19:16: Erase Timeout       1
17:19:16: Erase offset        1
17:19:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:19:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:19:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:19:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5623 ] 
17:19:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:19:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:19:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:19:16: Host Frequency set to 100000 KHz
17:19:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:19:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:19:16: ####CSD Registe 2.0 Values####
17:19:16: CSD_STRUCTURE                                 :0x1
17:19:16: Reserv1                                       :0x0
17:19:16: Time Access 1 TAAC                            :0xe
17:19:16: Time Access 2 NSAC*100                        :0x0
17:19:16: Data Transfer Rate TRAN_SPEED                 :0xb
17:19:16: Card Command Classess CCC                     :0x5b5
17:19:16: Max Read Data Block Length  READ_BL_LEN       :0x9
17:19:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:19:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:19:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:19:16: DSR(driver stage register)  DSR_IMP           :0x0
17:19:16: Reserv2                                       :0x0
17:19:16: Device Size C_SIZE                            :0xedc8
17:19:16: Reserv3                                       :0x0
17:19:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:19:16: Erase Sector Size SECTOR_SIZE                 :0x7f
17:19:16: Write Protect Group Size WP_GRP_SIZE          :0x0
17:19:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:19:16: Reserv4                                       :0x0
17:19:17: Write Speed Factor R2W_FACTOR                 :0x2
17:19:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:19:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:19:17: FILE_FORMAT_GRP                               :0x0
17:19:17: COPY flag                                     :0x1
17:19:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:19:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:19:17: File_Format                                   :0x0
17:19:17: CRC                                           :0x0
17:19:17: ####CSD Registe Values####  

17:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9D50>, <py_sfcl.CommandDataDefinition object at 0x0625DE40>) , Command count = 5624 ] 
17:19:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9AE0>, <py_sfcl.CommandDataDefinition object at 0x0625DD80>) , Command count = 5625 ] 
17:19:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:19:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FF150>, <py_sfcl.CommandDataDefinition object at 0x061E9CF0>) , Command count = 5626 ] 
17:19:17: [ GetCardStatus() , Command count = 5627 ] 
17:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D930>, <py_sfcl.CommandDataDefinition object at 0x0625DA80>) , Command count = 5628 ] 
17:19:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9CF0>, <py_sfcl.CommandDataDefinition object at 0x061FF150>) , Command count = 5629 ] 
17:19:17: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:19:17: [Random_WriteReadAddress] ### Card type = SD 2.0##CSD Version 2.0 High Capacity Card--Passed as Expected 
17:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9DE0>, <py_sfcl.CommandDataDefinition object at 0x06260DB0>) , Command count = 5630 ] 
17:19:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:19:17: [DVTCommonLib]### MultipleWrite_Exp_Hndl :Multiple Write to the card at StartLba:0x28156C to EndLba:0x299C0C
17:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9F00>, <py_sfcl.CommandDataDefinition object at 0x062600C0>) , Command count = 5631 ] 
17:19:17: CMD25[ WRITE_MULTIPLE_BLOCK ] Passed with R1 type response:[25, 0, 0, 9, 0, 6]
17:19:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625AF90>, <py_sfcl.CommandDataDefinition object at 0x0625AE10>) , Command count = 5632 ] 
17:19:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Rcv', 'READY_FOR_DATA']
17:19:17:   Write Lba:0x0028156C  Transfer Length:0x0200 
17:19:17: [DVTCommonLib]### MultipleWrite_Exp_Hndl :Multiple Write Failed from StartLba:0x28156C to EndLba:0x299C0C
17:19:17: Exception raised: AttributeError instance has no attribute 'GetErrorNumber'
17:19:17: [DVTCommonLib]### MultipleWrite_Exp_Hndl :Multiple Write to the card at StartLba:0x1483FC1 to EndLba:0x149C661
17:19:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5930>, <py_sfcl.CommandDataDefinition object at 0x0625AC00>) , Command count = 5633 ] 
17:19:18: [ GetCardStatus() , Command count = 5634 ] 
17:19:18: CMD25[ WRITE_MULTIPLE_BLOCK ] Failed with an exception
17:19:18:  Write Lba:0x01483FC1 Transfer Length:0x0200 FAILED 

17:19:18: [DVTCommonLib]### MultipleWrite_Exp_Hndl :Multiple Write Failed from StartLba:0x1483FC1 to EndLba:0x149C661
17:19:18: [DVTCommonLib]### Exception_Details :Time out error on card response
17:19:18: Exception raised: 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x1L (1) executing command 'SendBasicCommand'
   Description : Time out error on card response
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.CommandDefinition object at 0x061F5930>, <py_sfcl.CommandDataDefinition object at 0x0625AC00>)')
   Extended error information:
      Status         : <CantDetermine>
      Is busy?       : <CantDetermine>

17:19:18: [DVTCommonLib]### MultipleWrite_Exp_Hndl :Multiple Write to the card at StartLba:0x2E9AAC0 to EndLba:0x2EB3160
17:19:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9BA0>, <py_sfcl.CommandDataDefinition object at 0x061F5120>) , Command count = 5635 ] 
17:19:18: [ GetCardStatus() , Command count = 5636 ] 
17:19:18: CMD25[ WRITE_MULTIPLE_BLOCK ] Failed with an exception
17:19:18:  Write Lba:0x02E9AAC0 Transfer Length:0x0200 FAILED 

17:19:18: [DVTCommonLib]### MultipleWrite_Exp_Hndl :Multiple Write Failed from StartLba:0x2E9AAC0 to EndLba:0x2EB3160
17:19:18: [DVTCommonLib]### Exception_Details :Time out error on card response
17:19:18: Exception raised: 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x1L (1) executing command 'SendBasicCommand'
   Description : Time out error on card response
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.CommandDefinition object at 0x061E9BA0>, <py_sfcl.CommandDataDefinition object at 0x061F5120>)')
   Extended error information:
      Status         : <CantDetermine>
      Is busy?       : <CantDetermine>

17:19:18: [DVTCommonLib]### MultipleRead_Exp_Hndl :Multiple Read to the card at StartLba:0x28156C to EndLba:0x299C0C
17:19:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625AC00>, <py_sfcl.CommandDataDefinition object at 0x061F5930>) , Command count = 5637 ] 
17:19:18: [ GetCardStatus() , Command count = 5638 ] 
17:19:18: CMD18[ READ_MULTI_BLOCK ] Failed with an exception
17:19:18:  Read Lba:0x0028156C Transfer Length:0x0200 FAILED 
 
17:19:18: [DVTCommonLib]### MultipleRead_Exp_Hndl :Multiple Read Failed from StartLba:0x28156C to EndLba:0x299C0C
17:19:18: [DVTCommonLib]### Exception_Details :Time out error on card response
17:19:18: Failed Running script <module 'CF404_Card_functional_4_3_7_5_Forced_erase' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_4_Card_Functional\CF404_Card_functional_4_3_7_5_Forced_erase.pyc'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x1L (1) executing command 'SendBasicCommand'
   Description : Time out error on card response
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.CommandDefinition object at 0x0625AC00>, <py_sfcl.CommandDataDefinition object at 0x061F5930>)')
   Extended error information:
      Status         : <CantDetermine>
      Is busy?       : <CantDetermine>
 
17:19:18: ########################################
17:19:18: ########################################
17:19:18: Stated Running script CH4376_ForceEraseToUnlockedCard 
17:19:18: ########################################
17:19:18: ###### Running ForceEraseToUnlockedCard Test 
17:19:18: [GO4_globalInitCard]### Switch to Specify Card Type
17:19:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:19:20: Host Frequency set to 25000 KHz
17:19:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:19:20: [GO18_globalSetVolt]### Set Host Voltage value.
17:19:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:19:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x061FF300>, 0x0, True) , Command count = 5639 ] 
17:19:20: [GO18_globalSetVolt]### Host voltage value is set.
17:19:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:19:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x061ED300>, 0x0, False) , Command count = 5640 ] 
17:19:20: [GO18_globalSetVolt]### Host voltage value is set.
17:19:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5641 ] 
17:19:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:19:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5642 ] 
17:19:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:19:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:19:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:19:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:19:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:19:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5643 ] 
17:19:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:19:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:19:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5D20>, <py_sfcl.CommandDataDefinition object at 0x061ED4E0>) , Command count = 5644 ] 
17:19:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:19:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9E70>, <py_sfcl.CommandDataDefinition object at 0x0625EC60>) , Command count = 5645 ] 
17:19:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:19:21: [ SetCardRCA(0x1, 0xD555) , Command count = 5646 ] 
17:19:21: [DVTCommonLib]### Identification :Idenfication of card completed 

17:19:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:19:21: Host Frequency set to 25000 KHz
17:19:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:19:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:19:21: ####CSD Registe 2.0 Values####
17:19:21: CSD_STRUCTURE                                 :0x1
17:19:21: Reserv1                                       :0x0
17:19:21: Time Access 1 TAAC                            :0xe
17:19:21: Time Access 2 NSAC*100                        :0x0
17:19:21: Data Transfer Rate TRAN_SPEED                 :0x32
17:19:21: Card Command Classess CCC                     :0x5b5
17:19:21: Max Read Data Block Length  READ_BL_LEN       :0x9
17:19:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:19:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:19:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:19:21: DSR(driver stage register)  DSR_IMP           :0x0
17:19:21: Reserv2                                       :0x0
17:19:21: Device Size C_SIZE                            :0xedc8
17:19:21: Reserv3                                       :0x0
17:19:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:19:21: Erase Sector Size SECTOR_SIZE                 :0x7f
17:19:21: Write Protect Group Size WP_GRP_SIZE          :0x0
17:19:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:19:21: Reserv4                                       :0x0
17:19:21: Write Speed Factor R2W_FACTOR                 :0x2
17:19:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:19:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:19:21: FILE_FORMAT_GRP                               :0x0
17:19:21: COPY flag                                     :0x1
17:19:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:19:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:19:21: File_Format                                   :0x0
17:19:21: CRC                                           :0x0
17:19:21: ####CSD Registe Values####  

17:19:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:19:21: [GetSCRRegisterEntry] Passed
17:19:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:19:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:19:21: Data_Status_After Erases          : 0
17:19:21: CPRM Security Support             : No Security
17:19:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:19:21: Spec. Version                     : Version 3.0X
17:19:21: Extended Security Support         : Extended_Security_Not_Supported
17:19:21: Command Support                   : COMMAND_SUPPORT
17:19:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:19:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054056C0>, <py_sfcl.CommandDataDefinition object at 0x0625E780>) , Command count = 5647 ] 
17:19:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:19:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9720>, <py_sfcl.CommandDataDefinition object at 0x0625E9C0>) , Command count = 5648 ] 
17:19:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:19:21: [ SetBusWidth(0x4) , Command count = 5649 ] 
17:19:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:19:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0625EC90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5650 ] 
17:19:21: Protected Area Size 0x28000
17:19:21: Bus Width           2
17:19:21: Secure Mode         0
17:19:21: Speed  Class        4
17:19:21: Perf Move           0
17:19:21: Au Size             9
17:19:21: Erase Size          15
17:19:21: Erase Timeout       1
17:19:21: Erase offset        1
17:19:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:19:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:19:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:19:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5651 ] 
17:19:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:19:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:19:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:19:21: Host Frequency set to 100000 KHz
17:19:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:19:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:19:21: ####CSD Registe 2.0 Values####
17:19:21: CSD_STRUCTURE                                 :0x1
17:19:21: Reserv1                                       :0x0
17:19:21: Time Access 1 TAAC                            :0xe
17:19:21: Time Access 2 NSAC*100                        :0x0
17:19:21: Data Transfer Rate TRAN_SPEED                 :0xb
17:19:21: Card Command Classess CCC                     :0x5b5
17:19:21: Max Read Data Block Length  READ_BL_LEN       :0x9
17:19:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:19:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:19:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:19:21: DSR(driver stage register)  DSR_IMP           :0x0
17:19:21: Reserv2                                       :0x0
17:19:21: Device Size C_SIZE                            :0xedc8
17:19:21: Reserv3                                       :0x0
17:19:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:19:21: Erase Sector Size SECTOR_SIZE                 :0x7f
17:19:21: Write Protect Group Size WP_GRP_SIZE          :0x0
17:19:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:19:21: Reserv4                                       :0x0
17:19:21: Write Speed Factor R2W_FACTOR                 :0x2
17:19:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:19:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:19:21: FILE_FORMAT_GRP                               :0x0
17:19:21: COPY flag                                     :0x1
17:19:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:19:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:19:21: File_Format                                   :0x0
17:19:21: CRC                                           :0x0
17:19:21: ####CSD Registe Values####  

17:19:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED210>, <py_sfcl.CommandDataDefinition object at 0x0625E720>) , Command count = 5652 ] 
17:19:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:19:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625EE10>, <py_sfcl.CommandDataDefinition object at 0x0625EF00>) , Command count = 5653 ] 
17:19:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:19:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:19:21: [DVTCommonLib]### WriteWithPattern :Multiple Write to the card at StartLba:0x0 to EndLba:0x100
17:19:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625EB40>, <py_sfcl.CommandDataDefinition object at 0x0625ECF0>) , Command count = 5654 ] 
17:19:22: CMD25[ WRITE_MULTIPLE_BLOCK ] Passed with R1 type response:[25, 0, 0, 9, 0, 6]
17:19:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED0F0>, <py_sfcl.CommandDataDefinition object at 0x06260060>) , Command count = 5655 ] 
17:19:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Rcv', 'READY_FOR_DATA']
17:19:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED330>, <py_sfcl.CommandDataDefinition object at 0x0625E990>) , Command count = 5656 ] 
17:19:22: [ GetCardStatus() , Command count = 5657 ] 
17:19:22: CMD12[ STOP_TRANSMISSION ] Failed with an exception
17:19:22: [DVTCommonLib]### WriteWithPattern :Multiple Write Failed from StartLba:0x0 to EndLba:0x100
17:19:22: [DVTCommonLib]### Exception_Details :Exception raised!!!, Error Number is 10 and Error Message is 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0xAL (10) executing command 'SendBasicCommand'
   Description : Attempt to write a write-protected sector
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.CommandDefinition object at 0x061ED330>, <py_sfcl.CommandDataDefinition object at 0x0625E990>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No

17:19:22: Failed Running script <module 'CH4376_ForceEraseToUnlockedCard' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_4_Card_Functional\CH4376_ForceEraseToUnlockedCard.pyc'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0xAL (10) executing command 'SendBasicCommand'
   Description : Attempt to write a write-protected sector
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.CommandDefinition object at 0x061ED330>, <py_sfcl.CommandDataDefinition object at 0x0625E990>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No
 
17:19:22: ########################################
17:19:22: ########################################
17:19:22: Stated Running script CH4391_App_CMD_CMD55 
17:19:22: ########################################
17:19:22: ###### Running App_CMD_CMD55 Test 
17:19:22: calling basic init
17:19:22: [GO4_globalInitCard]### Switch to Specify Card Type
17:19:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:19:24: Host Frequency set to 25000 KHz
17:19:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:19:24: [GO18_globalSetVolt]### Set Host Voltage value.
17:19:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:19:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x0625E090>, 0x0, True) , Command count = 5658 ] 
17:19:24: [GO18_globalSetVolt]### Host voltage value is set.
17:19:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:19:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x053F7390>, 0x0, False) , Command count = 5659 ] 
17:19:24: [GO18_globalSetVolt]### Host voltage value is set.
17:19:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5660 ] 
17:19:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:19:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5661 ] 
17:19:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:19:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:19:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:19:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:19:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:19:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5662 ] 
17:19:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:19:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:19:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED7E0>, <py_sfcl.CommandDataDefinition object at 0x06260210>) , Command count = 5663 ] 
17:19:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:19:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED570>, <py_sfcl.CommandDataDefinition object at 0x06260150>) , Command count = 5664 ] 
17:19:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:19:25: [ SetCardRCA(0x1, 0xD555) , Command count = 5665 ] 
17:19:25: [DVTCommonLib]### Identification :Idenfication of card completed 

17:19:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:19:25: Host Frequency set to 25000 KHz
17:19:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:19:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:19:25: ####CSD Registe 2.0 Values####
17:19:25: CSD_STRUCTURE                                 :0x1
17:19:25: Reserv1                                       :0x0
17:19:25: Time Access 1 TAAC                            :0xe
17:19:25: Time Access 2 NSAC*100                        :0x0
17:19:25: Data Transfer Rate TRAN_SPEED                 :0x32
17:19:25: Card Command Classess CCC                     :0x5b5
17:19:25: Max Read Data Block Length  READ_BL_LEN       :0x9
17:19:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:19:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:19:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:19:25: DSR(driver stage register)  DSR_IMP           :0x0
17:19:25: Reserv2                                       :0x0
17:19:25: Device Size C_SIZE                            :0xedc8
17:19:25: Reserv3                                       :0x0
17:19:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:19:25: Erase Sector Size SECTOR_SIZE                 :0x7f
17:19:25: Write Protect Group Size WP_GRP_SIZE          :0x0
17:19:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:19:25: Reserv4                                       :0x0
17:19:25: Write Speed Factor R2W_FACTOR                 :0x2
17:19:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:19:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:19:25: FILE_FORMAT_GRP                               :0x0
17:19:25: COPY flag                                     :0x1
17:19:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:19:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:19:25: File_Format                                   :0x0
17:19:25: CRC                                           :0x0
17:19:25: ####CSD Registe Values####  

17:19:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:19:25: [GetSCRRegisterEntry] Passed
17:19:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:19:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:19:25: Data_Status_After Erases          : 0
17:19:25: CPRM Security Support             : No Security
17:19:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:19:25: Spec. Version                     : Version 3.0X
17:19:25: Extended Security Support         : Extended_Security_Not_Supported
17:19:25: Command Support                   : COMMAND_SUPPORT
17:19:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:19:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06260390>, <py_sfcl.CommandDataDefinition object at 0x06260420>) , Command count = 5666 ] 
17:19:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:19:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED720>, <py_sfcl.CommandDataDefinition object at 0x06260270>) , Command count = 5667 ] 
17:19:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:19:25: [ SetBusWidth(0x4) , Command count = 5668 ] 
17:19:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:19:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06260090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5669 ] 
17:19:25: Protected Area Size 0x28000
17:19:25: Bus Width           2
17:19:25: Secure Mode         0
17:19:25: Speed  Class        4
17:19:25: Perf Move           0
17:19:25: Au Size             9
17:19:25: Erase Size          15
17:19:25: Erase Timeout       1
17:19:25: Erase offset        1
17:19:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:19:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:19:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:19:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5670 ] 
17:19:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:19:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:19:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:19:25: Host Frequency set to 100000 KHz
17:19:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:19:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:19:25: ####CSD Registe 2.0 Values####
17:19:25: CSD_STRUCTURE                                 :0x1
17:19:25: Reserv1                                       :0x0
17:19:25: Time Access 1 TAAC                            :0xe
17:19:25: Time Access 2 NSAC*100                        :0x0
17:19:25: Data Transfer Rate TRAN_SPEED                 :0xb
17:19:25: Card Command Classess CCC                     :0x5b5
17:19:25: Max Read Data Block Length  READ_BL_LEN       :0x9
17:19:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:19:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:19:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:19:25: DSR(driver stage register)  DSR_IMP           :0x0
17:19:25: Reserv2                                       :0x0
17:19:25: Device Size C_SIZE                            :0xedc8
17:19:25: Reserv3                                       :0x0
17:19:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:19:25: Erase Sector Size SECTOR_SIZE                 :0x7f
17:19:25: Write Protect Group Size WP_GRP_SIZE          :0x0
17:19:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:19:25: Reserv4                                       :0x0
17:19:25: Write Speed Factor R2W_FACTOR                 :0x2
17:19:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:19:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:19:25: FILE_FORMAT_GRP                               :0x0
17:19:25: COPY flag                                     :0x1
17:19:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:19:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:19:25: File_Format                                   :0x0
17:19:25: CRC                                           :0x0
17:19:25: ####CSD Registe Values####  

17:19:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDB10>, <py_sfcl.CommandDataDefinition object at 0x061ED180>) , Command count = 5671 ] 
17:19:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:19:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED750>, <py_sfcl.CommandDataDefinition object at 0x06260570>) , Command count = 5672 ] 
17:19:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:19:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:19:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062605D0>, <py_sfcl.CommandDataDefinition object at 0x062606C0>) , Command count = 5673 ] 
17:19:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:19:26: [DVTCommonLib]### SingleWrite_Exp_Hndl :SingleWrite from StartLba: 0x0 to EndLba:0x32
17:19:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D2030>, <py_sfcl.CommandDataDefinition object at 0x062601B0>) , Command count = 5674 ] 
17:19:26: CMD24[ WRITE_BLOCK ] Passed with R1 type response:[24, 0, 0, 9, 0, 11]
17:19:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED9F0>, <py_sfcl.CommandDataDefinition object at 0x062606F0>) , Command count = 5675 ] 
17:19:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'WP_VIOLATION', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:19:26:  Write Lba:0x00000000 Transfer Length:0x0001 FAILED 

17:19:26: Single Write Failed from StartLba:0x0 to EndLba:0x32
17:19:26: [DVTCommonLib]### Exception_Details :Exception raised!!!, Error Number is 10 and Error Message is 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0xAL (10) executing command 'SendBasicCommand'
   Description : Attempt to write a write-protected sector
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.CommandDefinition object at 0x061ED330>, <py_sfcl.CommandDataDefinition object at 0x0625E990>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No

17:19:26: Failed Running script <module 'CH4391_App_CMD_CMD55' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_4_Card_Functional\CH4391_App_CMD_CMD55.pyc'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0xAL (10) executing command 'SendBasicCommand'
   Description : Attempt to write a write-protected sector
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.CommandDefinition object at 0x061ED330>, <py_sfcl.CommandDataDefinition object at 0x0625E990>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No
 
17:19:26: ########################################
17:19:26: ########################################
17:19:26: Stated Running script CH4411_energy_mode_saving 
17:19:26: ########################################
17:19:26: ###### Running EneryModeSaving Test 
17:19:26: calling basic init
17:19:26: [GO4_globalInitCard]### Switch to Specify Card Type
17:19:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:19:28: Host Frequency set to 25000 KHz
17:19:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:19:28: [GO18_globalSetVolt]### Set Host Voltage value.
17:19:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:19:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0625E300>, 0x0, True) , Command count = 5676 ] 
17:19:28: [GO18_globalSetVolt]### Host voltage value is set.
17:19:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:19:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x061DBED0>, 0x0, False) , Command count = 5677 ] 
17:19:28: [GO18_globalSetVolt]### Host voltage value is set.
17:19:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5678 ] 
17:19:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:19:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5679 ] 
17:19:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:19:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:19:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:19:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:19:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:19:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5680 ] 
17:19:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:19:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:19:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDAB0>, <py_sfcl.CommandDataDefinition object at 0x061ED2A0>) , Command count = 5681 ] 
17:19:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:19:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5D50>, <py_sfcl.CommandDataDefinition object at 0x062608D0>) , Command count = 5682 ] 
17:19:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:19:28: [ SetCardRCA(0x1, 0xD555) , Command count = 5683 ] 
17:19:29: [DVTCommonLib]### Identification :Idenfication of card completed 

17:19:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:19:29: Host Frequency set to 25000 KHz
17:19:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:19:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:19:29: ####CSD Registe 2.0 Values####
17:19:29: CSD_STRUCTURE                                 :0x1
17:19:29: Reserv1                                       :0x0
17:19:29: Time Access 1 TAAC                            :0xe
17:19:29: Time Access 2 NSAC*100                        :0x0
17:19:29: Data Transfer Rate TRAN_SPEED                 :0x32
17:19:29: Card Command Classess CCC                     :0x5b5
17:19:29: Max Read Data Block Length  READ_BL_LEN       :0x9
17:19:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:19:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:19:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:19:29: DSR(driver stage register)  DSR_IMP           :0x0
17:19:29: Reserv2                                       :0x0
17:19:29: Device Size C_SIZE                            :0xedc8
17:19:29: Reserv3                                       :0x0
17:19:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:19:29: Erase Sector Size SECTOR_SIZE                 :0x7f
17:19:29: Write Protect Group Size WP_GRP_SIZE          :0x0
17:19:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:19:29: Reserv4                                       :0x0
17:19:29: Write Speed Factor R2W_FACTOR                 :0x2
17:19:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:19:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:19:29: FILE_FORMAT_GRP                               :0x0
17:19:29: COPY flag                                     :0x1
17:19:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:19:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:19:29: File_Format                                   :0x0
17:19:29: CRC                                           :0x0
17:19:29: ####CSD Registe Values####  

17:19:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:19:29: [GetSCRRegisterEntry] Passed
17:19:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:19:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:19:29: Data_Status_After Erases          : 0
17:19:29: CPRM Security Support             : No Security
17:19:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:19:29: Spec. Version                     : Version 3.0X
17:19:29: Extended Security Support         : Extended_Security_Not_Supported
17:19:29: Command Support                   : COMMAND_SUPPORT
17:19:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:19:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDCF0>, <py_sfcl.CommandDataDefinition object at 0x06260750>) , Command count = 5684 ] 
17:19:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:19:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED7B0>, <py_sfcl.CommandDataDefinition object at 0x06260BA0>) , Command count = 5685 ] 
17:19:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:19:29: [ SetBusWidth(0x4) , Command count = 5686 ] 
17:19:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:19:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062609F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5687 ] 
17:19:29: Protected Area Size 0x28000
17:19:29: Bus Width           2
17:19:29: Secure Mode         0
17:19:29: Speed  Class        4
17:19:29: Perf Move           0
17:19:29: Au Size             9
17:19:29: Erase Size          15
17:19:29: Erase Timeout       1
17:19:29: Erase offset        1
17:19:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:19:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:19:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:19:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5688 ] 
17:19:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:19:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:19:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:19:29: Host Frequency set to 100000 KHz
17:19:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:19:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:19:29: ####CSD Registe 2.0 Values####
17:19:29: CSD_STRUCTURE                                 :0x1
17:19:29: Reserv1                                       :0x0
17:19:29: Time Access 1 TAAC                            :0xe
17:19:29: Time Access 2 NSAC*100                        :0x0
17:19:29: Data Transfer Rate TRAN_SPEED                 :0xb
17:19:29: Card Command Classess CCC                     :0x5b5
17:19:29: Max Read Data Block Length  READ_BL_LEN       :0x9
17:19:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:19:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:19:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:19:29: DSR(driver stage register)  DSR_IMP           :0x0
17:19:29: Reserv2                                       :0x0
17:19:29: Device Size C_SIZE                            :0xedc8
17:19:29: Reserv3                                       :0x0
17:19:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:19:29: Erase Sector Size SECTOR_SIZE                 :0x7f
17:19:29: Write Protect Group Size WP_GRP_SIZE          :0x0
17:19:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:19:29: Reserv4                                       :0x0
17:19:29: Write Speed Factor R2W_FACTOR                 :0x2
17:19:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:19:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:19:29: FILE_FORMAT_GRP                               :0x0
17:19:29: COPY flag                                     :0x1
17:19:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:19:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:19:29: File_Format                                   :0x0
17:19:29: CRC                                           :0x0
17:19:29: ####CSD Registe Values####  

17:19:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F52D0>, <py_sfcl.CommandDataDefinition object at 0x061E9810>) , Command count = 5689 ] 
17:19:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:19:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDED0>, <py_sfcl.CommandDataDefinition object at 0x06260C30>) , Command count = 5690 ] 
17:19:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:19:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:19:30: [DVTCommonLib]### SingleWrite_Exp_Hndl :SingleWrite from StartLba: 0x0 to EndLba:0x31
17:19:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED480>, <py_sfcl.CommandDataDefinition object at 0x061EDF60>) , Command count = 5691 ] 
17:19:30: CMD24[ WRITE_BLOCK ] Passed with R1 type response:[24, 0, 0, 9, 0, 11]
17:19:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06260CF0>, <py_sfcl.CommandDataDefinition object at 0x06260DE0>) , Command count = 5692 ] 
17:19:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'WP_VIOLATION', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:19:30:  Write Lba:0x00000000 Transfer Length:0x0001 FAILED 

17:19:30: Single Write Failed from StartLba:0x0 to EndLba:0x31
17:19:30: [DVTCommonLib]### Exception_Details :Exception raised!!!, Error Number is 10 and Error Message is 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0xAL (10) executing command 'SendBasicCommand'
   Description : Attempt to write a write-protected sector
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.CommandDefinition object at 0x061ED330>, <py_sfcl.CommandDataDefinition object at 0x0625E990>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No

17:19:30: Failed Running script <module 'CH4411_energy_mode_saving' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_4_Card_Functional\CH4411_energy_mode_saving.pyc'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0xAL (10) executing command 'SendBasicCommand'
   Description : Attempt to write a write-protected sector
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.CommandDefinition object at 0x061ED330>, <py_sfcl.CommandDataDefinition object at 0x0625E990>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No
 
17:19:30: ########################################
17:19:30: ########################################
17:19:30: Stated Running script CH4412_BusFrequency 
17:19:30: ########################################
17:19:30: ###### Running BusFrequency Test 
17:19:30: calling basic init
17:19:30: [GO4_globalInitCard]### Switch to Specify Card Type
17:19:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:19:32: Host Frequency set to 25000 KHz
17:19:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:19:32: [GO18_globalSetVolt]### Set Host Voltage value.
17:19:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:19:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x0625E7E0>, 0x0, True) , Command count = 5693 ] 
17:19:32: [GO18_globalSetVolt]### Host voltage value is set.
17:19:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:19:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x06260BD0>, 0x0, False) , Command count = 5694 ] 
17:19:32: [GO18_globalSetVolt]### Host voltage value is set.
17:19:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5695 ] 
17:19:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:19:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5696 ] 
17:19:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:19:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:19:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:19:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:19:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:19:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5697 ] 
17:19:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:19:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:19:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F50F0>, <py_sfcl.CommandDataDefinition object at 0x061F56F0>) , Command count = 5698 ] 
17:19:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5510>, <py_sfcl.CommandDataDefinition object at 0x062610C0>) , Command count = 5699 ] 
17:19:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:19:33: [ SetCardRCA(0x1, 0xD555) , Command count = 5700 ] 
17:19:33: [DVTCommonLib]### Identification :Idenfication of card completed 

17:19:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:19:33: Host Frequency set to 25000 KHz
17:19:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:19:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:19:33: ####CSD Registe 2.0 Values####
17:19:33: CSD_STRUCTURE                                 :0x1
17:19:33: Reserv1                                       :0x0
17:19:33: Time Access 1 TAAC                            :0xe
17:19:33: Time Access 2 NSAC*100                        :0x0
17:19:33: Data Transfer Rate TRAN_SPEED                 :0x32
17:19:33: Card Command Classess CCC                     :0x5b5
17:19:33: Max Read Data Block Length  READ_BL_LEN       :0x9
17:19:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:19:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:19:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:19:33: DSR(driver stage register)  DSR_IMP           :0x0
17:19:33: Reserv2                                       :0x0
17:19:33: Device Size C_SIZE                            :0xedc8
17:19:33: Reserv3                                       :0x0
17:19:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:19:33: Erase Sector Size SECTOR_SIZE                 :0x7f
17:19:33: Write Protect Group Size WP_GRP_SIZE          :0x0
17:19:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:19:33: Reserv4                                       :0x0
17:19:33: Write Speed Factor R2W_FACTOR                 :0x2
17:19:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:19:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:19:33: FILE_FORMAT_GRP                               :0x0
17:19:33: COPY flag                                     :0x1
17:19:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:19:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:19:33: File_Format                                   :0x0
17:19:33: CRC                                           :0x0
17:19:33: ####CSD Registe Values####  

17:19:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:19:33: [GetSCRRegisterEntry] Passed
17:19:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:19:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:19:33: Data_Status_After Erases          : 0
17:19:33: CPRM Security Support             : No Security
17:19:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:19:33: Spec. Version                     : Version 3.0X
17:19:33: Extended Security Support         : Extended_Security_Not_Supported
17:19:33: Command Support                   : COMMAND_SUPPORT
17:19:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5090>, <py_sfcl.CommandDataDefinition object at 0x06261090>) , Command count = 5701 ] 
17:19:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDAE0>, <py_sfcl.CommandDataDefinition object at 0x061F58A0>) , Command count = 5702 ] 
17:19:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:19:33: [ SetBusWidth(0x4) , Command count = 5703 ] 
17:19:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:19:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061EDC90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5704 ] 
17:19:33: Protected Area Size 0x28000
17:19:33: Bus Width           2
17:19:33: Secure Mode         0
17:19:33: Speed  Class        4
17:19:33: Perf Move           0
17:19:33: Au Size             9
17:19:33: Erase Size          15
17:19:33: Erase Timeout       1
17:19:33: Erase offset        1
17:19:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:19:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:19:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:19:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5705 ] 
17:19:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:19:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:19:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:19:33: Host Frequency set to 100000 KHz
17:19:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:19:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:19:33: ####CSD Registe 2.0 Values####
17:19:33: CSD_STRUCTURE                                 :0x1
17:19:33: Reserv1                                       :0x0
17:19:33: Time Access 1 TAAC                            :0xe
17:19:33: Time Access 2 NSAC*100                        :0x0
17:19:33: Data Transfer Rate TRAN_SPEED                 :0xb
17:19:33: Card Command Classess CCC                     :0x5b5
17:19:33: Max Read Data Block Length  READ_BL_LEN       :0x9
17:19:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:19:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:19:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:19:33: DSR(driver stage register)  DSR_IMP           :0x0
17:19:33: Reserv2                                       :0x0
17:19:33: Device Size C_SIZE                            :0xedc8
17:19:33: Reserv3                                       :0x0
17:19:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:19:33: Erase Sector Size SECTOR_SIZE                 :0x7f
17:19:33: Write Protect Group Size WP_GRP_SIZE          :0x0
17:19:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:19:33: Reserv4                                       :0x0
17:19:33: Write Speed Factor R2W_FACTOR                 :0x2
17:19:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:19:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:19:33: FILE_FORMAT_GRP                               :0x0
17:19:33: COPY flag                                     :0x1
17:19:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:19:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:19:33: File_Format                                   :0x0
17:19:33: CRC                                           :0x0
17:19:33: ####CSD Registe Values####  

17:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261270>, <py_sfcl.CommandDataDefinition object at 0x06261360>) , Command count = 5706 ] 
17:19:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9FC0>, <py_sfcl.CommandDataDefinition object at 0x061EDD80>) , Command count = 5707 ] 
17:19:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:19:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:19:34: Host Frequency set to 25000 KHz

17:19:34: [DVTCommonLib]### SingleWrite_Exp_Hndl :SingleWrite from StartLba: 0x0 to EndLba:0x100
17:19:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5330>, <py_sfcl.CommandDataDefinition object at 0x06261330>) , Command count = 5708 ] 
17:19:34: CMD24[ WRITE_BLOCK ] Passed with R1 type response:[24, 0, 0, 9, 0, 11]
17:19:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5450>, <py_sfcl.CommandDataDefinition object at 0x06261390>) , Command count = 5709 ] 
17:19:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'WP_VIOLATION', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:19:34:  Write Lba:0x00000000 Transfer Length:0x0001 FAILED 

17:19:34: Single Write Failed from StartLba:0x0 to EndLba:0x100
17:19:34: [DVTCommonLib]### Exception_Details :Exception raised!!!, Error Number is 10 and Error Message is 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0xAL (10) executing command 'SendBasicCommand'
   Description : Attempt to write a write-protected sector
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.CommandDefinition object at 0x061ED330>, <py_sfcl.CommandDataDefinition object at 0x0625E990>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No

17:19:34: Failed Running script <module 'CH4412_BusFrequency' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_4_Card_Functional\CH4412_BusFrequency.pyc'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0xAL (10) executing command 'SendBasicCommand'
   Description : Attempt to write a write-protected sector
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.CommandDefinition object at 0x061ED330>, <py_sfcl.CommandDataDefinition object at 0x0625E990>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No
 
17:19:34: ########################################
17:19:34: ########################################
17:19:34: Stated Running script CH04020101_GoIdleState 
17:19:34: ########################################
17:19:34:  [CH04020101_GoIdleState] ###### Running Cardfunctional_GOIDLESTATE Test ######
17:19:34: [GO4_globalInitCard]### Switch to Specify Card Type
17:19:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:19:36: Host Frequency set to 25000 KHz
17:19:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:19:36: [GO18_globalSetVolt]### Set Host Voltage value.
17:19:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:19:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x06260F00>, 0x0, True) , Command count = 5710 ] 
17:19:36: [GO18_globalSetVolt]### Host voltage value is set.
17:19:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:19:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x061F5180>, 0x0, False) , Command count = 5711 ] 
17:19:36: [GO18_globalSetVolt]### Host voltage value is set.
17:19:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5712 ] 
17:19:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:19:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5713 ] 
17:19:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:19:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:19:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:19:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:19:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:19:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5714 ] 
17:19:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:19:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:19:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F53F0>, <py_sfcl.CommandDataDefinition object at 0x062615D0>) , Command count = 5715 ] 
17:19:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:19:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5630>, <py_sfcl.CommandDataDefinition object at 0x06261630>) , Command count = 5716 ] 
17:19:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:19:36: [ SetCardRCA(0x1, 0xD555) , Command count = 5717 ] 
17:19:37: [DVTCommonLib]### Identification :Idenfication of card completed 

17:19:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:19:37: Host Frequency set to 25000 KHz
17:19:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:19:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:19:37: ####CSD Registe 2.0 Values####
17:19:37: CSD_STRUCTURE                                 :0x1
17:19:37: Reserv1                                       :0x0
17:19:37: Time Access 1 TAAC                            :0xe
17:19:37: Time Access 2 NSAC*100                        :0x0
17:19:37: Data Transfer Rate TRAN_SPEED                 :0x32
17:19:37: Card Command Classess CCC                     :0x5b5
17:19:37: Max Read Data Block Length  READ_BL_LEN       :0x9
17:19:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:19:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:19:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:19:37: DSR(driver stage register)  DSR_IMP           :0x0
17:19:37: Reserv2                                       :0x0
17:19:37: Device Size C_SIZE                            :0xedc8
17:19:37: Reserv3                                       :0x0
17:19:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:19:37: Erase Sector Size SECTOR_SIZE                 :0x7f
17:19:37: Write Protect Group Size WP_GRP_SIZE          :0x0
17:19:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:19:37: Reserv4                                       :0x0
17:19:37: Write Speed Factor R2W_FACTOR                 :0x2
17:19:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:19:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:19:37: FILE_FORMAT_GRP                               :0x0
17:19:37: COPY flag                                     :0x1
17:19:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:19:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:19:37: File_Format                                   :0x0
17:19:37: CRC                                           :0x0
17:19:37: ####CSD Registe Values####  

17:19:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:19:37: [GetSCRRegisterEntry] Passed
17:19:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:19:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:19:37: Data_Status_After Erases          : 0
17:19:37: CPRM Security Support             : No Security
17:19:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:19:37: Spec. Version                     : Version 3.0X
17:19:37: Extended Security Support         : Extended_Security_Not_Supported
17:19:37: Command Support                   : COMMAND_SUPPORT
17:19:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:19:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F51E0>, <py_sfcl.CommandDataDefinition object at 0x062614B0>) , Command count = 5718 ] 
17:19:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:19:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261750>, <py_sfcl.CommandDataDefinition object at 0x06261840>) , Command count = 5719 ] 
17:19:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:19:37: [ SetBusWidth(0x4) , Command count = 5720 ] 
17:19:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:19:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061F5690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5721 ] 
17:19:37: Protected Area Size 0x28000
17:19:37: Bus Width           2
17:19:37: Secure Mode         0
17:19:37: Speed  Class        4
17:19:37: Perf Move           0
17:19:37: Au Size             9
17:19:37: Erase Size          15
17:19:37: Erase Timeout       1
17:19:37: Erase offset        1
17:19:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:19:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:19:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:19:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5722 ] 
17:19:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:19:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:19:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:19:37: Host Frequency set to 100000 KHz
17:19:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:19:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:19:37: ####CSD Registe 2.0 Values####
17:19:37: CSD_STRUCTURE                                 :0x1
17:19:37: Reserv1                                       :0x0
17:19:37: Time Access 1 TAAC                            :0xe
17:19:37: Time Access 2 NSAC*100                        :0x0
17:19:37: Data Transfer Rate TRAN_SPEED                 :0xb
17:19:37: Card Command Classess CCC                     :0x5b5
17:19:37: Max Read Data Block Length  READ_BL_LEN       :0x9
17:19:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:19:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:19:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:19:37: DSR(driver stage register)  DSR_IMP           :0x0
17:19:37: Reserv2                                       :0x0
17:19:37: Device Size C_SIZE                            :0xedc8
17:19:37: Reserv3                                       :0x0
17:19:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:19:37: Erase Sector Size SECTOR_SIZE                 :0x7f
17:19:37: Write Protect Group Size WP_GRP_SIZE          :0x0
17:19:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:19:37: Reserv4                                       :0x0
17:19:37: Write Speed Factor R2W_FACTOR                 :0x2
17:19:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:19:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:19:37: FILE_FORMAT_GRP                               :0x0
17:19:37: COPY flag                                     :0x1
17:19:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:19:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:19:37: File_Format                                   :0x0
17:19:37: CRC                                           :0x0
17:19:37: ####CSD Registe Values####  

17:19:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDF00>, <py_sfcl.CommandDataDefinition object at 0x054154B0>) , Command count = 5723 ] 
17:19:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:19:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FF810>, <py_sfcl.CommandDataDefinition object at 0x06261870>) , Command count = 5724 ] 
17:19:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:19:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:19:39: [SCT13_CMD11] : Power is On!!!!
17:19:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5725 ] 
17:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E93C0>, <py_sfcl.CommandDataDefinition object at 0x061FF780>) , Command count = 5726 ] 
17:19:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FFF00>, <py_sfcl.CommandDataDefinition object at 0x061FFC30>) , Command count = 5727 ] 
17:19:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:19:40: [ SetCardRCA(0x1, 0xD555) , Command count = 5728 ] 
17:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5A20>, <py_sfcl.CommandDataDefinition object at 0x062619C0>) , Command count = 5729 ] 
17:19:40: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E92A0>, <py_sfcl.CommandDataDefinition object at 0x061FFCF0>) , Command count = 5730 ] 
17:19:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5A80>, <py_sfcl.CommandDataDefinition object at 0x061FF5D0>) , Command count = 5731 ] 
17:19:40: [ GetCardStatus() , Command count = 5732 ] 
17:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C3C0>, <py_sfcl.CommandDataDefinition object at 0x061EDD20>) , Command count = 5733 ] 
17:19:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5A80>, <py_sfcl.CommandDataDefinition object at 0x061FF5D0>) , Command count = 5734 ] 
17:19:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:19:40:  [CH04020101_GoIdleState] Card is deselcted and put to Stand by state
17:19:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:19:40: ####CSD Registe 2.0 Values####
17:19:40: CSD_STRUCTURE                                 :0x1
17:19:40: Reserv1                                       :0x0
17:19:40: Time Access 1 TAAC                            :0xe
17:19:40: Time Access 2 NSAC*100                        :0x0
17:19:40: Data Transfer Rate TRAN_SPEED                 :0x32
17:19:40: Card Command Classess CCC                     :0x5b5
17:19:40: Max Read Data Block Length  READ_BL_LEN       :0x9
17:19:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:19:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:19:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:19:40: DSR(driver stage register)  DSR_IMP           :0x0
17:19:40: Reserv2                                       :0x0
17:19:40: Device Size C_SIZE                            :0xedc8
17:19:40: Reserv3                                       :0x0
17:19:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:19:40: Erase Sector Size SECTOR_SIZE                 :0x7f
17:19:40: Write Protect Group Size WP_GRP_SIZE          :0x0
17:19:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:19:40: Reserv4                                       :0x0
17:19:40: Write Speed Factor R2W_FACTOR                 :0x2
17:19:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:19:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:19:40: FILE_FORMAT_GRP                               :0x0
17:19:40: COPY flag                                     :0x1
17:19:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:19:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:19:40: File_Format                                   :0x0
17:19:40: CRC                                           :0x0
17:19:40: ####CSD Registe Values####  

17:19:40:  [CH04020101_GoIdleState] Card type = SD 2.0##CSD Version 2.0 High Capacity Card
17:19:40:  [CH04020101_GoIdleState] Run CMD7 to get the card in TRAN state
17:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062551E0>, <py_sfcl.CommandDataDefinition object at 0x06261B70>) , Command count = 5735 ] 
17:19:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE7E0>, <py_sfcl.CommandDataDefinition object at 0x06261870>) , Command count = 5736 ] 
17:19:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
17:19:40:  [CH04020101_GoIdleState] Card is in TRAN state
17:19:42: [SCT13_CMD11] : Power is On!!!!
17:19:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5737 ] 
17:19:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FF3C0>, <py_sfcl.CommandDataDefinition object at 0x062550F0>) , Command count = 5738 ] 
17:19:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:19:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06255150>, <py_sfcl.CommandDataDefinition object at 0x06255180>) , Command count = 5739 ] 
17:19:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:19:42: [ SetCardRCA(0x1, 0xD555) , Command count = 5740 ] 
17:19:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06255060>, <py_sfcl.CommandDataDefinition object at 0x06261C60>) , Command count = 5741 ] 
17:19:42: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:19:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062551B0>, <py_sfcl.CommandDataDefinition object at 0x061F5810>) , Command count = 5742 ] 
17:19:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:19:42:  [CH04020101_GoIdleState] Run CMD18 to set the card in DATA state
17:19:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261CC0>, <py_sfcl.CommandDataDefinition object at 0x06261960>) , Command count = 5743 ] 
17:19:42: CMD18[ READ_MULTI_BLOCK ] Passed with R1 type response:[18, 0, 0, 9, 0, 26]
17:19:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDD50>, <py_sfcl.CommandDataDefinition object at 0x061F5B10>) , Command count = 5744 ] 
17:19:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Data', 'READY_FOR_DATA']
17:19:42:  [CH04020101_GoIdleState] Card is in DATA state
17:19:44: [SCT13_CMD11] : Power is On!!!!
17:19:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5745 ] 
17:19:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C6C0>, <py_sfcl.CommandDataDefinition object at 0x06261CF0>) , Command count = 5746 ] 
17:19:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:19:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261690>, <py_sfcl.CommandDataDefinition object at 0x062617E0>) , Command count = 5747 ] 
17:19:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:19:44: [ SetCardRCA(0x1, 0xD555) , Command count = 5748 ] 
17:19:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5E10>, <py_sfcl.CommandDataDefinition object at 0x0625CAB0>) , Command count = 5749 ] 
17:19:44: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:19:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625CC60>, <py_sfcl.CommandDataDefinition object at 0x0625C420>) , Command count = 5750 ] 
17:19:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:19:44:  [CH04020101_GoIdleState] Run CMD25 to get the card in RCV state
17:19:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062617E0>, <py_sfcl.CommandDataDefinition object at 0x06261DB0>) , Command count = 5751 ] 
17:19:44: CMD25[ WRITE_MULTIPLE_BLOCK ] Passed with R1 type response:[25, 0, 0, 9, 0, 6]
17:19:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261570>, <py_sfcl.CommandDataDefinition object at 0x06261660>) , Command count = 5752 ] 
17:19:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Rcv', 'READY_FOR_DATA']
17:19:44:  [CH04020101_GoIdleState] Card is in RCV state
17:19:46: [SCT13_CMD11] : Power is On!!!!
17:19:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5753 ] 
17:19:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261B40>, <py_sfcl.CommandDataDefinition object at 0x0625E900>) , Command count = 5754 ] 
17:19:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:19:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED090>, <py_sfcl.CommandDataDefinition object at 0x0625C8A0>) , Command count = 5755 ] 
17:19:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:19:47: [ SetCardRCA(0x1, 0xD555) , Command count = 5756 ] 
17:19:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F55D0>, <py_sfcl.CommandDataDefinition object at 0x061F5A50>) , Command count = 5757 ] 
17:19:47: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:19:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5AB0>, <py_sfcl.CommandDataDefinition object at 0x0625CD50>) , Command count = 5758 ] 
17:19:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:19:47:  [CH04020101_GoIdleState] Run CMD32,33,38 to get the card in PRG state
17:19:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9D20>, <py_sfcl.CommandDataDefinition object at 0x0625CF60>) , Command count = 5759 ] 
17:19:47: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
17:19:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5FC0>, <py_sfcl.CommandDataDefinition object at 0x0625C240>) , Command count = 5760 ] 
17:19:47: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
17:19:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625CC00>, <py_sfcl.CommandDataDefinition object at 0x0625E7E0>) , Command count = 5761 ] 
17:19:57: [ GetCardStatus() , Command count = 5762 ] 
17:19:57: CMD38[ ERASE_COMMAND ] Erasing the Card......
17:19:57: CMD38[ ERASE_COMMAND ] Card is Busy programming,Continuing to Test..
17:20:27: CMD38[ ERASE_COMMAND ] Passed with R1 type response
17:20:27:  [CH04020101_GoIdleState] Card is in PRG state
17:20:27:  [CH04020101_GoIdleState] MMC IS BUSY
17:20:39: [SCT13_CMD11] : Power is On!!!!
17:20:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5763 ] 
17:20:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDF30>, <py_sfcl.CommandDataDefinition object at 0x0625CBA0>) , Command count = 5764 ] 
17:20:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:20:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5C30>, <py_sfcl.CommandDataDefinition object at 0x0625AA20>) , Command count = 5765 ] 
17:20:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:20:39: [ SetCardRCA(0x1, 0xD555) , Command count = 5766 ] 
17:20:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625AB40>, <py_sfcl.CommandDataDefinition object at 0x0625A870>) , Command count = 5767 ] 
17:20:39: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:20:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDE70>, <py_sfcl.CommandDataDefinition object at 0x0625A630>) , Command count = 5768 ] 
17:20:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:20:39:  [CH04020101_GoIdleState] Selecting the card back
17:20:39:  [CH04020101_GoIdleState] Run CMD32,33,38 to get the card in PRG state
17:20:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED960>, <py_sfcl.CommandDataDefinition object at 0x0625A810>) , Command count = 5769 ] 
17:20:39: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
17:20:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA50>, <py_sfcl.CommandDataDefinition object at 0x0625AAB0>) , Command count = 5770 ] 
17:20:39: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
17:20:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED870>, <py_sfcl.CommandDataDefinition object at 0x0625A8A0>) , Command count = 5771 ] 
17:20:50: [ GetCardStatus() , Command count = 5772 ] 
17:20:50: CMD38[ ERASE_COMMAND ] Erasing the Card......
17:20:50: CMD38[ ERASE_COMMAND ] Card is Busy programming,Continuing to Test..
17:21:20: CMD38[ ERASE_COMMAND ] Passed with R1 type response
17:21:20:  [CH04020101_GoIdleState] Card is in PRG state
17:21:20:  [CH04020101_GoIdleState] CMD7 - deselect card
17:21:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C1E0>, <py_sfcl.CommandDataDefinition object at 0x0625C090>) , Command count = 5773 ] 
17:21:20: [ GetCardStatus() , Command count = 5774 ] 
17:21:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5F60>, <py_sfcl.CommandDataDefinition object at 0x061EDE40>) , Command count = 5775 ] 
17:21:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:21:20:  [CH04020101_GoIdleState] Set timeout configBusyResetTO,configBusyReadTO,configBusyWriteTO
17:21:20: [ CardSetTimeOut(0xC350, 0xC350, 0xC350) , Command count = 5776 ] 
17:21:22: [SCT13_CMD11] : Power is On!!!!
17:21:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5777 ] 
17:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED360>, <py_sfcl.CommandDataDefinition object at 0x061ED930>) , Command count = 5778 ] 
17:21:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED4B0>, <py_sfcl.CommandDataDefinition object at 0x061F5270>) , Command count = 5779 ] 
17:21:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:21:22: [ SetCardRCA(0x1, 0xD555) , Command count = 5780 ] 
17:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED270>, <py_sfcl.CommandDataDefinition object at 0x0625ADB0>) , Command count = 5781 ] 
17:21:22: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5ED0>, <py_sfcl.CommandDataDefinition object at 0x0625C060>) , Command count = 5782 ] 
17:21:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:21:22:  [CH04020101_GoIdleState] Selecting back the card - Identification of the card
17:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED120>, <py_sfcl.CommandDataDefinition object at 0x0625AC30>) , Command count = 5783 ] 
17:21:22: CMD15[ GO_INACTIVE_STATE ] Passed with R0 type response
17:21:22:  [CH04020101_GoIdleState] Card is in INACTIVE State
17:21:22:  [CH04020101_GoIdleState] Run CMD55
17:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625A480>, <py_sfcl.CommandDataDefinition object at 0x0625A4E0>) , Command count = 5784 ] 
17:21:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:21:22:  [CH04020101_GoIdleState] Check for No globalUHSscope 
17:21:22: [PowerCycle] Doing Power cycle... 
17:21:27: ***************************************************** 

17:21:27: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   * 

17:21:27: *                                                   * 

17:21:27: *  Compatibility with this version is not verified! * 

17:21:27: ***************************************************** 

17:21:30: [DoPowerCycle]POWER ON-OFF General Error--Perform Init Again
17:21:40: [DoPowerCycle]POWER ON-OFF General Error--
17:21:40: Failed Running script <module 'CH04020101_GoIdleState' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_4_Card_Functional\CH04020101_GoIdleState.pyc'> with error 
InvalidArgumentError:                              
   Invalid argument: incorrect <Number> or <Type> of passed arguments - see below:

     Python argument types in
         Logical.CardSetTimeOut(SdLogical, NoneType, NoneType, NoneType)
     did not match C++ signature:
         CardSetTimeOut(class Logical {lvalue}, unsigned int, unsigned int, unsigned int)
 
17:21:40: ########################################
17:21:40: ########################################
17:21:40: Stated Running script CH04020102_IdleState 
17:21:40: ########################################
17:21:40:  [ CH04020102_IdleState] ###### Running Cardfunctional_IDLESTATE Test ######
17:21:40: [GO4_globalInitCard]### Switch to Specify Card Type
17:21:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:21:42: Host Frequency set to 25000 KHz
17:21:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:21:42: [GO18_globalSetVolt]### Set Host Voltage value.
17:21:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:21:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x06265A50>, 0x0, True) , Command count = 5787 ] 
17:21:42: [GO18_globalSetVolt]### Host voltage value is set.
17:21:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:21:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x0625C2A0>, 0x0, False) , Command count = 5788 ] 
17:21:42: [GO18_globalSetVolt]### Host voltage value is set.
17:21:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5789 ] 
17:21:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:21:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5790 ] 
17:21:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:21:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:21:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:21:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:21:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:21:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5791 ] 
17:21:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:21:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9630>, <py_sfcl.CommandDataDefinition object at 0x061F5AE0>) , Command count = 5792 ] 
17:21:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C330>, <py_sfcl.CommandDataDefinition object at 0x0625C390>) , Command count = 5793 ] 
17:21:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:21:42: [ SetCardRCA(0x1, 0xD555) , Command count = 5794 ] 
17:21:42: [DVTCommonLib]### Identification :Idenfication of card completed 

17:21:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:21:42: Host Frequency set to 25000 KHz
17:21:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:21:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:21:42: ####CSD Registe 2.0 Values####
17:21:42: CSD_STRUCTURE                                 :0x1
17:21:42: Reserv1                                       :0x0
17:21:42: Time Access 1 TAAC                            :0xe
17:21:42: Time Access 2 NSAC*100                        :0x0
17:21:42: Data Transfer Rate TRAN_SPEED                 :0x32
17:21:42: Card Command Classess CCC                     :0x5b5
17:21:42: Max Read Data Block Length  READ_BL_LEN       :0x9
17:21:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:21:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:21:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:21:42: DSR(driver stage register)  DSR_IMP           :0x0
17:21:42: Reserv2                                       :0x0
17:21:42: Device Size C_SIZE                            :0xedc8
17:21:42: Reserv3                                       :0x0
17:21:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:21:42: Erase Sector Size SECTOR_SIZE                 :0x7f
17:21:42: Write Protect Group Size WP_GRP_SIZE          :0x0
17:21:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:21:42: Reserv4                                       :0x0
17:21:42: Write Speed Factor R2W_FACTOR                 :0x2
17:21:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:21:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:21:42: FILE_FORMAT_GRP                               :0x0
17:21:42: COPY flag                                     :0x1
17:21:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:21:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:21:42: File_Format                                   :0x0
17:21:42: CRC                                           :0x0
17:21:42: ####CSD Registe Values####  

17:21:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:21:42: [GetSCRRegisterEntry] Passed
17:21:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:21:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:21:42: Data_Status_After Erases          : 0
17:21:42: CPRM Security Support             : No Security
17:21:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:21:42: Spec. Version                     : Version 3.0X
17:21:42: Extended Security Support         : Extended_Security_Not_Supported
17:21:42: Command Support                   : COMMAND_SUPPORT
17:21:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C360>, <py_sfcl.CommandDataDefinition object at 0x0625C2D0>) , Command count = 5795 ] 
17:21:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9DB0>, <py_sfcl.CommandDataDefinition object at 0x061E9B70>) , Command count = 5796 ] 
17:21:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:21:42: [ SetBusWidth(0x4) , Command count = 5797 ] 
17:21:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:21:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0625C510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5798 ] 
17:21:42: Protected Area Size 0x28000
17:21:42: Bus Width           2
17:21:42: Secure Mode         0
17:21:42: Speed  Class        4
17:21:42: Perf Move           0
17:21:42: Au Size             9
17:21:42: Erase Size          15
17:21:42: Erase Timeout       1
17:21:42: Erase offset        1
17:21:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:21:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:21:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:21:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5799 ] 
17:21:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:21:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:21:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:21:42: Host Frequency set to 100000 KHz
17:21:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:21:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:21:42: ####CSD Registe 2.0 Values####
17:21:42: CSD_STRUCTURE                                 :0x1
17:21:42: Reserv1                                       :0x0
17:21:42: Time Access 1 TAAC                            :0xe
17:21:42: Time Access 2 NSAC*100                        :0x0
17:21:42: Data Transfer Rate TRAN_SPEED                 :0xb
17:21:42: Card Command Classess CCC                     :0x5b5
17:21:42: Max Read Data Block Length  READ_BL_LEN       :0x9
17:21:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:21:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:21:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:21:42: DSR(driver stage register)  DSR_IMP           :0x0
17:21:42: Reserv2                                       :0x0
17:21:42: Device Size C_SIZE                            :0xedc8
17:21:42: Reserv3                                       :0x0
17:21:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:21:42: Erase Sector Size SECTOR_SIZE                 :0x7f
17:21:42: Write Protect Group Size WP_GRP_SIZE          :0x0
17:21:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:21:42: Reserv4                                       :0x0
17:21:42: Write Speed Factor R2W_FACTOR                 :0x2
17:21:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:21:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:21:42: FILE_FORMAT_GRP                               :0x0
17:21:42: COPY flag                                     :0x1
17:21:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:21:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:21:42: File_Format                                   :0x0
17:21:42: CRC                                           :0x0
17:21:42: ####CSD Registe Values####  

17:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05400C30>, <py_sfcl.CommandDataDefinition object at 0x06265BA0>) , Command count = 5800 ] 
17:21:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:21:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE9F0>, <py_sfcl.CommandDataDefinition object at 0x061E9960>) , Command count = 5801 ] 
17:21:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:21:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:21:43:  [ CH04020102_IdleState] Check for global UHSscope
17:21:45: [SCT13_CMD11] : Power is On!!!!
17:21:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5802 ] 
17:21:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5390>, <py_sfcl.CommandDataDefinition object at 0x0625C3F0>) , Command count = 5803 ] 
17:21:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:21:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053C6CF0>, <py_sfcl.CommandDataDefinition object at 0x0625C690>) , Command count = 5804 ] 
17:21:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:21:45: [ SetCardRCA(0x1, 0xD555) , Command count = 5805 ] 
17:21:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5060>, <py_sfcl.CommandDataDefinition object at 0x061E97B0>) , Command count = 5806 ] 
17:21:45: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:21:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C990>, <py_sfcl.CommandDataDefinition object at 0x0625A240>) , Command count = 5807 ] 
17:21:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:21:47: [SCT13_CMD11] : Power is On!!!!
17:21:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5808 ] 
17:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625AD20>, <py_sfcl.CommandDataDefinition object at 0x0625A8D0>) , Command count = 5809 ] 
17:21:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06265BA0>, <py_sfcl.CommandDataDefinition object at 0x06265A20>) , Command count = 5810 ] 
17:21:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:21:47: [ SetCardRCA(0x1, 0xD555) , Command count = 5811 ] 
17:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5900>, <py_sfcl.CommandDataDefinition object at 0x061E9690>) , Command count = 5812 ] 
17:21:47: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0540DFC0>, <py_sfcl.CommandDataDefinition object at 0x05405780>) , Command count = 5813 ] 
17:21:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05415ED0>, <py_sfcl.CommandDataDefinition object at 0x06265A80>) , Command count = 5814 ] 
17:21:47: [ GetCardStatus() , Command count = 5815 ] 
17:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDDB0>, <py_sfcl.CommandDataDefinition object at 0x0612FDE0>) , Command count = 5816 ] 
17:21:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05415ED0>, <py_sfcl.CommandDataDefinition object at 0x061ED8D0>) , Command count = 5817 ] 
17:21:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:21:47:  [ CH04020102_IdleState] Card is deselcted and put to Stand by state
17:21:49: [SCT13_CMD11] : Power is On!!!!
17:21:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5818 ] 
17:21:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625CF00>, <py_sfcl.CommandDataDefinition object at 0x0625CCF0>) , Command count = 5819 ] 
17:21:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:21:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05415300>, <py_sfcl.CommandDataDefinition object at 0x060DE1B0>) , Command count = 5820 ] 
17:21:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:21:50: [ SetCardRCA(0x1, 0xD555) , Command count = 5821 ] 
17:21:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05405630>, <py_sfcl.CommandDataDefinition object at 0x0625A060>) , Command count = 5822 ] 
17:21:50: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:21:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE180>, <py_sfcl.CommandDataDefinition object at 0x0625CAE0>) , Command count = 5823 ] 
17:21:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:21:50:  [ CH04020102_IdleState] Card is selected back and removed from Standby State..Set the card to tran state
17:21:52: [SCT13_CMD11] : Power is On!!!!
17:21:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5824 ] 
17:21:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D120>, <py_sfcl.CommandDataDefinition object at 0x0625D0C0>) , Command count = 5825 ] 
17:21:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:21:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE3C0>, <py_sfcl.CommandDataDefinition object at 0x0625D060>) , Command count = 5826 ] 
17:21:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:21:52: [ SetCardRCA(0x1, 0xD555) , Command count = 5827 ] 
17:21:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE450>, <py_sfcl.CommandDataDefinition object at 0x060DE480>) , Command count = 5828 ] 
17:21:52: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:21:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D150>, <py_sfcl.CommandDataDefinition object at 0x0625D240>) , Command count = 5829 ] 
17:21:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:21:54: [SCT13_CMD11] : Power is On!!!!
17:21:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5830 ] 
17:21:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9450>, <py_sfcl.CommandDataDefinition object at 0x060DE4E0>) , Command count = 5831 ] 
17:21:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:21:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE510>, <py_sfcl.CommandDataDefinition object at 0x0625D3C0>) , Command count = 5832 ] 
17:21:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:21:54: [ SetCardRCA(0x1, 0xD555) , Command count = 5833 ] 
17:21:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE570>, <py_sfcl.CommandDataDefinition object at 0x0625D330>) , Command count = 5834 ] 
17:21:54: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:21:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E90C0>, <py_sfcl.CommandDataDefinition object at 0x0625D4E0>) , Command count = 5835 ] 
17:21:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:21:54:  [ CH04020102_IdleState] Selecting back the card
17:21:54:  [ CH04020102_IdleState] Run CMD18 to get the card in DATA state
17:21:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F52A0>, <py_sfcl.CommandDataDefinition object at 0x061E97E0>) , Command count = 5836 ] 
17:21:54: CMD18[ READ_MULTI_BLOCK ] Passed with R1 type response:[18, 0, 0, 9, 0, 26]
17:21:54:  [ CH04020102_IdleState] Card is in DATA state
17:21:56: [SCT13_CMD11] : Power is On!!!!
17:21:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5837 ] 
17:21:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060EB060>, <py_sfcl.CommandDataDefinition object at 0x0625D4B0>) , Command count = 5838 ] 
17:21:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:21:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE540>, <py_sfcl.CommandDataDefinition object at 0x061E9A80>) , Command count = 5839 ] 
17:21:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:21:56: [ SetCardRCA(0x1, 0xD555) , Command count = 5840 ] 
17:21:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D630>, <py_sfcl.CommandDataDefinition object at 0x0625D6C0>) , Command count = 5841 ] 
17:21:56: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:21:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D2180>, <py_sfcl.CommandDataDefinition object at 0x061F58D0>) , Command count = 5842 ] 
17:21:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:21:56:  [ CH04020102_IdleState] Run CMD25 to get the card in RCV state
17:21:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D660>, <py_sfcl.CommandDataDefinition object at 0x0625D570>) , Command count = 5843 ] 
17:21:56: CMD25[ WRITE_MULTIPLE_BLOCK ] Passed with R1 type response:[25, 0, 0, 9, 0, 6]
17:21:56:  [ CH04020102_IdleState] Card is in RCV state
17:21:59: [SCT13_CMD11] : Power is On!!!!
17:21:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5844 ] 
17:21:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9240>, <py_sfcl.CommandDataDefinition object at 0x060DECF0>) , Command count = 5845 ] 
17:21:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:21:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9300>, <py_sfcl.CommandDataDefinition object at 0x0625D7B0>) , Command count = 5846 ] 
17:21:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:21:59: [ SetCardRCA(0x1, 0xD555) , Command count = 5847 ] 
17:21:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06260EA0>, <py_sfcl.CommandDataDefinition object at 0x0625D8D0>) , Command count = 5848 ] 
17:21:59: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:21:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9150>, <py_sfcl.CommandDataDefinition object at 0x0625D900>) , Command count = 5849 ] 
17:21:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:21:59:  [ CH04020102_IdleState] Run CMD15 to get the card in INACTIVE state
17:21:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D990>, <py_sfcl.CommandDataDefinition object at 0x0625D540>) , Command count = 5850 ] 
17:21:59: CMD15[ GO_INACTIVE_STATE ] Passed with R0 type response
17:21:59:  [ CH04020102_IdleState] Card is in INACTIVE State
17:22:01: [SCT13_CMD11] : Power is On!!!!
17:22:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5851 ] 
17:22:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625D810>, <py_sfcl.CommandDataDefinition object at 0x0625D960>) , Command count = 5852 ] 
17:22:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:22:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9420>, <py_sfcl.CommandDataDefinition object at 0x0625DA50>) , Command count = 5853 ] 
17:22:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:22:01: [ SetCardRCA(0x1, 0xD555) , Command count = 5854 ] 
17:22:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9390>, <py_sfcl.CommandDataDefinition object at 0x0625DAB0>) , Command count = 5855 ] 
17:22:01: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:22:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625DB70>, <py_sfcl.CommandDataDefinition object at 0x0625DC60>) , Command count = 5856 ] 
17:22:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:22:01:  [ CH04020102_IdleState] Selecting back the card
17:22:01: [GO4_globalInitCard]### Switch to Specify Card Type
17:22:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:22:03: Host Frequency set to 25000 KHz
17:22:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:22:03: [GO18_globalSetVolt]### Set Host Voltage value.
17:22:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:22:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x061E9600>, 0x0, True) , Command count = 5857 ] 
17:22:03: [GO18_globalSetVolt]### Host voltage value is set.
17:22:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:22:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x061E9E40>, 0x0, False) , Command count = 5858 ] 
17:22:03: [GO18_globalSetVolt]### Host voltage value is set.
17:22:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5859 ] 
17:22:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:22:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5860 ] 
17:22:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:22:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:22:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:22:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:22:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:22:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5861 ] 
17:22:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:22:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:22:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9060>, <py_sfcl.CommandDataDefinition object at 0x0625DB40>) , Command count = 5862 ] 
17:22:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:22:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F51B0>, <py_sfcl.CommandDataDefinition object at 0x0625DE70>) , Command count = 5863 ] 
17:22:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:22:03: [ SetCardRCA(0x1, 0xD555) , Command count = 5864 ] 
17:22:03: [DVTCommonLib]### Identification :Idenfication of card completed 

17:22:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:22:04: Host Frequency set to 25000 KHz
17:22:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:22:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:04: ####CSD Registe 2.0 Values####
17:22:04: CSD_STRUCTURE                                 :0x1
17:22:04: Reserv1                                       :0x0
17:22:04: Time Access 1 TAAC                            :0xe
17:22:04: Time Access 2 NSAC*100                        :0x0
17:22:04: Data Transfer Rate TRAN_SPEED                 :0x32
17:22:04: Card Command Classess CCC                     :0x5b5
17:22:04: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:04: DSR(driver stage register)  DSR_IMP           :0x0
17:22:04: Reserv2                                       :0x0
17:22:04: Device Size C_SIZE                            :0xedc8
17:22:04: Reserv3                                       :0x0
17:22:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:04: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:04: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:04: Reserv4                                       :0x0
17:22:04: Write Speed Factor R2W_FACTOR                 :0x2
17:22:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:04: FILE_FORMAT_GRP                               :0x0
17:22:04: COPY flag                                     :0x1
17:22:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:04: File_Format                                   :0x0
17:22:04: CRC                                           :0x0
17:22:04: ####CSD Registe Values####  

17:22:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:22:04: [GetSCRRegisterEntry] Passed
17:22:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:22:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:22:04: Data_Status_After Erases          : 0
17:22:04: CPRM Security Support             : No Security
17:22:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:22:04: Spec. Version                     : Version 3.0X
17:22:04: Extended Security Support         : Extended_Security_Not_Supported
17:22:04: Command Support                   : COMMAND_SUPPORT
17:22:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:22:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9210>, <py_sfcl.CommandDataDefinition object at 0x0625CE10>) , Command count = 5865 ] 
17:22:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:22:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED990>, <py_sfcl.CommandDataDefinition object at 0x06265ED0>) , Command count = 5866 ] 
17:22:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:22:04: [ SetBusWidth(0x4) , Command count = 5867 ] 
17:22:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:22:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0625DD20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5868 ] 
17:22:04: Protected Area Size 0x28000
17:22:04: Bus Width           2
17:22:04: Secure Mode         0
17:22:04: Speed  Class        4
17:22:04: Perf Move           0
17:22:04: Au Size             9
17:22:04: Erase Size          15
17:22:04: Erase Timeout       1
17:22:04: Erase offset        1
17:22:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:22:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:22:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:22:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5869 ] 
17:22:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:22:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:22:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:22:04: Host Frequency set to 100000 KHz
17:22:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:22:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:04: ####CSD Registe 2.0 Values####
17:22:04: CSD_STRUCTURE                                 :0x1
17:22:04: Reserv1                                       :0x0
17:22:04: Time Access 1 TAAC                            :0xe
17:22:04: Time Access 2 NSAC*100                        :0x0
17:22:04: Data Transfer Rate TRAN_SPEED                 :0xb
17:22:04: Card Command Classess CCC                     :0x5b5
17:22:04: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:04: DSR(driver stage register)  DSR_IMP           :0x0
17:22:04: Reserv2                                       :0x0
17:22:04: Device Size C_SIZE                            :0xedc8
17:22:04: Reserv3                                       :0x0
17:22:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:04: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:04: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:04: Reserv4                                       :0x0
17:22:04: Write Speed Factor R2W_FACTOR                 :0x2
17:22:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:04: FILE_FORMAT_GRP                               :0x0
17:22:04: COPY flag                                     :0x1
17:22:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:04: File_Format                                   :0x0
17:22:04: CRC                                           :0x0
17:22:04: ####CSD Registe Values####  

17:22:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0540DE10>, <py_sfcl.CommandDataDefinition object at 0x061E9990>) , Command count = 5870 ] 
17:22:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:22:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9C00>, <py_sfcl.CommandDataDefinition object at 0x0625DB10>) , Command count = 5871 ] 
17:22:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:22:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:22:04:  [ CH04020102_IdleState] Check for global UHSscope
17:22:06: [SCT13_CMD11] : Power is On!!!!
17:22:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5872 ] 
17:22:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDB40>, <py_sfcl.CommandDataDefinition object at 0x061E9BD0>) , Command count = 5873 ] 
17:22:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:22:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9CC0>, <py_sfcl.CommandDataDefinition object at 0x0625DDB0>) , Command count = 5874 ] 
17:22:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:22:06: [ SetCardRCA(0x1, 0xD555) , Command count = 5875 ] 
17:22:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9D50>, <py_sfcl.CommandDataDefinition object at 0x0625DE40>) , Command count = 5876 ] 
17:22:06: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:22:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9AE0>, <py_sfcl.CommandDataDefinition object at 0x0625DD80>) , Command count = 5877 ] 
17:22:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:22:08: [SCT13_CMD11] : Power is On!!!!
17:22:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5878 ] 
17:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE1E0>, <py_sfcl.CommandDataDefinition object at 0x062603C0>) , Command count = 5879 ] 
17:22:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062602A0>, <py_sfcl.CommandDataDefinition object at 0x0625D930>) , Command count = 5880 ] 
17:22:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:22:09: [ SetCardRCA(0x1, 0xD555) , Command count = 5881 ] 
17:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9DE0>, <py_sfcl.CommandDataDefinition object at 0x061FF150>) , Command count = 5882 ] 
17:22:09: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9F00>, <py_sfcl.CommandDataDefinition object at 0x0625AA80>) , Command count = 5883 ] 
17:22:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625AF90>, <py_sfcl.CommandDataDefinition object at 0x0625AE10>) , Command count = 5884 ] 
17:22:09: [ GetCardStatus() , Command count = 5885 ] 
17:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625ACC0>, <py_sfcl.CommandDataDefinition object at 0x0625A780>) , Command count = 5886 ] 
17:22:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625AE10>, <py_sfcl.CommandDataDefinition object at 0x0625AF90>) , Command count = 5887 ] 
17:22:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:22:09:  [ CH04020102_IdleState] Card is deselcted and put to Stand by state
17:22:11: [SCT13_CMD11] : Power is On!!!!
17:22:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5888 ] 
17:22:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9C30>, <py_sfcl.CommandDataDefinition object at 0x0625E480>) , Command count = 5889 ] 
17:22:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:22:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5240>, <py_sfcl.CommandDataDefinition object at 0x061F5120>) , Command count = 5890 ] 
17:22:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:22:11: [ SetCardRCA(0x1, 0xD555) , Command count = 5891 ] 
17:22:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9BA0>, <py_sfcl.CommandDataDefinition object at 0x061F5DE0>) , Command count = 5892 ] 
17:22:11: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:22:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA20>, <py_sfcl.CommandDataDefinition object at 0x06265ED0>) , Command count = 5893 ] 
17:22:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:22:11:  [ CH04020102_IdleState] Card is selected back and removed from Standby State..Set the card to tran state
17:22:13: [SCT13_CMD11] : Power is On!!!!
17:22:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5894 ] 
17:22:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9F90>, <py_sfcl.CommandDataDefinition object at 0x061E99F0>) , Command count = 5895 ] 
17:22:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:22:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5D20>, <py_sfcl.CommandDataDefinition object at 0x061ED4E0>) , Command count = 5896 ] 
17:22:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:22:13: [ SetCardRCA(0x1, 0xD555) , Command count = 5897 ] 
17:22:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9E70>, <py_sfcl.CommandDataDefinition object at 0x0625EC60>) , Command count = 5898 ] 
17:22:13: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:22:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054056C0>, <py_sfcl.CommandDataDefinition object at 0x0625E780>) , Command count = 5899 ] 
17:22:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:22:15: [SCT13_CMD11] : Power is On!!!!
17:22:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5900 ] 
17:22:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625DF60>, <py_sfcl.CommandDataDefinition object at 0x0625EE40>) , Command count = 5901 ] 
17:22:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:22:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED450>, <py_sfcl.CommandDataDefinition object at 0x06265F90>) , Command count = 5902 ] 
17:22:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:22:16: [ SetCardRCA(0x1, 0xD555) , Command count = 5903 ] 
17:22:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED210>, <py_sfcl.CommandDataDefinition object at 0x0625E720>) , Command count = 5904 ] 
17:22:16: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:22:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625EE10>, <py_sfcl.CommandDataDefinition object at 0x0625EF00>) , Command count = 5905 ] 
17:22:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:22:16:  [ CH04020102_IdleState] Selecting back the card
17:22:16:  [ CH04020102_IdleState] Run CMD18 to get the card in DATA state
17:22:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625EB40>, <py_sfcl.CommandDataDefinition object at 0x0625ECF0>) , Command count = 5906 ] 
17:22:16: CMD18[ READ_MULTI_BLOCK ] Passed with R1 type response:[18, 0, 0, 9, 0, 26]
17:22:16:  [ CH04020102_IdleState] Card is in DATA state
17:22:18: [SCT13_CMD11] : Power is On!!!!
17:22:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5907 ] 
17:22:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5990>, <py_sfcl.CommandDataDefinition object at 0x06260060>) , Command count = 5908 ] 
17:22:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:22:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED300>, <py_sfcl.CommandDataDefinition object at 0x0625E450>) , Command count = 5909 ] 
17:22:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:22:18: [ SetCardRCA(0x1, 0xD555) , Command count = 5910 ] 
17:22:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5EA0>, <py_sfcl.CommandDataDefinition object at 0x062601E0>) , Command count = 5911 ] 
17:22:18: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:22:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DBE40>, <py_sfcl.CommandDataDefinition object at 0x06265C00>) , Command count = 5912 ] 
17:22:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:22:18:  [ CH04020102_IdleState] Run CMD25 to get the card in RCV state
17:22:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED420>, <py_sfcl.CommandDataDefinition object at 0x06265EA0>) , Command count = 5913 ] 
17:22:18: CMD25[ WRITE_MULTIPLE_BLOCK ] Passed with R1 type response:[25, 0, 0, 9, 0, 6]
17:22:18:  [ CH04020102_IdleState] Card is in RCV state
17:22:20: [SCT13_CMD11] : Power is On!!!!
17:22:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5914 ] 
17:22:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED7E0>, <py_sfcl.CommandDataDefinition object at 0x06260210>) , Command count = 5915 ] 
17:22:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:22:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053CB690>, <py_sfcl.CommandDataDefinition object at 0x06260240>) , Command count = 5916 ] 
17:22:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:22:20: [ SetCardRCA(0x1, 0xD555) , Command count = 5917 ] 
17:22:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06260390>, <py_sfcl.CommandDataDefinition object at 0x06260420>) , Command count = 5918 ] 
17:22:20: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:22:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05415F60>, <py_sfcl.CommandDataDefinition object at 0x06260150>) , Command count = 5919 ] 
17:22:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:22:20:  [ CH04020102_IdleState] Run CMD15 to get the card in INACTIVE state
17:22:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9660>, <py_sfcl.CommandDataDefinition object at 0x06260540>) , Command count = 5920 ] 
17:22:20: CMD15[ GO_INACTIVE_STATE ] Passed with R0 type response
17:22:20:  [ CH04020102_IdleState] Card is in INACTIVE State
17:22:22: [SCT13_CMD11] : Power is On!!!!
17:22:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5921 ] 
17:22:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED720>, <py_sfcl.CommandDataDefinition object at 0x06260270>) , Command count = 5922 ] 
17:22:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:22:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06265DE0>, <py_sfcl.CommandDataDefinition object at 0x06265D20>) , Command count = 5923 ] 
17:22:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
17:22:22: [ SetCardRCA(0x1, 0xD555) , Command count = 5924 ] 
17:22:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625E330>, <py_sfcl.CommandDataDefinition object at 0x062605D0>) , Command count = 5925 ] 
17:22:22: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80]
17:22:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D2030>, <py_sfcl.CommandDataDefinition object at 0x062601B0>) , Command count = 5926 ] 
17:22:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:22:22:  [ CH04020102_IdleState] Selecting back the card
17:22:22: ########################################
17:22:22: Finished Running script CH04020102_IdleState 
17:22:22: ########################################
17:22:22: ########################################
17:22:22: Stated Running script CH473_CCC 
17:22:22: ########################################
17:22:22: ###### Running CCC Test 
17:22:22: calling basic init
17:22:22: [GO4_globalInitCard]### Switch to Specify Card Type
17:22:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:22:25: Host Frequency set to 25000 KHz
17:22:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:22:25: [GO18_globalSetVolt]### Set Host Voltage value.
17:22:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:22:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x06265D50>, 0x0, True) , Command count = 5927 ] 
17:22:25: [GO18_globalSetVolt]### Host voltage value is set.
17:22:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:22:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0625E300>, 0x0, False) , Command count = 5928 ] 
17:22:25: [GO18_globalSetVolt]### Host voltage value is set.
17:22:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5929 ] 
17:22:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:22:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5930 ] 
17:22:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:22:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:22:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:22:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:22:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:22:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5931 ] 
17:22:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:22:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:22:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED9F0>, <py_sfcl.CommandDataDefinition object at 0x062606F0>) , Command count = 5932 ] 
17:22:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:22:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDAB0>, <py_sfcl.CommandDataDefinition object at 0x061ED2A0>) , Command count = 5933 ] 
17:22:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:22:25: [ SetCardRCA(0x1, 0xD555) , Command count = 5934 ] 
17:22:25: [DVTCommonLib]### Identification :Idenfication of card completed 

17:22:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:22:25: Host Frequency set to 25000 KHz
17:22:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:22:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:25: ####CSD Registe 2.0 Values####
17:22:25: CSD_STRUCTURE                                 :0x1
17:22:25: Reserv1                                       :0x0
17:22:25: Time Access 1 TAAC                            :0xe
17:22:25: Time Access 2 NSAC*100                        :0x0
17:22:25: Data Transfer Rate TRAN_SPEED                 :0x32
17:22:25: Card Command Classess CCC                     :0x5b5
17:22:25: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:25: DSR(driver stage register)  DSR_IMP           :0x0
17:22:25: Reserv2                                       :0x0
17:22:25: Device Size C_SIZE                            :0xedc8
17:22:25: Reserv3                                       :0x0
17:22:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:25: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:25: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:25: Reserv4                                       :0x0
17:22:25: Write Speed Factor R2W_FACTOR                 :0x2
17:22:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:25: FILE_FORMAT_GRP                               :0x0
17:22:25: COPY flag                                     :0x1
17:22:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:25: File_Format                                   :0x0
17:22:25: CRC                                           :0x0
17:22:25: ####CSD Registe Values####  

17:22:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:22:25: [GetSCRRegisterEntry] Passed
17:22:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:22:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:22:25: Data_Status_After Erases          : 0
17:22:25: CPRM Security Support             : No Security
17:22:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:22:25: Spec. Version                     : Version 3.0X
17:22:25: Extended Security Support         : Extended_Security_Not_Supported
17:22:25: Command Support                   : COMMAND_SUPPORT
17:22:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:22:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5D50>, <py_sfcl.CommandDataDefinition object at 0x062608D0>) , Command count = 5935 ] 
17:22:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:22:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDCF0>, <py_sfcl.CommandDataDefinition object at 0x06260750>) , Command count = 5936 ] 
17:22:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:22:25: [ SetBusWidth(0x4) , Command count = 5937 ] 
17:22:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:22:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06260B70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5938 ] 
17:22:25: Protected Area Size 0x28000
17:22:25: Bus Width           2
17:22:25: Secure Mode         0
17:22:25: Speed  Class        4
17:22:25: Perf Move           0
17:22:25: Au Size             9
17:22:25: Erase Size          15
17:22:25: Erase Timeout       1
17:22:25: Erase offset        1
17:22:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:22:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:22:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:22:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5939 ] 
17:22:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:22:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:22:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:22:25: Host Frequency set to 100000 KHz
17:22:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:22:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:25: ####CSD Registe 2.0 Values####
17:22:25: CSD_STRUCTURE                                 :0x1
17:22:25: Reserv1                                       :0x0
17:22:25: Time Access 1 TAAC                            :0xe
17:22:25: Time Access 2 NSAC*100                        :0x0
17:22:25: Data Transfer Rate TRAN_SPEED                 :0xb
17:22:25: Card Command Classess CCC                     :0x5b5
17:22:25: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:25: DSR(driver stage register)  DSR_IMP           :0x0
17:22:25: Reserv2                                       :0x0
17:22:25: Device Size C_SIZE                            :0xedc8
17:22:25: Reserv3                                       :0x0
17:22:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:25: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:25: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:25: Reserv4                                       :0x0
17:22:26: Write Speed Factor R2W_FACTOR                 :0x2
17:22:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:26: FILE_FORMAT_GRP                               :0x0
17:22:26: COPY flag                                     :0x1
17:22:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:26: File_Format                                   :0x0
17:22:26: CRC                                           :0x0
17:22:26: ####CSD Registe Values####  

17:22:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED7B0>, <py_sfcl.CommandDataDefinition object at 0x06260BA0>) , Command count = 5940 ] 
17:22:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:22:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F52D0>, <py_sfcl.CommandDataDefinition object at 0x061E9810>) , Command count = 5941 ] 
17:22:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:22:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:22:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:26: ####CSD Registe 2.0 Values####
17:22:26: CSD_STRUCTURE                                 :0x1
17:22:26: Reserv1                                       :0x0
17:22:26: Time Access 1 TAAC                            :0xe
17:22:26: Time Access 2 NSAC*100                        :0x0
17:22:26: Data Transfer Rate TRAN_SPEED                 :0xb
17:22:26: Card Command Classess CCC                     :0x5b5
17:22:26: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:26: DSR(driver stage register)  DSR_IMP           :0x0
17:22:26: Reserv2                                       :0x0
17:22:26: Device Size C_SIZE                            :0xedc8
17:22:26: Reserv3                                       :0x0
17:22:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:26: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:26: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:26: Reserv4                                       :0x0
17:22:26: Write Speed Factor R2W_FACTOR                 :0x2
17:22:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:26: FILE_FORMAT_GRP                               :0x0
17:22:26: COPY flag                                     :0x1
17:22:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:26: File_Format                                   :0x0
17:22:26: CRC                                           :0x0
17:22:26: ####CSD Registe Values####  

17:22:26: globalCardCapacity is not High Capacity
17:22:26: CSD Register Command Class 0x5b5
17:22:26: calling basic init
17:22:26: [GO4_globalInitCard]### Switch to Specify Card Type
17:22:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:22:28: Host Frequency set to 25000 KHz
17:22:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:22:28: [GO18_globalSetVolt]### Set Host Voltage value.
17:22:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:22:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x061EDED0>, 0x0, True) , Command count = 5942 ] 
17:22:28: [GO18_globalSetVolt]### Host voltage value is set.
17:22:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:22:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x061ED480>, 0x0, False) , Command count = 5943 ] 
17:22:28: [GO18_globalSetVolt]### Host voltage value is set.
17:22:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5944 ] 
17:22:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:22:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5945 ] 
17:22:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:22:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:22:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:22:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:22:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:22:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5946 ] 
17:22:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:22:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:22:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED900>, <py_sfcl.CommandDataDefinition object at 0x0625C930>) , Command count = 5947 ] 
17:22:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:22:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06260F30>, <py_sfcl.CommandDataDefinition object at 0x06260B10>) , Command count = 5948 ] 
17:22:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:22:29: [ SetCardRCA(0x1, 0xD555) , Command count = 5949 ] 
17:22:29: [DVTCommonLib]### Identification :Idenfication of card completed 

17:22:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:22:29: Host Frequency set to 25000 KHz
17:22:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:22:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:29: ####CSD Registe 2.0 Values####
17:22:29: CSD_STRUCTURE                                 :0x1
17:22:29: Reserv1                                       :0x0
17:22:29: Time Access 1 TAAC                            :0xe
17:22:29: Time Access 2 NSAC*100                        :0x0
17:22:29: Data Transfer Rate TRAN_SPEED                 :0x32
17:22:29: Card Command Classess CCC                     :0x5b5
17:22:29: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:29: DSR(driver stage register)  DSR_IMP           :0x0
17:22:29: Reserv2                                       :0x0
17:22:29: Device Size C_SIZE                            :0xedc8
17:22:29: Reserv3                                       :0x0
17:22:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:29: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:29: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:29: Reserv4                                       :0x0
17:22:29: Write Speed Factor R2W_FACTOR                 :0x2
17:22:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:29: FILE_FORMAT_GRP                               :0x0
17:22:29: COPY flag                                     :0x1
17:22:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:29: File_Format                                   :0x0
17:22:29: CRC                                           :0x0
17:22:29: ####CSD Registe Values####  

17:22:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:22:29: [GetSCRRegisterEntry] Passed
17:22:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:22:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:22:29: Data_Status_After Erases          : 0
17:22:29: CPRM Security Support             : No Security
17:22:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:22:29: Spec. Version                     : Version 3.0X
17:22:29: Extended Security Support         : Extended_Security_Not_Supported
17:22:29: Command Support                   : COMMAND_SUPPORT
17:22:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:22:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F50F0>, <py_sfcl.CommandDataDefinition object at 0x061F56F0>) , Command count = 5950 ] 
17:22:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:22:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06260E70>, <py_sfcl.CommandDataDefinition object at 0x06260DE0>) , Command count = 5951 ] 
17:22:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:22:29: [ SetBusWidth(0x4) , Command count = 5952 ] 
17:22:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:22:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06261090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5953 ] 
17:22:29: Protected Area Size 0x28000
17:22:29: Bus Width           2
17:22:29: Secure Mode         0
17:22:29: Speed  Class        4
17:22:29: Perf Move           0
17:22:29: Au Size             9
17:22:29: Erase Size          15
17:22:29: Erase Timeout       1
17:22:29: Erase offset        1
17:22:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:22:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:22:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:22:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5954 ] 
17:22:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:22:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:22:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:22:29: Host Frequency set to 100000 KHz
17:22:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:22:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:29: ####CSD Registe 2.0 Values####
17:22:29: CSD_STRUCTURE                                 :0x1
17:22:29: Reserv1                                       :0x0
17:22:29: Time Access 1 TAAC                            :0xe
17:22:29: Time Access 2 NSAC*100                        :0x0
17:22:29: Data Transfer Rate TRAN_SPEED                 :0xb
17:22:29: Card Command Classess CCC                     :0x5b5
17:22:29: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:29: DSR(driver stage register)  DSR_IMP           :0x0
17:22:29: Reserv2                                       :0x0
17:22:29: Device Size C_SIZE                            :0xedc8
17:22:29: Reserv3                                       :0x0
17:22:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:29: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:29: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:29: Reserv4                                       :0x0
17:22:29: Write Speed Factor R2W_FACTOR                 :0x2
17:22:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:29: FILE_FORMAT_GRP                               :0x0
17:22:29: COPY flag                                     :0x1
17:22:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:29: File_Format                                   :0x0
17:22:29: CRC                                           :0x0
17:22:29: ####CSD Registe Values####  

17:22:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDCC0>, <py_sfcl.CommandDataDefinition object at 0x06261300>) , Command count = 5955 ] 
17:22:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:22:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261240>, <py_sfcl.CommandDataDefinition object at 0x06260DE0>) , Command count = 5956 ] 
17:22:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:22:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:22:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:30: ####CSD Registe 2.0 Values####
17:22:30: CSD_STRUCTURE                                 :0x1
17:22:30: Reserv1                                       :0x0
17:22:30: Time Access 1 TAAC                            :0xe
17:22:30: Time Access 2 NSAC*100                        :0x0
17:22:30: Data Transfer Rate TRAN_SPEED                 :0xb
17:22:30: Card Command Classess CCC                     :0x5b5
17:22:30: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:30: DSR(driver stage register)  DSR_IMP           :0x0
17:22:30: Reserv2                                       :0x0
17:22:30: Device Size C_SIZE                            :0xedc8
17:22:30: Reserv3                                       :0x0
17:22:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:30: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:30: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:30: Reserv4                                       :0x0
17:22:30: Write Speed Factor R2W_FACTOR                 :0x2
17:22:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:30: FILE_FORMAT_GRP                               :0x0
17:22:30: COPY flag                                     :0x1
17:22:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:30: File_Format                                   :0x0
17:22:30: CRC                                           :0x0
17:22:30: ####CSD Registe Values####  

17:22:30: globalCardCapacity is not High Capacity
17:22:30: CSD Register Command Class 0x5b5
17:22:30: ########################################
17:22:30: Finished Running script CH473_CCC 
17:22:30: ########################################
17:22:30: ########################################
17:22:30: Stated Running script CF4020_Call_All_Latency_4_20 
17:22:30: ########################################
17:22:30: ###### Running Chapter 4 All scripts  ######
17:22:30: ########################################
17:22:30: Stated Running script CH4201_Latency_Jump_4MB 
17:22:30: ########################################
17:22:30: [GO4_globalInitCard]### Switch to Specify Card Type
17:22:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:22:32: Host Frequency set to 25000 KHz
17:22:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:22:32: [GO18_globalSetVolt]### Set Host Voltage value.
17:22:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:22:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x062842A0>, 0x0, True) , Command count = 5957 ] 
17:22:32: [GO18_globalSetVolt]### Host voltage value is set.
17:22:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:22:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x06261270>, 0x0, False) , Command count = 5958 ] 
17:22:32: [GO18_globalSetVolt]### Host voltage value is set.
17:22:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5959 ] 
17:22:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:22:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5960 ] 
17:22:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:22:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:22:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:22:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:22:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:22:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5961 ] 
17:22:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:22:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:22:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06260F60>, <py_sfcl.CommandDataDefinition object at 0x06261450>) , Command count = 5962 ] 
17:22:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:22:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F54E0>, <py_sfcl.CommandDataDefinition object at 0x06261330>) , Command count = 5963 ] 
17:22:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:22:33: [ SetCardRCA(0x1, 0xD555) , Command count = 5964 ] 
17:22:33: [DVTCommonLib]### Identification :Idenfication of card completed 

17:22:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:22:33: Host Frequency set to 25000 KHz
17:22:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:22:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:33: ####CSD Registe 2.0 Values####
17:22:33: CSD_STRUCTURE                                 :0x1
17:22:33: Reserv1                                       :0x0
17:22:33: Time Access 1 TAAC                            :0xe
17:22:33: Time Access 2 NSAC*100                        :0x0
17:22:33: Data Transfer Rate TRAN_SPEED                 :0x32
17:22:33: Card Command Classess CCC                     :0x5b5
17:22:33: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:33: DSR(driver stage register)  DSR_IMP           :0x0
17:22:33: Reserv2                                       :0x0
17:22:33: Device Size C_SIZE                            :0xedc8
17:22:33: Reserv3                                       :0x0
17:22:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:33: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:33: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:33: Reserv4                                       :0x0
17:22:33: Write Speed Factor R2W_FACTOR                 :0x2
17:22:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:33: FILE_FORMAT_GRP                               :0x0
17:22:33: COPY flag                                     :0x1
17:22:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:33: File_Format                                   :0x0
17:22:33: CRC                                           :0x0
17:22:33: ####CSD Registe Values####  

17:22:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:22:33: [GetSCRRegisterEntry] Passed
17:22:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:22:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:22:33: Data_Status_After Erases          : 0
17:22:33: CPRM Security Support             : No Security
17:22:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:22:33: Spec. Version                     : Version 3.0X
17:22:33: Extended Security Support         : Extended_Security_Not_Supported
17:22:33: Command Support                   : COMMAND_SUPPORT
17:22:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:22:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5570>, <py_sfcl.CommandDataDefinition object at 0x06261480>) , Command count = 5965 ] 
17:22:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:22:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5450>, <py_sfcl.CommandDataDefinition object at 0x06261390>) , Command count = 5966 ] 
17:22:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:22:33: [ SetBusWidth(0x4) , Command count = 5967 ] 
17:22:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:22:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062615D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5968 ] 
17:22:33: Protected Area Size 0x28000
17:22:33: Bus Width           2
17:22:33: Secure Mode         0
17:22:33: Speed  Class        4
17:22:33: Perf Move           0
17:22:33: Au Size             9
17:22:33: Erase Size          15
17:22:33: Erase Timeout       1
17:22:33: Erase offset        1
17:22:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:22:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:22:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:22:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5969 ] 
17:22:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:22:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:22:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:22:33: Host Frequency set to 100000 KHz
17:22:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:22:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:33: ####CSD Registe 2.0 Values####
17:22:33: CSD_STRUCTURE                                 :0x1
17:22:33: Reserv1                                       :0x0
17:22:33: Time Access 1 TAAC                            :0xe
17:22:33: Time Access 2 NSAC*100                        :0x0
17:22:33: Data Transfer Rate TRAN_SPEED                 :0xb
17:22:33: Card Command Classess CCC                     :0x5b5
17:22:33: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:33: DSR(driver stage register)  DSR_IMP           :0x0
17:22:33: Reserv2                                       :0x0
17:22:33: Device Size C_SIZE                            :0xedc8
17:22:33: Reserv3                                       :0x0
17:22:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:33: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:33: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:33: Reserv4                                       :0x0
17:22:33: Write Speed Factor R2W_FACTOR                 :0x2
17:22:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:33: FILE_FORMAT_GRP                               :0x0
17:22:33: COPY flag                                     :0x1
17:22:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:33: File_Format                                   :0x0
17:22:33: CRC                                           :0x0
17:22:33: ####CSD Registe Values####  

17:22:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F51E0>, <py_sfcl.CommandDataDefinition object at 0x062614B0>) , Command count = 5970 ] 
17:22:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:22:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5720>, <py_sfcl.CommandDataDefinition object at 0x06261630>) , Command count = 5971 ] 
17:22:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:22:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:22:34: ###### Running Latency_Jump_4MB Test 
17:22:34: [DVTCommonLib]### MultipleRead_Exp_Hndl :Multiple Read to the card at StartLba:0x0 to EndLba:0x8
17:22:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F57E0>, <py_sfcl.CommandDataDefinition object at 0x061F50C0>) , Command count = 5972 ] 
17:22:34: CMD18[ READ_MULTI_BLOCK ] Passed with R1 type response:[18, 0, 0, 9, 0, 26]
17:22:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062617B0>, <py_sfcl.CommandDataDefinition object at 0x06284210>) , Command count = 5973 ] 
17:22:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Data', 'READY_FOR_DATA']
17:22:34:  Read & Verify  Lba:0x00000000 Transfer Length:0x0008   
17:22:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261750>, <py_sfcl.CommandDataDefinition object at 0x06261600>) , Command count = 5974 ] 
17:22:34: CMD12[ STOP_TRANSMISSION ] Passed with R1b type response:[12, 0, 0, 11, 0, 15]
17:22:34: [DVTCommonLib]### MultipleWrite_Exp_Hndl :Multiple Write to the card at StartLba:0x0 to EndLba:0x8
17:22:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C7B0>, <py_sfcl.CommandDataDefinition object at 0x0625C480>) , Command count = 5975 ] 
17:22:34: CMD25[ WRITE_MULTIPLE_BLOCK ] Passed with R1 type response:[25, 0, 0, 9, 0, 6]
17:22:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5480>, <py_sfcl.CommandDataDefinition object at 0x06261600>) , Command count = 5976 ] 
17:22:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Rcv', 'READY_FOR_DATA']
17:22:34:   Write Lba:0x00000000  Transfer Length:0x0008 
17:22:34: [DVTCommonLib]### MultipleWrite_Exp_Hndl :Multiple Write Failed from StartLba:0x0 to EndLba:0x8
17:22:34: Failed Running script <module 'CH4201_Latency_Jump_4MB' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_4_Card_Functional\CH4201_Latency_Jump_4MB.pyc'> with error AttributeError instance has no attribute 'GetErrorNumber' 
17:22:34: ########################################
17:22:34: ########################################
17:22:34: Stated Running script CH4202_Latency_Jump_104MB 
17:22:34: ########################################
17:22:34: [GO4_globalInitCard]### Switch to Specify Card Type
17:22:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:22:36: Host Frequency set to 25000 KHz
17:22:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:22:36: [GO18_globalSetVolt]### Set Host Voltage value.
17:22:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:22:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x062843F0>, 0x0, True) , Command count = 5977 ] 
17:22:36: [GO18_globalSetVolt]### Host voltage value is set.
17:22:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:22:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x061E93C0>, 0x0, False) , Command count = 5978 ] 
17:22:36: [GO18_globalSetVolt]### Host voltage value is set.
17:22:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5979 ] 
17:22:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:22:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5980 ] 
17:22:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:22:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:22:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:22:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:22:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:22:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5981 ] 
17:22:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:22:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:22:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E92A0>, <py_sfcl.CommandDataDefinition object at 0x061FFCF0>) , Command count = 5982 ] 
17:22:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:22:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0540D1B0>, <py_sfcl.CommandDataDefinition object at 0x06261600>) , Command count = 5983 ] 
17:22:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:22:36: [ SetCardRCA(0x1, 0xD555) , Command count = 5984 ] 
17:22:36: [DVTCommonLib]### Identification :Idenfication of card completed 

17:22:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:22:37: Host Frequency set to 25000 KHz
17:22:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:22:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:37: ####CSD Registe 2.0 Values####
17:22:37: CSD_STRUCTURE                                 :0x1
17:22:37: Reserv1                                       :0x0
17:22:37: Time Access 1 TAAC                            :0xe
17:22:37: Time Access 2 NSAC*100                        :0x0
17:22:37: Data Transfer Rate TRAN_SPEED                 :0x32
17:22:37: Card Command Classess CCC                     :0x5b5
17:22:37: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:37: DSR(driver stage register)  DSR_IMP           :0x0
17:22:37: Reserv2                                       :0x0
17:22:37: Device Size C_SIZE                            :0xedc8
17:22:37: Reserv3                                       :0x0
17:22:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:37: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:37: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:37: Reserv4                                       :0x0
17:22:37: Write Speed Factor R2W_FACTOR                 :0x2
17:22:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:37: FILE_FORMAT_GRP                               :0x0
17:22:37: COPY flag                                     :0x1
17:22:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:37: File_Format                                   :0x0
17:22:37: CRC                                           :0x0
17:22:37: ####CSD Registe Values####  

17:22:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:22:37: [GetSCRRegisterEntry] Passed
17:22:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:22:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:22:37: Data_Status_After Erases          : 0
17:22:37: CPRM Security Support             : No Security
17:22:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:22:37: Spec. Version                     : Version 3.0X
17:22:37: Extended Security Support         : Extended_Security_Not_Supported
17:22:37: Command Support                   : COMMAND_SUPPORT
17:22:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:22:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C3C0>, <py_sfcl.CommandDataDefinition object at 0x061EDD20>) , Command count = 5985 ] 
17:22:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:22:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5A80>, <py_sfcl.CommandDataDefinition object at 0x061FF5D0>) , Command count = 5986 ] 
17:22:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:22:37: [ SetBusWidth(0x4) , Command count = 5987 ] 
17:22:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:22:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06261B70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5988 ] 
17:22:37: Protected Area Size 0x28000
17:22:37: Bus Width           2
17:22:37: Secure Mode         0
17:22:37: Speed  Class        4
17:22:37: Perf Move           0
17:22:37: Au Size             9
17:22:37: Erase Size          15
17:22:37: Erase Timeout       1
17:22:37: Erase offset        1
17:22:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:22:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:22:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:22:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5989 ] 
17:22:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:22:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:22:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:22:37: Host Frequency set to 100000 KHz
17:22:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:22:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:37: ####CSD Registe 2.0 Values####
17:22:37: CSD_STRUCTURE                                 :0x1
17:22:37: Reserv1                                       :0x0
17:22:37: Time Access 1 TAAC                            :0xe
17:22:37: Time Access 2 NSAC*100                        :0x0
17:22:37: Data Transfer Rate TRAN_SPEED                 :0xb
17:22:37: Card Command Classess CCC                     :0x5b5
17:22:37: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:37: DSR(driver stage register)  DSR_IMP           :0x0
17:22:37: Reserv2                                       :0x0
17:22:37: Device Size C_SIZE                            :0xedc8
17:22:37: Reserv3                                       :0x0
17:22:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:37: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:37: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:37: Reserv4                                       :0x0
17:22:37: Write Speed Factor R2W_FACTOR                 :0x2
17:22:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:37: FILE_FORMAT_GRP                               :0x0
17:22:37: COPY flag                                     :0x1
17:22:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:37: File_Format                                   :0x0
17:22:37: CRC                                           :0x0
17:22:37: ####CSD Registe Values####  

17:22:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FF3C0>, <py_sfcl.CommandDataDefinition object at 0x062550F0>) , Command count = 5990 ] 
17:22:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:22:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261C30>, <py_sfcl.CommandDataDefinition object at 0x06261870>) , Command count = 5991 ] 
17:22:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:22:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:22:37: [CH4202_Latency_Jump_104MB]### Running Latency_Jump_104MB Test 
17:22:37: [DVTCommonLib]### MultipleRead_Exp_Hndl :Multiple Read to the card at StartLba:0x0 to EndLba:0x8
17:22:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06255150>, <py_sfcl.CommandDataDefinition object at 0x06255180>) , Command count = 5992 ] 
17:22:37: CMD18[ READ_MULTI_BLOCK ] Passed with R1 type response:[18, 0, 0, 9, 0, 26]
17:22:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06255060>, <py_sfcl.CommandDataDefinition object at 0x06261C60>) , Command count = 5993 ] 
17:22:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Data', 'READY_FOR_DATA']
17:22:37:  Read Lba:0x00000000 Transfer Length:0x0008   
17:22:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062551B0>, <py_sfcl.CommandDataDefinition object at 0x06261900>) , Command count = 5994 ] 
17:22:38: CMD12[ STOP_TRANSMISSION ] Passed with R1b type response:[12, 0, 0, 11, 0, 15]
17:22:38: [DVTCommonLib]### MultipleWrite_Exp_Hndl :Multiple Write to the card at StartLba:0x0 to EndLba:0x8
17:22:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5810>, <py_sfcl.CommandDataDefinition object at 0x06261CC0>) , Command count = 5995 ] 
17:22:38: CMD25[ WRITE_MULTIPLE_BLOCK ] Passed with R1 type response:[25, 0, 0, 9, 0, 6]
17:22:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5BA0>, <py_sfcl.CommandDataDefinition object at 0x062613C0>) , Command count = 5996 ] 
17:22:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Rcv', 'READY_FOR_DATA']
17:22:38:   Write Lba:0x00000000  Transfer Length:0x0008 
17:22:38: [DVTCommonLib]### MultipleWrite_Exp_Hndl :Multiple Write Failed from StartLba:0x0 to EndLba:0x8
17:22:38: Failed Running script <module 'CH4202_Latency_Jump_104MB' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_4_Card_Functional\CH4202_Latency_Jump_104MB.pyc'> with error AttributeError instance has no attribute 'GetErrorNumber' 
17:22:38: ########################################
17:22:38: ########################################
17:22:38: Stated Running script CH4203_Latency_Overlap_4MB 
17:22:38: ########################################
17:22:38: [GO4_globalInitCard]### Switch to Specify Card Type
17:22:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:22:40: Host Frequency set to 25000 KHz
17:22:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:22:40: [GO18_globalSetVolt]### Set Host Voltage value.
17:22:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:22:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x06284420>, 0x0, True) , Command count = 5997 ] 
17:22:40: [GO18_globalSetVolt]### Host voltage value is set.
17:22:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:22:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0625C6C0>, 0x0, False) , Command count = 5998 ] 
17:22:40: [GO18_globalSetVolt]### Host voltage value is set.
17:22:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5999 ] 
17:22:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:22:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6000 ] 
17:22:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:22:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:22:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:22:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:22:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:22:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6001 ] 
17:22:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:22:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:22:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625CC60>, <py_sfcl.CommandDataDefinition object at 0x0625C420>) , Command count = 6002 ] 
17:22:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:22:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06260F00>, <py_sfcl.CommandDataDefinition object at 0x0625CAB0>) , Command count = 6003 ] 
17:22:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:22:40: [ SetCardRCA(0x1, 0xD555) , Command count = 6004 ] 
17:22:40: [DVTCommonLib]### Identification :Idenfication of card completed 

17:22:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:22:40: Host Frequency set to 25000 KHz
17:22:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:22:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:40: ####CSD Registe 2.0 Values####
17:22:40: CSD_STRUCTURE                                 :0x1
17:22:40: Reserv1                                       :0x0
17:22:40: Time Access 1 TAAC                            :0xe
17:22:40: Time Access 2 NSAC*100                        :0x0
17:22:40: Data Transfer Rate TRAN_SPEED                 :0x32
17:22:40: Card Command Classess CCC                     :0x5b5
17:22:40: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:40: DSR(driver stage register)  DSR_IMP           :0x0
17:22:40: Reserv2                                       :0x0
17:22:40: Device Size C_SIZE                            :0xedc8
17:22:40: Reserv3                                       :0x0
17:22:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:40: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:40: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:40: Reserv4                                       :0x0
17:22:40: Write Speed Factor R2W_FACTOR                 :0x2
17:22:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:40: FILE_FORMAT_GRP                               :0x0
17:22:40: COPY flag                                     :0x1
17:22:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:40: File_Format                                   :0x0
17:22:40: CRC                                           :0x0
17:22:40: ####CSD Registe Values####  

17:22:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:22:40: [GetSCRRegisterEntry] Passed
17:22:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:22:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:22:40: Data_Status_After Erases          : 0
17:22:40: CPRM Security Support             : No Security
17:22:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:22:40: Spec. Version                     : Version 3.0X
17:22:40: Extended Security Support         : Extended_Security_Not_Supported
17:22:40: Command Support                   : COMMAND_SUPPORT
17:22:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:22:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625EF30>, <py_sfcl.CommandDataDefinition object at 0x06261570>) , Command count = 6005 ] 
17:22:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:22:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C720>, <py_sfcl.CommandDataDefinition object at 0x0625E900>) , Command count = 6006 ] 
17:22:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:22:40: [ SetBusWidth(0x4) , Command count = 6007 ] 
17:22:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:22:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0625C8A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6008 ] 
17:22:40: Protected Area Size 0x28000
17:22:40: Bus Width           2
17:22:40: Secure Mode         0
17:22:40: Speed  Class        4
17:22:40: Perf Move           0
17:22:40: Au Size             9
17:22:40: Erase Size          15
17:22:40: Erase Timeout       1
17:22:40: Erase offset        1
17:22:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:22:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:22:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:22:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6009 ] 
17:22:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:22:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:22:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:22:41: Host Frequency set to 100000 KHz
17:22:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:22:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:41: ####CSD Registe 2.0 Values####
17:22:41: CSD_STRUCTURE                                 :0x1
17:22:41: Reserv1                                       :0x0
17:22:41: Time Access 1 TAAC                            :0xe
17:22:41: Time Access 2 NSAC*100                        :0x0
17:22:41: Data Transfer Rate TRAN_SPEED                 :0xb
17:22:41: Card Command Classess CCC                     :0x5b5
17:22:41: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:41: DSR(driver stage register)  DSR_IMP           :0x0
17:22:41: Reserv2                                       :0x0
17:22:41: Device Size C_SIZE                            :0xedc8
17:22:41: Reserv3                                       :0x0
17:22:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:41: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:41: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:41: Reserv4                                       :0x0
17:22:41: Write Speed Factor R2W_FACTOR                 :0x2
17:22:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:41: FILE_FORMAT_GRP                               :0x0
17:22:41: COPY flag                                     :0x1
17:22:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:41: File_Format                                   :0x0
17:22:41: CRC                                           :0x0
17:22:41: ####CSD Registe Values####  

17:22:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5AB0>, <py_sfcl.CommandDataDefinition object at 0x0625CD50>) , Command count = 6010 ] 
17:22:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:22:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9D20>, <py_sfcl.CommandDataDefinition object at 0x0625CF60>) , Command count = 6011 ] 
17:22:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:22:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:22:41: ###### Running Latency_Overlap_4MB Test 
17:22:41: [DVTCommonLib]### MultipleWrite_Exp_Hndl :Multiple Write to the card at StartLba:0x0 to EndLba:0x2
17:22:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261DB0>, <py_sfcl.CommandDataDefinition object at 0x062613C0>) , Command count = 6012 ] 
17:22:41: CMD25[ WRITE_MULTIPLE_BLOCK ] Passed with R1 type response:[25, 0, 0, 9, 0, 6]
17:22:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625CE40>, <py_sfcl.CommandDataDefinition object at 0x06261690>) , Command count = 6013 ] 
17:22:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Rcv', 'READY_FOR_DATA']
17:22:41:   Write Lba:0x00000000  Transfer Length:0x0002 
17:22:41: [DVTCommonLib]### MultipleWrite_Exp_Hndl :Multiple Write Failed from StartLba:0x0 to EndLba:0x2
17:22:41: Failed Running script <module 'CH4203_Latency_Overlap_4MB' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_4_Card_Functional\CH4203_Latency_Overlap_4MB.pyc'> with error AttributeError instance has no attribute 'GetErrorNumber' 
17:22:42: ########################################
17:22:42: ########################################
17:22:42: Stated Running script CH4204_Latency_Overlap_104MB 
17:22:42: ########################################
17:22:42: [GO4_globalInitCard]### Switch to Specify Card Type
17:22:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:22:44: Host Frequency set to 25000 KHz
17:22:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:22:44: [GO18_globalSetVolt]### Set Host Voltage value.
17:22:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:22:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x06284540>, 0x0, True) , Command count = 6014 ] 
17:22:44: [GO18_globalSetVolt]### Host voltage value is set.
17:22:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:22:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x0625CC00>, 0x0, False) , Command count = 6015 ] 
17:22:44: [GO18_globalSetVolt]### Host voltage value is set.
17:22:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6016 ] 
17:22:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:22:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6017 ] 
17:22:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:22:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:22:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:22:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:22:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:22:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6018 ] 
17:22:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:22:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:22:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625AB40>, <py_sfcl.CommandDataDefinition object at 0x0625A870>) , Command count = 6019 ] 
17:22:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:22:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625A630>, <py_sfcl.CommandDataDefinition object at 0x0625AB10>) , Command count = 6020 ] 
17:22:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:22:44: [ SetCardRCA(0x1, 0xD555) , Command count = 6021 ] 
17:22:44: [DVTCommonLib]### Identification :Idenfication of card completed 

17:22:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:22:44: Host Frequency set to 25000 KHz
17:22:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:22:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:44: ####CSD Registe 2.0 Values####
17:22:44: CSD_STRUCTURE                                 :0x1
17:22:44: Reserv1                                       :0x0
17:22:44: Time Access 1 TAAC                            :0xe
17:22:44: Time Access 2 NSAC*100                        :0x0
17:22:44: Data Transfer Rate TRAN_SPEED                 :0x32
17:22:44: Card Command Classess CCC                     :0x5b5
17:22:44: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:44: DSR(driver stage register)  DSR_IMP           :0x0
17:22:44: Reserv2                                       :0x0
17:22:44: Device Size C_SIZE                            :0xedc8
17:22:44: Reserv3                                       :0x0
17:22:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:44: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:44: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:44: Reserv4                                       :0x0
17:22:44: Write Speed Factor R2W_FACTOR                 :0x2
17:22:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:44: FILE_FORMAT_GRP                               :0x0
17:22:44: COPY flag                                     :0x1
17:22:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:44: File_Format                                   :0x0
17:22:44: CRC                                           :0x0
17:22:44: ####CSD Registe Values####  

17:22:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:22:44: [GetSCRRegisterEntry] Passed
17:22:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:22:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:22:44: Data_Status_After Erases          : 0
17:22:44: CPRM Security Support             : No Security
17:22:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:22:44: Spec. Version                     : Version 3.0X
17:22:44: Extended Security Support         : Extended_Security_Not_Supported
17:22:44: Command Support                   : COMMAND_SUPPORT
17:22:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:22:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625AA50>, <py_sfcl.CommandDataDefinition object at 0x0625A9F0>) , Command count = 6022 ] 
17:22:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:22:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED5A0>, <py_sfcl.CommandDataDefinition object at 0x061EDE70>) , Command count = 6023 ] 
17:22:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:22:44: [ SetBusWidth(0x4) , Command count = 6024 ] 
17:22:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:22:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061ED510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6025 ] 
17:22:44: Protected Area Size 0x28000
17:22:44: Bus Width           2
17:22:44: Secure Mode         0
17:22:44: Speed  Class        4
17:22:44: Perf Move           0
17:22:44: Au Size             9
17:22:44: Erase Size          15
17:22:44: Erase Timeout       1
17:22:44: Erase offset        1
17:22:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:22:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:22:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:22:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6026 ] 
17:22:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:22:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:22:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:22:44: Host Frequency set to 100000 KHz
17:22:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:22:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:44: ####CSD Registe 2.0 Values####
17:22:44: CSD_STRUCTURE                                 :0x1
17:22:44: Reserv1                                       :0x0
17:22:44: Time Access 1 TAAC                            :0xe
17:22:44: Time Access 2 NSAC*100                        :0x0
17:22:44: Data Transfer Rate TRAN_SPEED                 :0xb
17:22:44: Card Command Classess CCC                     :0x5b5
17:22:44: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:44: DSR(driver stage register)  DSR_IMP           :0x0
17:22:44: Reserv2                                       :0x0
17:22:44: Device Size C_SIZE                            :0xedc8
17:22:44: Reserv3                                       :0x0
17:22:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:44: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:44: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:44: Reserv4                                       :0x0
17:22:45: Write Speed Factor R2W_FACTOR                 :0x2
17:22:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:45: FILE_FORMAT_GRP                               :0x0
17:22:45: COPY flag                                     :0x1
17:22:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:45: File_Format                                   :0x0
17:22:45: CRC                                           :0x0
17:22:45: ####CSD Registe Values####  

17:22:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C1E0>, <py_sfcl.CommandDataDefinition object at 0x061EDF30>) , Command count = 6027 ] 
17:22:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:22:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED5D0>, <py_sfcl.CommandDataDefinition object at 0x062843C0>) , Command count = 6028 ] 
17:22:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:22:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:22:45: ###### Running Latency_Overlap_1044MB Test 
17:22:45: [DVTCommonLib]### MultipleWrite_Exp_Hndl :Multiple Write to the card at StartLba:0x0 to EndLba:0x13
17:22:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDE40>, <py_sfcl.CommandDataDefinition object at 0x0625C090>) , Command count = 6029 ] 
17:22:45: CMD25[ WRITE_MULTIPLE_BLOCK ] Passed with R1 type response:[25, 0, 0, 9, 0, 6]
17:22:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED360>, <py_sfcl.CommandDataDefinition object at 0x061ED930>) , Command count = 6030 ] 
17:22:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Rcv', 'READY_FOR_DATA']
17:22:45:   Write Lba:0x00000000  Transfer Length:0x0013 
17:22:45: [DVTCommonLib]### MultipleWrite_Exp_Hndl :Multiple Write Failed from StartLba:0x0 to EndLba:0x13
17:22:45: Failed Running script <module 'CH4204_Latency_Overlap_104MB' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_4_Card_Functional\CH4204_Latency_Overlap_104MB.pyc'> with error AttributeError instance has no attribute 'GetErrorNumber' 
17:22:45: ########################################
17:22:45: ########################################
17:22:45: Stated Running script CH4205_Latency_Sanity_Test 
17:22:45: ########################################
17:22:45: [GO4_globalInitCard]### Switch to Specify Card Type
17:22:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:22:47: Host Frequency set to 25000 KHz
17:22:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:22:47: [GO18_globalSetVolt]### Set Host Voltage value.
17:22:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:22:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x062846C0>, 0x0, True) , Command count = 6031 ] 
17:22:47: [GO18_globalSetVolt]### Host voltage value is set.
17:22:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:22:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x061ED4B0>, 0x0, False) , Command count = 6032 ] 
17:22:47: [GO18_globalSetVolt]### Host voltage value is set.
17:22:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6033 ] 
17:22:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:22:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6034 ] 
17:22:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:22:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:22:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:22:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:22:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:22:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6035 ] 
17:22:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:22:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:22:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625A330>, <py_sfcl.CommandDataDefinition object at 0x0625A660>) , Command count = 6036 ] 
17:22:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:22:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625A540>, <py_sfcl.CommandDataDefinition object at 0x0625AE70>) , Command count = 6037 ] 
17:22:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:22:48: [ SetCardRCA(0x1, 0xD555) , Command count = 6038 ] 
17:22:48: [DVTCommonLib]### Identification :Idenfication of card completed 

17:22:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:22:48: Host Frequency set to 25000 KHz
17:22:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:22:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:48: ####CSD Registe 2.0 Values####
17:22:48: CSD_STRUCTURE                                 :0x1
17:22:48: Reserv1                                       :0x0
17:22:48: Time Access 1 TAAC                            :0xe
17:22:48: Time Access 2 NSAC*100                        :0x0
17:22:48: Data Transfer Rate TRAN_SPEED                 :0x32
17:22:48: Card Command Classess CCC                     :0x5b5
17:22:48: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:48: DSR(driver stage register)  DSR_IMP           :0x0
17:22:48: Reserv2                                       :0x0
17:22:48: Device Size C_SIZE                            :0xedc8
17:22:48: Reserv3                                       :0x0
17:22:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:48: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:48: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:48: Reserv4                                       :0x0
17:22:48: Write Speed Factor R2W_FACTOR                 :0x2
17:22:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:48: FILE_FORMAT_GRP                               :0x0
17:22:48: COPY flag                                     :0x1
17:22:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:48: File_Format                                   :0x0
17:22:48: CRC                                           :0x0
17:22:48: ####CSD Registe Values####  

17:22:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:22:48: [GetSCRRegisterEntry] Passed
17:22:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:22:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:22:48: Data_Status_After Erases          : 0
17:22:48: CPRM Security Support             : No Security
17:22:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:22:48: Spec. Version                     : Version 3.0X
17:22:48: Extended Security Support         : Extended_Security_Not_Supported
17:22:48: Command Support                   : COMMAND_SUPPORT
17:22:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:22:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625A300>, <py_sfcl.CommandDataDefinition object at 0x0625A030>) , Command count = 6039 ] 
17:22:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:22:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C210>, <py_sfcl.CommandDataDefinition object at 0x06284630>) , Command count = 6040 ] 
17:22:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:22:48: [ SetBusWidth(0x4) , Command count = 6041 ] 
17:22:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:22:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062844B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6042 ] 
17:22:48: Protected Area Size 0x28000
17:22:48: Bus Width           2
17:22:48: Secure Mode         0
17:22:48: Speed  Class        4
17:22:48: Perf Move           0
17:22:48: Au Size             9
17:22:48: Erase Size          15
17:22:48: Erase Timeout       1
17:22:48: Erase offset        1
17:22:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:22:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:22:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:22:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6043 ] 
17:22:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:22:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:22:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:22:48: Host Frequency set to 100000 KHz
17:22:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:22:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:48: ####CSD Registe 2.0 Values####
17:22:48: CSD_STRUCTURE                                 :0x1
17:22:48: Reserv1                                       :0x0
17:22:48: Time Access 1 TAAC                            :0xe
17:22:48: Time Access 2 NSAC*100                        :0x0
17:22:48: Data Transfer Rate TRAN_SPEED                 :0xb
17:22:48: Card Command Classess CCC                     :0x5b5
17:22:48: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:48: DSR(driver stage register)  DSR_IMP           :0x0
17:22:48: Reserv2                                       :0x0
17:22:48: Device Size C_SIZE                            :0xedc8
17:22:48: Reserv3                                       :0x0
17:22:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:48: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:48: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:48: Reserv4                                       :0x0
17:22:48: Write Speed Factor R2W_FACTOR                 :0x2
17:22:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:48: FILE_FORMAT_GRP                               :0x0
17:22:48: COPY flag                                     :0x1
17:22:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:48: File_Format                                   :0x0
17:22:48: CRC                                           :0x0
17:22:48: ####CSD Registe Values####  

17:22:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9630>, <py_sfcl.CommandDataDefinition object at 0x061F5AE0>) , Command count = 6044 ] 
17:22:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:22:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052F4540>, <py_sfcl.CommandDataDefinition object at 0x06284720>) , Command count = 6045 ] 
17:22:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:22:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:22:49: ###### Running Latency_Overlap_1044MB Test 
17:22:49: [DVTCommonLib]### MultipleWrite_Exp_Hndl :Multiple Write to the card at StartLba:0x0 to EndLba:0x1
17:22:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5840>, <py_sfcl.CommandDataDefinition object at 0x0625C330>) , Command count = 6046 ] 
17:22:49: CMD25[ WRITE_MULTIPLE_BLOCK ] Passed with R1 type response:[25, 0, 0, 9, 0, 6]
17:22:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C360>, <py_sfcl.CommandDataDefinition object at 0x0625C2D0>) , Command count = 6047 ] 
17:22:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Rcv', 'READY_FOR_DATA']
17:22:49:   Write Lba:0x00000000  Transfer Length:0x0001 
17:22:49: [DVTCommonLib]### MultipleWrite_Exp_Hndl :Multiple Write Failed from StartLba:0x0 to EndLba:0x1
17:22:49: Failed Running script <module 'CH4205_Latency_Sanity_Test' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_4_Card_Functional\CH4205_Latency_Sanity_Test.pyc'> with error AttributeError instance has no attribute 'GetErrorNumber' 
17:22:49: ########################################
17:22:49: ########################################
17:22:49: Stated Running script CH4206_Latency_Stress_Test 
17:22:49: ########################################
17:22:49: [GO4_globalInitCard]### Switch to Specify Card Type
17:22:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:22:51: Host Frequency set to 25000 KHz
17:22:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:22:51: [GO18_globalSetVolt]### Set Host Voltage value.
17:22:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
17:22:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x06284870>, 0x0, True) , Command count = 6048 ] 
17:22:51: [GO18_globalSetVolt]### Host voltage value is set.
17:22:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
17:22:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x061F5780>, 0x0, False) , Command count = 6049 ] 
17:22:51: [GO18_globalSetVolt]### Host voltage value is set.
17:22:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6050 ] 
17:22:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
17:22:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6051 ] 
17:22:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
17:22:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
17:22:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
17:22:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
17:22:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
17:22:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6052 ] 
17:22:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
17:22:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
17:22:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C270>, <py_sfcl.CommandDataDefinition object at 0x0625A3C0>) , Command count = 6053 ] 
17:22:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
17:22:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE9F0>, <py_sfcl.CommandDataDefinition object at 0x061E9960>) , Command count = 6054 ] 
17:22:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
17:22:51: [ SetCardRCA(0x1, 0xD555) , Command count = 6055 ] 
17:22:51: [DVTCommonLib]### Identification :Idenfication of card completed 

17:22:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
17:22:51: Host Frequency set to 25000 KHz
17:22:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
17:22:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:51: ####CSD Registe 2.0 Values####
17:22:51: CSD_STRUCTURE                                 :0x1
17:22:51: Reserv1                                       :0x0
17:22:51: Time Access 1 TAAC                            :0xe
17:22:51: Time Access 2 NSAC*100                        :0x0
17:22:51: Data Transfer Rate TRAN_SPEED                 :0x32
17:22:51: Card Command Classess CCC                     :0x5b5
17:22:51: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:51: DSR(driver stage register)  DSR_IMP           :0x0
17:22:51: Reserv2                                       :0x0
17:22:51: Device Size C_SIZE                            :0xedc8
17:22:51: Reserv3                                       :0x0
17:22:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:51: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:51: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:51: Reserv4                                       :0x0
17:22:51: Write Speed Factor R2W_FACTOR                 :0x2
17:22:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:51: FILE_FORMAT_GRP                               :0x0
17:22:51: COPY flag                                     :0x1
17:22:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:51: File_Format                                   :0x0
17:22:51: CRC                                           :0x0
17:22:51: ####CSD Registe Values####  

17:22:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
17:22:51: [GetSCRRegisterEntry] Passed
17:22:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
17:22:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
17:22:51: Data_Status_After Erases          : 0
17:22:51: CPRM Security Support             : No Security
17:22:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
17:22:51: Spec. Version                     : Version 3.0X
17:22:51: Extended Security Support         : Extended_Security_Not_Supported
17:22:51: Command Support                   : COMMAND_SUPPORT
17:22:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

17:22:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054056F0>, <py_sfcl.CommandDataDefinition object at 0x0625C3F0>) , Command count = 6056 ] 
17:22:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
17:22:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053C6CF0>, <py_sfcl.CommandDataDefinition object at 0x0625C690>) , Command count = 6057 ] 
17:22:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
17:22:51: [ SetBusWidth(0x4) , Command count = 6058 ] 
17:22:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
17:22:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0625A150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6059 ] 
17:22:51: Protected Area Size 0x28000
17:22:51: Bus Width           2
17:22:51: Secure Mode         0
17:22:51: Speed  Class        4
17:22:51: Perf Move           0
17:22:51: Au Size             9
17:22:51: Erase Size          15
17:22:51: Erase Timeout       1
17:22:51: Erase offset        1
17:22:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

17:22:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
17:22:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
17:22:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6060 ] 
17:22:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
17:22:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

17:22:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
17:22:52: Host Frequency set to 100000 KHz
17:22:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
17:22:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 80, 0]
17:22:52: ####CSD Registe 2.0 Values####
17:22:52: CSD_STRUCTURE                                 :0x1
17:22:52: Reserv1                                       :0x0
17:22:52: Time Access 1 TAAC                            :0xe
17:22:52: Time Access 2 NSAC*100                        :0x0
17:22:52: Data Transfer Rate TRAN_SPEED                 :0xb
17:22:52: Card Command Classess CCC                     :0x5b5
17:22:52: Max Read Data Block Length  READ_BL_LEN       :0x9
17:22:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
17:22:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
17:22:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
17:22:52: DSR(driver stage register)  DSR_IMP           :0x0
17:22:52: Reserv2                                       :0x0
17:22:52: Device Size C_SIZE                            :0xedc8
17:22:52: Reserv3                                       :0x0
17:22:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
17:22:52: Erase Sector Size SECTOR_SIZE                 :0x7f
17:22:52: Write Protect Group Size WP_GRP_SIZE          :0x0
17:22:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
17:22:52: Reserv4                                       :0x0
17:22:52: Write Speed Factor R2W_FACTOR                 :0x2
17:22:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
17:22:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
17:22:52: FILE_FORMAT_GRP                               :0x0
17:22:52: COPY flag                                     :0x1
17:22:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
17:22:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x1
17:22:52: File_Format                                   :0x0
17:22:52: CRC                                           :0x0
17:22:52: ####CSD Registe Values####  

17:22:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625AD20>, <py_sfcl.CommandDataDefinition object at 0x0625A8D0>) , Command count = 6061 ] 
17:22:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
17:22:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED6F0>, <py_sfcl.CommandDataDefinition object at 0x062847E0>) , Command count = 6062 ] 
17:22:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
17:22:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


17:22:52: ###### Running Latency_Stress_Test Test 
17:22:52: [DVTCommonLib]### MultipleWrite_Exp_Hndl :Multiple Write to the card at StartLba:0xB459 to EndLba:0xB45B
17:22:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E99C0>, <py_sfcl.CommandDataDefinition object at 0x06265BA0>) , Command count = 6063 ] 
17:22:52: CMD25[ WRITE_MULTIPLE_BLOCK ] Passed with R1 type response:[25, 0, 0, 9, 0, 6]
17:22:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5900>, <py_sfcl.CommandDataDefinition object at 0x061E9690>) , Command count = 6064 ] 
17:22:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Rcv', 'READY_FOR_DATA']
17:22:52:   Write Lba:0x0000B459  Transfer Length:0x0002 
17:22:52: [DVTCommonLib]### MultipleWrite_Exp_Hndl :Multiple Write Failed from StartLba:0xB459 to EndLba:0xB45B
17:22:53: Failed Running script <module 'CH4206_Latency_Stress_Test' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_4_Card_Functional\CH4206_Latency_Stress_Test.pyc'> with error AttributeError instance has no attribute 'GetErrorNumber' 
17:22:53: ########################################
17:22:53: ########################################
17:22:53: The Script <class 'CF4020_Call_All_Latency_4_20.CF4020_Call_All_Latency_4_20'> has 6 error on running 
17:22:53: ########################################
17:22:53: Failed Running script <module 'CF4020_Call_All_Latency_4_20' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_4_Card_Functional\CF4020_Call_All_Latency_4_20.pyc'> with error 
TestFailedError:                                   
   The Script <class 'CF4020_Call_All_Latency_4_20.CF4020_Call_All_Latency_4_20'> has 6 error on running
 
17:22:53: ########################################
17:22:53: ########################################
17:22:53: The Script <class 'CF401_Call_All_Chapter_4.CF401_Call_All_Chapter_4'> has 9 error on running 
17:22:53: ########################################

2016-11-21 17:22:53: 


<<<<<<<<<<<<<<<       PYTHON TRACEBACK       >>>>>>>>>>>>>>>

   File "C:\Program Files\SanDisk\CTF\LIBS\General\AppDriver.py", line 269, in _DoRunApp
     returnData = appMainFunction( *functionArgs, **functionKwArgs )
   File "C:\SDDVT_Python_Package\SDDVT\TestRunner.py", line 121, in Main
     testProcedureObj.RunTestProcedure(randomObj)
   File "C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_4_Card_Functional\CF401_Call_All_Chapter_4.py", line 123, in RunTestProcedure
     self.CF401_Call_All_Chapter_4Obj.Run(randomObj)
   File "C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Chapter_4_Card_Functional\CF401_Call_All_Chapter_4.py", line 95, in Run
     raise TestError.TestFailedError("The Script %s has %d error on running "%(self.__class__,ScriptsStatus))



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  



<<<<<<<<<<<<<<<        ERROR SUMMARY         >>>>>>>>>>>>>>>


 Test reported an error
    The Script <class 'CF<NUM>_Call_All_Chapter_<NUM>.CF<NUM>_Call_All_Chapter_<NUM>'> has <NUM> error on running 



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 TestFailedError:                                   
    The Script <class 'CF401_Call_All_Chapter_4.CF401_Call_All_Chapter_4'> has 9 error on running



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  


<<<<<<<<<<<<<<<       COMMAND HISTORY        >>>>>>>>>>>>>>>

The command history may not capture all of the commands going
to the card so use this information with caution. This is not meant
to be a replacement for a logic or protocol analyzer.

Last 20 commands before error:
      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   6045 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9630>, <py      578.551       276.6   read=  0, write=  0                 0       
   6046 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052F4540>, <py      578.831         6.2   read=  0, write=  0                 0       
   6047 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5840>, <py      578.837         3.1   read=  0, write=  0                 0       
   6048 SetVolt(<py_sfcl.SDVoltage object at 0x061ED4B0>, 0, T)                     581.221        17.9   read=  0, write=  0                 0       
   6049 SetVolt(<py_sfcl.SDVoltage object at 0x0625C630>, 0, F)                     581.239        28.2   read=  0, write=  0                 0       
   6050 CardSetTimeOut(1F4, FA, 64)                                                 581.268         1.7   read=  0, write=  0                 0       
   6051 CardReset(py_sfcl.CARD_MODE.SD, 41FF8000, 1, T, <200/200, 0>, 1, 0, 1,      581.270       207.2   read=  0, write=  0                 C1FF8000
   6052 SwitchVolt_CMD11(T, 0, 5)                                                   581.478         8.4   read=  0, write=  0                 0       
   6053 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625C360>, <py      581.487         4.0   read=  0, write=  0                 0       
   6054 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625A3C0>, <py      581.491         3.5   read=  0, write=  0                 0       
   6055 SetCardRCA(1, D555)                                                         581.495         1.3   read=  0, write=  0                 'Obj'   
   6056 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DE9F0>, <py      581.672         3.1   read=  0, write=  0                 0       
   6057 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054056F0>, <py      581.676         3.6   read=  0, write=  0                 0       
   6058 SetBusWidth(4)                                                              581.679         3.6   read=  0, write=  0                 0       
   6059 CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061E9C60>, <200/20      581.683         4.7   read=  0, write=  0                 0       
   6060 CardSwitchCmd(T, [2,F,F,1,F,F], <40/200, 0>, 40)                            581.689         6.7   read=  0, write=  0                 0       
   6061 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x053C6CF0>, <py      582.198         3.2   read=  0, write=  0                 0       
   6062 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0625AD20>, <py      582.202       229.8   read=  0, write=  0                 0       
   6063 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED6F0>, <py      582.434         6.3   read=  0, write=  0                 0       
   6064 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E99C0>, <py      582.441         3.1   read=  0, write=  0                 0       

      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   ------------------------------------------------------------------------------------------------------------------------------------------------
   20 commands.  Total time 00:09:42


Start LBA: 0xffffffff Transferred block amount: 0xffffffff

Latency data
--------------------------------------------------
Time Interval  Reset        Read         Write        
  0 -   8 :    0            109          51           
  8 -  13 :    1            0            0            
 13 -  17 :    0            0            0            
 17 -  21 :    0            0            0            
 21 -  26 :    0            0            0            
 26 -  30 :    0            0            0            
 30 -  34 :    0            0            0            
 34 -  39 :    0            0            0            
 39 -  43 :    0            0            0            
 43 -  48 :    0            0            0            
 48 -  52 :    0            0            0            
 52 -  56 :    0            0            0            
 56 -  61 :    0            0            0            
 61 -  65 :    0            0            0            
 65 -  69 :    0            0            0            
 69 -  74 :    0            0            0            
 74 -  78 :    0            0            0            
 78 -  82 :    0            0            0            
 82 -  87 :    0            0            0            
 87 -  91 :    0            0            0            
 91 -  96 :    0            0            0            
 96 - 100 :    0            0            0            
100 - 104 :    0            0            0            
104 - 109 :    0            0            0            
109 - 113 :    1            0            0            
113 - 117 :    0            0            0            
117 - 122 :    0            0            0            
122 - 126 :    0            0            0            
126 - 131 :    0            0            0            
131 - 135 :    0            0            0            
135 - 139 :    0            0            0            
139 - 144 :    0            0            0            
144 - 148 :    0            0            0            
148 - 152 :    0            0            0            
152 - 157 :    0            0            0            
157 - 161 :    0            0            0            
161 - 165 :    0            0            0            
165 - 170 :    0            0            0            
170 - 174 :    0            0            0            
174 - 179 :    0            0            0            
179 - 183 :    0            0            0            
183 - 187 :    0            0            0            
187 - 192 :    0            0            0            
192 - 196 :    0            0            0            
196 - 200 :    0            0            0            
200 - 205 :    0            0            0            
205 - 209 :    0            0            0            
209 - 214 :    0            0            0            
214 - 218 :    0            0            0            
--------------------------------------------------


List of commands that took the most time to execute:
----------------------------------------------------
      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA50>, <py           NA 10420.020465   NA                                  37      
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED600>, <py           NA 10419.645267   NA                                  37      
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F59F0>, <py           NA 10419.602404   NA                                  37      
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5FC0>, <py           NA 10419.448159   NA                                  37      
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED8A0>, <py           NA 10419.290292   NA                                  37      
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED1E0>, <py           NA  329.556794   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9DB0>, <py           NA  310.863561   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDB10>, <py           NA  307.864385   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED3C0>, <py           NA  302.896245   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5AB0>, <py           NA  292.270843   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05405750>, <py           NA  292.260581   NA                                  0       
     65 WrLbaNoData(0x5F6694, 0x76, <0x400/0x200, Arb>, py_sfcl.Pattern.ANY_WO           NA  284.916584   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F5DB0>, <py           NA  276.649532   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9630>, <py           NA  276.609084   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED1B0>, <py           NA  270.735999   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060DECC0>, <py           NA  261.038181   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED7B0>, <py           NA  261.030937   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E9F60>, <py           NA  257.850953   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED540>, <py           NA  256.960195   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06261030>, <py           NA  252.679065   NA                                  0       

      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

Last resetup command number: 6063


<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  

TestFailedError error at 00:09:43.


<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 TestFailedError:                                   
    The Script <class 'CF401_Call_All_Chapter_4.CF401_Call_All_Chapter_4'> has 9 error on running



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




   #######    ##     ####  ####    
    ##   #   ####     ##    ##     
    ## #    ##  ##    ##    ##     
    ####    ##  ##    ##    ##     
    ## #    ######    ##    ##     
    ##      ##  ##    ##    ##  ## 
   ####     ##  ##   ####  ####### 
                                   

 

