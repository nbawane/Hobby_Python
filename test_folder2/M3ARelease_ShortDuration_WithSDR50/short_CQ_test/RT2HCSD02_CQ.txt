18:16:06: Sata Disconnector Board found in COM1.
18:16:11: ***************************************************** 

18:16:11: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   * 

18:16:11: *                                                   * 

18:16:11: *  Compatibility with this version is not verified! * 

18:16:11: ***************************************************** 

18:16:13: [ DeviceSetupCompletion() , Command count = 7 ] 
18:16:13: Testname Mapping: ScriptName=[RT2HCSD02_CallAllHighCapacityCardOverHighCapacityHostInSDMode] -> TestId=[RT2HCSD02]
18:16:13: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 8 ] 
18:16:13: [ GetPhysicalChipsInfo() , Command count = 9 ] 
18:16:13: [ GetFileSize(0xEA) , Command count = 10 ] 
18:16:13: [ ReadFile(<0xA00/0x200, Arb>, 0xEA, 0x1) , Command count = 11 ] 
18:16:13: [ GetFileSize(0x16) , Command count = 12 ] 
18:16:13: [ GetCardStatus() , Command count = 13 ] 
18:16:13: [ GetFileSize(0x18) , Command count = 14 ] 
18:16:13: [ ReadFile(<0x1000/0x200, Arb>, 0x18, 0x8) , Command count = 15 ] 
18:16:13: [ GetFileSize(0x15) , Command count = 16 ] 
18:16:13: [ ReadFile(<0x1000/0x200, Arb>, 0x15, 0x1) , Command count = 17 ] 
18:16:15: Can not find revision of File 21 in file 'config.xml' or card is in the ROM mode
18:16:15: [ GetFileSize(0xE) , Command count = 18 ] 
18:16:15: [ ReadFile(<0x1000/0x200, Arb>, 0xE, 0x1) , Command count = 19 ] 
18:16:15: [ GetFileSize(0x1E) , Command count = 20 ] 
18:16:15: [ GetCardStatus() , Command count = 21 ] 
18:16:15: [ GetFileSize(0x21) , Command count = 22 ] 
18:16:15: [ GetCardStatus() , Command count = 23 ] 
18:16:15: [ GetFileSize(0x33) , Command count = 24 ] 
18:16:15: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x33, 0x1) , Command count = 25 ] 
18:16:15: [ GetFileSize(0x1F) , Command count = 26 ] 
18:16:15: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x1F, 0x1) , Command count = 27 ] 
18:16:15: [ GetFileSize(0x2A) , Command count = 28 ] 
18:16:15: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x2A, 0x1) , Command count = 29 ] 
18:16:15: [ ReadCfgConf(<0x1000/0x200, Spc, pat:0x0>, 0x1) , Command count = 30 ] 
18:16:15: [ ReadFirmwareParameter(<0x1000/0x200, Spc, pat:0x0>, 0x2) , Command count = 31 ] 
18:16:15: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_BE) , Command count = 32 ] 
18:16:15: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_PRODUCT) , Command count = 33 ] 
18:16:15: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_FE_SD) , Command count = 34 ] 
18:16:15: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, 0x0) , Command count = 35 ] 
18:16:16: [ GetFileSize(0x33) , Command count = 36 ] 
18:16:16: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 37 ] 
18:16:16: [ GetFileSize(0x33) , Command count = 38 ] 
18:16:16: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 39 ] 
18:16:16: [ GetIpVersionInfo() , Command count = 40 ] 
18:16:16: [ GetPhysicalChipsInfo() , Command count = 41 ] 
18:16:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066FF360>, <0x200/0x200, Arb>) , Command count = 42 ] 
18:16:16: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 43 ] 

<<<<<<<<<<<<<<<         TEST HEADER          >>>>>>>>>>>>>>>

Application                :  TestRunner.py
Application version        :  SD_DVT_CQ_Spec 6.0.0
Application folder         :  C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT
Command line               :  --protocol=sd --sdtestid=RT2HCSD02 --dbconnection=none --adapter=SD05412_9ADT --sdConfiguration=SDR50 --projectconfig=C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB --paramsfile=C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB\Colibri_SD_HC_I059_SDR104_Prem_C10_U1.txt --logfilename=C:\Results\RT2HCSD02_CQ.txt --CQ=1
Protocol                   :  sd
Serial number (CInfo)      :  sdin1091
Adapter                    :  SDR Tester (S#: SD05412_9ADT): (Slot#:0)
Adapter serial number      :  SD05412_9ADT
Adapter type               :  USD
Capacity                   :  32G
Firmware revision          :  6RB C030
Flashware revision         :  6RB C030
IP Version Info            :  '' 01.04.00... ID 0x20
                           :  '' 00.01.00... ID 0x10
Memory ID                  :  453CA9A27A510B140000000000000000
Controller                 :  81
Trim settings              :  <Unavailable>
Model revision             :  <Unavailable>
Stream name                :  <Unavailable>
FE IP                      :  1
Romware revision           :  RRBZ1152
Architecture               :  Gen 6
Model                      :  SanDisk   COLIBRI
Memory type                :  Unknown Device Type-2LC x 1
ASIC id                    :  81
Controller type            :  Unknown Controller   UMC-J
Driver version (actual)    :  10.0.0.1 (0x a.0.0.1)
Driver version (released)  :  7.1.4.3 (0x 7.1.4.3)
Date and time              :  2016-11-28 18:16:16
Host name                  :  SDDVT_Test2
Host IP address            :  10.65.153.121
Operating system           :  Microsoft Windows [Version 6.1.7601] Service Pack 1
SanDisk Python version     :  1.17.5rc3
CTF/PySFCL build number    :  1.3.217491.217491
PySFCL version             :  1.3.217491
CTF version                :  1.3
Python version             :  2.4.2
Project Name(Validation)   :  <None>


<<<<<<<<<<<<<<<      SFCL CONFIGURATION      >>>>>>>>>>>>>>>

[SD enumeration]
cmdtiming=0
useRelay=0
autocompare=0
relayPolarity=1
relaySleep=500
measureCmdLatency=1
logicalChunkSize=0
diagDisabled=0
diagCmdTimeout=800
useVddf=on
nethostloglevel=
nethostautoCompare=on
CmdManShowProgress=off
nethostsendtimeout=240000
nethostreceivetimeout=240000
countOfRetryCmdIfCrc=3
enableOORPatch=
lbaForSctpCommands=0x100
subProtocol=0
doDle=0
diagnosticChunkSize=128
logmsgformat=timeMessage
logtimeformat=time
relaySlot=0
unloadDll=on
hardTimeoutUnloadDll=on
minDuration=7200
remoteDevice=
skipProduction=0
ishighspeedmode=0
highfreqinhz=500
modeldelaytimeindiagnostic=0
cqDataTransferPollingShortInterval=1000
cqDataStatusPollingLongInterval=1800000
sataPort0ToRelaySlot=0
sataPort1ToRelaySlot=0
sataPort2ToRelaySlot=0
sataPort3ToRelaySlot=0
relayToComportMapping=1
sdbToComportMapping=1
sataAdapterPort0=0
sataAdapterPort1=0
sataAdapterPort2=0
sataAdapterPort3=0
sataPort0ToMubIndx=1
sataPort1ToMubIndx=1
sataPort2ToMubIndx=1
sataPort3ToMubIndx=1

[Common]
enableChunkTraces=off
enablePythonTraceback=1
sctpPhaseDelay=0
printcommandcount=on
debugfilepath=
initXMLPath=\\regression.lab.sandisk.com\shared\configurations
delayBeforePwrCycle=0
delayAfterPwrCycle=0
reportCountStatistics=1
reportPackage=0
sfclConfig=Common

<<<<<<<<<<<<<<<          CARD INFO           >>>>>>>>>>>>>>>

Number Of LBAs  :  0x3b72400
Card Is Locked  :  No
Secure Area     :  0x28000
Card Secure     :  No
WP map          :

<<<<<<<<<<<<<<<           CID INFO           >>>>>>>>>>>>>>>

Manufacturer Id  :  0x3
Card/BGA         :  0
Application Id   :  0x5344
ProductName      :  AGGCD
ProductRev       :  0x80
SerialNumber     :  0x23482900
Reserved         :  0x23482900
Year             :  2000
Month            :  11
CRC Check Sum    :  0x5
Not Used         :

<<<<<<<<<<<<<<<           CSD INFO           >>>>>>>>>>>>>>>

CSD Structure                     :  0x1
reserv. 1                         :  0x0
TAAC                              :  0xe
NSAC*100                          :  0x0
data transfer rate                :  0x32
card command classes CCC          :  0x5b5
max. read data Blk. length        :  0x9
partial blocks for read allowed   :  0x0
write block misalignment          :  0x0
read block misalignment           :  0x0
DSR implemented                   :  0x0
reserved 2                        :  0x0
device size                       :  0xedc8
Reserv3                           :  0x0
SD Erase Blk Len En               :  0x1
SD Sec Size                       :  0x7f
write protect group size          :  0x0
write protect group enable        :  0x0
Reserv4                           :  0x0
write speed factor                :  0x2
max. write data blk. length       :  0x9
partial blocks for write allowed  :  0x0
File Format Group                 :  0x0
copy flag(OTP)                    :  0x1
permanent write protection        :  0x0
temporary write protection        :  0x0
File Format                       :  0x0
CRC                               :  0x0
<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

<<<<<<<<<<<<<<<    COMMAND LINE ARGUMENTS    >>>>>>>>>>>>>>>


Processed command-line options:
   --protocol                                       : sd
   --adapterspecifier                               : ain:-1,desc:SD05412_9ADT
   --extcmdset                                      : FBCC
   --sdtestid                                       : RT2HCSD02
   --sdconfiguration                                : SDR50
   --cyclecount                                     : 1
   --testduration                                   : 20h
   --writereadpercent                               : 100
   --paramsfile                                     : 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB\Colibri_SD_HC_I059_SDR104_Prem_C10_U1.txt'
   --randomseed                                     : 75441718763
   --projectconfig                                  : C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB
   --logfiledir                                     : C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\DvtTestLogs
   --hostlog                                        : 0
   --cq                                             : 1
   --dbconnection                                   : 'none'
   --temperature                                    : 25
   --voltage                                        : 0.00
   --logfilename                                    : 'C:\Results\RT2HCSD02_CQ.txt'
   --logtostdout                                    : Y
   --overwriteexistinglogfile                       : Y
   --logrotationspecifier                           : NoRotation
   --loglevel                                       : <4, INFO>
   --testcomment                                    : None
   --dbproject                                      : CTFW_QA
   --mdfwprojectid                                  : None
   --mdconfigid                                     : None
   --mdtestid                                       : None
   --valid                                          : True
   --waitTime                                       : None
   --jitter                                         : F
   --testlimits                                     : <None>-<None>
   --LabID                                          : None
   --DutID                                          : None
   --LaunchId                                       : None
   --TestQueueId                                    : None
   --xfermode                                       : <N>
   --networkperiod                                  : <N>
   --networkpath                                    : <N>
   --dumpfile                                       : 
   --printcommandcount                              : N
   --debugfilepath                                  : <N>
   --chpfilename                                    : <N>
   --enablecmdhistory                               : Y
   --cmdhistextfilename                             : <N>
   --cmdhistcsvfilename                             : <N>
   --histdisplaysizes                               : 0,250
   --stoponcommands                                 : <N>
   --notifyemailid                                  : <N>
   --spyoncommands                                  : <N>
   --notifyoncommands                               : <N>
   --CmdManShowProgress                             : 'off'
   --enablePowerCycle                               : '1'
   --measureCmdLatency                              : '1'
   --useVddf                                        : 'on'
   --gvi                                            : 'off'
   --gviOnFly                                       : 'off'
   --gviEncryption                                  : '0'
   --remoteDevice                                   : ''
   --skipProduction                                 : '0'
   --forceMultipleMode                              : 'off'
   --countOfRetryCmdIfCrc                           : '3'
   --enableOORPatch                                 : 'on'
   --connectonly                                    : 'off'
   --nethostautocompare                             : 'on'
   --nethostpowercycle                              : '0'
   --nethostloglevel                                : '3'
   --nethostlogconsole                              : '0'
   --nethostsanitychecks                            : '0'
   --nethostsendtimeout                             : '240000'
   --nethostreceivetimeout                          : '240000'
   --subProtocol                                    : '0'
   --useVccq                                        : '3.3'
   --maxprotocoloverhead                            : '0'
   --maxprotocoltimingmode                          : '0'
   --isHighSpeedMode                                : '0'
   --highFreqInHz                                   : '500'
   --doDle                                          : '0'
   --lbaForSctpCommands                             : '0x100'
   --cmdfilename                                    : ''
   --cmdtofilewrites                                : '0'
   --cmdtiming                                      : '0'
   --cmdtocsv                                       : '0'
   --logicalChunkSize                               : '0'
   --diagnosticChunkSize                            : '128'
   --readChunkSize                                  : '0'
   --writeChunkSize                                 : '0'
   --useRelay                                       : '0'
   --sataPort0ToRelaySlot                           : '0'
   --sataPort1ToRelaySlot                           : '0'
   --sataPort2ToRelaySlot                           : '0'
   --sataPort3ToRelaySlot                           : '0'
   --relayToComportMapping                          : '1'
   --useSDB                                         : '0'
   --sdbToComportMapping                            : '1'
   --sataAdapterPort0                               : '0'
   --sataAdapterPort1                               : '0'
   --sataAdapterPort2                               : '0'
   --sataAdapterPort3                               : '0'
   --relayPolarity                                  : '1'
   --relaySleep                                     : '500'
   --diagCmdTimeout                                 : '800'
   --diagDisabled                                   : '0'
   --hardTimeout                                    : '30000'
   --commandscriptfolder                            : ''
   --commandscriptstart                             : '0'
   --logmsgformat                                   : 'timeMessage'
   --logtimeformat                                  : 'time'
   --relaySlot                                      : '0'
   --atbuRelaySlot                                  : '3'
   --diskCacheStore                                 : ''
   --stopOnStart                                    : '0'
   --notifyserver                                   : ''
   --notifyretry                                    : '2'
   --notifytimeout                                  : '60'
   --failonnotifytimeout                            : '0'
   --revertactions                                  : ''
   --timechangedetection                            : '0'
   --timechangecondition                            : '600'
   --timechangecheckinterval                        : '1000'
   --inputmonitor                                   : '1'
   --logtimeprecision                               : '2'
   --nonSndkDevEnumeration                          : '0'
   --modelini                                       : 'C:\Program Files\SanDisk\CTF\Dlls\model.ini'
   --sfclini                                        : 'C:\Program Files\SanDisk\CTF\Dlls\sfcl.ini'
   --relayForceDownload                             : 'off'
   --powercycleoninit                               : 'off'
   --stopBgOperationOnFail                          : 'off'
   --autocompare                                    : '0'
   --autocompareRandomseed                          : '12345678'
   --modeldelaytimeindiagnostic                     : '0'
   --ForceDownloadMechanism                         : '0'
   --EnableUARTDebugLog                             : '0'
   --UARTBaudRate                                   : '230400'
   --SerialUARTToCom                                : '0'
   --UARTDebugFilePath                              : ''
   --sataPort0ToMubIndx                             : '1'
   --sataPort1ToMubIndx                             : '1'
   --sataPort2ToMubIndx                             : '1'
   --sataPort3ToMubIndx                             : '1'
   --fclStep                                        : '0'
   --fclCollectReads                                : '0'
   --fclCollectWrites                               : '0'
   --fclCollectErases                               : '0'
   --fclCollectAOMReads                             : '0'
   --fclAomBase                                     : '10'
   --aomStep                                        : '0'
   --aomMapFile                                     : '0'
   --fclAomSaveFilesStep                            : '1000'
   --gfa                                            : '0'
   --atbuSoftwareLocation                           : ''
   --atbuMemoryName                                 : ''
   --atbuProfilesLocation                           : ''
   --atbuThresholdValue                             : '0'
   --atbuTransitionTime                             : '0'
   --atbuDcCompensation                             : ''


<<<<<<<<<<<<<<< RUNNING TEST: RT2HCSD02_CallAllHighCapacityCardOverHighCapacityHostInSDMode >>>>>>>>>>>>>>>



18:16:16: [RT2HCSD02_CallAllHighCapacityCardOverHighCapacityHostInSDMode.py]###### Test to run CallAllHighCapacityCardOverHighCapacityHostInSDMode
18:16:16: MaxLba of the card: 0x3B72400 
18:16:18: [GO7_globalPreTestingSettings]### Default Initialization Start
18:16:18: [DVTCommonLib]###  SwitchHostVoltageRegion called
18:16:18: [ SwitchHostVoltageRegion(False) , Command count = 44 ] 
18:16:18: [DVTCommonLib]###  SwitchHostVoltageRegion Completed 

18:16:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 45 ] 
18:16:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 46 ] 
18:16:20: [ CardInit() , Command count = 47 ] 
18:16:20: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 48 ] 

<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

18:16:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:20: ####CSD Registe 2.0 Values####
18:16:20: CSD_STRUCTURE                                 :0x1
18:16:20: Reserv1                                       :0x0
18:16:20: Time Access 1 TAAC                            :0xe
18:16:20: Time Access 2 NSAC*100                        :0x0
18:16:20: Data Transfer Rate TRAN_SPEED                 :0x32
18:16:20: Card Command Classess CCC                     :0x5b5
18:16:20: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:20: DSR(driver stage register)  DSR_IMP           :0x0
18:16:20: Reserv2                                       :0x0
18:16:20: Device Size C_SIZE                            :0xedc8
18:16:20: Reserv3                                       :0x0
18:16:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:20: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:20: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:20: Reserv4                                       :0x0
18:16:20: Write Speed Factor R2W_FACTOR                 :0x2
18:16:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:20: FILE_FORMAT_GRP                               :0x0
18:16:20: COPY flag                                     :0x1
18:16:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:20: File_Format                                   :0x0
18:16:20: CRC                                           :0x0
18:16:20: ####CSD Registe Values####  

18:16:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:16:20: ProductSerialNumber = 0x23482900
18:16:20: CardMaximumLBA      = 0x3b72400
18:16:20: CardCapacity        = 32G
18:16:20: Is card secure      = 0
18:16:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:16:20: [GO7_globalPreTestingSettings]### Default Initialization Completed 


18:16:20: Stated Running SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode RT2HCSD02_CallAllHighCapacityCardOverHighCapacityHostInSDMode Scripts 

18:16:20: ########################################
18:16:20: Stated Running script RT2HCSD09_1_1_1_1 
18:16:20: ########################################
18:16:20: [RT2HCSD09_1_1_1_1]###### Set Card Time Out values test. 
18:16:27: FPGA Image Downloaded Is:C:\Program Files\SanDisk\CTF\FPGA\SD_CQ_SDR2_2-20-00-0002.bin
18:16:27: [GO4_globalInitCard]### Switch to Specify Card Type
18:16:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:29: Host Frequency set to 25000 KHz
18:16:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:29: [GO18_globalSetVolt]### Set Host Voltage value.
18:16:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:16:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x067BAD20>, 0x0, True) , Command count = 49 ] 
18:16:29: [GO18_globalSetVolt]### Host voltage value is set.
18:16:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:16:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x067BAF60>, 0x0, False) , Command count = 50 ] 
18:16:29: [GO18_globalSetVolt]### Host voltage value is set.
18:16:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 51 ] 
18:16:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 52 ] 
18:16:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:16:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:16:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 53 ] 
18:16:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:16:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BAF00>, <py_sfcl.CommandDataDefinition object at 0x067BAE40>) , Command count = 54 ] 
18:16:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BACC0>, <py_sfcl.CommandDataDefinition object at 0x067BABD0>) , Command count = 55 ] 
18:16:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:16:29: [ SetCardRCA(0x1, 0xD555) , Command count = 56 ] 
18:16:30: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:30: Host Frequency set to 25000 KHz
18:16:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:30: ####CSD Registe 2.0 Values####
18:16:30: CSD_STRUCTURE                                 :0x1
18:16:30: Reserv1                                       :0x0
18:16:30: Time Access 1 TAAC                            :0xe
18:16:30: Time Access 2 NSAC*100                        :0x0
18:16:30: Data Transfer Rate TRAN_SPEED                 :0x32
18:16:30: Card Command Classess CCC                     :0x5b5
18:16:30: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:30: DSR(driver stage register)  DSR_IMP           :0x0
18:16:30: Reserv2                                       :0x0
18:16:30: Device Size C_SIZE                            :0xedc8
18:16:30: Reserv3                                       :0x0
18:16:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:30: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:30: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:30: Reserv4                                       :0x0
18:16:30: Write Speed Factor R2W_FACTOR                 :0x2
18:16:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:30: FILE_FORMAT_GRP                               :0x0
18:16:30: COPY flag                                     :0x1
18:16:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:30: File_Format                                   :0x0
18:16:30: CRC                                           :0x0
18:16:30: ####CSD Registe Values####  

18:16:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:30: [GetSCRRegisterEntry] Passed
18:16:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:30: Data_Status_After Erases          : 0
18:16:30: CPRM Security Support             : No Security
18:16:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:30: Spec. Version                     : Version 3.0X
18:16:30: Extended Security Support         : Extended_Security_Not_Supported
18:16:30: Command Support                   : COMMAND_SUPPORT
18:16:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BA570>, <py_sfcl.CommandDataDefinition object at 0x067BA180>) , Command count = 57 ] 
18:16:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:16:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BAF90>, <py_sfcl.CommandDataDefinition object at 0x067C1030>) , Command count = 58 ] 
18:16:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:16:30: [ SetBusWidth(0x4) , Command count = 59 ] 
18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x067C1150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 60 ] 
18:16:30: Protected Area Size 0x28000
18:16:30: Bus Width           2
18:16:30: Secure Mode         0
18:16:30: Speed  Class        4
18:16:30: Perf Move           0
18:16:30: Au Size             9
18:16:30: Erase Size          15
18:16:30: Erase Timeout       1
18:16:30: Erase offset        1
18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:16:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:16:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 61 ] 
18:16:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:16:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:16:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:16:30: Host Frequency set to 100000 KHz
18:16:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:16:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:30: ####CSD Registe 2.0 Values####
18:16:30: CSD_STRUCTURE                                 :0x1
18:16:30: Reserv1                                       :0x0
18:16:30: Time Access 1 TAAC                            :0xe
18:16:30: Time Access 2 NSAC*100                        :0x0
18:16:30: Data Transfer Rate TRAN_SPEED                 :0xb
18:16:30: Card Command Classess CCC                     :0x5b5
18:16:30: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:30: DSR(driver stage register)  DSR_IMP           :0x0
18:16:30: Reserv2                                       :0x0
18:16:30: Device Size C_SIZE                            :0xedc8
18:16:30: Reserv3                                       :0x0
18:16:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:30: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:30: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:30: Reserv4                                       :0x0
18:16:30: Write Speed Factor R2W_FACTOR                 :0x2
18:16:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:30: FILE_FORMAT_GRP                               :0x0
18:16:30: COPY flag                                     :0x1
18:16:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:30: File_Format                                   :0x0
18:16:30: CRC                                           :0x0
18:16:30: ####CSD Registe Values####  

18:16:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1510>, <py_sfcl.CommandDataDefinition object at 0x067C1330>) , Command count = 62 ] 
18:16:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:16:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1390>, <py_sfcl.CommandDataDefinition object at 0x067C13C0>) , Command count = 63 ] 
18:16:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x067C1450>, <0x200/0x200, Spc, pat:0x0>) , Command count = 64 ] 
18:16:30: Protected Area Size 0x28000
18:16:30: Bus Width           2
18:16:30: Secure Mode         0
18:16:30: Speed  Class        4
18:16:30: Perf Move           0
18:16:30: Au Size             9
18:16:30: Erase Size          15
18:16:30: Erase Timeout       1
18:16:30: Erase offset        1
18:16:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:16:30: [RT2HCSD09_1_1_1_1.py]CALL : globalSetTO
18:16:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 65 ] 
18:16:30: [RT2HCSD09_1_1_1_1.py]CALL : globalSetVolt
18:16:30: [GO18_globalSetVolt]### Set Host Voltage value.
18:16:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:16:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x067C14E0>, 0x0, True) , Command count = 66 ] 
18:16:30: [GO18_globalSetVolt]### Host voltage value is set.
18:16:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:16:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x067C1540>, 0x0, False) , Command count = 67 ] 
18:16:30: [GO18_globalSetVolt]### Host voltage value is set.
18:16:30: [RT2HCSD09_1_1_1_1.py]CALL : globalSetLSHostFreq
18:16:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:30: Host Frequency set to 25000 KHz
18:16:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:30: [RT2HCSD09_1_1_1_1]*********Soft Reset*********
18:16:30: [RT2HCSD09_1_1_1_1]RESET card and IDENTIFICATION of the card 

18:16:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 68 ] 
18:16:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:16:30: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:16:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:30: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:16:30: Failed Running script <module 'RT2HCSD09_1_1_1_1' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD09_1_1_1_1.py'> with error 
TestFailedError:                                   
   [RT2HCSD09_1_1_1_1] Compare error on card response
 
18:16:30: ########################################
18:16:30: ########################################
18:16:30: Stated Running script RT2HCSD24_1_1_1_2 
18:16:30: ########################################
18:16:30: [RT2HCSD24_1_1_1_2.py]###### Set Card Time Out values test. 
18:16:30: [GO4_globalInitCard]### Switch to Specify Card Type
18:16:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:32: Host Frequency set to 25000 KHz
18:16:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:32: [GO18_globalSetVolt]### Set Host Voltage value.
18:16:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:16:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x067C1D50>, 0x0, True) , Command count = 69 ] 
18:16:32: [GO18_globalSetVolt]### Host voltage value is set.
18:16:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:16:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x067C1C00>, 0x0, False) , Command count = 70 ] 
18:16:32: [GO18_globalSetVolt]### Host voltage value is set.
18:16:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 71 ] 
18:16:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 72 ] 
18:16:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:16:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:16:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 73 ] 
18:16:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:16:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1D20>, <py_sfcl.CommandDataDefinition object at 0x067C1BD0>) , Command count = 74 ] 
18:16:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1DB0>, <py_sfcl.CommandDataDefinition object at 0x067C1EA0>) , Command count = 75 ] 
18:16:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:16:33: [ SetCardRCA(0x1, 0xD555) , Command count = 76 ] 
18:16:33: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:33: Host Frequency set to 25000 KHz
18:16:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:33: ####CSD Registe 2.0 Values####
18:16:33: CSD_STRUCTURE                                 :0x1
18:16:33: Reserv1                                       :0x0
18:16:33: Time Access 1 TAAC                            :0xe
18:16:33: Time Access 2 NSAC*100                        :0x0
18:16:33: Data Transfer Rate TRAN_SPEED                 :0x32
18:16:33: Card Command Classess CCC                     :0x5b5
18:16:33: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:33: DSR(driver stage register)  DSR_IMP           :0x0
18:16:33: Reserv2                                       :0x0
18:16:33: Device Size C_SIZE                            :0xedc8
18:16:33: Reserv3                                       :0x0
18:16:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:33: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:33: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:33: Reserv4                                       :0x0
18:16:33: Write Speed Factor R2W_FACTOR                 :0x2
18:16:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:33: FILE_FORMAT_GRP                               :0x0
18:16:33: COPY flag                                     :0x1
18:16:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:33: File_Format                                   :0x0
18:16:33: CRC                                           :0x0
18:16:33: ####CSD Registe Values####  

18:16:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:33: [GetSCRRegisterEntry] Passed
18:16:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:33: Data_Status_After Erases          : 0
18:16:33: CPRM Security Support             : No Security
18:16:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:33: Spec. Version                     : Version 3.0X
18:16:33: Extended Security Support         : Extended_Security_Not_Supported
18:16:33: Command Support                   : COMMAND_SUPPORT
18:16:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1C30>, <py_sfcl.CommandDataDefinition object at 0x067C1F90>) , Command count = 77 ] 
18:16:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1C90>, <py_sfcl.CommandDataDefinition object at 0x067C1F00>) , Command count = 78 ] 
18:16:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:16:33: [ SetBusWidth(0x4) , Command count = 79 ] 
18:16:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x067C7030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 80 ] 
18:16:33: Protected Area Size 0x28000
18:16:33: Bus Width           2
18:16:33: Secure Mode         0
18:16:33: Speed  Class        4
18:16:33: Perf Move           0
18:16:33: Au Size             9
18:16:33: Erase Size          15
18:16:33: Erase Timeout       1
18:16:33: Erase offset        1
18:16:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:16:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:16:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 81 ] 
18:16:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:16:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:16:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:16:33: Host Frequency set to 100000 KHz
18:16:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:16:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:33: ####CSD Registe 2.0 Values####
18:16:33: CSD_STRUCTURE                                 :0x1
18:16:33: Reserv1                                       :0x0
18:16:33: Time Access 1 TAAC                            :0xe
18:16:33: Time Access 2 NSAC*100                        :0x0
18:16:33: Data Transfer Rate TRAN_SPEED                 :0xb
18:16:33: Card Command Classess CCC                     :0x5b5
18:16:33: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:33: DSR(driver stage register)  DSR_IMP           :0x0
18:16:33: Reserv2                                       :0x0
18:16:33: Device Size C_SIZE                            :0xedc8
18:16:33: Reserv3                                       :0x0
18:16:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:33: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:33: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:33: Reserv4                                       :0x0
18:16:33: Write Speed Factor R2W_FACTOR                 :0x2
18:16:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:33: FILE_FORMAT_GRP                               :0x0
18:16:33: COPY flag                                     :0x1
18:16:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:33: File_Format                                   :0x0
18:16:33: CRC                                           :0x0
18:16:33: ####CSD Registe Values####  

18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7270>, <py_sfcl.CommandDataDefinition object at 0x067C7090>) , Command count = 82 ] 
18:16:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C70F0>, <py_sfcl.CommandDataDefinition object at 0x067C7120>) , Command count = 83 ] 
18:16:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:16:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:16:33: [RT2HCSD24_1_1_1_2.py]CALL : globalSetTO
18:16:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 84 ] 
18:16:33: [RT2HCSD24_1_1_1_2.py]CALL : globalSetVolt
18:16:33: [GO18_globalSetVolt]### Set Host Voltage value.
18:16:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:16:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x067C71E0>, 0x0, True) , Command count = 85 ] 
18:16:33: [GO18_globalSetVolt]### Host voltage value is set.
18:16:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:16:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x067C7210>, 0x0, False) , Command count = 86 ] 
18:16:33: [GO18_globalSetVolt]### Host voltage value is set.
18:16:33: [RT2HCSD24_1_1_1_2.py]CALL : globalSetResetFreq
18:16:33: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
18:16:33: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
18:16:33: [RT2HCSD24_1_1_1_2.py]***Test Sequential of CMD 8' s during Soft Reset***
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C72A0>, <py_sfcl.CommandDataDefinition object at 0x067C72D0>) , Command count = 87 ] 
18:16:33: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7330>, <py_sfcl.CommandDataDefinition object at 0x067C7360>) , Command count = 88 ] 
18:16:33: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 170, 66]
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C73C0>, <py_sfcl.CommandDataDefinition object at 0x067C73F0>) , Command count = 89 ] 
18:16:33: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 170, 66]
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7450>, <py_sfcl.CommandDataDefinition object at 0x067C7480>) , Command count = 90 ] 
18:16:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C74E0>, <py_sfcl.CommandDataDefinition object at 0x067C7510>) , Command count = 91 ] 
18:16:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 65, 255, 128, 0, 255]
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7570>, <py_sfcl.CommandDataDefinition object at 0x067C75A0>) , Command count = 92 ] 
18:16:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7600>, <py_sfcl.CommandDataDefinition object at 0x067C7630>) , Command count = 93 ] 
18:16:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 64, 255, 128, 0, 255]
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7690>, <py_sfcl.CommandDataDefinition object at 0x067C76C0>) , Command count = 94 ] 
18:16:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7720>, <py_sfcl.CommandDataDefinition object at 0x067C7750>) , Command count = 95 ] 
18:16:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 192, 255, 128, 0, 255]
18:16:33: [ SetCardCap(True) , Command count = 96 ] 
18:16:33: [ SetSdMmcCardMode(0x2, True) , Command count = 97 ] 
18:16:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C78D0>, <py_sfcl.CommandDataDefinition object at 0x067C7900>) , Command count = 98 ] 
18:16:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7960>, <py_sfcl.CommandDataDefinition object at 0x067C7990>) , Command count = 99 ] 
18:16:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:16:33: [ SetCardRCA(0x1, 0xD555) , Command count = 100 ] 
18:16:33: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:33: [RT2HCSD24_1_1_1_2.py]CALL : globalSetLSHostFreq
18:16:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:33: Host Frequency set to 25000 KHz
18:16:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:33: [RT2HCSD24_1_1_1_2.py]CALL : AddressForWriteRead
18:16:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:16:33: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:16:33: [ SetBusWidth(0x1) , Command count = 101 ] 
18:16:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:33: ####CSD Registe 2.0 Values####
18:16:33: CSD_STRUCTURE                                 :0x1
18:16:33: Reserv1                                       :0x0
18:16:33: Time Access 1 TAAC                            :0xe
18:16:33: Time Access 2 NSAC*100                        :0x0
18:16:33: Data Transfer Rate TRAN_SPEED                 :0x32
18:16:33: Card Command Classess CCC                     :0x5b5
18:16:33: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:33: DSR(driver stage register)  DSR_IMP           :0x0
18:16:33: Reserv2                                       :0x0
18:16:33: Device Size C_SIZE                            :0xedc8
18:16:33: Reserv3                                       :0x0
18:16:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:33: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:33: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:33: Reserv4                                       :0x0
18:16:33: Write Speed Factor R2W_FACTOR                 :0x2
18:16:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:33: FILE_FORMAT_GRP                               :0x0
18:16:33: COPY flag                                     :0x1
18:16:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:33: File_Format                                   :0x0
18:16:33: CRC                                           :0x0
18:16:33: ####CSD Registe Values####  

18:16:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:16:33: ProductSerialNumber = 0x23482900
18:16:33: CardMaximumLBA      = 0x3b72400
18:16:33: CardCapacity        = 32G
18:16:33: Is card secure      = 0
18:16:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:16:33: [DVTCommonLib]###  LogicalWrite called
18:16:35: [ WriteLba(0x165C332, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 102 ] 
18:16:35: [DVTCommonLib]###  LogicalWrite Completed 

18:16:35: [DVTCommonLib]###  LogicalRead called
18:16:36: [ ReadLba(0x165C332, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 103 ] 
18:16:36: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:16:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:16:36: [RT2HCSD24_1_1_1_2.py]***Test Sequential of CMD 8' s during Power Cycle Reset***
18:16:36: [RT2HCSD24_1_1_1_2.py]POWER : OFF and ON
18:16:38: [RT2HCSD24_1_1_1_2.py]CALL : globalSetResetFreq
18:16:38: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
18:16:39: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067CDF00>, <py_sfcl.CommandDataDefinition object at 0x067CDF30>) , Command count = 104 ] 
18:16:39: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 170, 66]
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067CDFC0>, <py_sfcl.CommandDataDefinition object at 0x06819030>) , Command count = 105 ] 
18:16:39: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 170, 66]
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819090>, <py_sfcl.CommandDataDefinition object at 0x068190C0>) , Command count = 106 ] 
18:16:39: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 170, 66]
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819120>, <py_sfcl.CommandDataDefinition object at 0x06819150>) , Command count = 107 ] 
18:16:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068191B0>, <py_sfcl.CommandDataDefinition object at 0x068191E0>) , Command count = 108 ] 
18:16:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819240>, <py_sfcl.CommandDataDefinition object at 0x06819270>) , Command count = 109 ] 
18:16:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068192D0>, <py_sfcl.CommandDataDefinition object at 0x06819300>) , Command count = 110 ] 
18:16:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819360>, <py_sfcl.CommandDataDefinition object at 0x06819390>) , Command count = 111 ] 
18:16:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068193F0>, <py_sfcl.CommandDataDefinition object at 0x06819420>) , Command count = 112 ] 
18:16:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819480>, <py_sfcl.CommandDataDefinition object at 0x068194B0>) , Command count = 113 ] 
18:16:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819510>, <py_sfcl.CommandDataDefinition object at 0x06819540>) , Command count = 114 ] 
18:16:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068195A0>, <py_sfcl.CommandDataDefinition object at 0x068195D0>) , Command count = 115 ] 
18:16:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819630>, <py_sfcl.CommandDataDefinition object at 0x06819660>) , Command count = 116 ] 
18:16:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068196C0>, <py_sfcl.CommandDataDefinition object at 0x068196F0>) , Command count = 117 ] 
18:16:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819750>, <py_sfcl.CommandDataDefinition object at 0x06819780>) , Command count = 118 ] 
18:16:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068197E0>, <py_sfcl.CommandDataDefinition object at 0x06819810>) , Command count = 119 ] 
18:16:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819870>, <py_sfcl.CommandDataDefinition object at 0x068198A0>) , Command count = 120 ] 
18:16:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819900>, <py_sfcl.CommandDataDefinition object at 0x06819930>) , Command count = 121 ] 
18:16:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819990>, <py_sfcl.CommandDataDefinition object at 0x068199C0>) , Command count = 122 ] 
18:16:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819A20>, <py_sfcl.CommandDataDefinition object at 0x06819A50>) , Command count = 123 ] 
18:16:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819AB0>, <py_sfcl.CommandDataDefinition object at 0x06819AE0>) , Command count = 124 ] 
18:16:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819B40>, <py_sfcl.CommandDataDefinition object at 0x06819B70>) , Command count = 125 ] 
18:16:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819BD0>, <py_sfcl.CommandDataDefinition object at 0x06819C00>) , Command count = 126 ] 
18:16:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819C60>, <py_sfcl.CommandDataDefinition object at 0x06819C90>) , Command count = 127 ] 
18:16:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819CF0>, <py_sfcl.CommandDataDefinition object at 0x06819D20>) , Command count = 128 ] 
18:16:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819D80>, <py_sfcl.CommandDataDefinition object at 0x06819DB0>) , Command count = 129 ] 
18:16:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819E10>, <py_sfcl.CommandDataDefinition object at 0x06819E40>) , Command count = 130 ] 
18:16:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819EA0>, <py_sfcl.CommandDataDefinition object at 0x06819ED0>) , Command count = 131 ] 
18:16:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819F30>, <py_sfcl.CommandDataDefinition object at 0x06819F60>) , Command count = 132 ] 
18:16:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819FC0>, <py_sfcl.CommandDataDefinition object at 0x0681B030>) , Command count = 133 ] 
18:16:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B090>, <py_sfcl.CommandDataDefinition object at 0x0681B0C0>) , Command count = 134 ] 
18:16:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B120>, <py_sfcl.CommandDataDefinition object at 0x0681B150>) , Command count = 135 ] 
18:16:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B1B0>, <py_sfcl.CommandDataDefinition object at 0x0681B1E0>) , Command count = 136 ] 
18:16:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
18:16:39: [ SetCardCap(True) , Command count = 137 ] 
18:16:39: [ SetSdMmcCardMode(0x2, True) , Command count = 138 ] 
18:16:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B2A0>, <py_sfcl.CommandDataDefinition object at 0x0681B2D0>) , Command count = 139 ] 
18:16:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B330>, <py_sfcl.CommandDataDefinition object at 0x0681B360>) , Command count = 140 ] 
18:16:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:16:39: [ SetCardRCA(0x1, 0xD555) , Command count = 141 ] 
18:16:39: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:39: [RT2HCSD24_1_1_1_2.py]CALL : globalSetLSHostFreq
18:16:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:39: Host Frequency set to 25000 KHz
18:16:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:39: [RT2HCSD24_1_1_1_2.py]CALL : AddressForWriteRead
18:16:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:16:39: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:16:39: [ SetBusWidth(0x1) , Command count = 142 ] 
18:16:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:39: ####CSD Registe 2.0 Values####
18:16:39: CSD_STRUCTURE                                 :0x1
18:16:39: Reserv1                                       :0x0
18:16:39: Time Access 1 TAAC                            :0xe
18:16:39: Time Access 2 NSAC*100                        :0x0
18:16:39: Data Transfer Rate TRAN_SPEED                 :0x32
18:16:39: Card Command Classess CCC                     :0x5b5
18:16:39: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:39: DSR(driver stage register)  DSR_IMP           :0x0
18:16:39: Reserv2                                       :0x0
18:16:39: Device Size C_SIZE                            :0xedc8
18:16:39: Reserv3                                       :0x0
18:16:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:39: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:39: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:39: Reserv4                                       :0x0
18:16:39: Write Speed Factor R2W_FACTOR                 :0x2
18:16:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:39: FILE_FORMAT_GRP                               :0x0
18:16:39: COPY flag                                     :0x1
18:16:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:39: File_Format                                   :0x0
18:16:39: CRC                                           :0x0
18:16:39: ####CSD Registe Values####  

18:16:39: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:16:39: ProductSerialNumber = 0x23482900
18:16:39: CardMaximumLBA      = 0x3b72400
18:16:39: CardCapacity        = 32G
18:16:39: Is card secure      = 0
18:16:39: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:16:39: [DVTCommonLib]###  LogicalWrite called
18:16:40: [ WriteLba(0x70BC46, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 143 ] 
18:16:40: [DVTCommonLib]###  LogicalWrite Completed 

18:16:40: [DVTCommonLib]###  LogicalRead called
18:16:42: [ ReadLba(0x70BC46, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 144 ] 
18:16:42: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:16:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:16:42: ***Test Sequential of CMD 8' s during Power Cycle & CMD 0 Reset***
18:16:42: [RT2HCSD24_1_1_1_2.py]POWER : OFF and ON
18:16:44: [RT2HCSD24_1_1_1_2.py]CALL : globalSetResetFreq
18:16:44: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
18:16:44: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B3F0>, <py_sfcl.CommandDataDefinition object at 0x0681B450>) , Command count = 145 ] 
18:16:44: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B4B0>, <py_sfcl.CommandDataDefinition object at 0x0681B4E0>) , Command count = 146 ] 
18:16:44: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 170, 66]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B570>, <py_sfcl.CommandDataDefinition object at 0x0681B5A0>) , Command count = 147 ] 
18:16:44: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 170, 66]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B600>, <py_sfcl.CommandDataDefinition object at 0x0681B630>) , Command count = 148 ] 
18:16:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B690>, <py_sfcl.CommandDataDefinition object at 0x0681B6C0>) , Command count = 149 ] 
18:16:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B720>, <py_sfcl.CommandDataDefinition object at 0x0681B750>) , Command count = 150 ] 
18:16:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B7B0>, <py_sfcl.CommandDataDefinition object at 0x0681B7E0>) , Command count = 151 ] 
18:16:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B840>, <py_sfcl.CommandDataDefinition object at 0x0681B870>) , Command count = 152 ] 
18:16:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B8D0>, <py_sfcl.CommandDataDefinition object at 0x0681B900>) , Command count = 153 ] 
18:16:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B960>, <py_sfcl.CommandDataDefinition object at 0x0681B990>) , Command count = 154 ] 
18:16:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B9F0>, <py_sfcl.CommandDataDefinition object at 0x0681BA20>) , Command count = 155 ] 
18:16:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681BA80>, <py_sfcl.CommandDataDefinition object at 0x0681BAB0>) , Command count = 156 ] 
18:16:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681BB10>, <py_sfcl.CommandDataDefinition object at 0x0681BB40>) , Command count = 157 ] 
18:16:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681BBA0>, <py_sfcl.CommandDataDefinition object at 0x0681BBD0>) , Command count = 158 ] 
18:16:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681BC30>, <py_sfcl.CommandDataDefinition object at 0x0681BC60>) , Command count = 159 ] 
18:16:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681BCC0>, <py_sfcl.CommandDataDefinition object at 0x0681BCF0>) , Command count = 160 ] 
18:16:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681BD50>, <py_sfcl.CommandDataDefinition object at 0x0681BD80>) , Command count = 161 ] 
18:16:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681BDE0>, <py_sfcl.CommandDataDefinition object at 0x0681BE10>) , Command count = 162 ] 
18:16:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681BE70>, <py_sfcl.CommandDataDefinition object at 0x0681BEA0>) , Command count = 163 ] 
18:16:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681BF00>, <py_sfcl.CommandDataDefinition object at 0x0681BF30>) , Command count = 164 ] 
18:16:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681BF90>, <py_sfcl.CommandDataDefinition object at 0x0681BFC0>) , Command count = 165 ] 
18:16:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06820060>, <py_sfcl.CommandDataDefinition object at 0x06820090>) , Command count = 166 ] 
18:16:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068200F0>, <py_sfcl.CommandDataDefinition object at 0x06820120>) , Command count = 167 ] 
18:16:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06820180>, <py_sfcl.CommandDataDefinition object at 0x068201B0>) , Command count = 168 ] 
18:16:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06820210>, <py_sfcl.CommandDataDefinition object at 0x06820240>) , Command count = 169 ] 
18:16:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068202A0>, <py_sfcl.CommandDataDefinition object at 0x068202D0>) , Command count = 170 ] 
18:16:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06820330>, <py_sfcl.CommandDataDefinition object at 0x06820360>) , Command count = 171 ] 
18:16:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068203C0>, <py_sfcl.CommandDataDefinition object at 0x068203F0>) , Command count = 172 ] 
18:16:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06820450>, <py_sfcl.CommandDataDefinition object at 0x06820480>) , Command count = 173 ] 
18:16:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068204E0>, <py_sfcl.CommandDataDefinition object at 0x06820510>) , Command count = 174 ] 
18:16:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06820570>, <py_sfcl.CommandDataDefinition object at 0x068205A0>) , Command count = 175 ] 
18:16:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06820600>, <py_sfcl.CommandDataDefinition object at 0x06820630>) , Command count = 176 ] 
18:16:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06820690>, <py_sfcl.CommandDataDefinition object at 0x068206C0>) , Command count = 177 ] 
18:16:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
18:16:44: [ SetCardCap(True) , Command count = 178 ] 
18:16:44: [ SetSdMmcCardMode(0x2, True) , Command count = 179 ] 
18:16:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06820780>, <py_sfcl.CommandDataDefinition object at 0x068207B0>) , Command count = 180 ] 
18:16:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06820810>, <py_sfcl.CommandDataDefinition object at 0x06820840>) , Command count = 181 ] 
18:16:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:16:44: [ SetCardRCA(0x1, 0xD555) , Command count = 182 ] 
18:16:44: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:44: [RT2HCSD24_1_1_1_2.py]CALL : globalSetLSHostFreq
18:16:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:44: Host Frequency set to 25000 KHz
18:16:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:44: [RT2HCSD24_1_1_1_2.py]CALL : AddressForWriteRead
18:16:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:16:44: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:16:44: [ SetBusWidth(0x1) , Command count = 183 ] 
18:16:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:44: ####CSD Registe 2.0 Values####
18:16:44: CSD_STRUCTURE                                 :0x1
18:16:44: Reserv1                                       :0x0
18:16:44: Time Access 1 TAAC                            :0xe
18:16:44: Time Access 2 NSAC*100                        :0x0
18:16:44: Data Transfer Rate TRAN_SPEED                 :0x32
18:16:44: Card Command Classess CCC                     :0x5b5
18:16:44: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:44: DSR(driver stage register)  DSR_IMP           :0x0
18:16:44: Reserv2                                       :0x0
18:16:44: Device Size C_SIZE                            :0xedc8
18:16:44: Reserv3                                       :0x0
18:16:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:44: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:44: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:44: Reserv4                                       :0x0
18:16:44: Write Speed Factor R2W_FACTOR                 :0x2
18:16:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:44: FILE_FORMAT_GRP                               :0x0
18:16:44: COPY flag                                     :0x1
18:16:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:44: File_Format                                   :0x0
18:16:44: CRC                                           :0x0
18:16:44: ####CSD Registe Values####  

18:16:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:16:44: ProductSerialNumber = 0x23482900
18:16:44: CardMaximumLBA      = 0x3b72400
18:16:44: CardCapacity        = 32G
18:16:44: Is card secure      = 0
18:16:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:16:44: [DVTCommonLib]###  LogicalWrite called
18:16:46: [ WriteLba(0x3231E6E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 184 ] 
18:16:46: [DVTCommonLib]###  LogicalWrite Completed 

18:16:46: [DVTCommonLib]###  LogicalRead called
18:16:48: [ ReadLba(0x3231E6E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 185 ] 
18:16:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:16:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:16:48: ########################################
18:16:48: Finished Running script RT2HCSD24_1_1_1_2 
18:16:48: ########################################
18:16:48: ########################################
18:16:48: Stated Running script RT2HCSD34_1_1_1_2a 
18:16:48: ########################################
18:16:48: [RT2HCSD34_1_1_1_2a.py]###### Set Card Time Out values test. 
18:16:48: [GO4_globalInitCard]### Switch to Specify Card Type
18:16:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:50: Host Frequency set to 25000 KHz
18:16:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:50: [GO18_globalSetVolt]### Set Host Voltage value.
18:16:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:16:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x06820F60>, 0x0, True) , Command count = 186 ] 
18:16:50: [GO18_globalSetVolt]### Host voltage value is set.
18:16:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:16:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x06820E40>, 0x0, False) , Command count = 187 ] 
18:16:50: [GO18_globalSetVolt]### Host voltage value is set.
18:16:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 188 ] 
18:16:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:16:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 189 ] 
18:16:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:16:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:16:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:16:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:16:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:16:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 190 ] 
18:16:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:16:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06820A20>, <py_sfcl.CommandDataDefinition object at 0x06820ED0>) , Command count = 191 ] 
18:16:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06820D50>, <py_sfcl.CommandDataDefinition object at 0x06820DB0>) , Command count = 192 ] 
18:16:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:16:50: [ SetCardRCA(0x1, 0xD555) , Command count = 193 ] 
18:16:50: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:50: Host Frequency set to 25000 KHz
18:16:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:50: ####CSD Registe 2.0 Values####
18:16:50: CSD_STRUCTURE                                 :0x1
18:16:50: Reserv1                                       :0x0
18:16:50: Time Access 1 TAAC                            :0xe
18:16:50: Time Access 2 NSAC*100                        :0x0
18:16:50: Data Transfer Rate TRAN_SPEED                 :0x32
18:16:50: Card Command Classess CCC                     :0x5b5
18:16:50: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:50: DSR(driver stage register)  DSR_IMP           :0x0
18:16:50: Reserv2                                       :0x0
18:16:50: Device Size C_SIZE                            :0xedc8
18:16:50: Reserv3                                       :0x0
18:16:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:50: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:50: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:50: Reserv4                                       :0x0
18:16:50: Write Speed Factor R2W_FACTOR                 :0x2
18:16:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:50: FILE_FORMAT_GRP                               :0x0
18:16:50: COPY flag                                     :0x1
18:16:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:50: File_Format                                   :0x0
18:16:50: CRC                                           :0x0
18:16:50: ####CSD Registe Values####  

18:16:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:16:50: [GetSCRRegisterEntry] Passed
18:16:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:16:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:16:50: Data_Status_After Erases          : 0
18:16:50: CPRM Security Support             : No Security
18:16:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:16:50: Spec. Version                     : Version 3.0X
18:16:50: Extended Security Support         : Extended_Security_Not_Supported
18:16:50: Command Support                   : COMMAND_SUPPORT
18:16:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823240>, <py_sfcl.CommandDataDefinition object at 0x06823060>) , Command count = 194 ] 
18:16:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068230C0>, <py_sfcl.CommandDataDefinition object at 0x068230F0>) , Command count = 195 ] 
18:16:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:16:50: [ SetBusWidth(0x4) , Command count = 196 ] 
18:16:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:16:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x068231B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 197 ] 
18:16:50: Protected Area Size 0x28000
18:16:50: Bus Width           2
18:16:50: Secure Mode         0
18:16:50: Speed  Class        4
18:16:50: Perf Move           0
18:16:50: Au Size             9
18:16:50: Erase Size          15
18:16:50: Erase Timeout       1
18:16:50: Erase offset        1
18:16:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:16:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:16:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:16:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 198 ] 
18:16:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:16:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:16:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:16:50: Host Frequency set to 100000 KHz
18:16:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:16:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:50: ####CSD Registe 2.0 Values####
18:16:50: CSD_STRUCTURE                                 :0x1
18:16:50: Reserv1                                       :0x0
18:16:50: Time Access 1 TAAC                            :0xe
18:16:50: Time Access 2 NSAC*100                        :0x0
18:16:50: Data Transfer Rate TRAN_SPEED                 :0xb
18:16:50: Card Command Classess CCC                     :0x5b5
18:16:50: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:50: DSR(driver stage register)  DSR_IMP           :0x0
18:16:50: Reserv2                                       :0x0
18:16:50: Device Size C_SIZE                            :0xedc8
18:16:50: Reserv3                                       :0x0
18:16:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:50: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:50: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:50: Reserv4                                       :0x0
18:16:50: Write Speed Factor R2W_FACTOR                 :0x2
18:16:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:50: FILE_FORMAT_GRP                               :0x0
18:16:50: COPY flag                                     :0x1
18:16:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:50: File_Format                                   :0x0
18:16:50: CRC                                           :0x0
18:16:50: ####CSD Registe Values####  

18:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068234B0>, <py_sfcl.CommandDataDefinition object at 0x068232D0>) , Command count = 199 ] 
18:16:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823330>, <py_sfcl.CommandDataDefinition object at 0x06823360>) , Command count = 200 ] 
18:16:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:16:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:16:50: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetTO
18:16:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 201 ] 
18:16:50: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetVolt
18:16:50: [GO18_globalSetVolt]### Set Host Voltage value.
18:16:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:16:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x06823420>, 0x0, True) , Command count = 202 ] 
18:16:50: [GO18_globalSetVolt]### Host voltage value is set.
18:16:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:16:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x06823450>, 0x0, False) , Command count = 203 ] 
18:16:50: [GO18_globalSetVolt]### Host voltage value is set.
18:16:50: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetResetFreq
18:16:50: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
18:16:50: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
18:16:50: [RT2HCSD34_1_1_1_2a.py]***Test Sequential of CMD 8' s during Soft Reset***
18:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068234E0>, <py_sfcl.CommandDataDefinition object at 0x06823510>) , Command count = 204 ] 
18:16:50: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823570>, <py_sfcl.CommandDataDefinition object at 0x068235A0>) , Command count = 205 ] 
18:16:50: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 43, 112]
18:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823600>, <py_sfcl.CommandDataDefinition object at 0x06823630>) , Command count = 206 ] 
18:16:50: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 76, 138]
18:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823690>, <py_sfcl.CommandDataDefinition object at 0x068236C0>) , Command count = 207 ] 
18:16:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823720>, <py_sfcl.CommandDataDefinition object at 0x06823750>) , Command count = 208 ] 
18:16:50: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 65, 255, 128, 0, 255]
18:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068237B0>, <py_sfcl.CommandDataDefinition object at 0x068237E0>) , Command count = 209 ] 
18:16:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823840>, <py_sfcl.CommandDataDefinition object at 0x06823870>) , Command count = 210 ] 
18:16:50: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 64, 255, 128, 0, 255]
18:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068238D0>, <py_sfcl.CommandDataDefinition object at 0x06823900>) , Command count = 211 ] 
18:16:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823960>, <py_sfcl.CommandDataDefinition object at 0x06823990>) , Command count = 212 ] 
18:16:50: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 192, 255, 128, 0, 255]
18:16:50: [ SetCardCap(True) , Command count = 213 ] 
18:16:50: [ SetSdMmcCardMode(0x2, True) , Command count = 214 ] 
18:16:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823A50>, <py_sfcl.CommandDataDefinition object at 0x06823A80>) , Command count = 215 ] 
18:16:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823AE0>, <py_sfcl.CommandDataDefinition object at 0x06823B10>) , Command count = 216 ] 
18:16:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:16:50: [ SetCardRCA(0x1, 0xD555) , Command count = 217 ] 
18:16:51: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:51: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetLSHostFreq
18:16:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:51: Host Frequency set to 25000 KHz
18:16:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:51: [RT2HCSD34_1_1_1_2a.py]CALL : AddressForWriteRead
18:16:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:16:51: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:16:51: [ SetBusWidth(0x1) , Command count = 218 ] 
18:16:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:51: ####CSD Registe 2.0 Values####
18:16:51: CSD_STRUCTURE                                 :0x1
18:16:51: Reserv1                                       :0x0
18:16:51: Time Access 1 TAAC                            :0xe
18:16:51: Time Access 2 NSAC*100                        :0x0
18:16:51: Data Transfer Rate TRAN_SPEED                 :0x32
18:16:51: Card Command Classess CCC                     :0x5b5
18:16:51: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:51: DSR(driver stage register)  DSR_IMP           :0x0
18:16:51: Reserv2                                       :0x0
18:16:51: Device Size C_SIZE                            :0xedc8
18:16:51: Reserv3                                       :0x0
18:16:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:51: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:51: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:51: Reserv4                                       :0x0
18:16:51: Write Speed Factor R2W_FACTOR                 :0x2
18:16:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:51: FILE_FORMAT_GRP                               :0x0
18:16:51: COPY flag                                     :0x1
18:16:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:51: File_Format                                   :0x0
18:16:51: CRC                                           :0x0
18:16:51: ####CSD Registe Values####  

18:16:51: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:16:51: ProductSerialNumber = 0x23482900
18:16:51: CardMaximumLBA      = 0x3b72400
18:16:51: CardCapacity        = 32G
18:16:51: Is card secure      = 0
18:16:51: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:16:51: [DVTCommonLib]###  LogicalWrite called
18:16:52: [ WriteLba(0x2CBA49A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 219 ] 
18:16:52: [DVTCommonLib]###  LogicalWrite Completed 

18:16:52: [DVTCommonLib]###  LogicalRead called
18:16:54: [ ReadLba(0x2CBA49A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 220 ] 
18:16:54: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:16:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:16:54: [RT2HCSD34_1_1_1_2a.py]***Test Sequential of CMD 8' s during Power Cycle Reset***
18:16:54: [RT2HCSD34_1_1_1_2a.py]POWER : OFF and ON
18:16:56: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetResetFreq
18:16:56: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
18:16:56: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823BD0>, <py_sfcl.CommandDataDefinition object at 0x06823C00>) , Command count = 221 ] 
18:16:56: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 61, 187]
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823C90>, <py_sfcl.CommandDataDefinition object at 0x06823CC0>) , Command count = 222 ] 
18:16:56: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 142, 199]
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823D20>, <py_sfcl.CommandDataDefinition object at 0x06823D50>) , Command count = 223 ] 
18:16:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823DE0>, <py_sfcl.CommandDataDefinition object at 0x06823E10>) , Command count = 224 ] 
18:16:56: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823E70>, <py_sfcl.CommandDataDefinition object at 0x06823EA0>) , Command count = 225 ] 
18:16:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823F00>, <py_sfcl.CommandDataDefinition object at 0x06823F30>) , Command count = 226 ] 
18:16:56: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823F90>, <py_sfcl.CommandDataDefinition object at 0x06823FC0>) , Command count = 227 ] 
18:16:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C060>, <py_sfcl.CommandDataDefinition object at 0x0682C090>) , Command count = 228 ] 
18:16:56: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C0F0>, <py_sfcl.CommandDataDefinition object at 0x0682C120>) , Command count = 229 ] 
18:16:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C180>, <py_sfcl.CommandDataDefinition object at 0x0682C1B0>) , Command count = 230 ] 
18:16:56: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C210>, <py_sfcl.CommandDataDefinition object at 0x0682C240>) , Command count = 231 ] 
18:16:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C2A0>, <py_sfcl.CommandDataDefinition object at 0x0682C2D0>) , Command count = 232 ] 
18:16:56: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C330>, <py_sfcl.CommandDataDefinition object at 0x0682C360>) , Command count = 233 ] 
18:16:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C3C0>, <py_sfcl.CommandDataDefinition object at 0x0682C3F0>) , Command count = 234 ] 
18:16:56: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C450>, <py_sfcl.CommandDataDefinition object at 0x0682C480>) , Command count = 235 ] 
18:16:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C4E0>, <py_sfcl.CommandDataDefinition object at 0x0682C510>) , Command count = 236 ] 
18:16:56: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C570>, <py_sfcl.CommandDataDefinition object at 0x0682C5A0>) , Command count = 237 ] 
18:16:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C600>, <py_sfcl.CommandDataDefinition object at 0x0682C630>) , Command count = 238 ] 
18:16:56: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C690>, <py_sfcl.CommandDataDefinition object at 0x0682C6C0>) , Command count = 239 ] 
18:16:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C720>, <py_sfcl.CommandDataDefinition object at 0x0682C750>) , Command count = 240 ] 
18:16:56: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C7B0>, <py_sfcl.CommandDataDefinition object at 0x0682C7E0>) , Command count = 241 ] 
18:16:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C840>, <py_sfcl.CommandDataDefinition object at 0x0682C870>) , Command count = 242 ] 
18:16:56: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C8D0>, <py_sfcl.CommandDataDefinition object at 0x0682C900>) , Command count = 243 ] 
18:16:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C960>, <py_sfcl.CommandDataDefinition object at 0x0682C990>) , Command count = 244 ] 
18:16:56: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C9F0>, <py_sfcl.CommandDataDefinition object at 0x0682CA20>) , Command count = 245 ] 
18:16:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CA80>, <py_sfcl.CommandDataDefinition object at 0x0682CAB0>) , Command count = 246 ] 
18:16:56: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CB10>, <py_sfcl.CommandDataDefinition object at 0x0682CB40>) , Command count = 247 ] 
18:16:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CBA0>, <py_sfcl.CommandDataDefinition object at 0x0682CBD0>) , Command count = 248 ] 
18:16:56: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CC30>, <py_sfcl.CommandDataDefinition object at 0x0682CC60>) , Command count = 249 ] 
18:16:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CCC0>, <py_sfcl.CommandDataDefinition object at 0x0682CCF0>) , Command count = 250 ] 
18:16:56: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CD50>, <py_sfcl.CommandDataDefinition object at 0x0682CD80>) , Command count = 251 ] 
18:16:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06010AE0>, <py_sfcl.CommandDataDefinition object at 0x0682CDE0>) , Command count = 252 ] 
18:16:56: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 65, 255, 128, 0, 255]
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CE40>, <py_sfcl.CommandDataDefinition object at 0x0682CE70>) , Command count = 253 ] 
18:16:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614A0C0>, <py_sfcl.CommandDataDefinition object at 0x0682CED0>) , Command count = 254 ] 
18:16:56: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
18:16:56: [ SetCardCap(True) , Command count = 255 ] 
18:16:56: [ SetSdMmcCardMode(0x2, True) , Command count = 256 ] 
18:16:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061642D0>, <py_sfcl.CommandDataDefinition object at 0x0682CF30>) , Command count = 257 ] 
18:16:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:16:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06168CF0>, <py_sfcl.CommandDataDefinition object at 0x0682CF90>) , Command count = 258 ] 
18:16:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:16:56: [ SetCardRCA(0x1, 0xD555) , Command count = 259 ] 
18:16:56: [DVTCommonLib]### Identification :Idenfication of card completed 

18:16:56: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetLSHostFreq
18:16:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:16:56: Host Frequency set to 25000 KHz
18:16:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:16:56: [RT2HCSD34_1_1_1_2a.py]CALL : AddressForWriteRead
18:16:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:16:56: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:16:56: [ SetBusWidth(0x1) , Command count = 260 ] 
18:16:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:16:56: ####CSD Registe 2.0 Values####
18:16:56: CSD_STRUCTURE                                 :0x1
18:16:56: Reserv1                                       :0x0
18:16:56: Time Access 1 TAAC                            :0xe
18:16:56: Time Access 2 NSAC*100                        :0x0
18:16:56: Data Transfer Rate TRAN_SPEED                 :0x32
18:16:56: Card Command Classess CCC                     :0x5b5
18:16:56: Max Read Data Block Length  READ_BL_LEN       :0x9
18:16:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:16:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:16:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:16:56: DSR(driver stage register)  DSR_IMP           :0x0
18:16:56: Reserv2                                       :0x0
18:16:56: Device Size C_SIZE                            :0xedc8
18:16:56: Reserv3                                       :0x0
18:16:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:16:56: Erase Sector Size SECTOR_SIZE                 :0x7f
18:16:56: Write Protect Group Size WP_GRP_SIZE          :0x0
18:16:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:16:56: Reserv4                                       :0x0
18:16:56: Write Speed Factor R2W_FACTOR                 :0x2
18:16:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:16:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:16:56: FILE_FORMAT_GRP                               :0x0
18:16:56: COPY flag                                     :0x1
18:16:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:16:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:16:56: File_Format                                   :0x0
18:16:56: CRC                                           :0x0
18:16:56: ####CSD Registe Values####  

18:16:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:16:56: ProductSerialNumber = 0x23482900
18:16:56: CardMaximumLBA      = 0x3b72400
18:16:56: CardCapacity        = 32G
18:16:56: Is card secure      = 0
18:16:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:16:56: [DVTCommonLib]###  LogicalWrite called
18:16:58: [ WriteLba(0x262CF36, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 261 ] 
18:16:58: [DVTCommonLib]###  LogicalWrite Completed 

18:16:58: [DVTCommonLib]###  LogicalRead called
18:16:59: [ ReadLba(0x262CF36, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 262 ] 
18:16:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:16:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:16:59: ***Test Sequential of CMD 8' s during Power Cycle & CMD 0 Reset***
18:16:59: [RT2HCSD34_1_1_1_2a.py]POWER : OFF and ON
18:17:01: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetResetFreq
18:17:01: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
18:17:02: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E01C90>, <py_sfcl.CommandDataDefinition object at 0x0682D0C0>) , Command count = 263 ] 
18:17:02: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616EC90>, <py_sfcl.CommandDataDefinition object at 0x0682D060>) , Command count = 264 ] 
18:17:02: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 214, 202]
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E1A540>, <py_sfcl.CommandDataDefinition object at 0x0682D0F0>) , Command count = 265 ] 
18:17:02: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 253, 178]
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616ED80>, <py_sfcl.CommandDataDefinition object at 0x0682D150>) , Command count = 266 ] 
18:17:02: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 163, 114]
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616ECC0>, <py_sfcl.CommandDataDefinition object at 0x0682D1B0>) , Command count = 267 ] 
18:17:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616ECF0>, <py_sfcl.CommandDataDefinition object at 0x0682D240>) , Command count = 268 ] 
18:17:02: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A0E70>, <py_sfcl.CommandDataDefinition object at 0x0682D2A0>) , Command count = 269 ] 
18:17:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A0A80>, <py_sfcl.CommandDataDefinition object at 0x0682D300>) , Command count = 270 ] 
18:17:02: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616E690>, <py_sfcl.CommandDataDefinition object at 0x0682D360>) , Command count = 271 ] 
18:17:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616E900>, <py_sfcl.CommandDataDefinition object at 0x0682D3C0>) , Command count = 272 ] 
18:17:02: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616EF90>, <py_sfcl.CommandDataDefinition object at 0x0682D420>) , Command count = 273 ] 
18:17:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614B180>, <py_sfcl.CommandDataDefinition object at 0x0682D480>) , Command count = 274 ] 
18:17:02: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06157030>, <py_sfcl.CommandDataDefinition object at 0x0682D4E0>) , Command count = 275 ] 
18:17:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616EE10>, <py_sfcl.CommandDataDefinition object at 0x0682D540>) , Command count = 276 ] 
18:17:02: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614A840>, <py_sfcl.CommandDataDefinition object at 0x0682D5A0>) , Command count = 277 ] 
18:17:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614AE70>, <py_sfcl.CommandDataDefinition object at 0x0682D600>) , Command count = 278 ] 
18:17:02: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614AA20>, <py_sfcl.CommandDataDefinition object at 0x0682D660>) , Command count = 279 ] 
18:17:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614A300>, <py_sfcl.CommandDataDefinition object at 0x0682D6C0>) , Command count = 280 ] 
18:17:02: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5210>, <py_sfcl.CommandDataDefinition object at 0x0682D720>) , Command count = 281 ] 
18:17:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5B40>, <py_sfcl.CommandDataDefinition object at 0x0682D780>) , Command count = 282 ] 
18:17:02: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5BD0>, <py_sfcl.CommandDataDefinition object at 0x0682D7E0>) , Command count = 283 ] 
18:17:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5C00>, <py_sfcl.CommandDataDefinition object at 0x0682D840>) , Command count = 284 ] 
18:17:02: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5C30>, <py_sfcl.CommandDataDefinition object at 0x0682D8A0>) , Command count = 285 ] 
18:17:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5C60>, <py_sfcl.CommandDataDefinition object at 0x0682D900>) , Command count = 286 ] 
18:17:02: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061640F0>, <py_sfcl.CommandDataDefinition object at 0x0682D960>) , Command count = 287 ] 
18:17:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5CF0>, <py_sfcl.CommandDataDefinition object at 0x0682D9C0>) , Command count = 288 ] 
18:17:02: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5C90>, <py_sfcl.CommandDataDefinition object at 0x0682DA20>) , Command count = 289 ] 
18:17:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5CC0>, <py_sfcl.CommandDataDefinition object at 0x0682DA80>) , Command count = 290 ] 
18:17:02: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5F60>, <py_sfcl.CommandDataDefinition object at 0x0682DAE0>) , Command count = 291 ] 
18:17:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682DB40>, <py_sfcl.CommandDataDefinition object at 0x0682DB70>) , Command count = 292 ] 
18:17:02: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066FF450>, <py_sfcl.CommandDataDefinition object at 0x066FF480>) , Command count = 293 ] 
18:17:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066FF600>, <py_sfcl.CommandDataDefinition object at 0x0682DC00>) , Command count = 294 ] 
18:17:02: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067AF060>, <py_sfcl.CommandDataDefinition object at 0x0682DC60>) , Command count = 295 ] 
18:17:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067AF090>, <py_sfcl.CommandDataDefinition object at 0x0682DCC0>) , Command count = 296 ] 
18:17:02: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 65, 255, 128, 0, 255]
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682DD20>, <py_sfcl.CommandDataDefinition object at 0x0682DD50>) , Command count = 297 ] 
18:17:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682DDB0>, <py_sfcl.CommandDataDefinition object at 0x0682DDE0>) , Command count = 298 ] 
18:17:02: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
18:17:02: [ SetCardCap(True) , Command count = 299 ] 
18:17:02: [ SetSdMmcCardMode(0x2, True) , Command count = 300 ] 
18:17:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BAD20>, <py_sfcl.CommandDataDefinition object at 0x067BAB40>) , Command count = 301 ] 
18:17:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BAC60>, <py_sfcl.CommandDataDefinition object at 0x0682DE40>) , Command count = 302 ] 
18:17:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:02: [ SetCardRCA(0x1, 0xD555) , Command count = 303 ] 
18:17:02: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:02: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetLSHostFreq
18:17:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:02: Host Frequency set to 25000 KHz
18:17:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:02: [RT2HCSD34_1_1_1_2a.py]CALL : AddressForWriteRead
18:17:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:17:02: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:17:02: [ SetBusWidth(0x1) , Command count = 304 ] 
18:17:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:02: ####CSD Registe 2.0 Values####
18:17:02: CSD_STRUCTURE                                 :0x1
18:17:02: Reserv1                                       :0x0
18:17:02: Time Access 1 TAAC                            :0xe
18:17:02: Time Access 2 NSAC*100                        :0x0
18:17:02: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:02: Card Command Classess CCC                     :0x5b5
18:17:02: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:02: DSR(driver stage register)  DSR_IMP           :0x0
18:17:02: Reserv2                                       :0x0
18:17:02: Device Size C_SIZE                            :0xedc8
18:17:02: Reserv3                                       :0x0
18:17:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:02: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:02: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:02: Reserv4                                       :0x0
18:17:02: Write Speed Factor R2W_FACTOR                 :0x2
18:17:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:02: FILE_FORMAT_GRP                               :0x0
18:17:02: COPY flag                                     :0x1
18:17:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:02: File_Format                                   :0x0
18:17:02: CRC                                           :0x0
18:17:02: ####CSD Registe Values####  

18:17:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:17:02: ProductSerialNumber = 0x23482900
18:17:02: CardMaximumLBA      = 0x3b72400
18:17:02: CardCapacity        = 32G
18:17:02: Is card secure      = 0
18:17:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:17:02: [DVTCommonLib]###  LogicalWrite called
18:17:03: [ WriteLba(0x22361F6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 305 ] 
18:17:03: [DVTCommonLib]###  LogicalWrite Completed 

18:17:03: [DVTCommonLib]###  LogicalRead called
18:17:05: [ ReadLba(0x22361F6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 306 ] 
18:17:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:17:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:17:05: ########################################
18:17:05: Finished Running script RT2HCSD34_1_1_1_2a 
18:17:05: ########################################
18:17:05: ########################################
18:17:05: Stated Running script RT2HCSD35_1_1_1_3 
18:17:05: ########################################
18:17:05: [RT2HCSD35_1_1_1_3.py]###### Set Card Time Out values test. 
18:17:05: [GO4_globalInitCard]### Switch to Specify Card Type
18:17:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:07: Host Frequency set to 25000 KHz
18:17:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:07: [GO18_globalSetVolt]### Set Host Voltage value.
18:17:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:17:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x0688A480>, 0x0, True) , Command count = 307 ] 
18:17:07: [GO18_globalSetVolt]### Host voltage value is set.
18:17:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:17:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x067BACC0>, 0x0, False) , Command count = 308 ] 
18:17:07: [GO18_globalSetVolt]### Host voltage value is set.
18:17:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 309 ] 
18:17:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 310 ] 
18:17:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:17:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 311 ] 
18:17:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:17:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1300>, <py_sfcl.CommandDataDefinition object at 0x066FF360>) , Command count = 312 ] 
18:17:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1030>, <py_sfcl.CommandDataDefinition object at 0x067C1360>) , Command count = 313 ] 
18:17:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:17:07: [ SetCardRCA(0x1, 0xD555) , Command count = 314 ] 
18:17:07: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:08: Host Frequency set to 25000 KHz
18:17:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:08: ####CSD Registe 2.0 Values####
18:17:08: CSD_STRUCTURE                                 :0x1
18:17:08: Reserv1                                       :0x0
18:17:08: Time Access 1 TAAC                            :0xe
18:17:08: Time Access 2 NSAC*100                        :0x0
18:17:08: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:08: Card Command Classess CCC                     :0x5b5
18:17:08: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:08: DSR(driver stage register)  DSR_IMP           :0x0
18:17:08: Reserv2                                       :0x0
18:17:08: Device Size C_SIZE                            :0xedc8
18:17:08: Reserv3                                       :0x0
18:17:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:08: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:08: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:08: Reserv4                                       :0x0
18:17:08: Write Speed Factor R2W_FACTOR                 :0x2
18:17:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:08: FILE_FORMAT_GRP                               :0x0
18:17:08: COPY flag                                     :0x1
18:17:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:08: File_Format                                   :0x0
18:17:08: CRC                                           :0x0
18:17:08: ####CSD Registe Values####  

18:17:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:17:08: [GetSCRRegisterEntry] Passed
18:17:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:17:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:17:08: Data_Status_After Erases          : 0
18:17:08: CPRM Security Support             : No Security
18:17:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:17:08: Spec. Version                     : Version 3.0X
18:17:08: Extended Security Support         : Extended_Security_Not_Supported
18:17:08: Command Support                   : COMMAND_SUPPORT
18:17:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:17:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1120>, <py_sfcl.CommandDataDefinition object at 0x067C1480>) , Command count = 315 ] 
18:17:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:17:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067AFE70>, <py_sfcl.CommandDataDefinition object at 0x067C13F0>) , Command count = 316 ] 
18:17:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:17:08: [ SetBusWidth(0x4) , Command count = 317 ] 
18:17:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:17:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x067C1570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 318 ] 
18:17:08: Protected Area Size 0x28000
18:17:08: Bus Width           2
18:17:08: Secure Mode         0
18:17:08: Speed  Class        4
18:17:08: Perf Move           0
18:17:08: Au Size             9
18:17:08: Erase Size          15
18:17:08: Erase Timeout       1
18:17:08: Erase offset        1
18:17:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:17:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:17:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:17:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 319 ] 
18:17:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:17:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:17:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:17:08: Host Frequency set to 100000 KHz
18:17:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:17:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:08: ####CSD Registe 2.0 Values####
18:17:08: CSD_STRUCTURE                                 :0x1
18:17:08: Reserv1                                       :0x0
18:17:08: Time Access 1 TAAC                            :0xe
18:17:08: Time Access 2 NSAC*100                        :0x0
18:17:08: Data Transfer Rate TRAN_SPEED                 :0xb
18:17:08: Card Command Classess CCC                     :0x5b5
18:17:08: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:08: DSR(driver stage register)  DSR_IMP           :0x0
18:17:08: Reserv2                                       :0x0
18:17:08: Device Size C_SIZE                            :0xedc8
18:17:08: Reserv3                                       :0x0
18:17:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:08: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:08: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:08: Reserv4                                       :0x0
18:17:08: Write Speed Factor R2W_FACTOR                 :0x2
18:17:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:08: FILE_FORMAT_GRP                               :0x0
18:17:08: COPY flag                                     :0x1
18:17:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:08: File_Format                                   :0x0
18:17:08: CRC                                           :0x0
18:17:08: ####CSD Registe Values####  

18:17:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1540>, <py_sfcl.CommandDataDefinition object at 0x067C1ED0>) , Command count = 320 ] 
18:17:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:17:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1D50>, <py_sfcl.CommandDataDefinition object at 0x067C1B10>) , Command count = 321 ] 
18:17:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:17:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:17:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 322 ] 
18:17:08: [GO18_globalSetVolt]### Set Host Voltage value.
18:17:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:17:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x0688A480>, 0x0, True) , Command count = 323 ] 
18:17:08: [GO18_globalSetVolt]### Host voltage value is set.
18:17:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:17:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x067C1E40>, 0x0, False) , Command count = 324 ] 
18:17:08: [GO18_globalSetVolt]### Host voltage value is set.
18:17:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:08: Host Frequency set to 25000 KHz
18:17:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:08: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]*********Soft Reset*********
18:17:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 325 ] 
18:17:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:17:08: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:08: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:17:08: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py] ###[INFO] : Reset Compared Passed

18:17:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616E270>, <py_sfcl.CommandDataDefinition object at 0x067C1D20>) , Command count = 326 ] 
18:17:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1F60>, <py_sfcl.CommandDataDefinition object at 0x067C1DE0>) , Command count = 327 ] 
18:17:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:08: [ SetCardRCA(0x1, 0xD555) , Command count = 328 ] 
18:17:08: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:08: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : AddressForWriteRead
18:17:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:17:08: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:17:08: [ SetBusWidth(0x1) , Command count = 329 ] 
18:17:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:08: ####CSD Registe 2.0 Values####
18:17:08: CSD_STRUCTURE                                 :0x1
18:17:08: Reserv1                                       :0x0
18:17:08: Time Access 1 TAAC                            :0xe
18:17:08: Time Access 2 NSAC*100                        :0x0
18:17:08: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:08: Card Command Classess CCC                     :0x5b5
18:17:08: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:08: DSR(driver stage register)  DSR_IMP           :0x0
18:17:08: Reserv2                                       :0x0
18:17:08: Device Size C_SIZE                            :0xedc8
18:17:08: Reserv3                                       :0x0
18:17:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:08: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:08: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:08: Reserv4                                       :0x0
18:17:08: Write Speed Factor R2W_FACTOR                 :0x2
18:17:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:08: FILE_FORMAT_GRP                               :0x0
18:17:08: COPY flag                                     :0x1
18:17:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:08: File_Format                                   :0x0
18:17:08: CRC                                           :0x0
18:17:08: ####CSD Registe Values####  

18:17:08: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:17:08: ProductSerialNumber = 0x23482900
18:17:08: CardMaximumLBA      = 0x3b72400
18:17:08: CardCapacity        = 32G
18:17:08: Is card secure      = 0
18:17:08: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:17:08: [DVTCommonLib]###  LogicalWrite called
18:17:10: [ WriteLba(0x38E8E44, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 330 ] 
18:17:10: [DVTCommonLib]###  LogicalWrite Completed 

18:17:10: [DVTCommonLib]###  LogicalRead called
18:17:11: [ ReadLba(0x38E8E44, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 331 ] 
18:17:11: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:17:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:17:11: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]*********Power Cycle Reset*********
18:17:11: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]POWER : OFF and ON
18:17:13: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : globalSetResetFreq
18:17:13: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
18:17:13: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
18:17:13: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]RUNNING Cmd8, Cmd55, ACmd41 
18:17:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067AF0F0>, <py_sfcl.CommandDataDefinition object at 0x067C7060>) , Command count = 332 ] 
18:17:13: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
18:17:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1C90>, <py_sfcl.CommandDataDefinition object at 0x067C1F00>) , Command count = 333 ] 
18:17:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7270>, <py_sfcl.CommandDataDefinition object at 0x067C7090>) , Command count = 334 ] 
18:17:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C71B0>, <py_sfcl.CommandDataDefinition object at 0x067C1FC0>) , Command count = 335 ] 
18:17:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7180>, <py_sfcl.CommandDataDefinition object at 0x067C1C00>) , Command count = 336 ] 
18:17:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C71E0>, <py_sfcl.CommandDataDefinition object at 0x067C7240>) , Command count = 337 ] 
18:17:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C70F0>, <py_sfcl.CommandDataDefinition object at 0x067C7120>) , Command count = 338 ] 
18:17:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C72A0>, <py_sfcl.CommandDataDefinition object at 0x067C72D0>) , Command count = 339 ] 
18:17:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7330>, <py_sfcl.CommandDataDefinition object at 0x067C7360>) , Command count = 340 ] 
18:17:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C73C0>, <py_sfcl.CommandDataDefinition object at 0x067C73F0>) , Command count = 341 ] 
18:17:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7450>, <py_sfcl.CommandDataDefinition object at 0x067C7480>) , Command count = 342 ] 
18:17:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C74E0>, <py_sfcl.CommandDataDefinition object at 0x067C7510>) , Command count = 343 ] 
18:17:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7570>, <py_sfcl.CommandDataDefinition object at 0x067C75A0>) , Command count = 344 ] 
18:17:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7600>, <py_sfcl.CommandDataDefinition object at 0x067C7630>) , Command count = 345 ] 
18:17:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7690>, <py_sfcl.CommandDataDefinition object at 0x067C76C0>) , Command count = 346 ] 
18:17:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7810>, <py_sfcl.CommandDataDefinition object at 0x067C1CC0>) , Command count = 347 ] 
18:17:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C78A0>, <py_sfcl.CommandDataDefinition object at 0x0688AAB0>) , Command count = 348 ] 
18:17:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7720>, <py_sfcl.CommandDataDefinition object at 0x067C7750>) , Command count = 349 ] 
18:17:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C78D0>, <py_sfcl.CommandDataDefinition object at 0x067C7900>) , Command count = 350 ] 
18:17:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C79F0>, <py_sfcl.CommandDataDefinition object at 0x0688A360>) , Command count = 351 ] 
18:17:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7C00>, <py_sfcl.CommandDataDefinition object at 0x0688A390>) , Command count = 352 ] 
18:17:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0688A7E0>, <py_sfcl.CommandDataDefinition object at 0x0688AE10>) , Command count = 353 ] 
18:17:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0688A960>, <py_sfcl.CommandDataDefinition object at 0x0688AB70>) , Command count = 354 ] 
18:17:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7990>, <py_sfcl.CommandDataDefinition object at 0x067CDF60>) , Command count = 355 ] 
18:17:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067CDF00>, <py_sfcl.CommandDataDefinition object at 0x067CDF30>) , Command count = 356 ] 
18:17:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067CDFC0>, <py_sfcl.CommandDataDefinition object at 0x06819030>) , Command count = 357 ] 
18:17:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819090>, <py_sfcl.CommandDataDefinition object at 0x068190C0>) , Command count = 358 ] 
18:17:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819120>, <py_sfcl.CommandDataDefinition object at 0x06819150>) , Command count = 359 ] 
18:17:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068191B0>, <py_sfcl.CommandDataDefinition object at 0x068191E0>) , Command count = 360 ] 
18:17:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819240>, <py_sfcl.CommandDataDefinition object at 0x06819270>) , Command count = 361 ] 
18:17:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068192D0>, <py_sfcl.CommandDataDefinition object at 0x06819300>) , Command count = 362 ] 
18:17:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 1, 255, 128, 0, 255]
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819360>, <py_sfcl.CommandDataDefinition object at 0x06819390>) , Command count = 363 ] 
18:17:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068193F0>, <py_sfcl.CommandDataDefinition object at 0x06819420>) , Command count = 364 ] 
18:17:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
18:17:14: [ SetCardCap(True) , Command count = 365 ] 
18:17:14: [ SetSdMmcCardMode(0x2, True) , Command count = 366 ] 
18:17:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068195A0>, <py_sfcl.CommandDataDefinition object at 0x068195D0>) , Command count = 367 ] 
18:17:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819630>, <py_sfcl.CommandDataDefinition object at 0x06819660>) , Command count = 368 ] 
18:17:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:14: [ SetCardRCA(0x1, 0xD555) , Command count = 369 ] 
18:17:14: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:14: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : globalSetLSHostFreq
18:17:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:14: Host Frequency set to 25000 KHz
18:17:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:14: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : AddressForWriteRead
18:17:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:17:14: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:17:14: [ SetBusWidth(0x1) , Command count = 370 ] 
18:17:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:14: ####CSD Registe 2.0 Values####
18:17:14: CSD_STRUCTURE                                 :0x1
18:17:14: Reserv1                                       :0x0
18:17:14: Time Access 1 TAAC                            :0xe
18:17:14: Time Access 2 NSAC*100                        :0x0
18:17:14: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:14: Card Command Classess CCC                     :0x5b5
18:17:14: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:14: DSR(driver stage register)  DSR_IMP           :0x0
18:17:14: Reserv2                                       :0x0
18:17:14: Device Size C_SIZE                            :0xedc8
18:17:14: Reserv3                                       :0x0
18:17:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:14: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:14: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:14: Reserv4                                       :0x0
18:17:14: Write Speed Factor R2W_FACTOR                 :0x2
18:17:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:14: FILE_FORMAT_GRP                               :0x0
18:17:14: COPY flag                                     :0x1
18:17:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:14: File_Format                                   :0x0
18:17:14: CRC                                           :0x0
18:17:14: ####CSD Registe Values####  

18:17:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:17:14: ProductSerialNumber = 0x23482900
18:17:14: CardMaximumLBA      = 0x3b72400
18:17:14: CardCapacity        = 32G
18:17:14: Is card secure      = 0
18:17:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:17:14: [DVTCommonLib]###  LogicalWrite called
18:17:15: [ WriteLba(0x2D16538, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 371 ] 
18:17:15: [DVTCommonLib]###  LogicalWrite Completed 

18:17:15: [DVTCommonLib]###  LogicalRead called
18:17:17: [ ReadLba(0x2D16538, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 372 ] 
18:17:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:17:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:17:17: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]*********Power Cycle & CMD 0 Reset*********
18:17:17: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]POWER : OFF and ON
18:17:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 373 ] 
18:17:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:19: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:19: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py] ###[INFO] : Reset Compared Passed

18:17:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1390>, <py_sfcl.CommandDataDefinition object at 0x06819990>) , Command count = 374 ] 
18:17:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819A20>, <py_sfcl.CommandDataDefinition object at 0x06819A50>) , Command count = 375 ] 
18:17:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:19: [ SetCardRCA(0x1, 0xD555) , Command count = 376 ] 
18:17:19: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:19: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : AddressForWriteRead
18:17:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:17:19: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:17:19: [ SetBusWidth(0x1) , Command count = 377 ] 
18:17:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:19: ####CSD Registe 2.0 Values####
18:17:19: CSD_STRUCTURE                                 :0x1
18:17:19: Reserv1                                       :0x0
18:17:19: Time Access 1 TAAC                            :0xe
18:17:19: Time Access 2 NSAC*100                        :0x0
18:17:19: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:19: Card Command Classess CCC                     :0x5b5
18:17:19: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:19: DSR(driver stage register)  DSR_IMP           :0x0
18:17:19: Reserv2                                       :0x0
18:17:19: Device Size C_SIZE                            :0xedc8
18:17:19: Reserv3                                       :0x0
18:17:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:19: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:19: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:19: Reserv4                                       :0x0
18:17:19: Write Speed Factor R2W_FACTOR                 :0x2
18:17:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:19: FILE_FORMAT_GRP                               :0x0
18:17:19: COPY flag                                     :0x1
18:17:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:19: File_Format                                   :0x0
18:17:19: CRC                                           :0x0
18:17:19: ####CSD Registe Values####  

18:17:19: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:17:19: ProductSerialNumber = 0x23482900
18:17:19: CardMaximumLBA      = 0x3b72400
18:17:19: CardCapacity        = 32G
18:17:19: Is card secure      = 0
18:17:19: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:17:19: [DVTCommonLib]###  LogicalWrite called
18:17:21: [ WriteLba(0x2069704, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 378 ] 
18:17:21: [DVTCommonLib]###  LogicalWrite Completed 

18:17:21: [DVTCommonLib]###  LogicalRead called
18:17:22: [ ReadLba(0x2069704, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 379 ] 
18:17:22: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:17:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:17:22: [RT2HCSD35_1_1_1_3.py]***Test Pattern Filed in Soft Reset***
18:17:22: [RT2HCSD35_1_1_1_3.py]CALL : globalSetLSHostFreq
18:17:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:17:23: Host Frequency set to 25000 KHz
18:17:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:17:23: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 0 times 

18:17:23: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:17:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 380 ] 
18:17:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:23: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819D80>, <py_sfcl.CommandDataDefinition object at 0x06819DB0>) , Command count = 381 ] 
18:17:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06819E10>, <py_sfcl.CommandDataDefinition object at 0x06819E40>) , Command count = 382 ] 
18:17:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:23: [ SetCardRCA(0x1, 0xD555) , Command count = 383 ] 
18:17:23: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:23: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:17:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:17:23: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:17:23: [ SetBusWidth(0x1) , Command count = 384 ] 
18:17:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:23: ####CSD Registe 2.0 Values####
18:17:23: CSD_STRUCTURE                                 :0x1
18:17:23: Reserv1                                       :0x0
18:17:23: Time Access 1 TAAC                            :0xe
18:17:23: Time Access 2 NSAC*100                        :0x0
18:17:23: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:23: Card Command Classess CCC                     :0x5b5
18:17:23: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:23: DSR(driver stage register)  DSR_IMP           :0x0
18:17:23: Reserv2                                       :0x0
18:17:23: Device Size C_SIZE                            :0xedc8
18:17:23: Reserv3                                       :0x0
18:17:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:23: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:23: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:23: Reserv4                                       :0x0
18:17:23: Write Speed Factor R2W_FACTOR                 :0x2
18:17:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:23: FILE_FORMAT_GRP                               :0x0
18:17:23: COPY flag                                     :0x1
18:17:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:23: File_Format                                   :0x0
18:17:23: CRC                                           :0x0
18:17:23: ####CSD Registe Values####  

18:17:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:17:23: ProductSerialNumber = 0x23482900
18:17:23: CardMaximumLBA      = 0x3b72400
18:17:23: CardCapacity        = 32G
18:17:23: Is card secure      = 0
18:17:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:17:23: [DVTCommonLib]###  LogicalWrite called
18:17:24: [ WriteLba(0x20CF2A8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 385 ] 
18:17:24: [DVTCommonLib]###  LogicalWrite Completed 

18:17:24: [DVTCommonLib]###  LogicalRead called
18:17:26: [ ReadLba(0x20CF2A8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 386 ] 
18:17:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:17:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:17:26: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 1 times 

18:17:26: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:17:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 387 ] 
18:17:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:26: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B240>, <py_sfcl.CommandDataDefinition object at 0x0681B210>) , Command count = 388 ] 
18:17:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B270>, <py_sfcl.CommandDataDefinition object at 0x06819E10>) , Command count = 389 ] 
18:17:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:26: [ SetCardRCA(0x1, 0xD555) , Command count = 390 ] 
18:17:26: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:26: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:17:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:17:26: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:17:26: [ SetBusWidth(0x1) , Command count = 391 ] 
18:17:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:26: ####CSD Registe 2.0 Values####
18:17:26: CSD_STRUCTURE                                 :0x1
18:17:26: Reserv1                                       :0x0
18:17:26: Time Access 1 TAAC                            :0xe
18:17:26: Time Access 2 NSAC*100                        :0x0
18:17:26: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:26: Card Command Classess CCC                     :0x5b5
18:17:26: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:26: DSR(driver stage register)  DSR_IMP           :0x0
18:17:26: Reserv2                                       :0x0
18:17:26: Device Size C_SIZE                            :0xedc8
18:17:26: Reserv3                                       :0x0
18:17:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:26: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:26: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:26: Reserv4                                       :0x0
18:17:26: Write Speed Factor R2W_FACTOR                 :0x2
18:17:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:26: FILE_FORMAT_GRP                               :0x0
18:17:26: COPY flag                                     :0x1
18:17:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:26: File_Format                                   :0x0
18:17:26: CRC                                           :0x0
18:17:26: ####CSD Registe Values####  

18:17:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:17:26: ProductSerialNumber = 0x23482900
18:17:26: CardMaximumLBA      = 0x3b72400
18:17:26: CardCapacity        = 32G
18:17:26: Is card secure      = 0
18:17:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:17:26: [DVTCommonLib]###  LogicalWrite called
18:17:28: [ WriteLba(0x328926E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 392 ] 
18:17:28: [DVTCommonLib]###  LogicalWrite Completed 

18:17:28: [DVTCommonLib]###  LogicalRead called
18:17:29: [ ReadLba(0x328926E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 393 ] 
18:17:29: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:17:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:17:29: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 2 times 

18:17:29: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:17:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 394 ] 
18:17:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:29: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B120>, <py_sfcl.CommandDataDefinition object at 0x0681B2A0>) , Command count = 395 ] 
18:17:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B330>, <py_sfcl.CommandDataDefinition object at 0x0681B360>) , Command count = 396 ] 
18:17:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:29: [ SetCardRCA(0x1, 0xD555) , Command count = 397 ] 
18:17:29: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:29: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:17:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:17:29: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:17:29: [ SetBusWidth(0x1) , Command count = 398 ] 
18:17:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:29: ####CSD Registe 2.0 Values####
18:17:29: CSD_STRUCTURE                                 :0x1
18:17:29: Reserv1                                       :0x0
18:17:29: Time Access 1 TAAC                            :0xe
18:17:29: Time Access 2 NSAC*100                        :0x0
18:17:29: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:29: Card Command Classess CCC                     :0x5b5
18:17:29: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:29: DSR(driver stage register)  DSR_IMP           :0x0
18:17:29: Reserv2                                       :0x0
18:17:29: Device Size C_SIZE                            :0xedc8
18:17:29: Reserv3                                       :0x0
18:17:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:29: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:29: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:29: Reserv4                                       :0x0
18:17:29: Write Speed Factor R2W_FACTOR                 :0x2
18:17:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:29: FILE_FORMAT_GRP                               :0x0
18:17:29: COPY flag                                     :0x1
18:17:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:29: File_Format                                   :0x0
18:17:29: CRC                                           :0x0
18:17:29: ####CSD Registe Values####  

18:17:29: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:17:29: ProductSerialNumber = 0x23482900
18:17:29: CardMaximumLBA      = 0x3b72400
18:17:29: CardCapacity        = 32G
18:17:29: Is card secure      = 0
18:17:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:17:29: [DVTCommonLib]###  LogicalWrite called
18:17:31: [ WriteLba(0x33B654B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 399 ] 
18:17:31: [DVTCommonLib]###  LogicalWrite Completed 

18:17:31: [DVTCommonLib]###  LogicalRead called
18:17:33: [ ReadLba(0x33B654B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 400 ] 
18:17:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:17:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:17:33: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 3 times 

18:17:33: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:17:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 401 ] 
18:17:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:33: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7DB0>, <py_sfcl.CommandDataDefinition object at 0x0681B720>) , Command count = 402 ] 
18:17:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B7B0>, <py_sfcl.CommandDataDefinition object at 0x0681B7E0>) , Command count = 403 ] 
18:17:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:33: [ SetCardRCA(0x1, 0xD555) , Command count = 404 ] 
18:17:33: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:33: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:17:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:17:33: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:17:33: [ SetBusWidth(0x1) , Command count = 405 ] 
18:17:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:33: ####CSD Registe 2.0 Values####
18:17:33: CSD_STRUCTURE                                 :0x1
18:17:33: Reserv1                                       :0x0
18:17:33: Time Access 1 TAAC                            :0xe
18:17:33: Time Access 2 NSAC*100                        :0x0
18:17:33: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:33: Card Command Classess CCC                     :0x5b5
18:17:33: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:33: DSR(driver stage register)  DSR_IMP           :0x0
18:17:33: Reserv2                                       :0x0
18:17:33: Device Size C_SIZE                            :0xedc8
18:17:33: Reserv3                                       :0x0
18:17:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:33: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:33: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:33: Reserv4                                       :0x0
18:17:33: Write Speed Factor R2W_FACTOR                 :0x2
18:17:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:33: FILE_FORMAT_GRP                               :0x0
18:17:33: COPY flag                                     :0x1
18:17:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:33: File_Format                                   :0x0
18:17:33: CRC                                           :0x0
18:17:33: ####CSD Registe Values####  

18:17:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:17:33: ProductSerialNumber = 0x23482900
18:17:33: CardMaximumLBA      = 0x3b72400
18:17:33: CardCapacity        = 32G
18:17:33: Is card secure      = 0
18:17:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:17:33: [DVTCommonLib]###  LogicalWrite called
18:17:35: [ WriteLba(0x29EC362, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 406 ] 
18:17:35: [DVTCommonLib]###  LogicalWrite Completed 

18:17:35: [DVTCommonLib]###  LogicalRead called
18:17:36: [ ReadLba(0x29EC362, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 407 ] 
18:17:36: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:17:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:17:36: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 4 times 

18:17:36: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:17:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 408 ] 
18:17:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:36: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681B690>, <py_sfcl.CommandDataDefinition object at 0x0681BB10>) , Command count = 409 ] 
18:17:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0681BBA0>, <py_sfcl.CommandDataDefinition object at 0x0681BBD0>) , Command count = 410 ] 
18:17:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:36: [ SetCardRCA(0x1, 0xD555) , Command count = 411 ] 
18:17:36: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:36: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:17:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:17:36: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:17:36: [ SetBusWidth(0x1) , Command count = 412 ] 
18:17:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:36: ####CSD Registe 2.0 Values####
18:17:36: CSD_STRUCTURE                                 :0x1
18:17:36: Reserv1                                       :0x0
18:17:36: Time Access 1 TAAC                            :0xe
18:17:36: Time Access 2 NSAC*100                        :0x0
18:17:36: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:36: Card Command Classess CCC                     :0x5b5
18:17:36: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:36: DSR(driver stage register)  DSR_IMP           :0x0
18:17:36: Reserv2                                       :0x0
18:17:36: Device Size C_SIZE                            :0xedc8
18:17:36: Reserv3                                       :0x0
18:17:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:36: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:36: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:36: Reserv4                                       :0x0
18:17:36: Write Speed Factor R2W_FACTOR                 :0x2
18:17:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:36: FILE_FORMAT_GRP                               :0x0
18:17:36: COPY flag                                     :0x1
18:17:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:36: File_Format                                   :0x0
18:17:36: CRC                                           :0x0
18:17:36: ####CSD Registe Values####  

18:17:36: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:17:36: ProductSerialNumber = 0x23482900
18:17:36: CardMaximumLBA      = 0x3b72400
18:17:36: CardCapacity        = 32G
18:17:36: Is card secure      = 0
18:17:36: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:17:36: [DVTCommonLib]###  LogicalWrite called
18:17:38: [ WriteLba(0x3884ABE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 413 ] 
18:17:38: [DVTCommonLib]###  LogicalWrite Completed 

18:17:38: [DVTCommonLib]###  LogicalRead called
18:17:40: [ ReadLba(0x3884ABE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 414 ] 
18:17:40: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:17:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:17:40: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 5 times 

18:17:40: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:17:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 415 ] 
18:17:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:40: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7B10>, <py_sfcl.CommandDataDefinition object at 0x06820030>) , Command count = 416 ] 
18:17:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068200C0>, <py_sfcl.CommandDataDefinition object at 0x0681BF90>) , Command count = 417 ] 
18:17:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:40: [ SetCardRCA(0x1, 0xD555) , Command count = 418 ] 
18:17:40: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:40: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:17:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:17:40: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:17:40: [ SetBusWidth(0x1) , Command count = 419 ] 
18:17:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:40: ####CSD Registe 2.0 Values####
18:17:40: CSD_STRUCTURE                                 :0x1
18:17:40: Reserv1                                       :0x0
18:17:40: Time Access 1 TAAC                            :0xe
18:17:40: Time Access 2 NSAC*100                        :0x0
18:17:40: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:40: Card Command Classess CCC                     :0x5b5
18:17:40: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:40: DSR(driver stage register)  DSR_IMP           :0x0
18:17:40: Reserv2                                       :0x0
18:17:40: Device Size C_SIZE                            :0xedc8
18:17:40: Reserv3                                       :0x0
18:17:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:40: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:40: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:40: Reserv4                                       :0x0
18:17:40: Write Speed Factor R2W_FACTOR                 :0x2
18:17:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:40: FILE_FORMAT_GRP                               :0x0
18:17:40: COPY flag                                     :0x1
18:17:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:40: File_Format                                   :0x0
18:17:40: CRC                                           :0x0
18:17:40: ####CSD Registe Values####  

18:17:40: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:17:40: ProductSerialNumber = 0x23482900
18:17:40: CardMaximumLBA      = 0x3b72400
18:17:40: CardCapacity        = 32G
18:17:40: Is card secure      = 0
18:17:40: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:17:40: [DVTCommonLib]###  LogicalWrite called
18:17:42: [ WriteLba(0x226BA30, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 420 ] 
18:17:42: [DVTCommonLib]###  LogicalWrite Completed 

18:17:42: [DVTCommonLib]###  LogicalRead called
18:17:43: [ ReadLba(0x226BA30, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 421 ] 
18:17:43: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:17:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:17:43: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 6 times 

18:17:43: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:17:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 422 ] 
18:17:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:43: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06820330>, <py_sfcl.CommandDataDefinition object at 0x06820360>) , Command count = 423 ] 
18:17:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068203C0>, <py_sfcl.CommandDataDefinition object at 0x068203F0>) , Command count = 424 ] 
18:17:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:43: [ SetCardRCA(0x1, 0xD555) , Command count = 425 ] 
18:17:43: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:43: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:17:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:17:43: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:17:43: [ SetBusWidth(0x1) , Command count = 426 ] 
18:17:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:43: ####CSD Registe 2.0 Values####
18:17:43: CSD_STRUCTURE                                 :0x1
18:17:43: Reserv1                                       :0x0
18:17:43: Time Access 1 TAAC                            :0xe
18:17:43: Time Access 2 NSAC*100                        :0x0
18:17:43: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:43: Card Command Classess CCC                     :0x5b5
18:17:43: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:43: DSR(driver stage register)  DSR_IMP           :0x0
18:17:43: Reserv2                                       :0x0
18:17:43: Device Size C_SIZE                            :0xedc8
18:17:43: Reserv3                                       :0x0
18:17:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:43: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:43: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:43: Reserv4                                       :0x0
18:17:43: Write Speed Factor R2W_FACTOR                 :0x2
18:17:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:43: FILE_FORMAT_GRP                               :0x0
18:17:43: COPY flag                                     :0x1
18:17:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:43: File_Format                                   :0x0
18:17:43: CRC                                           :0x0
18:17:43: ####CSD Registe Values####  

18:17:43: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:17:43: ProductSerialNumber = 0x23482900
18:17:43: CardMaximumLBA      = 0x3b72400
18:17:43: CardCapacity        = 32G
18:17:43: Is card secure      = 0
18:17:43: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:17:43: [DVTCommonLib]###  LogicalWrite called
18:17:45: [ WriteLba(0x23867DC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 427 ] 
18:17:45: [DVTCommonLib]###  LogicalWrite Completed 

18:17:45: [DVTCommonLib]###  LogicalRead called
18:17:47: [ ReadLba(0x23867DC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 428 ] 
18:17:47: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:17:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:17:47: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 7 times 

18:17:47: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:17:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 429 ] 
18:17:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068202A0>, <py_sfcl.CommandDataDefinition object at 0x06820750>) , Command count = 430 ] 
18:17:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06820690>, <py_sfcl.CommandDataDefinition object at 0x068206C0>) , Command count = 431 ] 
18:17:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:47: [ SetCardRCA(0x1, 0xD555) , Command count = 432 ] 
18:17:47: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:47: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:17:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:17:47: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:17:47: [ SetBusWidth(0x1) , Command count = 433 ] 
18:17:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:47: ####CSD Registe 2.0 Values####
18:17:47: CSD_STRUCTURE                                 :0x1
18:17:47: Reserv1                                       :0x0
18:17:47: Time Access 1 TAAC                            :0xe
18:17:47: Time Access 2 NSAC*100                        :0x0
18:17:47: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:47: Card Command Classess CCC                     :0x5b5
18:17:47: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:47: DSR(driver stage register)  DSR_IMP           :0x0
18:17:47: Reserv2                                       :0x0
18:17:47: Device Size C_SIZE                            :0xedc8
18:17:47: Reserv3                                       :0x0
18:17:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:47: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:47: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:47: Reserv4                                       :0x0
18:17:47: Write Speed Factor R2W_FACTOR                 :0x2
18:17:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:47: FILE_FORMAT_GRP                               :0x0
18:17:47: COPY flag                                     :0x1
18:17:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:47: File_Format                                   :0x0
18:17:47: CRC                                           :0x0
18:17:47: ####CSD Registe Values####  

18:17:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:17:47: ProductSerialNumber = 0x23482900
18:17:47: CardMaximumLBA      = 0x3b72400
18:17:47: CardCapacity        = 32G
18:17:47: Is card secure      = 0
18:17:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:17:47: [DVTCommonLib]###  LogicalWrite called
18:17:49: [ WriteLba(0x34CE9BF, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 434 ] 
18:17:49: [DVTCommonLib]###  LogicalWrite Completed 

18:17:49: [DVTCommonLib]###  LogicalRead called
18:17:50: [ ReadLba(0x34CE9BF, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 435 ] 
18:17:50: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:17:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:17:50: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 8 times 

18:17:50: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:17:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 436 ] 
18:17:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:50: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06820720>, <py_sfcl.CommandDataDefinition object at 0x06820A50>) , Command count = 437 ] 
18:17:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06820F60>, <py_sfcl.CommandDataDefinition object at 0x06820F00>) , Command count = 438 ] 
18:17:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:50: [ SetCardRCA(0x1, 0xD555) , Command count = 439 ] 
18:17:50: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:50: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:17:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:17:50: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:17:50: [ SetBusWidth(0x1) , Command count = 440 ] 
18:17:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:50: ####CSD Registe 2.0 Values####
18:17:50: CSD_STRUCTURE                                 :0x1
18:17:50: Reserv1                                       :0x0
18:17:50: Time Access 1 TAAC                            :0xe
18:17:50: Time Access 2 NSAC*100                        :0x0
18:17:50: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:50: Card Command Classess CCC                     :0x5b5
18:17:50: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:50: DSR(driver stage register)  DSR_IMP           :0x0
18:17:50: Reserv2                                       :0x0
18:17:50: Device Size C_SIZE                            :0xedc8
18:17:50: Reserv3                                       :0x0
18:17:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:50: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:50: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:50: Reserv4                                       :0x0
18:17:50: Write Speed Factor R2W_FACTOR                 :0x2
18:17:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:50: FILE_FORMAT_GRP                               :0x0
18:17:50: COPY flag                                     :0x1
18:17:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:50: File_Format                                   :0x0
18:17:50: CRC                                           :0x0
18:17:50: ####CSD Registe Values####  

18:17:50: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:17:50: ProductSerialNumber = 0x23482900
18:17:50: CardMaximumLBA      = 0x3b72400
18:17:50: CardCapacity        = 32G
18:17:50: Is card secure      = 0
18:17:50: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:17:50: [DVTCommonLib]###  LogicalWrite called
18:17:52: [ WriteLba(0x681FAC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 441 ] 
18:17:52: [DVTCommonLib]###  LogicalWrite Completed 

18:17:52: [DVTCommonLib]###  LogicalRead called
18:17:54: [ ReadLba(0x681FAC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 442 ] 
18:17:54: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:17:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:17:54: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 9 times 

18:17:54: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:17:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 443 ] 
18:17:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823030>, <py_sfcl.CommandDataDefinition object at 0x068207B0>) , Command count = 444 ] 
18:17:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823090>, <py_sfcl.CommandDataDefinition object at 0x06820D50>) , Command count = 445 ] 
18:17:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:54: [ SetCardRCA(0x1, 0xD555) , Command count = 446 ] 
18:17:54: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:54: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:17:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:17:54: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:17:54: [ SetBusWidth(0x1) , Command count = 447 ] 
18:17:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:54: ####CSD Registe 2.0 Values####
18:17:54: CSD_STRUCTURE                                 :0x1
18:17:54: Reserv1                                       :0x0
18:17:54: Time Access 1 TAAC                            :0xe
18:17:54: Time Access 2 NSAC*100                        :0x0
18:17:54: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:54: Card Command Classess CCC                     :0x5b5
18:17:54: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:54: DSR(driver stage register)  DSR_IMP           :0x0
18:17:54: Reserv2                                       :0x0
18:17:54: Device Size C_SIZE                            :0xedc8
18:17:54: Reserv3                                       :0x0
18:17:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:54: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:54: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:54: Reserv4                                       :0x0
18:17:54: Write Speed Factor R2W_FACTOR                 :0x2
18:17:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:54: FILE_FORMAT_GRP                               :0x0
18:17:54: COPY flag                                     :0x1
18:17:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:54: File_Format                                   :0x0
18:17:54: CRC                                           :0x0
18:17:54: ####CSD Registe Values####  

18:17:54: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:17:54: ProductSerialNumber = 0x23482900
18:17:54: CardMaximumLBA      = 0x3b72400
18:17:54: CardCapacity        = 32G
18:17:54: Is card secure      = 0
18:17:54: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:17:54: [DVTCommonLib]###  LogicalWrite called
18:17:56: [ WriteLba(0x137A84B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 448 ] 
18:17:56: [DVTCommonLib]###  LogicalWrite Completed 

18:17:56: [DVTCommonLib]###  LogicalRead called
18:17:57: [ ReadLba(0x137A84B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 449 ] 
18:17:57: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:17:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:17:57: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 10 times 

18:17:57: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:17:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:17:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 450 ] 
18:17:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:17:57: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:17:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:17:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:17:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:17:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068234B0>, <py_sfcl.CommandDataDefinition object at 0x068232D0>) , Command count = 451 ] 
18:17:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:17:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068233F0>, <py_sfcl.CommandDataDefinition object at 0x06823120>) , Command count = 452 ] 
18:17:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:17:57: [ SetCardRCA(0x1, 0xD555) , Command count = 453 ] 
18:17:57: [DVTCommonLib]### Identification :Idenfication of card completed 

18:17:57: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:17:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:17:57: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:17:57: [ SetBusWidth(0x1) , Command count = 454 ] 
18:17:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:17:57: ####CSD Registe 2.0 Values####
18:17:57: CSD_STRUCTURE                                 :0x1
18:17:57: Reserv1                                       :0x0
18:17:57: Time Access 1 TAAC                            :0xe
18:17:57: Time Access 2 NSAC*100                        :0x0
18:17:57: Data Transfer Rate TRAN_SPEED                 :0x32
18:17:57: Card Command Classess CCC                     :0x5b5
18:17:57: Max Read Data Block Length  READ_BL_LEN       :0x9
18:17:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:17:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:17:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:17:57: DSR(driver stage register)  DSR_IMP           :0x0
18:17:57: Reserv2                                       :0x0
18:17:57: Device Size C_SIZE                            :0xedc8
18:17:57: Reserv3                                       :0x0
18:17:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:17:57: Erase Sector Size SECTOR_SIZE                 :0x7f
18:17:57: Write Protect Group Size WP_GRP_SIZE          :0x0
18:17:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:17:57: Reserv4                                       :0x0
18:17:57: Write Speed Factor R2W_FACTOR                 :0x2
18:17:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:17:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:17:57: FILE_FORMAT_GRP                               :0x0
18:17:57: COPY flag                                     :0x1
18:17:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:17:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:17:57: File_Format                                   :0x0
18:17:57: CRC                                           :0x0
18:17:57: ####CSD Registe Values####  

18:17:57: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:17:57: ProductSerialNumber = 0x23482900
18:17:57: CardMaximumLBA      = 0x3b72400
18:17:57: CardCapacity        = 32G
18:17:57: Is card secure      = 0
18:17:57: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:17:57: [DVTCommonLib]###  LogicalWrite called
18:17:59: [ WriteLba(0x329627C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 455 ] 
18:17:59: [DVTCommonLib]###  LogicalWrite Completed 

18:17:59: [DVTCommonLib]###  LogicalRead called
18:18:01: [ ReadLba(0x329627C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 456 ] 
18:18:01: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:18:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:18:01: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 11 times 

18:18:01: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:18:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 457 ] 
18:18:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:01: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068230C0>, <py_sfcl.CommandDataDefinition object at 0x06823600>) , Command count = 458 ] 
18:18:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823690>, <py_sfcl.CommandDataDefinition object at 0x068236C0>) , Command count = 459 ] 
18:18:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:01: [ SetCardRCA(0x1, 0xD555) , Command count = 460 ] 
18:18:01: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:01: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:18:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:18:01: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:18:01: [ SetBusWidth(0x1) , Command count = 461 ] 
18:18:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:01: ####CSD Registe 2.0 Values####
18:18:01: CSD_STRUCTURE                                 :0x1
18:18:01: Reserv1                                       :0x0
18:18:01: Time Access 1 TAAC                            :0xe
18:18:01: Time Access 2 NSAC*100                        :0x0
18:18:01: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:01: Card Command Classess CCC                     :0x5b5
18:18:01: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:01: DSR(driver stage register)  DSR_IMP           :0x0
18:18:01: Reserv2                                       :0x0
18:18:01: Device Size C_SIZE                            :0xedc8
18:18:01: Reserv3                                       :0x0
18:18:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:01: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:01: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:01: Reserv4                                       :0x0
18:18:01: Write Speed Factor R2W_FACTOR                 :0x2
18:18:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:01: FILE_FORMAT_GRP                               :0x0
18:18:01: COPY flag                                     :0x1
18:18:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:01: File_Format                                   :0x0
18:18:01: CRC                                           :0x0
18:18:01: ####CSD Registe Values####  

18:18:01: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:18:01: ProductSerialNumber = 0x23482900
18:18:01: CardMaximumLBA      = 0x3b72400
18:18:01: CardCapacity        = 32G
18:18:01: Is card secure      = 0
18:18:01: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:18:01: [DVTCommonLib]###  LogicalWrite called
18:18:02: [ WriteLba(0x14E8BE0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 462 ] 
18:18:02: [DVTCommonLib]###  LogicalWrite Completed 

18:18:02: [DVTCommonLib]###  LogicalRead called
18:18:04: [ ReadLba(0x14E8BE0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 463 ] 
18:18:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:18:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:18:04: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 12 times 

18:18:04: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:18:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 464 ] 
18:18:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:04: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823570>, <py_sfcl.CommandDataDefinition object at 0x06823A20>) , Command count = 465 ] 
18:18:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823960>, <py_sfcl.CommandDataDefinition object at 0x06823990>) , Command count = 466 ] 
18:18:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:04: [ SetCardRCA(0x1, 0xD555) , Command count = 467 ] 
18:18:04: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:04: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:18:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:18:04: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:18:04: [ SetBusWidth(0x1) , Command count = 468 ] 
18:18:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:04: ####CSD Registe 2.0 Values####
18:18:04: CSD_STRUCTURE                                 :0x1
18:18:04: Reserv1                                       :0x0
18:18:04: Time Access 1 TAAC                            :0xe
18:18:04: Time Access 2 NSAC*100                        :0x0
18:18:04: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:04: Card Command Classess CCC                     :0x5b5
18:18:04: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:04: DSR(driver stage register)  DSR_IMP           :0x0
18:18:04: Reserv2                                       :0x0
18:18:04: Device Size C_SIZE                            :0xedc8
18:18:04: Reserv3                                       :0x0
18:18:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:04: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:04: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:04: Reserv4                                       :0x0
18:18:04: Write Speed Factor R2W_FACTOR                 :0x2
18:18:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:04: FILE_FORMAT_GRP                               :0x0
18:18:04: COPY flag                                     :0x1
18:18:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:04: File_Format                                   :0x0
18:18:04: CRC                                           :0x0
18:18:04: ####CSD Registe Values####  

18:18:04: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:18:04: ProductSerialNumber = 0x23482900
18:18:04: CardMaximumLBA      = 0x3b72400
18:18:04: CardCapacity        = 32G
18:18:04: Is card secure      = 0
18:18:04: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:18:04: [DVTCommonLib]###  LogicalWrite called
18:18:06: [ WriteLba(0x1CB2639, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 469 ] 
18:18:06: [DVTCommonLib]###  LogicalWrite Completed 

18:18:06: [DVTCommonLib]###  LogicalRead called
18:18:07: [ ReadLba(0x1CB2639, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 470 ] 
18:18:07: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:18:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:18:07: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 13 times 

18:18:07: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:18:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 471 ] 
18:18:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:07: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068239F0>, <py_sfcl.CommandDataDefinition object at 0x06823AE0>) , Command count = 472 ] 
18:18:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823BD0>, <py_sfcl.CommandDataDefinition object at 0x06823C00>) , Command count = 473 ] 
18:18:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:08: [ SetCardRCA(0x1, 0xD555) , Command count = 474 ] 
18:18:08: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:08: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:18:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:18:08: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:18:08: [ SetBusWidth(0x1) , Command count = 475 ] 
18:18:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:08: ####CSD Registe 2.0 Values####
18:18:08: CSD_STRUCTURE                                 :0x1
18:18:08: Reserv1                                       :0x0
18:18:08: Time Access 1 TAAC                            :0xe
18:18:08: Time Access 2 NSAC*100                        :0x0
18:18:08: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:08: Card Command Classess CCC                     :0x5b5
18:18:08: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:08: DSR(driver stage register)  DSR_IMP           :0x0
18:18:08: Reserv2                                       :0x0
18:18:08: Device Size C_SIZE                            :0xedc8
18:18:08: Reserv3                                       :0x0
18:18:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:08: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:08: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:08: Reserv4                                       :0x0
18:18:08: Write Speed Factor R2W_FACTOR                 :0x2
18:18:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:08: FILE_FORMAT_GRP                               :0x0
18:18:08: COPY flag                                     :0x1
18:18:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:08: File_Format                                   :0x0
18:18:08: CRC                                           :0x0
18:18:08: ####CSD Registe Values####  

18:18:08: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:18:08: ProductSerialNumber = 0x23482900
18:18:08: CardMaximumLBA      = 0x3b72400
18:18:08: CardCapacity        = 32G
18:18:08: Is card secure      = 0
18:18:08: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:18:08: [DVTCommonLib]###  LogicalWrite called
18:18:09: [ WriteLba(0x1DD91A2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 476 ] 
18:18:09: [DVTCommonLib]###  LogicalWrite Completed 

18:18:09: [DVTCommonLib]###  LogicalRead called
18:18:11: [ ReadLba(0x1DD91A2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 477 ] 
18:18:11: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:18:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:18:11: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 14 times 

18:18:11: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:18:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 478 ] 
18:18:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:11: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C0C0>, <py_sfcl.CommandDataDefinition object at 0x06823A80>) , Command count = 479 ] 
18:18:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C060>, <py_sfcl.CommandDataDefinition object at 0x0682C090>) , Command count = 480 ] 
18:18:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:11: [ SetCardRCA(0x1, 0xD555) , Command count = 481 ] 
18:18:11: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:11: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:18:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:18:11: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:18:11: [ SetBusWidth(0x1) , Command count = 482 ] 
18:18:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:11: ####CSD Registe 2.0 Values####
18:18:11: CSD_STRUCTURE                                 :0x1
18:18:11: Reserv1                                       :0x0
18:18:11: Time Access 1 TAAC                            :0xe
18:18:11: Time Access 2 NSAC*100                        :0x0
18:18:11: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:11: Card Command Classess CCC                     :0x5b5
18:18:11: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:11: DSR(driver stage register)  DSR_IMP           :0x0
18:18:11: Reserv2                                       :0x0
18:18:11: Device Size C_SIZE                            :0xedc8
18:18:11: Reserv3                                       :0x0
18:18:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:11: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:11: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:11: Reserv4                                       :0x0
18:18:11: Write Speed Factor R2W_FACTOR                 :0x2
18:18:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:11: FILE_FORMAT_GRP                               :0x0
18:18:11: COPY flag                                     :0x1
18:18:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:11: File_Format                                   :0x0
18:18:11: CRC                                           :0x0
18:18:11: ####CSD Registe Values####  

18:18:11: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:18:11: ProductSerialNumber = 0x23482900
18:18:11: CardMaximumLBA      = 0x3b72400
18:18:11: CardCapacity        = 32G
18:18:11: Is card secure      = 0
18:18:11: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:18:11: [DVTCommonLib]###  LogicalWrite called
18:18:13: [ WriteLba(0x23096A5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 483 ] 
18:18:13: [DVTCommonLib]###  LogicalWrite Completed 

18:18:13: [DVTCommonLib]###  LogicalRead called
18:18:14: [ ReadLba(0x23096A5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 484 ] 
18:18:14: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:18:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:18:14: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 15 times 

18:18:14: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:18:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 485 ] 
18:18:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:14: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C030>, <py_sfcl.CommandDataDefinition object at 0x0682C3C0>) , Command count = 486 ] 
18:18:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C450>, <py_sfcl.CommandDataDefinition object at 0x0682C480>) , Command count = 487 ] 
18:18:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:14: [ SetCardRCA(0x1, 0xD555) , Command count = 488 ] 
18:18:14: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:14: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:18:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:18:14: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:18:14: [ SetBusWidth(0x1) , Command count = 489 ] 
18:18:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:14: ####CSD Registe 2.0 Values####
18:18:14: CSD_STRUCTURE                                 :0x1
18:18:14: Reserv1                                       :0x0
18:18:14: Time Access 1 TAAC                            :0xe
18:18:14: Time Access 2 NSAC*100                        :0x0
18:18:14: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:14: Card Command Classess CCC                     :0x5b5
18:18:14: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:14: DSR(driver stage register)  DSR_IMP           :0x0
18:18:14: Reserv2                                       :0x0
18:18:14: Device Size C_SIZE                            :0xedc8
18:18:14: Reserv3                                       :0x0
18:18:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:14: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:14: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:14: Reserv4                                       :0x0
18:18:14: Write Speed Factor R2W_FACTOR                 :0x2
18:18:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:14: FILE_FORMAT_GRP                               :0x0
18:18:14: COPY flag                                     :0x1
18:18:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:14: File_Format                                   :0x0
18:18:14: CRC                                           :0x0
18:18:14: ####CSD Registe Values####  

18:18:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:18:14: ProductSerialNumber = 0x23482900
18:18:14: CardMaximumLBA      = 0x3b72400
18:18:14: CardCapacity        = 32G
18:18:14: Is card secure      = 0
18:18:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:18:14: [DVTCommonLib]###  LogicalWrite called
18:18:16: [ WriteLba(0x261252D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 490 ] 
18:18:16: [DVTCommonLib]###  LogicalWrite Completed 

18:18:16: [DVTCommonLib]###  LogicalRead called
18:18:18: [ ReadLba(0x261252D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 491 ] 
18:18:18: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:18:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:18:18: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 16 times 

18:18:18: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:18:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 492 ] 
18:18:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:18: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C330>, <py_sfcl.CommandDataDefinition object at 0x0682C7B0>) , Command count = 493 ] 
18:18:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C840>, <py_sfcl.CommandDataDefinition object at 0x0682C870>) , Command count = 494 ] 
18:18:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:18: [ SetCardRCA(0x1, 0xD555) , Command count = 495 ] 
18:18:18: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:18: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:18:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:18:18: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:18:18: [ SetBusWidth(0x1) , Command count = 496 ] 
18:18:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:18: ####CSD Registe 2.0 Values####
18:18:18: CSD_STRUCTURE                                 :0x1
18:18:18: Reserv1                                       :0x0
18:18:18: Time Access 1 TAAC                            :0xe
18:18:18: Time Access 2 NSAC*100                        :0x0
18:18:18: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:18: Card Command Classess CCC                     :0x5b5
18:18:18: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:18: DSR(driver stage register)  DSR_IMP           :0x0
18:18:18: Reserv2                                       :0x0
18:18:18: Device Size C_SIZE                            :0xedc8
18:18:18: Reserv3                                       :0x0
18:18:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:18: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:18: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:18: Reserv4                                       :0x0
18:18:18: Write Speed Factor R2W_FACTOR                 :0x2
18:18:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:18: FILE_FORMAT_GRP                               :0x0
18:18:18: COPY flag                                     :0x1
18:18:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:18: File_Format                                   :0x0
18:18:18: CRC                                           :0x0
18:18:18: ####CSD Registe Values####  

18:18:18: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:18:18: ProductSerialNumber = 0x23482900
18:18:18: CardMaximumLBA      = 0x3b72400
18:18:18: CardCapacity        = 32G
18:18:18: Is card secure      = 0
18:18:18: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:18:18: [DVTCommonLib]###  LogicalWrite called
18:18:19: [ WriteLba(0x194A711, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 497 ] 
18:18:19: [DVTCommonLib]###  LogicalWrite Completed 

18:18:19: [DVTCommonLib]###  LogicalRead called
18:18:21: [ ReadLba(0x194A711, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 498 ] 
18:18:21: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:18:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:18:21: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 17 times 

18:18:21: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:18:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 499 ] 
18:18:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:21: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C720>, <py_sfcl.CommandDataDefinition object at 0x0682CBA0>) , Command count = 500 ] 
18:18:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CC30>, <py_sfcl.CommandDataDefinition object at 0x0682CC60>) , Command count = 501 ] 
18:18:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:21: [ SetCardRCA(0x1, 0xD555) , Command count = 502 ] 
18:18:21: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:21: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:18:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:18:21: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:18:21: [ SetBusWidth(0x1) , Command count = 503 ] 
18:18:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:21: ####CSD Registe 2.0 Values####
18:18:21: CSD_STRUCTURE                                 :0x1
18:18:21: Reserv1                                       :0x0
18:18:21: Time Access 1 TAAC                            :0xe
18:18:21: Time Access 2 NSAC*100                        :0x0
18:18:21: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:21: Card Command Classess CCC                     :0x5b5
18:18:21: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:21: DSR(driver stage register)  DSR_IMP           :0x0
18:18:21: Reserv2                                       :0x0
18:18:21: Device Size C_SIZE                            :0xedc8
18:18:21: Reserv3                                       :0x0
18:18:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:21: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:21: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:21: Reserv4                                       :0x0
18:18:21: Write Speed Factor R2W_FACTOR                 :0x2
18:18:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:21: FILE_FORMAT_GRP                               :0x0
18:18:21: COPY flag                                     :0x1
18:18:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:21: File_Format                                   :0x0
18:18:21: CRC                                           :0x0
18:18:21: ####CSD Registe Values####  

18:18:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:18:21: ProductSerialNumber = 0x23482900
18:18:21: CardMaximumLBA      = 0x3b72400
18:18:21: CardCapacity        = 32G
18:18:21: Is card secure      = 0
18:18:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:18:21: [DVTCommonLib]###  LogicalWrite called
18:18:23: [ WriteLba(0x1766708, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 504 ] 
18:18:23: [DVTCommonLib]###  LogicalWrite Completed 

18:18:23: [DVTCommonLib]###  LogicalRead called
18:18:24: [ ReadLba(0x1766708, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 505 ] 
18:18:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:18:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:18:24: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 18 times 

18:18:24: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:18:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 506 ] 
18:18:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:24: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614BDB0>, <py_sfcl.CommandDataDefinition object at 0x0682CB10>) , Command count = 507 ] 
18:18:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614A0C0>, <py_sfcl.CommandDataDefinition object at 0x0682CED0>) , Command count = 508 ] 
18:18:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:24: [ SetCardRCA(0x1, 0xD555) , Command count = 509 ] 
18:18:25: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:25: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:18:25: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:18:25: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:18:25: [ SetBusWidth(0x1) , Command count = 510 ] 
18:18:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:25: ####CSD Registe 2.0 Values####
18:18:25: CSD_STRUCTURE                                 :0x1
18:18:25: Reserv1                                       :0x0
18:18:25: Time Access 1 TAAC                            :0xe
18:18:25: Time Access 2 NSAC*100                        :0x0
18:18:25: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:25: Card Command Classess CCC                     :0x5b5
18:18:25: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:25: DSR(driver stage register)  DSR_IMP           :0x0
18:18:25: Reserv2                                       :0x0
18:18:25: Device Size C_SIZE                            :0xedc8
18:18:25: Reserv3                                       :0x0
18:18:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:25: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:25: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:25: Reserv4                                       :0x0
18:18:25: Write Speed Factor R2W_FACTOR                 :0x2
18:18:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:25: FILE_FORMAT_GRP                               :0x0
18:18:25: COPY flag                                     :0x1
18:18:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:25: File_Format                                   :0x0
18:18:25: CRC                                           :0x0
18:18:25: ####CSD Registe Values####  

18:18:25: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:18:25: ProductSerialNumber = 0x23482900
18:18:25: CardMaximumLBA      = 0x3b72400
18:18:25: CardCapacity        = 32G
18:18:25: Is card secure      = 0
18:18:25: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:18:25: [DVTCommonLib]###  LogicalWrite called
18:18:26: [ WriteLba(0x1A944E2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 511 ] 
18:18:26: [DVTCommonLib]###  LogicalWrite Completed 

18:18:26: [DVTCommonLib]###  LogicalRead called
18:18:28: [ ReadLba(0x1A944E2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 512 ] 
18:18:28: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:18:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:18:28: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 19 times 

18:18:28: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:18:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 513 ] 
18:18:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:28: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614BD50>, <py_sfcl.CommandDataDefinition object at 0x06168CF0>) , Command count = 514 ] 
18:18:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E01C90>, <py_sfcl.CommandDataDefinition object at 0x0682D0C0>) , Command count = 515 ] 
18:18:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:28: [ SetCardRCA(0x1, 0xD555) , Command count = 516 ] 
18:18:28: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:28: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:18:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:18:28: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:18:28: [ SetBusWidth(0x1) , Command count = 517 ] 
18:18:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:28: ####CSD Registe 2.0 Values####
18:18:28: CSD_STRUCTURE                                 :0x1
18:18:28: Reserv1                                       :0x0
18:18:28: Time Access 1 TAAC                            :0xe
18:18:28: Time Access 2 NSAC*100                        :0x0
18:18:28: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:28: Card Command Classess CCC                     :0x5b5
18:18:28: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:28: DSR(driver stage register)  DSR_IMP           :0x0
18:18:28: Reserv2                                       :0x0
18:18:28: Device Size C_SIZE                            :0xedc8
18:18:28: Reserv3                                       :0x0
18:18:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:28: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:28: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:28: Reserv4                                       :0x0
18:18:28: Write Speed Factor R2W_FACTOR                 :0x2
18:18:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:28: FILE_FORMAT_GRP                               :0x0
18:18:28: COPY flag                                     :0x1
18:18:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:28: File_Format                                   :0x0
18:18:28: CRC                                           :0x0
18:18:28: ####CSD Registe Values####  

18:18:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:18:28: ProductSerialNumber = 0x23482900
18:18:28: CardMaximumLBA      = 0x3b72400
18:18:28: CardCapacity        = 32G
18:18:28: Is card secure      = 0
18:18:28: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:18:28: [DVTCommonLib]###  LogicalWrite called
18:18:30: [ WriteLba(0x2814366, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 518 ] 
18:18:30: [DVTCommonLib]###  LogicalWrite Completed 

18:18:30: [DVTCommonLib]###  LogicalRead called
18:18:31: [ ReadLba(0x2814366, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 519 ] 
18:18:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:18:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:18:31: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 20 times 

18:18:31: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:18:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 520 ] 
18:18:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:31: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A0E70>, <py_sfcl.CommandDataDefinition object at 0x0682D2A0>) , Command count = 521 ] 
18:18:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A0A80>, <py_sfcl.CommandDataDefinition object at 0x0682D300>) , Command count = 522 ] 
18:18:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:31: [ SetCardRCA(0x1, 0xD555) , Command count = 523 ] 
18:18:31: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:31: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:18:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:18:31: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:18:31: [ SetBusWidth(0x1) , Command count = 524 ] 
18:18:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:31: ####CSD Registe 2.0 Values####
18:18:31: CSD_STRUCTURE                                 :0x1
18:18:31: Reserv1                                       :0x0
18:18:31: Time Access 1 TAAC                            :0xe
18:18:31: Time Access 2 NSAC*100                        :0x0
18:18:31: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:31: Card Command Classess CCC                     :0x5b5
18:18:31: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:31: DSR(driver stage register)  DSR_IMP           :0x0
18:18:31: Reserv2                                       :0x0
18:18:31: Device Size C_SIZE                            :0xedc8
18:18:31: Reserv3                                       :0x0
18:18:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:31: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:31: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:31: Reserv4                                       :0x0
18:18:31: Write Speed Factor R2W_FACTOR                 :0x2
18:18:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:31: FILE_FORMAT_GRP                               :0x0
18:18:31: COPY flag                                     :0x1
18:18:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:31: File_Format                                   :0x0
18:18:31: CRC                                           :0x0
18:18:31: ####CSD Registe Values####  

18:18:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:18:31: ProductSerialNumber = 0x23482900
18:18:31: CardMaximumLBA      = 0x3b72400
18:18:31: CardCapacity        = 32G
18:18:31: Is card secure      = 0
18:18:31: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:18:31: [DVTCommonLib]###  LogicalWrite called
18:18:33: [ WriteLba(0x39A415C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 525 ] 
18:18:33: [DVTCommonLib]###  LogicalWrite Completed 

18:18:33: [DVTCommonLib]###  LogicalRead called
18:18:35: [ ReadLba(0x39A415C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 526 ] 
18:18:35: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:18:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:18:35: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 21 times 

18:18:35: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:18:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 527 ] 
18:18:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:35: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616ECF0>, <py_sfcl.CommandDataDefinition object at 0x0616EE10>) , Command count = 528 ] 
18:18:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614A840>, <py_sfcl.CommandDataDefinition object at 0x0682D5A0>) , Command count = 529 ] 
18:18:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:35: [ SetCardRCA(0x1, 0xD555) , Command count = 530 ] 
18:18:35: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:35: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:18:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:18:35: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:18:35: [ SetBusWidth(0x1) , Command count = 531 ] 
18:18:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:35: ####CSD Registe 2.0 Values####
18:18:35: CSD_STRUCTURE                                 :0x1
18:18:35: Reserv1                                       :0x0
18:18:35: Time Access 1 TAAC                            :0xe
18:18:35: Time Access 2 NSAC*100                        :0x0
18:18:35: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:35: Card Command Classess CCC                     :0x5b5
18:18:35: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:35: DSR(driver stage register)  DSR_IMP           :0x0
18:18:35: Reserv2                                       :0x0
18:18:35: Device Size C_SIZE                            :0xedc8
18:18:35: Reserv3                                       :0x0
18:18:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:35: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:35: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:35: Reserv4                                       :0x0
18:18:35: Write Speed Factor R2W_FACTOR                 :0x2
18:18:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:35: FILE_FORMAT_GRP                               :0x0
18:18:35: COPY flag                                     :0x1
18:18:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:35: File_Format                                   :0x0
18:18:35: CRC                                           :0x0
18:18:35: ####CSD Registe Values####  

18:18:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:18:35: ProductSerialNumber = 0x23482900
18:18:35: CardMaximumLBA      = 0x3b72400
18:18:35: CardCapacity        = 32G
18:18:35: Is card secure      = 0
18:18:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:18:35: [DVTCommonLib]###  LogicalWrite called
18:18:36: [ WriteLba(0x81984A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 532 ] 
18:18:36: [DVTCommonLib]###  LogicalWrite Completed 

18:18:36: [DVTCommonLib]###  LogicalRead called
18:18:38: [ ReadLba(0x81984A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 533 ] 
18:18:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:18:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:18:38: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 22 times 

18:18:38: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:18:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 534 ] 
18:18:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:38: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06157030>, <py_sfcl.CommandDataDefinition object at 0x061A5BD0>) , Command count = 535 ] 
18:18:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5C00>, <py_sfcl.CommandDataDefinition object at 0x0682D840>) , Command count = 536 ] 
18:18:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:38: [ SetCardRCA(0x1, 0xD555) , Command count = 537 ] 
18:18:38: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:38: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:18:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:18:38: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:18:38: [ SetBusWidth(0x1) , Command count = 538 ] 
18:18:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:38: ####CSD Registe 2.0 Values####
18:18:38: CSD_STRUCTURE                                 :0x1
18:18:38: Reserv1                                       :0x0
18:18:38: Time Access 1 TAAC                            :0xe
18:18:38: Time Access 2 NSAC*100                        :0x0
18:18:38: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:38: Card Command Classess CCC                     :0x5b5
18:18:38: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:38: DSR(driver stage register)  DSR_IMP           :0x0
18:18:38: Reserv2                                       :0x0
18:18:38: Device Size C_SIZE                            :0xedc8
18:18:38: Reserv3                                       :0x0
18:18:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:38: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:38: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:38: Reserv4                                       :0x0
18:18:38: Write Speed Factor R2W_FACTOR                 :0x2
18:18:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:38: FILE_FORMAT_GRP                               :0x0
18:18:38: COPY flag                                     :0x1
18:18:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:38: File_Format                                   :0x0
18:18:38: CRC                                           :0x0
18:18:38: ####CSD Registe Values####  

18:18:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:18:38: ProductSerialNumber = 0x23482900
18:18:38: CardMaximumLBA      = 0x3b72400
18:18:38: CardCapacity        = 32G
18:18:38: Is card secure      = 0
18:18:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:18:38: [DVTCommonLib]###  LogicalWrite called
18:18:40: [ WriteLba(0xEA43B6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 539 ] 
18:18:40: [DVTCommonLib]###  LogicalWrite Completed 

18:18:40: [DVTCommonLib]###  LogicalRead called
18:18:41: [ ReadLba(0xEA43B6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 540 ] 
18:18:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:18:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:18:41: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 23 times 

18:18:41: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:18:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 541 ] 
18:18:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:41: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5B40>, <py_sfcl.CommandDataDefinition object at 0x061A5CC0>) , Command count = 542 ] 
18:18:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5F60>, <py_sfcl.CommandDataDefinition object at 0x0682DAE0>) , Command count = 543 ] 
18:18:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:41: [ SetCardRCA(0x1, 0xD555) , Command count = 544 ] 
18:18:41: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:41: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:18:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:18:41: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:18:41: [ SetBusWidth(0x1) , Command count = 545 ] 
18:18:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:42: ####CSD Registe 2.0 Values####
18:18:42: CSD_STRUCTURE                                 :0x1
18:18:42: Reserv1                                       :0x0
18:18:42: Time Access 1 TAAC                            :0xe
18:18:42: Time Access 2 NSAC*100                        :0x0
18:18:42: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:42: Card Command Classess CCC                     :0x5b5
18:18:42: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:42: DSR(driver stage register)  DSR_IMP           :0x0
18:18:42: Reserv2                                       :0x0
18:18:42: Device Size C_SIZE                            :0xedc8
18:18:42: Reserv3                                       :0x0
18:18:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:42: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:42: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:42: Reserv4                                       :0x0
18:18:42: Write Speed Factor R2W_FACTOR                 :0x2
18:18:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:42: FILE_FORMAT_GRP                               :0x0
18:18:42: COPY flag                                     :0x1
18:18:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:42: File_Format                                   :0x0
18:18:42: CRC                                           :0x0
18:18:42: ####CSD Registe Values####  

18:18:42: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:18:42: ProductSerialNumber = 0x23482900
18:18:42: CardMaximumLBA      = 0x3b72400
18:18:42: CardCapacity        = 32G
18:18:42: Is card secure      = 0
18:18:42: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:18:42: [DVTCommonLib]###  LogicalWrite called
18:18:43: [ WriteLba(0x36D8737, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 546 ] 
18:18:43: [DVTCommonLib]###  LogicalWrite Completed 

18:18:43: [DVTCommonLib]###  LogicalRead called
18:18:45: [ ReadLba(0x36D8737, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 547 ] 
18:18:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:18:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:18:45: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 24 times 

18:18:45: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:18:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 548 ] 
18:18:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:45: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5C90>, <py_sfcl.CommandDataDefinition object at 0x0682DD20>) , Command count = 549 ] 
18:18:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067AF390>, <py_sfcl.CommandDataDefinition object at 0x0682DE10>) , Command count = 550 ] 
18:18:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:45: [ SetCardRCA(0x1, 0xD555) , Command count = 551 ] 
18:18:45: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:45: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:18:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:18:45: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:18:45: [ SetBusWidth(0x1) , Command count = 552 ] 
18:18:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:45: ####CSD Registe 2.0 Values####
18:18:45: CSD_STRUCTURE                                 :0x1
18:18:45: Reserv1                                       :0x0
18:18:45: Time Access 1 TAAC                            :0xe
18:18:45: Time Access 2 NSAC*100                        :0x0
18:18:45: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:45: Card Command Classess CCC                     :0x5b5
18:18:45: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:45: DSR(driver stage register)  DSR_IMP           :0x0
18:18:45: Reserv2                                       :0x0
18:18:45: Device Size C_SIZE                            :0xedc8
18:18:45: Reserv3                                       :0x0
18:18:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:45: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:45: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:45: Reserv4                                       :0x0
18:18:45: Write Speed Factor R2W_FACTOR                 :0x2
18:18:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:45: FILE_FORMAT_GRP                               :0x0
18:18:45: COPY flag                                     :0x1
18:18:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:45: File_Format                                   :0x0
18:18:45: CRC                                           :0x0
18:18:45: ####CSD Registe Values####  

18:18:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:18:45: ProductSerialNumber = 0x23482900
18:18:45: CardMaximumLBA      = 0x3b72400
18:18:45: CardCapacity        = 32G
18:18:45: Is card secure      = 0
18:18:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:18:45: [DVTCommonLib]###  LogicalWrite called
18:18:47: [ WriteLba(0xD10B5A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 553 ] 
18:18:47: [DVTCommonLib]###  LogicalWrite Completed 

18:18:47: [DVTCommonLib]###  LogicalRead called
18:18:48: [ ReadLba(0xD10B5A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 554 ] 
18:18:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:18:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:18:48: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 25 times 

18:18:48: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:18:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 555 ] 
18:18:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:48: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067AF090>, <py_sfcl.CommandDataDefinition object at 0x0616E2A0>) , Command count = 556 ] 
18:18:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616E300>, <py_sfcl.CommandDataDefinition object at 0x0682DE70>) , Command count = 557 ] 
18:18:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:48: [ SetCardRCA(0x1, 0xD555) , Command count = 558 ] 
18:18:48: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:48: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:18:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:18:48: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:18:48: [ SetBusWidth(0x1) , Command count = 559 ] 
18:18:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:48: ####CSD Registe 2.0 Values####
18:18:48: CSD_STRUCTURE                                 :0x1
18:18:48: Reserv1                                       :0x0
18:18:48: Time Access 1 TAAC                            :0xe
18:18:48: Time Access 2 NSAC*100                        :0x0
18:18:48: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:48: Card Command Classess CCC                     :0x5b5
18:18:48: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:48: DSR(driver stage register)  DSR_IMP           :0x0
18:18:48: Reserv2                                       :0x0
18:18:48: Device Size C_SIZE                            :0xedc8
18:18:48: Reserv3                                       :0x0
18:18:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:48: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:48: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:48: Reserv4                                       :0x0
18:18:48: Write Speed Factor R2W_FACTOR                 :0x2
18:18:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:48: FILE_FORMAT_GRP                               :0x0
18:18:48: COPY flag                                     :0x1
18:18:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:48: File_Format                                   :0x0
18:18:48: CRC                                           :0x0
18:18:48: ####CSD Registe Values####  

18:18:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:18:48: ProductSerialNumber = 0x23482900
18:18:48: CardMaximumLBA      = 0x3b72400
18:18:48: CardCapacity        = 32G
18:18:48: Is card secure      = 0
18:18:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:18:48: [DVTCommonLib]###  LogicalWrite called
18:18:50: [ WriteLba(0xC4D40C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 560 ] 
18:18:50: [DVTCommonLib]###  LogicalWrite Completed 

18:18:50: [DVTCommonLib]###  LogicalRead called
18:18:52: [ ReadLba(0xC4D40C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 561 ] 
18:18:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:18:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:18:52: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 26 times 

18:18:52: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:18:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 562 ] 
18:18:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:52: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066FF330>, <py_sfcl.CommandDataDefinition object at 0x067BAAB0>) , Command count = 563 ] 
18:18:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1300>, <py_sfcl.CommandDataDefinition object at 0x066FF360>) , Command count = 564 ] 
18:18:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:52: [ SetCardRCA(0x1, 0xD555) , Command count = 565 ] 
18:18:52: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:52: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:18:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:18:52: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:18:52: [ SetBusWidth(0x1) , Command count = 566 ] 
18:18:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:52: ####CSD Registe 2.0 Values####
18:18:52: CSD_STRUCTURE                                 :0x1
18:18:52: Reserv1                                       :0x0
18:18:52: Time Access 1 TAAC                            :0xe
18:18:52: Time Access 2 NSAC*100                        :0x0
18:18:52: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:52: Card Command Classess CCC                     :0x5b5
18:18:52: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:52: DSR(driver stage register)  DSR_IMP           :0x0
18:18:52: Reserv2                                       :0x0
18:18:52: Device Size C_SIZE                            :0xedc8
18:18:52: Reserv3                                       :0x0
18:18:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:52: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:52: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:52: Reserv4                                       :0x0
18:18:52: Write Speed Factor R2W_FACTOR                 :0x2
18:18:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:52: FILE_FORMAT_GRP                               :0x0
18:18:52: COPY flag                                     :0x1
18:18:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:52: File_Format                                   :0x0
18:18:52: CRC                                           :0x0
18:18:52: ####CSD Registe Values####  

18:18:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:18:52: ProductSerialNumber = 0x23482900
18:18:52: CardMaximumLBA      = 0x3b72400
18:18:52: CardCapacity        = 32G
18:18:52: Is card secure      = 0
18:18:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:18:52: [DVTCommonLib]###  LogicalWrite called
18:18:53: [ WriteLba(0x979839, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 567 ] 
18:18:53: [DVTCommonLib]###  LogicalWrite Completed 

18:18:53: [DVTCommonLib]###  LogicalRead called
18:18:55: [ ReadLba(0x979839, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 568 ] 
18:18:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:18:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:18:55: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 27 times 

18:18:55: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:18:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 569 ] 
18:18:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:55: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066FF1B0>, <py_sfcl.CommandDataDefinition object at 0x067C7030>) , Command count = 570 ] 
18:18:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067AFE70>, <py_sfcl.CommandDataDefinition object at 0x067BA570>) , Command count = 571 ] 
18:18:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:55: [ SetCardRCA(0x1, 0xD555) , Command count = 572 ] 
18:18:55: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:55: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:18:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:18:55: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:18:55: [ SetBusWidth(0x1) , Command count = 573 ] 
18:18:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:55: ####CSD Registe 2.0 Values####
18:18:55: CSD_STRUCTURE                                 :0x1
18:18:55: Reserv1                                       :0x0
18:18:55: Time Access 1 TAAC                            :0xe
18:18:55: Time Access 2 NSAC*100                        :0x0
18:18:55: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:55: Card Command Classess CCC                     :0x5b5
18:18:55: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:55: DSR(driver stage register)  DSR_IMP           :0x0
18:18:55: Reserv2                                       :0x0
18:18:55: Device Size C_SIZE                            :0xedc8
18:18:55: Reserv3                                       :0x0
18:18:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:55: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:55: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:55: Reserv4                                       :0x0
18:18:55: Write Speed Factor R2W_FACTOR                 :0x2
18:18:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:55: FILE_FORMAT_GRP                               :0x0
18:18:55: COPY flag                                     :0x1
18:18:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:55: File_Format                                   :0x0
18:18:55: CRC                                           :0x0
18:18:55: ####CSD Registe Values####  

18:18:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:18:55: ProductSerialNumber = 0x23482900
18:18:55: CardMaximumLBA      = 0x3b72400
18:18:55: CardCapacity        = 32G
18:18:55: Is card secure      = 0
18:18:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:18:55: [DVTCommonLib]###  LogicalWrite called
18:18:57: [ WriteLba(0x119DB46, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 574 ] 
18:18:57: [DVTCommonLib]###  LogicalWrite Completed 

18:18:57: [DVTCommonLib]###  LogicalRead called
18:18:58: [ ReadLba(0x119DB46, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 575 ] 
18:18:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:18:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:18:58: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 28 times 

18:18:58: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:18:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:18:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 576 ] 
18:18:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:18:58: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:18:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:18:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:18:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:18:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:18:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BAF60>, <py_sfcl.CommandDataDefinition object at 0x067C1D50>) , Command count = 577 ] 
18:18:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:18:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616E270>, <py_sfcl.CommandDataDefinition object at 0x067C1D20>) , Command count = 578 ] 
18:18:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:18:58: [ SetCardRCA(0x1, 0xD555) , Command count = 579 ] 
18:18:58: [DVTCommonLib]### Identification :Idenfication of card completed 

18:18:58: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:18:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:18:58: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:18:58: [ SetBusWidth(0x1) , Command count = 580 ] 
18:18:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:18:58: ####CSD Registe 2.0 Values####
18:18:58: CSD_STRUCTURE                                 :0x1
18:18:58: Reserv1                                       :0x0
18:18:58: Time Access 1 TAAC                            :0xe
18:18:58: Time Access 2 NSAC*100                        :0x0
18:18:58: Data Transfer Rate TRAN_SPEED                 :0x32
18:18:58: Card Command Classess CCC                     :0x5b5
18:18:58: Max Read Data Block Length  READ_BL_LEN       :0x9
18:18:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:18:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:18:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:18:58: DSR(driver stage register)  DSR_IMP           :0x0
18:18:58: Reserv2                                       :0x0
18:18:58: Device Size C_SIZE                            :0xedc8
18:18:58: Reserv3                                       :0x0
18:18:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:18:58: Erase Sector Size SECTOR_SIZE                 :0x7f
18:18:58: Write Protect Group Size WP_GRP_SIZE          :0x0
18:18:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:18:58: Reserv4                                       :0x0
18:18:58: Write Speed Factor R2W_FACTOR                 :0x2
18:18:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:18:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:18:58: FILE_FORMAT_GRP                               :0x0
18:18:58: COPY flag                                     :0x1
18:18:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:18:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:18:58: File_Format                                   :0x0
18:18:58: CRC                                           :0x0
18:18:58: ####CSD Registe Values####  

18:18:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:18:59: ProductSerialNumber = 0x23482900
18:18:59: CardMaximumLBA      = 0x3b72400
18:18:59: CardCapacity        = 32G
18:18:59: Is card secure      = 0
18:18:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:18:59: [DVTCommonLib]###  LogicalWrite called
18:19:00: [ WriteLba(0x919C64, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 581 ] 
18:19:00: [DVTCommonLib]###  LogicalWrite Completed 

18:19:00: [DVTCommonLib]###  LogicalRead called
18:19:02: [ ReadLba(0x919C64, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 582 ] 
18:19:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:19:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:19:02: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 29 times 

18:19:02: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:19:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 583 ] 
18:19:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:02: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067AF0F0>, <py_sfcl.CommandDataDefinition object at 0x067C7060>) , Command count = 584 ] 
18:19:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7150>, <py_sfcl.CommandDataDefinition object at 0x067C1C90>) , Command count = 585 ] 
18:19:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:02: [ SetCardRCA(0x1, 0xD555) , Command count = 586 ] 
18:19:02: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:02: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:19:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:19:02: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:19:02: [ SetBusWidth(0x1) , Command count = 587 ] 
18:19:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:02: ####CSD Registe 2.0 Values####
18:19:02: CSD_STRUCTURE                                 :0x1
18:19:02: Reserv1                                       :0x0
18:19:02: Time Access 1 TAAC                            :0xe
18:19:02: Time Access 2 NSAC*100                        :0x0
18:19:02: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:02: Card Command Classess CCC                     :0x5b5
18:19:02: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:02: DSR(driver stage register)  DSR_IMP           :0x0
18:19:02: Reserv2                                       :0x0
18:19:02: Device Size C_SIZE                            :0xedc8
18:19:02: Reserv3                                       :0x0
18:19:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:02: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:02: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:02: Reserv4                                       :0x0
18:19:02: Write Speed Factor R2W_FACTOR                 :0x2
18:19:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:02: FILE_FORMAT_GRP                               :0x0
18:19:02: COPY flag                                     :0x1
18:19:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:02: File_Format                                   :0x0
18:19:02: CRC                                           :0x0
18:19:02: ####CSD Registe Values####  

18:19:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:19:02: ProductSerialNumber = 0x23482900
18:19:02: CardMaximumLBA      = 0x3b72400
18:19:02: CardCapacity        = 32G
18:19:02: Is card secure      = 0
18:19:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:19:02: [DVTCommonLib]###  LogicalWrite called
18:19:04: [ WriteLba(0xD9F47C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 588 ] 
18:19:04: [DVTCommonLib]###  LogicalWrite Completed 

18:19:04: [DVTCommonLib]###  LogicalRead called
18:19:05: [ ReadLba(0xD9F47C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 589 ] 
18:19:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:19:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:19:05: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 30 times 

18:19:05: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:19:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 590 ] 
18:19:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:05: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C72A0>, <py_sfcl.CommandDataDefinition object at 0x067C72D0>) , Command count = 591 ] 
18:19:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7330>, <py_sfcl.CommandDataDefinition object at 0x067C7360>) , Command count = 592 ] 
18:19:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:05: [ SetCardRCA(0x1, 0xD555) , Command count = 593 ] 
18:19:05: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:05: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:19:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:19:05: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:19:05: [ SetBusWidth(0x1) , Command count = 594 ] 
18:19:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:05: ####CSD Registe 2.0 Values####
18:19:05: CSD_STRUCTURE                                 :0x1
18:19:05: Reserv1                                       :0x0
18:19:05: Time Access 1 TAAC                            :0xe
18:19:05: Time Access 2 NSAC*100                        :0x0
18:19:05: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:05: Card Command Classess CCC                     :0x5b5
18:19:05: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:05: DSR(driver stage register)  DSR_IMP           :0x0
18:19:05: Reserv2                                       :0x0
18:19:05: Device Size C_SIZE                            :0xedc8
18:19:05: Reserv3                                       :0x0
18:19:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:05: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:05: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:05: Reserv4                                       :0x0
18:19:05: Write Speed Factor R2W_FACTOR                 :0x2
18:19:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:05: FILE_FORMAT_GRP                               :0x0
18:19:05: COPY flag                                     :0x1
18:19:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:05: File_Format                                   :0x0
18:19:05: CRC                                           :0x0
18:19:05: ####CSD Registe Values####  

18:19:05: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:19:05: ProductSerialNumber = 0x23482900
18:19:05: CardMaximumLBA      = 0x3b72400
18:19:05: CardCapacity        = 32G
18:19:05: Is card secure      = 0
18:19:05: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:19:05: [DVTCommonLib]###  LogicalWrite called
18:19:07: [ WriteLba(0x2833276, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 595 ] 
18:19:07: [DVTCommonLib]###  LogicalWrite Completed 

18:19:07: [DVTCommonLib]###  LogicalRead called
18:19:09: [ ReadLba(0x2833276, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 596 ] 
18:19:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:19:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:19:09: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 31 times 

18:19:09: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:19:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 597 ] 
18:19:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:09: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C70F0>, <py_sfcl.CommandDataDefinition object at 0x067C7690>) , Command count = 598 ] 
18:19:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7810>, <py_sfcl.CommandDataDefinition object at 0x067C7780>) , Command count = 599 ] 
18:19:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:09: [ SetCardRCA(0x1, 0xD555) , Command count = 600 ] 
18:19:09: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:09: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:19:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:19:09: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:19:09: [ SetBusWidth(0x1) , Command count = 601 ] 
18:19:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:09: ####CSD Registe 2.0 Values####
18:19:09: CSD_STRUCTURE                                 :0x1
18:19:09: Reserv1                                       :0x0
18:19:09: Time Access 1 TAAC                            :0xe
18:19:09: Time Access 2 NSAC*100                        :0x0
18:19:09: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:09: Card Command Classess CCC                     :0x5b5
18:19:09: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:09: DSR(driver stage register)  DSR_IMP           :0x0
18:19:09: Reserv2                                       :0x0
18:19:09: Device Size C_SIZE                            :0xedc8
18:19:09: Reserv3                                       :0x0
18:19:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:09: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:09: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:09: Reserv4                                       :0x0
18:19:09: Write Speed Factor R2W_FACTOR                 :0x2
18:19:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:09: FILE_FORMAT_GRP                               :0x0
18:19:09: COPY flag                                     :0x1
18:19:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:09: File_Format                                   :0x0
18:19:09: CRC                                           :0x0
18:19:09: ####CSD Registe Values####  

18:19:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:19:09: ProductSerialNumber = 0x23482900
18:19:09: CardMaximumLBA      = 0x3b72400
18:19:09: CardCapacity        = 32G
18:19:09: Is card secure      = 0
18:19:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:19:09: [DVTCommonLib]###  LogicalWrite called
18:19:10: [ WriteLba(0x3C9B70, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 602 ] 
18:19:10: [DVTCommonLib]###  LogicalWrite Completed 

18:19:10: [DVTCommonLib]###  LogicalRead called
18:19:12: [ ReadLba(0x3C9B70, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 603 ] 
18:19:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:19:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:19:12: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 32 times 

18:19:12: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:19:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 604 ] 
18:19:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:12: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7600>, <py_sfcl.CommandDataDefinition object at 0x067C7900>) , Command count = 605 ] 
18:19:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067CDF90>, <py_sfcl.CommandDataDefinition object at 0x067C79C0>) , Command count = 606 ] 
18:19:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:12: [ SetCardRCA(0x1, 0xD555) , Command count = 607 ] 
18:19:12: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:12: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:19:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:19:12: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:19:12: [ SetBusWidth(0x1) , Command count = 608 ] 
18:19:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:12: ####CSD Registe 2.0 Values####
18:19:12: CSD_STRUCTURE                                 :0x1
18:19:12: Reserv1                                       :0x0
18:19:12: Time Access 1 TAAC                            :0xe
18:19:12: Time Access 2 NSAC*100                        :0x0
18:19:12: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:12: Card Command Classess CCC                     :0x5b5
18:19:12: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:12: DSR(driver stage register)  DSR_IMP           :0x0
18:19:12: Reserv2                                       :0x0
18:19:12: Device Size C_SIZE                            :0xedc8
18:19:12: Reserv3                                       :0x0
18:19:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:12: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:12: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:12: Reserv4                                       :0x0
18:19:12: Write Speed Factor R2W_FACTOR                 :0x2
18:19:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:12: FILE_FORMAT_GRP                               :0x0
18:19:12: COPY flag                                     :0x1
18:19:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:12: File_Format                                   :0x0
18:19:12: CRC                                           :0x0
18:19:12: ####CSD Registe Values####  

18:19:12: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:19:12: ProductSerialNumber = 0x23482900
18:19:12: CardMaximumLBA      = 0x3b72400
18:19:12: CardCapacity        = 32G
18:19:12: Is card secure      = 0
18:19:12: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:19:12: [DVTCommonLib]###  LogicalWrite called
18:19:14: [ WriteLba(0x6D71ED, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 609 ] 
18:19:14: [DVTCommonLib]###  LogicalWrite Completed 

18:19:14: [DVTCommonLib]###  LogicalRead called
18:19:15: [ ReadLba(0x6D71ED, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 610 ] 
18:19:15: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:19:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:19:15: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 33 times 

18:19:15: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:19:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 611 ] 
18:19:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:15: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7C00>, <py_sfcl.CommandDataDefinition object at 0x067C74E0>) , Command count = 612 ] 
18:19:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7480>, <py_sfcl.CommandDataDefinition object at 0x067C73F0>) , Command count = 613 ] 
18:19:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:15: [ SetCardRCA(0x1, 0xD555) , Command count = 614 ] 
18:19:15: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:15: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:19:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:19:15: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:19:15: [ SetBusWidth(0x1) , Command count = 615 ] 
18:19:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:15: ####CSD Registe 2.0 Values####
18:19:15: CSD_STRUCTURE                                 :0x1
18:19:15: Reserv1                                       :0x0
18:19:15: Time Access 1 TAAC                            :0xe
18:19:15: Time Access 2 NSAC*100                        :0x0
18:19:15: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:15: Card Command Classess CCC                     :0x5b5
18:19:15: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:15: DSR(driver stage register)  DSR_IMP           :0x0
18:19:15: Reserv2                                       :0x0
18:19:15: Device Size C_SIZE                            :0xedc8
18:19:15: Reserv3                                       :0x0
18:19:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:15: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:15: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:15: Reserv4                                       :0x0
18:19:15: Write Speed Factor R2W_FACTOR                 :0x2
18:19:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:15: FILE_FORMAT_GRP                               :0x0
18:19:15: COPY flag                                     :0x1
18:19:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:15: File_Format                                   :0x0
18:19:15: CRC                                           :0x0
18:19:15: ####CSD Registe Values####  

18:19:15: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:19:15: ProductSerialNumber = 0x23482900
18:19:15: CardMaximumLBA      = 0x3b72400
18:19:15: CardCapacity        = 32G
18:19:15: Is card secure      = 0
18:19:15: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:19:15: [DVTCommonLib]###  LogicalWrite called
18:19:17: [ WriteLba(0x21C92A4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 616 ] 
18:19:17: [DVTCommonLib]###  LogicalWrite Completed 

18:19:17: [DVTCommonLib]###  LogicalRead called
18:19:19: [ ReadLba(0x21C92A4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 617 ] 
18:19:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:19:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:19:19: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 34 times 

18:19:19: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:19:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 618 ] 
18:19:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:19: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7510>, <py_sfcl.CommandDataDefinition object at 0x067C1F60>) , Command count = 619 ] 
18:19:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1EA0>, <py_sfcl.CommandDataDefinition object at 0x067C1F30>) , Command count = 620 ] 
18:19:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:19: [ SetCardRCA(0x1, 0xD555) , Command count = 621 ] 
18:19:19: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:19: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:19:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:19:19: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:19:19: [ SetBusWidth(0x1) , Command count = 622 ] 
18:19:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:19: ####CSD Registe 2.0 Values####
18:19:19: CSD_STRUCTURE                                 :0x1
18:19:19: Reserv1                                       :0x0
18:19:19: Time Access 1 TAAC                            :0xe
18:19:19: Time Access 2 NSAC*100                        :0x0
18:19:19: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:19: Card Command Classess CCC                     :0x5b5
18:19:19: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:19: DSR(driver stage register)  DSR_IMP           :0x0
18:19:19: Reserv2                                       :0x0
18:19:19: Device Size C_SIZE                            :0xedc8
18:19:19: Reserv3                                       :0x0
18:19:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:19: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:19: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:19: Reserv4                                       :0x0
18:19:19: Write Speed Factor R2W_FACTOR                 :0x2
18:19:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:19: FILE_FORMAT_GRP                               :0x0
18:19:19: COPY flag                                     :0x1
18:19:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:19: File_Format                                   :0x0
18:19:19: CRC                                           :0x0
18:19:19: ####CSD Registe Values####  

18:19:19: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:19:19: ProductSerialNumber = 0x23482900
18:19:19: CardMaximumLBA      = 0x3b72400
18:19:19: CardCapacity        = 32G
18:19:19: Is card secure      = 0
18:19:19: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:19:19: [DVTCommonLib]###  LogicalWrite called
18:19:21: [ WriteLba(0x49BFF8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 623 ] 
18:19:21: [DVTCommonLib]###  LogicalWrite Completed 

18:19:21: [DVTCommonLib]###  LogicalRead called
18:19:22: [ ReadLba(0x49BFF8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 624 ] 
18:19:22: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:19:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:19:22: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 35 times 

18:19:22: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:19:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 625 ] 
18:19:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:22: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1CC0>, <py_sfcl.CommandDataDefinition object at 0x067C1390>) , Command count = 626 ] 
18:19:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682DCF0>, <py_sfcl.CommandDataDefinition object at 0x0682DC00>) , Command count = 627 ] 
18:19:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:22: [ SetCardRCA(0x1, 0xD555) , Command count = 628 ] 
18:19:22: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:22: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:19:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:19:22: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:19:22: [ SetBusWidth(0x1) , Command count = 629 ] 
18:19:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:22: ####CSD Registe 2.0 Values####
18:19:22: CSD_STRUCTURE                                 :0x1
18:19:22: Reserv1                                       :0x0
18:19:22: Time Access 1 TAAC                            :0xe
18:19:22: Time Access 2 NSAC*100                        :0x0
18:19:22: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:22: Card Command Classess CCC                     :0x5b5
18:19:22: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:22: DSR(driver stage register)  DSR_IMP           :0x0
18:19:22: Reserv2                                       :0x0
18:19:22: Device Size C_SIZE                            :0xedc8
18:19:22: Reserv3                                       :0x0
18:19:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:22: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:22: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:22: Reserv4                                       :0x0
18:19:22: Write Speed Factor R2W_FACTOR                 :0x2
18:19:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:22: FILE_FORMAT_GRP                               :0x0
18:19:22: COPY flag                                     :0x1
18:19:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:22: File_Format                                   :0x0
18:19:22: CRC                                           :0x0
18:19:22: ####CSD Registe Values####  

18:19:22: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:19:22: ProductSerialNumber = 0x23482900
18:19:22: CardMaximumLBA      = 0x3b72400
18:19:22: CardCapacity        = 32G
18:19:22: Is card secure      = 0
18:19:22: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:19:22: [DVTCommonLib]###  LogicalWrite called
18:19:24: [ WriteLba(0x21288CD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 630 ] 
18:19:24: [DVTCommonLib]###  LogicalWrite Completed 

18:19:24: [DVTCommonLib]###  LogicalRead called
18:19:25: [ ReadLba(0x21288CD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 631 ] 
18:19:25: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:19:25: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:19:25: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 36 times 

18:19:25: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:19:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 632 ] 
18:19:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:26: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1360>, <py_sfcl.CommandDataDefinition object at 0x0682D9C0>) , Command count = 633 ] 
18:19:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D960>, <py_sfcl.CommandDataDefinition object at 0x0682D9F0>) , Command count = 634 ] 
18:19:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:26: [ SetCardRCA(0x1, 0xD555) , Command count = 635 ] 
18:19:26: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:26: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:19:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:19:26: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:19:26: [ SetBusWidth(0x1) , Command count = 636 ] 
18:19:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:26: ####CSD Registe 2.0 Values####
18:19:26: CSD_STRUCTURE                                 :0x1
18:19:26: Reserv1                                       :0x0
18:19:26: Time Access 1 TAAC                            :0xe
18:19:26: Time Access 2 NSAC*100                        :0x0
18:19:26: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:26: Card Command Classess CCC                     :0x5b5
18:19:26: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:26: DSR(driver stage register)  DSR_IMP           :0x0
18:19:26: Reserv2                                       :0x0
18:19:26: Device Size C_SIZE                            :0xedc8
18:19:26: Reserv3                                       :0x0
18:19:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:26: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:26: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:26: Reserv4                                       :0x0
18:19:26: Write Speed Factor R2W_FACTOR                 :0x2
18:19:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:26: FILE_FORMAT_GRP                               :0x0
18:19:26: COPY flag                                     :0x1
18:19:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:26: File_Format                                   :0x0
18:19:26: CRC                                           :0x0
18:19:26: ####CSD Registe Values####  

18:19:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:19:26: ProductSerialNumber = 0x23482900
18:19:26: CardMaximumLBA      = 0x3b72400
18:19:26: CardCapacity        = 32G
18:19:26: Is card secure      = 0
18:19:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:19:26: [DVTCommonLib]###  LogicalWrite called
18:19:27: [ WriteLba(0x180D1C9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 637 ] 
18:19:27: [DVTCommonLib]###  LogicalWrite Completed 

18:19:27: [DVTCommonLib]###  LogicalRead called
18:19:29: [ ReadLba(0x180D1C9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 638 ] 
18:19:29: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:19:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:19:29: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 37 times 

18:19:29: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:19:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 639 ] 
18:19:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:29: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682DB10>, <py_sfcl.CommandDataDefinition object at 0x0682D720>) , Command count = 640 ] 
18:19:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D6C0>, <py_sfcl.CommandDataDefinition object at 0x0682D750>) , Command count = 641 ] 
18:19:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:29: [ SetCardRCA(0x1, 0xD555) , Command count = 642 ] 
18:19:29: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:29: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:19:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:19:29: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:19:29: [ SetBusWidth(0x1) , Command count = 643 ] 
18:19:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:29: ####CSD Registe 2.0 Values####
18:19:29: CSD_STRUCTURE                                 :0x1
18:19:29: Reserv1                                       :0x0
18:19:29: Time Access 1 TAAC                            :0xe
18:19:29: Time Access 2 NSAC*100                        :0x0
18:19:29: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:29: Card Command Classess CCC                     :0x5b5
18:19:29: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:29: DSR(driver stage register)  DSR_IMP           :0x0
18:19:29: Reserv2                                       :0x0
18:19:29: Device Size C_SIZE                            :0xedc8
18:19:29: Reserv3                                       :0x0
18:19:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:29: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:29: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:29: Reserv4                                       :0x0
18:19:29: Write Speed Factor R2W_FACTOR                 :0x2
18:19:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:29: FILE_FORMAT_GRP                               :0x0
18:19:29: COPY flag                                     :0x1
18:19:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:29: File_Format                                   :0x0
18:19:29: CRC                                           :0x0
18:19:29: ####CSD Registe Values####  

18:19:29: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:19:29: ProductSerialNumber = 0x23482900
18:19:29: CardMaximumLBA      = 0x3b72400
18:19:29: CardCapacity        = 32G
18:19:29: Is card secure      = 0
18:19:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:19:29: [DVTCommonLib]###  LogicalWrite called
18:19:31: [ WriteLba(0x7BBD2A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 644 ] 
18:19:31: [DVTCommonLib]###  LogicalWrite Completed 

18:19:31: [DVTCommonLib]###  LogicalRead called
18:19:32: [ ReadLba(0x7BBD2A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 645 ] 
18:19:32: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:19:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:19:32: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 38 times 

18:19:32: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:19:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 646 ] 
18:19:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:32: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D870>, <py_sfcl.CommandDataDefinition object at 0x0682D570>) , Command count = 647 ] 
18:19:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D450>, <py_sfcl.CommandDataDefinition object at 0x0682D420>) , Command count = 648 ] 
18:19:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:32: [ SetCardRCA(0x1, 0xD555) , Command count = 649 ] 
18:19:32: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:32: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:19:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:19:32: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:19:32: [ SetBusWidth(0x1) , Command count = 650 ] 
18:19:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:32: ####CSD Registe 2.0 Values####
18:19:32: CSD_STRUCTURE                                 :0x1
18:19:32: Reserv1                                       :0x0
18:19:32: Time Access 1 TAAC                            :0xe
18:19:32: Time Access 2 NSAC*100                        :0x0
18:19:32: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:32: Card Command Classess CCC                     :0x5b5
18:19:32: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:32: DSR(driver stage register)  DSR_IMP           :0x0
18:19:32: Reserv2                                       :0x0
18:19:32: Device Size C_SIZE                            :0xedc8
18:19:32: Reserv3                                       :0x0
18:19:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:32: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:32: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:32: Reserv4                                       :0x0
18:19:32: Write Speed Factor R2W_FACTOR                 :0x2
18:19:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:32: FILE_FORMAT_GRP                               :0x0
18:19:32: COPY flag                                     :0x1
18:19:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:32: File_Format                                   :0x0
18:19:32: CRC                                           :0x0
18:19:32: ####CSD Registe Values####  

18:19:32: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:19:32: ProductSerialNumber = 0x23482900
18:19:32: CardMaximumLBA      = 0x3b72400
18:19:32: CardCapacity        = 32G
18:19:32: Is card secure      = 0
18:19:32: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:19:32: [DVTCommonLib]###  LogicalWrite called
18:19:34: [ WriteLba(0x568FAA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 651 ] 
18:19:34: [DVTCommonLib]###  LogicalWrite Completed 

18:19:34: [DVTCommonLib]###  LogicalRead called
18:19:36: [ ReadLba(0x568FAA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 652 ] 
18:19:36: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:19:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:19:36: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 39 times 

18:19:36: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:19:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 653 ] 
18:19:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:36: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7DB0>, <py_sfcl.CommandDataDefinition object at 0x0682D690>) , Command count = 654 ] 
18:19:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D150>, <py_sfcl.CommandDataDefinition object at 0x0682D1E0>) , Command count = 655 ] 
18:19:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:36: [ SetCardRCA(0x1, 0xD555) , Command count = 656 ] 
18:19:36: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:36: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:19:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:19:36: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:19:36: [ SetBusWidth(0x1) , Command count = 657 ] 
18:19:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:36: ####CSD Registe 2.0 Values####
18:19:36: CSD_STRUCTURE                                 :0x1
18:19:36: Reserv1                                       :0x0
18:19:36: Time Access 1 TAAC                            :0xe
18:19:36: Time Access 2 NSAC*100                        :0x0
18:19:36: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:36: Card Command Classess CCC                     :0x5b5
18:19:36: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:36: DSR(driver stage register)  DSR_IMP           :0x0
18:19:36: Reserv2                                       :0x0
18:19:36: Device Size C_SIZE                            :0xedc8
18:19:36: Reserv3                                       :0x0
18:19:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:36: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:36: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:36: Reserv4                                       :0x0
18:19:36: Write Speed Factor R2W_FACTOR                 :0x2
18:19:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:36: FILE_FORMAT_GRP                               :0x0
18:19:36: COPY flag                                     :0x1
18:19:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:36: File_Format                                   :0x0
18:19:36: CRC                                           :0x0
18:19:36: ####CSD Registe Values####  

18:19:36: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:19:36: ProductSerialNumber = 0x23482900
18:19:36: CardMaximumLBA      = 0x3b72400
18:19:36: CardCapacity        = 32G
18:19:36: Is card secure      = 0
18:19:36: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:19:36: [DVTCommonLib]###  LogicalWrite called
18:19:38: [ WriteLba(0xF59504, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 658 ] 
18:19:38: [DVTCommonLib]###  LogicalWrite Completed 

18:19:38: [DVTCommonLib]###  LogicalRead called
18:19:39: [ ReadLba(0xF59504, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 659 ] 
18:19:39: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:19:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:19:39: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 40 times 

18:19:39: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:19:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 660 ] 
18:19:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:39: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D3F0>, <py_sfcl.CommandDataDefinition object at 0x0682CF90>) , Command count = 661 ] 
18:19:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CD80>, <py_sfcl.CommandDataDefinition object at 0x0682CCF0>) , Command count = 662 ] 
18:19:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:39: [ SetCardRCA(0x1, 0xD555) , Command count = 663 ] 
18:19:39: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:39: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:19:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:19:39: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:19:39: [ SetBusWidth(0x1) , Command count = 664 ] 
18:19:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:39: ####CSD Registe 2.0 Values####
18:19:39: CSD_STRUCTURE                                 :0x1
18:19:39: Reserv1                                       :0x0
18:19:39: Time Access 1 TAAC                            :0xe
18:19:39: Time Access 2 NSAC*100                        :0x0
18:19:39: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:39: Card Command Classess CCC                     :0x5b5
18:19:39: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:39: DSR(driver stage register)  DSR_IMP           :0x0
18:19:39: Reserv2                                       :0x0
18:19:39: Device Size C_SIZE                            :0xedc8
18:19:39: Reserv3                                       :0x0
18:19:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:39: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:39: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:39: Reserv4                                       :0x0
18:19:39: Write Speed Factor R2W_FACTOR                 :0x2
18:19:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:39: FILE_FORMAT_GRP                               :0x0
18:19:39: COPY flag                                     :0x1
18:19:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:39: File_Format                                   :0x0
18:19:39: CRC                                           :0x0
18:19:39: ####CSD Registe Values####  

18:19:39: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:19:39: ProductSerialNumber = 0x23482900
18:19:39: CardMaximumLBA      = 0x3b72400
18:19:39: CardCapacity        = 32G
18:19:39: Is card secure      = 0
18:19:39: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:19:39: [DVTCommonLib]###  LogicalWrite called
18:19:41: [ WriteLba(0xAE445, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 665 ] 
18:19:41: [DVTCommonLib]###  LogicalWrite Completed 

18:19:41: [DVTCommonLib]###  LogicalRead called
18:19:42: [ ReadLba(0xAE445, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 666 ] 
18:19:42: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:19:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:19:42: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 41 times 

18:19:42: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:19:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 667 ] 
18:19:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:43: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7B10>, <py_sfcl.CommandDataDefinition object at 0x0682CF30>) , Command count = 668 ] 
18:19:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C990>, <py_sfcl.CommandDataDefinition object at 0x0682C900>) , Command count = 669 ] 
18:19:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:43: [ SetCardRCA(0x1, 0xD555) , Command count = 670 ] 
18:19:43: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:43: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:19:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:19:43: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:19:43: [ SetBusWidth(0x1) , Command count = 671 ] 
18:19:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:43: ####CSD Registe 2.0 Values####
18:19:43: CSD_STRUCTURE                                 :0x1
18:19:43: Reserv1                                       :0x0
18:19:43: Time Access 1 TAAC                            :0xe
18:19:43: Time Access 2 NSAC*100                        :0x0
18:19:43: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:43: Card Command Classess CCC                     :0x5b5
18:19:43: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:43: DSR(driver stage register)  DSR_IMP           :0x0
18:19:43: Reserv2                                       :0x0
18:19:43: Device Size C_SIZE                            :0xedc8
18:19:43: Reserv3                                       :0x0
18:19:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:43: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:43: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:43: Reserv4                                       :0x0
18:19:43: Write Speed Factor R2W_FACTOR                 :0x2
18:19:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:43: FILE_FORMAT_GRP                               :0x0
18:19:43: COPY flag                                     :0x1
18:19:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:43: File_Format                                   :0x0
18:19:43: CRC                                           :0x0
18:19:43: ####CSD Registe Values####  

18:19:43: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:19:43: ProductSerialNumber = 0x23482900
18:19:43: CardMaximumLBA      = 0x3b72400
18:19:43: CardCapacity        = 32G
18:19:43: Is card secure      = 0
18:19:43: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:19:43: [DVTCommonLib]###  LogicalWrite called
18:19:44: [ WriteLba(0x3767FCD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 672 ] 
18:19:44: [DVTCommonLib]###  LogicalWrite Completed 

18:19:44: [DVTCommonLib]###  LogicalRead called
18:19:46: [ ReadLba(0x3767FCD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 673 ] 
18:19:46: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:19:46: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:19:46: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 42 times 

18:19:46: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:19:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 674 ] 
18:19:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CB70>, <py_sfcl.CommandDataDefinition object at 0x0682C630>) , Command count = 675 ] 
18:19:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C510>, <py_sfcl.CommandDataDefinition object at 0x0682C5D0>) , Command count = 676 ] 
18:19:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:46: [ SetCardRCA(0x1, 0xD555) , Command count = 677 ] 
18:19:46: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:46: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:19:46: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:19:46: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:19:46: [ SetBusWidth(0x1) , Command count = 678 ] 
18:19:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:46: ####CSD Registe 2.0 Values####
18:19:46: CSD_STRUCTURE                                 :0x1
18:19:46: Reserv1                                       :0x0
18:19:46: Time Access 1 TAAC                            :0xe
18:19:46: Time Access 2 NSAC*100                        :0x0
18:19:46: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:46: Card Command Classess CCC                     :0x5b5
18:19:46: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:46: DSR(driver stage register)  DSR_IMP           :0x0
18:19:46: Reserv2                                       :0x0
18:19:46: Device Size C_SIZE                            :0xedc8
18:19:46: Reserv3                                       :0x0
18:19:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:46: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:46: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:46: Reserv4                                       :0x0
18:19:46: Write Speed Factor R2W_FACTOR                 :0x2
18:19:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:46: FILE_FORMAT_GRP                               :0x0
18:19:46: COPY flag                                     :0x1
18:19:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:46: File_Format                                   :0x0
18:19:46: CRC                                           :0x0
18:19:46: ####CSD Registe Values####  

18:19:46: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:19:46: ProductSerialNumber = 0x23482900
18:19:46: CardMaximumLBA      = 0x3b72400
18:19:46: CardCapacity        = 32G
18:19:46: Is card secure      = 0
18:19:46: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:19:46: [DVTCommonLib]###  LogicalWrite called
18:19:48: [ WriteLba(0x1C068B1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 679 ] 
18:19:48: [DVTCommonLib]###  LogicalWrite Completed 

18:19:48: [DVTCommonLib]###  LogicalRead called
18:19:49: [ ReadLba(0x1C068B1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 680 ] 
18:19:49: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:19:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:19:49: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 43 times 

18:19:49: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:19:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 681 ] 
18:19:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:49: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C780>, <py_sfcl.CommandDataDefinition object at 0x0682C1B0>) , Command count = 682 ] 
18:19:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823180>, <py_sfcl.CommandDataDefinition object at 0x06823450>) , Command count = 683 ] 
18:19:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:49: [ SetCardRCA(0x1, 0xD555) , Command count = 684 ] 
18:19:49: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:49: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:19:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:19:49: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:19:49: [ SetBusWidth(0x1) , Command count = 685 ] 
18:19:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:49: ####CSD Registe 2.0 Values####
18:19:49: CSD_STRUCTURE                                 :0x1
18:19:49: Reserv1                                       :0x0
18:19:49: Time Access 1 TAAC                            :0xe
18:19:49: Time Access 2 NSAC*100                        :0x0
18:19:49: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:49: Card Command Classess CCC                     :0x5b5
18:19:49: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:49: DSR(driver stage register)  DSR_IMP           :0x0
18:19:49: Reserv2                                       :0x0
18:19:49: Device Size C_SIZE                            :0xedc8
18:19:49: Reserv3                                       :0x0
18:19:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:49: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:49: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:49: Reserv4                                       :0x0
18:19:49: Write Speed Factor R2W_FACTOR                 :0x2
18:19:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:49: FILE_FORMAT_GRP                               :0x0
18:19:49: COPY flag                                     :0x1
18:19:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:49: File_Format                                   :0x0
18:19:49: CRC                                           :0x0
18:19:49: ####CSD Registe Values####  

18:19:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:19:49: ProductSerialNumber = 0x23482900
18:19:49: CardMaximumLBA      = 0x3b72400
18:19:49: CardCapacity        = 32G
18:19:49: Is card secure      = 0
18:19:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:19:49: [DVTCommonLib]###  LogicalWrite called
18:19:51: [ WriteLba(0x1AB3764, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 686 ] 
18:19:51: [DVTCommonLib]###  LogicalWrite Completed 

18:19:51: [DVTCommonLib]###  LogicalRead called
18:19:53: [ ReadLba(0x1AB3764, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 687 ] 
18:19:53: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:19:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:19:53: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 44 times 

18:19:53: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:19:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 688 ] 
18:19:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:53: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C240>, <py_sfcl.CommandDataDefinition object at 0x06823EA0>) , Command count = 689 ] 
18:19:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823E10>, <py_sfcl.CommandDataDefinition object at 0x06823ED0>) , Command count = 690 ] 
18:19:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:53: [ SetCardRCA(0x1, 0xD555) , Command count = 691 ] 
18:19:53: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:53: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:19:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:19:53: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:19:53: [ SetBusWidth(0x1) , Command count = 692 ] 
18:19:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:53: ####CSD Registe 2.0 Values####
18:19:53: CSD_STRUCTURE                                 :0x1
18:19:53: Reserv1                                       :0x0
18:19:53: Time Access 1 TAAC                            :0xe
18:19:53: Time Access 2 NSAC*100                        :0x0
18:19:53: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:53: Card Command Classess CCC                     :0x5b5
18:19:53: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:53: DSR(driver stage register)  DSR_IMP           :0x0
18:19:53: Reserv2                                       :0x0
18:19:53: Device Size C_SIZE                            :0xedc8
18:19:53: Reserv3                                       :0x0
18:19:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:53: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:53: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:53: Reserv4                                       :0x0
18:19:53: Write Speed Factor R2W_FACTOR                 :0x2
18:19:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:53: FILE_FORMAT_GRP                               :0x0
18:19:53: COPY flag                                     :0x1
18:19:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:53: File_Format                                   :0x0
18:19:53: CRC                                           :0x0
18:19:53: ####CSD Registe Values####  

18:19:53: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:19:53: ProductSerialNumber = 0x23482900
18:19:53: CardMaximumLBA      = 0x3b72400
18:19:53: CardCapacity        = 32G
18:19:53: Is card secure      = 0
18:19:53: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:19:53: [DVTCommonLib]###  LogicalWrite called
18:19:54: [ WriteLba(0x2E42233, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 693 ] 
18:19:54: [DVTCommonLib]###  LogicalWrite Completed 

18:19:54: [DVTCommonLib]###  LogicalRead called
18:19:56: [ ReadLba(0x2E42233, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 694 ] 
18:19:56: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:19:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:19:56: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 45 times 

18:19:56: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:19:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:19:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 695 ] 
18:19:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:19:56: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:19:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:19:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:19:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:19:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:19:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823F30>, <py_sfcl.CommandDataDefinition object at 0x06823030>) , Command count = 696 ] 
18:19:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:19:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823240>, <py_sfcl.CommandDataDefinition object at 0x06823750>) , Command count = 697 ] 
18:19:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:19:56: [ SetCardRCA(0x1, 0xD555) , Command count = 698 ] 
18:19:56: [DVTCommonLib]### Identification :Idenfication of card completed 

18:19:56: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:19:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:19:56: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:19:56: [ SetBusWidth(0x1) , Command count = 699 ] 
18:19:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:19:56: ####CSD Registe 2.0 Values####
18:19:56: CSD_STRUCTURE                                 :0x1
18:19:56: Reserv1                                       :0x0
18:19:56: Time Access 1 TAAC                            :0xe
18:19:56: Time Access 2 NSAC*100                        :0x0
18:19:56: Data Transfer Rate TRAN_SPEED                 :0x32
18:19:56: Card Command Classess CCC                     :0x5b5
18:19:56: Max Read Data Block Length  READ_BL_LEN       :0x9
18:19:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:19:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:19:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:19:56: DSR(driver stage register)  DSR_IMP           :0x0
18:19:56: Reserv2                                       :0x0
18:19:56: Device Size C_SIZE                            :0xedc8
18:19:56: Reserv3                                       :0x0
18:19:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:19:56: Erase Sector Size SECTOR_SIZE                 :0x7f
18:19:56: Write Protect Group Size WP_GRP_SIZE          :0x0
18:19:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:19:56: Reserv4                                       :0x0
18:19:56: Write Speed Factor R2W_FACTOR                 :0x2
18:19:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:19:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:19:56: FILE_FORMAT_GRP                               :0x0
18:19:56: COPY flag                                     :0x1
18:19:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:19:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:19:56: File_Format                                   :0x0
18:19:56: CRC                                           :0x0
18:19:56: ####CSD Registe Values####  

18:19:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:19:56: ProductSerialNumber = 0x23482900
18:19:56: CardMaximumLBA      = 0x3b72400
18:19:56: CardCapacity        = 32G
18:19:56: Is card secure      = 0
18:19:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:19:56: [DVTCommonLib]###  LogicalWrite called
18:19:58: [ WriteLba(0x2FB1871, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 700 ] 
18:19:58: [DVTCommonLib]###  LogicalWrite Completed 

18:19:58: [DVTCommonLib]###  LogicalRead called
18:19:59: [ ReadLba(0x2FB1871, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 701 ] 
18:19:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:19:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:19:59: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 46 times 

18:19:59: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:19:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 702 ] 
18:20:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823C30>, <py_sfcl.CommandDataDefinition object at 0x068234B0>) , Command count = 703 ] 
18:20:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068233C0>, <py_sfcl.CommandDataDefinition object at 0x06823300>) , Command count = 704 ] 
18:20:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:00: [ SetCardRCA(0x1, 0xD555) , Command count = 705 ] 
18:20:00: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:00: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:20:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:20:00: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:20:00: [ SetBusWidth(0x1) , Command count = 706 ] 
18:20:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:00: ####CSD Registe 2.0 Values####
18:20:00: CSD_STRUCTURE                                 :0x1
18:20:00: Reserv1                                       :0x0
18:20:00: Time Access 1 TAAC                            :0xe
18:20:00: Time Access 2 NSAC*100                        :0x0
18:20:00: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:00: Card Command Classess CCC                     :0x5b5
18:20:00: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:00: DSR(driver stage register)  DSR_IMP           :0x0
18:20:00: Reserv2                                       :0x0
18:20:00: Device Size C_SIZE                            :0xedc8
18:20:00: Reserv3                                       :0x0
18:20:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:00: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:00: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:00: Reserv4                                       :0x0
18:20:00: Write Speed Factor R2W_FACTOR                 :0x2
18:20:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:00: FILE_FORMAT_GRP                               :0x0
18:20:00: COPY flag                                     :0x1
18:20:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:00: File_Format                                   :0x0
18:20:00: CRC                                           :0x0
18:20:00: ####CSD Registe Values####  

18:20:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:20:00: ProductSerialNumber = 0x23482900
18:20:00: CardMaximumLBA      = 0x3b72400
18:20:00: CardCapacity        = 32G
18:20:00: Is card secure      = 0
18:20:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:20:00: [DVTCommonLib]###  LogicalWrite called
18:20:01: [ WriteLba(0x7C96B2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 707 ] 
18:20:01: [DVTCommonLib]###  LogicalWrite Completed 

18:20:01: [DVTCommonLib]###  LogicalRead called
18:20:03: [ ReadLba(0x7C96B2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 708 ] 
18:20:03: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:20:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:20:03: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 47 times 

18:20:03: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:20:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 709 ] 
18:20:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:03: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823090>, <py_sfcl.CommandDataDefinition object at 0x068230C0>) , Command count = 710 ] 
18:20:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823720>, <py_sfcl.CommandDataDefinition object at 0x06823780>) , Command count = 711 ] 
18:20:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:03: [ SetCardRCA(0x1, 0xD555) , Command count = 712 ] 
18:20:03: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:03: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:20:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:20:03: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:20:03: [ SetBusWidth(0x1) , Command count = 713 ] 
18:20:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:03: ####CSD Registe 2.0 Values####
18:20:03: CSD_STRUCTURE                                 :0x1
18:20:03: Reserv1                                       :0x0
18:20:03: Time Access 1 TAAC                            :0xe
18:20:03: Time Access 2 NSAC*100                        :0x0
18:20:03: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:03: Card Command Classess CCC                     :0x5b5
18:20:03: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:03: DSR(driver stage register)  DSR_IMP           :0x0
18:20:03: Reserv2                                       :0x0
18:20:03: Device Size C_SIZE                            :0xedc8
18:20:03: Reserv3                                       :0x0
18:20:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:03: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:03: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:03: Reserv4                                       :0x0
18:20:03: Write Speed Factor R2W_FACTOR                 :0x2
18:20:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:03: FILE_FORMAT_GRP                               :0x0
18:20:03: COPY flag                                     :0x1
18:20:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:03: File_Format                                   :0x0
18:20:03: CRC                                           :0x0
18:20:03: ####CSD Registe Values####  

18:20:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:20:03: ProductSerialNumber = 0x23482900
18:20:03: CardMaximumLBA      = 0x3b72400
18:20:03: CardCapacity        = 32G
18:20:03: Is card secure      = 0
18:20:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:20:03: [DVTCommonLib]###  LogicalWrite called
18:20:05: [ WriteLba(0x74D84D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 714 ] 
18:20:05: [DVTCommonLib]###  LogicalWrite Completed 

18:20:05: [DVTCommonLib]###  LogicalRead called
18:20:07: [ ReadLba(0x74D84D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 715 ] 
18:20:07: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:20:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:20:07: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 48 times 

18:20:07: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:20:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 716 ] 
18:20:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:07: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068233F0>, <py_sfcl.CommandDataDefinition object at 0x06823570>) , Command count = 717 ] 
18:20:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823A50>, <py_sfcl.CommandDataDefinition object at 0x06823AB0>) , Command count = 718 ] 
18:20:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:07: [ SetCardRCA(0x1, 0xD555) , Command count = 719 ] 
18:20:07: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:07: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:20:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:20:07: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:20:07: [ SetBusWidth(0x1) , Command count = 720 ] 
18:20:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:07: ####CSD Registe 2.0 Values####
18:20:07: CSD_STRUCTURE                                 :0x1
18:20:07: Reserv1                                       :0x0
18:20:07: Time Access 1 TAAC                            :0xe
18:20:07: Time Access 2 NSAC*100                        :0x0
18:20:07: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:07: Card Command Classess CCC                     :0x5b5
18:20:07: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:07: DSR(driver stage register)  DSR_IMP           :0x0
18:20:07: Reserv2                                       :0x0
18:20:07: Device Size C_SIZE                            :0xedc8
18:20:07: Reserv3                                       :0x0
18:20:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:07: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:07: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:07: Reserv4                                       :0x0
18:20:07: Write Speed Factor R2W_FACTOR                 :0x2
18:20:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:07: FILE_FORMAT_GRP                               :0x0
18:20:07: COPY flag                                     :0x1
18:20:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:07: File_Format                                   :0x0
18:20:07: CRC                                           :0x0
18:20:07: ####CSD Registe Values####  

18:20:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:20:07: ProductSerialNumber = 0x23482900
18:20:07: CardMaximumLBA      = 0x3b72400
18:20:07: CardCapacity        = 32G
18:20:07: Is card secure      = 0
18:20:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:20:07: [DVTCommonLib]###  LogicalWrite called
18:20:09: [ WriteLba(0x1AE9304, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 721 ] 
18:20:09: [DVTCommonLib]###  LogicalWrite Completed 

18:20:09: [DVTCommonLib]###  LogicalRead called
18:20:10: [ ReadLba(0x1AE9304, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 722 ] 
18:20:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:20:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:20:10: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 49 times 

18:20:10: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:20:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 723 ] 
18:20:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:11: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823690>, <py_sfcl.CommandDataDefinition object at 0x068239F0>) , Command count = 724 ] 
18:20:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823C90>, <py_sfcl.CommandDataDefinition object at 0x06823CF0>) , Command count = 725 ] 
18:20:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:11: [ SetCardRCA(0x1, 0xD555) , Command count = 726 ] 
18:20:11: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:11: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:20:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:20:11: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:20:11: [ SetBusWidth(0x1) , Command count = 727 ] 
18:20:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:11: ####CSD Registe 2.0 Values####
18:20:11: CSD_STRUCTURE                                 :0x1
18:20:11: Reserv1                                       :0x0
18:20:11: Time Access 1 TAAC                            :0xe
18:20:11: Time Access 2 NSAC*100                        :0x0
18:20:11: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:11: Card Command Classess CCC                     :0x5b5
18:20:11: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:11: DSR(driver stage register)  DSR_IMP           :0x0
18:20:11: Reserv2                                       :0x0
18:20:11: Device Size C_SIZE                            :0xedc8
18:20:11: Reserv3                                       :0x0
18:20:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:11: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:11: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:11: Reserv4                                       :0x0
18:20:11: Write Speed Factor R2W_FACTOR                 :0x2
18:20:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:11: FILE_FORMAT_GRP                               :0x0
18:20:11: COPY flag                                     :0x1
18:20:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:11: File_Format                                   :0x0
18:20:11: CRC                                           :0x0
18:20:11: ####CSD Registe Values####  

18:20:11: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:20:11: ProductSerialNumber = 0x23482900
18:20:11: CardMaximumLBA      = 0x3b72400
18:20:11: CardCapacity        = 32G
18:20:11: Is card secure      = 0
18:20:11: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:20:11: [DVTCommonLib]###  LogicalWrite called
18:20:12: [ WriteLba(0x21ACC57, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 728 ] 
18:20:12: [DVTCommonLib]###  LogicalWrite Completed 

18:20:12: [DVTCommonLib]###  LogicalRead called
18:20:14: [ ReadLba(0x21ACC57, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 729 ] 
18:20:14: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:20:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:20:14: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 50 times 

18:20:14: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:20:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 730 ] 
18:20:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:14: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C0C0>, <py_sfcl.CommandDataDefinition object at 0x0682C150>) , Command count = 731 ] 
18:20:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C0F0>, <py_sfcl.CommandDataDefinition object at 0x06823A80>) , Command count = 732 ] 
18:20:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:14: [ SetCardRCA(0x1, 0xD555) , Command count = 733 ] 
18:20:14: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:14: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:20:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:20:14: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:20:14: [ SetBusWidth(0x1) , Command count = 734 ] 
18:20:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:14: ####CSD Registe 2.0 Values####
18:20:14: CSD_STRUCTURE                                 :0x1
18:20:14: Reserv1                                       :0x0
18:20:14: Time Access 1 TAAC                            :0xe
18:20:14: Time Access 2 NSAC*100                        :0x0
18:20:14: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:14: Card Command Classess CCC                     :0x5b5
18:20:14: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:14: DSR(driver stage register)  DSR_IMP           :0x0
18:20:14: Reserv2                                       :0x0
18:20:14: Device Size C_SIZE                            :0xedc8
18:20:14: Reserv3                                       :0x0
18:20:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:14: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:14: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:14: Reserv4                                       :0x0
18:20:14: Write Speed Factor R2W_FACTOR                 :0x2
18:20:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:14: FILE_FORMAT_GRP                               :0x0
18:20:14: COPY flag                                     :0x1
18:20:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:14: File_Format                                   :0x0
18:20:14: CRC                                           :0x0
18:20:14: ####CSD Registe Values####  

18:20:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:20:14: ProductSerialNumber = 0x23482900
18:20:14: CardMaximumLBA      = 0x3b72400
18:20:14: CardCapacity        = 32G
18:20:14: Is card secure      = 0
18:20:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:20:14: [DVTCommonLib]###  LogicalWrite called
18:20:16: [ WriteLba(0x2F8719B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 735 ] 
18:20:16: [DVTCommonLib]###  LogicalWrite Completed 

18:20:16: [DVTCommonLib]###  LogicalRead called
18:20:17: [ ReadLba(0x2F8719B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 736 ] 
18:20:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:20:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:20:17: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 51 times 

18:20:17: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:20:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 737 ] 
18:20:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:17: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C030>, <py_sfcl.CommandDataDefinition object at 0x0682C3C0>) , Command count = 738 ] 
18:20:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C4E0>, <py_sfcl.CommandDataDefinition object at 0x06823A80>) , Command count = 739 ] 
18:20:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:17: [ SetCardRCA(0x1, 0xD555) , Command count = 740 ] 
18:20:17: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:17: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:20:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:20:17: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:20:17: [ SetBusWidth(0x1) , Command count = 741 ] 
18:20:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:17: ####CSD Registe 2.0 Values####
18:20:17: CSD_STRUCTURE                                 :0x1
18:20:17: Reserv1                                       :0x0
18:20:17: Time Access 1 TAAC                            :0xe
18:20:17: Time Access 2 NSAC*100                        :0x0
18:20:17: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:17: Card Command Classess CCC                     :0x5b5
18:20:17: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:17: DSR(driver stage register)  DSR_IMP           :0x0
18:20:17: Reserv2                                       :0x0
18:20:17: Device Size C_SIZE                            :0xedc8
18:20:17: Reserv3                                       :0x0
18:20:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:17: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:17: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:17: Reserv4                                       :0x0
18:20:17: Write Speed Factor R2W_FACTOR                 :0x2
18:20:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:17: FILE_FORMAT_GRP                               :0x0
18:20:17: COPY flag                                     :0x1
18:20:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:17: File_Format                                   :0x0
18:20:17: CRC                                           :0x0
18:20:17: ####CSD Registe Values####  

18:20:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:20:17: ProductSerialNumber = 0x23482900
18:20:17: CardMaximumLBA      = 0x3b72400
18:20:17: CardCapacity        = 32G
18:20:17: Is card secure      = 0
18:20:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:20:17: [DVTCommonLib]###  LogicalWrite called
18:20:19: [ WriteLba(0x30DB6FE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 742 ] 
18:20:19: [DVTCommonLib]###  LogicalWrite Completed 

18:20:19: [DVTCommonLib]###  LogicalRead called
18:20:21: [ ReadLba(0x30DB6FE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 743 ] 
18:20:21: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:20:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:20:21: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 52 times 

18:20:21: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:20:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 744 ] 
18:20:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:21: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C060>, <py_sfcl.CommandDataDefinition object at 0x0682C330>) , Command count = 745 ] 
18:20:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C8D0>, <py_sfcl.CommandDataDefinition object at 0x0682C7E0>) , Command count = 746 ] 
18:20:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:21: [ SetCardRCA(0x1, 0xD555) , Command count = 747 ] 
18:20:21: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:21: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:20:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:20:21: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:20:21: [ SetBusWidth(0x1) , Command count = 748 ] 
18:20:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:21: ####CSD Registe 2.0 Values####
18:20:21: CSD_STRUCTURE                                 :0x1
18:20:21: Reserv1                                       :0x0
18:20:21: Time Access 1 TAAC                            :0xe
18:20:21: Time Access 2 NSAC*100                        :0x0
18:20:21: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:21: Card Command Classess CCC                     :0x5b5
18:20:21: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:21: DSR(driver stage register)  DSR_IMP           :0x0
18:20:21: Reserv2                                       :0x0
18:20:21: Device Size C_SIZE                            :0xedc8
18:20:21: Reserv3                                       :0x0
18:20:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:21: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:21: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:21: Reserv4                                       :0x0
18:20:21: Write Speed Factor R2W_FACTOR                 :0x2
18:20:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:21: FILE_FORMAT_GRP                               :0x0
18:20:21: COPY flag                                     :0x1
18:20:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:21: File_Format                                   :0x0
18:20:21: CRC                                           :0x0
18:20:21: ####CSD Registe Values####  

18:20:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:20:21: ProductSerialNumber = 0x23482900
18:20:21: CardMaximumLBA      = 0x3b72400
18:20:21: CardCapacity        = 32G
18:20:21: Is card secure      = 0
18:20:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:20:21: [DVTCommonLib]###  LogicalWrite called
18:20:22: [ WriteLba(0x1E08C3A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 749 ] 
18:20:22: [DVTCommonLib]###  LogicalWrite Completed 

18:20:22: [DVTCommonLib]###  LogicalRead called
18:20:24: [ ReadLba(0x1E08C3A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 750 ] 
18:20:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:20:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:20:24: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 53 times 

18:20:24: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:20:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 751 ] 
18:20:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:24: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C450>, <py_sfcl.CommandDataDefinition object at 0x0682C720>) , Command count = 752 ] 
18:20:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CCC0>, <py_sfcl.CommandDataDefinition object at 0x0682CD20>) , Command count = 753 ] 
18:20:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:24: [ SetCardRCA(0x1, 0xD555) , Command count = 754 ] 
18:20:24: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:24: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:20:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:20:24: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:20:24: [ SetBusWidth(0x1) , Command count = 755 ] 
18:20:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:24: ####CSD Registe 2.0 Values####
18:20:24: CSD_STRUCTURE                                 :0x1
18:20:24: Reserv1                                       :0x0
18:20:24: Time Access 1 TAAC                            :0xe
18:20:24: Time Access 2 NSAC*100                        :0x0
18:20:24: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:24: Card Command Classess CCC                     :0x5b5
18:20:24: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:24: DSR(driver stage register)  DSR_IMP           :0x0
18:20:24: Reserv2                                       :0x0
18:20:24: Device Size C_SIZE                            :0xedc8
18:20:24: Reserv3                                       :0x0
18:20:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:24: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:24: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:24: Reserv4                                       :0x0
18:20:24: Write Speed Factor R2W_FACTOR                 :0x2
18:20:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:24: FILE_FORMAT_GRP                               :0x0
18:20:24: COPY flag                                     :0x1
18:20:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:24: File_Format                                   :0x0
18:20:24: CRC                                           :0x0
18:20:24: ####CSD Registe Values####  

18:20:24: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:20:24: ProductSerialNumber = 0x23482900
18:20:24: CardMaximumLBA      = 0x3b72400
18:20:24: CardCapacity        = 32G
18:20:24: Is card secure      = 0
18:20:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:20:24: [DVTCommonLib]###  LogicalWrite called
18:20:26: [ WriteLba(0x30DC146, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 756 ] 
18:20:26: [DVTCommonLib]###  LogicalWrite Completed 

18:20:26: [DVTCommonLib]###  LogicalRead called
18:20:27: [ ReadLba(0x30DC146, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 757 ] 
18:20:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:20:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:20:27: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 54 times 

18:20:27: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:20:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 758 ] 
18:20:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:28: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614BDB0>, <py_sfcl.CommandDataDefinition object at 0x0682C840>) , Command count = 759 ] 
18:20:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061642D0>, <py_sfcl.CommandDataDefinition object at 0x0682CF60>) , Command count = 760 ] 
18:20:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:28: [ SetCardRCA(0x1, 0xD555) , Command count = 761 ] 
18:20:28: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:28: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:20:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:20:28: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:20:28: [ SetBusWidth(0x1) , Command count = 762 ] 
18:20:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:28: ####CSD Registe 2.0 Values####
18:20:28: CSD_STRUCTURE                                 :0x1
18:20:28: Reserv1                                       :0x0
18:20:28: Time Access 1 TAAC                            :0xe
18:20:28: Time Access 2 NSAC*100                        :0x0
18:20:28: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:28: Card Command Classess CCC                     :0x5b5
18:20:28: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:28: DSR(driver stage register)  DSR_IMP           :0x0
18:20:28: Reserv2                                       :0x0
18:20:28: Device Size C_SIZE                            :0xedc8
18:20:28: Reserv3                                       :0x0
18:20:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:28: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:28: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:28: Reserv4                                       :0x0
18:20:28: Write Speed Factor R2W_FACTOR                 :0x2
18:20:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:28: FILE_FORMAT_GRP                               :0x0
18:20:28: COPY flag                                     :0x1
18:20:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:28: File_Format                                   :0x0
18:20:28: CRC                                           :0x0
18:20:28: ####CSD Registe Values####  

18:20:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:20:28: ProductSerialNumber = 0x23482900
18:20:28: CardMaximumLBA      = 0x3b72400
18:20:28: CardCapacity        = 32G
18:20:28: Is card secure      = 0
18:20:28: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:20:28: [DVTCommonLib]###  LogicalWrite called
18:20:29: [ WriteLba(0xD9CDEA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 763 ] 
18:20:29: [DVTCommonLib]###  LogicalWrite Completed 

18:20:29: [DVTCommonLib]###  LogicalRead called
18:20:31: [ ReadLba(0xD9CDEA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 764 ] 
18:20:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:20:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:20:31: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 55 times 

18:20:31: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:20:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 765 ] 
18:20:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:31: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614BD50>, <py_sfcl.CommandDataDefinition object at 0x06168CF0>) , Command count = 766 ] 
18:20:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616EC90>, <py_sfcl.CommandDataDefinition object at 0x0682CC30>) , Command count = 767 ] 
18:20:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:31: [ SetCardRCA(0x1, 0xD555) , Command count = 768 ] 
18:20:31: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:31: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:20:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:20:31: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:20:31: [ SetBusWidth(0x1) , Command count = 769 ] 
18:20:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:31: ####CSD Registe 2.0 Values####
18:20:31: CSD_STRUCTURE                                 :0x1
18:20:31: Reserv1                                       :0x0
18:20:31: Time Access 1 TAAC                            :0xe
18:20:31: Time Access 2 NSAC*100                        :0x0
18:20:31: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:31: Card Command Classess CCC                     :0x5b5
18:20:31: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:31: DSR(driver stage register)  DSR_IMP           :0x0
18:20:31: Reserv2                                       :0x0
18:20:31: Device Size C_SIZE                            :0xedc8
18:20:31: Reserv3                                       :0x0
18:20:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:31: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:31: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:31: Reserv4                                       :0x0
18:20:31: Write Speed Factor R2W_FACTOR                 :0x2
18:20:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:31: FILE_FORMAT_GRP                               :0x0
18:20:31: COPY flag                                     :0x1
18:20:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:31: File_Format                                   :0x0
18:20:31: CRC                                           :0x0
18:20:31: ####CSD Registe Values####  

18:20:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:20:31: ProductSerialNumber = 0x23482900
18:20:31: CardMaximumLBA      = 0x3b72400
18:20:31: CardCapacity        = 32G
18:20:31: Is card secure      = 0
18:20:31: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:20:31: [DVTCommonLib]###  LogicalWrite called
18:20:33: [ WriteLba(0x129B0F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 770 ] 
18:20:33: [DVTCommonLib]###  LogicalWrite Completed 

18:20:33: [DVTCommonLib]###  LogicalRead called
18:20:34: [ ReadLba(0x129B0F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 771 ] 
18:20:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:20:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:20:34: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 56 times 

18:20:34: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:20:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 772 ] 
18:20:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:34: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614A0C0>, <py_sfcl.CommandDataDefinition object at 0x061A0E70>) , Command count = 773 ] 
18:20:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616E690>, <py_sfcl.CommandDataDefinition object at 0x0682D390>) , Command count = 774 ] 
18:20:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:34: [ SetCardRCA(0x1, 0xD555) , Command count = 775 ] 
18:20:34: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:34: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:20:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:20:34: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:20:34: [ SetBusWidth(0x1) , Command count = 776 ] 
18:20:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:34: ####CSD Registe 2.0 Values####
18:20:34: CSD_STRUCTURE                                 :0x1
18:20:34: Reserv1                                       :0x0
18:20:34: Time Access 1 TAAC                            :0xe
18:20:34: Time Access 2 NSAC*100                        :0x0
18:20:34: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:34: Card Command Classess CCC                     :0x5b5
18:20:34: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:34: DSR(driver stage register)  DSR_IMP           :0x0
18:20:34: Reserv2                                       :0x0
18:20:34: Device Size C_SIZE                            :0xedc8
18:20:34: Reserv3                                       :0x0
18:20:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:34: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:34: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:34: Reserv4                                       :0x0
18:20:34: Write Speed Factor R2W_FACTOR                 :0x2
18:20:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:34: FILE_FORMAT_GRP                               :0x0
18:20:34: COPY flag                                     :0x1
18:20:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:34: File_Format                                   :0x0
18:20:34: CRC                                           :0x0
18:20:34: ####CSD Registe Values####  

18:20:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:20:34: ProductSerialNumber = 0x23482900
18:20:34: CardMaximumLBA      = 0x3b72400
18:20:34: CardCapacity        = 32G
18:20:34: Is card secure      = 0
18:20:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:20:34: [DVTCommonLib]###  LogicalWrite called
18:20:36: [ WriteLba(0xE65F07, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 777 ] 
18:20:36: [DVTCommonLib]###  LogicalWrite Completed 

18:20:36: [DVTCommonLib]###  LogicalRead called
18:20:38: [ ReadLba(0xE65F07, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 778 ] 
18:20:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:20:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:20:38: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 57 times 

18:20:38: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:20:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 779 ] 
18:20:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:38: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E01C90>, <py_sfcl.CommandDataDefinition object at 0x0616ECF0>) , Command count = 780 ] 
18:20:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614AE70>, <py_sfcl.CommandDataDefinition object at 0x0682D630>) , Command count = 781 ] 
18:20:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:38: [ SetCardRCA(0x1, 0xD555) , Command count = 782 ] 
18:20:38: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:38: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:20:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:20:38: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:20:38: [ SetBusWidth(0x1) , Command count = 783 ] 
18:20:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:38: ####CSD Registe 2.0 Values####
18:20:38: CSD_STRUCTURE                                 :0x1
18:20:38: Reserv1                                       :0x0
18:20:38: Time Access 1 TAAC                            :0xe
18:20:38: Time Access 2 NSAC*100                        :0x0
18:20:38: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:38: Card Command Classess CCC                     :0x5b5
18:20:38: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:38: DSR(driver stage register)  DSR_IMP           :0x0
18:20:38: Reserv2                                       :0x0
18:20:38: Device Size C_SIZE                            :0xedc8
18:20:38: Reserv3                                       :0x0
18:20:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:38: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:38: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:38: Reserv4                                       :0x0
18:20:38: Write Speed Factor R2W_FACTOR                 :0x2
18:20:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:38: FILE_FORMAT_GRP                               :0x0
18:20:38: COPY flag                                     :0x1
18:20:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:38: File_Format                                   :0x0
18:20:38: CRC                                           :0x0
18:20:38: ####CSD Registe Values####  

18:20:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:20:38: ProductSerialNumber = 0x23482900
18:20:38: CardMaximumLBA      = 0x3b72400
18:20:38: CardCapacity        = 32G
18:20:38: Is card secure      = 0
18:20:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:20:38: [DVTCommonLib]###  LogicalWrite called
18:20:39: [ WriteLba(0x3A21F9D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 784 ] 
18:20:39: [DVTCommonLib]###  LogicalWrite Completed 

18:20:39: [DVTCommonLib]###  LogicalRead called
18:20:41: [ ReadLba(0x3A21F9D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 785 ] 
18:20:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:20:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:20:41: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 58 times 

18:20:41: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:20:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 786 ] 
18:20:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:41: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A0A80>, <py_sfcl.CommandDataDefinition object at 0x06157030>) , Command count = 787 ] 
18:20:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5C30>, <py_sfcl.CommandDataDefinition object at 0x0682D8D0>) , Command count = 788 ] 
18:20:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:41: [ SetCardRCA(0x1, 0xD555) , Command count = 789 ] 
18:20:41: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:41: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:20:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:20:41: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:20:41: [ SetBusWidth(0x1) , Command count = 790 ] 
18:20:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:41: ####CSD Registe 2.0 Values####
18:20:41: CSD_STRUCTURE                                 :0x1
18:20:41: Reserv1                                       :0x0
18:20:41: Time Access 1 TAAC                            :0xe
18:20:41: Time Access 2 NSAC*100                        :0x0
18:20:41: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:41: Card Command Classess CCC                     :0x5b5
18:20:41: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:41: DSR(driver stage register)  DSR_IMP           :0x0
18:20:41: Reserv2                                       :0x0
18:20:41: Device Size C_SIZE                            :0xedc8
18:20:41: Reserv3                                       :0x0
18:20:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:41: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:41: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:41: Reserv4                                       :0x0
18:20:41: Write Speed Factor R2W_FACTOR                 :0x2
18:20:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:41: FILE_FORMAT_GRP                               :0x0
18:20:41: COPY flag                                     :0x1
18:20:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:41: File_Format                                   :0x0
18:20:41: CRC                                           :0x0
18:20:41: ####CSD Registe Values####  

18:20:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:20:41: ProductSerialNumber = 0x23482900
18:20:41: CardMaximumLBA      = 0x3b72400
18:20:41: CardCapacity        = 32G
18:20:41: Is card secure      = 0
18:20:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:20:41: [DVTCommonLib]###  LogicalWrite called
18:20:43: [ WriteLba(0x1538589, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 791 ] 
18:20:43: [DVTCommonLib]###  LogicalWrite Completed 

18:20:43: [DVTCommonLib]###  LogicalRead called
18:20:44: [ ReadLba(0x1538589, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 792 ] 
18:20:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:20:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:20:44: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 59 times 

18:20:44: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:20:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 793 ] 
18:20:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:44: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614A840>, <py_sfcl.CommandDataDefinition object at 0x061A5B40>) , Command count = 794 ] 
18:20:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682DB40>, <py_sfcl.CommandDataDefinition object at 0x0682DBA0>) , Command count = 795 ] 
18:20:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:45: [ SetCardRCA(0x1, 0xD555) , Command count = 796 ] 
18:20:45: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:45: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:20:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:20:45: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:20:45: [ SetBusWidth(0x1) , Command count = 797 ] 
18:20:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:45: ####CSD Registe 2.0 Values####
18:20:45: CSD_STRUCTURE                                 :0x1
18:20:45: Reserv1                                       :0x0
18:20:45: Time Access 1 TAAC                            :0xe
18:20:45: Time Access 2 NSAC*100                        :0x0
18:20:45: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:45: Card Command Classess CCC                     :0x5b5
18:20:45: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:45: DSR(driver stage register)  DSR_IMP           :0x0
18:20:45: Reserv2                                       :0x0
18:20:45: Device Size C_SIZE                            :0xedc8
18:20:45: Reserv3                                       :0x0
18:20:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:45: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:45: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:45: Reserv4                                       :0x0
18:20:45: Write Speed Factor R2W_FACTOR                 :0x2
18:20:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:45: FILE_FORMAT_GRP                               :0x0
18:20:45: COPY flag                                     :0x1
18:20:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:45: File_Format                                   :0x0
18:20:45: CRC                                           :0x0
18:20:45: ####CSD Registe Values####  

18:20:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:20:45: ProductSerialNumber = 0x23482900
18:20:45: CardMaximumLBA      = 0x3b72400
18:20:45: CardCapacity        = 32G
18:20:45: Is card secure      = 0
18:20:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:20:45: [DVTCommonLib]###  LogicalWrite called
18:20:46: [ WriteLba(0xC8E4D0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 798 ] 
18:20:46: [DVTCommonLib]###  LogicalWrite Completed 

18:20:46: [DVTCommonLib]###  LogicalRead called
18:20:48: [ ReadLba(0xC8E4D0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 799 ] 
18:20:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:20:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:20:48: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 60 times 

18:20:48: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:20:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 800 ] 
18:20:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:48: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5C00>, <py_sfcl.CommandDataDefinition object at 0x061A5C90>) , Command count = 801 ] 
18:20:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BAAE0>, <py_sfcl.CommandDataDefinition object at 0x0682DCC0>) , Command count = 802 ] 
18:20:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:48: [ SetCardRCA(0x1, 0xD555) , Command count = 803 ] 
18:20:48: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:48: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:20:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:20:48: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:20:48: [ SetBusWidth(0x1) , Command count = 804 ] 
18:20:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:48: ####CSD Registe 2.0 Values####
18:20:48: CSD_STRUCTURE                                 :0x1
18:20:48: Reserv1                                       :0x0
18:20:48: Time Access 1 TAAC                            :0xe
18:20:48: Time Access 2 NSAC*100                        :0x0
18:20:48: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:48: Card Command Classess CCC                     :0x5b5
18:20:48: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:48: DSR(driver stage register)  DSR_IMP           :0x0
18:20:48: Reserv2                                       :0x0
18:20:48: Device Size C_SIZE                            :0xedc8
18:20:48: Reserv3                                       :0x0
18:20:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:48: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:48: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:48: Reserv4                                       :0x0
18:20:48: Write Speed Factor R2W_FACTOR                 :0x2
18:20:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:48: FILE_FORMAT_GRP                               :0x0
18:20:48: COPY flag                                     :0x1
18:20:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:48: File_Format                                   :0x0
18:20:48: CRC                                           :0x0
18:20:48: ####CSD Registe Values####  

18:20:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:20:48: ProductSerialNumber = 0x23482900
18:20:48: CardMaximumLBA      = 0x3b72400
18:20:48: CardCapacity        = 32G
18:20:48: Is card secure      = 0
18:20:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:20:48: [DVTCommonLib]###  LogicalWrite called
18:20:50: [ WriteLba(0x24A72A4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 805 ] 
18:20:50: [DVTCommonLib]###  LogicalWrite Completed 

18:20:50: [DVTCommonLib]###  LogicalRead called
18:20:51: [ ReadLba(0x24A72A4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 806 ] 
18:20:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:20:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:20:51: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 61 times 

18:20:51: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:20:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 807 ] 
18:20:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:51: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5F60>, <py_sfcl.CommandDataDefinition object at 0x067AF090>) , Command count = 808 ] 
18:20:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682DD80>, <py_sfcl.CommandDataDefinition object at 0x0682DDB0>) , Command count = 809 ] 
18:20:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:51: [ SetCardRCA(0x1, 0xD555) , Command count = 810 ] 
18:20:51: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:51: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:20:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:20:51: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:20:51: [ SetBusWidth(0x1) , Command count = 811 ] 
18:20:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:51: ####CSD Registe 2.0 Values####
18:20:51: CSD_STRUCTURE                                 :0x1
18:20:51: Reserv1                                       :0x0
18:20:51: Time Access 1 TAAC                            :0xe
18:20:51: Time Access 2 NSAC*100                        :0x0
18:20:51: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:51: Card Command Classess CCC                     :0x5b5
18:20:51: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:51: DSR(driver stage register)  DSR_IMP           :0x0
18:20:51: Reserv2                                       :0x0
18:20:51: Device Size C_SIZE                            :0xedc8
18:20:51: Reserv3                                       :0x0
18:20:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:51: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:51: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:51: Reserv4                                       :0x0
18:20:51: Write Speed Factor R2W_FACTOR                 :0x2
18:20:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:51: FILE_FORMAT_GRP                               :0x0
18:20:51: COPY flag                                     :0x1
18:20:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:51: File_Format                                   :0x0
18:20:51: CRC                                           :0x0
18:20:51: ####CSD Registe Values####  

18:20:51: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:20:51: ProductSerialNumber = 0x23482900
18:20:51: CardMaximumLBA      = 0x3b72400
18:20:51: CardCapacity        = 32G
18:20:51: Is card secure      = 0
18:20:51: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:20:51: [DVTCommonLib]###  LogicalWrite called
18:20:53: [ WriteLba(0x2F8332B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 812 ] 
18:20:53: [DVTCommonLib]###  LogicalWrite Completed 

18:20:53: [DVTCommonLib]###  LogicalRead called
18:20:55: [ ReadLba(0x2F8332B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 813 ] 
18:20:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:20:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:20:55: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 62 times 

18:20:55: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:20:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 814 ] 
18:20:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:55: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067AF390>, <py_sfcl.CommandDataDefinition object at 0x066FF330>) , Command count = 815 ] 
18:20:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1510>, <py_sfcl.CommandDataDefinition object at 0x0682DDB0>) , Command count = 816 ] 
18:20:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:55: [ SetCardRCA(0x1, 0xD555) , Command count = 817 ] 
18:20:55: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:55: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:20:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:20:55: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:20:55: [ SetBusWidth(0x1) , Command count = 818 ] 
18:20:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:55: ####CSD Registe 2.0 Values####
18:20:55: CSD_STRUCTURE                                 :0x1
18:20:55: Reserv1                                       :0x0
18:20:55: Time Access 1 TAAC                            :0xe
18:20:55: Time Access 2 NSAC*100                        :0x0
18:20:55: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:55: Card Command Classess CCC                     :0x5b5
18:20:55: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:55: DSR(driver stage register)  DSR_IMP           :0x0
18:20:55: Reserv2                                       :0x0
18:20:55: Device Size C_SIZE                            :0xedc8
18:20:55: Reserv3                                       :0x0
18:20:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:55: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:55: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:55: Reserv4                                       :0x0
18:20:55: Write Speed Factor R2W_FACTOR                 :0x2
18:20:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:55: FILE_FORMAT_GRP                               :0x0
18:20:55: COPY flag                                     :0x1
18:20:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:55: File_Format                                   :0x0
18:20:55: CRC                                           :0x0
18:20:55: ####CSD Registe Values####  

18:20:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:20:55: ProductSerialNumber = 0x23482900
18:20:55: CardMaximumLBA      = 0x3b72400
18:20:55: CardCapacity        = 32G
18:20:55: Is card secure      = 0
18:20:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:20:55: [DVTCommonLib]###  LogicalWrite called
18:20:56: [ WriteLba(0x5E89A8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 819 ] 
18:20:56: [DVTCommonLib]###  LogicalWrite Completed 

18:20:56: [DVTCommonLib]###  LogicalRead called
18:20:58: [ ReadLba(0x5E89A8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 820 ] 
18:20:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:20:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:20:58: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 63 times 

18:20:58: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:20:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:20:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 821 ] 
18:20:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:20:58: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:20:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:20:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:20:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:20:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:20:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616E300>, <py_sfcl.CommandDataDefinition object at 0x066FF1B0>) , Command count = 822 ] 
18:20:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:20:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1540>, <py_sfcl.CommandDataDefinition object at 0x067C13F0>) , Command count = 823 ] 
18:20:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:20:58: [ SetCardRCA(0x1, 0xD555) , Command count = 824 ] 
18:20:58: [DVTCommonLib]### Identification :Idenfication of card completed 

18:20:58: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:20:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:20:58: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:20:58: [ SetBusWidth(0x1) , Command count = 825 ] 
18:20:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:20:58: ####CSD Registe 2.0 Values####
18:20:58: CSD_STRUCTURE                                 :0x1
18:20:58: Reserv1                                       :0x0
18:20:58: Time Access 1 TAAC                            :0xe
18:20:58: Time Access 2 NSAC*100                        :0x0
18:20:58: Data Transfer Rate TRAN_SPEED                 :0x32
18:20:58: Card Command Classess CCC                     :0x5b5
18:20:58: Max Read Data Block Length  READ_BL_LEN       :0x9
18:20:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:20:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:20:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:20:58: DSR(driver stage register)  DSR_IMP           :0x0
18:20:58: Reserv2                                       :0x0
18:20:58: Device Size C_SIZE                            :0xedc8
18:20:58: Reserv3                                       :0x0
18:20:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:20:58: Erase Sector Size SECTOR_SIZE                 :0x7f
18:20:58: Write Protect Group Size WP_GRP_SIZE          :0x0
18:20:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:20:58: Reserv4                                       :0x0
18:20:58: Write Speed Factor R2W_FACTOR                 :0x2
18:20:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:20:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:20:58: FILE_FORMAT_GRP                               :0x0
18:20:58: COPY flag                                     :0x1
18:20:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:20:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:20:58: File_Format                                   :0x0
18:20:58: CRC                                           :0x0
18:20:58: ####CSD Registe Values####  

18:20:58: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:20:58: ProductSerialNumber = 0x23482900
18:20:58: CardMaximumLBA      = 0x3b72400
18:20:58: CardCapacity        = 32G
18:20:58: Is card secure      = 0
18:20:58: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:20:58: [DVTCommonLib]###  LogicalWrite called
18:21:00: [ WriteLba(0x3316643, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 826 ] 
18:21:00: [DVTCommonLib]###  LogicalWrite Completed 

18:21:00: [DVTCommonLib]###  LogicalRead called
18:21:01: [ ReadLba(0x3316643, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 827 ] 
18:21:01: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:21:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:21:01: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 64 times 

18:21:01: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:21:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 828 ] 
18:21:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:01: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066FF360>, <py_sfcl.CommandDataDefinition object at 0x067BAF60>) , Command count = 829 ] 
18:21:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1DB0>, <py_sfcl.CommandDataDefinition object at 0x067C13C0>) , Command count = 830 ] 
18:21:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:01: [ SetCardRCA(0x1, 0xD555) , Command count = 831 ] 
18:21:01: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:01: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:21:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:21:01: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:21:01: [ SetBusWidth(0x1) , Command count = 832 ] 
18:21:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:01: ####CSD Registe 2.0 Values####
18:21:01: CSD_STRUCTURE                                 :0x1
18:21:01: Reserv1                                       :0x0
18:21:01: Time Access 1 TAAC                            :0xe
18:21:01: Time Access 2 NSAC*100                        :0x0
18:21:01: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:01: Card Command Classess CCC                     :0x5b5
18:21:01: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:01: DSR(driver stage register)  DSR_IMP           :0x0
18:21:01: Reserv2                                       :0x0
18:21:01: Device Size C_SIZE                            :0xedc8
18:21:01: Reserv3                                       :0x0
18:21:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:01: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:01: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:01: Reserv4                                       :0x0
18:21:01: Write Speed Factor R2W_FACTOR                 :0x2
18:21:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:01: FILE_FORMAT_GRP                               :0x0
18:21:01: COPY flag                                     :0x1
18:21:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:01: File_Format                                   :0x0
18:21:01: CRC                                           :0x0
18:21:01: ####CSD Registe Values####  

18:21:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:21:02: ProductSerialNumber = 0x23482900
18:21:02: CardMaximumLBA      = 0x3b72400
18:21:02: CardCapacity        = 32G
18:21:02: Is card secure      = 0
18:21:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:21:02: [DVTCommonLib]###  LogicalWrite called
18:21:03: [ WriteLba(0x17CFF88, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 833 ] 
18:21:03: [DVTCommonLib]###  LogicalWrite Completed 

18:21:03: [DVTCommonLib]###  LogicalRead called
18:21:05: [ ReadLba(0x17CFF88, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 834 ] 
18:21:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:21:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:21:05: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 65 times 

18:21:05: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:21:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 835 ] 
18:21:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:05: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067AFE70>, <py_sfcl.CommandDataDefinition object at 0x067AF0F0>) , Command count = 836 ] 
18:21:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7270>, <py_sfcl.CommandDataDefinition object at 0x067C1F00>) , Command count = 837 ] 
18:21:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:05: [ SetCardRCA(0x1, 0xD555) , Command count = 838 ] 
18:21:05: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:05: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:21:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:21:05: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:21:05: [ SetBusWidth(0x1) , Command count = 839 ] 
18:21:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:05: ####CSD Registe 2.0 Values####
18:21:05: CSD_STRUCTURE                                 :0x1
18:21:05: Reserv1                                       :0x0
18:21:05: Time Access 1 TAAC                            :0xe
18:21:05: Time Access 2 NSAC*100                        :0x0
18:21:05: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:05: Card Command Classess CCC                     :0x5b5
18:21:05: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:05: DSR(driver stage register)  DSR_IMP           :0x0
18:21:05: Reserv2                                       :0x0
18:21:05: Device Size C_SIZE                            :0xedc8
18:21:05: Reserv3                                       :0x0
18:21:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:05: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:05: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:05: Reserv4                                       :0x0
18:21:05: Write Speed Factor R2W_FACTOR                 :0x2
18:21:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:05: FILE_FORMAT_GRP                               :0x0
18:21:05: COPY flag                                     :0x1
18:21:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:05: File_Format                                   :0x0
18:21:05: CRC                                           :0x0
18:21:05: ####CSD Registe Values####  

18:21:05: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:21:05: ProductSerialNumber = 0x23482900
18:21:05: CardMaximumLBA      = 0x3b72400
18:21:05: CardCapacity        = 32G
18:21:05: Is card secure      = 0
18:21:05: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:21:05: [DVTCommonLib]###  LogicalWrite called
18:21:07: [ WriteLba(0x11F1C10, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 840 ] 
18:21:07: [DVTCommonLib]###  LogicalWrite Completed 

18:21:07: [DVTCommonLib]###  LogicalRead called
18:21:08: [ ReadLba(0x11F1C10, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 841 ] 
18:21:08: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:21:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:21:08: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 66 times 

18:21:08: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:21:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 842 ] 
18:21:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:08: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616E270>, <py_sfcl.CommandDataDefinition object at 0x067C72A0>) , Command count = 843 ] 
18:21:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C73C0>, <py_sfcl.CommandDataDefinition object at 0x067C74B0>) , Command count = 844 ] 
18:21:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:08: [ SetCardRCA(0x1, 0xD555) , Command count = 845 ] 
18:21:08: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:08: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:21:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:21:08: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:21:08: [ SetBusWidth(0x1) , Command count = 846 ] 
18:21:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:08: ####CSD Registe 2.0 Values####
18:21:08: CSD_STRUCTURE                                 :0x1
18:21:08: Reserv1                                       :0x0
18:21:08: Time Access 1 TAAC                            :0xe
18:21:08: Time Access 2 NSAC*100                        :0x0
18:21:08: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:08: Card Command Classess CCC                     :0x5b5
18:21:08: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:08: DSR(driver stage register)  DSR_IMP           :0x0
18:21:08: Reserv2                                       :0x0
18:21:08: Device Size C_SIZE                            :0xedc8
18:21:08: Reserv3                                       :0x0
18:21:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:08: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:08: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:08: Reserv4                                       :0x0
18:21:08: Write Speed Factor R2W_FACTOR                 :0x2
18:21:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:08: FILE_FORMAT_GRP                               :0x0
18:21:08: COPY flag                                     :0x1
18:21:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:08: File_Format                                   :0x0
18:21:08: CRC                                           :0x0
18:21:08: ####CSD Registe Values####  

18:21:08: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:21:08: ProductSerialNumber = 0x23482900
18:21:08: CardMaximumLBA      = 0x3b72400
18:21:08: CardCapacity        = 32G
18:21:08: Is card secure      = 0
18:21:08: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:21:08: [DVTCommonLib]###  LogicalWrite called
18:21:10: [ WriteLba(0x368EA0E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 847 ] 
18:21:10: [DVTCommonLib]###  LogicalWrite Completed 

18:21:10: [DVTCommonLib]###  LogicalRead called
18:21:12: [ ReadLba(0x368EA0E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 848 ] 
18:21:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:21:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:21:12: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 67 times 

18:21:12: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:21:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 849 ] 
18:21:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:12: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7150>, <py_sfcl.CommandDataDefinition object at 0x067C70F0>) , Command count = 850 ] 
18:21:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C78A0>, <py_sfcl.CommandDataDefinition object at 0x067C75A0>) , Command count = 851 ] 
18:21:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:12: [ SetCardRCA(0x1, 0xD555) , Command count = 852 ] 
18:21:12: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:12: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:21:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:21:12: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:21:12: [ SetBusWidth(0x1) , Command count = 853 ] 
18:21:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:12: ####CSD Registe 2.0 Values####
18:21:12: CSD_STRUCTURE                                 :0x1
18:21:12: Reserv1                                       :0x0
18:21:12: Time Access 1 TAAC                            :0xe
18:21:12: Time Access 2 NSAC*100                        :0x0
18:21:12: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:12: Card Command Classess CCC                     :0x5b5
18:21:12: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:12: DSR(driver stage register)  DSR_IMP           :0x0
18:21:12: Reserv2                                       :0x0
18:21:12: Device Size C_SIZE                            :0xedc8
18:21:12: Reserv3                                       :0x0
18:21:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:12: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:12: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:12: Reserv4                                       :0x0
18:21:12: Write Speed Factor R2W_FACTOR                 :0x2
18:21:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:12: FILE_FORMAT_GRP                               :0x0
18:21:12: COPY flag                                     :0x1
18:21:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:12: File_Format                                   :0x0
18:21:12: CRC                                           :0x0
18:21:12: ####CSD Registe Values####  

18:21:12: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:21:12: ProductSerialNumber = 0x23482900
18:21:12: CardMaximumLBA      = 0x3b72400
18:21:12: CardCapacity        = 32G
18:21:12: Is card secure      = 0
18:21:12: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:21:12: [DVTCommonLib]###  LogicalWrite called
18:21:13: [ WriteLba(0x10C682C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 854 ] 
18:21:13: [DVTCommonLib]###  LogicalWrite Completed 

18:21:13: [DVTCommonLib]###  LogicalRead called
18:21:15: [ ReadLba(0x10C682C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 855 ] 
18:21:15: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:21:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:21:15: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 68 times 

18:21:15: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:21:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 856 ] 
18:21:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:15: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7330>, <py_sfcl.CommandDataDefinition object at 0x067C7600>) , Command count = 857 ] 
18:21:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067CDF60>, <py_sfcl.CommandDataDefinition object at 0x067C76F0>) , Command count = 858 ] 
18:21:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:15: [ SetCardRCA(0x1, 0xD555) , Command count = 859 ] 
18:21:15: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:15: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:21:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:21:15: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:21:15: [ SetBusWidth(0x1) , Command count = 860 ] 
18:21:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:15: ####CSD Registe 2.0 Values####
18:21:15: CSD_STRUCTURE                                 :0x1
18:21:15: Reserv1                                       :0x0
18:21:15: Time Access 1 TAAC                            :0xe
18:21:15: Time Access 2 NSAC*100                        :0x0
18:21:15: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:15: Card Command Classess CCC                     :0x5b5
18:21:15: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:15: DSR(driver stage register)  DSR_IMP           :0x0
18:21:15: Reserv2                                       :0x0
18:21:15: Device Size C_SIZE                            :0xedc8
18:21:15: Reserv3                                       :0x0
18:21:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:15: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:15: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:15: Reserv4                                       :0x0
18:21:15: Write Speed Factor R2W_FACTOR                 :0x2
18:21:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:15: FILE_FORMAT_GRP                               :0x0
18:21:15: COPY flag                                     :0x1
18:21:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:15: File_Format                                   :0x0
18:21:15: CRC                                           :0x0
18:21:15: ####CSD Registe Values####  

18:21:15: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:21:15: ProductSerialNumber = 0x23482900
18:21:15: CardMaximumLBA      = 0x3b72400
18:21:15: CardCapacity        = 32G
18:21:15: Is card secure      = 0
18:21:15: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:21:15: [DVTCommonLib]###  LogicalWrite called
18:21:17: [ WriteLba(0x9BAAA5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 861 ] 
18:21:17: [DVTCommonLib]###  LogicalWrite Completed 

18:21:17: [DVTCommonLib]###  LogicalRead called
18:21:18: [ ReadLba(0x9BAAA5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 862 ] 
18:21:18: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:21:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:21:18: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 69 times 

18:21:18: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:21:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 863 ] 
18:21:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:18: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7810>, <py_sfcl.CommandDataDefinition object at 0x067C7C00>) , Command count = 864 ] 
18:21:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7240>, <py_sfcl.CommandDataDefinition object at 0x067C7540>) , Command count = 865 ] 
18:21:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:18: [ SetCardRCA(0x1, 0xD555) , Command count = 866 ] 
18:21:18: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:18: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:21:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:21:18: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:21:18: [ SetBusWidth(0x1) , Command count = 867 ] 
18:21:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:18: ####CSD Registe 2.0 Values####
18:21:18: CSD_STRUCTURE                                 :0x1
18:21:18: Reserv1                                       :0x0
18:21:18: Time Access 1 TAAC                            :0xe
18:21:18: Time Access 2 NSAC*100                        :0x0
18:21:18: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:18: Card Command Classess CCC                     :0x5b5
18:21:18: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:18: DSR(driver stage register)  DSR_IMP           :0x0
18:21:18: Reserv2                                       :0x0
18:21:18: Device Size C_SIZE                            :0xedc8
18:21:18: Reserv3                                       :0x0
18:21:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:18: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:18: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:18: Reserv4                                       :0x0
18:21:18: Write Speed Factor R2W_FACTOR                 :0x2
18:21:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:18: FILE_FORMAT_GRP                               :0x0
18:21:18: COPY flag                                     :0x1
18:21:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:18: File_Format                                   :0x0
18:21:18: CRC                                           :0x0
18:21:18: ####CSD Registe Values####  

18:21:18: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:21:18: ProductSerialNumber = 0x23482900
18:21:18: CardMaximumLBA      = 0x3b72400
18:21:18: CardCapacity        = 32G
18:21:18: Is card secure      = 0
18:21:18: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:21:18: [DVTCommonLib]###  LogicalWrite called
18:21:20: [ WriteLba(0x1A7DC44, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 868 ] 
18:21:20: [DVTCommonLib]###  LogicalWrite Completed 

18:21:20: [DVTCommonLib]###  LogicalRead called
18:21:22: [ ReadLba(0x1A7DC44, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 869 ] 
18:21:22: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:21:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:21:22: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 70 times 

18:21:22: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:21:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 870 ] 
18:21:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:22: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067CDF90>, <py_sfcl.CommandDataDefinition object at 0x067C7510>) , Command count = 871 ] 
18:21:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1420>, <py_sfcl.CommandDataDefinition object at 0x067C1F90>) , Command count = 872 ] 
18:21:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:22: [ SetCardRCA(0x1, 0xD555) , Command count = 873 ] 
18:21:22: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:22: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:21:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:21:22: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:21:22: [ SetBusWidth(0x1) , Command count = 874 ] 
18:21:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:22: ####CSD Registe 2.0 Values####
18:21:22: CSD_STRUCTURE                                 :0x1
18:21:22: Reserv1                                       :0x0
18:21:22: Time Access 1 TAAC                            :0xe
18:21:22: Time Access 2 NSAC*100                        :0x0
18:21:22: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:22: Card Command Classess CCC                     :0x5b5
18:21:22: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:22: DSR(driver stage register)  DSR_IMP           :0x0
18:21:22: Reserv2                                       :0x0
18:21:22: Device Size C_SIZE                            :0xedc8
18:21:22: Reserv3                                       :0x0
18:21:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:22: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:22: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:22: Reserv4                                       :0x0
18:21:22: Write Speed Factor R2W_FACTOR                 :0x2
18:21:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:22: FILE_FORMAT_GRP                               :0x0
18:21:22: COPY flag                                     :0x1
18:21:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:22: File_Format                                   :0x0
18:21:22: CRC                                           :0x0
18:21:22: ####CSD Registe Values####  

18:21:22: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:21:22: ProductSerialNumber = 0x23482900
18:21:22: CardMaximumLBA      = 0x3b72400
18:21:22: CardCapacity        = 32G
18:21:22: Is card secure      = 0
18:21:22: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:21:22: [DVTCommonLib]###  LogicalWrite called
18:21:23: [ WriteLba(0x254F2D7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 875 ] 
18:21:23: [DVTCommonLib]###  LogicalWrite Completed 

18:21:23: [DVTCommonLib]###  LogicalRead called
18:21:25: [ ReadLba(0x254F2D7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 876 ] 
18:21:25: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:21:25: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:21:25: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 71 times 

18:21:25: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:21:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 877 ] 
18:21:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:25: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7480>, <py_sfcl.CommandDataDefinition object at 0x067C1CC0>) , Command count = 878 ] 
18:21:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682DB70>, <py_sfcl.CommandDataDefinition object at 0x0682DC90>) , Command count = 879 ] 
18:21:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:25: [ SetCardRCA(0x1, 0xD555) , Command count = 880 ] 
18:21:25: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:25: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:21:25: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:21:25: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:21:25: [ SetBusWidth(0x1) , Command count = 881 ] 
18:21:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:25: ####CSD Registe 2.0 Values####
18:21:25: CSD_STRUCTURE                                 :0x1
18:21:25: Reserv1                                       :0x0
18:21:25: Time Access 1 TAAC                            :0xe
18:21:25: Time Access 2 NSAC*100                        :0x0
18:21:25: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:25: Card Command Classess CCC                     :0x5b5
18:21:25: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:25: DSR(driver stage register)  DSR_IMP           :0x0
18:21:25: Reserv2                                       :0x0
18:21:25: Device Size C_SIZE                            :0xedc8
18:21:25: Reserv3                                       :0x0
18:21:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:25: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:25: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:25: Reserv4                                       :0x0
18:21:25: Write Speed Factor R2W_FACTOR                 :0x2
18:21:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:25: FILE_FORMAT_GRP                               :0x0
18:21:25: COPY flag                                     :0x1
18:21:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:25: File_Format                                   :0x0
18:21:25: CRC                                           :0x0
18:21:25: ####CSD Registe Values####  

18:21:25: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:21:25: ProductSerialNumber = 0x23482900
18:21:25: CardMaximumLBA      = 0x3b72400
18:21:25: CardCapacity        = 32G
18:21:25: Is card secure      = 0
18:21:25: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:21:25: [DVTCommonLib]###  LogicalWrite called
18:21:27: [ WriteLba(0xFF4A0E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 882 ] 
18:21:27: [DVTCommonLib]###  LogicalWrite Completed 

18:21:27: [DVTCommonLib]###  LogicalRead called
18:21:28: [ ReadLba(0xFF4A0E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 883 ] 
18:21:28: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:21:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:21:28: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 72 times 

18:21:28: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:21:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 884 ] 
18:21:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:29: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1EA0>, <py_sfcl.CommandDataDefinition object at 0x067C1360>) , Command count = 885 ] 
18:21:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D8A0>, <py_sfcl.CommandDataDefinition object at 0x0682D900>) , Command count = 886 ] 
18:21:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:29: [ SetCardRCA(0x1, 0xD555) , Command count = 887 ] 
18:21:29: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:29: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:21:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:21:29: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:21:29: [ SetBusWidth(0x1) , Command count = 888 ] 
18:21:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:29: ####CSD Registe 2.0 Values####
18:21:29: CSD_STRUCTURE                                 :0x1
18:21:29: Reserv1                                       :0x0
18:21:29: Time Access 1 TAAC                            :0xe
18:21:29: Time Access 2 NSAC*100                        :0x0
18:21:29: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:29: Card Command Classess CCC                     :0x5b5
18:21:29: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:29: DSR(driver stage register)  DSR_IMP           :0x0
18:21:29: Reserv2                                       :0x0
18:21:29: Device Size C_SIZE                            :0xedc8
18:21:29: Reserv3                                       :0x0
18:21:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:29: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:29: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:29: Reserv4                                       :0x0
18:21:29: Write Speed Factor R2W_FACTOR                 :0x2
18:21:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:29: FILE_FORMAT_GRP                               :0x0
18:21:29: COPY flag                                     :0x1
18:21:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:29: File_Format                                   :0x0
18:21:29: CRC                                           :0x0
18:21:29: ####CSD Registe Values####  

18:21:29: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:21:29: ProductSerialNumber = 0x23482900
18:21:29: CardMaximumLBA      = 0x3b72400
18:21:29: CardCapacity        = 32G
18:21:29: Is card secure      = 0
18:21:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:21:29: [DVTCommonLib]###  LogicalWrite called
18:21:30: [ WriteLba(0x2FE31A9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 889 ] 
18:21:30: [DVTCommonLib]###  LogicalWrite Completed 

18:21:30: [DVTCommonLib]###  LogicalRead called
18:21:32: [ ReadLba(0x2FE31A9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 890 ] 
18:21:32: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:21:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:21:32: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 73 times 

18:21:32: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:21:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 891 ] 
18:21:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:32: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682DCF0>, <py_sfcl.CommandDataDefinition object at 0x0682DB10>) , Command count = 892 ] 
18:21:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7CC0>, <py_sfcl.CommandDataDefinition object at 0x0682D660>) , Command count = 893 ] 
18:21:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:32: [ SetCardRCA(0x1, 0xD555) , Command count = 894 ] 
18:21:32: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:32: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:21:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:21:32: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:21:32: [ SetBusWidth(0x1) , Command count = 895 ] 
18:21:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:32: ####CSD Registe 2.0 Values####
18:21:32: CSD_STRUCTURE                                 :0x1
18:21:32: Reserv1                                       :0x0
18:21:32: Time Access 1 TAAC                            :0xe
18:21:32: Time Access 2 NSAC*100                        :0x0
18:21:32: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:32: Card Command Classess CCC                     :0x5b5
18:21:32: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:32: DSR(driver stage register)  DSR_IMP           :0x0
18:21:32: Reserv2                                       :0x0
18:21:32: Device Size C_SIZE                            :0xedc8
18:21:32: Reserv3                                       :0x0
18:21:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:32: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:32: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:32: Reserv4                                       :0x0
18:21:32: Write Speed Factor R2W_FACTOR                 :0x2
18:21:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:32: FILE_FORMAT_GRP                               :0x0
18:21:32: COPY flag                                     :0x1
18:21:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:32: File_Format                                   :0x0
18:21:32: CRC                                           :0x0
18:21:32: ####CSD Registe Values####  

18:21:32: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:21:32: ProductSerialNumber = 0x23482900
18:21:32: CardMaximumLBA      = 0x3b72400
18:21:32: CardCapacity        = 32G
18:21:32: Is card secure      = 0
18:21:32: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:21:32: [DVTCommonLib]###  LogicalWrite called
18:21:34: [ WriteLba(0x26B41AE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 896 ] 
18:21:34: [DVTCommonLib]###  LogicalWrite Completed 

18:21:34: [DVTCommonLib]###  LogicalRead called
18:21:35: [ ReadLba(0x26B41AE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 897 ] 
18:21:35: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:21:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:21:35: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 74 times 

18:21:35: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:21:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 898 ] 
18:21:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:35: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D960>, <py_sfcl.CommandDataDefinition object at 0x0682D870>) , Command count = 899 ] 
18:21:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D3C0>, <py_sfcl.CommandDataDefinition object at 0x0682D4B0>) , Command count = 900 ] 
18:21:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:35: [ SetCardRCA(0x1, 0xD555) , Command count = 901 ] 
18:21:35: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:35: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:21:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:21:35: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:21:35: [ SetBusWidth(0x1) , Command count = 902 ] 
18:21:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:35: ####CSD Registe 2.0 Values####
18:21:35: CSD_STRUCTURE                                 :0x1
18:21:35: Reserv1                                       :0x0
18:21:35: Time Access 1 TAAC                            :0xe
18:21:35: Time Access 2 NSAC*100                        :0x0
18:21:35: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:35: Card Command Classess CCC                     :0x5b5
18:21:35: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:35: DSR(driver stage register)  DSR_IMP           :0x0
18:21:35: Reserv2                                       :0x0
18:21:35: Device Size C_SIZE                            :0xedc8
18:21:35: Reserv3                                       :0x0
18:21:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:35: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:35: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:35: Reserv4                                       :0x0
18:21:35: Write Speed Factor R2W_FACTOR                 :0x2
18:21:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:35: FILE_FORMAT_GRP                               :0x0
18:21:35: COPY flag                                     :0x1
18:21:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:35: File_Format                                   :0x0
18:21:35: CRC                                           :0x0
18:21:35: ####CSD Registe Values####  

18:21:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:21:35: ProductSerialNumber = 0x23482900
18:21:35: CardMaximumLBA      = 0x3b72400
18:21:35: CardCapacity        = 32G
18:21:35: Is card secure      = 0
18:21:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:21:35: [DVTCommonLib]###  LogicalWrite called
18:21:37: [ WriteLba(0x314AB99, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 903 ] 
18:21:37: [DVTCommonLib]###  LogicalWrite Completed 

18:21:37: [DVTCommonLib]###  LogicalRead called
18:21:39: [ ReadLba(0x314AB99, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 904 ] 
18:21:39: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:21:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:21:39: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 75 times 

18:21:39: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:21:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 905 ] 
18:21:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:39: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7DB0>, <py_sfcl.CommandDataDefinition object at 0x0682D6C0>) , Command count = 906 ] 
18:21:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D060>, <py_sfcl.CommandDataDefinition object at 0x0682D0F0>) , Command count = 907 ] 
18:21:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:39: [ SetCardRCA(0x1, 0xD555) , Command count = 908 ] 
18:21:39: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:39: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:21:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:21:39: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:21:39: [ SetBusWidth(0x1) , Command count = 909 ] 
18:21:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:39: ####CSD Registe 2.0 Values####
18:21:39: CSD_STRUCTURE                                 :0x1
18:21:39: Reserv1                                       :0x0
18:21:39: Time Access 1 TAAC                            :0xe
18:21:39: Time Access 2 NSAC*100                        :0x0
18:21:39: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:39: Card Command Classess CCC                     :0x5b5
18:21:39: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:39: DSR(driver stage register)  DSR_IMP           :0x0
18:21:39: Reserv2                                       :0x0
18:21:39: Device Size C_SIZE                            :0xedc8
18:21:39: Reserv3                                       :0x0
18:21:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:39: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:39: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:39: Reserv4                                       :0x0
18:21:39: Write Speed Factor R2W_FACTOR                 :0x2
18:21:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:39: FILE_FORMAT_GRP                               :0x0
18:21:39: COPY flag                                     :0x1
18:21:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:39: File_Format                                   :0x0
18:21:39: CRC                                           :0x0
18:21:39: ####CSD Registe Values####  

18:21:39: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:21:39: ProductSerialNumber = 0x23482900
18:21:39: CardMaximumLBA      = 0x3b72400
18:21:39: CardCapacity        = 32G
18:21:39: Is card secure      = 0
18:21:39: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:21:39: [DVTCommonLib]###  LogicalWrite called
18:21:40: [ WriteLba(0x198F29A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 910 ] 
18:21:40: [DVTCommonLib]###  LogicalWrite Completed 

18:21:40: [DVTCommonLib]###  LogicalRead called
18:21:42: [ ReadLba(0x198F29A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 911 ] 
18:21:42: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:21:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:21:42: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 76 times 

18:21:42: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:21:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 912 ] 
18:21:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:42: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D450>, <py_sfcl.CommandDataDefinition object at 0x0682D3F0>) , Command count = 913 ] 
18:21:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CC90>, <py_sfcl.CommandDataDefinition object at 0x0682CDB0>) , Command count = 914 ] 
18:21:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:42: [ SetCardRCA(0x1, 0xD555) , Command count = 915 ] 
18:21:42: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:42: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:21:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:21:42: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:21:42: [ SetBusWidth(0x1) , Command count = 916 ] 
18:21:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:42: ####CSD Registe 2.0 Values####
18:21:42: CSD_STRUCTURE                                 :0x1
18:21:42: Reserv1                                       :0x0
18:21:42: Time Access 1 TAAC                            :0xe
18:21:42: Time Access 2 NSAC*100                        :0x0
18:21:42: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:42: Card Command Classess CCC                     :0x5b5
18:21:42: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:42: DSR(driver stage register)  DSR_IMP           :0x0
18:21:42: Reserv2                                       :0x0
18:21:42: Device Size C_SIZE                            :0xedc8
18:21:42: Reserv3                                       :0x0
18:21:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:42: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:42: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:42: Reserv4                                       :0x0
18:21:42: Write Speed Factor R2W_FACTOR                 :0x2
18:21:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:42: FILE_FORMAT_GRP                               :0x0
18:21:42: COPY flag                                     :0x1
18:21:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:42: File_Format                                   :0x0
18:21:42: CRC                                           :0x0
18:21:42: ####CSD Registe Values####  

18:21:42: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:21:42: ProductSerialNumber = 0x23482900
18:21:42: CardMaximumLBA      = 0x3b72400
18:21:42: CardCapacity        = 32G
18:21:42: Is card secure      = 0
18:21:42: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:21:42: [DVTCommonLib]###  LogicalWrite called
18:21:44: [ WriteLba(0xE426F9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 917 ] 
18:21:44: [DVTCommonLib]###  LogicalWrite Completed 

18:21:44: [DVTCommonLib]###  LogicalRead called
18:21:45: [ ReadLba(0xE426F9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 918 ] 
18:21:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:21:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:21:45: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 77 times 

18:21:45: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:21:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 919 ] 
18:21:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D150>, <py_sfcl.CommandDataDefinition object at 0x067C7B10>) , Command count = 920 ] 
18:21:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C8A0>, <py_sfcl.CommandDataDefinition object at 0x0682C9C0>) , Command count = 921 ] 
18:21:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:46: [ SetCardRCA(0x1, 0xD555) , Command count = 922 ] 
18:21:46: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:46: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:21:46: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:21:46: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:21:46: [ SetBusWidth(0x1) , Command count = 923 ] 
18:21:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:46: ####CSD Registe 2.0 Values####
18:21:46: CSD_STRUCTURE                                 :0x1
18:21:46: Reserv1                                       :0x0
18:21:46: Time Access 1 TAAC                            :0xe
18:21:46: Time Access 2 NSAC*100                        :0x0
18:21:46: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:46: Card Command Classess CCC                     :0x5b5
18:21:46: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:46: DSR(driver stage register)  DSR_IMP           :0x0
18:21:46: Reserv2                                       :0x0
18:21:46: Device Size C_SIZE                            :0xedc8
18:21:46: Reserv3                                       :0x0
18:21:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:46: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:46: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:46: Reserv4                                       :0x0
18:21:46: Write Speed Factor R2W_FACTOR                 :0x2
18:21:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:46: FILE_FORMAT_GRP                               :0x0
18:21:46: COPY flag                                     :0x1
18:21:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:46: File_Format                                   :0x0
18:21:46: CRC                                           :0x0
18:21:46: ####CSD Registe Values####  

18:21:46: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:21:46: ProductSerialNumber = 0x23482900
18:21:46: CardMaximumLBA      = 0x3b72400
18:21:46: CardCapacity        = 32G
18:21:46: Is card secure      = 0
18:21:46: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:21:46: [DVTCommonLib]###  LogicalWrite called
18:21:47: [ WriteLba(0x270E3C9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 924 ] 
18:21:47: [DVTCommonLib]###  LogicalWrite Completed 

18:21:47: [DVTCommonLib]###  LogicalRead called
18:21:49: [ ReadLba(0x270E3C9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 925 ] 
18:21:49: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:21:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:21:49: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 78 times 

18:21:49: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:21:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 926 ] 
18:21:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:49: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CD80>, <py_sfcl.CommandDataDefinition object at 0x0682CB70>) , Command count = 927 ] 
18:21:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C420>, <py_sfcl.CommandDataDefinition object at 0x0682C4B0>) , Command count = 928 ] 
18:21:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:49: [ SetCardRCA(0x1, 0xD555) , Command count = 929 ] 
18:21:49: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:49: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:21:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:21:49: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:21:49: [ SetBusWidth(0x1) , Command count = 930 ] 
18:21:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:49: ####CSD Registe 2.0 Values####
18:21:49: CSD_STRUCTURE                                 :0x1
18:21:49: Reserv1                                       :0x0
18:21:49: Time Access 1 TAAC                            :0xe
18:21:49: Time Access 2 NSAC*100                        :0x0
18:21:49: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:49: Card Command Classess CCC                     :0x5b5
18:21:49: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:49: DSR(driver stage register)  DSR_IMP           :0x0
18:21:49: Reserv2                                       :0x0
18:21:49: Device Size C_SIZE                            :0xedc8
18:21:49: Reserv3                                       :0x0
18:21:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:49: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:49: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:49: Reserv4                                       :0x0
18:21:49: Write Speed Factor R2W_FACTOR                 :0x2
18:21:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:49: FILE_FORMAT_GRP                               :0x0
18:21:49: COPY flag                                     :0x1
18:21:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:49: File_Format                                   :0x0
18:21:49: CRC                                           :0x0
18:21:49: ####CSD Registe Values####  

18:21:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:21:49: ProductSerialNumber = 0x23482900
18:21:49: CardMaximumLBA      = 0x3b72400
18:21:49: CardCapacity        = 32G
18:21:49: Is card secure      = 0
18:21:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:21:49: [DVTCommonLib]###  LogicalWrite called
18:21:51: [ WriteLba(0x24FDC2F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 931 ] 
18:21:51: [DVTCommonLib]###  LogicalWrite Completed 

18:21:51: [DVTCommonLib]###  LogicalRead called
18:21:52: [ ReadLba(0x24FDC2F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 932 ] 
18:21:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:21:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:21:52: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 79 times 

18:21:52: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:21:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 933 ] 
18:21:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:52: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823BA0>, <py_sfcl.CommandDataDefinition object at 0x0682C990>) , Command count = 934 ] 
18:21:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823C60>, <py_sfcl.CommandDataDefinition object at 0x0682C1B0>) , Command count = 935 ] 
18:21:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:52: [ SetCardRCA(0x1, 0xD555) , Command count = 936 ] 
18:21:52: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:52: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:21:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:21:52: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:21:52: [ SetBusWidth(0x1) , Command count = 937 ] 
18:21:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:52: ####CSD Registe 2.0 Values####
18:21:52: CSD_STRUCTURE                                 :0x1
18:21:52: Reserv1                                       :0x0
18:21:52: Time Access 1 TAAC                            :0xe
18:21:52: Time Access 2 NSAC*100                        :0x0
18:21:52: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:52: Card Command Classess CCC                     :0x5b5
18:21:52: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:52: DSR(driver stage register)  DSR_IMP           :0x0
18:21:52: Reserv2                                       :0x0
18:21:52: Device Size C_SIZE                            :0xedc8
18:21:52: Reserv3                                       :0x0
18:21:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:52: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:52: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:52: Reserv4                                       :0x0
18:21:52: Write Speed Factor R2W_FACTOR                 :0x2
18:21:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:52: FILE_FORMAT_GRP                               :0x0
18:21:52: COPY flag                                     :0x1
18:21:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:52: File_Format                                   :0x0
18:21:52: CRC                                           :0x0
18:21:52: ####CSD Registe Values####  

18:21:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:21:52: ProductSerialNumber = 0x23482900
18:21:52: CardMaximumLBA      = 0x3b72400
18:21:52: CardCapacity        = 32G
18:21:52: Is card secure      = 0
18:21:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:21:52: [DVTCommonLib]###  LogicalWrite called
18:21:54: [ WriteLba(0x22EB128, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 938 ] 
18:21:54: [DVTCommonLib]###  LogicalWrite Completed 

18:21:54: [DVTCommonLib]###  LogicalRead called
18:21:56: [ ReadLba(0x22EB128, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 939 ] 
18:21:56: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:21:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:21:56: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 80 times 

18:21:56: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:21:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 940 ] 
18:21:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:56: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823EA0>, <py_sfcl.CommandDataDefinition object at 0x06823D50>) , Command count = 941 ] 
18:21:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1CF0>, <py_sfcl.CommandDataDefinition object at 0x0682C510>) , Command count = 942 ] 
18:21:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:56: [ SetCardRCA(0x1, 0xD555) , Command count = 943 ] 
18:21:56: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:56: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:21:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:21:56: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:21:56: [ SetBusWidth(0x1) , Command count = 944 ] 
18:21:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:56: ####CSD Registe 2.0 Values####
18:21:56: CSD_STRUCTURE                                 :0x1
18:21:56: Reserv1                                       :0x0
18:21:56: Time Access 1 TAAC                            :0xe
18:21:56: Time Access 2 NSAC*100                        :0x0
18:21:56: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:56: Card Command Classess CCC                     :0x5b5
18:21:56: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:56: DSR(driver stage register)  DSR_IMP           :0x0
18:21:56: Reserv2                                       :0x0
18:21:56: Device Size C_SIZE                            :0xedc8
18:21:56: Reserv3                                       :0x0
18:21:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:56: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:56: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:56: Reserv4                                       :0x0
18:21:56: Write Speed Factor R2W_FACTOR                 :0x2
18:21:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:56: FILE_FORMAT_GRP                               :0x0
18:21:56: COPY flag                                     :0x1
18:21:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:56: File_Format                                   :0x0
18:21:56: CRC                                           :0x0
18:21:56: ####CSD Registe Values####  

18:21:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:21:56: ProductSerialNumber = 0x23482900
18:21:56: CardMaximumLBA      = 0x3b72400
18:21:56: CardCapacity        = 32G
18:21:56: Is card secure      = 0
18:21:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:21:56: [DVTCommonLib]###  LogicalWrite called
18:21:57: [ WriteLba(0x262733D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 945 ] 
18:21:57: [DVTCommonLib]###  LogicalWrite Completed 

18:21:57: [DVTCommonLib]###  LogicalRead called
18:21:59: [ ReadLba(0x262733D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 946 ] 
18:21:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:21:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:21:59: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 81 times 

18:21:59: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:21:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:21:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 947 ] 
18:21:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:21:59: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:21:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:21:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:21:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:21:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:21:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823180>, <py_sfcl.CommandDataDefinition object at 0x06823F30>) , Command count = 948 ] 
18:21:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:21:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823150>, <py_sfcl.CommandDataDefinition object at 0x06823930>) , Command count = 949 ] 
18:21:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:21:59: [ SetCardRCA(0x1, 0xD555) , Command count = 950 ] 
18:21:59: [DVTCommonLib]### Identification :Idenfication of card completed 

18:21:59: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:21:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:21:59: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:21:59: [ SetBusWidth(0x1) , Command count = 951 ] 
18:21:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:21:59: ####CSD Registe 2.0 Values####
18:21:59: CSD_STRUCTURE                                 :0x1
18:21:59: Reserv1                                       :0x0
18:21:59: Time Access 1 TAAC                            :0xe
18:21:59: Time Access 2 NSAC*100                        :0x0
18:21:59: Data Transfer Rate TRAN_SPEED                 :0x32
18:21:59: Card Command Classess CCC                     :0x5b5
18:21:59: Max Read Data Block Length  READ_BL_LEN       :0x9
18:21:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:21:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:21:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:21:59: DSR(driver stage register)  DSR_IMP           :0x0
18:21:59: Reserv2                                       :0x0
18:21:59: Device Size C_SIZE                            :0xedc8
18:21:59: Reserv3                                       :0x0
18:21:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:21:59: Erase Sector Size SECTOR_SIZE                 :0x7f
18:21:59: Write Protect Group Size WP_GRP_SIZE          :0x0
18:21:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:21:59: Reserv4                                       :0x0
18:21:59: Write Speed Factor R2W_FACTOR                 :0x2
18:21:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:21:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:21:59: FILE_FORMAT_GRP                               :0x0
18:21:59: COPY flag                                     :0x1
18:21:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:21:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:21:59: File_Format                                   :0x0
18:21:59: CRC                                           :0x0
18:21:59: ####CSD Registe Values####  

18:21:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:21:59: ProductSerialNumber = 0x23482900
18:21:59: CardMaximumLBA      = 0x3b72400
18:21:59: CardCapacity        = 32G
18:21:59: Is card secure      = 0
18:21:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:21:59: [DVTCommonLib]###  LogicalWrite called
18:22:01: [ WriteLba(0x1905713, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 952 ] 
18:22:01: [DVTCommonLib]###  LogicalWrite Completed 

18:22:01: [DVTCommonLib]###  LogicalRead called
18:22:02: [ ReadLba(0x1905713, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 953 ] 
18:22:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:22:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:22:02: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 82 times 

18:22:02: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:22:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:22:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 954 ] 
18:22:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:22:03: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:22:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:22:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:22:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:22:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:22:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823E10>, <py_sfcl.CommandDataDefinition object at 0x06823C30>) , Command count = 955 ] 
18:22:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:22:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823420>, <py_sfcl.CommandDataDefinition object at 0x06823060>) , Command count = 956 ] 
18:22:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:22:03: [ SetCardRCA(0x1, 0xD555) , Command count = 957 ] 
18:22:03: [DVTCommonLib]### Identification :Idenfication of card completed 

18:22:03: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:22:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:22:03: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:22:03: [ SetBusWidth(0x1) , Command count = 958 ] 
18:22:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:22:03: ####CSD Registe 2.0 Values####
18:22:03: CSD_STRUCTURE                                 :0x1
18:22:03: Reserv1                                       :0x0
18:22:03: Time Access 1 TAAC                            :0xe
18:22:03: Time Access 2 NSAC*100                        :0x0
18:22:03: Data Transfer Rate TRAN_SPEED                 :0x32
18:22:03: Card Command Classess CCC                     :0x5b5
18:22:03: Max Read Data Block Length  READ_BL_LEN       :0x9
18:22:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:22:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:22:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:22:03: DSR(driver stage register)  DSR_IMP           :0x0
18:22:03: Reserv2                                       :0x0
18:22:03: Device Size C_SIZE                            :0xedc8
18:22:03: Reserv3                                       :0x0
18:22:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:22:03: Erase Sector Size SECTOR_SIZE                 :0x7f
18:22:03: Write Protect Group Size WP_GRP_SIZE          :0x0
18:22:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:22:03: Reserv4                                       :0x0
18:22:03: Write Speed Factor R2W_FACTOR                 :0x2
18:22:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:22:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:22:03: FILE_FORMAT_GRP                               :0x0
18:22:03: COPY flag                                     :0x1
18:22:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:22:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:22:03: File_Format                                   :0x0
18:22:03: CRC                                           :0x0
18:22:03: ####CSD Registe Values####  

18:22:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:22:03: ProductSerialNumber = 0x23482900
18:22:03: CardMaximumLBA      = 0x3b72400
18:22:03: CardCapacity        = 32G
18:22:03: Is card secure      = 0
18:22:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:22:03: [DVTCommonLib]###  LogicalWrite called
18:22:04: [ WriteLba(0x2BC271F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 959 ] 
18:22:04: [DVTCommonLib]###  LogicalWrite Completed 

18:22:04: [DVTCommonLib]###  LogicalRead called
18:22:06: [ ReadLba(0x2BC271F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 960 ] 
18:22:06: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:22:06: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:22:06: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 83 times 

18:22:06: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:22:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:22:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 961 ] 
18:22:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:22:06: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:22:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:22:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:22:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:22:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:22:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823240>, <py_sfcl.CommandDataDefinition object at 0x06823090>) , Command count = 962 ] 
18:22:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:22:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068237B0>, <py_sfcl.CommandDataDefinition object at 0x06823630>) , Command count = 963 ] 
18:22:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:22:06: [ SetCardRCA(0x1, 0xD555) , Command count = 964 ] 
18:22:06: [DVTCommonLib]### Identification :Idenfication of card completed 

18:22:06: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:22:06: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:22:06: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:22:06: [ SetBusWidth(0x1) , Command count = 965 ] 
18:22:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:22:06: ####CSD Registe 2.0 Values####
18:22:06: CSD_STRUCTURE                                 :0x1
18:22:06: Reserv1                                       :0x0
18:22:06: Time Access 1 TAAC                            :0xe
18:22:06: Time Access 2 NSAC*100                        :0x0
18:22:06: Data Transfer Rate TRAN_SPEED                 :0x32
18:22:06: Card Command Classess CCC                     :0x5b5
18:22:06: Max Read Data Block Length  READ_BL_LEN       :0x9
18:22:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:22:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:22:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:22:06: DSR(driver stage register)  DSR_IMP           :0x0
18:22:06: Reserv2                                       :0x0
18:22:06: Device Size C_SIZE                            :0xedc8
18:22:06: Reserv3                                       :0x0
18:22:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:22:06: Erase Sector Size SECTOR_SIZE                 :0x7f
18:22:06: Write Protect Group Size WP_GRP_SIZE          :0x0
18:22:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:22:06: Reserv4                                       :0x0
18:22:06: Write Speed Factor R2W_FACTOR                 :0x2
18:22:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:22:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:22:06: FILE_FORMAT_GRP                               :0x0
18:22:06: COPY flag                                     :0x1
18:22:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:22:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:22:06: File_Format                                   :0x0
18:22:06: CRC                                           :0x0
18:22:06: ####CSD Registe Values####  

18:22:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:22:06: ProductSerialNumber = 0x23482900
18:22:06: CardMaximumLBA      = 0x3b72400
18:22:06: CardCapacity        = 32G
18:22:06: Is card secure      = 0
18:22:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:22:06: [DVTCommonLib]###  LogicalWrite called
18:22:08: [ WriteLba(0xAD58E1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 966 ] 
18:22:08: [DVTCommonLib]###  LogicalWrite Completed 

18:22:08: [DVTCommonLib]###  LogicalRead called
18:22:09: [ ReadLba(0xAD58E1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 967 ] 
18:22:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:22:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:22:09: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 84 times 

18:22:09: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:22:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:22:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 968 ] 
18:22:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:22:09: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:22:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:22:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:22:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:22:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068233C0>, <py_sfcl.CommandDataDefinition object at 0x068233F0>) , Command count = 969 ] 
18:22:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823B70>, <py_sfcl.CommandDataDefinition object at 0x068239C0>) , Command count = 970 ] 
18:22:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:22:09: [ SetCardRCA(0x1, 0xD555) , Command count = 971 ] 
18:22:09: [DVTCommonLib]### Identification :Idenfication of card completed 

18:22:09: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:22:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:22:09: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:22:09: [ SetBusWidth(0x1) , Command count = 972 ] 
18:22:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:22:09: ####CSD Registe 2.0 Values####
18:22:09: CSD_STRUCTURE                                 :0x1
18:22:09: Reserv1                                       :0x0
18:22:09: Time Access 1 TAAC                            :0xe
18:22:09: Time Access 2 NSAC*100                        :0x0
18:22:09: Data Transfer Rate TRAN_SPEED                 :0x32
18:22:09: Card Command Classess CCC                     :0x5b5
18:22:09: Max Read Data Block Length  READ_BL_LEN       :0x9
18:22:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:22:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:22:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:22:09: DSR(driver stage register)  DSR_IMP           :0x0
18:22:09: Reserv2                                       :0x0
18:22:09: Device Size C_SIZE                            :0xedc8
18:22:09: Reserv3                                       :0x0
18:22:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:22:09: Erase Sector Size SECTOR_SIZE                 :0x7f
18:22:09: Write Protect Group Size WP_GRP_SIZE          :0x0
18:22:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:22:09: Reserv4                                       :0x0
18:22:09: Write Speed Factor R2W_FACTOR                 :0x2
18:22:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:22:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:22:09: FILE_FORMAT_GRP                               :0x0
18:22:09: COPY flag                                     :0x1
18:22:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:22:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:22:09: File_Format                                   :0x0
18:22:09: CRC                                           :0x0
18:22:09: ####CSD Registe Values####  

18:22:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:22:09: ProductSerialNumber = 0x23482900
18:22:09: CardMaximumLBA      = 0x3b72400
18:22:09: CardCapacity        = 32G
18:22:09: Is card secure      = 0
18:22:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:22:09: [DVTCommonLib]###  LogicalWrite called
18:22:11: [ WriteLba(0x38F2D37, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 973 ] 
18:22:11: [DVTCommonLib]###  LogicalWrite Completed 

18:22:11: [DVTCommonLib]###  LogicalRead called
18:22:13: [ ReadLba(0x38F2D37, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 974 ] 
18:22:13: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:22:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:22:13: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 85 times 

18:22:13: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:22:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:22:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 975 ] 
18:22:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:22:13: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:22:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:22:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:22:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:22:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:22:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823720>, <py_sfcl.CommandDataDefinition object at 0x06823690>) , Command count = 976 ] 
18:22:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:22:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823D20>, <py_sfcl.CommandDataDefinition object at 0x06823B10>) , Command count = 977 ] 
18:22:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:22:13: [ SetCardRCA(0x1, 0xD555) , Command count = 978 ] 
18:22:13: [DVTCommonLib]### Identification :Idenfication of card completed 

18:22:13: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:22:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:22:13: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:22:13: [ SetBusWidth(0x1) , Command count = 979 ] 
18:22:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:22:13: ####CSD Registe 2.0 Values####
18:22:13: CSD_STRUCTURE                                 :0x1
18:22:13: Reserv1                                       :0x0
18:22:13: Time Access 1 TAAC                            :0xe
18:22:13: Time Access 2 NSAC*100                        :0x0
18:22:13: Data Transfer Rate TRAN_SPEED                 :0x32
18:22:13: Card Command Classess CCC                     :0x5b5
18:22:13: Max Read Data Block Length  READ_BL_LEN       :0x9
18:22:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:22:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:22:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:22:13: DSR(driver stage register)  DSR_IMP           :0x0
18:22:13: Reserv2                                       :0x0
18:22:13: Device Size C_SIZE                            :0xedc8
18:22:13: Reserv3                                       :0x0
18:22:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:22:13: Erase Sector Size SECTOR_SIZE                 :0x7f
18:22:13: Write Protect Group Size WP_GRP_SIZE          :0x0
18:22:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:22:13: Reserv4                                       :0x0
18:22:13: Write Speed Factor R2W_FACTOR                 :0x2
18:22:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:22:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:22:13: FILE_FORMAT_GRP                               :0x0
18:22:13: COPY flag                                     :0x1
18:22:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:22:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:22:13: File_Format                                   :0x0
18:22:13: CRC                                           :0x0
18:22:13: ####CSD Registe Values####  

18:22:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:22:13: ProductSerialNumber = 0x23482900
18:22:13: CardMaximumLBA      = 0x3b72400
18:22:13: CardCapacity        = 32G
18:22:13: Is card secure      = 0
18:22:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:22:13: [DVTCommonLib]###  LogicalWrite called
18:22:15: [ WriteLba(0x23EC27E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 980 ] 
18:22:15: [DVTCommonLib]###  LogicalWrite Completed 

18:22:15: [DVTCommonLib]###  LogicalRead called
18:22:16: [ ReadLba(0x23EC27E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 981 ] 
18:22:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:22:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:22:16: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 86 times 

18:22:16: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:22:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:22:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 982 ] 
18:22:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:22:16: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:22:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:22:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:22:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:22:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:22:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C0C0>, <py_sfcl.CommandDataDefinition object at 0x0682C150>) , Command count = 983 ] 
18:22:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:22:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C180>, <py_sfcl.CommandDataDefinition object at 0x06823F90>) , Command count = 984 ] 
18:22:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:22:16: [ SetCardRCA(0x1, 0xD555) , Command count = 985 ] 
18:22:16: [DVTCommonLib]### Identification :Idenfication of card completed 

18:22:16: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:22:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:22:16: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:22:16: [ SetBusWidth(0x1) , Command count = 986 ] 
18:22:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:22:16: ####CSD Registe 2.0 Values####
18:22:16: CSD_STRUCTURE                                 :0x1
18:22:16: Reserv1                                       :0x0
18:22:16: Time Access 1 TAAC                            :0xe
18:22:16: Time Access 2 NSAC*100                        :0x0
18:22:16: Data Transfer Rate TRAN_SPEED                 :0x32
18:22:16: Card Command Classess CCC                     :0x5b5
18:22:16: Max Read Data Block Length  READ_BL_LEN       :0x9
18:22:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:22:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:22:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:22:16: DSR(driver stage register)  DSR_IMP           :0x0
18:22:16: Reserv2                                       :0x0
18:22:16: Device Size C_SIZE                            :0xedc8
18:22:16: Reserv3                                       :0x0
18:22:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:22:16: Erase Sector Size SECTOR_SIZE                 :0x7f
18:22:16: Write Protect Group Size WP_GRP_SIZE          :0x0
18:22:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:22:16: Reserv4                                       :0x0
18:22:16: Write Speed Factor R2W_FACTOR                 :0x2
18:22:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:22:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:22:16: FILE_FORMAT_GRP                               :0x0
18:22:16: COPY flag                                     :0x1
18:22:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:22:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:22:16: File_Format                                   :0x0
18:22:16: CRC                                           :0x0
18:22:16: ####CSD Registe Values####  

18:22:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:22:16: ProductSerialNumber = 0x23482900
18:22:16: CardMaximumLBA      = 0x3b72400
18:22:16: CardCapacity        = 32G
18:22:16: Is card secure      = 0
18:22:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:22:16: [DVTCommonLib]###  LogicalWrite called
18:22:18: [ WriteLba(0x2B6BFB2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 987 ] 
18:22:18: [DVTCommonLib]###  LogicalWrite Completed 

18:22:18: [DVTCommonLib]###  LogicalRead called
18:22:19: [ ReadLba(0x2B6BFB2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 988 ] 
18:22:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:22:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:22:19: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 87 times 

18:22:19: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:22:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:22:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 989 ] 
18:22:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:22:20: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:22:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:22:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:22:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:22:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:22:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823C90>, <py_sfcl.CommandDataDefinition object at 0x06823BD0>) , Command count = 990 ] 
18:22:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:22:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C570>, <py_sfcl.CommandDataDefinition object at 0x0682C3C0>) , Command count = 991 ] 
18:22:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:22:20: [ SetCardRCA(0x1, 0xD555) , Command count = 992 ] 
18:22:20: [DVTCommonLib]### Identification :Idenfication of card completed 

18:22:20: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:22:20: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:22:20: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:22:20: [ SetBusWidth(0x1) , Command count = 993 ] 
18:22:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:22:20: ####CSD Registe 2.0 Values####
18:22:20: CSD_STRUCTURE                                 :0x1
18:22:20: Reserv1                                       :0x0
18:22:20: Time Access 1 TAAC                            :0xe
18:22:20: Time Access 2 NSAC*100                        :0x0
18:22:20: Data Transfer Rate TRAN_SPEED                 :0x32
18:22:20: Card Command Classess CCC                     :0x5b5
18:22:20: Max Read Data Block Length  READ_BL_LEN       :0x9
18:22:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:22:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:22:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:22:20: DSR(driver stage register)  DSR_IMP           :0x0
18:22:20: Reserv2                                       :0x0
18:22:20: Device Size C_SIZE                            :0xedc8
18:22:20: Reserv3                                       :0x0
18:22:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:22:20: Erase Sector Size SECTOR_SIZE                 :0x7f
18:22:20: Write Protect Group Size WP_GRP_SIZE          :0x0
18:22:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:22:20: Reserv4                                       :0x0
18:22:20: Write Speed Factor R2W_FACTOR                 :0x2
18:22:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:22:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:22:20: FILE_FORMAT_GRP                               :0x0
18:22:20: COPY flag                                     :0x1
18:22:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:22:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:22:20: File_Format                                   :0x0
18:22:20: CRC                                           :0x0
18:22:20: ####CSD Registe Values####  

18:22:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:22:20: ProductSerialNumber = 0x23482900
18:22:20: CardMaximumLBA      = 0x3b72400
18:22:20: CardCapacity        = 32G
18:22:20: Is card secure      = 0
18:22:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:22:20: [DVTCommonLib]###  LogicalWrite called
18:22:21: [ WriteLba(0x2FB0E34, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 994 ] 
18:22:21: [DVTCommonLib]###  LogicalWrite Completed 

18:22:21: [DVTCommonLib]###  LogicalRead called
18:22:23: [ ReadLba(0x2FB0E34, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 995 ] 
18:22:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:22:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:22:23: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 88 times 

18:22:23: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:22:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:22:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 996 ] 
18:22:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:22:23: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:22:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:22:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:22:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:22:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:22:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823A80>, <py_sfcl.CommandDataDefinition object at 0x0682C0F0>) , Command count = 997 ] 
18:22:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:22:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C960>, <py_sfcl.CommandDataDefinition object at 0x0682C330>) , Command count = 998 ] 
18:22:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:22:23: [ SetCardRCA(0x1, 0xD555) , Command count = 999 ] 
18:22:23: [DVTCommonLib]### Identification :Idenfication of card completed 

18:22:23: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:22:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:22:23: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:22:23: [ SetBusWidth(0x1) , Command count = 1000 ] 
18:22:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:22:23: ####CSD Registe 2.0 Values####
18:22:23: CSD_STRUCTURE                                 :0x1
18:22:23: Reserv1                                       :0x0
18:22:23: Time Access 1 TAAC                            :0xe
18:22:23: Time Access 2 NSAC*100                        :0x0
18:22:23: Data Transfer Rate TRAN_SPEED                 :0x32
18:22:23: Card Command Classess CCC                     :0x5b5
18:22:23: Max Read Data Block Length  READ_BL_LEN       :0x9
18:22:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:22:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:22:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:22:23: DSR(driver stage register)  DSR_IMP           :0x0
18:22:23: Reserv2                                       :0x0
18:22:23: Device Size C_SIZE                            :0xedc8
18:22:23: Reserv3                                       :0x0
18:22:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:22:23: Erase Sector Size SECTOR_SIZE                 :0x7f
18:22:23: Write Protect Group Size WP_GRP_SIZE          :0x0
18:22:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:22:23: Reserv4                                       :0x0
18:22:23: Write Speed Factor R2W_FACTOR                 :0x2
18:22:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:22:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:22:23: FILE_FORMAT_GRP                               :0x0
18:22:23: COPY flag                                     :0x1
18:22:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:22:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:22:23: File_Format                                   :0x0
18:22:23: CRC                                           :0x0
18:22:23: ####CSD Registe Values####  

18:22:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:22:23: ProductSerialNumber = 0x23482900
18:22:23: CardMaximumLBA      = 0x3b72400
18:22:23: CardCapacity        = 32G
18:22:23: Is card secure      = 0
18:22:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:22:23: [DVTCommonLib]###  LogicalWrite called
18:22:25: [ WriteLba(0x315CEF5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1001 ] 
18:22:25: [DVTCommonLib]###  LogicalWrite Completed 

18:22:25: [DVTCommonLib]###  LogicalRead called
18:22:26: [ ReadLba(0x315CEF5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1002 ] 
18:22:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:22:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:22:26: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 89 times 

18:22:26: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:22:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:22:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1003 ] 
18:22:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:22:26: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:22:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:22:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:22:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:22:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:22:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C4E0>, <py_sfcl.CommandDataDefinition object at 0x0682C450>) , Command count = 1004 ] 
18:22:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:22:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CD50>, <py_sfcl.CommandDataDefinition object at 0x0682CBD0>) , Command count = 1005 ] 
18:22:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:22:26: [ SetCardRCA(0x1, 0xD555) , Command count = 1006 ] 
18:22:26: [DVTCommonLib]### Identification :Idenfication of card completed 

18:22:26: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:22:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:22:26: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:22:26: [ SetBusWidth(0x1) , Command count = 1007 ] 
18:22:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:22:26: ####CSD Registe 2.0 Values####
18:22:26: CSD_STRUCTURE                                 :0x1
18:22:26: Reserv1                                       :0x0
18:22:26: Time Access 1 TAAC                            :0xe
18:22:26: Time Access 2 NSAC*100                        :0x0
18:22:26: Data Transfer Rate TRAN_SPEED                 :0x32
18:22:26: Card Command Classess CCC                     :0x5b5
18:22:26: Max Read Data Block Length  READ_BL_LEN       :0x9
18:22:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:22:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:22:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:22:26: DSR(driver stage register)  DSR_IMP           :0x0
18:22:26: Reserv2                                       :0x0
18:22:26: Device Size C_SIZE                            :0xedc8
18:22:26: Reserv3                                       :0x0
18:22:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:22:26: Erase Sector Size SECTOR_SIZE                 :0x7f
18:22:26: Write Protect Group Size WP_GRP_SIZE          :0x0
18:22:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:22:26: Reserv4                                       :0x0
18:22:26: Write Speed Factor R2W_FACTOR                 :0x2
18:22:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:22:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:22:26: FILE_FORMAT_GRP                               :0x0
18:22:26: COPY flag                                     :0x1
18:22:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:22:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:22:26: File_Format                                   :0x0
18:22:26: CRC                                           :0x0
18:22:26: ####CSD Registe Values####  

18:22:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:22:26: ProductSerialNumber = 0x23482900
18:22:26: CardMaximumLBA      = 0x3b72400
18:22:26: CardCapacity        = 32G
18:22:26: Is card secure      = 0
18:22:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:22:26: [DVTCommonLib]###  LogicalWrite called
18:22:28: [ WriteLba(0x67C04B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1008 ] 
18:22:28: [DVTCommonLib]###  LogicalWrite Completed 

18:22:28: [DVTCommonLib]###  LogicalRead called
18:22:30: [ ReadLba(0x67C04B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1009 ] 
18:22:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:22:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:22:30: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 90 times 

18:22:30: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:22:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:22:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1010 ] 
18:22:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:22:30: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:22:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:22:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:22:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:22:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:22:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614BDB0>, <py_sfcl.CommandDataDefinition object at 0x0682C8D0>) , Command count = 1011 ] 
18:22:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:22:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616E1E0>, <py_sfcl.CommandDataDefinition object at 0x0682CF00>) , Command count = 1012 ] 
18:22:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:22:30: [ SetCardRCA(0x1, 0xD555) , Command count = 1013 ] 
18:22:30: [DVTCommonLib]### Identification :Idenfication of card completed 

18:22:30: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:22:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:22:30: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:22:30: [ SetBusWidth(0x1) , Command count = 1014 ] 
18:22:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:22:30: ####CSD Registe 2.0 Values####
18:22:30: CSD_STRUCTURE                                 :0x1
18:22:30: Reserv1                                       :0x0
18:22:30: Time Access 1 TAAC                            :0xe
18:22:30: Time Access 2 NSAC*100                        :0x0
18:22:30: Data Transfer Rate TRAN_SPEED                 :0x32
18:22:30: Card Command Classess CCC                     :0x5b5
18:22:30: Max Read Data Block Length  READ_BL_LEN       :0x9
18:22:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:22:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:22:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:22:30: DSR(driver stage register)  DSR_IMP           :0x0
18:22:30: Reserv2                                       :0x0
18:22:30: Device Size C_SIZE                            :0xedc8
18:22:30: Reserv3                                       :0x0
18:22:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:22:30: Erase Sector Size SECTOR_SIZE                 :0x7f
18:22:30: Write Protect Group Size WP_GRP_SIZE          :0x0
18:22:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:22:30: Reserv4                                       :0x0
18:22:30: Write Speed Factor R2W_FACTOR                 :0x2
18:22:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:22:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:22:30: FILE_FORMAT_GRP                               :0x0
18:22:30: COPY flag                                     :0x1
18:22:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:22:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:22:30: File_Format                                   :0x0
18:22:30: CRC                                           :0x0
18:22:30: ####CSD Registe Values####  

18:22:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:22:30: ProductSerialNumber = 0x23482900
18:22:30: CardMaximumLBA      = 0x3b72400
18:22:30: CardCapacity        = 32G
18:22:30: Is card secure      = 0
18:22:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:22:30: [DVTCommonLib]###  LogicalWrite called
18:22:31: [ WriteLba(0x292C455, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1015 ] 
18:22:31: [DVTCommonLib]###  LogicalWrite Completed 

18:22:31: [DVTCommonLib]###  LogicalRead called
18:22:33: [ ReadLba(0x292C455, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1016 ] 
18:22:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:22:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:22:33: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 91 times 

18:22:33: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:22:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:22:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1017 ] 
18:22:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:22:33: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:22:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:22:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:22:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:22:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:22:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614BD50>, <py_sfcl.CommandDataDefinition object at 0x06168CF0>) , Command count = 1018 ] 
18:22:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:22:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E1A540>, <py_sfcl.CommandDataDefinition object at 0x0682CED0>) , Command count = 1019 ] 
18:22:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:22:33: [ SetCardRCA(0x1, 0xD555) , Command count = 1020 ] 
18:22:33: [DVTCommonLib]### Identification :Idenfication of card completed 

18:22:33: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:22:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:22:33: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:22:33: [ SetBusWidth(0x1) , Command count = 1021 ] 
18:22:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:22:33: ####CSD Registe 2.0 Values####
18:22:33: CSD_STRUCTURE                                 :0x1
18:22:33: Reserv1                                       :0x0
18:22:33: Time Access 1 TAAC                            :0xe
18:22:33: Time Access 2 NSAC*100                        :0x0
18:22:33: Data Transfer Rate TRAN_SPEED                 :0x32
18:22:33: Card Command Classess CCC                     :0x5b5
18:22:33: Max Read Data Block Length  READ_BL_LEN       :0x9
18:22:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:22:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:22:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:22:33: DSR(driver stage register)  DSR_IMP           :0x0
18:22:33: Reserv2                                       :0x0
18:22:33: Device Size C_SIZE                            :0xedc8
18:22:33: Reserv3                                       :0x0
18:22:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:22:33: Erase Sector Size SECTOR_SIZE                 :0x7f
18:22:33: Write Protect Group Size WP_GRP_SIZE          :0x0
18:22:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:22:33: Reserv4                                       :0x0
18:22:33: Write Speed Factor R2W_FACTOR                 :0x2
18:22:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:22:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:22:33: FILE_FORMAT_GRP                               :0x0
18:22:33: COPY flag                                     :0x1
18:22:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:22:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:22:33: File_Format                                   :0x0
18:22:33: CRC                                           :0x0
18:22:33: ####CSD Registe Values####  

18:22:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:22:33: ProductSerialNumber = 0x23482900
18:22:33: CardMaximumLBA      = 0x3b72400
18:22:33: CardCapacity        = 32G
18:22:33: Is card secure      = 0
18:22:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:22:33: [DVTCommonLib]###  LogicalWrite called
18:22:35: [ WriteLba(0x17ED7CA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1022 ] 
18:22:35: [DVTCommonLib]###  LogicalWrite Completed 

18:22:35: [DVTCommonLib]###  LogicalRead called
18:22:36: [ ReadLba(0x17ED7CA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1023 ] 
18:22:36: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:22:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:22:36: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 92 times 

18:22:36: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:22:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:22:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1024 ] 
18:22:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:22:37: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:22:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:22:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:22:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:22:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:22:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061642D0>, <py_sfcl.CommandDataDefinition object at 0x0614A0C0>) , Command count = 1025 ] 
18:22:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:22:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616E900>, <py_sfcl.CommandDataDefinition object at 0x0682D330>) , Command count = 1026 ] 
18:22:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:22:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1027 ] 
18:22:37: [DVTCommonLib]### Identification :Idenfication of card completed 

18:22:37: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:22:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:22:37: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:22:37: [ SetBusWidth(0x1) , Command count = 1028 ] 
18:22:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:22:37: ####CSD Registe 2.0 Values####
18:22:37: CSD_STRUCTURE                                 :0x1
18:22:37: Reserv1                                       :0x0
18:22:37: Time Access 1 TAAC                            :0xe
18:22:37: Time Access 2 NSAC*100                        :0x0
18:22:37: Data Transfer Rate TRAN_SPEED                 :0x32
18:22:37: Card Command Classess CCC                     :0x5b5
18:22:37: Max Read Data Block Length  READ_BL_LEN       :0x9
18:22:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:22:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:22:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:22:37: DSR(driver stage register)  DSR_IMP           :0x0
18:22:37: Reserv2                                       :0x0
18:22:37: Device Size C_SIZE                            :0xedc8
18:22:37: Reserv3                                       :0x0
18:22:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:22:37: Erase Sector Size SECTOR_SIZE                 :0x7f
18:22:37: Write Protect Group Size WP_GRP_SIZE          :0x0
18:22:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:22:37: Reserv4                                       :0x0
18:22:37: Write Speed Factor R2W_FACTOR                 :0x2
18:22:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:22:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:22:37: FILE_FORMAT_GRP                               :0x0
18:22:37: COPY flag                                     :0x1
18:22:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:22:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:22:37: File_Format                                   :0x0
18:22:37: CRC                                           :0x0
18:22:37: ####CSD Registe Values####  

18:22:37: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:22:37: ProductSerialNumber = 0x23482900
18:22:37: CardMaximumLBA      = 0x3b72400
18:22:37: CardCapacity        = 32G
18:22:37: Is card secure      = 0
18:22:37: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:22:37: [DVTCommonLib]###  LogicalWrite called
18:22:38: [ WriteLba(0x2A8F1E9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1029 ] 
18:22:38: [DVTCommonLib]###  LogicalWrite Completed 

18:22:38: [DVTCommonLib]###  LogicalRead called
18:22:40: [ ReadLba(0x2A8F1E9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1030 ] 
18:22:40: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:22:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:22:40: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 93 times 

18:22:40: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:22:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:22:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1031 ] 
18:22:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:22:40: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:22:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:22:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:22:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:22:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:22:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E01C90>, <py_sfcl.CommandDataDefinition object at 0x0616EC90>) , Command count = 1032 ] 
18:22:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:22:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614AA20>, <py_sfcl.CommandDataDefinition object at 0x0682D540>) , Command count = 1033 ] 
18:22:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:22:40: [ SetCardRCA(0x1, 0xD555) , Command count = 1034 ] 
18:22:40: [DVTCommonLib]### Identification :Idenfication of card completed 

18:22:40: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:22:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:22:40: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:22:40: [ SetBusWidth(0x1) , Command count = 1035 ] 
18:22:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:22:40: ####CSD Registe 2.0 Values####
18:22:40: CSD_STRUCTURE                                 :0x1
18:22:40: Reserv1                                       :0x0
18:22:40: Time Access 1 TAAC                            :0xe
18:22:40: Time Access 2 NSAC*100                        :0x0
18:22:40: Data Transfer Rate TRAN_SPEED                 :0x32
18:22:40: Card Command Classess CCC                     :0x5b5
18:22:40: Max Read Data Block Length  READ_BL_LEN       :0x9
18:22:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:22:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:22:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:22:40: DSR(driver stage register)  DSR_IMP           :0x0
18:22:40: Reserv2                                       :0x0
18:22:40: Device Size C_SIZE                            :0xedc8
18:22:40: Reserv3                                       :0x0
18:22:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:22:40: Erase Sector Size SECTOR_SIZE                 :0x7f
18:22:40: Write Protect Group Size WP_GRP_SIZE          :0x0
18:22:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:22:40: Reserv4                                       :0x0
18:22:40: Write Speed Factor R2W_FACTOR                 :0x2
18:22:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:22:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:22:40: FILE_FORMAT_GRP                               :0x0
18:22:40: COPY flag                                     :0x1
18:22:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:22:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:22:40: File_Format                                   :0x0
18:22:40: CRC                                           :0x0
18:22:40: ####CSD Registe Values####  

18:22:40: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:22:40: ProductSerialNumber = 0x23482900
18:22:40: CardMaximumLBA      = 0x3b72400
18:22:40: CardCapacity        = 32G
18:22:40: Is card secure      = 0
18:22:40: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:22:40: [DVTCommonLib]###  LogicalWrite called
18:22:42: [ WriteLba(0x48CAC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1036 ] 
18:22:42: [DVTCommonLib]###  LogicalWrite Completed 

18:22:42: [DVTCommonLib]###  LogicalRead called
18:22:43: [ ReadLba(0x48CAC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1037 ] 
18:22:43: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:22:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:22:43: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 94 times 

18:22:43: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:22:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:22:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1038 ] 
18:22:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:22:43: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:22:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:22:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:22:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:22:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:22:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616E690>, <py_sfcl.CommandDataDefinition object at 0x061A0A80>) , Command count = 1039 ] 
18:22:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:22:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5C60>, <py_sfcl.CommandDataDefinition object at 0x0682D7E0>) , Command count = 1040 ] 
18:22:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:22:43: [ SetCardRCA(0x1, 0xD555) , Command count = 1041 ] 
18:22:43: [DVTCommonLib]### Identification :Idenfication of card completed 

18:22:43: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:22:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:22:43: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:22:43: [ SetBusWidth(0x1) , Command count = 1042 ] 
18:22:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:22:43: ####CSD Registe 2.0 Values####
18:22:43: CSD_STRUCTURE                                 :0x1
18:22:43: Reserv1                                       :0x0
18:22:43: Time Access 1 TAAC                            :0xe
18:22:43: Time Access 2 NSAC*100                        :0x0
18:22:43: Data Transfer Rate TRAN_SPEED                 :0x32
18:22:43: Card Command Classess CCC                     :0x5b5
18:22:43: Max Read Data Block Length  READ_BL_LEN       :0x9
18:22:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:22:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:22:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:22:43: DSR(driver stage register)  DSR_IMP           :0x0
18:22:43: Reserv2                                       :0x0
18:22:43: Device Size C_SIZE                            :0xedc8
18:22:43: Reserv3                                       :0x0
18:22:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:22:43: Erase Sector Size SECTOR_SIZE                 :0x7f
18:22:43: Write Protect Group Size WP_GRP_SIZE          :0x0
18:22:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:22:43: Reserv4                                       :0x0
18:22:43: Write Speed Factor R2W_FACTOR                 :0x2
18:22:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:22:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:22:43: FILE_FORMAT_GRP                               :0x0
18:22:43: COPY flag                                     :0x1
18:22:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:22:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:22:43: File_Format                                   :0x0
18:22:43: CRC                                           :0x0
18:22:43: ####CSD Registe Values####  

18:22:43: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:22:43: ProductSerialNumber = 0x23482900
18:22:43: CardMaximumLBA      = 0x3b72400
18:22:43: CardCapacity        = 32G
18:22:43: Is card secure      = 0
18:22:43: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:22:43: [DVTCommonLib]###  LogicalWrite called
18:22:45: [ WriteLba(0x3169FE5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1043 ] 
18:22:45: [DVTCommonLib]###  LogicalWrite Completed 

18:22:45: [DVTCommonLib]###  LogicalRead called
18:22:47: [ ReadLba(0x3169FE5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1044 ] 
18:22:47: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:22:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:22:47: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 95 times 

18:22:47: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:22:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:22:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1045 ] 
18:22:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:22:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:22:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:22:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:22:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:22:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:22:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614AE70>, <py_sfcl.CommandDataDefinition object at 0x0614A840>) , Command count = 1046 ] 
18:22:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:22:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066FF450>, <py_sfcl.CommandDataDefinition object at 0x0682DA80>) , Command count = 1047 ] 
18:22:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:22:47: [ SetCardRCA(0x1, 0xD555) , Command count = 1048 ] 
18:22:47: [DVTCommonLib]### Identification :Idenfication of card completed 

18:22:47: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:22:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:22:47: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:22:47: [ SetBusWidth(0x1) , Command count = 1049 ] 
18:22:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:22:47: ####CSD Registe 2.0 Values####
18:22:47: CSD_STRUCTURE                                 :0x1
18:22:47: Reserv1                                       :0x0
18:22:47: Time Access 1 TAAC                            :0xe
18:22:47: Time Access 2 NSAC*100                        :0x0
18:22:47: Data Transfer Rate TRAN_SPEED                 :0x32
18:22:47: Card Command Classess CCC                     :0x5b5
18:22:47: Max Read Data Block Length  READ_BL_LEN       :0x9
18:22:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:22:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:22:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:22:47: DSR(driver stage register)  DSR_IMP           :0x0
18:22:47: Reserv2                                       :0x0
18:22:47: Device Size C_SIZE                            :0xedc8
18:22:47: Reserv3                                       :0x0
18:22:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:22:47: Erase Sector Size SECTOR_SIZE                 :0x7f
18:22:47: Write Protect Group Size WP_GRP_SIZE          :0x0
18:22:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:22:47: Reserv4                                       :0x0
18:22:47: Write Speed Factor R2W_FACTOR                 :0x2
18:22:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:22:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:22:47: FILE_FORMAT_GRP                               :0x0
18:22:47: COPY flag                                     :0x1
18:22:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:22:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:22:47: File_Format                                   :0x0
18:22:47: CRC                                           :0x0
18:22:47: ####CSD Registe Values####  

18:22:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:22:47: ProductSerialNumber = 0x23482900
18:22:47: CardMaximumLBA      = 0x3b72400
18:22:47: CardCapacity        = 32G
18:22:47: Is card secure      = 0
18:22:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:22:47: [DVTCommonLib]###  LogicalWrite called
18:22:48: [ WriteLba(0x14E311F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1050 ] 
18:22:48: [DVTCommonLib]###  LogicalWrite Completed 

18:22:48: [DVTCommonLib]###  LogicalRead called
18:22:50: [ ReadLba(0x14E311F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1051 ] 
18:22:50: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:22:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:22:50: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 96 times 

18:22:50: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:22:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:22:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1052 ] 
18:22:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:22:50: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:22:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:22:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:22:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:22:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:22:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5C30>, <py_sfcl.CommandDataDefinition object at 0x061A5C00>) , Command count = 1053 ] 
18:22:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:22:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BA9F0>, <py_sfcl.CommandDataDefinition object at 0x0682DD50>) , Command count = 1054 ] 
18:22:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:22:50: [ SetCardRCA(0x1, 0xD555) , Command count = 1055 ] 
18:22:50: [DVTCommonLib]### Identification :Idenfication of card completed 

18:22:50: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:22:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:22:50: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:22:50: [ SetBusWidth(0x1) , Command count = 1056 ] 
18:22:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:22:50: ####CSD Registe 2.0 Values####
18:22:50: CSD_STRUCTURE                                 :0x1
18:22:50: Reserv1                                       :0x0
18:22:50: Time Access 1 TAAC                            :0xe
18:22:50: Time Access 2 NSAC*100                        :0x0
18:22:50: Data Transfer Rate TRAN_SPEED                 :0x32
18:22:50: Card Command Classess CCC                     :0x5b5
18:22:50: Max Read Data Block Length  READ_BL_LEN       :0x9
18:22:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:22:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:22:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:22:50: DSR(driver stage register)  DSR_IMP           :0x0
18:22:50: Reserv2                                       :0x0
18:22:50: Device Size C_SIZE                            :0xedc8
18:22:50: Reserv3                                       :0x0
18:22:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:22:50: Erase Sector Size SECTOR_SIZE                 :0x7f
18:22:50: Write Protect Group Size WP_GRP_SIZE          :0x0
18:22:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:22:50: Reserv4                                       :0x0
18:22:50: Write Speed Factor R2W_FACTOR                 :0x2
18:22:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:22:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:22:50: FILE_FORMAT_GRP                               :0x0
18:22:50: COPY flag                                     :0x1
18:22:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:22:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:22:50: File_Format                                   :0x0
18:22:50: CRC                                           :0x0
18:22:50: ####CSD Registe Values####  

18:22:50: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:22:50: ProductSerialNumber = 0x23482900
18:22:50: CardMaximumLBA      = 0x3b72400
18:22:50: CardCapacity        = 32G
18:22:50: Is card secure      = 0
18:22:50: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:22:50: [DVTCommonLib]###  LogicalWrite called
18:22:52: [ WriteLba(0x22094D3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1057 ] 
18:22:52: [DVTCommonLib]###  LogicalWrite Completed 

18:22:52: [DVTCommonLib]###  LogicalRead called
18:22:53: [ ReadLba(0x22094D3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1058 ] 
18:22:53: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:22:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:22:53: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 97 times 

18:22:53: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:22:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:22:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1059 ] 
18:22:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:22:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:22:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:22:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:22:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:22:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:22:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5F60>, <py_sfcl.CommandDataDefinition object at 0x067AF090>) , Command count = 1060 ] 
18:22:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:22:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BABD0>, <py_sfcl.CommandDataDefinition object at 0x0682DDE0>) , Command count = 1061 ] 
18:22:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:22:54: [ SetCardRCA(0x1, 0xD555) , Command count = 1062 ] 
18:22:54: [DVTCommonLib]### Identification :Idenfication of card completed 

18:22:54: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:22:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:22:54: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:22:54: [ SetBusWidth(0x1) , Command count = 1063 ] 
18:22:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:22:54: ####CSD Registe 2.0 Values####
18:22:54: CSD_STRUCTURE                                 :0x1
18:22:54: Reserv1                                       :0x0
18:22:54: Time Access 1 TAAC                            :0xe
18:22:54: Time Access 2 NSAC*100                        :0x0
18:22:54: Data Transfer Rate TRAN_SPEED                 :0x32
18:22:54: Card Command Classess CCC                     :0x5b5
18:22:54: Max Read Data Block Length  READ_BL_LEN       :0x9
18:22:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:22:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:22:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:22:54: DSR(driver stage register)  DSR_IMP           :0x0
18:22:54: Reserv2                                       :0x0
18:22:54: Device Size C_SIZE                            :0xedc8
18:22:54: Reserv3                                       :0x0
18:22:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:22:54: Erase Sector Size SECTOR_SIZE                 :0x7f
18:22:54: Write Protect Group Size WP_GRP_SIZE          :0x0
18:22:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:22:54: Reserv4                                       :0x0
18:22:54: Write Speed Factor R2W_FACTOR                 :0x2
18:22:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:22:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:22:54: FILE_FORMAT_GRP                               :0x0
18:22:54: COPY flag                                     :0x1
18:22:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:22:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:22:54: File_Format                                   :0x0
18:22:54: CRC                                           :0x0
18:22:54: ####CSD Registe Values####  

18:22:54: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:22:54: ProductSerialNumber = 0x23482900
18:22:54: CardMaximumLBA      = 0x3b72400
18:22:54: CardCapacity        = 32G
18:22:54: Is card secure      = 0
18:22:54: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:22:54: [DVTCommonLib]###  LogicalWrite called
18:22:55: [ WriteLba(0x3244E6F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1064 ] 
18:22:55: [DVTCommonLib]###  LogicalWrite Completed 

18:22:55: [DVTCommonLib]###  LogicalRead called
18:22:57: [ ReadLba(0x3244E6F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1065 ] 
18:22:57: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:22:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:22:57: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 98 times 

18:22:57: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:22:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:22:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1066 ] 
18:22:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:22:57: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:22:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:22:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:22:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:22:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:22:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BAAE0>, <py_sfcl.CommandDataDefinition object at 0x067AF390>) , Command count = 1067 ] 
18:22:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:22:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1030>, <py_sfcl.CommandDataDefinition object at 0x0682DE70>) , Command count = 1068 ] 
18:22:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:22:57: [ SetCardRCA(0x1, 0xD555) , Command count = 1069 ] 
18:22:57: [DVTCommonLib]### Identification :Idenfication of card completed 

18:22:57: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:22:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:22:57: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:22:57: [ SetBusWidth(0x1) , Command count = 1070 ] 
18:22:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:22:57: ####CSD Registe 2.0 Values####
18:22:57: CSD_STRUCTURE                                 :0x1
18:22:57: Reserv1                                       :0x0
18:22:57: Time Access 1 TAAC                            :0xe
18:22:57: Time Access 2 NSAC*100                        :0x0
18:22:57: Data Transfer Rate TRAN_SPEED                 :0x32
18:22:57: Card Command Classess CCC                     :0x5b5
18:22:57: Max Read Data Block Length  READ_BL_LEN       :0x9
18:22:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:22:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:22:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:22:57: DSR(driver stage register)  DSR_IMP           :0x0
18:22:57: Reserv2                                       :0x0
18:22:57: Device Size C_SIZE                            :0xedc8
18:22:57: Reserv3                                       :0x0
18:22:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:22:57: Erase Sector Size SECTOR_SIZE                 :0x7f
18:22:57: Write Protect Group Size WP_GRP_SIZE          :0x0
18:22:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:22:57: Reserv4                                       :0x0
18:22:57: Write Speed Factor R2W_FACTOR                 :0x2
18:22:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:22:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:22:57: FILE_FORMAT_GRP                               :0x0
18:22:57: COPY flag                                     :0x1
18:22:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:22:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:22:57: File_Format                                   :0x0
18:22:57: CRC                                           :0x0
18:22:57: ####CSD Registe Values####  

18:22:57: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:22:57: ProductSerialNumber = 0x23482900
18:22:57: CardMaximumLBA      = 0x3b72400
18:22:57: CardCapacity        = 32G
18:22:57: Is card secure      = 0
18:22:57: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:22:57: [DVTCommonLib]###  LogicalWrite called
18:22:59: [ WriteLba(0xC96EEA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1071 ] 
18:22:59: [DVTCommonLib]###  LogicalWrite Completed 

18:22:59: [DVTCommonLib]###  LogicalRead called
18:23:00: [ ReadLba(0xC96EEA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1072 ] 
18:23:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:23:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:23:00: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 99 times 

18:23:00: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:23:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:23:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1073 ] 
18:23:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:23:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:23:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:23:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:23:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:23:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:23:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BAAB0>, <py_sfcl.CommandDataDefinition object at 0x0616E300>) , Command count = 1074 ] 
18:23:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:23:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1C60>, <py_sfcl.CommandDataDefinition object at 0x067C1120>) , Command count = 1075 ] 
18:23:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:23:00: [ SetCardRCA(0x1, 0xD555) , Command count = 1076 ] 
18:23:00: [DVTCommonLib]### Identification :Idenfication of card completed 

18:23:00: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:23:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:23:00: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:23:00: [ SetBusWidth(0x1) , Command count = 1077 ] 
18:23:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:23:00: ####CSD Registe 2.0 Values####
18:23:00: CSD_STRUCTURE                                 :0x1
18:23:00: Reserv1                                       :0x0
18:23:00: Time Access 1 TAAC                            :0xe
18:23:00: Time Access 2 NSAC*100                        :0x0
18:23:00: Data Transfer Rate TRAN_SPEED                 :0x32
18:23:00: Card Command Classess CCC                     :0x5b5
18:23:00: Max Read Data Block Length  READ_BL_LEN       :0x9
18:23:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:23:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:23:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:23:00: DSR(driver stage register)  DSR_IMP           :0x0
18:23:00: Reserv2                                       :0x0
18:23:00: Device Size C_SIZE                            :0xedc8
18:23:00: Reserv3                                       :0x0
18:23:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:23:00: Erase Sector Size SECTOR_SIZE                 :0x7f
18:23:00: Write Protect Group Size WP_GRP_SIZE          :0x0
18:23:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:23:00: Reserv4                                       :0x0
18:23:00: Write Speed Factor R2W_FACTOR                 :0x2
18:23:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:23:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:23:00: FILE_FORMAT_GRP                               :0x0
18:23:00: COPY flag                                     :0x1
18:23:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:23:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:23:00: File_Format                                   :0x0
18:23:00: CRC                                           :0x0
18:23:00: ####CSD Registe Values####  

18:23:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:23:00: ProductSerialNumber = 0x23482900
18:23:00: CardMaximumLBA      = 0x3b72400
18:23:00: CardCapacity        = 32G
18:23:00: Is card secure      = 0
18:23:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:23:00: [DVTCommonLib]###  LogicalWrite called
18:23:02: [ WriteLba(0x11EBB7D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1078 ] 
18:23:02: [DVTCommonLib]###  LogicalWrite Completed 

18:23:02: [DVTCommonLib]###  LogicalRead called
18:23:04: [ ReadLba(0x11EBB7D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1079 ] 
18:23:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:23:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:23:04: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 100 times 

18:23:04: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:23:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:23:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1080 ] 
18:23:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:23:04: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:23:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:23:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:23:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:23:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:23:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682DDB0>, <py_sfcl.CommandDataDefinition object at 0x066FF360>) , Command count = 1081 ] 
18:23:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:23:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1C30>, <py_sfcl.CommandDataDefinition object at 0x067C1B10>) , Command count = 1082 ] 
18:23:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:23:04: [ SetCardRCA(0x1, 0xD555) , Command count = 1083 ] 
18:23:04: [DVTCommonLib]### Identification :Idenfication of card completed 

18:23:04: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:23:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:23:04: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:23:04: [ SetBusWidth(0x1) , Command count = 1084 ] 
18:23:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:23:04: ####CSD Registe 2.0 Values####
18:23:04: CSD_STRUCTURE                                 :0x1
18:23:04: Reserv1                                       :0x0
18:23:04: Time Access 1 TAAC                            :0xe
18:23:04: Time Access 2 NSAC*100                        :0x0
18:23:04: Data Transfer Rate TRAN_SPEED                 :0x32
18:23:04: Card Command Classess CCC                     :0x5b5
18:23:04: Max Read Data Block Length  READ_BL_LEN       :0x9
18:23:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:23:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:23:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:23:04: DSR(driver stage register)  DSR_IMP           :0x0
18:23:04: Reserv2                                       :0x0
18:23:04: Device Size C_SIZE                            :0xedc8
18:23:04: Reserv3                                       :0x0
18:23:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:23:04: Erase Sector Size SECTOR_SIZE                 :0x7f
18:23:04: Write Protect Group Size WP_GRP_SIZE          :0x0
18:23:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:23:04: Reserv4                                       :0x0
18:23:04: Write Speed Factor R2W_FACTOR                 :0x2
18:23:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:23:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:23:04: FILE_FORMAT_GRP                               :0x0
18:23:04: COPY flag                                     :0x1
18:23:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:23:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:23:04: File_Format                                   :0x0
18:23:04: CRC                                           :0x0
18:23:04: ####CSD Registe Values####  

18:23:04: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:23:04: ProductSerialNumber = 0x23482900
18:23:04: CardMaximumLBA      = 0x3b72400
18:23:04: CardCapacity        = 32G
18:23:04: Is card secure      = 0
18:23:04: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:23:04: [DVTCommonLib]###  LogicalWrite called
18:23:05: [ WriteLba(0x919123, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1085 ] 
18:23:05: [DVTCommonLib]###  LogicalWrite Completed 

18:23:05: [DVTCommonLib]###  LogicalRead called
18:23:07: [ ReadLba(0x919123, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1086 ] 
18:23:07: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:23:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:23:07: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 101 times 

18:23:07: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:23:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:23:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1087 ] 
18:23:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:23:07: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:23:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:23:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:23:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:23:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:23:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067AFE70>, <py_sfcl.CommandDataDefinition object at 0x067AF0F0>) , Command count = 1088 ] 
18:23:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:23:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C71B0>, <py_sfcl.CommandDataDefinition object at 0x067C10F0>) , Command count = 1089 ] 
18:23:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:23:07: [ SetCardRCA(0x1, 0xD555) , Command count = 1090 ] 
18:23:07: [DVTCommonLib]### Identification :Idenfication of card completed 

18:23:07: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:23:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:23:07: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:23:07: [ SetBusWidth(0x1) , Command count = 1091 ] 
18:23:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:23:07: ####CSD Registe 2.0 Values####
18:23:07: CSD_STRUCTURE                                 :0x1
18:23:07: Reserv1                                       :0x0
18:23:07: Time Access 1 TAAC                            :0xe
18:23:07: Time Access 2 NSAC*100                        :0x0
18:23:07: Data Transfer Rate TRAN_SPEED                 :0x32
18:23:07: Card Command Classess CCC                     :0x5b5
18:23:07: Max Read Data Block Length  READ_BL_LEN       :0x9
18:23:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:23:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:23:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:23:07: DSR(driver stage register)  DSR_IMP           :0x0
18:23:07: Reserv2                                       :0x0
18:23:07: Device Size C_SIZE                            :0xedc8
18:23:07: Reserv3                                       :0x0
18:23:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:23:07: Erase Sector Size SECTOR_SIZE                 :0x7f
18:23:07: Write Protect Group Size WP_GRP_SIZE          :0x0
18:23:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:23:07: Reserv4                                       :0x0
18:23:07: Write Speed Factor R2W_FACTOR                 :0x2
18:23:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:23:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:23:07: FILE_FORMAT_GRP                               :0x0
18:23:07: COPY flag                                     :0x1
18:23:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:23:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:23:07: File_Format                                   :0x0
18:23:07: CRC                                           :0x0
18:23:07: ####CSD Registe Values####  

18:23:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:23:07: ProductSerialNumber = 0x23482900
18:23:07: CardMaximumLBA      = 0x3b72400
18:23:07: CardCapacity        = 32G
18:23:07: Is card secure      = 0
18:23:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:23:07: [DVTCommonLib]###  LogicalWrite called
18:23:09: [ WriteLba(0xE74E7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1092 ] 
18:23:09: [DVTCommonLib]###  LogicalWrite Completed 

18:23:09: [DVTCommonLib]###  LogicalRead called
18:23:10: [ ReadLba(0xE74E7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1093 ] 
18:23:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:23:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:23:10: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 102 times 

18:23:10: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:23:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:23:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1094 ] 
18:23:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:23:10: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:23:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:23:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:23:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:23:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:23:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616E270>, <py_sfcl.CommandDataDefinition object at 0x067C7060>) , Command count = 1095 ] 
18:23:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:23:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7450>, <py_sfcl.CommandDataDefinition object at 0x067C7390>) , Command count = 1096 ] 
18:23:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:23:10: [ SetCardRCA(0x1, 0xD555) , Command count = 1097 ] 
18:23:11: [DVTCommonLib]### Identification :Idenfication of card completed 

18:23:11: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:23:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:23:11: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:23:11: [ SetBusWidth(0x1) , Command count = 1098 ] 
18:23:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:23:11: ####CSD Registe 2.0 Values####
18:23:11: CSD_STRUCTURE                                 :0x1
18:23:11: Reserv1                                       :0x0
18:23:11: Time Access 1 TAAC                            :0xe
18:23:11: Time Access 2 NSAC*100                        :0x0
18:23:11: Data Transfer Rate TRAN_SPEED                 :0x32
18:23:11: Card Command Classess CCC                     :0x5b5
18:23:11: Max Read Data Block Length  READ_BL_LEN       :0x9
18:23:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:23:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:23:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:23:11: DSR(driver stage register)  DSR_IMP           :0x0
18:23:11: Reserv2                                       :0x0
18:23:11: Device Size C_SIZE                            :0xedc8
18:23:11: Reserv3                                       :0x0
18:23:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:23:11: Erase Sector Size SECTOR_SIZE                 :0x7f
18:23:11: Write Protect Group Size WP_GRP_SIZE          :0x0
18:23:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:23:11: Reserv4                                       :0x0
18:23:11: Write Speed Factor R2W_FACTOR                 :0x2
18:23:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:23:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:23:11: FILE_FORMAT_GRP                               :0x0
18:23:11: COPY flag                                     :0x1
18:23:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:23:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:23:11: File_Format                                   :0x0
18:23:11: CRC                                           :0x0
18:23:11: ####CSD Registe Values####  

18:23:11: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:23:11: ProductSerialNumber = 0x23482900
18:23:11: CardMaximumLBA      = 0x3b72400
18:23:11: CardCapacity        = 32G
18:23:11: Is card secure      = 0
18:23:11: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:23:11: [DVTCommonLib]###  LogicalWrite called
18:23:12: [ WriteLba(0x1DB2993, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1099 ] 
18:23:12: [DVTCommonLib]###  LogicalWrite Completed 

18:23:12: [DVTCommonLib]###  LogicalRead called
18:23:14: [ ReadLba(0x1DB2993, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1100 ] 
18:23:14: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:23:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:23:14: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 103 times 

18:23:14: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:23:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:23:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1101 ] 
18:23:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:23:14: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:23:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:23:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:23:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:23:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:23:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1F00>, <py_sfcl.CommandDataDefinition object at 0x067C7150>) , Command count = 1102 ] 
18:23:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:23:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7720>, <py_sfcl.CommandDataDefinition object at 0x067C76C0>) , Command count = 1103 ] 
18:23:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:23:14: [ SetCardRCA(0x1, 0xD555) , Command count = 1104 ] 
18:23:14: [DVTCommonLib]### Identification :Idenfication of card completed 

18:23:14: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:23:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:23:14: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:23:14: [ SetBusWidth(0x1) , Command count = 1105 ] 
18:23:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:23:14: ####CSD Registe 2.0 Values####
18:23:14: CSD_STRUCTURE                                 :0x1
18:23:14: Reserv1                                       :0x0
18:23:14: Time Access 1 TAAC                            :0xe
18:23:14: Time Access 2 NSAC*100                        :0x0
18:23:14: Data Transfer Rate TRAN_SPEED                 :0x32
18:23:14: Card Command Classess CCC                     :0x5b5
18:23:14: Max Read Data Block Length  READ_BL_LEN       :0x9
18:23:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:23:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:23:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:23:14: DSR(driver stage register)  DSR_IMP           :0x0
18:23:14: Reserv2                                       :0x0
18:23:14: Device Size C_SIZE                            :0xedc8
18:23:14: Reserv3                                       :0x0
18:23:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:23:14: Erase Sector Size SECTOR_SIZE                 :0x7f
18:23:14: Write Protect Group Size WP_GRP_SIZE          :0x0
18:23:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:23:14: Reserv4                                       :0x0
18:23:14: Write Speed Factor R2W_FACTOR                 :0x2
18:23:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:23:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:23:14: FILE_FORMAT_GRP                               :0x0
18:23:14: COPY flag                                     :0x1
18:23:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:23:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:23:14: File_Format                                   :0x0
18:23:14: CRC                                           :0x0
18:23:14: ####CSD Registe Values####  

18:23:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:23:14: ProductSerialNumber = 0x23482900
18:23:14: CardMaximumLBA      = 0x3b72400
18:23:14: CardCapacity        = 32G
18:23:14: Is card secure      = 0
18:23:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:23:14: [DVTCommonLib]###  LogicalWrite called
18:23:16: [ WriteLba(0x257213F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1106 ] 
18:23:16: [DVTCommonLib]###  LogicalWrite Completed 

18:23:16: [DVTCommonLib]###  LogicalRead called
18:23:17: [ ReadLba(0x257213F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1107 ] 
18:23:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:23:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:23:17: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 104 times 

18:23:17: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:23:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:23:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1108 ] 
18:23:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:23:17: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:23:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:23:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:23:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:23:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:23:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C73C0>, <py_sfcl.CommandDataDefinition object at 0x067C7330>) , Command count = 1109 ] 
18:23:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:23:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067CDF00>, <py_sfcl.CommandDataDefinition object at 0x067C7750>) , Command count = 1110 ] 
18:23:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:23:17: [ SetCardRCA(0x1, 0xD555) , Command count = 1111 ] 
18:23:17: [DVTCommonLib]### Identification :Idenfication of card completed 

18:23:17: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:23:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:23:17: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:23:17: [ SetBusWidth(0x1) , Command count = 1112 ] 
18:23:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:23:17: ####CSD Registe 2.0 Values####
18:23:17: CSD_STRUCTURE                                 :0x1
18:23:17: Reserv1                                       :0x0
18:23:17: Time Access 1 TAAC                            :0xe
18:23:17: Time Access 2 NSAC*100                        :0x0
18:23:17: Data Transfer Rate TRAN_SPEED                 :0x32
18:23:17: Card Command Classess CCC                     :0x5b5
18:23:17: Max Read Data Block Length  READ_BL_LEN       :0x9
18:23:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:23:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:23:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:23:17: DSR(driver stage register)  DSR_IMP           :0x0
18:23:17: Reserv2                                       :0x0
18:23:17: Device Size C_SIZE                            :0xedc8
18:23:17: Reserv3                                       :0x0
18:23:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:23:17: Erase Sector Size SECTOR_SIZE                 :0x7f
18:23:17: Write Protect Group Size WP_GRP_SIZE          :0x0
18:23:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:23:17: Reserv4                                       :0x0
18:23:17: Write Speed Factor R2W_FACTOR                 :0x2
18:23:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:23:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:23:17: FILE_FORMAT_GRP                               :0x0
18:23:17: COPY flag                                     :0x1
18:23:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:23:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:23:17: File_Format                                   :0x0
18:23:17: CRC                                           :0x0
18:23:17: ####CSD Registe Values####  

18:23:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:23:17: ProductSerialNumber = 0x23482900
18:23:17: CardMaximumLBA      = 0x3b72400
18:23:17: CardCapacity        = 32G
18:23:17: Is card secure      = 0
18:23:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:23:17: [DVTCommonLib]###  LogicalWrite called
18:23:19: [ WriteLba(0x1C22D9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1113 ] 
18:23:19: [DVTCommonLib]###  LogicalWrite Completed 

18:23:19: [DVTCommonLib]###  LogicalRead called
18:23:21: [ ReadLba(0x1C22D9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1114 ] 
18:23:21: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:23:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:23:21: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 105 times 

18:23:21: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:23:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:23:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1115 ] 
18:23:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:23:21: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:23:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:23:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:23:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:23:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:23:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C78A0>, <py_sfcl.CommandDataDefinition object at 0x067C7810>) , Command count = 1116 ] 
18:23:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:23:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7300>, <py_sfcl.CommandDataDefinition object at 0x067C7660>) , Command count = 1117 ] 
18:23:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:23:21: [ SetCardRCA(0x1, 0xD555) , Command count = 1118 ] 
18:23:21: [DVTCommonLib]### Identification :Idenfication of card completed 

18:23:21: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:23:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:23:21: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:23:21: [ SetBusWidth(0x1) , Command count = 1119 ] 
18:23:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:23:21: ####CSD Registe 2.0 Values####
18:23:21: CSD_STRUCTURE                                 :0x1
18:23:21: Reserv1                                       :0x0
18:23:21: Time Access 1 TAAC                            :0xe
18:23:21: Time Access 2 NSAC*100                        :0x0
18:23:21: Data Transfer Rate TRAN_SPEED                 :0x32
18:23:21: Card Command Classess CCC                     :0x5b5
18:23:21: Max Read Data Block Length  READ_BL_LEN       :0x9
18:23:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:23:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:23:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:23:21: DSR(driver stage register)  DSR_IMP           :0x0
18:23:21: Reserv2                                       :0x0
18:23:21: Device Size C_SIZE                            :0xedc8
18:23:21: Reserv3                                       :0x0
18:23:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:23:21: Erase Sector Size SECTOR_SIZE                 :0x7f
18:23:21: Write Protect Group Size WP_GRP_SIZE          :0x0
18:23:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:23:21: Reserv4                                       :0x0
18:23:21: Write Speed Factor R2W_FACTOR                 :0x2
18:23:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:23:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:23:21: FILE_FORMAT_GRP                               :0x0
18:23:21: COPY flag                                     :0x1
18:23:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:23:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:23:21: File_Format                                   :0x0
18:23:21: CRC                                           :0x0
18:23:21: ####CSD Registe Values####  

18:23:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:23:21: ProductSerialNumber = 0x23482900
18:23:21: CardMaximumLBA      = 0x3b72400
18:23:21: CardCapacity        = 32G
18:23:21: Is card secure      = 0
18:23:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:23:21: [DVTCommonLib]###  LogicalWrite called
18:23:22: [ WriteLba(0x382A3FE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1120 ] 
18:23:22: [DVTCommonLib]###  LogicalWrite Completed 

18:23:22: [DVTCommonLib]###  LogicalRead called
18:23:24: [ ReadLba(0x382A3FE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1121 ] 
18:23:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:23:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:23:24: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 106 times 

18:23:24: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:23:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:23:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1122 ] 
18:23:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:23:24: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:23:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:23:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:23:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:23:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:23:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067CDF60>, <py_sfcl.CommandDataDefinition object at 0x067CDF90>) , Command count = 1123 ] 
18:23:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:23:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1450>, <py_sfcl.CommandDataDefinition object at 0x067C1C00>) , Command count = 1124 ] 
18:23:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:23:24: [ SetCardRCA(0x1, 0xD555) , Command count = 1125 ] 
18:23:24: [DVTCommonLib]### Identification :Idenfication of card completed 

18:23:24: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:23:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:23:24: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:23:24: [ SetBusWidth(0x1) , Command count = 1126 ] 
18:23:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:23:24: ####CSD Registe 2.0 Values####
18:23:24: CSD_STRUCTURE                                 :0x1
18:23:24: Reserv1                                       :0x0
18:23:24: Time Access 1 TAAC                            :0xe
18:23:24: Time Access 2 NSAC*100                        :0x0
18:23:24: Data Transfer Rate TRAN_SPEED                 :0x32
18:23:24: Card Command Classess CCC                     :0x5b5
18:23:24: Max Read Data Block Length  READ_BL_LEN       :0x9
18:23:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:23:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:23:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:23:24: DSR(driver stage register)  DSR_IMP           :0x0
18:23:24: Reserv2                                       :0x0
18:23:24: Device Size C_SIZE                            :0xedc8
18:23:24: Reserv3                                       :0x0
18:23:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:23:24: Erase Sector Size SECTOR_SIZE                 :0x7f
18:23:24: Write Protect Group Size WP_GRP_SIZE          :0x0
18:23:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:23:24: Reserv4                                       :0x0
18:23:24: Write Speed Factor R2W_FACTOR                 :0x2
18:23:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:23:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:23:24: FILE_FORMAT_GRP                               :0x0
18:23:24: COPY flag                                     :0x1
18:23:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:23:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:23:24: File_Format                                   :0x0
18:23:24: CRC                                           :0x0
18:23:24: ####CSD Registe Values####  

18:23:24: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:23:24: ProductSerialNumber = 0x23482900
18:23:24: CardMaximumLBA      = 0x3b72400
18:23:24: CardCapacity        = 32G
18:23:24: Is card secure      = 0
18:23:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:23:24: [DVTCommonLib]###  LogicalWrite called
18:23:26: [ WriteLba(0x355A644, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1127 ] 
18:23:26: [DVTCommonLib]###  LogicalWrite Completed 

18:23:26: [DVTCommonLib]###  LogicalRead called
18:23:28: [ ReadLba(0x355A644, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1128 ] 
18:23:28: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:23:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:23:28: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 107 times 

18:23:28: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:23:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:23:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1129 ] 
18:23:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:23:28: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:23:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:23:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:23:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:23:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:23:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7240>, <py_sfcl.CommandDataDefinition object at 0x067C7480>) , Command count = 1130 ] 
18:23:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:23:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682DBD0>, <py_sfcl.CommandDataDefinition object at 0x067C1CC0>) , Command count = 1131 ] 
18:23:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:23:28: [ SetCardRCA(0x1, 0xD555) , Command count = 1132 ] 
18:23:28: [DVTCommonLib]### Identification :Idenfication of card completed 

18:23:28: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:23:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:23:28: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:23:28: [ SetBusWidth(0x1) , Command count = 1133 ] 
18:23:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:23:28: ####CSD Registe 2.0 Values####
18:23:28: CSD_STRUCTURE                                 :0x1
18:23:28: Reserv1                                       :0x0
18:23:28: Time Access 1 TAAC                            :0xe
18:23:28: Time Access 2 NSAC*100                        :0x0
18:23:28: Data Transfer Rate TRAN_SPEED                 :0x32
18:23:28: Card Command Classess CCC                     :0x5b5
18:23:28: Max Read Data Block Length  READ_BL_LEN       :0x9
18:23:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:23:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:23:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:23:28: DSR(driver stage register)  DSR_IMP           :0x0
18:23:28: Reserv2                                       :0x0
18:23:28: Device Size C_SIZE                            :0xedc8
18:23:28: Reserv3                                       :0x0
18:23:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:23:28: Erase Sector Size SECTOR_SIZE                 :0x7f
18:23:28: Write Protect Group Size WP_GRP_SIZE          :0x0
18:23:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:23:28: Reserv4                                       :0x0
18:23:28: Write Speed Factor R2W_FACTOR                 :0x2
18:23:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:23:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:23:28: FILE_FORMAT_GRP                               :0x0
18:23:28: COPY flag                                     :0x1
18:23:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:23:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:23:28: File_Format                                   :0x0
18:23:28: CRC                                           :0x0
18:23:28: ####CSD Registe Values####  

18:23:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:23:28: ProductSerialNumber = 0x23482900
18:23:28: CardMaximumLBA      = 0x3b72400
18:23:28: CardCapacity        = 32G
18:23:28: Is card secure      = 0
18:23:28: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:23:28: [DVTCommonLib]###  LogicalWrite called
18:23:30: [ WriteLba(0x1407B14, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1134 ] 
18:23:30: [DVTCommonLib]###  LogicalWrite Completed 

18:23:30: [DVTCommonLib]###  LogicalRead called
18:23:31: [ ReadLba(0x1407B14, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1135 ] 
18:23:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:23:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:23:31: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 108 times 

18:23:31: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:23:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:23:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1136 ] 
18:23:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:23:31: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:23:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:23:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:23:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:23:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:23:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1420>, <py_sfcl.CommandDataDefinition object at 0x067C1EA0>) , Command count = 1137 ] 
18:23:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:23:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D930>, <py_sfcl.CommandDataDefinition object at 0x0682D990>) , Command count = 1138 ] 
18:23:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:23:31: [ SetCardRCA(0x1, 0xD555) , Command count = 1139 ] 
18:23:31: [DVTCommonLib]### Identification :Idenfication of card completed 

18:23:31: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:23:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:23:31: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:23:31: [ SetBusWidth(0x1) , Command count = 1140 ] 
18:23:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:23:31: ####CSD Registe 2.0 Values####
18:23:31: CSD_STRUCTURE                                 :0x1
18:23:31: Reserv1                                       :0x0
18:23:31: Time Access 1 TAAC                            :0xe
18:23:31: Time Access 2 NSAC*100                        :0x0
18:23:31: Data Transfer Rate TRAN_SPEED                 :0x32
18:23:31: Card Command Classess CCC                     :0x5b5
18:23:31: Max Read Data Block Length  READ_BL_LEN       :0x9
18:23:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:23:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:23:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:23:31: DSR(driver stage register)  DSR_IMP           :0x0
18:23:31: Reserv2                                       :0x0
18:23:31: Device Size C_SIZE                            :0xedc8
18:23:31: Reserv3                                       :0x0
18:23:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:23:31: Erase Sector Size SECTOR_SIZE                 :0x7f
18:23:31: Write Protect Group Size WP_GRP_SIZE          :0x0
18:23:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:23:31: Reserv4                                       :0x0
18:23:31: Write Speed Factor R2W_FACTOR                 :0x2
18:23:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:23:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:23:31: FILE_FORMAT_GRP                               :0x0
18:23:31: COPY flag                                     :0x1
18:23:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:23:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:23:31: File_Format                                   :0x0
18:23:31: CRC                                           :0x0
18:23:31: ####CSD Registe Values####  

18:23:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:23:31: ProductSerialNumber = 0x23482900
18:23:31: CardMaximumLBA      = 0x3b72400
18:23:31: CardCapacity        = 32G
18:23:31: Is card secure      = 0
18:23:31: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:23:31: [DVTCommonLib]###  LogicalWrite called
18:23:33: [ WriteLba(0x24C1825, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1141 ] 
18:23:33: [DVTCommonLib]###  LogicalWrite Completed 

18:23:33: [DVTCommonLib]###  LogicalRead called
18:23:35: [ ReadLba(0x24C1825, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1142 ] 
18:23:35: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:23:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:23:35: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 109 times 

18:23:35: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:23:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:23:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1143 ] 
18:23:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:23:35: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:23:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:23:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:23:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:23:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:23:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682DB70>, <py_sfcl.CommandDataDefinition object at 0x0682DCF0>) , Command count = 1144 ] 
18:23:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:23:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D600>, <py_sfcl.CommandDataDefinition object at 0x0682D6F0>) , Command count = 1145 ] 
18:23:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:23:35: [ SetCardRCA(0x1, 0xD555) , Command count = 1146 ] 
18:23:35: [DVTCommonLib]### Identification :Idenfication of card completed 

18:23:35: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:23:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:23:35: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:23:35: [ SetBusWidth(0x1) , Command count = 1147 ] 
18:23:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:23:35: ####CSD Registe 2.0 Values####
18:23:35: CSD_STRUCTURE                                 :0x1
18:23:35: Reserv1                                       :0x0
18:23:35: Time Access 1 TAAC                            :0xe
18:23:35: Time Access 2 NSAC*100                        :0x0
18:23:35: Data Transfer Rate TRAN_SPEED                 :0x32
18:23:35: Card Command Classess CCC                     :0x5b5
18:23:35: Max Read Data Block Length  READ_BL_LEN       :0x9
18:23:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:23:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:23:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:23:35: DSR(driver stage register)  DSR_IMP           :0x0
18:23:35: Reserv2                                       :0x0
18:23:35: Device Size C_SIZE                            :0xedc8
18:23:35: Reserv3                                       :0x0
18:23:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:23:35: Erase Sector Size SECTOR_SIZE                 :0x7f
18:23:35: Write Protect Group Size WP_GRP_SIZE          :0x0
18:23:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:23:35: Reserv4                                       :0x0
18:23:35: Write Speed Factor R2W_FACTOR                 :0x2
18:23:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:23:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:23:35: FILE_FORMAT_GRP                               :0x0
18:23:35: COPY flag                                     :0x1
18:23:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:23:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:23:35: File_Format                                   :0x0
18:23:35: CRC                                           :0x0
18:23:35: ####CSD Registe Values####  

18:23:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:23:35: ProductSerialNumber = 0x23482900
18:23:35: CardMaximumLBA      = 0x3b72400
18:23:35: CardCapacity        = 32G
18:23:35: Is card secure      = 0
18:23:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:23:35: [DVTCommonLib]###  LogicalWrite called
18:23:36: [ WriteLba(0x1635F7D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1148 ] 
18:23:36: [DVTCommonLib]###  LogicalWrite Completed 

18:23:36: [DVTCommonLib]###  LogicalRead called
18:23:38: [ ReadLba(0x1635F7D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1149 ] 
18:23:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:23:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:23:38: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 110 times 

18:23:38: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:23:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:23:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1150 ] 
18:23:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:23:38: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:23:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:23:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:23:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:23:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:23:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D8A0>, <py_sfcl.CommandDataDefinition object at 0x0682D960>) , Command count = 1151 ] 
18:23:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:23:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D360>, <py_sfcl.CommandDataDefinition object at 0x0682D510>) , Command count = 1152 ] 
18:23:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:23:38: [ SetCardRCA(0x1, 0xD555) , Command count = 1153 ] 
18:23:38: [DVTCommonLib]### Identification :Idenfication of card completed 

18:23:38: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:23:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:23:38: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:23:38: [ SetBusWidth(0x1) , Command count = 1154 ] 
18:23:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:23:38: ####CSD Registe 2.0 Values####
18:23:38: CSD_STRUCTURE                                 :0x1
18:23:38: Reserv1                                       :0x0
18:23:38: Time Access 1 TAAC                            :0xe
18:23:38: Time Access 2 NSAC*100                        :0x0
18:23:38: Data Transfer Rate TRAN_SPEED                 :0x32
18:23:38: Card Command Classess CCC                     :0x5b5
18:23:38: Max Read Data Block Length  READ_BL_LEN       :0x9
18:23:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:23:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:23:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:23:38: DSR(driver stage register)  DSR_IMP           :0x0
18:23:38: Reserv2                                       :0x0
18:23:38: Device Size C_SIZE                            :0xedc8
18:23:38: Reserv3                                       :0x0
18:23:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:23:38: Erase Sector Size SECTOR_SIZE                 :0x7f
18:23:38: Write Protect Group Size WP_GRP_SIZE          :0x0
18:23:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:23:38: Reserv4                                       :0x0
18:23:38: Write Speed Factor R2W_FACTOR                 :0x2
18:23:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:23:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:23:38: FILE_FORMAT_GRP                               :0x0
18:23:38: COPY flag                                     :0x1
18:23:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:23:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:23:38: File_Format                                   :0x0
18:23:38: CRC                                           :0x0
18:23:38: ####CSD Registe Values####  

18:23:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:23:38: ProductSerialNumber = 0x23482900
18:23:38: CardMaximumLBA      = 0x3b72400
18:23:38: CardCapacity        = 32G
18:23:38: Is card secure      = 0
18:23:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:23:38: [DVTCommonLib]###  LogicalWrite called
18:23:40: [ WriteLba(0xA94D2E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1155 ] 
18:23:40: [DVTCommonLib]###  LogicalWrite Completed 

18:23:40: [DVTCommonLib]###  LogicalRead called
18:23:41: [ ReadLba(0xA94D2E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1156 ] 
18:23:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:23:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:23:41: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 111 times 

18:23:41: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:23:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:23:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1157 ] 
18:23:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:23:41: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:23:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:23:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:23:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:23:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:23:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7CC0>, <py_sfcl.CommandDataDefinition object at 0x067C7DB0>) , Command count = 1158 ] 
18:23:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:23:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D120>, <py_sfcl.CommandDataDefinition object at 0x0682D270>) , Command count = 1159 ] 
18:23:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:23:42: [ SetCardRCA(0x1, 0xD555) , Command count = 1160 ] 
18:23:42: [DVTCommonLib]### Identification :Idenfication of card completed 

18:23:42: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:23:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:23:42: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:23:42: [ SetBusWidth(0x1) , Command count = 1161 ] 
18:23:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:23:42: ####CSD Registe 2.0 Values####
18:23:42: CSD_STRUCTURE                                 :0x1
18:23:42: Reserv1                                       :0x0
18:23:42: Time Access 1 TAAC                            :0xe
18:23:42: Time Access 2 NSAC*100                        :0x0
18:23:42: Data Transfer Rate TRAN_SPEED                 :0x32
18:23:42: Card Command Classess CCC                     :0x5b5
18:23:42: Max Read Data Block Length  READ_BL_LEN       :0x9
18:23:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:23:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:23:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:23:42: DSR(driver stage register)  DSR_IMP           :0x0
18:23:42: Reserv2                                       :0x0
18:23:42: Device Size C_SIZE                            :0xedc8
18:23:42: Reserv3                                       :0x0
18:23:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:23:42: Erase Sector Size SECTOR_SIZE                 :0x7f
18:23:42: Write Protect Group Size WP_GRP_SIZE          :0x0
18:23:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:23:42: Reserv4                                       :0x0
18:23:42: Write Speed Factor R2W_FACTOR                 :0x2
18:23:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:23:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:23:42: FILE_FORMAT_GRP                               :0x0
18:23:42: COPY flag                                     :0x1
18:23:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:23:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:23:42: File_Format                                   :0x0
18:23:42: CRC                                           :0x0
18:23:42: ####CSD Registe Values####  

18:23:42: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:23:42: ProductSerialNumber = 0x23482900
18:23:42: CardMaximumLBA      = 0x3b72400
18:23:42: CardCapacity        = 32G
18:23:42: Is card secure      = 0
18:23:42: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:23:42: [DVTCommonLib]###  LogicalWrite called
18:23:43: [ WriteLba(0x136A46C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1162 ] 
18:23:43: [DVTCommonLib]###  LogicalWrite Completed 

18:23:43: [DVTCommonLib]###  LogicalRead called
18:23:45: [ ReadLba(0x136A46C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1163 ] 
18:23:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:23:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:23:45: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 112 times 

18:23:45: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:23:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:23:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1164 ] 
18:23:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:23:45: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:23:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:23:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:23:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:23:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:23:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CE10>, <py_sfcl.CommandDataDefinition object at 0x0682D3C0>) , Command count = 1165 ] 
18:23:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:23:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CC00>, <py_sfcl.CommandDataDefinition object at 0x0682D3F0>) , Command count = 1166 ] 
18:23:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:23:45: [ SetCardRCA(0x1, 0xD555) , Command count = 1167 ] 
18:23:45: [DVTCommonLib]### Identification :Idenfication of card completed 

18:23:45: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:23:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:23:45: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:23:45: [ SetBusWidth(0x1) , Command count = 1168 ] 
18:23:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:23:45: ####CSD Registe 2.0 Values####
18:23:45: CSD_STRUCTURE                                 :0x1
18:23:45: Reserv1                                       :0x0
18:23:45: Time Access 1 TAAC                            :0xe
18:23:45: Time Access 2 NSAC*100                        :0x0
18:23:45: Data Transfer Rate TRAN_SPEED                 :0x32
18:23:45: Card Command Classess CCC                     :0x5b5
18:23:45: Max Read Data Block Length  READ_BL_LEN       :0x9
18:23:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:23:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:23:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:23:45: DSR(driver stage register)  DSR_IMP           :0x0
18:23:45: Reserv2                                       :0x0
18:23:45: Device Size C_SIZE                            :0xedc8
18:23:45: Reserv3                                       :0x0
18:23:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:23:45: Erase Sector Size SECTOR_SIZE                 :0x7f
18:23:45: Write Protect Group Size WP_GRP_SIZE          :0x0
18:23:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:23:45: Reserv4                                       :0x0
18:23:45: Write Speed Factor R2W_FACTOR                 :0x2
18:23:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:23:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:23:45: FILE_FORMAT_GRP                               :0x0
18:23:45: COPY flag                                     :0x1
18:23:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:23:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:23:45: File_Format                                   :0x0
18:23:45: CRC                                           :0x0
18:23:45: ####CSD Registe Values####  

18:23:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:23:45: ProductSerialNumber = 0x23482900
18:23:45: CardMaximumLBA      = 0x3b72400
18:23:45: CardCapacity        = 32G
18:23:45: Is card secure      = 0
18:23:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:23:45: [DVTCommonLib]###  LogicalWrite called
18:23:47: [ WriteLba(0x371F57D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1169 ] 
18:23:47: [DVTCommonLib]###  LogicalWrite Completed 

18:23:47: [DVTCommonLib]###  LogicalRead called
18:23:49: [ ReadLba(0x371F57D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1170 ] 
18:23:49: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:23:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:23:49: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 113 times 

18:23:49: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:23:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:23:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1171 ] 
18:23:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:23:49: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:23:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:23:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:23:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:23:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:23:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7B10>, <py_sfcl.CommandDataDefinition object at 0x0682CF90>) , Command count = 1172 ] 
18:23:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:23:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C810>, <py_sfcl.CommandDataDefinition object at 0x0682D3F0>) , Command count = 1173 ] 
18:23:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:23:49: [ SetCardRCA(0x1, 0xD555) , Command count = 1174 ] 
18:23:49: [DVTCommonLib]### Identification :Idenfication of card completed 

18:23:49: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:23:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:23:49: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:23:49: [ SetBusWidth(0x1) , Command count = 1175 ] 
18:23:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:23:49: ####CSD Registe 2.0 Values####
18:23:49: CSD_STRUCTURE                                 :0x1
18:23:49: Reserv1                                       :0x0
18:23:49: Time Access 1 TAAC                            :0xe
18:23:49: Time Access 2 NSAC*100                        :0x0
18:23:49: Data Transfer Rate TRAN_SPEED                 :0x32
18:23:49: Card Command Classess CCC                     :0x5b5
18:23:49: Max Read Data Block Length  READ_BL_LEN       :0x9
18:23:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:23:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:23:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:23:49: DSR(driver stage register)  DSR_IMP           :0x0
18:23:49: Reserv2                                       :0x0
18:23:49: Device Size C_SIZE                            :0xedc8
18:23:49: Reserv3                                       :0x0
18:23:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:23:49: Erase Sector Size SECTOR_SIZE                 :0x7f
18:23:49: Write Protect Group Size WP_GRP_SIZE          :0x0
18:23:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:23:49: Reserv4                                       :0x0
18:23:49: Write Speed Factor R2W_FACTOR                 :0x2
18:23:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:23:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:23:49: FILE_FORMAT_GRP                               :0x0
18:23:49: COPY flag                                     :0x1
18:23:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:23:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:23:49: File_Format                                   :0x0
18:23:49: CRC                                           :0x0
18:23:49: ####CSD Registe Values####  

18:23:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:23:49: ProductSerialNumber = 0x23482900
18:23:49: CardMaximumLBA      = 0x3b72400
18:23:49: CardCapacity        = 32G
18:23:49: Is card secure      = 0
18:23:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:23:49: [DVTCommonLib]###  LogicalWrite called
18:23:50: [ WriteLba(0x1508B43, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1176 ] 
18:23:50: [DVTCommonLib]###  LogicalWrite Completed 

18:23:50: [DVTCommonLib]###  LogicalRead called
18:23:52: [ ReadLba(0x1508B43, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1177 ] 
18:23:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:23:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:23:52: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 114 times 

18:23:52: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:23:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:23:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1178 ] 
18:23:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:23:52: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:23:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:23:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:23:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:23:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:23:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CC90>, <py_sfcl.CommandDataDefinition object at 0x0682CD80>) , Command count = 1179 ] 
18:23:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:23:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C2D0>, <py_sfcl.CommandDataDefinition object at 0x0682C630>) , Command count = 1180 ] 
18:23:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:23:52: [ SetCardRCA(0x1, 0xD555) , Command count = 1181 ] 
18:23:52: [DVTCommonLib]### Identification :Idenfication of card completed 

18:23:52: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:23:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:23:52: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:23:52: [ SetBusWidth(0x1) , Command count = 1182 ] 
18:23:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:23:52: ####CSD Registe 2.0 Values####
18:23:52: CSD_STRUCTURE                                 :0x1
18:23:52: Reserv1                                       :0x0
18:23:52: Time Access 1 TAAC                            :0xe
18:23:52: Time Access 2 NSAC*100                        :0x0
18:23:52: Data Transfer Rate TRAN_SPEED                 :0x32
18:23:52: Card Command Classess CCC                     :0x5b5
18:23:52: Max Read Data Block Length  READ_BL_LEN       :0x9
18:23:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:23:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:23:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:23:52: DSR(driver stage register)  DSR_IMP           :0x0
18:23:52: Reserv2                                       :0x0
18:23:52: Device Size C_SIZE                            :0xedc8
18:23:52: Reserv3                                       :0x0
18:23:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:23:52: Erase Sector Size SECTOR_SIZE                 :0x7f
18:23:52: Write Protect Group Size WP_GRP_SIZE          :0x0
18:23:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:23:52: Reserv4                                       :0x0
18:23:52: Write Speed Factor R2W_FACTOR                 :0x2
18:23:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:23:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:23:52: FILE_FORMAT_GRP                               :0x0
18:23:52: COPY flag                                     :0x1
18:23:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:23:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:23:52: File_Format                                   :0x0
18:23:52: CRC                                           :0x0
18:23:52: ####CSD Registe Values####  

18:23:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:23:52: ProductSerialNumber = 0x23482900
18:23:52: CardMaximumLBA      = 0x3b72400
18:23:52: CardCapacity        = 32G
18:23:52: Is card secure      = 0
18:23:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:23:52: [DVTCommonLib]###  LogicalWrite called
18:23:54: [ WriteLba(0xC65658, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1183 ] 
18:23:54: [DVTCommonLib]###  LogicalWrite Completed 

18:23:54: [DVTCommonLib]###  LogicalRead called
18:23:56: [ ReadLba(0xC65658, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1184 ] 
18:23:56: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:23:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:23:56: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 115 times 

18:23:56: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:23:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:23:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1185 ] 
18:23:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:23:56: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:23:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:23:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:23:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:23:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:23:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823BA0>, <py_sfcl.CommandDataDefinition object at 0x0682C8A0>) , Command count = 1186 ] 
18:23:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:23:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823E40>, <py_sfcl.CommandDataDefinition object at 0x0682C1E0>) , Command count = 1187 ] 
18:23:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:23:56: [ SetCardRCA(0x1, 0xD555) , Command count = 1188 ] 
18:23:56: [DVTCommonLib]### Identification :Idenfication of card completed 

18:23:56: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:23:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:23:56: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:23:56: [ SetBusWidth(0x1) , Command count = 1189 ] 
18:23:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:23:56: ####CSD Registe 2.0 Values####
18:23:56: CSD_STRUCTURE                                 :0x1
18:23:56: Reserv1                                       :0x0
18:23:56: Time Access 1 TAAC                            :0xe
18:23:56: Time Access 2 NSAC*100                        :0x0
18:23:56: Data Transfer Rate TRAN_SPEED                 :0x32
18:23:56: Card Command Classess CCC                     :0x5b5
18:23:56: Max Read Data Block Length  READ_BL_LEN       :0x9
18:23:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:23:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:23:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:23:56: DSR(driver stage register)  DSR_IMP           :0x0
18:23:56: Reserv2                                       :0x0
18:23:56: Device Size C_SIZE                            :0xedc8
18:23:56: Reserv3                                       :0x0
18:23:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:23:56: Erase Sector Size SECTOR_SIZE                 :0x7f
18:23:56: Write Protect Group Size WP_GRP_SIZE          :0x0
18:23:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:23:56: Reserv4                                       :0x0
18:23:56: Write Speed Factor R2W_FACTOR                 :0x2
18:23:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:23:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:23:56: FILE_FORMAT_GRP                               :0x0
18:23:56: COPY flag                                     :0x1
18:23:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:23:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:23:56: File_Format                                   :0x0
18:23:56: CRC                                           :0x0
18:23:56: ####CSD Registe Values####  

18:23:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:23:56: ProductSerialNumber = 0x23482900
18:23:56: CardMaximumLBA      = 0x3b72400
18:23:56: CardCapacity        = 32G
18:23:56: Is card secure      = 0
18:23:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:23:56: [DVTCommonLib]###  LogicalWrite called
18:23:57: [ WriteLba(0x1E840D7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1190 ] 
18:23:57: [DVTCommonLib]###  LogicalWrite Completed 

18:23:57: [DVTCommonLib]###  LogicalRead called
18:23:59: [ ReadLba(0x1E840D7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1191 ] 
18:23:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:23:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:23:59: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 116 times 

18:23:59: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:23:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:23:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1192 ] 
18:23:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:23:59: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:23:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:23:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:23:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:23:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:23:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823EA0>, <py_sfcl.CommandDataDefinition object at 0x06823D50>) , Command count = 1193 ] 
18:23:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:23:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823CC0>, <py_sfcl.CommandDataDefinition object at 0x0682C420>) , Command count = 1194 ] 
18:23:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:23:59: [ SetCardRCA(0x1, 0xD555) , Command count = 1195 ] 
18:23:59: [DVTCommonLib]### Identification :Idenfication of card completed 

18:23:59: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:23:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:23:59: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:23:59: [ SetBusWidth(0x1) , Command count = 1196 ] 
18:23:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:23:59: ####CSD Registe 2.0 Values####
18:23:59: CSD_STRUCTURE                                 :0x1
18:23:59: Reserv1                                       :0x0
18:23:59: Time Access 1 TAAC                            :0xe
18:23:59: Time Access 2 NSAC*100                        :0x0
18:23:59: Data Transfer Rate TRAN_SPEED                 :0x32
18:23:59: Card Command Classess CCC                     :0x5b5
18:23:59: Max Read Data Block Length  READ_BL_LEN       :0x9
18:23:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:23:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:23:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:23:59: DSR(driver stage register)  DSR_IMP           :0x0
18:23:59: Reserv2                                       :0x0
18:23:59: Device Size C_SIZE                            :0xedc8
18:23:59: Reserv3                                       :0x0
18:23:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:23:59: Erase Sector Size SECTOR_SIZE                 :0x7f
18:23:59: Write Protect Group Size WP_GRP_SIZE          :0x0
18:23:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:23:59: Reserv4                                       :0x0
18:23:59: Write Speed Factor R2W_FACTOR                 :0x2
18:23:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:23:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:23:59: FILE_FORMAT_GRP                               :0x0
18:23:59: COPY flag                                     :0x1
18:23:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:23:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:23:59: File_Format                                   :0x0
18:23:59: CRC                                           :0x0
18:23:59: ####CSD Registe Values####  

18:23:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:23:59: ProductSerialNumber = 0x23482900
18:23:59: CardMaximumLBA      = 0x3b72400
18:23:59: CardCapacity        = 32G
18:23:59: Is card secure      = 0
18:23:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:23:59: [DVTCommonLib]###  LogicalWrite called
18:24:01: [ WriteLba(0xD0C4A6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1197 ] 
18:24:01: [DVTCommonLib]###  LogicalWrite Completed 

18:24:01: [DVTCommonLib]###  LogicalRead called
18:24:02: [ ReadLba(0xD0C4A6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1198 ] 
18:24:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:24:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:24:02: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 117 times 

18:24:02: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:24:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:24:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1199 ] 
18:24:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:24:03: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:24:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:24:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:24:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:24:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:24:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823C60>, <py_sfcl.CommandDataDefinition object at 0x06823180>) , Command count = 1200 ] 
18:24:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:24:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068231E0>, <py_sfcl.CommandDataDefinition object at 0x0682C420>) , Command count = 1201 ] 
18:24:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:24:03: [ SetCardRCA(0x1, 0xD555) , Command count = 1202 ] 
18:24:03: [DVTCommonLib]### Identification :Idenfication of card completed 

18:24:03: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:24:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:24:03: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:24:03: [ SetBusWidth(0x1) , Command count = 1203 ] 
18:24:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:24:03: ####CSD Registe 2.0 Values####
18:24:03: CSD_STRUCTURE                                 :0x1
18:24:03: Reserv1                                       :0x0
18:24:03: Time Access 1 TAAC                            :0xe
18:24:03: Time Access 2 NSAC*100                        :0x0
18:24:03: Data Transfer Rate TRAN_SPEED                 :0x32
18:24:03: Card Command Classess CCC                     :0x5b5
18:24:03: Max Read Data Block Length  READ_BL_LEN       :0x9
18:24:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:24:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:24:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:24:03: DSR(driver stage register)  DSR_IMP           :0x0
18:24:03: Reserv2                                       :0x0
18:24:03: Device Size C_SIZE                            :0xedc8
18:24:03: Reserv3                                       :0x0
18:24:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:24:03: Erase Sector Size SECTOR_SIZE                 :0x7f
18:24:03: Write Protect Group Size WP_GRP_SIZE          :0x0
18:24:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:24:03: Reserv4                                       :0x0
18:24:03: Write Speed Factor R2W_FACTOR                 :0x2
18:24:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:24:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:24:03: FILE_FORMAT_GRP                               :0x0
18:24:03: COPY flag                                     :0x1
18:24:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:24:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:24:03: File_Format                                   :0x0
18:24:03: CRC                                           :0x0
18:24:03: ####CSD Registe Values####  

18:24:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:24:03: ProductSerialNumber = 0x23482900
18:24:03: CardMaximumLBA      = 0x3b72400
18:24:03: CardCapacity        = 32G
18:24:03: Is card secure      = 0
18:24:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:24:03: [DVTCommonLib]###  LogicalWrite called
18:24:04: [ WriteLba(0x25D2637, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1204 ] 
18:24:04: [DVTCommonLib]###  LogicalWrite Completed 

18:24:04: [DVTCommonLib]###  LogicalRead called
18:24:06: [ ReadLba(0x25D2637, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1205 ] 
18:24:06: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:24:06: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:24:06: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 118 times 

18:24:06: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:24:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:24:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1206 ] 
18:24:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:24:06: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:24:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:24:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:24:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:24:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1CF0>, <py_sfcl.CommandDataDefinition object at 0x06823E10>) , Command count = 1207 ] 
18:24:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1E10>, <py_sfcl.CommandDataDefinition object at 0x068234B0>) , Command count = 1208 ] 
18:24:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:24:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1209 ] 
18:24:06: [DVTCommonLib]### Identification :Idenfication of card completed 

18:24:06: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:24:06: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:24:06: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:24:06: [ SetBusWidth(0x1) , Command count = 1210 ] 
18:24:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:24:06: ####CSD Registe 2.0 Values####
18:24:06: CSD_STRUCTURE                                 :0x1
18:24:06: Reserv1                                       :0x0
18:24:06: Time Access 1 TAAC                            :0xe
18:24:06: Time Access 2 NSAC*100                        :0x0
18:24:06: Data Transfer Rate TRAN_SPEED                 :0x32
18:24:06: Card Command Classess CCC                     :0x5b5
18:24:06: Max Read Data Block Length  READ_BL_LEN       :0x9
18:24:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:24:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:24:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:24:06: DSR(driver stage register)  DSR_IMP           :0x0
18:24:06: Reserv2                                       :0x0
18:24:06: Device Size C_SIZE                            :0xedc8
18:24:06: Reserv3                                       :0x0
18:24:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:24:06: Erase Sector Size SECTOR_SIZE                 :0x7f
18:24:06: Write Protect Group Size WP_GRP_SIZE          :0x0
18:24:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:24:06: Reserv4                                       :0x0
18:24:06: Write Speed Factor R2W_FACTOR                 :0x2
18:24:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:24:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:24:06: FILE_FORMAT_GRP                               :0x0
18:24:06: COPY flag                                     :0x1
18:24:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:24:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:24:06: File_Format                                   :0x0
18:24:06: CRC                                           :0x0
18:24:06: ####CSD Registe Values####  

18:24:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:24:06: ProductSerialNumber = 0x23482900
18:24:06: CardMaximumLBA      = 0x3b72400
18:24:06: CardCapacity        = 32G
18:24:06: Is card secure      = 0
18:24:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:24:06: [DVTCommonLib]###  LogicalWrite called
18:24:08: [ WriteLba(0x2C5934A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1211 ] 
18:24:08: [DVTCommonLib]###  LogicalWrite Completed 

18:24:08: [DVTCommonLib]###  LogicalRead called
18:24:09: [ ReadLba(0x2C5934A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1212 ] 
18:24:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:24:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:24:09: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 119 times 

18:24:09: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:24:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:24:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1213 ] 
18:24:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:24:09: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:24:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:24:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:24:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:24:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:24:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823150>, <py_sfcl.CommandDataDefinition object at 0x06823240>) , Command count = 1214 ] 
18:24:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:24:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068232A0>, <py_sfcl.CommandDataDefinition object at 0x06823600>) , Command count = 1215 ] 
18:24:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:24:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1216 ] 
18:24:09: [DVTCommonLib]### Identification :Idenfication of card completed 

18:24:09: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:24:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:24:09: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:24:09: [ SetBusWidth(0x1) , Command count = 1217 ] 
18:24:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:24:09: ####CSD Registe 2.0 Values####
18:24:09: CSD_STRUCTURE                                 :0x1
18:24:09: Reserv1                                       :0x0
18:24:09: Time Access 1 TAAC                            :0xe
18:24:09: Time Access 2 NSAC*100                        :0x0
18:24:09: Data Transfer Rate TRAN_SPEED                 :0x32
18:24:09: Card Command Classess CCC                     :0x5b5
18:24:09: Max Read Data Block Length  READ_BL_LEN       :0x9
18:24:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:24:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:24:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:24:09: DSR(driver stage register)  DSR_IMP           :0x0
18:24:09: Reserv2                                       :0x0
18:24:09: Device Size C_SIZE                            :0xedc8
18:24:09: Reserv3                                       :0x0
18:24:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:24:09: Erase Sector Size SECTOR_SIZE                 :0x7f
18:24:09: Write Protect Group Size WP_GRP_SIZE          :0x0
18:24:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:24:09: Reserv4                                       :0x0
18:24:09: Write Speed Factor R2W_FACTOR                 :0x2
18:24:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:24:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:24:09: FILE_FORMAT_GRP                               :0x0
18:24:09: COPY flag                                     :0x1
18:24:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:24:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:24:09: File_Format                                   :0x0
18:24:09: CRC                                           :0x0
18:24:09: ####CSD Registe Values####  

18:24:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:24:09: ProductSerialNumber = 0x23482900
18:24:09: CardMaximumLBA      = 0x3b72400
18:24:09: CardCapacity        = 32G
18:24:09: Is card secure      = 0
18:24:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:24:09: [DVTCommonLib]###  LogicalWrite called
18:24:11: [ WriteLba(0xEF4DD7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1218 ] 
18:24:11: [DVTCommonLib]###  LogicalWrite Completed 

18:24:11: [DVTCommonLib]###  LogicalRead called
18:24:13: [ ReadLba(0xEF4DD7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1219 ] 
18:24:13: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:24:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:24:13: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 120 times 

18:24:13: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:24:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:24:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1220 ] 
18:24:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:24:13: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:24:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:24:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:24:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:24:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:24:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823420>, <py_sfcl.CommandDataDefinition object at 0x068233C0>) , Command count = 1221 ] 
18:24:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:24:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068234E0>, <py_sfcl.CommandDataDefinition object at 0x06823A20>) , Command count = 1222 ] 
18:24:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:24:13: [ SetCardRCA(0x1, 0xD555) , Command count = 1223 ] 
18:24:13: [DVTCommonLib]### Identification :Idenfication of card completed 

18:24:13: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:24:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:24:13: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:24:13: [ SetBusWidth(0x1) , Command count = 1224 ] 
18:24:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:24:13: ####CSD Registe 2.0 Values####
18:24:13: CSD_STRUCTURE                                 :0x1
18:24:13: Reserv1                                       :0x0
18:24:13: Time Access 1 TAAC                            :0xe
18:24:13: Time Access 2 NSAC*100                        :0x0
18:24:13: Data Transfer Rate TRAN_SPEED                 :0x32
18:24:13: Card Command Classess CCC                     :0x5b5
18:24:13: Max Read Data Block Length  READ_BL_LEN       :0x9
18:24:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:24:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:24:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:24:13: DSR(driver stage register)  DSR_IMP           :0x0
18:24:13: Reserv2                                       :0x0
18:24:13: Device Size C_SIZE                            :0xedc8
18:24:13: Reserv3                                       :0x0
18:24:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:24:13: Erase Sector Size SECTOR_SIZE                 :0x7f
18:24:13: Write Protect Group Size WP_GRP_SIZE          :0x0
18:24:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:24:13: Reserv4                                       :0x0
18:24:13: Write Speed Factor R2W_FACTOR                 :0x2
18:24:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:24:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:24:13: FILE_FORMAT_GRP                               :0x0
18:24:13: COPY flag                                     :0x1
18:24:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:24:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:24:13: File_Format                                   :0x0
18:24:13: CRC                                           :0x0
18:24:13: ####CSD Registe Values####  

18:24:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:24:13: ProductSerialNumber = 0x23482900
18:24:13: CardMaximumLBA      = 0x3b72400
18:24:13: CardCapacity        = 32G
18:24:13: Is card secure      = 0
18:24:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:24:13: [DVTCommonLib]###  LogicalWrite called
18:24:15: [ WriteLba(0x2B8991A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1225 ] 
18:24:15: [DVTCommonLib]###  LogicalWrite Completed 

18:24:15: [DVTCommonLib]###  LogicalRead called
18:24:16: [ ReadLba(0x2B8991A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1226 ] 
18:24:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:24:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:24:16: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 121 times 

18:24:16: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:24:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:24:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1227 ] 
18:24:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:24:16: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:24:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:24:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:24:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:24:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:24:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068237B0>, <py_sfcl.CommandDataDefinition object at 0x06823720>) , Command count = 1228 ] 
18:24:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:24:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823870>, <py_sfcl.CommandDataDefinition object at 0x06823AE0>) , Command count = 1229 ] 
18:24:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:24:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1230 ] 
18:24:16: [DVTCommonLib]### Identification :Idenfication of card completed 

18:24:16: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:24:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:24:16: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:24:16: [ SetBusWidth(0x1) , Command count = 1231 ] 
18:24:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:24:16: ####CSD Registe 2.0 Values####
18:24:16: CSD_STRUCTURE                                 :0x1
18:24:16: Reserv1                                       :0x0
18:24:16: Time Access 1 TAAC                            :0xe
18:24:16: Time Access 2 NSAC*100                        :0x0
18:24:16: Data Transfer Rate TRAN_SPEED                 :0x32
18:24:16: Card Command Classess CCC                     :0x5b5
18:24:16: Max Read Data Block Length  READ_BL_LEN       :0x9
18:24:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:24:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:24:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:24:16: DSR(driver stage register)  DSR_IMP           :0x0
18:24:16: Reserv2                                       :0x0
18:24:16: Device Size C_SIZE                            :0xedc8
18:24:16: Reserv3                                       :0x0
18:24:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:24:16: Erase Sector Size SECTOR_SIZE                 :0x7f
18:24:16: Write Protect Group Size WP_GRP_SIZE          :0x0
18:24:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:24:16: Reserv4                                       :0x0
18:24:16: Write Speed Factor R2W_FACTOR                 :0x2
18:24:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:24:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:24:16: FILE_FORMAT_GRP                               :0x0
18:24:16: COPY flag                                     :0x1
18:24:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:24:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:24:16: File_Format                                   :0x0
18:24:16: CRC                                           :0x0
18:24:16: ####CSD Registe Values####  

18:24:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:24:16: ProductSerialNumber = 0x23482900
18:24:16: CardMaximumLBA      = 0x3b72400
18:24:16: CardCapacity        = 32G
18:24:16: Is card secure      = 0
18:24:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:24:16: [DVTCommonLib]###  LogicalWrite called
18:24:18: [ WriteLba(0x1D653D3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1232 ] 
18:24:18: [DVTCommonLib]###  LogicalWrite Completed 

18:24:18: [DVTCommonLib]###  LogicalRead called
18:24:19: [ ReadLba(0x1D653D3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1233 ] 
18:24:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:24:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:24:19: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 122 times 

18:24:19: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:24:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:24:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1234 ] 
18:24:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:24:20: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:24:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:24:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:24:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:24:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:24:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C0C0>, <py_sfcl.CommandDataDefinition object at 0x0682C150>) , Command count = 1235 ] 
18:24:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:24:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C210>, <py_sfcl.CommandDataDefinition object at 0x06823960>) , Command count = 1236 ] 
18:24:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:24:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1237 ] 
18:24:20: [DVTCommonLib]### Identification :Idenfication of card completed 

18:24:20: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:24:20: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:24:20: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:24:20: [ SetBusWidth(0x1) , Command count = 1238 ] 
18:24:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:24:20: ####CSD Registe 2.0 Values####
18:24:20: CSD_STRUCTURE                                 :0x1
18:24:20: Reserv1                                       :0x0
18:24:20: Time Access 1 TAAC                            :0xe
18:24:20: Time Access 2 NSAC*100                        :0x0
18:24:20: Data Transfer Rate TRAN_SPEED                 :0x32
18:24:20: Card Command Classess CCC                     :0x5b5
18:24:20: Max Read Data Block Length  READ_BL_LEN       :0x9
18:24:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:24:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:24:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:24:20: DSR(driver stage register)  DSR_IMP           :0x0
18:24:20: Reserv2                                       :0x0
18:24:20: Device Size C_SIZE                            :0xedc8
18:24:20: Reserv3                                       :0x0
18:24:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:24:20: Erase Sector Size SECTOR_SIZE                 :0x7f
18:24:20: Write Protect Group Size WP_GRP_SIZE          :0x0
18:24:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:24:20: Reserv4                                       :0x0
18:24:20: Write Speed Factor R2W_FACTOR                 :0x2
18:24:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:24:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:24:20: FILE_FORMAT_GRP                               :0x0
18:24:20: COPY flag                                     :0x1
18:24:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:24:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:24:20: File_Format                                   :0x0
18:24:20: CRC                                           :0x0
18:24:20: ####CSD Registe Values####  

18:24:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:24:20: ProductSerialNumber = 0x23482900
18:24:20: CardMaximumLBA      = 0x3b72400
18:24:20: CardCapacity        = 32G
18:24:20: Is card secure      = 0
18:24:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:24:20: [DVTCommonLib]###  LogicalWrite called
18:24:21: [ WriteLba(0x357B261, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1239 ] 
18:24:21: [DVTCommonLib]###  LogicalWrite Completed 

18:24:21: [DVTCommonLib]###  LogicalRead called
18:24:23: [ ReadLba(0x357B261, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1240 ] 
18:24:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:24:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:24:23: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 123 times 

18:24:23: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:24:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:24:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1241 ] 
18:24:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:24:23: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:24:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:24:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:24:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:24:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:24:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823D20>, <py_sfcl.CommandDataDefinition object at 0x06823C90>) , Command count = 1242 ] 
18:24:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:24:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C270>, <py_sfcl.CommandDataDefinition object at 0x0682C3F0>) , Command count = 1243 ] 
18:24:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:24:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1244 ] 
18:24:23: [DVTCommonLib]### Identification :Idenfication of card completed 

18:24:23: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:24:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:24:23: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:24:23: [ SetBusWidth(0x1) , Command count = 1245 ] 
18:24:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:24:23: ####CSD Registe 2.0 Values####
18:24:23: CSD_STRUCTURE                                 :0x1
18:24:23: Reserv1                                       :0x0
18:24:23: Time Access 1 TAAC                            :0xe
18:24:23: Time Access 2 NSAC*100                        :0x0
18:24:23: Data Transfer Rate TRAN_SPEED                 :0x32
18:24:23: Card Command Classess CCC                     :0x5b5
18:24:23: Max Read Data Block Length  READ_BL_LEN       :0x9
18:24:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:24:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:24:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:24:23: DSR(driver stage register)  DSR_IMP           :0x0
18:24:23: Reserv2                                       :0x0
18:24:23: Device Size C_SIZE                            :0xedc8
18:24:23: Reserv3                                       :0x0
18:24:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:24:23: Erase Sector Size SECTOR_SIZE                 :0x7f
18:24:23: Write Protect Group Size WP_GRP_SIZE          :0x0
18:24:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:24:23: Reserv4                                       :0x0
18:24:23: Write Speed Factor R2W_FACTOR                 :0x2
18:24:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:24:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:24:23: FILE_FORMAT_GRP                               :0x0
18:24:23: COPY flag                                     :0x1
18:24:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:24:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:24:23: File_Format                                   :0x0
18:24:23: CRC                                           :0x0
18:24:23: ####CSD Registe Values####  

18:24:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:24:23: ProductSerialNumber = 0x23482900
18:24:23: CardMaximumLBA      = 0x3b72400
18:24:23: CardCapacity        = 32G
18:24:23: Is card secure      = 0
18:24:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:24:23: [DVTCommonLib]###  LogicalWrite called
18:24:25: [ WriteLba(0x2255C89, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1246 ] 
18:24:25: [DVTCommonLib]###  LogicalWrite Completed 

18:24:25: [DVTCommonLib]###  LogicalRead called
18:24:26: [ ReadLba(0x2255C89, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1247 ] 
18:24:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:24:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:24:26: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 124 times 

18:24:26: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:24:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:24:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1248 ] 
18:24:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:24:26: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:24:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:24:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:24:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:24:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:24:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823F90>, <py_sfcl.CommandDataDefinition object at 0x06823A80>) , Command count = 1249 ] 
18:24:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:24:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C660>, <py_sfcl.CommandDataDefinition object at 0x0682C930>) , Command count = 1250 ] 
18:24:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:24:26: [ SetCardRCA(0x1, 0xD555) , Command count = 1251 ] 
18:24:26: [DVTCommonLib]### Identification :Idenfication of card completed 

18:24:26: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:24:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:24:26: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:24:26: [ SetBusWidth(0x1) , Command count = 1252 ] 
18:24:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:24:26: ####CSD Registe 2.0 Values####
18:24:26: CSD_STRUCTURE                                 :0x1
18:24:26: Reserv1                                       :0x0
18:24:26: Time Access 1 TAAC                            :0xe
18:24:26: Time Access 2 NSAC*100                        :0x0
18:24:26: Data Transfer Rate TRAN_SPEED                 :0x32
18:24:26: Card Command Classess CCC                     :0x5b5
18:24:26: Max Read Data Block Length  READ_BL_LEN       :0x9
18:24:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:24:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:24:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:24:26: DSR(driver stage register)  DSR_IMP           :0x0
18:24:26: Reserv2                                       :0x0
18:24:26: Device Size C_SIZE                            :0xedc8
18:24:26: Reserv3                                       :0x0
18:24:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:24:26: Erase Sector Size SECTOR_SIZE                 :0x7f
18:24:26: Write Protect Group Size WP_GRP_SIZE          :0x0
18:24:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:24:26: Reserv4                                       :0x0
18:24:26: Write Speed Factor R2W_FACTOR                 :0x2
18:24:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:24:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:24:26: FILE_FORMAT_GRP                               :0x0
18:24:26: COPY flag                                     :0x1
18:24:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:24:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:24:26: File_Format                                   :0x0
18:24:26: CRC                                           :0x0
18:24:26: ####CSD Registe Values####  

18:24:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:24:26: ProductSerialNumber = 0x23482900
18:24:26: CardMaximumLBA      = 0x3b72400
18:24:26: CardCapacity        = 32G
18:24:26: Is card secure      = 0
18:24:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:24:26: [DVTCommonLib]###  LogicalWrite called
18:24:28: [ WriteLba(0x2F821AB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1253 ] 
18:24:28: [DVTCommonLib]###  LogicalWrite Completed 

18:24:28: [DVTCommonLib]###  LogicalRead called
18:24:30: [ ReadLba(0x2F821AB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1254 ] 
18:24:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:24:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:24:30: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 125 times 

18:24:30: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:24:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:24:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1255 ] 
18:24:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:24:30: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:24:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:24:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:24:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:24:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:24:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C570>, <py_sfcl.CommandDataDefinition object at 0x0682C4E0>) , Command count = 1256 ] 
18:24:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:24:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CA50>, <py_sfcl.CommandDataDefinition object at 0x0682CBA0>) , Command count = 1257 ] 
18:24:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:24:30: [ SetCardRCA(0x1, 0xD555) , Command count = 1258 ] 
18:24:30: [DVTCommonLib]### Identification :Idenfication of card completed 

18:24:30: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:24:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:24:30: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:24:30: [ SetBusWidth(0x1) , Command count = 1259 ] 
18:24:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:24:30: ####CSD Registe 2.0 Values####
18:24:30: CSD_STRUCTURE                                 :0x1
18:24:30: Reserv1                                       :0x0
18:24:30: Time Access 1 TAAC                            :0xe
18:24:30: Time Access 2 NSAC*100                        :0x0
18:24:30: Data Transfer Rate TRAN_SPEED                 :0x32
18:24:30: Card Command Classess CCC                     :0x5b5
18:24:30: Max Read Data Block Length  READ_BL_LEN       :0x9
18:24:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:24:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:24:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:24:30: DSR(driver stage register)  DSR_IMP           :0x0
18:24:30: Reserv2                                       :0x0
18:24:30: Device Size C_SIZE                            :0xedc8
18:24:30: Reserv3                                       :0x0
18:24:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:24:30: Erase Sector Size SECTOR_SIZE                 :0x7f
18:24:30: Write Protect Group Size WP_GRP_SIZE          :0x0
18:24:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:24:30: Reserv4                                       :0x0
18:24:30: Write Speed Factor R2W_FACTOR                 :0x2
18:24:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:24:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:24:30: FILE_FORMAT_GRP                               :0x0
18:24:30: COPY flag                                     :0x1
18:24:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:24:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:24:30: File_Format                                   :0x0
18:24:30: CRC                                           :0x0
18:24:30: ####CSD Registe Values####  

18:24:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:24:30: ProductSerialNumber = 0x23482900
18:24:30: CardMaximumLBA      = 0x3b72400
18:24:30: CardCapacity        = 32G
18:24:30: Is card secure      = 0
18:24:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:24:30: [DVTCommonLib]###  LogicalWrite called
18:24:32: [ WriteLba(0x307FBC5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1260 ] 
18:24:32: [DVTCommonLib]###  LogicalWrite Completed 

18:24:32: [DVTCommonLib]###  LogicalRead called
18:24:33: [ ReadLba(0x307FBC5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1261 ] 
18:24:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:24:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:24:33: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 126 times 

18:24:33: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:24:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:24:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1262 ] 
18:24:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:24:33: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:24:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:24:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:24:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:24:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614BDB0>, <py_sfcl.CommandDataDefinition object at 0x0682C960>) , Command count = 1263 ] 
18:24:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06010AE0>, <py_sfcl.CommandDataDefinition object at 0x0682CB10>) , Command count = 1264 ] 
18:24:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:24:33: [ SetCardRCA(0x1, 0xD555) , Command count = 1265 ] 
18:24:33: [DVTCommonLib]### Identification :Idenfication of card completed 

18:24:33: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:24:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:24:33: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:24:33: [ SetBusWidth(0x1) , Command count = 1266 ] 
18:24:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:24:33: ####CSD Registe 2.0 Values####
18:24:33: CSD_STRUCTURE                                 :0x1
18:24:33: Reserv1                                       :0x0
18:24:33: Time Access 1 TAAC                            :0xe
18:24:33: Time Access 2 NSAC*100                        :0x0
18:24:33: Data Transfer Rate TRAN_SPEED                 :0x32
18:24:33: Card Command Classess CCC                     :0x5b5
18:24:33: Max Read Data Block Length  READ_BL_LEN       :0x9
18:24:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:24:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:24:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:24:33: DSR(driver stage register)  DSR_IMP           :0x0
18:24:33: Reserv2                                       :0x0
18:24:33: Device Size C_SIZE                            :0xedc8
18:24:33: Reserv3                                       :0x0
18:24:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:24:33: Erase Sector Size SECTOR_SIZE                 :0x7f
18:24:33: Write Protect Group Size WP_GRP_SIZE          :0x0
18:24:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:24:33: Reserv4                                       :0x0
18:24:33: Write Speed Factor R2W_FACTOR                 :0x2
18:24:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:24:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:24:33: FILE_FORMAT_GRP                               :0x0
18:24:33: COPY flag                                     :0x1
18:24:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:24:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:24:33: File_Format                                   :0x0
18:24:33: CRC                                           :0x0
18:24:33: ####CSD Registe Values####  

18:24:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:24:33: ProductSerialNumber = 0x23482900
18:24:33: CardMaximumLBA      = 0x3b72400
18:24:33: CardCapacity        = 32G
18:24:33: Is card secure      = 0
18:24:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:24:33: [DVTCommonLib]###  LogicalWrite called
18:24:35: [ WriteLba(0x169D8B9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1267 ] 
18:24:35: [DVTCommonLib]###  LogicalWrite Completed 

18:24:35: [DVTCommonLib]###  LogicalRead called
18:24:37: [ ReadLba(0x169D8B9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1268 ] 
18:24:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:24:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:24:37: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 127 times 

18:24:37: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:24:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:24:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1269 ] 
18:24:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:24:37: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:24:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:24:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:24:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:24:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:24:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614BD50>, <py_sfcl.CommandDataDefinition object at 0x06168CF0>) , Command count = 1270 ] 
18:24:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:24:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CF60>, <py_sfcl.CommandDataDefinition object at 0x0682CCC0>) , Command count = 1271 ] 
18:24:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:24:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1272 ] 
18:24:37: [DVTCommonLib]### Identification :Idenfication of card completed 

18:24:37: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:24:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:24:37: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:24:37: [ SetBusWidth(0x1) , Command count = 1273 ] 
18:24:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:24:37: ####CSD Registe 2.0 Values####
18:24:37: CSD_STRUCTURE                                 :0x1
18:24:37: Reserv1                                       :0x0
18:24:37: Time Access 1 TAAC                            :0xe
18:24:37: Time Access 2 NSAC*100                        :0x0
18:24:37: Data Transfer Rate TRAN_SPEED                 :0x32
18:24:37: Card Command Classess CCC                     :0x5b5
18:24:37: Max Read Data Block Length  READ_BL_LEN       :0x9
18:24:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:24:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:24:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:24:37: DSR(driver stage register)  DSR_IMP           :0x0
18:24:37: Reserv2                                       :0x0
18:24:37: Device Size C_SIZE                            :0xedc8
18:24:37: Reserv3                                       :0x0
18:24:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:24:37: Erase Sector Size SECTOR_SIZE                 :0x7f
18:24:37: Write Protect Group Size WP_GRP_SIZE          :0x0
18:24:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:24:37: Reserv4                                       :0x0
18:24:37: Write Speed Factor R2W_FACTOR                 :0x2
18:24:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:24:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:24:37: FILE_FORMAT_GRP                               :0x0
18:24:37: COPY flag                                     :0x1
18:24:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:24:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:24:37: File_Format                                   :0x0
18:24:37: CRC                                           :0x0
18:24:37: ####CSD Registe Values####  

18:24:37: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:24:37: ProductSerialNumber = 0x23482900
18:24:37: CardMaximumLBA      = 0x3b72400
18:24:37: CardCapacity        = 32G
18:24:37: Is card secure      = 0
18:24:37: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:24:37: [DVTCommonLib]###  LogicalWrite called
18:24:38: [ WriteLba(0x31B9A7E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1274 ] 
18:24:38: [DVTCommonLib]###  LogicalWrite Completed 

18:24:38: [DVTCommonLib]###  LogicalRead called
18:24:40: [ ReadLba(0x31B9A7E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1275 ] 
18:24:40: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:24:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:24:40: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 128 times 

18:24:40: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:24:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:24:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1276 ] 
18:24:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:24:40: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:24:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:24:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:24:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:24:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:24:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616E1E0>, <py_sfcl.CommandDataDefinition object at 0x061642D0>) , Command count = 1277 ] 
18:24:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:24:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068238D0>, <py_sfcl.CommandDataDefinition object at 0x061A0E70>) , Command count = 1278 ] 
18:24:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:24:40: [ SetCardRCA(0x1, 0xD555) , Command count = 1279 ] 
18:24:40: [DVTCommonLib]### Identification :Idenfication of card completed 

18:24:40: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:24:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:24:40: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:24:40: [ SetBusWidth(0x1) , Command count = 1280 ] 
18:24:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:24:40: ####CSD Registe 2.0 Values####
18:24:40: CSD_STRUCTURE                                 :0x1
18:24:40: Reserv1                                       :0x0
18:24:40: Time Access 1 TAAC                            :0xe
18:24:40: Time Access 2 NSAC*100                        :0x0
18:24:40: Data Transfer Rate TRAN_SPEED                 :0x32
18:24:40: Card Command Classess CCC                     :0x5b5
18:24:40: Max Read Data Block Length  READ_BL_LEN       :0x9
18:24:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:24:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:24:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:24:40: DSR(driver stage register)  DSR_IMP           :0x0
18:24:40: Reserv2                                       :0x0
18:24:40: Device Size C_SIZE                            :0xedc8
18:24:40: Reserv3                                       :0x0
18:24:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:24:40: Erase Sector Size SECTOR_SIZE                 :0x7f
18:24:40: Write Protect Group Size WP_GRP_SIZE          :0x0
18:24:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:24:40: Reserv4                                       :0x0
18:24:40: Write Speed Factor R2W_FACTOR                 :0x2
18:24:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:24:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:24:40: FILE_FORMAT_GRP                               :0x0
18:24:40: COPY flag                                     :0x1
18:24:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:24:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:24:40: File_Format                                   :0x0
18:24:40: CRC                                           :0x0
18:24:40: ####CSD Registe Values####  

18:24:40: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:24:40: ProductSerialNumber = 0x23482900
18:24:40: CardMaximumLBA      = 0x3b72400
18:24:40: CardCapacity        = 32G
18:24:40: Is card secure      = 0
18:24:40: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:24:40: [DVTCommonLib]###  LogicalWrite called
18:24:42: [ WriteLba(0x1366512, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1281 ] 
18:24:42: [DVTCommonLib]###  LogicalWrite Completed 

18:24:42: [DVTCommonLib]###  LogicalRead called
18:24:43: [ ReadLba(0x1366512, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1282 ] 
18:24:43: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:24:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:24:43: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 129 times 

18:24:43: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:24:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:24:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1283 ] 
18:24:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:24:43: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:24:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:24:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:24:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:24:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:24:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E1A540>, <py_sfcl.CommandDataDefinition object at 0x01E01C90>) , Command count = 1284 ] 
18:24:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:24:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616EF90>, <py_sfcl.CommandDataDefinition object at 0x0682D390>) , Command count = 1285 ] 
18:24:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:24:43: [ SetCardRCA(0x1, 0xD555) , Command count = 1286 ] 
18:24:43: [DVTCommonLib]### Identification :Idenfication of card completed 

18:24:43: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:24:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:24:43: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:24:43: [ SetBusWidth(0x1) , Command count = 1287 ] 
18:24:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:24:43: ####CSD Registe 2.0 Values####
18:24:43: CSD_STRUCTURE                                 :0x1
18:24:43: Reserv1                                       :0x0
18:24:43: Time Access 1 TAAC                            :0xe
18:24:43: Time Access 2 NSAC*100                        :0x0
18:24:43: Data Transfer Rate TRAN_SPEED                 :0x32
18:24:43: Card Command Classess CCC                     :0x5b5
18:24:43: Max Read Data Block Length  READ_BL_LEN       :0x9
18:24:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:24:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:24:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:24:43: DSR(driver stage register)  DSR_IMP           :0x0
18:24:43: Reserv2                                       :0x0
18:24:43: Device Size C_SIZE                            :0xedc8
18:24:43: Reserv3                                       :0x0
18:24:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:24:43: Erase Sector Size SECTOR_SIZE                 :0x7f
18:24:43: Write Protect Group Size WP_GRP_SIZE          :0x0
18:24:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:24:43: Reserv4                                       :0x0
18:24:43: Write Speed Factor R2W_FACTOR                 :0x2
18:24:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:24:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:24:43: FILE_FORMAT_GRP                               :0x0
18:24:43: COPY flag                                     :0x1
18:24:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:24:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:24:43: File_Format                                   :0x0
18:24:43: CRC                                           :0x0
18:24:43: ####CSD Registe Values####  

18:24:43: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:24:43: ProductSerialNumber = 0x23482900
18:24:43: CardMaximumLBA      = 0x3b72400
18:24:43: CardCapacity        = 32G
18:24:43: Is card secure      = 0
18:24:43: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:24:43: [DVTCommonLib]###  LogicalWrite called
18:24:45: [ WriteLba(0x368CF0A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1288 ] 
18:24:45: [DVTCommonLib]###  LogicalWrite Completed 

18:24:45: [DVTCommonLib]###  LogicalRead called
18:24:47: [ ReadLba(0x368CF0A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1289 ] 
18:24:47: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:24:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:24:47: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 130 times 

18:24:47: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:24:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:24:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1290 ] 
18:24:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:24:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:24:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:24:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:24:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:24:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:24:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616E900>, <py_sfcl.CommandDataDefinition object at 0x0616E690>) , Command count = 1291 ] 
18:24:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:24:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614A300>, <py_sfcl.CommandDataDefinition object at 0x0682D630>) , Command count = 1292 ] 
18:24:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:24:47: [ SetCardRCA(0x1, 0xD555) , Command count = 1293 ] 
18:24:47: [DVTCommonLib]### Identification :Idenfication of card completed 

18:24:47: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:24:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:24:47: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:24:47: [ SetBusWidth(0x1) , Command count = 1294 ] 
18:24:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:24:47: ####CSD Registe 2.0 Values####
18:24:47: CSD_STRUCTURE                                 :0x1
18:24:47: Reserv1                                       :0x0
18:24:47: Time Access 1 TAAC                            :0xe
18:24:47: Time Access 2 NSAC*100                        :0x0
18:24:47: Data Transfer Rate TRAN_SPEED                 :0x32
18:24:47: Card Command Classess CCC                     :0x5b5
18:24:47: Max Read Data Block Length  READ_BL_LEN       :0x9
18:24:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:24:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:24:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:24:47: DSR(driver stage register)  DSR_IMP           :0x0
18:24:47: Reserv2                                       :0x0
18:24:47: Device Size C_SIZE                            :0xedc8
18:24:47: Reserv3                                       :0x0
18:24:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:24:47: Erase Sector Size SECTOR_SIZE                 :0x7f
18:24:47: Write Protect Group Size WP_GRP_SIZE          :0x0
18:24:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:24:47: Reserv4                                       :0x0
18:24:47: Write Speed Factor R2W_FACTOR                 :0x2
18:24:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:24:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:24:47: FILE_FORMAT_GRP                               :0x0
18:24:47: COPY flag                                     :0x1
18:24:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:24:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:24:47: File_Format                                   :0x0
18:24:47: CRC                                           :0x0
18:24:47: ####CSD Registe Values####  

18:24:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:24:47: ProductSerialNumber = 0x23482900
18:24:47: CardMaximumLBA      = 0x3b72400
18:24:47: CardCapacity        = 32G
18:24:47: Is card secure      = 0
18:24:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:24:47: [DVTCommonLib]###  LogicalWrite called
18:24:49: [ WriteLba(0x1D651F0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1295 ] 
18:24:49: [DVTCommonLib]###  LogicalWrite Completed 

18:24:49: [DVTCommonLib]###  LogicalRead called
18:24:50: [ ReadLba(0x1D651F0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1296 ] 
18:24:50: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:24:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:24:50: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 131 times 

18:24:50: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:24:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:24:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1297 ] 
18:24:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:24:50: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:24:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:24:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:24:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:24:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:24:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614AA20>, <py_sfcl.CommandDataDefinition object at 0x0614AE70>) , Command count = 1298 ] 
18:24:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:24:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061640F0>, <py_sfcl.CommandDataDefinition object at 0x0682D8D0>) , Command count = 1299 ] 
18:24:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:24:50: [ SetCardRCA(0x1, 0xD555) , Command count = 1300 ] 
18:24:50: [DVTCommonLib]### Identification :Idenfication of card completed 

18:24:50: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:24:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:24:50: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:24:50: [ SetBusWidth(0x1) , Command count = 1301 ] 
18:24:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:24:50: ####CSD Registe 2.0 Values####
18:24:50: CSD_STRUCTURE                                 :0x1
18:24:50: Reserv1                                       :0x0
18:24:50: Time Access 1 TAAC                            :0xe
18:24:50: Time Access 2 NSAC*100                        :0x0
18:24:50: Data Transfer Rate TRAN_SPEED                 :0x32
18:24:50: Card Command Classess CCC                     :0x5b5
18:24:50: Max Read Data Block Length  READ_BL_LEN       :0x9
18:24:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:24:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:24:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:24:50: DSR(driver stage register)  DSR_IMP           :0x0
18:24:50: Reserv2                                       :0x0
18:24:50: Device Size C_SIZE                            :0xedc8
18:24:50: Reserv3                                       :0x0
18:24:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:24:50: Erase Sector Size SECTOR_SIZE                 :0x7f
18:24:50: Write Protect Group Size WP_GRP_SIZE          :0x0
18:24:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:24:50: Reserv4                                       :0x0
18:24:50: Write Speed Factor R2W_FACTOR                 :0x2
18:24:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:24:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:24:50: FILE_FORMAT_GRP                               :0x0
18:24:50: COPY flag                                     :0x1
18:24:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:24:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:24:50: File_Format                                   :0x0
18:24:50: CRC                                           :0x0
18:24:50: ####CSD Registe Values####  

18:24:50: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:24:50: ProductSerialNumber = 0x23482900
18:24:50: CardMaximumLBA      = 0x3b72400
18:24:50: CardCapacity        = 32G
18:24:50: Is card secure      = 0
18:24:50: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:24:50: [DVTCommonLib]###  LogicalWrite called
18:24:52: [ WriteLba(0x3627404, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1302 ] 
18:24:52: [DVTCommonLib]###  LogicalWrite Completed 

18:24:52: [DVTCommonLib]###  LogicalRead called
18:24:54: [ ReadLba(0x3627404, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1303 ] 
18:24:54: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:24:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:24:54: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 132 times 

18:24:54: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:24:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:24:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1304 ] 
18:24:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:24:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:24:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:24:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:24:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:24:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:24:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5C60>, <py_sfcl.CommandDataDefinition object at 0x061A5C30>) , Command count = 1305 ] 
18:24:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:24:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066FF600>, <py_sfcl.CommandDataDefinition object at 0x0682DD20>) , Command count = 1306 ] 
18:24:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:24:54: [ SetCardRCA(0x1, 0xD555) , Command count = 1307 ] 
18:24:54: [DVTCommonLib]### Identification :Idenfication of card completed 

18:24:54: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:24:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:24:54: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:24:54: [ SetBusWidth(0x1) , Command count = 1308 ] 
18:24:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:24:54: ####CSD Registe 2.0 Values####
18:24:54: CSD_STRUCTURE                                 :0x1
18:24:54: Reserv1                                       :0x0
18:24:54: Time Access 1 TAAC                            :0xe
18:24:54: Time Access 2 NSAC*100                        :0x0
18:24:54: Data Transfer Rate TRAN_SPEED                 :0x32
18:24:54: Card Command Classess CCC                     :0x5b5
18:24:54: Max Read Data Block Length  READ_BL_LEN       :0x9
18:24:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:24:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:24:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:24:54: DSR(driver stage register)  DSR_IMP           :0x0
18:24:54: Reserv2                                       :0x0
18:24:54: Device Size C_SIZE                            :0xedc8
18:24:54: Reserv3                                       :0x0
18:24:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:24:54: Erase Sector Size SECTOR_SIZE                 :0x7f
18:24:54: Write Protect Group Size WP_GRP_SIZE          :0x0
18:24:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:24:54: Reserv4                                       :0x0
18:24:54: Write Speed Factor R2W_FACTOR                 :0x2
18:24:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:24:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:24:54: FILE_FORMAT_GRP                               :0x0
18:24:54: COPY flag                                     :0x1
18:24:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:24:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:24:54: File_Format                                   :0x0
18:24:54: CRC                                           :0x0
18:24:54: ####CSD Registe Values####  

18:24:54: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:24:54: ProductSerialNumber = 0x23482900
18:24:54: CardMaximumLBA      = 0x3b72400
18:24:54: CardCapacity        = 32G
18:24:54: Is card secure      = 0
18:24:54: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:24:54: [DVTCommonLib]###  LogicalWrite called
18:24:55: [ WriteLba(0x3125E88, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1309 ] 
18:24:55: [DVTCommonLib]###  LogicalWrite Completed 

18:24:55: [DVTCommonLib]###  LogicalRead called
18:24:57: [ ReadLba(0x3125E88, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1310 ] 
18:24:57: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:24:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:24:57: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 133 times 

18:24:57: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:24:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:24:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1311 ] 
18:24:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:24:57: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:24:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:24:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:24:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:24:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:24:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066FF450>, <py_sfcl.CommandDataDefinition object at 0x061A5F60>) , Command count = 1312 ] 
18:24:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:24:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BAD20>, <py_sfcl.CommandDataDefinition object at 0x0682DCC0>) , Command count = 1313 ] 
18:24:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:24:57: [ SetCardRCA(0x1, 0xD555) , Command count = 1314 ] 
18:24:57: [DVTCommonLib]### Identification :Idenfication of card completed 

18:24:57: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:24:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:24:57: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:24:57: [ SetBusWidth(0x1) , Command count = 1315 ] 
18:24:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:24:57: ####CSD Registe 2.0 Values####
18:24:57: CSD_STRUCTURE                                 :0x1
18:24:57: Reserv1                                       :0x0
18:24:57: Time Access 1 TAAC                            :0xe
18:24:57: Time Access 2 NSAC*100                        :0x0
18:24:57: Data Transfer Rate TRAN_SPEED                 :0x32
18:24:57: Card Command Classess CCC                     :0x5b5
18:24:57: Max Read Data Block Length  READ_BL_LEN       :0x9
18:24:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:24:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:24:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:24:57: DSR(driver stage register)  DSR_IMP           :0x0
18:24:57: Reserv2                                       :0x0
18:24:57: Device Size C_SIZE                            :0xedc8
18:24:57: Reserv3                                       :0x0
18:24:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:24:57: Erase Sector Size SECTOR_SIZE                 :0x7f
18:24:57: Write Protect Group Size WP_GRP_SIZE          :0x0
18:24:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:24:57: Reserv4                                       :0x0
18:24:57: Write Speed Factor R2W_FACTOR                 :0x2
18:24:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:24:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:24:57: FILE_FORMAT_GRP                               :0x0
18:24:57: COPY flag                                     :0x1
18:24:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:24:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:24:57: File_Format                                   :0x0
18:24:57: CRC                                           :0x0
18:24:57: ####CSD Registe Values####  

18:24:57: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:24:57: ProductSerialNumber = 0x23482900
18:24:57: CardMaximumLBA      = 0x3b72400
18:24:57: CardCapacity        = 32G
18:24:57: Is card secure      = 0
18:24:57: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:24:57: [DVTCommonLib]###  LogicalWrite called
18:24:59: [ WriteLba(0x2C7D826, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1316 ] 
18:24:59: [DVTCommonLib]###  LogicalWrite Completed 

18:24:59: [DVTCommonLib]###  LogicalRead called
18:25:00: [ ReadLba(0x2C7D826, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1317 ] 
18:25:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:25:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:25:00: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 134 times 

18:25:00: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:25:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:25:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1318 ] 
18:25:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:25:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:25:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:25:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:25:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:25:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:25:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BA9F0>, <py_sfcl.CommandDataDefinition object at 0x067BAAE0>) , Command count = 1319 ] 
18:25:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:25:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1060>, <py_sfcl.CommandDataDefinition object at 0x0682DD80>) , Command count = 1320 ] 
18:25:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:25:00: [ SetCardRCA(0x1, 0xD555) , Command count = 1321 ] 
18:25:01: [DVTCommonLib]### Identification :Idenfication of card completed 

18:25:01: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:25:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:25:01: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:25:01: [ SetBusWidth(0x1) , Command count = 1322 ] 
18:25:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:25:01: ####CSD Registe 2.0 Values####
18:25:01: CSD_STRUCTURE                                 :0x1
18:25:01: Reserv1                                       :0x0
18:25:01: Time Access 1 TAAC                            :0xe
18:25:01: Time Access 2 NSAC*100                        :0x0
18:25:01: Data Transfer Rate TRAN_SPEED                 :0x32
18:25:01: Card Command Classess CCC                     :0x5b5
18:25:01: Max Read Data Block Length  READ_BL_LEN       :0x9
18:25:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:25:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:25:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:25:01: DSR(driver stage register)  DSR_IMP           :0x0
18:25:01: Reserv2                                       :0x0
18:25:01: Device Size C_SIZE                            :0xedc8
18:25:01: Reserv3                                       :0x0
18:25:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:25:01: Erase Sector Size SECTOR_SIZE                 :0x7f
18:25:01: Write Protect Group Size WP_GRP_SIZE          :0x0
18:25:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:25:01: Reserv4                                       :0x0
18:25:01: Write Speed Factor R2W_FACTOR                 :0x2
18:25:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:25:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:25:01: FILE_FORMAT_GRP                               :0x0
18:25:01: COPY flag                                     :0x1
18:25:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:25:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:25:01: File_Format                                   :0x0
18:25:01: CRC                                           :0x0
18:25:01: ####CSD Registe Values####  

18:25:01: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:25:01: ProductSerialNumber = 0x23482900
18:25:01: CardMaximumLBA      = 0x3b72400
18:25:01: CardCapacity        = 32G
18:25:01: Is card secure      = 0
18:25:01: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:25:01: [DVTCommonLib]###  LogicalWrite called
18:25:02: [ WriteLba(0x144330F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1323 ] 
18:25:02: [DVTCommonLib]###  LogicalWrite Completed 

18:25:02: [DVTCommonLib]###  LogicalRead called
18:25:04: [ ReadLba(0x144330F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1324 ] 
18:25:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:25:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:25:04: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 135 times 

18:25:04: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:25:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:25:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1325 ] 
18:25:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:25:04: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:25:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:25:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:25:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:25:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:25:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BABD0>, <py_sfcl.CommandDataDefinition object at 0x067BAAB0>) , Command count = 1326 ] 
18:25:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:25:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BA180>, <py_sfcl.CommandDataDefinition object at 0x0682DD80>) , Command count = 1327 ] 
18:25:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:25:04: [ SetCardRCA(0x1, 0xD555) , Command count = 1328 ] 
18:25:04: [DVTCommonLib]### Identification :Idenfication of card completed 

18:25:04: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:25:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:25:04: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:25:04: [ SetBusWidth(0x1) , Command count = 1329 ] 
18:25:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:25:04: ####CSD Registe 2.0 Values####
18:25:04: CSD_STRUCTURE                                 :0x1
18:25:04: Reserv1                                       :0x0
18:25:04: Time Access 1 TAAC                            :0xe
18:25:04: Time Access 2 NSAC*100                        :0x0
18:25:04: Data Transfer Rate TRAN_SPEED                 :0x32
18:25:04: Card Command Classess CCC                     :0x5b5
18:25:04: Max Read Data Block Length  READ_BL_LEN       :0x9
18:25:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:25:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:25:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:25:04: DSR(driver stage register)  DSR_IMP           :0x0
18:25:04: Reserv2                                       :0x0
18:25:04: Device Size C_SIZE                            :0xedc8
18:25:04: Reserv3                                       :0x0
18:25:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:25:04: Erase Sector Size SECTOR_SIZE                 :0x7f
18:25:04: Write Protect Group Size WP_GRP_SIZE          :0x0
18:25:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:25:04: Reserv4                                       :0x0
18:25:04: Write Speed Factor R2W_FACTOR                 :0x2
18:25:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:25:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:25:04: FILE_FORMAT_GRP                               :0x0
18:25:04: COPY flag                                     :0x1
18:25:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:25:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:25:04: File_Format                                   :0x0
18:25:04: CRC                                           :0x0
18:25:04: ####CSD Registe Values####  

18:25:04: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:25:04: ProductSerialNumber = 0x23482900
18:25:04: CardMaximumLBA      = 0x3b72400
18:25:04: CardCapacity        = 32G
18:25:04: Is card secure      = 0
18:25:04: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:25:04: [DVTCommonLib]###  LogicalWrite called
18:25:06: [ WriteLba(0x36266DD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1330 ] 
18:25:06: [DVTCommonLib]###  LogicalWrite Completed 

18:25:06: [DVTCommonLib]###  LogicalRead called
18:25:07: [ ReadLba(0x36266DD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1331 ] 
18:25:07: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:25:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:25:07: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 136 times 

18:25:07: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:25:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:25:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1332 ] 
18:25:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:25:07: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:25:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:25:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:25:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:25:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:25:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066FF1B0>, <py_sfcl.CommandDataDefinition object at 0x066FF360>) , Command count = 1333 ] 
18:25:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:25:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BACC0>, <py_sfcl.CommandDataDefinition object at 0x0682DD80>) , Command count = 1334 ] 
18:25:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:25:07: [ SetCardRCA(0x1, 0xD555) , Command count = 1335 ] 
18:25:07: [DVTCommonLib]### Identification :Idenfication of card completed 

18:25:07: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:25:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:25:07: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:25:07: [ SetBusWidth(0x1) , Command count = 1336 ] 
18:25:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:25:07: ####CSD Registe 2.0 Values####
18:25:07: CSD_STRUCTURE                                 :0x1
18:25:07: Reserv1                                       :0x0
18:25:07: Time Access 1 TAAC                            :0xe
18:25:07: Time Access 2 NSAC*100                        :0x0
18:25:07: Data Transfer Rate TRAN_SPEED                 :0x32
18:25:07: Card Command Classess CCC                     :0x5b5
18:25:07: Max Read Data Block Length  READ_BL_LEN       :0x9
18:25:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:25:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:25:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:25:07: DSR(driver stage register)  DSR_IMP           :0x0
18:25:07: Reserv2                                       :0x0
18:25:07: Device Size C_SIZE                            :0xedc8
18:25:07: Reserv3                                       :0x0
18:25:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:25:07: Erase Sector Size SECTOR_SIZE                 :0x7f
18:25:07: Write Protect Group Size WP_GRP_SIZE          :0x0
18:25:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:25:07: Reserv4                                       :0x0
18:25:07: Write Speed Factor R2W_FACTOR                 :0x2
18:25:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:25:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:25:07: FILE_FORMAT_GRP                               :0x0
18:25:07: COPY flag                                     :0x1
18:25:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:25:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:25:07: File_Format                                   :0x0
18:25:07: CRC                                           :0x0
18:25:07: ####CSD Registe Values####  

18:25:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:25:07: ProductSerialNumber = 0x23482900
18:25:07: CardMaximumLBA      = 0x3b72400
18:25:07: CardCapacity        = 32G
18:25:07: Is card secure      = 0
18:25:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:25:07: [DVTCommonLib]###  LogicalWrite called
18:25:09: [ WriteLba(0x309F318, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1337 ] 
18:25:09: [DVTCommonLib]###  LogicalWrite Completed 

18:25:09: [DVTCommonLib]###  LogicalRead called
18:25:11: [ ReadLba(0x309F318, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1338 ] 
18:25:11: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:25:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:25:11: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 137 times 

18:25:11: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:25:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:25:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1339 ] 
18:25:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:25:11: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:25:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:25:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:25:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:25:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:25:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BAF60>, <py_sfcl.CommandDataDefinition object at 0x067AFE70>) , Command count = 1340 ] 
18:25:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:25:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BAD80>, <py_sfcl.CommandDataDefinition object at 0x067C1540>) , Command count = 1341 ] 
18:25:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:25:11: [ SetCardRCA(0x1, 0xD555) , Command count = 1342 ] 
18:25:11: [DVTCommonLib]### Identification :Idenfication of card completed 

18:25:11: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:25:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:25:11: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:25:11: [ SetBusWidth(0x1) , Command count = 1343 ] 
18:25:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:25:11: ####CSD Registe 2.0 Values####
18:25:11: CSD_STRUCTURE                                 :0x1
18:25:11: Reserv1                                       :0x0
18:25:11: Time Access 1 TAAC                            :0xe
18:25:11: Time Access 2 NSAC*100                        :0x0
18:25:11: Data Transfer Rate TRAN_SPEED                 :0x32
18:25:11: Card Command Classess CCC                     :0x5b5
18:25:11: Max Read Data Block Length  READ_BL_LEN       :0x9
18:25:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:25:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:25:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:25:11: DSR(driver stage register)  DSR_IMP           :0x0
18:25:11: Reserv2                                       :0x0
18:25:11: Device Size C_SIZE                            :0xedc8
18:25:11: Reserv3                                       :0x0
18:25:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:25:11: Erase Sector Size SECTOR_SIZE                 :0x7f
18:25:11: Write Protect Group Size WP_GRP_SIZE          :0x0
18:25:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:25:11: Reserv4                                       :0x0
18:25:11: Write Speed Factor R2W_FACTOR                 :0x2
18:25:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:25:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:25:11: FILE_FORMAT_GRP                               :0x0
18:25:11: COPY flag                                     :0x1
18:25:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:25:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:25:11: File_Format                                   :0x0
18:25:11: CRC                                           :0x0
18:25:11: ####CSD Registe Values####  

18:25:11: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:25:11: ProductSerialNumber = 0x23482900
18:25:11: CardMaximumLBA      = 0x3b72400
18:25:11: CardCapacity        = 32G
18:25:11: Is card secure      = 0
18:25:11: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:25:11: [DVTCommonLib]###  LogicalWrite called
18:25:12: [ WriteLba(0xDE1020, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1344 ] 
18:25:12: [DVTCommonLib]###  LogicalWrite Completed 

18:25:12: [DVTCommonLib]###  LogicalRead called
18:25:14: [ ReadLba(0xDE1020, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1345 ] 
18:25:14: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:25:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:25:14: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 138 times 

18:25:14: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:25:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:25:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1346 ] 
18:25:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:25:14: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:25:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:25:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:25:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:25:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:25:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1C30>, <py_sfcl.CommandDataDefinition object at 0x0616E270>) , Command count = 1347 ] 
18:25:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:25:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7180>, <py_sfcl.CommandDataDefinition object at 0x067C72D0>) , Command count = 1348 ] 
18:25:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:25:14: [ SetCardRCA(0x1, 0xD555) , Command count = 1349 ] 
18:25:14: [DVTCommonLib]### Identification :Idenfication of card completed 

18:25:14: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:25:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:25:14: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:25:14: [ SetBusWidth(0x1) , Command count = 1350 ] 
18:25:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:25:14: ####CSD Registe 2.0 Values####
18:25:14: CSD_STRUCTURE                                 :0x1
18:25:14: Reserv1                                       :0x0
18:25:14: Time Access 1 TAAC                            :0xe
18:25:14: Time Access 2 NSAC*100                        :0x0
18:25:14: Data Transfer Rate TRAN_SPEED                 :0x32
18:25:14: Card Command Classess CCC                     :0x5b5
18:25:14: Max Read Data Block Length  READ_BL_LEN       :0x9
18:25:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:25:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:25:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:25:14: DSR(driver stage register)  DSR_IMP           :0x0
18:25:14: Reserv2                                       :0x0
18:25:14: Device Size C_SIZE                            :0xedc8
18:25:14: Reserv3                                       :0x0
18:25:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:25:14: Erase Sector Size SECTOR_SIZE                 :0x7f
18:25:14: Write Protect Group Size WP_GRP_SIZE          :0x0
18:25:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:25:14: Reserv4                                       :0x0
18:25:14: Write Speed Factor R2W_FACTOR                 :0x2
18:25:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:25:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:25:14: FILE_FORMAT_GRP                               :0x0
18:25:14: COPY flag                                     :0x1
18:25:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:25:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:25:14: File_Format                                   :0x0
18:25:14: CRC                                           :0x0
18:25:14: ####CSD Registe Values####  

18:25:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:25:14: ProductSerialNumber = 0x23482900
18:25:14: CardMaximumLBA      = 0x3b72400
18:25:14: CardCapacity        = 32G
18:25:14: Is card secure      = 0
18:25:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:25:14: [DVTCommonLib]###  LogicalWrite called
18:25:16: [ WriteLba(0x1FBCD8F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1351 ] 
18:25:16: [DVTCommonLib]###  LogicalWrite Completed 

18:25:16: [DVTCommonLib]###  LogicalRead called
18:25:17: [ ReadLba(0x1FBCD8F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1352 ] 
18:25:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:25:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:25:17: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 139 times 

18:25:17: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:25:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:25:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1353 ] 
18:25:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:25:18: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:25:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:25:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:25:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:25:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:25:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C10F0>, <py_sfcl.CommandDataDefinition object at 0x067C1F00>) , Command count = 1354 ] 
18:25:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:25:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C75D0>, <py_sfcl.CommandDataDefinition object at 0x067C7690>) , Command count = 1355 ] 
18:25:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:25:18: [ SetCardRCA(0x1, 0xD555) , Command count = 1356 ] 
18:25:18: [DVTCommonLib]### Identification :Idenfication of card completed 

18:25:18: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:25:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:25:18: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:25:18: [ SetBusWidth(0x1) , Command count = 1357 ] 
18:25:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:25:18: ####CSD Registe 2.0 Values####
18:25:18: CSD_STRUCTURE                                 :0x1
18:25:18: Reserv1                                       :0x0
18:25:18: Time Access 1 TAAC                            :0xe
18:25:18: Time Access 2 NSAC*100                        :0x0
18:25:18: Data Transfer Rate TRAN_SPEED                 :0x32
18:25:18: Card Command Classess CCC                     :0x5b5
18:25:18: Max Read Data Block Length  READ_BL_LEN       :0x9
18:25:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:25:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:25:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:25:18: DSR(driver stage register)  DSR_IMP           :0x0
18:25:18: Reserv2                                       :0x0
18:25:18: Device Size C_SIZE                            :0xedc8
18:25:18: Reserv3                                       :0x0
18:25:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:25:18: Erase Sector Size SECTOR_SIZE                 :0x7f
18:25:18: Write Protect Group Size WP_GRP_SIZE          :0x0
18:25:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:25:18: Reserv4                                       :0x0
18:25:18: Write Speed Factor R2W_FACTOR                 :0x2
18:25:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:25:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:25:18: FILE_FORMAT_GRP                               :0x0
18:25:18: COPY flag                                     :0x1
18:25:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:25:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:25:18: File_Format                                   :0x0
18:25:18: CRC                                           :0x0
18:25:18: ####CSD Registe Values####  

18:25:18: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:25:18: ProductSerialNumber = 0x23482900
18:25:18: CardMaximumLBA      = 0x3b72400
18:25:18: CardCapacity        = 32G
18:25:18: Is card secure      = 0
18:25:18: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:25:18: [DVTCommonLib]###  LogicalWrite called
18:25:19: [ WriteLba(0x169FDE0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1358 ] 
18:25:19: [DVTCommonLib]###  LogicalWrite Completed 

18:25:19: [DVTCommonLib]###  LogicalRead called
18:25:21: [ ReadLba(0x169FDE0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1359 ] 
18:25:21: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:25:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:25:21: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 140 times 

18:25:21: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:25:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:25:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1360 ] 
18:25:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:25:21: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:25:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:25:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:25:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:25:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:25:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7450>, <py_sfcl.CommandDataDefinition object at 0x067C73C0>) , Command count = 1361 ] 
18:25:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:25:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067CDF30>, <py_sfcl.CommandDataDefinition object at 0x067C7900>) , Command count = 1362 ] 
18:25:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:25:21: [ SetCardRCA(0x1, 0xD555) , Command count = 1363 ] 
18:25:21: [DVTCommonLib]### Identification :Idenfication of card completed 

18:25:21: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:25:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:25:21: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:25:21: [ SetBusWidth(0x1) , Command count = 1364 ] 
18:25:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:25:21: ####CSD Registe 2.0 Values####
18:25:21: CSD_STRUCTURE                                 :0x1
18:25:21: Reserv1                                       :0x0
18:25:21: Time Access 1 TAAC                            :0xe
18:25:21: Time Access 2 NSAC*100                        :0x0
18:25:21: Data Transfer Rate TRAN_SPEED                 :0x32
18:25:21: Card Command Classess CCC                     :0x5b5
18:25:21: Max Read Data Block Length  READ_BL_LEN       :0x9
18:25:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:25:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:25:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:25:21: DSR(driver stage register)  DSR_IMP           :0x0
18:25:21: Reserv2                                       :0x0
18:25:21: Device Size C_SIZE                            :0xedc8
18:25:21: Reserv3                                       :0x0
18:25:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:25:21: Erase Sector Size SECTOR_SIZE                 :0x7f
18:25:21: Write Protect Group Size WP_GRP_SIZE          :0x0
18:25:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:25:21: Reserv4                                       :0x0
18:25:21: Write Speed Factor R2W_FACTOR                 :0x2
18:25:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:25:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:25:21: FILE_FORMAT_GRP                               :0x0
18:25:21: COPY flag                                     :0x1
18:25:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:25:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:25:21: File_Format                                   :0x0
18:25:21: CRC                                           :0x0
18:25:21: ####CSD Registe Values####  

18:25:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:25:21: ProductSerialNumber = 0x23482900
18:25:21: CardMaximumLBA      = 0x3b72400
18:25:21: CardCapacity        = 32G
18:25:21: Is card secure      = 0
18:25:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:25:21: [DVTCommonLib]###  LogicalWrite called
18:25:23: [ WriteLba(0x45AF68, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1365 ] 
18:25:23: [DVTCommonLib]###  LogicalWrite Completed 

18:25:23: [DVTCommonLib]###  LogicalRead called
18:25:24: [ ReadLba(0x45AF68, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1366 ] 
18:25:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:25:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:25:24: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 141 times 

18:25:24: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:25:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:25:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1367 ] 
18:25:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:25:24: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:25:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:25:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:25:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:25:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:25:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7720>, <py_sfcl.CommandDataDefinition object at 0x067C78A0>) , Command count = 1368 ] 
18:25:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:25:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067CDFC0>, <py_sfcl.CommandDataDefinition object at 0x067C74E0>) , Command count = 1369 ] 
18:25:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:25:24: [ SetCardRCA(0x1, 0xD555) , Command count = 1370 ] 
18:25:24: [DVTCommonLib]### Identification :Idenfication of card completed 

18:25:24: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:25:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:25:24: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:25:24: [ SetBusWidth(0x1) , Command count = 1371 ] 
18:25:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:25:24: ####CSD Registe 2.0 Values####
18:25:24: CSD_STRUCTURE                                 :0x1
18:25:24: Reserv1                                       :0x0
18:25:24: Time Access 1 TAAC                            :0xe
18:25:24: Time Access 2 NSAC*100                        :0x0
18:25:24: Data Transfer Rate TRAN_SPEED                 :0x32
18:25:24: Card Command Classess CCC                     :0x5b5
18:25:24: Max Read Data Block Length  READ_BL_LEN       :0x9
18:25:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:25:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:25:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:25:24: DSR(driver stage register)  DSR_IMP           :0x0
18:25:24: Reserv2                                       :0x0
18:25:24: Device Size C_SIZE                            :0xedc8
18:25:24: Reserv3                                       :0x0
18:25:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:25:24: Erase Sector Size SECTOR_SIZE                 :0x7f
18:25:24: Write Protect Group Size WP_GRP_SIZE          :0x0
18:25:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:25:24: Reserv4                                       :0x0
18:25:24: Write Speed Factor R2W_FACTOR                 :0x2
18:25:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:25:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:25:24: FILE_FORMAT_GRP                               :0x0
18:25:24: COPY flag                                     :0x1
18:25:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:25:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:25:24: File_Format                                   :0x0
18:25:24: CRC                                           :0x0
18:25:24: ####CSD Registe Values####  

18:25:24: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:25:24: ProductSerialNumber = 0x23482900
18:25:24: CardMaximumLBA      = 0x3b72400
18:25:24: CardCapacity        = 32G
18:25:24: Is card secure      = 0
18:25:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:25:24: [DVTCommonLib]###  LogicalWrite called
18:25:26: [ WriteLba(0x109789F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1372 ] 
18:25:26: [DVTCommonLib]###  LogicalWrite Completed 

18:25:26: [DVTCommonLib]###  LogicalRead called
18:25:28: [ ReadLba(0x109789F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1373 ] 
18:25:28: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:25:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:25:28: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 142 times 

18:25:28: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:25:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:25:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1374 ] 
18:25:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:25:28: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:25:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:25:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:25:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:25:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:25:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067CDF00>, <py_sfcl.CommandDataDefinition object at 0x067CDF60>) , Command count = 1375 ] 
18:25:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:25:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7090>, <py_sfcl.CommandDataDefinition object at 0x067C74E0>) , Command count = 1376 ] 
18:25:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:25:28: [ SetCardRCA(0x1, 0xD555) , Command count = 1377 ] 
18:25:28: [DVTCommonLib]### Identification :Idenfication of card completed 

18:25:28: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:25:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:25:28: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:25:28: [ SetBusWidth(0x1) , Command count = 1378 ] 
18:25:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:25:28: ####CSD Registe 2.0 Values####
18:25:28: CSD_STRUCTURE                                 :0x1
18:25:28: Reserv1                                       :0x0
18:25:28: Time Access 1 TAAC                            :0xe
18:25:28: Time Access 2 NSAC*100                        :0x0
18:25:28: Data Transfer Rate TRAN_SPEED                 :0x32
18:25:28: Card Command Classess CCC                     :0x5b5
18:25:28: Max Read Data Block Length  READ_BL_LEN       :0x9
18:25:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:25:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:25:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:25:28: DSR(driver stage register)  DSR_IMP           :0x0
18:25:28: Reserv2                                       :0x0
18:25:28: Device Size C_SIZE                            :0xedc8
18:25:28: Reserv3                                       :0x0
18:25:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:25:28: Erase Sector Size SECTOR_SIZE                 :0x7f
18:25:28: Write Protect Group Size WP_GRP_SIZE          :0x0
18:25:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:25:28: Reserv4                                       :0x0
18:25:28: Write Speed Factor R2W_FACTOR                 :0x2
18:25:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:25:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:25:28: FILE_FORMAT_GRP                               :0x0
18:25:28: COPY flag                                     :0x1
18:25:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:25:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:25:28: File_Format                                   :0x0
18:25:28: CRC                                           :0x0
18:25:28: ####CSD Registe Values####  

18:25:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:25:28: ProductSerialNumber = 0x23482900
18:25:28: CardMaximumLBA      = 0x3b72400
18:25:28: CardCapacity        = 32G
18:25:28: Is card secure      = 0
18:25:28: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:25:28: [DVTCommonLib]###  LogicalWrite called
18:25:29: [ WriteLba(0x14A2DEF, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1379 ] 
18:25:29: [DVTCommonLib]###  LogicalWrite Completed 

18:25:29: [DVTCommonLib]###  LogicalRead called
18:25:31: [ ReadLba(0x14A2DEF, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1380 ] 
18:25:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:25:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:25:31: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 143 times 

18:25:31: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:25:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:25:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1381 ] 
18:25:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:25:31: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:25:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:25:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:25:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:25:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:25:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7300>, <py_sfcl.CommandDataDefinition object at 0x067C7240>) , Command count = 1382 ] 
18:25:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:25:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067AF270>, <py_sfcl.CommandDataDefinition object at 0x067C1390>) , Command count = 1383 ] 
18:25:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:25:31: [ SetCardRCA(0x1, 0xD555) , Command count = 1384 ] 
18:25:31: [DVTCommonLib]### Identification :Idenfication of card completed 

18:25:31: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:25:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:25:31: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:25:31: [ SetBusWidth(0x1) , Command count = 1385 ] 
18:25:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:25:31: ####CSD Registe 2.0 Values####
18:25:31: CSD_STRUCTURE                                 :0x1
18:25:31: Reserv1                                       :0x0
18:25:31: Time Access 1 TAAC                            :0xe
18:25:31: Time Access 2 NSAC*100                        :0x0
18:25:31: Data Transfer Rate TRAN_SPEED                 :0x32
18:25:31: Card Command Classess CCC                     :0x5b5
18:25:31: Max Read Data Block Length  READ_BL_LEN       :0x9
18:25:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:25:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:25:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:25:31: DSR(driver stage register)  DSR_IMP           :0x0
18:25:31: Reserv2                                       :0x0
18:25:31: Device Size C_SIZE                            :0xedc8
18:25:31: Reserv3                                       :0x0
18:25:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:25:31: Erase Sector Size SECTOR_SIZE                 :0x7f
18:25:31: Write Protect Group Size WP_GRP_SIZE          :0x0
18:25:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:25:31: Reserv4                                       :0x0
18:25:31: Write Speed Factor R2W_FACTOR                 :0x2
18:25:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:25:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:25:31: FILE_FORMAT_GRP                               :0x0
18:25:31: COPY flag                                     :0x1
18:25:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:25:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:25:31: File_Format                                   :0x0
18:25:31: CRC                                           :0x0
18:25:31: ####CSD Registe Values####  

18:25:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:25:31: ProductSerialNumber = 0x23482900
18:25:31: CardMaximumLBA      = 0x3b72400
18:25:31: CardCapacity        = 32G
18:25:31: Is card secure      = 0
18:25:31: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:25:31: [DVTCommonLib]###  LogicalWrite called
18:25:33: [ WriteLba(0x17138DD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1386 ] 
18:25:33: [DVTCommonLib]###  LogicalWrite Completed 

18:25:33: [DVTCommonLib]###  LogicalRead called
18:25:34: [ ReadLba(0x17138DD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1387 ] 
18:25:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:25:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:25:34: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 144 times 

18:25:34: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:25:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:25:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1388 ] 
18:25:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:25:35: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:25:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:25:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:25:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:25:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:25:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1420>, <py_sfcl.CommandDataDefinition object at 0x067C1EA0>) , Command count = 1389 ] 
18:25:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:25:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068236F0>, <py_sfcl.CommandDataDefinition object at 0x0682D9C0>) , Command count = 1390 ] 
18:25:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:25:35: [ SetCardRCA(0x1, 0xD555) , Command count = 1391 ] 
18:25:35: [DVTCommonLib]### Identification :Idenfication of card completed 

18:25:35: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:25:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:25:35: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:25:35: [ SetBusWidth(0x1) , Command count = 1392 ] 
18:25:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:25:35: ####CSD Registe 2.0 Values####
18:25:35: CSD_STRUCTURE                                 :0x1
18:25:35: Reserv1                                       :0x0
18:25:35: Time Access 1 TAAC                            :0xe
18:25:35: Time Access 2 NSAC*100                        :0x0
18:25:35: Data Transfer Rate TRAN_SPEED                 :0x32
18:25:35: Card Command Classess CCC                     :0x5b5
18:25:35: Max Read Data Block Length  READ_BL_LEN       :0x9
18:25:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:25:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:25:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:25:35: DSR(driver stage register)  DSR_IMP           :0x0
18:25:35: Reserv2                                       :0x0
18:25:35: Device Size C_SIZE                            :0xedc8
18:25:35: Reserv3                                       :0x0
18:25:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:25:35: Erase Sector Size SECTOR_SIZE                 :0x7f
18:25:35: Write Protect Group Size WP_GRP_SIZE          :0x0
18:25:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:25:35: Reserv4                                       :0x0
18:25:35: Write Speed Factor R2W_FACTOR                 :0x2
18:25:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:25:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:25:35: FILE_FORMAT_GRP                               :0x0
18:25:35: COPY flag                                     :0x1
18:25:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:25:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:25:35: File_Format                                   :0x0
18:25:35: CRC                                           :0x0
18:25:35: ####CSD Registe Values####  

18:25:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:25:35: ProductSerialNumber = 0x23482900
18:25:35: CardMaximumLBA      = 0x3b72400
18:25:35: CardCapacity        = 32G
18:25:35: Is card secure      = 0
18:25:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:25:35: [DVTCommonLib]###  LogicalWrite called
18:25:36: [ WriteLba(0x325A888, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1393 ] 
18:25:36: [DVTCommonLib]###  LogicalWrite Completed 

18:25:36: [DVTCommonLib]###  LogicalRead called
18:25:38: [ ReadLba(0x325A888, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1394 ] 
18:25:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:25:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:25:38: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 145 times 

18:25:38: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:25:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:25:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1395 ] 
18:25:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:25:38: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:25:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:25:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:25:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:25:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:25:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1CC0>, <py_sfcl.CommandDataDefinition object at 0x0682DB70>) , Command count = 1396 ] 
18:25:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:25:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823D80>, <py_sfcl.CommandDataDefinition object at 0x0682D720>) , Command count = 1397 ] 
18:25:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:25:38: [ SetCardRCA(0x1, 0xD555) , Command count = 1398 ] 
18:25:38: [DVTCommonLib]### Identification :Idenfication of card completed 

18:25:38: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:25:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:25:38: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:25:38: [ SetBusWidth(0x1) , Command count = 1399 ] 
18:25:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:25:38: ####CSD Registe 2.0 Values####
18:25:38: CSD_STRUCTURE                                 :0x1
18:25:38: Reserv1                                       :0x0
18:25:38: Time Access 1 TAAC                            :0xe
18:25:38: Time Access 2 NSAC*100                        :0x0
18:25:38: Data Transfer Rate TRAN_SPEED                 :0x32
18:25:38: Card Command Classess CCC                     :0x5b5
18:25:38: Max Read Data Block Length  READ_BL_LEN       :0x9
18:25:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:25:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:25:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:25:38: DSR(driver stage register)  DSR_IMP           :0x0
18:25:38: Reserv2                                       :0x0
18:25:38: Device Size C_SIZE                            :0xedc8
18:25:38: Reserv3                                       :0x0
18:25:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:25:38: Erase Sector Size SECTOR_SIZE                 :0x7f
18:25:38: Write Protect Group Size WP_GRP_SIZE          :0x0
18:25:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:25:38: Reserv4                                       :0x0
18:25:38: Write Speed Factor R2W_FACTOR                 :0x2
18:25:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:25:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:25:38: FILE_FORMAT_GRP                               :0x0
18:25:38: COPY flag                                     :0x1
18:25:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:25:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:25:38: File_Format                                   :0x0
18:25:38: CRC                                           :0x0
18:25:38: ####CSD Registe Values####  

18:25:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:25:38: ProductSerialNumber = 0x23482900
18:25:38: CardMaximumLBA      = 0x3b72400
18:25:38: CardCapacity        = 32G
18:25:38: Is card secure      = 0
18:25:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:25:38: [DVTCommonLib]###  LogicalWrite called
18:25:40: [ WriteLba(0x34C7B0B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1400 ] 
18:25:40: [DVTCommonLib]###  LogicalWrite Completed 

18:25:40: [DVTCommonLib]###  LogicalRead called
18:25:41: [ ReadLba(0x34C7B0B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1401 ] 
18:25:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:25:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:25:41: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 146 times 

18:25:41: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:25:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:25:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1402 ] 
18:25:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:25:41: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:25:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:25:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:25:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:25:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:25:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D930>, <py_sfcl.CommandDataDefinition object at 0x0682D8A0>) , Command count = 1403 ] 
18:25:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:25:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1D80>, <py_sfcl.CommandDataDefinition object at 0x0682D570>) , Command count = 1404 ] 
18:25:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:25:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1405 ] 
18:25:41: [DVTCommonLib]### Identification :Idenfication of card completed 

18:25:41: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:25:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:25:41: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:25:41: [ SetBusWidth(0x1) , Command count = 1406 ] 
18:25:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:25:41: ####CSD Registe 2.0 Values####
18:25:41: CSD_STRUCTURE                                 :0x1
18:25:41: Reserv1                                       :0x0
18:25:41: Time Access 1 TAAC                            :0xe
18:25:41: Time Access 2 NSAC*100                        :0x0
18:25:41: Data Transfer Rate TRAN_SPEED                 :0x32
18:25:41: Card Command Classess CCC                     :0x5b5
18:25:41: Max Read Data Block Length  READ_BL_LEN       :0x9
18:25:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:25:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:25:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:25:41: DSR(driver stage register)  DSR_IMP           :0x0
18:25:41: Reserv2                                       :0x0
18:25:41: Device Size C_SIZE                            :0xedc8
18:25:41: Reserv3                                       :0x0
18:25:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:25:41: Erase Sector Size SECTOR_SIZE                 :0x7f
18:25:41: Write Protect Group Size WP_GRP_SIZE          :0x0
18:25:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:25:41: Reserv4                                       :0x0
18:25:41: Write Speed Factor R2W_FACTOR                 :0x2
18:25:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:25:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:25:41: FILE_FORMAT_GRP                               :0x0
18:25:41: COPY flag                                     :0x1
18:25:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:25:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:25:41: File_Format                                   :0x0
18:25:41: CRC                                           :0x0
18:25:41: ####CSD Registe Values####  

18:25:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:25:41: ProductSerialNumber = 0x23482900
18:25:41: CardMaximumLBA      = 0x3b72400
18:25:41: CardCapacity        = 32G
18:25:41: Is card secure      = 0
18:25:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:25:41: [DVTCommonLib]###  LogicalWrite called
18:25:43: [ WriteLba(0x2F5968D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1407 ] 
18:25:43: [DVTCommonLib]###  LogicalWrite Completed 

18:25:43: [DVTCommonLib]###  LogicalRead called
18:25:45: [ ReadLba(0x2F5968D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1408 ] 
18:25:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:25:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:25:45: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 147 times 

18:25:45: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:25:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:25:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1409 ] 
18:25:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:25:45: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:25:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:25:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:25:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:25:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:25:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7CC0>, <py_sfcl.CommandDataDefinition object at 0x067C7DB0>) , Command count = 1410 ] 
18:25:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:25:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823B40>, <py_sfcl.CommandDataDefinition object at 0x0682D690>) , Command count = 1411 ] 
18:25:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:25:45: [ SetCardRCA(0x1, 0xD555) , Command count = 1412 ] 
18:25:45: [DVTCommonLib]### Identification :Idenfication of card completed 

18:25:45: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:25:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:25:45: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:25:45: [ SetBusWidth(0x1) , Command count = 1413 ] 
18:25:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:25:45: ####CSD Registe 2.0 Values####
18:25:45: CSD_STRUCTURE                                 :0x1
18:25:45: Reserv1                                       :0x0
18:25:45: Time Access 1 TAAC                            :0xe
18:25:45: Time Access 2 NSAC*100                        :0x0
18:25:45: Data Transfer Rate TRAN_SPEED                 :0x32
18:25:45: Card Command Classess CCC                     :0x5b5
18:25:45: Max Read Data Block Length  READ_BL_LEN       :0x9
18:25:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:25:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:25:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:25:45: DSR(driver stage register)  DSR_IMP           :0x0
18:25:45: Reserv2                                       :0x0
18:25:45: Device Size C_SIZE                            :0xedc8
18:25:45: Reserv3                                       :0x0
18:25:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:25:45: Erase Sector Size SECTOR_SIZE                 :0x7f
18:25:45: Write Protect Group Size WP_GRP_SIZE          :0x0
18:25:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:25:45: Reserv4                                       :0x0
18:25:45: Write Speed Factor R2W_FACTOR                 :0x2
18:25:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:25:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:25:45: FILE_FORMAT_GRP                               :0x0
18:25:45: COPY flag                                     :0x1
18:25:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:25:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:25:45: File_Format                                   :0x0
18:25:45: CRC                                           :0x0
18:25:45: ####CSD Registe Values####  

18:25:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:25:45: ProductSerialNumber = 0x23482900
18:25:45: CardMaximumLBA      = 0x3b72400
18:25:45: CardCapacity        = 32G
18:25:45: Is card secure      = 0
18:25:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:25:45: [DVTCommonLib]###  LogicalWrite called
18:25:47: [ WriteLba(0x31A9629, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1414 ] 
18:25:47: [DVTCommonLib]###  LogicalWrite Completed 

18:25:47: [DVTCommonLib]###  LogicalRead called
18:25:48: [ ReadLba(0x31A9629, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1415 ] 
18:25:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:25:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:25:48: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 148 times 

18:25:48: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:25:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:25:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1416 ] 
18:25:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:25:48: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:25:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:25:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:25:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:25:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:25:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CE10>, <py_sfcl.CommandDataDefinition object at 0x0682D360>) , Command count = 1417 ] 
18:25:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:25:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CEA0>, <py_sfcl.CommandDataDefinition object at 0x0682D0F0>) , Command count = 1418 ] 
18:25:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:25:48: [ SetCardRCA(0x1, 0xD555) , Command count = 1419 ] 
18:25:48: [DVTCommonLib]### Identification :Idenfication of card completed 

18:25:48: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:25:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:25:48: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:25:48: [ SetBusWidth(0x1) , Command count = 1420 ] 
18:25:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:25:48: ####CSD Registe 2.0 Values####
18:25:48: CSD_STRUCTURE                                 :0x1
18:25:48: Reserv1                                       :0x0
18:25:48: Time Access 1 TAAC                            :0xe
18:25:48: Time Access 2 NSAC*100                        :0x0
18:25:48: Data Transfer Rate TRAN_SPEED                 :0x32
18:25:48: Card Command Classess CCC                     :0x5b5
18:25:48: Max Read Data Block Length  READ_BL_LEN       :0x9
18:25:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:25:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:25:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:25:48: DSR(driver stage register)  DSR_IMP           :0x0
18:25:48: Reserv2                                       :0x0
18:25:48: Device Size C_SIZE                            :0xedc8
18:25:48: Reserv3                                       :0x0
18:25:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:25:48: Erase Sector Size SECTOR_SIZE                 :0x7f
18:25:48: Write Protect Group Size WP_GRP_SIZE          :0x0
18:25:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:25:48: Reserv4                                       :0x0
18:25:48: Write Speed Factor R2W_FACTOR                 :0x2
18:25:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:25:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:25:48: FILE_FORMAT_GRP                               :0x0
18:25:48: COPY flag                                     :0x1
18:25:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:25:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:25:48: File_Format                                   :0x0
18:25:48: CRC                                           :0x0
18:25:48: ####CSD Registe Values####  

18:25:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:25:48: ProductSerialNumber = 0x23482900
18:25:48: CardMaximumLBA      = 0x3b72400
18:25:48: CardCapacity        = 32G
18:25:48: Is card secure      = 0
18:25:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:25:48: [DVTCommonLib]###  LogicalWrite called
18:25:50: [ WriteLba(0x9C9482, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1421 ] 
18:25:50: [DVTCommonLib]###  LogicalWrite Completed 

18:25:50: [DVTCommonLib]###  LogicalRead called
18:25:52: [ ReadLba(0x9C9482, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1422 ] 
18:25:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:25:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:25:52: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 149 times 

18:25:52: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:25:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:25:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1423 ] 
18:25:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:25:52: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:25:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:25:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:25:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:25:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:25:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7B10>, <py_sfcl.CommandDataDefinition object at 0x0682D120>) , Command count = 1424 ] 
18:25:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:25:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823510>, <py_sfcl.CommandDataDefinition object at 0x0682CF90>) , Command count = 1425 ] 
18:25:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:25:52: [ SetCardRCA(0x1, 0xD555) , Command count = 1426 ] 
18:25:52: [DVTCommonLib]### Identification :Idenfication of card completed 

18:25:52: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:25:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:25:52: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:25:52: [ SetBusWidth(0x1) , Command count = 1427 ] 
18:25:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:25:52: ####CSD Registe 2.0 Values####
18:25:52: CSD_STRUCTURE                                 :0x1
18:25:52: Reserv1                                       :0x0
18:25:52: Time Access 1 TAAC                            :0xe
18:25:52: Time Access 2 NSAC*100                        :0x0
18:25:52: Data Transfer Rate TRAN_SPEED                 :0x32
18:25:52: Card Command Classess CCC                     :0x5b5
18:25:52: Max Read Data Block Length  READ_BL_LEN       :0x9
18:25:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:25:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:25:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:25:52: DSR(driver stage register)  DSR_IMP           :0x0
18:25:52: Reserv2                                       :0x0
18:25:52: Device Size C_SIZE                            :0xedc8
18:25:52: Reserv3                                       :0x0
18:25:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:25:52: Erase Sector Size SECTOR_SIZE                 :0x7f
18:25:52: Write Protect Group Size WP_GRP_SIZE          :0x0
18:25:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:25:52: Reserv4                                       :0x0
18:25:52: Write Speed Factor R2W_FACTOR                 :0x2
18:25:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:25:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:25:52: FILE_FORMAT_GRP                               :0x0
18:25:52: COPY flag                                     :0x1
18:25:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:25:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:25:52: File_Format                                   :0x0
18:25:52: CRC                                           :0x0
18:25:52: ####CSD Registe Values####  

18:25:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:25:52: ProductSerialNumber = 0x23482900
18:25:52: CardMaximumLBA      = 0x3b72400
18:25:52: CardCapacity        = 32G
18:25:52: Is card secure      = 0
18:25:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:25:52: [DVTCommonLib]###  LogicalWrite called
18:25:53: [ WriteLba(0x27B7184, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1428 ] 
18:25:53: [DVTCommonLib]###  LogicalWrite Completed 

18:25:53: [DVTCommonLib]###  LogicalRead called
18:25:55: [ ReadLba(0x27B7184, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1429 ] 
18:25:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:25:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:25:55: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 150 times 

18:25:55: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:25:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:25:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1430 ] 
18:25:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:25:55: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:25:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:25:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:25:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:25:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:25:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CC00>, <py_sfcl.CommandDataDefinition object at 0x0682CC90>) , Command count = 1431 ] 
18:25:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:25:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C6F0>, <py_sfcl.CommandDataDefinition object at 0x0682C900>) , Command count = 1432 ] 
18:25:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:25:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1433 ] 
18:25:55: [DVTCommonLib]### Identification :Idenfication of card completed 

18:25:55: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:25:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:25:55: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:25:55: [ SetBusWidth(0x1) , Command count = 1434 ] 
18:25:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:25:55: ####CSD Registe 2.0 Values####
18:25:55: CSD_STRUCTURE                                 :0x1
18:25:55: Reserv1                                       :0x0
18:25:55: Time Access 1 TAAC                            :0xe
18:25:55: Time Access 2 NSAC*100                        :0x0
18:25:55: Data Transfer Rate TRAN_SPEED                 :0x32
18:25:55: Card Command Classess CCC                     :0x5b5
18:25:55: Max Read Data Block Length  READ_BL_LEN       :0x9
18:25:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:25:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:25:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:25:55: DSR(driver stage register)  DSR_IMP           :0x0
18:25:55: Reserv2                                       :0x0
18:25:55: Device Size C_SIZE                            :0xedc8
18:25:55: Reserv3                                       :0x0
18:25:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:25:55: Erase Sector Size SECTOR_SIZE                 :0x7f
18:25:55: Write Protect Group Size WP_GRP_SIZE          :0x0
18:25:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:25:55: Reserv4                                       :0x0
18:25:55: Write Speed Factor R2W_FACTOR                 :0x2
18:25:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:25:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:25:55: FILE_FORMAT_GRP                               :0x0
18:25:55: COPY flag                                     :0x1
18:25:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:25:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:25:55: File_Format                                   :0x0
18:25:55: CRC                                           :0x0
18:25:55: ####CSD Registe Values####  

18:25:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:25:55: ProductSerialNumber = 0x23482900
18:25:55: CardMaximumLBA      = 0x3b72400
18:25:55: CardCapacity        = 32G
18:25:55: Is card secure      = 0
18:25:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:25:55: [DVTCommonLib]###  LogicalWrite called
18:25:57: [ WriteLba(0x68F016, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1435 ] 
18:25:57: [DVTCommonLib]###  LogicalWrite Completed 

18:25:57: [DVTCommonLib]###  LogicalRead called
18:25:58: [ ReadLba(0x68F016, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1436 ] 
18:25:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:25:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:25:58: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 151 times 

18:25:58: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:25:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:25:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1437 ] 
18:25:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:25:58: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:25:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:25:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:25:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:25:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:25:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823BA0>, <py_sfcl.CommandDataDefinition object at 0x0682C810>) , Command count = 1438 ] 
18:25:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:25:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C120>, <py_sfcl.CommandDataDefinition object at 0x0682C780>) , Command count = 1439 ] 
18:25:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:25:59: [ SetCardRCA(0x1, 0xD555) , Command count = 1440 ] 
18:25:59: [DVTCommonLib]### Identification :Idenfication of card completed 

18:25:59: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:25:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:25:59: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:25:59: [ SetBusWidth(0x1) , Command count = 1441 ] 
18:25:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:25:59: ####CSD Registe 2.0 Values####
18:25:59: CSD_STRUCTURE                                 :0x1
18:25:59: Reserv1                                       :0x0
18:25:59: Time Access 1 TAAC                            :0xe
18:25:59: Time Access 2 NSAC*100                        :0x0
18:25:59: Data Transfer Rate TRAN_SPEED                 :0x32
18:25:59: Card Command Classess CCC                     :0x5b5
18:25:59: Max Read Data Block Length  READ_BL_LEN       :0x9
18:25:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:25:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:25:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:25:59: DSR(driver stage register)  DSR_IMP           :0x0
18:25:59: Reserv2                                       :0x0
18:25:59: Device Size C_SIZE                            :0xedc8
18:25:59: Reserv3                                       :0x0
18:25:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:25:59: Erase Sector Size SECTOR_SIZE                 :0x7f
18:25:59: Write Protect Group Size WP_GRP_SIZE          :0x0
18:25:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:25:59: Reserv4                                       :0x0
18:25:59: Write Speed Factor R2W_FACTOR                 :0x2
18:25:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:25:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:25:59: FILE_FORMAT_GRP                               :0x0
18:25:59: COPY flag                                     :0x1
18:25:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:25:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:25:59: File_Format                                   :0x0
18:25:59: CRC                                           :0x0
18:25:59: ####CSD Registe Values####  

18:25:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:25:59: ProductSerialNumber = 0x23482900
18:25:59: CardMaximumLBA      = 0x3b72400
18:25:59: CardCapacity        = 32G
18:25:59: Is card secure      = 0
18:25:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:25:59: [DVTCommonLib]###  LogicalWrite called
18:26:00: [ WriteLba(0x5396C4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1442 ] 
18:26:00: [DVTCommonLib]###  LogicalWrite Completed 

18:26:00: [DVTCommonLib]###  LogicalRead called
18:26:02: [ ReadLba(0x5396C4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1443 ] 
18:26:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:26:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:26:02: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 152 times 

18:26:02: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:26:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:26:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1444 ] 
18:26:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:26:02: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:26:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:26:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:26:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:26:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:26:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823EA0>, <py_sfcl.CommandDataDefinition object at 0x06823D50>) , Command count = 1445 ] 
18:26:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:26:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823F60>, <py_sfcl.CommandDataDefinition object at 0x0682C240>) , Command count = 1446 ] 
18:26:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:26:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1447 ] 
18:26:02: [DVTCommonLib]### Identification :Idenfication of card completed 

18:26:02: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:26:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:26:02: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:26:02: [ SetBusWidth(0x1) , Command count = 1448 ] 
18:26:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:26:02: ####CSD Registe 2.0 Values####
18:26:02: CSD_STRUCTURE                                 :0x1
18:26:02: Reserv1                                       :0x0
18:26:02: Time Access 1 TAAC                            :0xe
18:26:02: Time Access 2 NSAC*100                        :0x0
18:26:02: Data Transfer Rate TRAN_SPEED                 :0x32
18:26:02: Card Command Classess CCC                     :0x5b5
18:26:02: Max Read Data Block Length  READ_BL_LEN       :0x9
18:26:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:26:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:26:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:26:02: DSR(driver stage register)  DSR_IMP           :0x0
18:26:02: Reserv2                                       :0x0
18:26:02: Device Size C_SIZE                            :0xedc8
18:26:02: Reserv3                                       :0x0
18:26:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:26:02: Erase Sector Size SECTOR_SIZE                 :0x7f
18:26:02: Write Protect Group Size WP_GRP_SIZE          :0x0
18:26:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:26:02: Reserv4                                       :0x0
18:26:02: Write Speed Factor R2W_FACTOR                 :0x2
18:26:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:26:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:26:02: FILE_FORMAT_GRP                               :0x0
18:26:02: COPY flag                                     :0x1
18:26:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:26:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:26:02: File_Format                                   :0x0
18:26:02: CRC                                           :0x0
18:26:02: ####CSD Registe Values####  

18:26:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:26:02: ProductSerialNumber = 0x23482900
18:26:02: CardMaximumLBA      = 0x3b72400
18:26:02: CardCapacity        = 32G
18:26:02: Is card secure      = 0
18:26:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:26:02: [DVTCommonLib]###  LogicalWrite called
18:26:04: [ WriteLba(0x2DB07CD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1449 ] 
18:26:04: [DVTCommonLib]###  LogicalWrite Completed 

18:26:04: [DVTCommonLib]###  LogicalRead called
18:26:05: [ ReadLba(0x2DB07CD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1450 ] 
18:26:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:26:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:26:05: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 153 times 

18:26:05: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:26:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:26:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1451 ] 
18:26:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:26:05: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:26:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:26:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:26:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:26:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:26:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C510>, <py_sfcl.CommandDataDefinition object at 0x06823E40>) , Command count = 1452 ] 
18:26:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:26:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068237E0>, <py_sfcl.CommandDataDefinition object at 0x06823180>) , Command count = 1453 ] 
18:26:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:26:05: [ SetCardRCA(0x1, 0xD555) , Command count = 1454 ] 
18:26:05: [DVTCommonLib]### Identification :Idenfication of card completed 

18:26:05: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:26:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:26:05: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:26:05: [ SetBusWidth(0x1) , Command count = 1455 ] 
18:26:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:26:05: ####CSD Registe 2.0 Values####
18:26:05: CSD_STRUCTURE                                 :0x1
18:26:05: Reserv1                                       :0x0
18:26:05: Time Access 1 TAAC                            :0xe
18:26:05: Time Access 2 NSAC*100                        :0x0
18:26:05: Data Transfer Rate TRAN_SPEED                 :0x32
18:26:05: Card Command Classess CCC                     :0x5b5
18:26:05: Max Read Data Block Length  READ_BL_LEN       :0x9
18:26:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:26:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:26:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:26:05: DSR(driver stage register)  DSR_IMP           :0x0
18:26:05: Reserv2                                       :0x0
18:26:05: Device Size C_SIZE                            :0xedc8
18:26:05: Reserv3                                       :0x0
18:26:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:26:05: Erase Sector Size SECTOR_SIZE                 :0x7f
18:26:05: Write Protect Group Size WP_GRP_SIZE          :0x0
18:26:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:26:05: Reserv4                                       :0x0
18:26:05: Write Speed Factor R2W_FACTOR                 :0x2
18:26:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:26:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:26:05: FILE_FORMAT_GRP                               :0x0
18:26:05: COPY flag                                     :0x1
18:26:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:26:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:26:05: File_Format                                   :0x0
18:26:05: CRC                                           :0x0
18:26:05: ####CSD Registe Values####  

18:26:05: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:26:05: ProductSerialNumber = 0x23482900
18:26:05: CardMaximumLBA      = 0x3b72400
18:26:05: CardCapacity        = 32G
18:26:05: Is card secure      = 0
18:26:05: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:26:05: [DVTCommonLib]###  LogicalWrite called
18:26:07: [ WriteLba(0x242770A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1456 ] 
18:26:07: [DVTCommonLib]###  LogicalWrite Completed 

18:26:07: [DVTCommonLib]###  LogicalRead called
18:26:09: [ ReadLba(0x242770A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1457 ] 
18:26:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:26:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:26:09: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 154 times 

18:26:09: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:26:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:26:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1458 ] 
18:26:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:26:09: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:26:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:26:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:26:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:26:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:26:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1CF0>, <py_sfcl.CommandDataDefinition object at 0x0682C420>) , Command count = 1459 ] 
18:26:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:26:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823390>, <py_sfcl.CommandDataDefinition object at 0x06823E10>) , Command count = 1460 ] 
18:26:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:26:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1461 ] 
18:26:09: [DVTCommonLib]### Identification :Idenfication of card completed 

18:26:09: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:26:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:26:09: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:26:09: [ SetBusWidth(0x1) , Command count = 1462 ] 
18:26:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:26:09: ####CSD Registe 2.0 Values####
18:26:09: CSD_STRUCTURE                                 :0x1
18:26:09: Reserv1                                       :0x0
18:26:09: Time Access 1 TAAC                            :0xe
18:26:09: Time Access 2 NSAC*100                        :0x0
18:26:09: Data Transfer Rate TRAN_SPEED                 :0x32
18:26:09: Card Command Classess CCC                     :0x5b5
18:26:09: Max Read Data Block Length  READ_BL_LEN       :0x9
18:26:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:26:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:26:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:26:09: DSR(driver stage register)  DSR_IMP           :0x0
18:26:09: Reserv2                                       :0x0
18:26:09: Device Size C_SIZE                            :0xedc8
18:26:09: Reserv3                                       :0x0
18:26:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:26:09: Erase Sector Size SECTOR_SIZE                 :0x7f
18:26:09: Write Protect Group Size WP_GRP_SIZE          :0x0
18:26:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:26:09: Reserv4                                       :0x0
18:26:09: Write Speed Factor R2W_FACTOR                 :0x2
18:26:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:26:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:26:09: FILE_FORMAT_GRP                               :0x0
18:26:09: COPY flag                                     :0x1
18:26:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:26:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:26:09: File_Format                                   :0x0
18:26:09: CRC                                           :0x0
18:26:09: ####CSD Registe Values####  

18:26:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:26:09: ProductSerialNumber = 0x23482900
18:26:09: CardMaximumLBA      = 0x3b72400
18:26:09: CardCapacity        = 32G
18:26:09: Is card secure      = 0
18:26:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:26:09: [DVTCommonLib]###  LogicalWrite called
18:26:10: [ WriteLba(0x3770957, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1463 ] 
18:26:10: [DVTCommonLib]###  LogicalWrite Completed 

18:26:10: [DVTCommonLib]###  LogicalRead called
18:26:12: [ ReadLba(0x3770957, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1464 ] 
18:26:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:26:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:26:12: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 155 times 

18:26:12: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:26:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:26:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1465 ] 
18:26:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:26:12: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:26:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:26:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:26:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:26:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:26:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068231E0>, <py_sfcl.CommandDataDefinition object at 0x06823150>) , Command count = 1466 ] 
18:26:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:26:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C300>, <py_sfcl.CommandDataDefinition object at 0x068230C0>) , Command count = 1467 ] 
18:26:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:26:12: [ SetCardRCA(0x1, 0xD555) , Command count = 1468 ] 
18:26:12: [DVTCommonLib]### Identification :Idenfication of card completed 

18:26:12: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:26:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:26:12: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:26:12: [ SetBusWidth(0x1) , Command count = 1469 ] 
18:26:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:26:12: ####CSD Registe 2.0 Values####
18:26:12: CSD_STRUCTURE                                 :0x1
18:26:12: Reserv1                                       :0x0
18:26:12: Time Access 1 TAAC                            :0xe
18:26:12: Time Access 2 NSAC*100                        :0x0
18:26:12: Data Transfer Rate TRAN_SPEED                 :0x32
18:26:12: Card Command Classess CCC                     :0x5b5
18:26:12: Max Read Data Block Length  READ_BL_LEN       :0x9
18:26:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:26:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:26:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:26:12: DSR(driver stage register)  DSR_IMP           :0x0
18:26:12: Reserv2                                       :0x0
18:26:12: Device Size C_SIZE                            :0xedc8
18:26:12: Reserv3                                       :0x0
18:26:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:26:12: Erase Sector Size SECTOR_SIZE                 :0x7f
18:26:12: Write Protect Group Size WP_GRP_SIZE          :0x0
18:26:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:26:12: Reserv4                                       :0x0
18:26:12: Write Speed Factor R2W_FACTOR                 :0x2
18:26:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:26:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:26:12: FILE_FORMAT_GRP                               :0x0
18:26:12: COPY flag                                     :0x1
18:26:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:26:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:26:12: File_Format                                   :0x0
18:26:12: CRC                                           :0x0
18:26:12: ####CSD Registe Values####  

18:26:12: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:26:12: ProductSerialNumber = 0x23482900
18:26:12: CardMaximumLBA      = 0x3b72400
18:26:12: CardCapacity        = 32G
18:26:12: Is card secure      = 0
18:26:12: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:26:12: [DVTCommonLib]###  LogicalWrite called
18:26:14: [ WriteLba(0x18297F7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1470 ] 
18:26:14: [DVTCommonLib]###  LogicalWrite Completed 

18:26:14: [DVTCommonLib]###  LogicalRead called
18:26:15: [ ReadLba(0x18297F7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1471 ] 
18:26:15: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:26:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:26:15: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 156 times 

18:26:15: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:26:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:26:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1472 ] 
18:26:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:26:16: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:26:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:26:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:26:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:26:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:26:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C1E10>, <py_sfcl.CommandDataDefinition object at 0x06823420>) , Command count = 1473 ] 
18:26:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:26:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C5D0>, <py_sfcl.CommandDataDefinition object at 0x06823570>) , Command count = 1474 ] 
18:26:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:26:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1475 ] 
18:26:16: [DVTCommonLib]### Identification :Idenfication of card completed 

18:26:16: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:26:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:26:16: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:26:16: [ SetBusWidth(0x1) , Command count = 1476 ] 
18:26:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:26:16: ####CSD Registe 2.0 Values####
18:26:16: CSD_STRUCTURE                                 :0x1
18:26:16: Reserv1                                       :0x0
18:26:16: Time Access 1 TAAC                            :0xe
18:26:16: Time Access 2 NSAC*100                        :0x0
18:26:16: Data Transfer Rate TRAN_SPEED                 :0x32
18:26:16: Card Command Classess CCC                     :0x5b5
18:26:16: Max Read Data Block Length  READ_BL_LEN       :0x9
18:26:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:26:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:26:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:26:16: DSR(driver stage register)  DSR_IMP           :0x0
18:26:16: Reserv2                                       :0x0
18:26:16: Device Size C_SIZE                            :0xedc8
18:26:16: Reserv3                                       :0x0
18:26:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:26:16: Erase Sector Size SECTOR_SIZE                 :0x7f
18:26:16: Write Protect Group Size WP_GRP_SIZE          :0x0
18:26:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:26:16: Reserv4                                       :0x0
18:26:16: Write Speed Factor R2W_FACTOR                 :0x2
18:26:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:26:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:26:16: FILE_FORMAT_GRP                               :0x0
18:26:16: COPY flag                                     :0x1
18:26:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:26:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:26:16: File_Format                                   :0x0
18:26:16: CRC                                           :0x0
18:26:16: ####CSD Registe Values####  

18:26:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:26:16: ProductSerialNumber = 0x23482900
18:26:16: CardMaximumLBA      = 0x3b72400
18:26:16: CardCapacity        = 32G
18:26:16: Is card secure      = 0
18:26:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:26:16: [DVTCommonLib]###  LogicalWrite called
18:26:17: [ WriteLba(0x35597F7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1477 ] 
18:26:17: [DVTCommonLib]###  LogicalWrite Completed 

18:26:17: [DVTCommonLib]###  LogicalRead called
18:26:19: [ ReadLba(0x35597F7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1478 ] 
18:26:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:26:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:26:19: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 157 times 

18:26:19: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:26:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:26:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1479 ] 
18:26:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:26:19: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:26:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:26:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:26:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:26:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:26:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068232A0>, <py_sfcl.CommandDataDefinition object at 0x068237B0>) , Command count = 1480 ] 
18:26:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:26:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D3F0>, <py_sfcl.CommandDataDefinition object at 0x068239F0>) , Command count = 1481 ] 
18:26:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:26:19: [ SetCardRCA(0x1, 0xD555) , Command count = 1482 ] 
18:26:19: [DVTCommonLib]### Identification :Idenfication of card completed 

18:26:19: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:26:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:26:19: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:26:19: [ SetBusWidth(0x1) , Command count = 1483 ] 
18:26:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:26:19: ####CSD Registe 2.0 Values####
18:26:19: CSD_STRUCTURE                                 :0x1
18:26:19: Reserv1                                       :0x0
18:26:19: Time Access 1 TAAC                            :0xe
18:26:19: Time Access 2 NSAC*100                        :0x0
18:26:19: Data Transfer Rate TRAN_SPEED                 :0x32
18:26:19: Card Command Classess CCC                     :0x5b5
18:26:19: Max Read Data Block Length  READ_BL_LEN       :0x9
18:26:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:26:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:26:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:26:19: DSR(driver stage register)  DSR_IMP           :0x0
18:26:19: Reserv2                                       :0x0
18:26:19: Device Size C_SIZE                            :0xedc8
18:26:19: Reserv3                                       :0x0
18:26:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:26:19: Erase Sector Size SECTOR_SIZE                 :0x7f
18:26:19: Write Protect Group Size WP_GRP_SIZE          :0x0
18:26:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:26:19: Reserv4                                       :0x0
18:26:19: Write Speed Factor R2W_FACTOR                 :0x2
18:26:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:26:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:26:19: FILE_FORMAT_GRP                               :0x0
18:26:19: COPY flag                                     :0x1
18:26:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:26:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:26:19: File_Format                                   :0x0
18:26:19: CRC                                           :0x0
18:26:19: ####CSD Registe Values####  

18:26:19: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:26:19: ProductSerialNumber = 0x23482900
18:26:19: CardMaximumLBA      = 0x3b72400
18:26:19: CardCapacity        = 32G
18:26:19: Is card secure      = 0
18:26:19: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:26:19: [DVTCommonLib]###  LogicalWrite called
18:26:21: [ WriteLba(0xE8D59C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1484 ] 
18:26:21: [DVTCommonLib]###  LogicalWrite Completed 

18:26:21: [DVTCommonLib]###  LogicalRead called
18:26:22: [ ReadLba(0xE8D59C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1485 ] 
18:26:22: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:26:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:26:22: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 158 times 

18:26:22: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:26:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:26:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1486 ] 
18:26:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:26:22: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:26:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:26:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:26:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:26:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:26:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C0C0>, <py_sfcl.CommandDataDefinition object at 0x0682C150>) , Command count = 1487 ] 
18:26:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:26:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823660>, <py_sfcl.CommandDataDefinition object at 0x06823A50>) , Command count = 1488 ] 
18:26:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:26:22: [ SetCardRCA(0x1, 0xD555) , Command count = 1489 ] 
18:26:22: [DVTCommonLib]### Identification :Idenfication of card completed 

18:26:22: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:26:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:26:22: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:26:22: [ SetBusWidth(0x1) , Command count = 1490 ] 
18:26:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:26:22: ####CSD Registe 2.0 Values####
18:26:22: CSD_STRUCTURE                                 :0x1
18:26:22: Reserv1                                       :0x0
18:26:22: Time Access 1 TAAC                            :0xe
18:26:22: Time Access 2 NSAC*100                        :0x0
18:26:22: Data Transfer Rate TRAN_SPEED                 :0x32
18:26:22: Card Command Classess CCC                     :0x5b5
18:26:22: Max Read Data Block Length  READ_BL_LEN       :0x9
18:26:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:26:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:26:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:26:22: DSR(driver stage register)  DSR_IMP           :0x0
18:26:22: Reserv2                                       :0x0
18:26:22: Device Size C_SIZE                            :0xedc8
18:26:22: Reserv3                                       :0x0
18:26:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:26:22: Erase Sector Size SECTOR_SIZE                 :0x7f
18:26:22: Write Protect Group Size WP_GRP_SIZE          :0x0
18:26:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:26:22: Reserv4                                       :0x0
18:26:22: Write Speed Factor R2W_FACTOR                 :0x2
18:26:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:26:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:26:22: FILE_FORMAT_GRP                               :0x0
18:26:22: COPY flag                                     :0x1
18:26:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:26:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:26:22: File_Format                                   :0x0
18:26:22: CRC                                           :0x0
18:26:22: ####CSD Registe Values####  

18:26:22: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:26:22: ProductSerialNumber = 0x23482900
18:26:22: CardMaximumLBA      = 0x3b72400
18:26:22: CardCapacity        = 32G
18:26:22: Is card secure      = 0
18:26:22: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:26:22: [DVTCommonLib]###  LogicalWrite called
18:26:24: [ WriteLba(0x31A64F8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1491 ] 
18:26:24: [DVTCommonLib]###  LogicalWrite Completed 

18:26:24: [DVTCommonLib]###  LogicalRead called
18:26:26: [ ReadLba(0x31A64F8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1492 ] 
18:26:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:26:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:26:26: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 159 times 

18:26:26: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:26:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:26:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1493 ] 
18:26:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:26:26: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:26:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:26:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:26:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:26:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:26:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823870>, <py_sfcl.CommandDataDefinition object at 0x06823D20>) , Command count = 1494 ] 
18:26:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:26:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067C7AB0>, <py_sfcl.CommandDataDefinition object at 0x0682C030>) , Command count = 1495 ] 
18:26:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:26:26: [ SetCardRCA(0x1, 0xD555) , Command count = 1496 ] 
18:26:26: [DVTCommonLib]### Identification :Idenfication of card completed 

18:26:26: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:26:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:26:26: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:26:26: [ SetBusWidth(0x1) , Command count = 1497 ] 
18:26:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:26:26: ####CSD Registe 2.0 Values####
18:26:26: CSD_STRUCTURE                                 :0x1
18:26:26: Reserv1                                       :0x0
18:26:26: Time Access 1 TAAC                            :0xe
18:26:26: Time Access 2 NSAC*100                        :0x0
18:26:26: Data Transfer Rate TRAN_SPEED                 :0x32
18:26:26: Card Command Classess CCC                     :0x5b5
18:26:26: Max Read Data Block Length  READ_BL_LEN       :0x9
18:26:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:26:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:26:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:26:26: DSR(driver stage register)  DSR_IMP           :0x0
18:26:26: Reserv2                                       :0x0
18:26:26: Device Size C_SIZE                            :0xedc8
18:26:26: Reserv3                                       :0x0
18:26:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:26:26: Erase Sector Size SECTOR_SIZE                 :0x7f
18:26:26: Write Protect Group Size WP_GRP_SIZE          :0x0
18:26:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:26:26: Reserv4                                       :0x0
18:26:26: Write Speed Factor R2W_FACTOR                 :0x2
18:26:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:26:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:26:26: FILE_FORMAT_GRP                               :0x0
18:26:26: COPY flag                                     :0x1
18:26:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:26:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:26:26: File_Format                                   :0x0
18:26:26: CRC                                           :0x0
18:26:26: ####CSD Registe Values####  

18:26:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:26:26: ProductSerialNumber = 0x23482900
18:26:26: CardMaximumLBA      = 0x3b72400
18:26:26: CardCapacity        = 32G
18:26:26: Is card secure      = 0
18:26:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:26:26: [DVTCommonLib]###  LogicalWrite called
18:26:28: [ WriteLba(0x1B72194, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1498 ] 
18:26:28: [DVTCommonLib]###  LogicalWrite Completed 

18:26:28: [DVTCommonLib]###  LogicalRead called
18:26:29: [ ReadLba(0x1B72194, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1499 ] 
18:26:29: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:26:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:26:29: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 160 times 

18:26:29: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:26:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:26:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1500 ] 
18:26:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:26:29: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:26:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:26:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:26:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:26:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:26:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06823960>, <py_sfcl.CommandDataDefinition object at 0x06823F90>) , Command count = 1501 ] 
18:26:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:26:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C2A0>, <py_sfcl.CommandDataDefinition object at 0x0682C060>) , Command count = 1502 ] 
18:26:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:26:29: [ SetCardRCA(0x1, 0xD555) , Command count = 1503 ] 
18:26:29: [DVTCommonLib]### Identification :Idenfication of card completed 

18:26:29: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:26:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:26:29: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:26:29: [ SetBusWidth(0x1) , Command count = 1504 ] 
18:26:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:26:29: ####CSD Registe 2.0 Values####
18:26:29: CSD_STRUCTURE                                 :0x1
18:26:29: Reserv1                                       :0x0
18:26:29: Time Access 1 TAAC                            :0xe
18:26:29: Time Access 2 NSAC*100                        :0x0
18:26:29: Data Transfer Rate TRAN_SPEED                 :0x32
18:26:29: Card Command Classess CCC                     :0x5b5
18:26:29: Max Read Data Block Length  READ_BL_LEN       :0x9
18:26:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:26:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:26:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:26:29: DSR(driver stage register)  DSR_IMP           :0x0
18:26:29: Reserv2                                       :0x0
18:26:29: Device Size C_SIZE                            :0xedc8
18:26:29: Reserv3                                       :0x0
18:26:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:26:29: Erase Sector Size SECTOR_SIZE                 :0x7f
18:26:29: Write Protect Group Size WP_GRP_SIZE          :0x0
18:26:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:26:29: Reserv4                                       :0x0
18:26:29: Write Speed Factor R2W_FACTOR                 :0x2
18:26:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:26:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:26:29: FILE_FORMAT_GRP                               :0x0
18:26:29: COPY flag                                     :0x1
18:26:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:26:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:26:29: File_Format                                   :0x0
18:26:29: CRC                                           :0x0
18:26:29: ####CSD Registe Values####  

18:26:29: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:26:29: ProductSerialNumber = 0x23482900
18:26:29: CardMaximumLBA      = 0x3b72400
18:26:29: CardCapacity        = 32G
18:26:29: Is card secure      = 0
18:26:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:26:29: [DVTCommonLib]###  LogicalWrite called
18:26:31: [ WriteLba(0xDE6D4B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1505 ] 
18:26:31: [DVTCommonLib]###  LogicalWrite Completed 

18:26:31: [DVTCommonLib]###  LogicalRead called
18:26:33: [ ReadLba(0xDE6D4B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1506 ] 
18:26:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:26:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:26:33: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 161 times 

18:26:33: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:26:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:26:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1507 ] 
18:26:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:26:33: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:26:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:26:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:26:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:26:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:26:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C270>, <py_sfcl.CommandDataDefinition object at 0x0682C570>) , Command count = 1508 ] 
18:26:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:26:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682C690>, <py_sfcl.CommandDataDefinition object at 0x0682C720>) , Command count = 1509 ] 
18:26:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:26:33: [ SetCardRCA(0x1, 0xD555) , Command count = 1510 ] 
18:26:33: [DVTCommonLib]### Identification :Idenfication of card completed 

18:26:33: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:26:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:26:33: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:26:33: [ SetBusWidth(0x1) , Command count = 1511 ] 
18:26:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:26:33: ####CSD Registe 2.0 Values####
18:26:33: CSD_STRUCTURE                                 :0x1
18:26:33: Reserv1                                       :0x0
18:26:33: Time Access 1 TAAC                            :0xe
18:26:33: Time Access 2 NSAC*100                        :0x0
18:26:33: Data Transfer Rate TRAN_SPEED                 :0x32
18:26:33: Card Command Classess CCC                     :0x5b5
18:26:33: Max Read Data Block Length  READ_BL_LEN       :0x9
18:26:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:26:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:26:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:26:33: DSR(driver stage register)  DSR_IMP           :0x0
18:26:33: Reserv2                                       :0x0
18:26:33: Device Size C_SIZE                            :0xedc8
18:26:33: Reserv3                                       :0x0
18:26:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:26:33: Erase Sector Size SECTOR_SIZE                 :0x7f
18:26:33: Write Protect Group Size WP_GRP_SIZE          :0x0
18:26:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:26:33: Reserv4                                       :0x0
18:26:33: Write Speed Factor R2W_FACTOR                 :0x2
18:26:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:26:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:26:33: FILE_FORMAT_GRP                               :0x0
18:26:33: COPY flag                                     :0x1
18:26:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:26:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:26:33: File_Format                                   :0x0
18:26:33: CRC                                           :0x0
18:26:33: ####CSD Registe Values####  

18:26:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:26:33: ProductSerialNumber = 0x23482900
18:26:33: CardMaximumLBA      = 0x3b72400
18:26:33: CardCapacity        = 32G
18:26:33: Is card secure      = 0
18:26:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:26:33: [DVTCommonLib]###  LogicalWrite called
18:26:34: [ WriteLba(0x3AF0DA2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1512 ] 
18:26:34: [DVTCommonLib]###  LogicalWrite Completed 

18:26:34: [DVTCommonLib]###  LogicalRead called
18:26:36: [ ReadLba(0x3AF0DA2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1513 ] 
18:26:36: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:26:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:26:36: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 162 times 

18:26:36: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:26:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:26:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1514 ] 
18:26:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:26:36: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:26:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:26:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:26:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:26:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:26:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614BDB0>, <py_sfcl.CommandDataDefinition object at 0x0682C660>) , Command count = 1515 ] 
18:26:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:26:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CA80>, <py_sfcl.CommandDataDefinition object at 0x0682C840>) , Command count = 1516 ] 
18:26:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:26:36: [ SetCardRCA(0x1, 0xD555) , Command count = 1517 ] 
18:26:36: [DVTCommonLib]### Identification :Idenfication of card completed 

18:26:36: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:26:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:26:36: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:26:36: [ SetBusWidth(0x1) , Command count = 1518 ] 
18:26:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:26:36: ####CSD Registe 2.0 Values####
18:26:36: CSD_STRUCTURE                                 :0x1
18:26:36: Reserv1                                       :0x0
18:26:36: Time Access 1 TAAC                            :0xe
18:26:36: Time Access 2 NSAC*100                        :0x0
18:26:36: Data Transfer Rate TRAN_SPEED                 :0x32
18:26:36: Card Command Classess CCC                     :0x5b5
18:26:36: Max Read Data Block Length  READ_BL_LEN       :0x9
18:26:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:26:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:26:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:26:36: DSR(driver stage register)  DSR_IMP           :0x0
18:26:36: Reserv2                                       :0x0
18:26:36: Device Size C_SIZE                            :0xedc8
18:26:36: Reserv3                                       :0x0
18:26:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:26:36: Erase Sector Size SECTOR_SIZE                 :0x7f
18:26:36: Write Protect Group Size WP_GRP_SIZE          :0x0
18:26:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:26:36: Reserv4                                       :0x0
18:26:36: Write Speed Factor R2W_FACTOR                 :0x2
18:26:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:26:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:26:36: FILE_FORMAT_GRP                               :0x0
18:26:36: COPY flag                                     :0x1
18:26:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:26:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:26:36: File_Format                                   :0x0
18:26:36: CRC                                           :0x0
18:26:36: ####CSD Registe Values####  

18:26:36: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:26:36: ProductSerialNumber = 0x23482900
18:26:36: CardMaximumLBA      = 0x3b72400
18:26:36: CardCapacity        = 32G
18:26:36: Is card secure      = 0
18:26:36: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:26:36: [DVTCommonLib]###  LogicalWrite called
18:26:38: [ WriteLba(0x1E89521, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1519 ] 
18:26:38: [DVTCommonLib]###  LogicalWrite Completed 

18:26:38: [DVTCommonLib]###  LogicalRead called
18:26:39: [ ReadLba(0x1E89521, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1520 ] 
18:26:39: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:26:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:26:39: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 163 times 

18:26:39: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:26:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:26:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1521 ] 
18:26:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:26:39: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:26:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:26:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:26:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:26:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:26:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614BD50>, <py_sfcl.CommandDataDefinition object at 0x06168CF0>) , Command count = 1522 ] 
18:26:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:26:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CE40>, <py_sfcl.CommandDataDefinition object at 0x0682CA50>) , Command count = 1523 ] 
18:26:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:26:39: [ SetCardRCA(0x1, 0xD555) , Command count = 1524 ] 
18:26:40: [DVTCommonLib]### Identification :Idenfication of card completed 

18:26:40: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:26:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:26:40: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:26:40: [ SetBusWidth(0x1) , Command count = 1525 ] 
18:26:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:26:40: ####CSD Registe 2.0 Values####
18:26:40: CSD_STRUCTURE                                 :0x1
18:26:40: Reserv1                                       :0x0
18:26:40: Time Access 1 TAAC                            :0xe
18:26:40: Time Access 2 NSAC*100                        :0x0
18:26:40: Data Transfer Rate TRAN_SPEED                 :0x32
18:26:40: Card Command Classess CCC                     :0x5b5
18:26:40: Max Read Data Block Length  READ_BL_LEN       :0x9
18:26:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:26:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:26:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:26:40: DSR(driver stage register)  DSR_IMP           :0x0
18:26:40: Reserv2                                       :0x0
18:26:40: Device Size C_SIZE                            :0xedc8
18:26:40: Reserv3                                       :0x0
18:26:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:26:40: Erase Sector Size SECTOR_SIZE                 :0x7f
18:26:40: Write Protect Group Size WP_GRP_SIZE          :0x0
18:26:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:26:40: Reserv4                                       :0x0
18:26:40: Write Speed Factor R2W_FACTOR                 :0x2
18:26:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:26:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:26:40: FILE_FORMAT_GRP                               :0x0
18:26:40: COPY flag                                     :0x1
18:26:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:26:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:26:40: File_Format                                   :0x0
18:26:40: CRC                                           :0x0
18:26:40: ####CSD Registe Values####  

18:26:40: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:26:40: ProductSerialNumber = 0x23482900
18:26:40: CardMaximumLBA      = 0x3b72400
18:26:40: CardCapacity        = 32G
18:26:40: Is card secure      = 0
18:26:40: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:26:40: [DVTCommonLib]###  LogicalWrite called
18:26:41: [ WriteLba(0xF7373A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1526 ] 
18:26:41: [DVTCommonLib]###  LogicalWrite Completed 

18:26:41: [DVTCommonLib]###  LogicalRead called
18:26:43: [ ReadLba(0xF7373A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1527 ] 
18:26:43: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:26:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:26:43: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 164 times 

18:26:43: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:26:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:26:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1528 ] 
18:26:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:26:43: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:26:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:26:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:26:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:26:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:26:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06010AE0>, <py_sfcl.CommandDataDefinition object at 0x0616E1E0>) , Command count = 1529 ] 
18:26:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:26:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D1B0>, <py_sfcl.CommandDataDefinition object at 0x0682D2A0>) , Command count = 1530 ] 
18:26:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:26:43: [ SetCardRCA(0x1, 0xD555) , Command count = 1531 ] 
18:26:43: [DVTCommonLib]### Identification :Idenfication of card completed 

18:26:43: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:26:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:26:43: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:26:43: [ SetBusWidth(0x1) , Command count = 1532 ] 
18:26:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:26:43: ####CSD Registe 2.0 Values####
18:26:43: CSD_STRUCTURE                                 :0x1
18:26:43: Reserv1                                       :0x0
18:26:43: Time Access 1 TAAC                            :0xe
18:26:43: Time Access 2 NSAC*100                        :0x0
18:26:43: Data Transfer Rate TRAN_SPEED                 :0x32
18:26:43: Card Command Classess CCC                     :0x5b5
18:26:43: Max Read Data Block Length  READ_BL_LEN       :0x9
18:26:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:26:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:26:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:26:43: DSR(driver stage register)  DSR_IMP           :0x0
18:26:43: Reserv2                                       :0x0
18:26:43: Device Size C_SIZE                            :0xedc8
18:26:43: Reserv3                                       :0x0
18:26:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:26:43: Erase Sector Size SECTOR_SIZE                 :0x7f
18:26:43: Write Protect Group Size WP_GRP_SIZE          :0x0
18:26:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:26:43: Reserv4                                       :0x0
18:26:43: Write Speed Factor R2W_FACTOR                 :0x2
18:26:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:26:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:26:43: FILE_FORMAT_GRP                               :0x0
18:26:43: COPY flag                                     :0x1
18:26:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:26:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:26:43: File_Format                                   :0x0
18:26:43: CRC                                           :0x0
18:26:43: ####CSD Registe Values####  

18:26:43: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:26:43: ProductSerialNumber = 0x23482900
18:26:43: CardMaximumLBA      = 0x3b72400
18:26:43: CardCapacity        = 32G
18:26:43: Is card secure      = 0
18:26:43: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:26:43: [DVTCommonLib]###  LogicalWrite called
18:26:45: [ WriteLba(0xD8D841, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1533 ] 
18:26:45: [DVTCommonLib]###  LogicalWrite Completed 

18:26:45: [DVTCommonLib]###  LogicalRead called
18:26:46: [ ReadLba(0xD8D841, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1534 ] 
18:26:46: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:26:46: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:26:46: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 165 times 

18:26:46: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:26:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:26:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1535 ] 
18:26:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:26:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:26:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:26:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:26:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:26:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:26:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682CF60>, <py_sfcl.CommandDataDefinition object at 0x01E1A540>) , Command count = 1536 ] 
18:26:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:26:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682D330>, <py_sfcl.CommandDataDefinition object at 0x0616ECC0>) , Command count = 1537 ] 
18:26:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:26:46: [ SetCardRCA(0x1, 0xD555) , Command count = 1538 ] 
18:26:46: [DVTCommonLib]### Identification :Idenfication of card completed 

18:26:46: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:26:46: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:26:46: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:26:46: [ SetBusWidth(0x1) , Command count = 1539 ] 
18:26:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:26:46: ####CSD Registe 2.0 Values####
18:26:46: CSD_STRUCTURE                                 :0x1
18:26:46: Reserv1                                       :0x0
18:26:46: Time Access 1 TAAC                            :0xe
18:26:46: Time Access 2 NSAC*100                        :0x0
18:26:46: Data Transfer Rate TRAN_SPEED                 :0x32
18:26:46: Card Command Classess CCC                     :0x5b5
18:26:46: Max Read Data Block Length  READ_BL_LEN       :0x9
18:26:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:26:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:26:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:26:46: DSR(driver stage register)  DSR_IMP           :0x0
18:26:46: Reserv2                                       :0x0
18:26:46: Device Size C_SIZE                            :0xedc8
18:26:46: Reserv3                                       :0x0
18:26:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:26:46: Erase Sector Size SECTOR_SIZE                 :0x7f
18:26:46: Write Protect Group Size WP_GRP_SIZE          :0x0
18:26:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:26:46: Reserv4                                       :0x0
18:26:46: Write Speed Factor R2W_FACTOR                 :0x2
18:26:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:26:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:26:46: FILE_FORMAT_GRP                               :0x0
18:26:46: COPY flag                                     :0x1
18:26:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:26:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:26:46: File_Format                                   :0x0
18:26:46: CRC                                           :0x0
18:26:46: ####CSD Registe Values####  

18:26:46: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:26:46: ProductSerialNumber = 0x23482900
18:26:46: CardMaximumLBA      = 0x3b72400
18:26:46: CardCapacity        = 32G
18:26:46: Is card secure      = 0
18:26:46: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:26:46: [DVTCommonLib]###  LogicalWrite called
18:26:48: [ WriteLba(0x1924AAF, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1540 ] 
18:26:48: [DVTCommonLib]###  LogicalWrite Completed 

18:26:48: [DVTCommonLib]###  LogicalRead called
18:26:50: [ ReadLba(0x1924AAF, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1541 ] 
18:26:50: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:26:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:26:50: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 166 times 

18:26:50: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:26:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:26:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1542 ] 
18:26:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:26:50: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:26:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:26:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:26:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:26:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:26:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068238D0>, <py_sfcl.CommandDataDefinition object at 0x0616E900>) , Command count = 1543 ] 
18:26:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:26:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614B180>, <py_sfcl.CommandDataDefinition object at 0x0682D540>) , Command count = 1544 ] 
18:26:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:26:50: [ SetCardRCA(0x1, 0xD555) , Command count = 1545 ] 
18:26:50: [DVTCommonLib]### Identification :Idenfication of card completed 

18:26:50: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:26:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:26:50: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:26:50: [ SetBusWidth(0x1) , Command count = 1546 ] 
18:26:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:26:50: ####CSD Registe 2.0 Values####
18:26:50: CSD_STRUCTURE                                 :0x1
18:26:50: Reserv1                                       :0x0
18:26:50: Time Access 1 TAAC                            :0xe
18:26:50: Time Access 2 NSAC*100                        :0x0
18:26:50: Data Transfer Rate TRAN_SPEED                 :0x32
18:26:50: Card Command Classess CCC                     :0x5b5
18:26:50: Max Read Data Block Length  READ_BL_LEN       :0x9
18:26:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:26:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:26:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:26:50: DSR(driver stage register)  DSR_IMP           :0x0
18:26:50: Reserv2                                       :0x0
18:26:50: Device Size C_SIZE                            :0xedc8
18:26:50: Reserv3                                       :0x0
18:26:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:26:50: Erase Sector Size SECTOR_SIZE                 :0x7f
18:26:50: Write Protect Group Size WP_GRP_SIZE          :0x0
18:26:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:26:50: Reserv4                                       :0x0
18:26:50: Write Speed Factor R2W_FACTOR                 :0x2
18:26:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:26:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:26:50: FILE_FORMAT_GRP                               :0x0
18:26:50: COPY flag                                     :0x1
18:26:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:26:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:26:50: File_Format                                   :0x0
18:26:50: CRC                                           :0x0
18:26:50: ####CSD Registe Values####  

18:26:50: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:26:50: ProductSerialNumber = 0x23482900
18:26:50: CardMaximumLBA      = 0x3b72400
18:26:50: CardCapacity        = 32G
18:26:50: Is card secure      = 0
18:26:50: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:26:50: [DVTCommonLib]###  LogicalWrite called
18:26:51: [ WriteLba(0x1839E66, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1547 ] 
18:26:51: [DVTCommonLib]###  LogicalWrite Completed 

18:26:51: [DVTCommonLib]###  LogicalRead called
18:26:53: [ ReadLba(0x1839E66, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1548 ] 
18:26:53: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:26:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:26:53: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 167 times 

18:26:53: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:26:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:26:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1549 ] 
18:26:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:26:53: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:26:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:26:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:26:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:26:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:26:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616EF90>, <py_sfcl.CommandDataDefinition object at 0x0614AA20>) , Command count = 1550 ] 
18:26:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:26:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5210>, <py_sfcl.CommandDataDefinition object at 0x0682D7E0>) , Command count = 1551 ] 
18:26:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:26:53: [ SetCardRCA(0x1, 0xD555) , Command count = 1552 ] 
18:26:53: [DVTCommonLib]### Identification :Idenfication of card completed 

18:26:53: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:26:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:26:53: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:26:53: [ SetBusWidth(0x1) , Command count = 1553 ] 
18:26:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:26:53: ####CSD Registe 2.0 Values####
18:26:53: CSD_STRUCTURE                                 :0x1
18:26:53: Reserv1                                       :0x0
18:26:53: Time Access 1 TAAC                            :0xe
18:26:53: Time Access 2 NSAC*100                        :0x0
18:26:53: Data Transfer Rate TRAN_SPEED                 :0x32
18:26:53: Card Command Classess CCC                     :0x5b5
18:26:53: Max Read Data Block Length  READ_BL_LEN       :0x9
18:26:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:26:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:26:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:26:53: DSR(driver stage register)  DSR_IMP           :0x0
18:26:53: Reserv2                                       :0x0
18:26:53: Device Size C_SIZE                            :0xedc8
18:26:53: Reserv3                                       :0x0
18:26:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:26:53: Erase Sector Size SECTOR_SIZE                 :0x7f
18:26:53: Write Protect Group Size WP_GRP_SIZE          :0x0
18:26:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:26:53: Reserv4                                       :0x0
18:26:53: Write Speed Factor R2W_FACTOR                 :0x2
18:26:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:26:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:26:53: FILE_FORMAT_GRP                               :0x0
18:26:53: COPY flag                                     :0x1
18:26:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:26:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:26:53: File_Format                                   :0x0
18:26:53: CRC                                           :0x0
18:26:53: ####CSD Registe Values####  

18:26:53: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:26:53: ProductSerialNumber = 0x23482900
18:26:53: CardMaximumLBA      = 0x3b72400
18:26:53: CardCapacity        = 32G
18:26:53: Is card secure      = 0
18:26:53: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:26:53: [DVTCommonLib]###  LogicalWrite called
18:26:55: [ WriteLba(0x1C417A3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1554 ] 
18:26:55: [DVTCommonLib]###  LogicalWrite Completed 

18:26:55: [DVTCommonLib]###  LogicalRead called
18:26:56: [ ReadLba(0x1C417A3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1555 ] 
18:26:56: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:26:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:26:56: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 168 times 

18:26:56: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:26:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:26:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1556 ] 
18:26:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:26:57: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:26:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:26:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:26:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:26:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:26:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0614A300>, <py_sfcl.CommandDataDefinition object at 0x061A5C60>) , Command count = 1557 ] 
18:26:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:26:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061A5CF0>, <py_sfcl.CommandDataDefinition object at 0x0682DA80>) , Command count = 1558 ] 
18:26:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:26:57: [ SetCardRCA(0x1, 0xD555) , Command count = 1559 ] 
18:26:57: [DVTCommonLib]### Identification :Idenfication of card completed 

18:26:57: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:26:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:26:57: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:26:57: [ SetBusWidth(0x1) , Command count = 1560 ] 
18:26:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:26:57: ####CSD Registe 2.0 Values####
18:26:57: CSD_STRUCTURE                                 :0x1
18:26:57: Reserv1                                       :0x0
18:26:57: Time Access 1 TAAC                            :0xe
18:26:57: Time Access 2 NSAC*100                        :0x0
18:26:57: Data Transfer Rate TRAN_SPEED                 :0x32
18:26:57: Card Command Classess CCC                     :0x5b5
18:26:57: Max Read Data Block Length  READ_BL_LEN       :0x9
18:26:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:26:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:26:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:26:57: DSR(driver stage register)  DSR_IMP           :0x0
18:26:57: Reserv2                                       :0x0
18:26:57: Device Size C_SIZE                            :0xedc8
18:26:57: Reserv3                                       :0x0
18:26:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:26:57: Erase Sector Size SECTOR_SIZE                 :0x7f
18:26:57: Write Protect Group Size WP_GRP_SIZE          :0x0
18:26:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:26:57: Reserv4                                       :0x0
18:26:57: Write Speed Factor R2W_FACTOR                 :0x2
18:26:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:26:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:26:57: FILE_FORMAT_GRP                               :0x0
18:26:57: COPY flag                                     :0x1
18:26:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:26:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:26:57: File_Format                                   :0x0
18:26:57: CRC                                           :0x0
18:26:57: ####CSD Registe Values####  

18:26:57: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:26:57: ProductSerialNumber = 0x23482900
18:26:57: CardMaximumLBA      = 0x3b72400
18:26:57: CardCapacity        = 32G
18:26:57: Is card secure      = 0
18:26:57: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:26:57: [DVTCommonLib]###  LogicalWrite called
18:26:58: [ WriteLba(0x319CE83, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1561 ] 
18:26:58: [DVTCommonLib]###  LogicalWrite Completed 

18:26:58: [DVTCommonLib]###  LogicalRead called
18:27:00: [ ReadLba(0x319CE83, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1562 ] 
18:27:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:27:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:27:00: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 169 times 

18:27:00: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:27:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:27:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1563 ] 
18:27:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:27:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:27:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:27:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:27:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:27:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:27:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061640F0>, <py_sfcl.CommandDataDefinition object at 0x066FF450>) , Command count = 1564 ] 
18:27:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:27:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067AF060>, <py_sfcl.CommandDataDefinition object at 0x0682DB40>) , Command count = 1565 ] 
18:27:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:27:00: [ SetCardRCA(0x1, 0xD555) , Command count = 1566 ] 
18:27:00: [DVTCommonLib]### Identification :Idenfication of card completed 

18:27:00: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:27:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:27:00: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:27:00: [ SetBusWidth(0x1) , Command count = 1567 ] 
18:27:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:27:00: ####CSD Registe 2.0 Values####
18:27:00: CSD_STRUCTURE                                 :0x1
18:27:00: Reserv1                                       :0x0
18:27:00: Time Access 1 TAAC                            :0xe
18:27:00: Time Access 2 NSAC*100                        :0x0
18:27:00: Data Transfer Rate TRAN_SPEED                 :0x32
18:27:00: Card Command Classess CCC                     :0x5b5
18:27:00: Max Read Data Block Length  READ_BL_LEN       :0x9
18:27:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:27:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:27:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:27:00: DSR(driver stage register)  DSR_IMP           :0x0
18:27:00: Reserv2                                       :0x0
18:27:00: Device Size C_SIZE                            :0xedc8
18:27:00: Reserv3                                       :0x0
18:27:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:27:00: Erase Sector Size SECTOR_SIZE                 :0x7f
18:27:00: Write Protect Group Size WP_GRP_SIZE          :0x0
18:27:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:27:00: Reserv4                                       :0x0
18:27:00: Write Speed Factor R2W_FACTOR                 :0x2
18:27:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:27:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:27:00: FILE_FORMAT_GRP                               :0x0
18:27:00: COPY flag                                     :0x1
18:27:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:27:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:27:00: File_Format                                   :0x0
18:27:00: CRC                                           :0x0
18:27:00: ####CSD Registe Values####  

18:27:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:27:00: ProductSerialNumber = 0x23482900
18:27:00: CardMaximumLBA      = 0x3b72400
18:27:00: CardCapacity        = 32G
18:27:00: Is card secure      = 0
18:27:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:27:00: [DVTCommonLib]###  LogicalWrite called
18:27:02: [ WriteLba(0x27B8A63, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1568 ] 
18:27:02: [DVTCommonLib]###  LogicalWrite Completed 

18:27:02: [DVTCommonLib]###  LogicalRead called
18:27:03: [ ReadLba(0x27B8A63, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1569 ] 
18:27:03: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:27:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:27:03: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 170 times 

18:27:03: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:27:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:27:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1570 ] 
18:27:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:27:03: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:27:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:27:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:27:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:27:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:27:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066FF600>, <py_sfcl.CommandDataDefinition object at 0x067BA9F0>) , Command count = 1571 ] 
18:27:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:27:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BAB40>, <py_sfcl.CommandDataDefinition object at 0x0682DDE0>) , Command count = 1572 ] 
18:27:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:27:03: [ SetCardRCA(0x1, 0xD555) , Command count = 1573 ] 
18:27:03: [DVTCommonLib]### Identification :Idenfication of card completed 

18:27:03: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:27:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:27:03: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:27:03: [ SetBusWidth(0x1) , Command count = 1574 ] 
18:27:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:27:03: ####CSD Registe 2.0 Values####
18:27:03: CSD_STRUCTURE                                 :0x1
18:27:03: Reserv1                                       :0x0
18:27:03: Time Access 1 TAAC                            :0xe
18:27:03: Time Access 2 NSAC*100                        :0x0
18:27:03: Data Transfer Rate TRAN_SPEED                 :0x32
18:27:03: Card Command Classess CCC                     :0x5b5
18:27:03: Max Read Data Block Length  READ_BL_LEN       :0x9
18:27:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:27:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:27:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:27:03: DSR(driver stage register)  DSR_IMP           :0x0
18:27:03: Reserv2                                       :0x0
18:27:03: Device Size C_SIZE                            :0xedc8
18:27:03: Reserv3                                       :0x0
18:27:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:27:03: Erase Sector Size SECTOR_SIZE                 :0x7f
18:27:03: Write Protect Group Size WP_GRP_SIZE          :0x0
18:27:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:27:03: Reserv4                                       :0x0
18:27:03: Write Speed Factor R2W_FACTOR                 :0x2
18:27:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:27:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:27:03: FILE_FORMAT_GRP                               :0x0
18:27:03: COPY flag                                     :0x1
18:27:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:27:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:27:03: File_Format                                   :0x0
18:27:03: CRC                                           :0x0
18:27:03: ####CSD Registe Values####  

18:27:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:27:03: ProductSerialNumber = 0x23482900
18:27:03: CardMaximumLBA      = 0x3b72400
18:27:03: CardCapacity        = 32G
18:27:03: Is card secure      = 0
18:27:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:27:03: [DVTCommonLib]###  LogicalWrite called
18:27:05: [ WriteLba(0x887135, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1575 ] 
18:27:05: [DVTCommonLib]###  LogicalWrite Completed 

18:27:05: [DVTCommonLib]###  LogicalRead called
18:27:07: [ ReadLba(0x887135, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1576 ] 
18:27:07: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:27:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:27:07: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 171 times 

18:27:07: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:27:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:27:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1577 ] 
18:27:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:27:07: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:27:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:27:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:27:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:27:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:27:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BAD20>, <py_sfcl.CommandDataDefinition object at 0x067BABD0>) , Command count = 1578 ] 
18:27:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:27:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BAEA0>, <py_sfcl.CommandDataDefinition object at 0x0682DE70>) , Command count = 1579 ] 
18:27:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:27:07: [ SetCardRCA(0x1, 0xD555) , Command count = 1580 ] 
18:27:07: [DVTCommonLib]### Identification :Idenfication of card completed 

18:27:07: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:27:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:27:07: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:27:07: [ SetBusWidth(0x1) , Command count = 1581 ] 
18:27:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:27:07: ####CSD Registe 2.0 Values####
18:27:07: CSD_STRUCTURE                                 :0x1
18:27:07: Reserv1                                       :0x0
18:27:07: Time Access 1 TAAC                            :0xe
18:27:07: Time Access 2 NSAC*100                        :0x0
18:27:07: Data Transfer Rate TRAN_SPEED                 :0x32
18:27:07: Card Command Classess CCC                     :0x5b5
18:27:07: Max Read Data Block Length  READ_BL_LEN       :0x9
18:27:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:27:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:27:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:27:07: DSR(driver stage register)  DSR_IMP           :0x0
18:27:07: Reserv2                                       :0x0
18:27:07: Device Size C_SIZE                            :0xedc8
18:27:07: Reserv3                                       :0x0
18:27:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:27:07: Erase Sector Size SECTOR_SIZE                 :0x7f
18:27:07: Write Protect Group Size WP_GRP_SIZE          :0x0
18:27:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:27:07: Reserv4                                       :0x0
18:27:07: Write Speed Factor R2W_FACTOR                 :0x2
18:27:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:27:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:27:07: FILE_FORMAT_GRP                               :0x0
18:27:07: COPY flag                                     :0x1
18:27:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:27:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:27:07: File_Format                                   :0x0
18:27:07: CRC                                           :0x0
18:27:07: ####CSD Registe Values####  

18:27:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:27:07: ProductSerialNumber = 0x23482900
18:27:07: CardMaximumLBA      = 0x3b72400
18:27:07: CardCapacity        = 32G
18:27:07: Is card secure      = 0
18:27:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:27:07: [DVTCommonLib]###  LogicalWrite called
18:27:09: [ WriteLba(0x2A5B359, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1582 ] 
18:27:09: [DVTCommonLib]###  LogicalWrite Completed 

18:27:09: [DVTCommonLib]###  LogicalRead called
18:27:10: [ ReadLba(0x2A5B359, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1583 ] 
18:27:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

18:27:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
18:27:10: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 172 times 

18:27:10: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
18:27:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:27:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1584 ] 
18:27:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:27:10: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:27:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:27:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:27:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:27:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:27:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0616E300>, <py_sfcl.CommandDataDefinition object at 0x066FF1B0>) , Command count = 1585 ] 
18:27:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:27:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0682DDB0>, <py_sfcl.CommandDataDefinition object at 0x067C14B0>) , Command count = 1586 ] 
18:27:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:27:10: [ SetCardRCA(0x1, 0xD555) , Command count = 1587 ] 
18:27:10: [DVTCommonLib]### Identification :Idenfication of card completed 

18:27:10: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
18:27:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
18:27:10: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

18:27:10: [ SetBusWidth(0x1) , Command count = 1588 ] 
18:27:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:27:10: ####CSD Registe 2.0 Values####
18:27:10: CSD_STRUCTURE                                 :0x1
18:27:10: Reserv1                                       :0x0
18:27:10: Time Access 1 TAAC                            :0xe
18:27:10: Time Access 2 NSAC*100                        :0x0
18:27:10: Data Transfer Rate TRAN_SPEED                 :0x32
18:27:10: Card Command Classess CCC                     :0x5b5
18:27:10: Max Read Data Block Length  READ_BL_LEN       :0x9
18:27:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:27:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:27:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:27:10: DSR(driver stage register)  DSR_IMP           :0x0
18:27:10: Reserv2                                       :0x0
18:27:10: Device Size C_SIZE                            :0xedc8
18:27:10: Reserv3                                       :0x0
18:27:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:27:10: Erase Sector Size SECTOR_SIZE                 :0x7f
18:27:10: Write Protect Group Size WP_GRP_SIZE          :0x0
18:27:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:27:10: Reserv4                                       :0x0
18:27:10: Write Speed Factor R2W_FACTOR                 :0x2
18:27:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:27:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:27:10: FILE_FORMAT_GRP                               :0x0
18:27:10: COPY flag                                     :0x1
18:27:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:27:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:27:10: File_Format                                   :0x0
18:27:10: CRC                                           :0x0
18:27:10: ####CSD Registe Values####  

18:27:10: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:27:10: ProductSerialNumber = 0x23482900
18:27:10: CardMaximumLBA      = 0x3b72400
18:27:10: CardCapacity        = 32G
18:27:10: Is card secure      = 0
18:27:10: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:27:10: [DVTCommonLib]###  LogicalWrite called
