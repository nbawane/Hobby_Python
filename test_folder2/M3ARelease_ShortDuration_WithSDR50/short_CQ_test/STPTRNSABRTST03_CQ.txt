14:30:43: Sata Disconnector Board found in COM1.
14:30:47: ***************************************************** 

14:30:47: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   * 

14:30:47: *                                                   * 

14:30:47: *  Compatibility with this version is not verified! * 

14:30:47: ***************************************************** 

14:30:50: [ DeviceSetupCompletion() , Command count = 7 ] 
14:30:50: Testname Mapping: ScriptName=[STPTRNSABRTST03_3_Call_All_R1b] -> TestId=[STPTRNSABRTST03]
14:30:50: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 8 ] 
14:30:50: [ GetPhysicalChipsInfo() , Command count = 9 ] 
14:30:50: [ GetFileSize(0xEA) , Command count = 10 ] 
14:30:50: [ ReadFile(<0xA00/0x200, Arb>, 0xEA, 0x1) , Command count = 11 ] 
14:30:50: [ GetFileSize(0x16) , Command count = 12 ] 
14:30:50: [ GetCardStatus() , Command count = 13 ] 
14:30:50: [ GetFileSize(0x18) , Command count = 14 ] 
14:30:50: [ ReadFile(<0x1000/0x200, Arb>, 0x18, 0x8) , Command count = 15 ] 
14:30:50: [ GetFileSize(0x15) , Command count = 16 ] 
14:30:50: [ ReadFile(<0x1000/0x200, Arb>, 0x15, 0x1) , Command count = 17 ] 
14:30:52: Can not find revision of File 21 in file 'config.xml' or card is in the ROM mode
14:30:52: [ GetFileSize(0xE) , Command count = 18 ] 
14:30:52: [ ReadFile(<0x1000/0x200, Arb>, 0xE, 0x1) , Command count = 19 ] 
14:30:52: [ GetFileSize(0x1E) , Command count = 20 ] 
14:30:52: [ GetCardStatus() , Command count = 21 ] 
14:30:52: [ GetFileSize(0x21) , Command count = 22 ] 
14:30:52: [ GetCardStatus() , Command count = 23 ] 
14:30:52: [ GetFileSize(0x33) , Command count = 24 ] 
14:30:52: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x33, 0x1) , Command count = 25 ] 
14:30:52: [ GetFileSize(0x1F) , Command count = 26 ] 
14:30:52: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x1F, 0x1) , Command count = 27 ] 
14:30:52: [ GetFileSize(0x2A) , Command count = 28 ] 
14:30:52: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x2A, 0x1) , Command count = 29 ] 
14:30:52: [ ReadCfgConf(<0x1000/0x200, Spc, pat:0x0>, 0x1) , Command count = 30 ] 
14:30:52: [ ReadFirmwareParameter(<0x1000/0x200, Spc, pat:0x0>, 0x2) , Command count = 31 ] 
14:30:52: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_BE) , Command count = 32 ] 
14:30:52: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_PRODUCT) , Command count = 33 ] 
14:30:52: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_FE_SD) , Command count = 34 ] 
14:30:52: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, 0x0) , Command count = 35 ] 
14:30:53: [ GetFileSize(0x33) , Command count = 36 ] 
14:30:53: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 37 ] 
14:30:53: [ GetFileSize(0x33) , Command count = 38 ] 
14:30:53: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 39 ] 
14:30:53: [ GetIpVersionInfo() , Command count = 40 ] 
14:30:53: [ GetPhysicalChipsInfo() , Command count = 41 ] 
14:30:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06572210>, <0x200/0x200, Arb>) , Command count = 42 ] 
14:30:53: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 43 ] 

<<<<<<<<<<<<<<<         TEST HEADER          >>>>>>>>>>>>>>>

Application                :  TestRunner.py
Application version        :  SD_DVT_CQ_Spec 6.0.0
Application folder         :  C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT
Command line               :  --protocol=sd --sdtestid=STPTRNSABRTST03 --dbconnection=none --adapter=SD05412_9ADT --sdConfiguration=SDR50 --projectconfig=C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB --paramsfile=C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB\Colibri_SD_HC_I059_SDR104_Prem_C10_U1.txt --logfilename=C:\Results\STPTRNSABRTST03_CQ.txt --CQ=1
Protocol                   :  sd
Serial number (CInfo)      :  sdin1091
Adapter                    :  SDR Tester (S#: SD05412_9ADT): (Slot#:0)
Adapter serial number      :  SD05412_9ADT
Adapter type               :  USD
Capacity                   :  32G
Firmware revision          :  6RB C030
Flashware revision         :  6RB C030
IP Version Info            :  '' 01.04.00... ID 0x20
                           :  '' 00.01.00... ID 0x10
Memory ID                  :  453CA9A27A510B140000000000000000
Controller                 :  81
Trim settings              :  <Unavailable>
Model revision             :  <Unavailable>
Stream name                :  <Unavailable>
FE IP                      :  1
Romware revision           :  RRBZ1152
Architecture               :  Gen 6
Model                      :  SanDisk   COLIBRI
Memory type                :  Unknown Device Type-2LC x 1
ASIC id                    :  81
Controller type            :  Unknown Controller   UMC-J
Driver version (actual)    :  10.0.0.1 (0x a.0.0.1)
Driver version (released)  :  7.1.4.3 (0x 7.1.4.3)
Date and time              :  2016-11-28 14:30:53
Host name                  :  SDDVT_Test2
Host IP address            :  10.65.153.121
Operating system           :  Microsoft Windows [Version 6.1.7601] Service Pack 1
SanDisk Python version     :  1.17.5rc3
CTF/PySFCL build number    :  1.3.217491.217491
PySFCL version             :  1.3.217491
CTF version                :  1.3
Python version             :  2.4.2
Project Name(Validation)   :  <None>


<<<<<<<<<<<<<<<      SFCL CONFIGURATION      >>>>>>>>>>>>>>>

[SD enumeration]
cmdtiming=0
useRelay=0
autocompare=0
relayPolarity=1
relaySleep=500
measureCmdLatency=1
logicalChunkSize=0
diagDisabled=0
diagCmdTimeout=800
useVddf=on
nethostloglevel=
nethostautoCompare=on
CmdManShowProgress=off
nethostsendtimeout=240000
nethostreceivetimeout=240000
countOfRetryCmdIfCrc=3
enableOORPatch=
lbaForSctpCommands=0x100
subProtocol=0
doDle=0
diagnosticChunkSize=128
logmsgformat=timeMessage
logtimeformat=time
relaySlot=0
unloadDll=on
hardTimeoutUnloadDll=on
minDuration=7200
remoteDevice=
skipProduction=0
ishighspeedmode=0
highfreqinhz=500
modeldelaytimeindiagnostic=0
cqDataTransferPollingShortInterval=1000
cqDataStatusPollingLongInterval=1800000
sataPort0ToRelaySlot=0
sataPort1ToRelaySlot=0
sataPort2ToRelaySlot=0
sataPort3ToRelaySlot=0
relayToComportMapping=1
sdbToComportMapping=1
sataAdapterPort0=0
sataAdapterPort1=0
sataAdapterPort2=0
sataAdapterPort3=0
sataPort0ToMubIndx=1
sataPort1ToMubIndx=1
sataPort2ToMubIndx=1
sataPort3ToMubIndx=1

[Common]
enableChunkTraces=off
enablePythonTraceback=1
sctpPhaseDelay=0
printcommandcount=on
debugfilepath=
initXMLPath=\\regression.lab.sandisk.com\shared\configurations
delayBeforePwrCycle=0
delayAfterPwrCycle=0
reportCountStatistics=1
reportPackage=0
sfclConfig=Common

<<<<<<<<<<<<<<<          CARD INFO           >>>>>>>>>>>>>>>

Number Of LBAs  :  0x3b72400
Card Is Locked  :  No
Secure Area     :  0x28000
Card Secure     :  No
WP map          :

<<<<<<<<<<<<<<<           CID INFO           >>>>>>>>>>>>>>>

Manufacturer Id  :  0x3
Card/BGA         :  0
Application Id   :  0x5344
ProductName      :  AGGCD
ProductRev       :  0x80
SerialNumber     :  0x23482900
Reserved         :  0x23482900
Year             :  2000
Month            :  11
CRC Check Sum    :  0x5
Not Used         :

<<<<<<<<<<<<<<<           CSD INFO           >>>>>>>>>>>>>>>

CSD Structure                     :  0x1
reserv. 1                         :  0x0
TAAC                              :  0xe
NSAC*100                          :  0x0
data transfer rate                :  0x32
card command classes CCC          :  0x5b5
max. read data Blk. length        :  0x9
partial blocks for read allowed   :  0x0
write block misalignment          :  0x0
read block misalignment           :  0x0
DSR implemented                   :  0x0
reserved 2                        :  0x0
device size                       :  0xedc8
Reserv3                           :  0x0
SD Erase Blk Len En               :  0x1
SD Sec Size                       :  0x7f
write protect group size          :  0x0
write protect group enable        :  0x0
Reserv4                           :  0x0
write speed factor                :  0x2
max. write data blk. length       :  0x9
partial blocks for write allowed  :  0x0
File Format Group                 :  0x0
copy flag(OTP)                    :  0x1
permanent write protection        :  0x0
temporary write protection        :  0x0
File Format                       :  0x0
CRC                               :  0x0
<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

<<<<<<<<<<<<<<<    COMMAND LINE ARGUMENTS    >>>>>>>>>>>>>>>


Processed command-line options:
   --protocol                                       : sd
   --adapterspecifier                               : ain:-1,desc:SD05412_9ADT
   --extcmdset                                      : FBCC
   --sdtestid                                       : STPTRNSABRTST03
   --sdconfiguration                                : SDR50
   --cyclecount                                     : 1
   --testduration                                   : 20h
   --writereadpercent                               : 100
   --paramsfile                                     : 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB\Colibri_SD_HC_I059_SDR104_Prem_C10_U1.txt'
   --randomseed                                     : 7489207152
   --projectconfig                                  : C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB
   --logfiledir                                     : C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\DvtTestLogs
   --hostlog                                        : 0
   --cq                                             : 1
   --dbconnection                                   : 'none'
   --temperature                                    : 25
   --voltage                                        : 0.00
   --logfilename                                    : 'C:\Results\STPTRNSABRTST03_CQ.txt'
   --logtostdout                                    : Y
   --overwriteexistinglogfile                       : Y
   --logrotationspecifier                           : NoRotation
   --loglevel                                       : <4, INFO>
   --testcomment                                    : None
   --dbproject                                      : CTFW_QA
   --mdfwprojectid                                  : None
   --mdconfigid                                     : None
   --mdtestid                                       : None
   --valid                                          : True
   --waitTime                                       : None
   --jitter                                         : F
   --testlimits                                     : <None>-<None>
   --LabID                                          : None
   --DutID                                          : None
   --LaunchId                                       : None
   --TestQueueId                                    : None
   --xfermode                                       : <N>
   --networkperiod                                  : <N>
   --networkpath                                    : <N>
   --dumpfile                                       : 
   --printcommandcount                              : N
   --debugfilepath                                  : <N>
   --chpfilename                                    : <N>
   --enablecmdhistory                               : Y
   --cmdhistextfilename                             : <N>
   --cmdhistcsvfilename                             : <N>
   --histdisplaysizes                               : 0,250
   --stoponcommands                                 : <N>
   --notifyemailid                                  : <N>
   --spyoncommands                                  : <N>
   --notifyoncommands                               : <N>
   --CmdManShowProgress                             : 'off'
   --enablePowerCycle                               : '1'
   --measureCmdLatency                              : '1'
   --useVddf                                        : 'on'
   --gvi                                            : 'off'
   --gviOnFly                                       : 'off'
   --gviEncryption                                  : '0'
   --remoteDevice                                   : ''
   --skipProduction                                 : '0'
   --forceMultipleMode                              : 'off'
   --countOfRetryCmdIfCrc                           : '3'
   --enableOORPatch                                 : 'on'
   --connectonly                                    : 'off'
   --nethostautocompare                             : 'on'
   --nethostpowercycle                              : '0'
   --nethostloglevel                                : '3'
   --nethostlogconsole                              : '0'
   --nethostsanitychecks                            : '0'
   --nethostsendtimeout                             : '240000'
   --nethostreceivetimeout                          : '240000'
   --subProtocol                                    : '0'
   --useVccq                                        : '3.3'
   --maxprotocoloverhead                            : '0'
   --maxprotocoltimingmode                          : '0'
   --isHighSpeedMode                                : '0'
   --highFreqInHz                                   : '500'
   --doDle                                          : '0'
   --lbaForSctpCommands                             : '0x100'
   --cmdfilename                                    : ''
   --cmdtofilewrites                                : '0'
   --cmdtiming                                      : '0'
   --cmdtocsv                                       : '0'
   --logicalChunkSize                               : '0'
   --diagnosticChunkSize                            : '128'
   --readChunkSize                                  : '0'
   --writeChunkSize                                 : '0'
   --useRelay                                       : '0'
   --sataPort0ToRelaySlot                           : '0'
   --sataPort1ToRelaySlot                           : '0'
   --sataPort2ToRelaySlot                           : '0'
   --sataPort3ToRelaySlot                           : '0'
   --relayToComportMapping                          : '1'
   --useSDB                                         : '0'
   --sdbToComportMapping                            : '1'
   --sataAdapterPort0                               : '0'
   --sataAdapterPort1                               : '0'
   --sataAdapterPort2                               : '0'
   --sataAdapterPort3                               : '0'
   --relayPolarity                                  : '1'
   --relaySleep                                     : '500'
   --diagCmdTimeout                                 : '800'
   --diagDisabled                                   : '0'
   --hardTimeout                                    : '30000'
   --commandscriptfolder                            : ''
   --commandscriptstart                             : '0'
   --logmsgformat                                   : 'timeMessage'
   --logtimeformat                                  : 'time'
   --relaySlot                                      : '0'
   --atbuRelaySlot                                  : '3'
   --diskCacheStore                                 : ''
   --stopOnStart                                    : '0'
   --notifyserver                                   : ''
   --notifyretry                                    : '2'
   --notifytimeout                                  : '60'
   --failonnotifytimeout                            : '0'
   --revertactions                                  : ''
   --timechangedetection                            : '0'
   --timechangecondition                            : '600'
   --timechangecheckinterval                        : '1000'
   --inputmonitor                                   : '1'
   --logtimeprecision                               : '2'
   --nonSndkDevEnumeration                          : '0'
   --modelini                                       : 'C:\Program Files\SanDisk\CTF\Dlls\model.ini'
   --sfclini                                        : 'C:\Program Files\SanDisk\CTF\Dlls\sfcl.ini'
   --relayForceDownload                             : 'off'
   --powercycleoninit                               : 'off'
   --stopBgOperationOnFail                          : 'off'
   --autocompare                                    : '0'
   --autocompareRandomseed                          : '12345678'
   --modeldelaytimeindiagnostic                     : '0'
   --ForceDownloadMechanism                         : '0'
   --EnableUARTDebugLog                             : '0'
   --UARTBaudRate                                   : '230400'
   --SerialUARTToCom                                : '0'
   --UARTDebugFilePath                              : ''
   --sataPort0ToMubIndx                             : '1'
   --sataPort1ToMubIndx                             : '1'
   --sataPort2ToMubIndx                             : '1'
   --sataPort3ToMubIndx                             : '1'
   --fclStep                                        : '0'
   --fclCollectReads                                : '0'
   --fclCollectWrites                               : '0'
   --fclCollectErases                               : '0'
   --fclCollectAOMReads                             : '0'
   --fclAomBase                                     : '10'
   --aomStep                                        : '0'
   --aomMapFile                                     : '0'
   --fclAomSaveFilesStep                            : '1000'
   --gfa                                            : '0'
   --atbuSoftwareLocation                           : ''
   --atbuMemoryName                                 : ''
   --atbuProfilesLocation                           : ''
   --atbuThresholdValue                             : '0'
   --atbuTransitionTime                             : '0'
   --atbuDcCompensation                             : ''


<<<<<<<<<<<<<<< RUNNING TEST: STPTRNSABRTST03_3_Call_All_R1b >>>>>>>>>>>>>>>



14:30:53: ###### Running call_All_R1b_3 scripts  ######
14:30:59: FPGA Image Downloaded Is:C:\Program Files\SanDisk\CTF\FPGA\SD_CQ_SDR2_2-20-00-0002.bin
14:30:59: MaxLba of the card: 0x3B72400 
14:31:01: [GO7_globalPreTestingSettings]### Default Initialization Start
14:31:01: [DVTCommonLib]###  SwitchHostVoltageRegion called
14:31:01: [ SwitchHostVoltageRegion(False) , Command count = 44 ] 
14:31:01: [DVTCommonLib]###  SwitchHostVoltageRegion Completed 

14:31:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 45 ] 
14:31:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 46 ] 
14:31:04: [ CardInit() , Command count = 47 ] 
14:31:04: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 48 ] 

<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

14:31:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:04: ####CSD Registe 2.0 Values####
14:31:04: CSD_STRUCTURE                                 :0x1
14:31:04: Reserv1                                       :0x0
14:31:04: Time Access 1 TAAC                            :0xe
14:31:04: Time Access 2 NSAC*100                        :0x0
14:31:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:04: Card Command Classess CCC                     :0x5b5
14:31:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:04: DSR(driver stage register)  DSR_IMP           :0x0
14:31:04: Reserv2                                       :0x0
14:31:04: Device Size C_SIZE                            :0xedc8
14:31:04: Reserv3                                       :0x0
14:31:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:04: Reserv4                                       :0x0
14:31:04: Write Speed Factor R2W_FACTOR                 :0x2
14:31:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:04: FILE_FORMAT_GRP                               :0x0
14:31:04: COPY flag                                     :0x1
14:31:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:04: File_Format                                   :0x0
14:31:04: CRC                                           :0x0
14:31:04: ####CSD Registe Values####  

14:31:04: [DVTCommonLib]### CardInfo :###****CARD INFO****
14:31:04: ProductSerialNumber = 0x23482900
14:31:04: CardMaximumLBA      = 0x3b72400
14:31:04: CardCapacity        = 32G
14:31:04: Is card secure      = 0
14:31:04: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

14:31:04: [GO7_globalPreTestingSettings]### Default Initialization Completed 


14:31:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:06: Host Frequency set to 25000 KHz
14:31:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666870>, 0x0, True) , Command count = 49 ] 
14:31:06: [GO18_globalSetVolt]### Host voltage value is set.
14:31:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666DE0>, 0x0, False) , Command count = 50 ] 
14:31:06: [GO18_globalSetVolt]### Host voltage value is set.
14:31:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 51 ] 
14:31:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 52 ] 
14:31:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 53 ] 
14:31:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666540>, <py_sfcl.CommandDataDefinition object at 0x066668A0>) , Command count = 54 ] 
14:31:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066667E0>, <py_sfcl.CommandDataDefinition object at 0x066666F0>) , Command count = 55 ] 
14:31:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:06: [ SetCardRCA(0x1, 0xD555) , Command count = 56 ] 
14:31:06: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:06: Host Frequency set to 25000 KHz
14:31:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:06: ####CSD Registe 2.0 Values####
14:31:06: CSD_STRUCTURE                                 :0x1
14:31:06: Reserv1                                       :0x0
14:31:06: Time Access 1 TAAC                            :0xe
14:31:06: Time Access 2 NSAC*100                        :0x0
14:31:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:06: Card Command Classess CCC                     :0x5b5
14:31:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:06: DSR(driver stage register)  DSR_IMP           :0x0
14:31:06: Reserv2                                       :0x0
14:31:06: Device Size C_SIZE                            :0xedc8
14:31:06: Reserv3                                       :0x0
14:31:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:06: Reserv4                                       :0x0
14:31:06: Write Speed Factor R2W_FACTOR                 :0x2
14:31:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:06: FILE_FORMAT_GRP                               :0x0
14:31:06: COPY flag                                     :0x1
14:31:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:06: File_Format                                   :0x0
14:31:06: CRC                                           :0x0
14:31:06: ####CSD Registe Values####  

14:31:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:06: [GetSCRRegisterEntry] Passed
14:31:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:06: Data_Status_After Erases          : 0
14:31:06: CPRM Security Support             : No Security
14:31:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:06: Spec. Version                     : Version 3.0X
14:31:06: Extended Security Support         : Extended_Security_Not_Supported
14:31:06: Command Support                   : COMMAND_SUPPORT
14:31:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666960>, <py_sfcl.CommandDataDefinition object at 0x06666FC0>) , Command count = 57 ] 
14:31:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066665A0>, <py_sfcl.CommandDataDefinition object at 0x06666420>) , Command count = 58 ] 
14:31:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:06: [ SetBusWidth(0x4) , Command count = 59 ] 
14:31:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066664B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 60 ] 
14:31:06: Protected Area Size 0x28000
14:31:06: Bus Width           2
14:31:06: Secure Mode         0
14:31:06: Speed  Class        4
14:31:06: Perf Move           0
14:31:06: Au Size             9
14:31:06: Erase Size          15
14:31:06: Erase Timeout       1
14:31:06: Erase offset        1
14:31:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 61 ] 
14:31:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:07: Host Frequency set to 100000 KHz
14:31:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:07: ####CSD Registe 2.0 Values####
14:31:07: CSD_STRUCTURE                                 :0x1
14:31:07: Reserv1                                       :0x0
14:31:07: Time Access 1 TAAC                            :0xe
14:31:07: Time Access 2 NSAC*100                        :0x0
14:31:07: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:07: Card Command Classess CCC                     :0x5b5
14:31:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:07: DSR(driver stage register)  DSR_IMP           :0x0
14:31:07: Reserv2                                       :0x0
14:31:07: Device Size C_SIZE                            :0xedc8
14:31:07: Reserv3                                       :0x0
14:31:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:07: Reserv4                                       :0x0
14:31:07: Write Speed Factor R2W_FACTOR                 :0x2
14:31:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:07: FILE_FORMAT_GRP                               :0x0
14:31:07: COPY flag                                     :0x1
14:31:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:07: File_Format                                   :0x0
14:31:07: CRC                                           :0x0
14:31:07: ####CSD Registe Values####  

14:31:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066664E0>, <py_sfcl.CommandDataDefinition object at 0x066663F0>) , Command count = 62 ] 
14:31:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066662A0>, <py_sfcl.CommandDataDefinition object at 0x06666B40>) , Command count = 63 ] 
14:31:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06666360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 64 ] 
14:31:07: Protected Area Size 0x28000
14:31:07: Bus Width           2
14:31:07: Secure Mode         0
14:31:07: Speed  Class        4
14:31:07: Perf Move           0
14:31:07: Au Size             9
14:31:07: Erase Size          15
14:31:07: Erase Timeout       1
14:31:07: Erase offset        1
14:31:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:07: ########################################
14:31:07: Stated Running script STPTRNSABRTST62_util_LOAD_VARS 
14:31:07: ########################################
14:31:07: Failed Running script <module 'STPTRNSABRTST62_util_LOAD_VARS' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST62_util_LOAD_VARS.pyc'> with error 'module' object has no attribute 'TestProcedure' 
14:31:07: ########################################
14:31:07: ########################################
14:31:07: Stated Running script STPTRNSABRTST08_DVT_R1b_3_1_PowerLoss_During_Busy_CMD12 
14:31:07: ########################################
14:31:07: ###### Running STPTRNSABRTST08_DVT_R1b_3_1_PowerLoss_During_Busy_CMD12 Test 
14:31:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:09: Host Frequency set to 25000 KHz
14:31:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB300>, 0x0, True) , Command count = 65 ] 
14:31:09: [GO18_globalSetVolt]### Host voltage value is set.
14:31:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB150>, 0x0, False) , Command count = 66 ] 
14:31:09: [GO18_globalSetVolt]### Host voltage value is set.
14:31:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 67 ] 
14:31:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 68 ] 
14:31:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 69 ] 
14:31:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB2A0>, <py_sfcl.CommandDataDefinition object at 0x066AB240>) , Command count = 70 ] 
14:31:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB2D0>, <py_sfcl.CommandDataDefinition object at 0x066AB330>) , Command count = 71 ] 
14:31:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:09: [ SetCardRCA(0x1, 0xD555) , Command count = 72 ] 
14:31:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:09: Host Frequency set to 25000 KHz
14:31:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:09: ####CSD Registe 2.0 Values####
14:31:09: CSD_STRUCTURE                                 :0x1
14:31:09: Reserv1                                       :0x0
14:31:09: Time Access 1 TAAC                            :0xe
14:31:09: Time Access 2 NSAC*100                        :0x0
14:31:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:09: Card Command Classess CCC                     :0x5b5
14:31:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:09: DSR(driver stage register)  DSR_IMP           :0x0
14:31:09: Reserv2                                       :0x0
14:31:09: Device Size C_SIZE                            :0xedc8
14:31:09: Reserv3                                       :0x0
14:31:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:09: Reserv4                                       :0x0
14:31:09: Write Speed Factor R2W_FACTOR                 :0x2
14:31:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:09: FILE_FORMAT_GRP                               :0x0
14:31:09: COPY flag                                     :0x1
14:31:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:09: File_Format                                   :0x0
14:31:09: CRC                                           :0x0
14:31:09: ####CSD Registe Values####  

14:31:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:09: [GetSCRRegisterEntry] Passed
14:31:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:09: Data_Status_After Erases          : 0
14:31:09: CPRM Security Support             : No Security
14:31:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:09: Spec. Version                     : Version 3.0X
14:31:09: Extended Security Support         : Extended_Security_Not_Supported
14:31:09: Command Support                   : COMMAND_SUPPORT
14:31:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572A20>, <py_sfcl.CommandDataDefinition object at 0x066AB5A0>) , Command count = 73 ] 
14:31:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB3F0>, <py_sfcl.CommandDataDefinition object at 0x066AB420>) , Command count = 74 ] 
14:31:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:09: [ SetBusWidth(0x4) , Command count = 75 ] 
14:31:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066AB4E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 76 ] 
14:31:09: Protected Area Size 0x28000
14:31:09: Bus Width           2
14:31:09: Secure Mode         0
14:31:09: Speed  Class        4
14:31:09: Perf Move           0
14:31:09: Au Size             9
14:31:09: Erase Size          15
14:31:09: Erase Timeout       1
14:31:09: Erase offset        1
14:31:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 77 ] 
14:31:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:09: Host Frequency set to 100000 KHz
14:31:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:09: ####CSD Registe 2.0 Values####
14:31:09: CSD_STRUCTURE                                 :0x1
14:31:09: Reserv1                                       :0x0
14:31:09: Time Access 1 TAAC                            :0xe
14:31:09: Time Access 2 NSAC*100                        :0x0
14:31:09: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:09: Card Command Classess CCC                     :0x5b5
14:31:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:09: DSR(driver stage register)  DSR_IMP           :0x0
14:31:09: Reserv2                                       :0x0
14:31:09: Device Size C_SIZE                            :0xedc8
14:31:09: Reserv3                                       :0x0
14:31:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:09: Reserv4                                       :0x0
14:31:09: Write Speed Factor R2W_FACTOR                 :0x2
14:31:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:09: FILE_FORMAT_GRP                               :0x0
14:31:09: COPY flag                                     :0x1
14:31:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:09: File_Format                                   :0x0
14:31:09: CRC                                           :0x0
14:31:09: ####CSD Registe Values####  

14:31:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB7B0>, <py_sfcl.CommandDataDefinition object at 0x066AB5D0>) , Command count = 78 ] 
14:31:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB630>, <py_sfcl.CommandDataDefinition object at 0x066AB660>) , Command count = 79 ] 
14:31:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:09: ###STPTRNSABRTST08_DVT_R1b_3_1_PowerLoss_During_Busy_CMD12 [Info] : TEST PREREQUISITES 
14:31:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x3A000 with One's Pattern
14:31:12: [ WrLbaNoData(0x0, 0x3A000, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 80 ] 
14:31:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x3A000 with One's Pattern 

14:31:12: ###STPTRNSABRTST08_DVT_R1b_3_1_PowerLoss_During_Busy_CMD12 [Info] : START TEST 
14:31:12: STPTRNSABRTST08_DVT_R1b_3_1_PowerLoss_During_Busy_CMD12[INFO] ### Outer loop Count 1023
14:31:12: STPTRNSABRTST08_DVT_R1b_3_1_PowerLoss_During_Busy_CMD12[INFO] ### Inner loop Count 28
14:31:12: STPTRNSABRTST08_DVT_R1b_3_1_PowerLoss_During_Busy_CMD12[INFO] ### Multiple Read Stop Transmission called
14:31:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x066AB780>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x066AB7E0>, <py_sfcl.PySEnhancedCmdData object at 0x066AB810>, <None>, <py_sfcl.Command23 object at 0x066AB870>) , Command count = 81 ] 
14:31:22: [ GetCardStatus() , Command count = 82 ] 
14:31:22: Failed Running script <module 'STPTRNSABRTST08_DVT_R1b_3_1_PowerLoss_During_Busy_CMD12' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST08_DVT_R1b_3_1_PowerLoss_During_Busy_CMD12.py'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0xEAL (234) executing command 'EnhancedCommand'
   Description : WATCHDOG_TIMEOUT_PATERN_GEN
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.PySReadWriteParams object at 0x066AB780>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x066AB7E0>, <py_sfcl.PySEnhancedCmdData object at 0x066AB810>, <None>, <py_sfcl.Command23 object at 0x066AB870>)')
   Extended error information:
      Status         : 0xB00
      Is busy?       : No
 
14:31:22: ########################################
14:31:22: ########################################
14:31:22: Stated Running script STPTRNSABRTST09_DVT_R1b_3_2_PowerLoss_During_Busy_CMD38 
14:31:22: ########################################
14:31:22: ###### Running STPTRNSABRTST09_DVT_R1b_3_2_PowerLoss_During_Busy_CMD38 Test 
14:31:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:25: Host Frequency set to 25000 KHz
14:31:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABF60>, 0x0, True) , Command count = 83 ] 
14:31:25: [GO18_globalSetVolt]### Host voltage value is set.
14:31:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABE10>, 0x0, False) , Command count = 84 ] 
14:31:25: [GO18_globalSetVolt]### Host voltage value is set.
14:31:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 85 ] 
14:31:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 86 ] 
14:31:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 87 ] 
14:31:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF90>, <py_sfcl.CommandDataDefinition object at 0x066ABF00>) , Command count = 88 ] 
14:31:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABFC0>, <py_sfcl.CommandDataDefinition object at 0x0667A030>) , Command count = 89 ] 
14:31:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:25: [ SetCardRCA(0x1, 0xD555) , Command count = 90 ] 
14:31:25: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:25: Host Frequency set to 25000 KHz
14:31:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:25: ####CSD Registe 2.0 Values####
14:31:25: CSD_STRUCTURE                                 :0x1
14:31:25: Reserv1                                       :0x0
14:31:25: Time Access 1 TAAC                            :0xe
14:31:25: Time Access 2 NSAC*100                        :0x0
14:31:25: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:25: Card Command Classess CCC                     :0x5b5
14:31:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:25: DSR(driver stage register)  DSR_IMP           :0x0
14:31:25: Reserv2                                       :0x0
14:31:25: Device Size C_SIZE                            :0xedc8
14:31:25: Reserv3                                       :0x0
14:31:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:25: Reserv4                                       :0x0
14:31:25: Write Speed Factor R2W_FACTOR                 :0x2
14:31:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:25: FILE_FORMAT_GRP                               :0x0
14:31:25: COPY flag                                     :0x1
14:31:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:25: File_Format                                   :0x0
14:31:25: CRC                                           :0x0
14:31:25: ####CSD Registe Values####  

14:31:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:25: [GetSCRRegisterEntry] Passed
14:31:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:25: Data_Status_After Erases          : 0
14:31:25: CPRM Security Support             : No Security
14:31:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:25: Spec. Version                     : Version 3.0X
14:31:25: Extended Security Support         : Extended_Security_Not_Supported
14:31:25: Command Support                   : COMMAND_SUPPORT
14:31:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A2A0>, <py_sfcl.CommandDataDefinition object at 0x0667A0C0>) , Command count = 91 ] 
14:31:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A120>, <py_sfcl.CommandDataDefinition object at 0x0667A150>) , Command count = 92 ] 
14:31:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:25: [ SetBusWidth(0x4) , Command count = 93 ] 
14:31:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A210>, <0x200/0x200, Spc, pat:0x0>) , Command count = 94 ] 
14:31:25: Protected Area Size 0x28000
14:31:25: Bus Width           2
14:31:25: Secure Mode         0
14:31:25: Speed  Class        4
14:31:25: Perf Move           0
14:31:25: Au Size             9
14:31:25: Erase Size          15
14:31:25: Erase Timeout       1
14:31:25: Erase offset        1
14:31:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 95 ] 
14:31:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:25: Host Frequency set to 100000 KHz
14:31:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:25: ####CSD Registe 2.0 Values####
14:31:25: CSD_STRUCTURE                                 :0x1
14:31:25: Reserv1                                       :0x0
14:31:25: Time Access 1 TAAC                            :0xe
14:31:25: Time Access 2 NSAC*100                        :0x0
14:31:25: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:25: Card Command Classess CCC                     :0x5b5
14:31:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:25: DSR(driver stage register)  DSR_IMP           :0x0
14:31:25: Reserv2                                       :0x0
14:31:25: Device Size C_SIZE                            :0xedc8
14:31:25: Reserv3                                       :0x0
14:31:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:25: Reserv4                                       :0x0
14:31:25: Write Speed Factor R2W_FACTOR                 :0x2
14:31:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:25: FILE_FORMAT_GRP                               :0x0
14:31:25: COPY flag                                     :0x1
14:31:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:25: File_Format                                   :0x0
14:31:25: CRC                                           :0x0
14:31:25: ####CSD Registe Values####  

14:31:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A510>, <py_sfcl.CommandDataDefinition object at 0x0667A330>) , Command count = 96 ] 
14:31:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A390>, <py_sfcl.CommandDataDefinition object at 0x0667A3C0>) , Command count = 97 ] 
14:31:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:25: ###STPTRNSABRTST09_DVT_R1b_3_2_PowerLoss_During_Busy_CMD38 [Info] : TEST PREREQUISITES 
14:31:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x3A000 with One's Pattern
14:31:28: [ WrLbaNoData(0x0, 0x3A000, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 98 ] 
14:31:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x3A000 with One's Pattern 

14:31:28: ###STPTRNSABRTST09_DVT_R1b_3_2_PowerLoss_During_Busy_CMD38 [Info] : START TEST 
14:31:28: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Outer loop Count 1023
14:31:28: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 28
14:31:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x8 with Increment Pattern
14:31:28: [ WrLbaNoData(0x0, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 99 ] 
14:31:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x8 with Increment Pattern 

14:31:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A480>, <py_sfcl.CommandDataDefinition object at 0x0667A4B0>) , Command count = 100 ] 
14:31:28: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:31:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A540>, <py_sfcl.CommandDataDefinition object at 0x0667A570>) , Command count = 101 ] 
14:31:28: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:31:28: [DVTCommonLib]###  R1bCommandAbort called
14:31:28: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x24, False) , Command count = 102 ] 
14:31:28: [DVTCommonLib]###  R1bCommandAbort Completed 

14:31:28: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:30: Host Frequency set to 25000 KHz
14:31:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:30: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A840>, 0x0, True) , Command count = 103 ] 
14:31:30: [GO18_globalSetVolt]### Host voltage value is set.
14:31:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A690>, 0x0, False) , Command count = 104 ] 
14:31:30: [GO18_globalSetVolt]### Host voltage value is set.
14:31:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 105 ] 
14:31:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 106 ] 
14:31:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 107 ] 
14:31:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A7E0>, <py_sfcl.CommandDataDefinition object at 0x0667A780>) , Command count = 108 ] 
14:31:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A810>, <py_sfcl.CommandDataDefinition object at 0x0667A870>) , Command count = 109 ] 
14:31:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:30: [ SetCardRCA(0x1, 0xD555) , Command count = 110 ] 
14:31:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:30: Host Frequency set to 25000 KHz
14:31:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:30: ####CSD Registe 2.0 Values####
14:31:30: CSD_STRUCTURE                                 :0x1
14:31:30: Reserv1                                       :0x0
14:31:30: Time Access 1 TAAC                            :0xe
14:31:30: Time Access 2 NSAC*100                        :0x0
14:31:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:30: Card Command Classess CCC                     :0x5b5
14:31:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:30: DSR(driver stage register)  DSR_IMP           :0x0
14:31:30: Reserv2                                       :0x0
14:31:30: Device Size C_SIZE                            :0xedc8
14:31:30: Reserv3                                       :0x0
14:31:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:30: Reserv4                                       :0x0
14:31:30: Write Speed Factor R2W_FACTOR                 :0x2
14:31:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:30: FILE_FORMAT_GRP                               :0x0
14:31:30: COPY flag                                     :0x1
14:31:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:30: File_Format                                   :0x0
14:31:30: CRC                                           :0x0
14:31:30: ####CSD Registe Values####  

14:31:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:30: [GetSCRRegisterEntry] Passed
14:31:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:30: Data_Status_After Erases          : 0
14:31:30: CPRM Security Support             : No Security
14:31:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:30: Spec. Version                     : Version 3.0X
14:31:30: Extended Security Support         : Extended_Security_Not_Supported
14:31:30: Command Support                   : COMMAND_SUPPORT
14:31:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AAE0>, <py_sfcl.CommandDataDefinition object at 0x0667A900>) , Command count = 111 ] 
14:31:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A960>, <py_sfcl.CommandDataDefinition object at 0x0667A990>) , Command count = 112 ] 
14:31:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:30: [ SetBusWidth(0x4) , Command count = 113 ] 
14:31:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667AA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 114 ] 
14:31:30: Protected Area Size 0x28000
14:31:30: Bus Width           2
14:31:30: Secure Mode         0
14:31:30: Speed  Class        4
14:31:30: Perf Move           0
14:31:30: Au Size             9
14:31:30: Erase Size          15
14:31:30: Erase Timeout       1
14:31:30: Erase offset        1
14:31:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 115 ] 
14:31:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:31: Host Frequency set to 100000 KHz
14:31:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:31: ####CSD Registe 2.0 Values####
14:31:31: CSD_STRUCTURE                                 :0x1
14:31:31: Reserv1                                       :0x0
14:31:31: Time Access 1 TAAC                            :0xe
14:31:31: Time Access 2 NSAC*100                        :0x0
14:31:31: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:31: Card Command Classess CCC                     :0x5b5
14:31:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:31: DSR(driver stage register)  DSR_IMP           :0x0
14:31:31: Reserv2                                       :0x0
14:31:31: Device Size C_SIZE                            :0xedc8
14:31:31: Reserv3                                       :0x0
14:31:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:31: Reserv4                                       :0x0
14:31:31: Write Speed Factor R2W_FACTOR                 :0x2
14:31:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:31: FILE_FORMAT_GRP                               :0x0
14:31:31: COPY flag                                     :0x1
14:31:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:31: File_Format                                   :0x0
14:31:31: CRC                                           :0x0
14:31:31: ####CSD Registe Values####  

14:31:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AD20>, <py_sfcl.CommandDataDefinition object at 0x0667AB40>) , Command count = 116 ] 
14:31:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ABA0>, <py_sfcl.CommandDataDefinition object at 0x0667ABD0>) , Command count = 117 ] 
14:31:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:31: [DVTCommonLib]### Erase :Erase API Called
14:31:31: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x0 with Blockcount:0x2001
14:31:31: [ EraseLba(0x0, 0x2001) , Command count = 118 ] 
14:31:31: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x0 with Blockcount:0x2001 

14:31:31: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 27
14:31:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2000 to EndLba:0x2008 with Increment Pattern
14:31:31: [ WrLbaNoData(0x2000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 119 ] 
14:31:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2000 to EndLba:0x2008 with Increment Pattern 

14:31:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ACF0>, <py_sfcl.CommandDataDefinition object at 0x0667AD50>) , Command count = 120 ] 
14:31:31: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:31:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ADB0>, <py_sfcl.CommandDataDefinition object at 0x0667ADE0>) , Command count = 121 ] 
14:31:31: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:31:31: [DVTCommonLib]###  R1bCommandAbort called
14:31:31: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x19, False) , Command count = 122 ] 
14:31:31: [DVTCommonLib]###  R1bCommandAbort Completed 

14:31:31: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:33: Host Frequency set to 25000 KHz
14:31:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AE70>, 0x0, True) , Command count = 123 ] 
14:31:33: [GO18_globalSetVolt]### Host voltage value is set.
14:31:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AED0>, 0x0, False) , Command count = 124 ] 
14:31:33: [GO18_globalSetVolt]### Host voltage value is set.
14:31:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 125 ] 
14:31:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 126 ] 
14:31:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 127 ] 
14:31:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AFC0>, <py_sfcl.CommandDataDefinition object at 0x0667C060>) , Command count = 128 ] 
14:31:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C090>, <py_sfcl.CommandDataDefinition object at 0x0667C0C0>) , Command count = 129 ] 
14:31:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:33: [ SetCardRCA(0x1, 0xD555) , Command count = 130 ] 
14:31:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:33: Host Frequency set to 25000 KHz
14:31:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:33: ####CSD Registe 2.0 Values####
14:31:33: CSD_STRUCTURE                                 :0x1
14:31:33: Reserv1                                       :0x0
14:31:33: Time Access 1 TAAC                            :0xe
14:31:33: Time Access 2 NSAC*100                        :0x0
14:31:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:33: Card Command Classess CCC                     :0x5b5
14:31:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:33: DSR(driver stage register)  DSR_IMP           :0x0
14:31:33: Reserv2                                       :0x0
14:31:33: Device Size C_SIZE                            :0xedc8
14:31:33: Reserv3                                       :0x0
14:31:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:33: Reserv4                                       :0x0
14:31:33: Write Speed Factor R2W_FACTOR                 :0x2
14:31:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:33: FILE_FORMAT_GRP                               :0x0
14:31:33: COPY flag                                     :0x1
14:31:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:33: File_Format                                   :0x0
14:31:33: CRC                                           :0x0
14:31:33: ####CSD Registe Values####  

14:31:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:33: [GetSCRRegisterEntry] Passed
14:31:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:33: Data_Status_After Erases          : 0
14:31:33: CPRM Security Support             : No Security
14:31:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:33: Spec. Version                     : Version 3.0X
14:31:33: Extended Security Support         : Extended_Security_Not_Supported
14:31:33: Command Support                   : COMMAND_SUPPORT
14:31:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C330>, <py_sfcl.CommandDataDefinition object at 0x0667C150>) , Command count = 131 ] 
14:31:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C1B0>, <py_sfcl.CommandDataDefinition object at 0x0667C1E0>) , Command count = 132 ] 
14:31:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:33: [ SetBusWidth(0x4) , Command count = 133 ] 
14:31:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C2A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 134 ] 
14:31:33: Protected Area Size 0x28000
14:31:33: Bus Width           2
14:31:33: Secure Mode         0
14:31:33: Speed  Class        4
14:31:33: Perf Move           0
14:31:33: Au Size             9
14:31:33: Erase Size          15
14:31:33: Erase Timeout       1
14:31:33: Erase offset        1
14:31:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 135 ] 
14:31:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:33: Host Frequency set to 100000 KHz
14:31:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:33: ####CSD Registe 2.0 Values####
14:31:33: CSD_STRUCTURE                                 :0x1
14:31:33: Reserv1                                       :0x0
14:31:33: Time Access 1 TAAC                            :0xe
14:31:33: Time Access 2 NSAC*100                        :0x0
14:31:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:33: Card Command Classess CCC                     :0x5b5
14:31:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:33: DSR(driver stage register)  DSR_IMP           :0x0
14:31:33: Reserv2                                       :0x0
14:31:33: Device Size C_SIZE                            :0xedc8
14:31:33: Reserv3                                       :0x0
14:31:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:33: Reserv4                                       :0x0
14:31:33: Write Speed Factor R2W_FACTOR                 :0x2
14:31:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:33: FILE_FORMAT_GRP                               :0x0
14:31:33: COPY flag                                     :0x1
14:31:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:33: File_Format                                   :0x0
14:31:33: CRC                                           :0x0
14:31:33: ####CSD Registe Values####  

14:31:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C570>, <py_sfcl.CommandDataDefinition object at 0x0667C390>) , Command count = 136 ] 
14:31:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C3F0>, <py_sfcl.CommandDataDefinition object at 0x0667C420>) , Command count = 137 ] 
14:31:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:33: [DVTCommonLib]### Erase :Erase API Called
14:31:33: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2000 with Blockcount:0x2001
14:31:33: [ EraseLba(0x2000, 0x2001) , Command count = 138 ] 
14:31:33: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2000 with Blockcount:0x2001 

14:31:33: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 26
14:31:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x4000 to EndLba:0x4008 with Increment Pattern
14:31:33: [ WrLbaNoData(0x4000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 139 ] 
14:31:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x4000 to EndLba:0x4008 with Increment Pattern 

14:31:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C4E0>, <py_sfcl.CommandDataDefinition object at 0x0667C510>) , Command count = 140 ] 
14:31:33: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:31:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C5A0>, <py_sfcl.CommandDataDefinition object at 0x0667C5D0>) , Command count = 141 ] 
14:31:33: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:31:33: [DVTCommonLib]###  R1bCommandAbort called
14:31:34: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x30, False) , Command count = 142 ] 
14:31:34: [DVTCommonLib]###  R1bCommandAbort Completed 

14:31:34: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:36: Host Frequency set to 25000 KHz
14:31:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:36: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C840>, 0x0, True) , Command count = 143 ] 
14:31:36: [GO18_globalSetVolt]### Host voltage value is set.
14:31:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C690>, 0x0, False) , Command count = 144 ] 
14:31:36: [GO18_globalSetVolt]### Host voltage value is set.
14:31:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 145 ] 
14:31:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 146 ] 
14:31:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 147 ] 
14:31:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C7E0>, <py_sfcl.CommandDataDefinition object at 0x0667C780>) , Command count = 148 ] 
14:31:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C810>, <py_sfcl.CommandDataDefinition object at 0x0667C870>) , Command count = 149 ] 
14:31:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:36: [ SetCardRCA(0x1, 0xD555) , Command count = 150 ] 
14:31:36: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:36: Host Frequency set to 25000 KHz
14:31:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:36: ####CSD Registe 2.0 Values####
14:31:36: CSD_STRUCTURE                                 :0x1
14:31:36: Reserv1                                       :0x0
14:31:36: Time Access 1 TAAC                            :0xe
14:31:36: Time Access 2 NSAC*100                        :0x0
14:31:36: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:36: Card Command Classess CCC                     :0x5b5
14:31:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:36: DSR(driver stage register)  DSR_IMP           :0x0
14:31:36: Reserv2                                       :0x0
14:31:36: Device Size C_SIZE                            :0xedc8
14:31:36: Reserv3                                       :0x0
14:31:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:36: Reserv4                                       :0x0
14:31:36: Write Speed Factor R2W_FACTOR                 :0x2
14:31:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:36: FILE_FORMAT_GRP                               :0x0
14:31:36: COPY flag                                     :0x1
14:31:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:36: File_Format                                   :0x0
14:31:36: CRC                                           :0x0
14:31:36: ####CSD Registe Values####  

14:31:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:36: [GetSCRRegisterEntry] Passed
14:31:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:36: Data_Status_After Erases          : 0
14:31:36: CPRM Security Support             : No Security
14:31:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:36: Spec. Version                     : Version 3.0X
14:31:36: Extended Security Support         : Extended_Security_Not_Supported
14:31:36: Command Support                   : COMMAND_SUPPORT
14:31:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CAE0>, <py_sfcl.CommandDataDefinition object at 0x0667C900>) , Command count = 151 ] 
14:31:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C960>, <py_sfcl.CommandDataDefinition object at 0x0667C990>) , Command count = 152 ] 
14:31:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:36: [ SetBusWidth(0x4) , Command count = 153 ] 
14:31:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667CA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 154 ] 
14:31:36: Protected Area Size 0x28000
14:31:36: Bus Width           2
14:31:36: Secure Mode         0
14:31:36: Speed  Class        4
14:31:36: Perf Move           0
14:31:36: Au Size             9
14:31:36: Erase Size          15
14:31:36: Erase Timeout       1
14:31:36: Erase offset        1
14:31:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 155 ] 
14:31:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:36: Host Frequency set to 100000 KHz
14:31:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:36: ####CSD Registe 2.0 Values####
14:31:36: CSD_STRUCTURE                                 :0x1
14:31:36: Reserv1                                       :0x0
14:31:36: Time Access 1 TAAC                            :0xe
14:31:36: Time Access 2 NSAC*100                        :0x0
14:31:36: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:36: Card Command Classess CCC                     :0x5b5
14:31:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:36: DSR(driver stage register)  DSR_IMP           :0x0
14:31:36: Reserv2                                       :0x0
14:31:36: Device Size C_SIZE                            :0xedc8
14:31:36: Reserv3                                       :0x0
14:31:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:36: Reserv4                                       :0x0
14:31:36: Write Speed Factor R2W_FACTOR                 :0x2
14:31:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:36: FILE_FORMAT_GRP                               :0x0
14:31:36: COPY flag                                     :0x1
14:31:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:36: File_Format                                   :0x0
14:31:36: CRC                                           :0x0
14:31:36: ####CSD Registe Values####  

14:31:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CCF0>, <py_sfcl.CommandDataDefinition object at 0x0667CB10>) , Command count = 156 ] 
14:31:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CB70>, <py_sfcl.CommandDataDefinition object at 0x0667CBA0>) , Command count = 157 ] 
14:31:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:36: [DVTCommonLib]### Erase :Erase API Called
14:31:36: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x4000 with Blockcount:0x2001
14:31:36: [ EraseLba(0x4000, 0x2001) , Command count = 158 ] 
14:31:36: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x4000 with Blockcount:0x2001 

14:31:36: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 25
14:31:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x6000 to EndLba:0x6008 with Increment Pattern
14:31:36: [ WrLbaNoData(0x6000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 159 ] 
14:31:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x6000 to EndLba:0x6008 with Increment Pattern 

14:31:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CC60>, <py_sfcl.CommandDataDefinition object at 0x0667CC90>) , Command count = 160 ] 
14:31:36: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:31:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CD20>, <py_sfcl.CommandDataDefinition object at 0x0667CD50>) , Command count = 161 ] 
14:31:36: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:31:36: [DVTCommonLib]###  R1bCommandAbort called
14:31:36: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x12, False) , Command count = 162 ] 
14:31:36: [DVTCommonLib]###  R1bCommandAbort Completed 

14:31:36: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:38: Host Frequency set to 25000 KHz
14:31:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:38: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CFC0>, 0x0, True) , Command count = 163 ] 
14:31:38: [GO18_globalSetVolt]### Host voltage value is set.
14:31:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CE10>, 0x0, False) , Command count = 164 ] 
14:31:38: [GO18_globalSetVolt]### Host voltage value is set.
14:31:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 165 ] 
14:31:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 166 ] 
14:31:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 167 ] 
14:31:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CF60>, <py_sfcl.CommandDataDefinition object at 0x0667CF00>) , Command count = 168 ] 
14:31:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CF90>, <py_sfcl.CommandDataDefinition object at 0x0667F030>) , Command count = 169 ] 
14:31:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:39: [ SetCardRCA(0x1, 0xD555) , Command count = 170 ] 
14:31:39: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:39: Host Frequency set to 25000 KHz
14:31:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:39: ####CSD Registe 2.0 Values####
14:31:39: CSD_STRUCTURE                                 :0x1
14:31:39: Reserv1                                       :0x0
14:31:39: Time Access 1 TAAC                            :0xe
14:31:39: Time Access 2 NSAC*100                        :0x0
14:31:39: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:39: Card Command Classess CCC                     :0x5b5
14:31:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:39: DSR(driver stage register)  DSR_IMP           :0x0
14:31:39: Reserv2                                       :0x0
14:31:39: Device Size C_SIZE                            :0xedc8
14:31:39: Reserv3                                       :0x0
14:31:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:39: Reserv4                                       :0x0
14:31:39: Write Speed Factor R2W_FACTOR                 :0x2
14:31:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:39: FILE_FORMAT_GRP                               :0x0
14:31:39: COPY flag                                     :0x1
14:31:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:39: File_Format                                   :0x0
14:31:39: CRC                                           :0x0
14:31:39: ####CSD Registe Values####  

14:31:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:39: [GetSCRRegisterEntry] Passed
14:31:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:39: Data_Status_After Erases          : 0
14:31:39: CPRM Security Support             : No Security
14:31:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:39: Spec. Version                     : Version 3.0X
14:31:39: Extended Security Support         : Extended_Security_Not_Supported
14:31:39: Command Support                   : COMMAND_SUPPORT
14:31:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F2A0>, <py_sfcl.CommandDataDefinition object at 0x0667F0C0>) , Command count = 171 ] 
14:31:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F120>, <py_sfcl.CommandDataDefinition object at 0x0667F150>) , Command count = 172 ] 
14:31:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:39: [ SetBusWidth(0x4) , Command count = 173 ] 
14:31:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F210>, <0x200/0x200, Spc, pat:0x0>) , Command count = 174 ] 
14:31:39: Protected Area Size 0x28000
14:31:39: Bus Width           2
14:31:39: Secure Mode         0
14:31:39: Speed  Class        4
14:31:39: Perf Move           0
14:31:39: Au Size             9
14:31:39: Erase Size          15
14:31:39: Erase Timeout       1
14:31:39: Erase offset        1
14:31:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 175 ] 
14:31:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:39: Host Frequency set to 100000 KHz
14:31:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:39: ####CSD Registe 2.0 Values####
14:31:39: CSD_STRUCTURE                                 :0x1
14:31:39: Reserv1                                       :0x0
14:31:39: Time Access 1 TAAC                            :0xe
14:31:39: Time Access 2 NSAC*100                        :0x0
14:31:39: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:39: Card Command Classess CCC                     :0x5b5
14:31:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:39: DSR(driver stage register)  DSR_IMP           :0x0
14:31:39: Reserv2                                       :0x0
14:31:39: Device Size C_SIZE                            :0xedc8
14:31:39: Reserv3                                       :0x0
14:31:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:39: Reserv4                                       :0x0
14:31:39: Write Speed Factor R2W_FACTOR                 :0x2
14:31:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:39: FILE_FORMAT_GRP                               :0x0
14:31:39: COPY flag                                     :0x1
14:31:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:39: File_Format                                   :0x0
14:31:39: CRC                                           :0x0
14:31:39: ####CSD Registe Values####  

14:31:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F4B0>, <py_sfcl.CommandDataDefinition object at 0x0667F2D0>) , Command count = 176 ] 
14:31:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F330>, <py_sfcl.CommandDataDefinition object at 0x0667F360>) , Command count = 177 ] 
14:31:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:39: [DVTCommonLib]### Erase :Erase API Called
14:31:39: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x6000 with Blockcount:0x2001
14:31:39: [ EraseLba(0x6000, 0x2001) , Command count = 178 ] 
14:31:39: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x6000 with Blockcount:0x2001 

14:31:39: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 24
14:31:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x8000 to EndLba:0x8008 with Increment Pattern
14:31:39: [ WrLbaNoData(0x8000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 179 ] 
14:31:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x8000 to EndLba:0x8008 with Increment Pattern 

14:31:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F420>, <py_sfcl.CommandDataDefinition object at 0x0667F450>) , Command count = 180 ] 
14:31:39: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:31:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F4E0>, <py_sfcl.CommandDataDefinition object at 0x0667F510>) , Command count = 181 ] 
14:31:39: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:31:39: [DVTCommonLib]###  R1bCommandAbort called
14:31:39: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x6, False) , Command count = 182 ] 
14:31:39: [DVTCommonLib]###  R1bCommandAbort Completed 

14:31:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:41: Host Frequency set to 25000 KHz
14:31:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F780>, 0x0, True) , Command count = 183 ] 
14:31:41: [GO18_globalSetVolt]### Host voltage value is set.
14:31:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F5D0>, 0x0, False) , Command count = 184 ] 
14:31:41: [GO18_globalSetVolt]### Host voltage value is set.
14:31:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 185 ] 
14:31:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 186 ] 
14:31:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 187 ] 
14:31:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F720>, <py_sfcl.CommandDataDefinition object at 0x0667F6C0>) , Command count = 188 ] 
14:31:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F750>, <py_sfcl.CommandDataDefinition object at 0x0667F7B0>) , Command count = 189 ] 
14:31:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:41: [ SetCardRCA(0x1, 0xD555) , Command count = 190 ] 
14:31:42: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:42: Host Frequency set to 25000 KHz
14:31:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:42: ####CSD Registe 2.0 Values####
14:31:42: CSD_STRUCTURE                                 :0x1
14:31:42: Reserv1                                       :0x0
14:31:42: Time Access 1 TAAC                            :0xe
14:31:42: Time Access 2 NSAC*100                        :0x0
14:31:42: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:42: Card Command Classess CCC                     :0x5b5
14:31:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:42: DSR(driver stage register)  DSR_IMP           :0x0
14:31:42: Reserv2                                       :0x0
14:31:42: Device Size C_SIZE                            :0xedc8
14:31:42: Reserv3                                       :0x0
14:31:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:42: Reserv4                                       :0x0
14:31:42: Write Speed Factor R2W_FACTOR                 :0x2
14:31:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:42: FILE_FORMAT_GRP                               :0x0
14:31:42: COPY flag                                     :0x1
14:31:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:42: File_Format                                   :0x0
14:31:42: CRC                                           :0x0
14:31:42: ####CSD Registe Values####  

14:31:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:42: [GetSCRRegisterEntry] Passed
14:31:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:42: Data_Status_After Erases          : 0
14:31:42: CPRM Security Support             : No Security
14:31:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:42: Spec. Version                     : Version 3.0X
14:31:42: Extended Security Support         : Extended_Security_Not_Supported
14:31:42: Command Support                   : COMMAND_SUPPORT
14:31:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FA20>, <py_sfcl.CommandDataDefinition object at 0x0667F840>) , Command count = 191 ] 
14:31:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F8A0>, <py_sfcl.CommandDataDefinition object at 0x0667F8D0>) , Command count = 192 ] 
14:31:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:42: [ SetBusWidth(0x4) , Command count = 193 ] 
14:31:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 194 ] 
14:31:42: Protected Area Size 0x28000
14:31:42: Bus Width           2
14:31:42: Secure Mode         0
14:31:42: Speed  Class        4
14:31:42: Perf Move           0
14:31:42: Au Size             9
14:31:42: Erase Size          15
14:31:42: Erase Timeout       1
14:31:42: Erase offset        1
14:31:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 195 ] 
14:31:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:42: Host Frequency set to 100000 KHz
14:31:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:42: ####CSD Registe 2.0 Values####
14:31:42: CSD_STRUCTURE                                 :0x1
14:31:42: Reserv1                                       :0x0
14:31:42: Time Access 1 TAAC                            :0xe
14:31:42: Time Access 2 NSAC*100                        :0x0
14:31:42: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:42: Card Command Classess CCC                     :0x5b5
14:31:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:42: DSR(driver stage register)  DSR_IMP           :0x0
14:31:42: Reserv2                                       :0x0
14:31:42: Device Size C_SIZE                            :0xedc8
14:31:42: Reserv3                                       :0x0
14:31:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:42: Reserv4                                       :0x0
14:31:42: Write Speed Factor R2W_FACTOR                 :0x2
14:31:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:42: FILE_FORMAT_GRP                               :0x0
14:31:42: COPY flag                                     :0x1
14:31:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:42: File_Format                                   :0x0
14:31:42: CRC                                           :0x0
14:31:42: ####CSD Registe Values####  

14:31:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FC30>, <py_sfcl.CommandDataDefinition object at 0x0667FA50>) , Command count = 196 ] 
14:31:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FAB0>, <py_sfcl.CommandDataDefinition object at 0x0667FAE0>) , Command count = 197 ] 
14:31:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:42: [DVTCommonLib]### Erase :Erase API Called
14:31:42: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x8000 with Blockcount:0x2001
14:31:42: [ EraseLba(0x8000, 0x2001) , Command count = 198 ] 
14:31:42: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x8000 with Blockcount:0x2001 

14:31:42: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 23
14:31:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xA000 to EndLba:0xA008 with Increment Pattern
14:31:42: [ WrLbaNoData(0xA000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 199 ] 
14:31:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xA000 to EndLba:0xA008 with Increment Pattern 

14:31:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FBA0>, <py_sfcl.CommandDataDefinition object at 0x0667FBD0>) , Command count = 200 ] 
14:31:42: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:31:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FC60>, <py_sfcl.CommandDataDefinition object at 0x0667FC90>) , Command count = 201 ] 
14:31:42: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:31:42: [DVTCommonLib]###  R1bCommandAbort called
14:31:42: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x31, False) , Command count = 202 ] 
14:31:42: [DVTCommonLib]###  R1bCommandAbort Completed 

14:31:42: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:44: Host Frequency set to 25000 KHz
14:31:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:44: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FF00>, 0x0, True) , Command count = 203 ] 
14:31:44: [GO18_globalSetVolt]### Host voltage value is set.
14:31:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FD50>, 0x0, False) , Command count = 204 ] 
14:31:44: [GO18_globalSetVolt]### Host voltage value is set.
14:31:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 205 ] 
14:31:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 206 ] 
14:31:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 207 ] 
14:31:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FEA0>, <py_sfcl.CommandDataDefinition object at 0x0667FE40>) , Command count = 208 ] 
14:31:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FED0>, <py_sfcl.CommandDataDefinition object at 0x0667FF30>) , Command count = 209 ] 
14:31:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:44: [ SetCardRCA(0x1, 0xD555) , Command count = 210 ] 
14:31:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:44: Host Frequency set to 25000 KHz
14:31:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:44: ####CSD Registe 2.0 Values####
14:31:44: CSD_STRUCTURE                                 :0x1
14:31:44: Reserv1                                       :0x0
14:31:44: Time Access 1 TAAC                            :0xe
14:31:44: Time Access 2 NSAC*100                        :0x0
14:31:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:44: Card Command Classess CCC                     :0x5b5
14:31:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:44: DSR(driver stage register)  DSR_IMP           :0x0
14:31:44: Reserv2                                       :0x0
14:31:44: Device Size C_SIZE                            :0xedc8
14:31:44: Reserv3                                       :0x0
14:31:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:44: Reserv4                                       :0x0
14:31:44: Write Speed Factor R2W_FACTOR                 :0x2
14:31:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:44: FILE_FORMAT_GRP                               :0x0
14:31:44: COPY flag                                     :0x1
14:31:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:44: File_Format                                   :0x0
14:31:44: CRC                                           :0x0
14:31:44: ####CSD Registe Values####  

14:31:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:44: [GetSCRRegisterEntry] Passed
14:31:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:44: Data_Status_After Erases          : 0
14:31:44: CPRM Security Support             : No Security
14:31:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:44: Spec. Version                     : Version 3.0X
14:31:44: Extended Security Support         : Extended_Security_Not_Supported
14:31:44: Command Support                   : COMMAND_SUPPORT
14:31:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FFC0>, <py_sfcl.CommandDataDefinition object at 0x066831E0>) , Command count = 211 ] 
14:31:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683060>, <py_sfcl.CommandDataDefinition object at 0x06683090>) , Command count = 212 ] 
14:31:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:44: [ SetBusWidth(0x4) , Command count = 213 ] 
14:31:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 214 ] 
14:31:44: Protected Area Size 0x28000
14:31:44: Bus Width           2
14:31:44: Secure Mode         0
14:31:44: Speed  Class        4
14:31:44: Perf Move           0
14:31:44: Au Size             9
14:31:44: Erase Size          15
14:31:44: Erase Timeout       1
14:31:44: Erase offset        1
14:31:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 215 ] 
14:31:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:45: Host Frequency set to 100000 KHz
14:31:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:45: ####CSD Registe 2.0 Values####
14:31:45: CSD_STRUCTURE                                 :0x1
14:31:45: Reserv1                                       :0x0
14:31:45: Time Access 1 TAAC                            :0xe
14:31:45: Time Access 2 NSAC*100                        :0x0
14:31:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:45: Card Command Classess CCC                     :0x5b5
14:31:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:45: DSR(driver stage register)  DSR_IMP           :0x0
14:31:45: Reserv2                                       :0x0
14:31:45: Device Size C_SIZE                            :0xedc8
14:31:45: Reserv3                                       :0x0
14:31:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:45: Reserv4                                       :0x0
14:31:45: Write Speed Factor R2W_FACTOR                 :0x2
14:31:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:45: FILE_FORMAT_GRP                               :0x0
14:31:45: COPY flag                                     :0x1
14:31:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:45: File_Format                                   :0x0
14:31:45: CRC                                           :0x0
14:31:45: ####CSD Registe Values####  

14:31:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066833F0>, <py_sfcl.CommandDataDefinition object at 0x06683210>) , Command count = 216 ] 
14:31:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683270>, <py_sfcl.CommandDataDefinition object at 0x066832A0>) , Command count = 217 ] 
14:31:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:45: [DVTCommonLib]### Erase :Erase API Called
14:31:45: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xA000 with Blockcount:0x2001
14:31:45: [ EraseLba(0xA000, 0x2001) , Command count = 218 ] 
14:31:45: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xA000 with Blockcount:0x2001 

14:31:45: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 22
14:31:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xC000 to EndLba:0xC008 with Increment Pattern
14:31:45: [ WrLbaNoData(0xC000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 219 ] 
14:31:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xC000 to EndLba:0xC008 with Increment Pattern 

14:31:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683360>, <py_sfcl.CommandDataDefinition object at 0x06683390>) , Command count = 220 ] 
14:31:45: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:31:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683420>, <py_sfcl.CommandDataDefinition object at 0x06683450>) , Command count = 221 ] 
14:31:45: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:31:45: [DVTCommonLib]###  R1bCommandAbort called
14:31:45: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x17, False) , Command count = 222 ] 
14:31:45: [DVTCommonLib]###  R1bCommandAbort Completed 

14:31:45: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:47: Host Frequency set to 25000 KHz
14:31:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:47: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x066836C0>, 0x0, True) , Command count = 223 ] 
14:31:47: [GO18_globalSetVolt]### Host voltage value is set.
14:31:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683510>, 0x0, False) , Command count = 224 ] 
14:31:47: [GO18_globalSetVolt]### Host voltage value is set.
14:31:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 225 ] 
14:31:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 226 ] 
14:31:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 227 ] 
14:31:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683660>, <py_sfcl.CommandDataDefinition object at 0x06683600>) , Command count = 228 ] 
14:31:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683690>, <py_sfcl.CommandDataDefinition object at 0x066836F0>) , Command count = 229 ] 
14:31:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:47: [ SetCardRCA(0x1, 0xD555) , Command count = 230 ] 
14:31:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:47: Host Frequency set to 25000 KHz
14:31:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:47: ####CSD Registe 2.0 Values####
14:31:47: CSD_STRUCTURE                                 :0x1
14:31:47: Reserv1                                       :0x0
14:31:47: Time Access 1 TAAC                            :0xe
14:31:47: Time Access 2 NSAC*100                        :0x0
14:31:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:47: Card Command Classess CCC                     :0x5b5
14:31:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:47: DSR(driver stage register)  DSR_IMP           :0x0
14:31:47: Reserv2                                       :0x0
14:31:47: Device Size C_SIZE                            :0xedc8
14:31:47: Reserv3                                       :0x0
14:31:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:47: Reserv4                                       :0x0
14:31:47: Write Speed Factor R2W_FACTOR                 :0x2
14:31:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:47: FILE_FORMAT_GRP                               :0x0
14:31:47: COPY flag                                     :0x1
14:31:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:47: File_Format                                   :0x0
14:31:47: CRC                                           :0x0
14:31:47: ####CSD Registe Values####  

14:31:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:47: [GetSCRRegisterEntry] Passed
14:31:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:47: Data_Status_After Erases          : 0
14:31:47: CPRM Security Support             : No Security
14:31:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:47: Spec. Version                     : Version 3.0X
14:31:47: Extended Security Support         : Extended_Security_Not_Supported
14:31:47: Command Support                   : COMMAND_SUPPORT
14:31:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683960>, <py_sfcl.CommandDataDefinition object at 0x06683780>) , Command count = 231 ] 
14:31:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066837E0>, <py_sfcl.CommandDataDefinition object at 0x06683810>) , Command count = 232 ] 
14:31:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:47: [ SetBusWidth(0x4) , Command count = 233 ] 
14:31:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066838D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 234 ] 
14:31:47: Protected Area Size 0x28000
14:31:47: Bus Width           2
14:31:47: Secure Mode         0
14:31:47: Speed  Class        4
14:31:47: Perf Move           0
14:31:47: Au Size             9
14:31:47: Erase Size          15
14:31:47: Erase Timeout       1
14:31:47: Erase offset        1
14:31:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 235 ] 
14:31:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:47: Host Frequency set to 100000 KHz
14:31:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:47: ####CSD Registe 2.0 Values####
14:31:47: CSD_STRUCTURE                                 :0x1
14:31:47: Reserv1                                       :0x0
14:31:47: Time Access 1 TAAC                            :0xe
14:31:47: Time Access 2 NSAC*100                        :0x0
14:31:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:47: Card Command Classess CCC                     :0x5b5
14:31:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:47: DSR(driver stage register)  DSR_IMP           :0x0
14:31:47: Reserv2                                       :0x0
14:31:47: Device Size C_SIZE                            :0xedc8
14:31:47: Reserv3                                       :0x0
14:31:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:47: Reserv4                                       :0x0
14:31:47: Write Speed Factor R2W_FACTOR                 :0x2
14:31:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:47: FILE_FORMAT_GRP                               :0x0
14:31:47: COPY flag                                     :0x1
14:31:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:47: File_Format                                   :0x0
14:31:47: CRC                                           :0x0
14:31:47: ####CSD Registe Values####  

14:31:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683B70>, <py_sfcl.CommandDataDefinition object at 0x06683990>) , Command count = 236 ] 
14:31:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066839F0>, <py_sfcl.CommandDataDefinition object at 0x06683A20>) , Command count = 237 ] 
14:31:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:47: [DVTCommonLib]### Erase :Erase API Called
14:31:47: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xC000 with Blockcount:0x2001
14:31:47: [ EraseLba(0xC000, 0x2001) , Command count = 238 ] 
14:31:47: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xC000 with Blockcount:0x2001 

14:31:47: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 21
14:31:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xE000 to EndLba:0xE008 with Increment Pattern
14:31:47: [ WrLbaNoData(0xE000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 239 ] 
14:31:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xE000 to EndLba:0xE008 with Increment Pattern 

14:31:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683AE0>, <py_sfcl.CommandDataDefinition object at 0x06683B10>) , Command count = 240 ] 
14:31:47: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:31:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683BA0>, <py_sfcl.CommandDataDefinition object at 0x06683BD0>) , Command count = 241 ] 
14:31:47: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:31:47: [DVTCommonLib]###  R1bCommandAbort called
14:31:47: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x15, False) , Command count = 242 ] 
14:31:47: [DVTCommonLib]###  R1bCommandAbort Completed 

14:31:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:50: Host Frequency set to 25000 KHz
14:31:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683E40>, 0x0, True) , Command count = 243 ] 
14:31:50: [GO18_globalSetVolt]### Host voltage value is set.
14:31:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683C90>, 0x0, False) , Command count = 244 ] 
14:31:50: [GO18_globalSetVolt]### Host voltage value is set.
14:31:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 245 ] 
14:31:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 246 ] 
14:31:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 247 ] 
14:31:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683DE0>, <py_sfcl.CommandDataDefinition object at 0x06683D80>) , Command count = 248 ] 
14:31:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683E10>, <py_sfcl.CommandDataDefinition object at 0x06683E70>) , Command count = 249 ] 
14:31:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:50: [ SetCardRCA(0x1, 0xD555) , Command count = 250 ] 
14:31:50: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:50: Host Frequency set to 25000 KHz
14:31:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:50: ####CSD Registe 2.0 Values####
14:31:50: CSD_STRUCTURE                                 :0x1
14:31:50: Reserv1                                       :0x0
14:31:50: Time Access 1 TAAC                            :0xe
14:31:50: Time Access 2 NSAC*100                        :0x0
14:31:50: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:50: Card Command Classess CCC                     :0x5b5
14:31:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:50: DSR(driver stage register)  DSR_IMP           :0x0
14:31:50: Reserv2                                       :0x0
14:31:50: Device Size C_SIZE                            :0xedc8
14:31:50: Reserv3                                       :0x0
14:31:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:50: Reserv4                                       :0x0
14:31:50: Write Speed Factor R2W_FACTOR                 :0x2
14:31:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:50: FILE_FORMAT_GRP                               :0x0
14:31:50: COPY flag                                     :0x1
14:31:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:50: File_Format                                   :0x0
14:31:50: CRC                                           :0x0
14:31:50: ####CSD Registe Values####  

14:31:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:50: [GetSCRRegisterEntry] Passed
14:31:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:50: Data_Status_After Erases          : 0
14:31:50: CPRM Security Support             : No Security
14:31:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:50: Spec. Version                     : Version 3.0X
14:31:50: Extended Security Support         : Extended_Security_Not_Supported
14:31:50: Command Support                   : COMMAND_SUPPORT
14:31:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683F00>, <py_sfcl.CommandDataDefinition object at 0x06683F30>) , Command count = 251 ] 
14:31:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05EE6B70>, <py_sfcl.CommandDataDefinition object at 0x06683F90>) , Command count = 252 ] 
14:31:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:50: [ SetBusWidth(0x4) , Command count = 253 ] 
14:31:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685060>, <0x200/0x200, Spc, pat:0x0>) , Command count = 254 ] 
14:31:50: Protected Area Size 0x28000
14:31:50: Bus Width           2
14:31:50: Secure Mode         0
14:31:50: Speed  Class        4
14:31:50: Perf Move           0
14:31:50: Au Size             9
14:31:50: Erase Size          15
14:31:50: Erase Timeout       1
14:31:50: Erase offset        1
14:31:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 255 ] 
14:31:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:50: Host Frequency set to 100000 KHz
14:31:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:50: ####CSD Registe 2.0 Values####
14:31:50: CSD_STRUCTURE                                 :0x1
14:31:50: Reserv1                                       :0x0
14:31:50: Time Access 1 TAAC                            :0xe
14:31:50: Time Access 2 NSAC*100                        :0x0
14:31:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:50: Card Command Classess CCC                     :0x5b5
14:31:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:50: DSR(driver stage register)  DSR_IMP           :0x0
14:31:50: Reserv2                                       :0x0
14:31:50: Device Size C_SIZE                            :0xedc8
14:31:50: Reserv3                                       :0x0
14:31:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:50: Reserv4                                       :0x0
14:31:50: Write Speed Factor R2W_FACTOR                 :0x2
14:31:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:50: FILE_FORMAT_GRP                               :0x0
14:31:50: COPY flag                                     :0x1
14:31:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:50: File_Format                                   :0x0
14:31:50: CRC                                           :0x0
14:31:50: ####CSD Registe Values####  

14:31:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC0480>, <py_sfcl.CommandDataDefinition object at 0x05FC6F90>) , Command count = 256 ] 
14:31:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E42840>, <py_sfcl.CommandDataDefinition object at 0x066850C0>) , Command count = 257 ] 
14:31:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:50: [DVTCommonLib]### Erase :Erase API Called
14:31:50: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xE000 with Blockcount:0x2001
14:31:50: [ EraseLba(0xE000, 0x2001) , Command count = 258 ] 
14:31:50: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xE000 with Blockcount:0x2001 

14:31:50: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 20
14:31:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x10000 to EndLba:0x10008 with Increment Pattern
14:31:50: [ WrLbaNoData(0x10000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 259 ] 
14:31:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x10000 to EndLba:0x10008 with Increment Pattern 

14:31:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8C60>, <py_sfcl.CommandDataDefinition object at 0x06685120>) , Command count = 260 ] 
14:31:50: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:31:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8CC0>, <py_sfcl.CommandDataDefinition object at 0x06685180>) , Command count = 261 ] 
14:31:50: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:31:50: [DVTCommonLib]###  R1bCommandAbort called
14:31:50: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xB, False) , Command count = 262 ] 
14:31:50: [DVTCommonLib]###  R1bCommandAbort Completed 

14:31:50: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:52: Host Frequency set to 25000 KHz
14:31:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:52: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FED1B0>, 0x0, True) , Command count = 263 ] 
14:31:52: [GO18_globalSetVolt]### Host voltage value is set.
14:31:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FEDAE0>, 0x0, False) , Command count = 264 ] 
14:31:52: [GO18_globalSetVolt]### Host voltage value is set.
14:31:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 265 ] 
14:31:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 266 ] 
14:31:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 267 ] 
14:31:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8F00>, <py_sfcl.CommandDataDefinition object at 0x06685210>) , Command count = 268 ] 
14:31:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602B6C0>, <py_sfcl.CommandDataDefinition object at 0x06685270>) , Command count = 269 ] 
14:31:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:53: [ SetCardRCA(0x1, 0xD555) , Command count = 270 ] 
14:31:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:53: Host Frequency set to 25000 KHz
14:31:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:53: ####CSD Registe 2.0 Values####
14:31:53: CSD_STRUCTURE                                 :0x1
14:31:53: Reserv1                                       :0x0
14:31:53: Time Access 1 TAAC                            :0xe
14:31:53: Time Access 2 NSAC*100                        :0x0
14:31:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:53: Card Command Classess CCC                     :0x5b5
14:31:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:53: DSR(driver stage register)  DSR_IMP           :0x0
14:31:53: Reserv2                                       :0x0
14:31:53: Device Size C_SIZE                            :0xedc8
14:31:53: Reserv3                                       :0x0
14:31:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:53: Reserv4                                       :0x0
14:31:53: Write Speed Factor R2W_FACTOR                 :0x2
14:31:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:53: FILE_FORMAT_GRP                               :0x0
14:31:53: COPY flag                                     :0x1
14:31:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:53: File_Format                                   :0x0
14:31:53: CRC                                           :0x0
14:31:53: ####CSD Registe Values####  

14:31:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:53: [GetSCRRegisterEntry] Passed
14:31:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:53: Data_Status_After Erases          : 0
14:31:53: CPRM Security Support             : No Security
14:31:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:53: Spec. Version                     : Version 3.0X
14:31:53: Extended Security Support         : Extended_Security_Not_Supported
14:31:53: Command Support                   : COMMAND_SUPPORT
14:31:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6360>, <py_sfcl.CommandDataDefinition object at 0x066854E0>) , Command count = 271 ] 
14:31:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDADB0>, <py_sfcl.CommandDataDefinition object at 0x06685330>) , Command count = 272 ] 
14:31:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:53: [ SetBusWidth(0x4) , Command count = 273 ] 
14:31:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685390>, <0x200/0x200, Spc, pat:0x0>) , Command count = 274 ] 
14:31:53: Protected Area Size 0x28000
14:31:53: Bus Width           2
14:31:53: Secure Mode         0
14:31:53: Speed  Class        4
14:31:53: Perf Move           0
14:31:53: Au Size             9
14:31:53: Erase Size          15
14:31:53: Erase Timeout       1
14:31:53: Erase offset        1
14:31:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 275 ] 
14:31:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:53: Host Frequency set to 100000 KHz
14:31:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:53: ####CSD Registe 2.0 Values####
14:31:53: CSD_STRUCTURE                                 :0x1
14:31:53: Reserv1                                       :0x0
14:31:53: Time Access 1 TAAC                            :0xe
14:31:53: Time Access 2 NSAC*100                        :0x0
14:31:53: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:53: Card Command Classess CCC                     :0x5b5
14:31:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:53: DSR(driver stage register)  DSR_IMP           :0x0
14:31:53: Reserv2                                       :0x0
14:31:53: Device Size C_SIZE                            :0xedc8
14:31:53: Reserv3                                       :0x0
14:31:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:53: Reserv4                                       :0x0
14:31:53: Write Speed Factor R2W_FACTOR                 :0x2
14:31:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:53: FILE_FORMAT_GRP                               :0x0
14:31:53: COPY flag                                     :0x1
14:31:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:53: File_Format                                   :0x0
14:31:53: CRC                                           :0x0
14:31:53: ####CSD Registe Values####  

14:31:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BE10>, <py_sfcl.CommandDataDefinition object at 0x06685600>) , Command count = 276 ] 
14:31:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060327B0>, <py_sfcl.CommandDataDefinition object at 0x06685450>) , Command count = 277 ] 
14:31:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:53: [DVTCommonLib]### Erase :Erase API Called
14:31:53: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x10000 with Blockcount:0x2001
14:31:53: [ EraseLba(0x10000, 0x2001) , Command count = 278 ] 
14:31:53: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x10000 with Blockcount:0x2001 

14:31:53: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 19
14:31:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x12000 to EndLba:0x12008 with Increment Pattern
14:31:53: [ WrLbaNoData(0x12000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 279 ] 
14:31:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x12000 to EndLba:0x12008 with Increment Pattern 

14:31:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032840>, <py_sfcl.CommandDataDefinition object at 0x066854B0>) , Command count = 280 ] 
14:31:53: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:31:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032960>, <py_sfcl.CommandDataDefinition object at 0x06685540>) , Command count = 281 ] 
14:31:53: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:31:53: [DVTCommonLib]###  R1bCommandAbort called
14:31:53: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x25, False) , Command count = 282 ] 
14:31:53: [DVTCommonLib]###  R1bCommandAbort Completed 

14:31:53: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:55: Host Frequency set to 25000 KHz
14:31:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x06032A80>, 0x0, True) , Command count = 283 ] 
14:31:55: [GO18_globalSetVolt]### Host voltage value is set.
14:31:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x06032AB0>, 0x0, False) , Command count = 284 ] 
14:31:55: [GO18_globalSetVolt]### Host voltage value is set.
14:31:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 285 ] 
14:31:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 286 ] 
14:31:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 287 ] 
14:31:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032BA0>, <py_sfcl.CommandDataDefinition object at 0x066855D0>) , Command count = 288 ] 
14:31:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032B40>, <py_sfcl.CommandDataDefinition object at 0x06685630>) , Command count = 289 ] 
14:31:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:55: [ SetCardRCA(0x1, 0xD555) , Command count = 290 ] 
14:31:56: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:56: Host Frequency set to 25000 KHz
14:31:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:56: ####CSD Registe 2.0 Values####
14:31:56: CSD_STRUCTURE                                 :0x1
14:31:56: Reserv1                                       :0x0
14:31:56: Time Access 1 TAAC                            :0xe
14:31:56: Time Access 2 NSAC*100                        :0x0
14:31:56: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:56: Card Command Classess CCC                     :0x5b5
14:31:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:56: DSR(driver stage register)  DSR_IMP           :0x0
14:31:56: Reserv2                                       :0x0
14:31:56: Device Size C_SIZE                            :0xedc8
14:31:56: Reserv3                                       :0x0
14:31:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:56: Reserv4                                       :0x0
14:31:56: Write Speed Factor R2W_FACTOR                 :0x2
14:31:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:56: FILE_FORMAT_GRP                               :0x0
14:31:56: COPY flag                                     :0x1
14:31:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:56: File_Format                                   :0x0
14:31:56: CRC                                           :0x0
14:31:56: ####CSD Registe Values####  

14:31:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:56: [GetSCRRegisterEntry] Passed
14:31:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:56: Data_Status_After Erases          : 0
14:31:56: CPRM Security Support             : No Security
14:31:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:56: Spec. Version                     : Version 3.0X
14:31:56: Extended Security Support         : Extended_Security_Not_Supported
14:31:56: Command Support                   : COMMAND_SUPPORT
14:31:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032E10>, <py_sfcl.CommandDataDefinition object at 0x066858A0>) , Command count = 291 ] 
14:31:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572060>, <py_sfcl.CommandDataDefinition object at 0x066856F0>) , Command count = 292 ] 
14:31:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:56: [ SetBusWidth(0x4) , Command count = 293 ] 
14:31:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06572330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 294 ] 
14:31:56: Protected Area Size 0x28000
14:31:56: Bus Width           2
14:31:56: Secure Mode         0
14:31:56: Speed  Class        4
14:31:56: Perf Move           0
14:31:56: Au Size             9
14:31:56: Erase Size          15
14:31:56: Erase Timeout       1
14:31:56: Erase offset        1
14:31:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 295 ] 
14:31:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:56: Host Frequency set to 100000 KHz
14:31:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:56: ####CSD Registe 2.0 Values####
14:31:56: CSD_STRUCTURE                                 :0x1
14:31:56: Reserv1                                       :0x0
14:31:56: Time Access 1 TAAC                            :0xe
14:31:56: Time Access 2 NSAC*100                        :0x0
14:31:56: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:56: Card Command Classess CCC                     :0x5b5
14:31:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:56: DSR(driver stage register)  DSR_IMP           :0x0
14:31:56: Reserv2                                       :0x0
14:31:56: Device Size C_SIZE                            :0xedc8
14:31:56: Reserv3                                       :0x0
14:31:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:56: Reserv4                                       :0x0
14:31:56: Write Speed Factor R2W_FACTOR                 :0x2
14:31:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:56: FILE_FORMAT_GRP                               :0x0
14:31:56: COPY flag                                     :0x1
14:31:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:56: File_Format                                   :0x0
14:31:56: CRC                                           :0x0
14:31:56: ####CSD Registe Values####  

14:31:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BF90>, <py_sfcl.CommandDataDefinition object at 0x06685960>) , Command count = 296 ] 
14:31:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066857B0>, <py_sfcl.CommandDataDefinition object at 0x066857E0>) , Command count = 297 ] 
14:31:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:56: [DVTCommonLib]### Erase :Erase API Called
14:31:56: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x12000 with Blockcount:0x2001
14:31:56: [ EraseLba(0x12000, 0x2001) , Command count = 298 ] 
14:31:56: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x12000 with Blockcount:0x2001 

14:31:56: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 18
14:31:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x14000 to EndLba:0x14008 with Increment Pattern
14:31:56: [ WrLbaNoData(0x14000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 299 ] 
14:31:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x14000 to EndLba:0x14008 with Increment Pattern 

14:31:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666BA0>, <py_sfcl.CommandDataDefinition object at 0x06666C60>) , Command count = 300 ] 
14:31:56: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:31:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666870>, <py_sfcl.CommandDataDefinition object at 0x06666D50>) , Command count = 301 ] 
14:31:56: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:31:56: [DVTCommonLib]###  R1bCommandAbort called
14:31:56: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x13, False) , Command count = 302 ] 
14:31:56: [DVTCommonLib]###  R1bCommandAbort Completed 

14:31:56: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:58: Host Frequency set to 25000 KHz
14:31:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:58: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x06685B10>, 0x0, True) , Command count = 303 ] 
14:31:58: [GO18_globalSetVolt]### Host voltage value is set.
14:31:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666750>, 0x0, False) , Command count = 304 ] 
14:31:58: [GO18_globalSetVolt]### Host voltage value is set.
14:31:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 305 ] 
14:31:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 306 ] 
14:31:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 307 ] 
14:31:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066667E0>, <py_sfcl.CommandDataDefinition object at 0x066666F0>) , Command count = 308 ] 
14:31:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666960>, <py_sfcl.CommandDataDefinition object at 0x06666FC0>) , Command count = 309 ] 
14:31:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:58: [ SetCardRCA(0x1, 0xD555) , Command count = 310 ] 
14:31:58: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:58: Host Frequency set to 25000 KHz
14:31:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:58: ####CSD Registe 2.0 Values####
14:31:58: CSD_STRUCTURE                                 :0x1
14:31:58: Reserv1                                       :0x0
14:31:58: Time Access 1 TAAC                            :0xe
14:31:58: Time Access 2 NSAC*100                        :0x0
14:31:58: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:58: Card Command Classess CCC                     :0x5b5
14:31:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:58: DSR(driver stage register)  DSR_IMP           :0x0
14:31:58: Reserv2                                       :0x0
14:31:58: Device Size C_SIZE                            :0xedc8
14:31:58: Reserv3                                       :0x0
14:31:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:58: Reserv4                                       :0x0
14:31:58: Write Speed Factor R2W_FACTOR                 :0x2
14:31:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:58: FILE_FORMAT_GRP                               :0x0
14:31:58: COPY flag                                     :0x1
14:31:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:58: File_Format                                   :0x0
14:31:58: CRC                                           :0x0
14:31:58: ####CSD Registe Values####  

14:31:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:58: [GetSCRRegisterEntry] Passed
14:31:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:58: Data_Status_After Erases          : 0
14:31:58: CPRM Security Support             : No Security
14:31:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:58: Spec. Version                     : Version 3.0X
14:31:58: Extended Security Support         : Extended_Security_Not_Supported
14:31:58: Command Support                   : COMMAND_SUPPORT
14:31:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065721E0>, <py_sfcl.CommandDataDefinition object at 0x066662D0>) , Command count = 311 ] 
14:31:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666A80>, <py_sfcl.CommandDataDefinition object at 0x06666B10>) , Command count = 312 ] 
14:31:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:58: [ SetBusWidth(0x4) , Command count = 313 ] 
14:31:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066663F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 314 ] 
14:31:58: Protected Area Size 0x28000
14:31:58: Bus Width           2
14:31:58: Secure Mode         0
14:31:58: Speed  Class        4
14:31:58: Perf Move           0
14:31:58: Au Size             9
14:31:58: Erase Size          15
14:31:58: Erase Timeout       1
14:31:58: Erase offset        1
14:31:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 315 ] 
14:31:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:59: Host Frequency set to 100000 KHz
14:31:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:59: ####CSD Registe 2.0 Values####
14:31:59: CSD_STRUCTURE                                 :0x1
14:31:59: Reserv1                                       :0x0
14:31:59: Time Access 1 TAAC                            :0xe
14:31:59: Time Access 2 NSAC*100                        :0x0
14:31:59: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:59: Card Command Classess CCC                     :0x5b5
14:31:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:59: DSR(driver stage register)  DSR_IMP           :0x0
14:31:59: Reserv2                                       :0x0
14:31:59: Device Size C_SIZE                            :0xedc8
14:31:59: Reserv3                                       :0x0
14:31:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:59: Reserv4                                       :0x0
14:31:59: Write Speed Factor R2W_FACTOR                 :0x2
14:31:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:59: FILE_FORMAT_GRP                               :0x0
14:31:59: COPY flag                                     :0x1
14:31:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:59: File_Format                                   :0x0
14:31:59: CRC                                           :0x0
14:31:59: ####CSD Registe Values####  

14:31:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB120>, <py_sfcl.CommandDataDefinition object at 0x06666DE0>) , Command count = 316 ] 
14:31:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB300>, <py_sfcl.CommandDataDefinition object at 0x066AB180>) , Command count = 317 ] 
14:31:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:59: [DVTCommonLib]### Erase :Erase API Called
14:31:59: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x14000 with Blockcount:0x2001
14:31:59: [ EraseLba(0x14000, 0x2001) , Command count = 318 ] 
14:31:59: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x14000 with Blockcount:0x2001 

14:31:59: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 17
14:31:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x16000 to EndLba:0x16008 with Increment Pattern
14:31:59: [ WrLbaNoData(0x16000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 319 ] 
14:31:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x16000 to EndLba:0x16008 with Increment Pattern 

14:31:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB210>, <py_sfcl.CommandDataDefinition object at 0x06666D80>) , Command count = 320 ] 
14:31:59: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:31:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066662A0>, <py_sfcl.CommandDataDefinition object at 0x06666B40>) , Command count = 321 ] 
14:31:59: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:31:59: [DVTCommonLib]###  R1bCommandAbort called
14:31:59: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2A, False) , Command count = 322 ] 
14:31:59: [DVTCommonLib]###  R1bCommandAbort Completed 

14:31:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:01: Host Frequency set to 25000 KHz
14:32:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB390>, 0x0, True) , Command count = 323 ] 
14:32:01: [GO18_globalSetVolt]### Host voltage value is set.
14:32:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB2D0>, 0x0, False) , Command count = 324 ] 
14:32:01: [GO18_globalSetVolt]### Host voltage value is set.
14:32:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 325 ] 
14:32:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 326 ] 
14:32:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 327 ] 
14:32:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666570>, <py_sfcl.CommandDataDefinition object at 0x066AB570>) , Command count = 328 ] 
14:32:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB3F0>, <py_sfcl.CommandDataDefinition object at 0x066AB420>) , Command count = 329 ] 
14:32:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:01: [ SetCardRCA(0x1, 0xD555) , Command count = 330 ] 
14:32:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:01: Host Frequency set to 25000 KHz
14:32:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:01: ####CSD Registe 2.0 Values####
14:32:01: CSD_STRUCTURE                                 :0x1
14:32:01: Reserv1                                       :0x0
14:32:01: Time Access 1 TAAC                            :0xe
14:32:01: Time Access 2 NSAC*100                        :0x0
14:32:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:01: Card Command Classess CCC                     :0x5b5
14:32:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:01: DSR(driver stage register)  DSR_IMP           :0x0
14:32:01: Reserv2                                       :0x0
14:32:01: Device Size C_SIZE                            :0xedc8
14:32:01: Reserv3                                       :0x0
14:32:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:01: Reserv4                                       :0x0
14:32:01: Write Speed Factor R2W_FACTOR                 :0x2
14:32:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:01: FILE_FORMAT_GRP                               :0x0
14:32:01: COPY flag                                     :0x1
14:32:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:01: File_Format                                   :0x0
14:32:01: CRC                                           :0x0
14:32:01: ####CSD Registe Values####  

14:32:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:01: [GetSCRRegisterEntry] Passed
14:32:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:01: Data_Status_After Erases          : 0
14:32:01: CPRM Security Support             : No Security
14:32:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:01: Spec. Version                     : Version 3.0X
14:32:01: Extended Security Support         : Extended_Security_Not_Supported
14:32:01: Command Support                   : COMMAND_SUPPORT
14:32:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB5D0>, <py_sfcl.CommandDataDefinition object at 0x066AB690>) , Command count = 331 ] 
14:32:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB480>, <py_sfcl.CommandDataDefinition object at 0x066AB360>) , Command count = 332 ] 
14:32:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:01: [ SetBusWidth(0x4) , Command count = 333 ] 
14:32:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066ABDE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 334 ] 
14:32:01: Protected Area Size 0x28000
14:32:01: Bus Width           2
14:32:01: Secure Mode         0
14:32:01: Speed  Class        4
14:32:01: Perf Move           0
14:32:01: Au Size             9
14:32:01: Erase Size          15
14:32:01: Erase Timeout       1
14:32:01: Erase offset        1
14:32:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 335 ] 
14:32:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:01: Host Frequency set to 100000 KHz
14:32:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:01: ####CSD Registe 2.0 Values####
14:32:01: CSD_STRUCTURE                                 :0x1
14:32:01: Reserv1                                       :0x0
14:32:01: Time Access 1 TAAC                            :0xe
14:32:01: Time Access 2 NSAC*100                        :0x0
14:32:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:01: Card Command Classess CCC                     :0x5b5
14:32:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:01: DSR(driver stage register)  DSR_IMP           :0x0
14:32:01: Reserv2                                       :0x0
14:32:01: Device Size C_SIZE                            :0xedc8
14:32:01: Reserv3                                       :0x0
14:32:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:01: Reserv4                                       :0x0
14:32:01: Write Speed Factor R2W_FACTOR                 :0x2
14:32:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:01: FILE_FORMAT_GRP                               :0x0
14:32:01: COPY flag                                     :0x1
14:32:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:01: File_Format                                   :0x0
14:32:01: CRC                                           :0x0
14:32:01: ####CSD Registe Values####  

14:32:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABEA0>, <py_sfcl.CommandDataDefinition object at 0x066ABF60>) , Command count = 336 ] 
14:32:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06685B70>, <py_sfcl.CommandDataDefinition object at 0x066859F0>) , Command count = 337 ] 
14:32:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:01: [DVTCommonLib]### Erase :Erase API Called
14:32:01: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x16000 with Blockcount:0x2001
14:32:01: [ EraseLba(0x16000, 0x2001) , Command count = 338 ] 
14:32:01: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x16000 with Blockcount:0x2001 

14:32:01: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 16
14:32:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x18000 to EndLba:0x18008 with Increment Pattern
14:32:01: [ WrLbaNoData(0x18000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 339 ] 
14:32:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x18000 to EndLba:0x18008 with Increment Pattern 

14:32:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A060>, <py_sfcl.CommandDataDefinition object at 0x066ABF90>) , Command count = 340 ] 
14:32:01: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A090>, <py_sfcl.CommandDataDefinition object at 0x06685B70>) , Command count = 341 ] 
14:32:01: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:01: [DVTCommonLib]###  R1bCommandAbort called
14:32:01: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x7, False) , Command count = 342 ] 
14:32:01: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:01: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:04: Host Frequency set to 25000 KHz
14:32:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:04: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A2A0>, 0x0, True) , Command count = 343 ] 
14:32:04: [GO18_globalSetVolt]### Host voltage value is set.
14:32:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A1B0>, 0x0, False) , Command count = 344 ] 
14:32:04: [GO18_globalSetVolt]### Host voltage value is set.
14:32:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 345 ] 
14:32:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 346 ] 
14:32:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 347 ] 
14:32:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A510>, <py_sfcl.CommandDataDefinition object at 0x0667A330>) , Command count = 348 ] 
14:32:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A360>, <py_sfcl.CommandDataDefinition object at 0x0667A120>) , Command count = 349 ] 
14:32:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:04: [ SetCardRCA(0x1, 0xD555) , Command count = 350 ] 
14:32:04: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:04: Host Frequency set to 25000 KHz
14:32:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:04: ####CSD Registe 2.0 Values####
14:32:04: CSD_STRUCTURE                                 :0x1
14:32:04: Reserv1                                       :0x0
14:32:04: Time Access 1 TAAC                            :0xe
14:32:04: Time Access 2 NSAC*100                        :0x0
14:32:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:04: Card Command Classess CCC                     :0x5b5
14:32:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:04: DSR(driver stage register)  DSR_IMP           :0x0
14:32:04: Reserv2                                       :0x0
14:32:04: Device Size C_SIZE                            :0xedc8
14:32:04: Reserv3                                       :0x0
14:32:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:04: Reserv4                                       :0x0
14:32:04: Write Speed Factor R2W_FACTOR                 :0x2
14:32:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:04: FILE_FORMAT_GRP                               :0x0
14:32:04: COPY flag                                     :0x1
14:32:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:04: File_Format                                   :0x0
14:32:04: CRC                                           :0x0
14:32:04: ####CSD Registe Values####  

14:32:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:04: [GetSCRRegisterEntry] Passed
14:32:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:04: Data_Status_After Erases          : 0
14:32:04: CPRM Security Support             : No Security
14:32:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:04: Spec. Version                     : Version 3.0X
14:32:04: Extended Security Support         : Extended_Security_Not_Supported
14:32:04: Command Support                   : COMMAND_SUPPORT
14:32:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A390>, <py_sfcl.CommandDataDefinition object at 0x0667A3C0>) , Command count = 351 ] 
14:32:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A480>, <py_sfcl.CommandDataDefinition object at 0x0667A4B0>) , Command count = 352 ] 
14:32:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:04: [ SetBusWidth(0x4) , Command count = 353 ] 
14:32:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 354 ] 
14:32:04: Protected Area Size 0x28000
14:32:04: Bus Width           2
14:32:04: Secure Mode         0
14:32:04: Speed  Class        4
14:32:04: Perf Move           0
14:32:04: Au Size             9
14:32:04: Erase Size          15
14:32:04: Erase Timeout       1
14:32:04: Erase offset        1
14:32:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 355 ] 
14:32:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:04: Host Frequency set to 100000 KHz
14:32:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:04: ####CSD Registe 2.0 Values####
14:32:04: CSD_STRUCTURE                                 :0x1
14:32:04: Reserv1                                       :0x0
14:32:04: Time Access 1 TAAC                            :0xe
14:32:04: Time Access 2 NSAC*100                        :0x0
14:32:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:04: Card Command Classess CCC                     :0x5b5
14:32:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:04: DSR(driver stage register)  DSR_IMP           :0x0
14:32:04: Reserv2                                       :0x0
14:32:04: Device Size C_SIZE                            :0xedc8
14:32:04: Reserv3                                       :0x0
14:32:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:04: Reserv4                                       :0x0
14:32:04: Write Speed Factor R2W_FACTOR                 :0x2
14:32:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:04: FILE_FORMAT_GRP                               :0x0
14:32:04: COPY flag                                     :0x1
14:32:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:04: File_Format                                   :0x0
14:32:04: CRC                                           :0x0
14:32:04: ####CSD Registe Values####  

14:32:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A720>, <py_sfcl.CommandDataDefinition object at 0x0667A840>) , Command count = 356 ] 
14:32:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A300>, <py_sfcl.CommandDataDefinition object at 0x06685B40>) , Command count = 357 ] 
14:32:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:04: [DVTCommonLib]### Erase :Erase API Called
14:32:04: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x18000 with Blockcount:0x2001
14:32:04: [ EraseLba(0x18000, 0x2001) , Command count = 358 ] 
14:32:04: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x18000 with Blockcount:0x2001 

14:32:04: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 15
14:32:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1A000 to EndLba:0x1A008 with Increment Pattern
14:32:04: [ WrLbaNoData(0x1A000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 359 ] 
14:32:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1A000 to EndLba:0x1A008 with Increment Pattern 

14:32:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A7E0>, <py_sfcl.CommandDataDefinition object at 0x0667A780>) , Command count = 360 ] 
14:32:04: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A8D0>, <py_sfcl.CommandDataDefinition object at 0x0667A7B0>) , Command count = 361 ] 
14:32:04: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:04: [DVTCommonLib]###  R1bCommandAbort called
14:32:04: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x28, False) , Command count = 362 ] 
14:32:04: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:06: Host Frequency set to 25000 KHz
14:32:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AAE0>, 0x0, True) , Command count = 363 ] 
14:32:06: [GO18_globalSetVolt]### Host voltage value is set.
14:32:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A9F0>, 0x0, False) , Command count = 364 ] 
14:32:06: [GO18_globalSetVolt]### Host voltage value is set.
14:32:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 365 ] 
14:32:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 366 ] 
14:32:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 367 ] 
14:32:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AD20>, <py_sfcl.CommandDataDefinition object at 0x0667AB40>) , Command count = 368 ] 
14:32:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AC90>, <py_sfcl.CommandDataDefinition object at 0x0667A1E0>) , Command count = 369 ] 
14:32:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:07: [ SetCardRCA(0x1, 0xD555) , Command count = 370 ] 
14:32:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:07: Host Frequency set to 25000 KHz
14:32:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:07: ####CSD Registe 2.0 Values####
14:32:07: CSD_STRUCTURE                                 :0x1
14:32:07: Reserv1                                       :0x0
14:32:07: Time Access 1 TAAC                            :0xe
14:32:07: Time Access 2 NSAC*100                        :0x0
14:32:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:07: Card Command Classess CCC                     :0x5b5
14:32:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:07: DSR(driver stage register)  DSR_IMP           :0x0
14:32:07: Reserv2                                       :0x0
14:32:07: Device Size C_SIZE                            :0xedc8
14:32:07: Reserv3                                       :0x0
14:32:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:07: Reserv4                                       :0x0
14:32:07: Write Speed Factor R2W_FACTOR                 :0x2
14:32:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:07: FILE_FORMAT_GRP                               :0x0
14:32:07: COPY flag                                     :0x1
14:32:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:07: File_Format                                   :0x0
14:32:07: CRC                                           :0x0
14:32:07: ####CSD Registe Values####  

14:32:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:07: [GetSCRRegisterEntry] Passed
14:32:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:07: Data_Status_After Erases          : 0
14:32:07: CPRM Security Support             : No Security
14:32:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:07: Spec. Version                     : Version 3.0X
14:32:07: Extended Security Support         : Extended_Security_Not_Supported
14:32:07: Command Support                   : COMMAND_SUPPORT
14:32:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ABA0>, <py_sfcl.CommandDataDefinition object at 0x0667ABD0>) , Command count = 371 ] 
14:32:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ACF0>, <py_sfcl.CommandDataDefinition object at 0x0667AD50>) , Command count = 372 ] 
14:32:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:07: [ SetBusWidth(0x4) , Command count = 373 ] 
14:32:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667AEA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 374 ] 
14:32:07: Protected Area Size 0x28000
14:32:07: Bus Width           2
14:32:07: Secure Mode         0
14:32:07: Speed  Class        4
14:32:07: Perf Move           0
14:32:07: Au Size             9
14:32:07: Erase Size          15
14:32:07: Erase Timeout       1
14:32:07: Erase offset        1
14:32:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 375 ] 
14:32:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:07: Host Frequency set to 100000 KHz
14:32:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:07: ####CSD Registe 2.0 Values####
14:32:07: CSD_STRUCTURE                                 :0x1
14:32:07: Reserv1                                       :0x0
14:32:07: Time Access 1 TAAC                            :0xe
14:32:07: Time Access 2 NSAC*100                        :0x0
14:32:07: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:07: Card Command Classess CCC                     :0x5b5
14:32:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:07: DSR(driver stage register)  DSR_IMP           :0x0
14:32:07: Reserv2                                       :0x0
14:32:07: Device Size C_SIZE                            :0xedc8
14:32:07: Reserv3                                       :0x0
14:32:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:07: Reserv4                                       :0x0
14:32:07: Write Speed Factor R2W_FACTOR                 :0x2
14:32:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:07: FILE_FORMAT_GRP                               :0x0
14:32:07: COPY flag                                     :0x1
14:32:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:07: File_Format                                   :0x0
14:32:07: CRC                                           :0x0
14:32:07: ####CSD Registe Values####  

14:32:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AF60>, <py_sfcl.CommandDataDefinition object at 0x0667AE70>) , Command count = 376 ] 
14:32:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A930>, <py_sfcl.CommandDataDefinition object at 0x0667AB10>) , Command count = 377 ] 
14:32:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:07: [DVTCommonLib]### Erase :Erase API Called
14:32:07: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1A000 with Blockcount:0x2001
14:32:07: [ EraseLba(0x1A000, 0x2001) , Command count = 378 ] 
14:32:07: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1A000 with Blockcount:0x2001 

14:32:07: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 14
14:32:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1C000 to EndLba:0x1C008 with Increment Pattern
14:32:07: [ WrLbaNoData(0x1C000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 379 ] 
14:32:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1C000 to EndLba:0x1C008 with Increment Pattern 

14:32:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AFC0>, <py_sfcl.CommandDataDefinition object at 0x0667ADE0>) , Command count = 380 ] 
14:32:07: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C120>, <py_sfcl.CommandDataDefinition object at 0x0667C0F0>) , Command count = 381 ] 
14:32:07: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:07: [DVTCommonLib]###  R1bCommandAbort called
14:32:07: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x18, False) , Command count = 382 ] 
14:32:07: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:09: Host Frequency set to 25000 KHz
14:32:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C330>, 0x0, True) , Command count = 383 ] 
14:32:09: [GO18_globalSetVolt]### Host voltage value is set.
14:32:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C240>, 0x0, False) , Command count = 384 ] 
14:32:09: [GO18_globalSetVolt]### Host voltage value is set.
14:32:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 385 ] 
14:32:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 386 ] 
14:32:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 387 ] 
14:32:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C570>, <py_sfcl.CommandDataDefinition object at 0x0667C390>) , Command count = 388 ] 
14:32:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C480>, <py_sfcl.CommandDataDefinition object at 0x0667C2D0>) , Command count = 389 ] 
14:32:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:09: [ SetCardRCA(0x1, 0xD555) , Command count = 390 ] 
14:32:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:10: Host Frequency set to 25000 KHz
14:32:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:10: ####CSD Registe 2.0 Values####
14:32:10: CSD_STRUCTURE                                 :0x1
14:32:10: Reserv1                                       :0x0
14:32:10: Time Access 1 TAAC                            :0xe
14:32:10: Time Access 2 NSAC*100                        :0x0
14:32:10: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:10: Card Command Classess CCC                     :0x5b5
14:32:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:10: DSR(driver stage register)  DSR_IMP           :0x0
14:32:10: Reserv2                                       :0x0
14:32:10: Device Size C_SIZE                            :0xedc8
14:32:10: Reserv3                                       :0x0
14:32:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:10: Reserv4                                       :0x0
14:32:10: Write Speed Factor R2W_FACTOR                 :0x2
14:32:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:10: FILE_FORMAT_GRP                               :0x0
14:32:10: COPY flag                                     :0x1
14:32:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:10: File_Format                                   :0x0
14:32:10: CRC                                           :0x0
14:32:10: ####CSD Registe Values####  

14:32:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:10: [GetSCRRegisterEntry] Passed
14:32:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:10: Data_Status_After Erases          : 0
14:32:10: CPRM Security Support             : No Security
14:32:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:10: Spec. Version                     : Version 3.0X
14:32:10: Extended Security Support         : Extended_Security_Not_Supported
14:32:10: Command Support                   : COMMAND_SUPPORT
14:32:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C3F0>, <py_sfcl.CommandDataDefinition object at 0x0667C420>) , Command count = 391 ] 
14:32:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C4E0>, <py_sfcl.CommandDataDefinition object at 0x0667C510>) , Command count = 392 ] 
14:32:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:10: [ SetBusWidth(0x4) , Command count = 393 ] 
14:32:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 394 ] 
14:32:10: Protected Area Size 0x28000
14:32:10: Bus Width           2
14:32:10: Secure Mode         0
14:32:10: Speed  Class        4
14:32:10: Perf Move           0
14:32:10: Au Size             9
14:32:10: Erase Size          15
14:32:10: Erase Timeout       1
14:32:10: Erase offset        1
14:32:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 395 ] 
14:32:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:10: Host Frequency set to 100000 KHz
14:32:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:10: ####CSD Registe 2.0 Values####
14:32:10: CSD_STRUCTURE                                 :0x1
14:32:10: Reserv1                                       :0x0
14:32:10: Time Access 1 TAAC                            :0xe
14:32:10: Time Access 2 NSAC*100                        :0x0
14:32:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:10: Card Command Classess CCC                     :0x5b5
14:32:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:10: DSR(driver stage register)  DSR_IMP           :0x0
14:32:10: Reserv2                                       :0x0
14:32:10: Device Size C_SIZE                            :0xedc8
14:32:10: Reserv3                                       :0x0
14:32:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:10: Reserv4                                       :0x0
14:32:10: Write Speed Factor R2W_FACTOR                 :0x2
14:32:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:10: FILE_FORMAT_GRP                               :0x0
14:32:10: COPY flag                                     :0x1
14:32:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:10: File_Format                                   :0x0
14:32:10: CRC                                           :0x0
14:32:10: ####CSD Registe Values####  

14:32:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C720>, <py_sfcl.CommandDataDefinition object at 0x0667C840>) , Command count = 396 ] 
14:32:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C180>, <py_sfcl.CommandDataDefinition object at 0x0667C360>) , Command count = 397 ] 
14:32:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:10: [DVTCommonLib]### Erase :Erase API Called
14:32:10: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1C000 with Blockcount:0x2001
14:32:10: [ EraseLba(0x1C000, 0x2001) , Command count = 398 ] 
14:32:10: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1C000 with Blockcount:0x2001 

14:32:10: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 13
14:32:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1E000 to EndLba:0x1E008 with Increment Pattern
14:32:10: [ WrLbaNoData(0x1E000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 399 ] 
14:32:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1E000 to EndLba:0x1E008 with Increment Pattern 

14:32:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C7E0>, <py_sfcl.CommandDataDefinition object at 0x0667C780>) , Command count = 400 ] 
14:32:10: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C8D0>, <py_sfcl.CommandDataDefinition object at 0x0667C5D0>) , Command count = 401 ] 
14:32:10: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:10: [DVTCommonLib]###  R1bCommandAbort called
14:32:10: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1F, False) , Command count = 402 ] 
14:32:10: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:12: Host Frequency set to 25000 KHz
14:32:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:12: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CAE0>, 0x0, True) , Command count = 403 ] 
14:32:12: [GO18_globalSetVolt]### Host voltage value is set.
14:32:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C9F0>, 0x0, False) , Command count = 404 ] 
14:32:12: [GO18_globalSetVolt]### Host voltage value is set.
14:32:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 405 ] 
14:32:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 406 ] 
14:32:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 407 ] 
14:32:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CCF0>, <py_sfcl.CommandDataDefinition object at 0x0667CB10>) , Command count = 408 ] 
14:32:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CC00>, <py_sfcl.CommandDataDefinition object at 0x0667C990>) , Command count = 409 ] 
14:32:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:12: [ SetCardRCA(0x1, 0xD555) , Command count = 410 ] 
14:32:12: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:12: Host Frequency set to 25000 KHz
14:32:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:12: ####CSD Registe 2.0 Values####
14:32:12: CSD_STRUCTURE                                 :0x1
14:32:12: Reserv1                                       :0x0
14:32:12: Time Access 1 TAAC                            :0xe
14:32:12: Time Access 2 NSAC*100                        :0x0
14:32:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:12: Card Command Classess CCC                     :0x5b5
14:32:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:12: DSR(driver stage register)  DSR_IMP           :0x0
14:32:12: Reserv2                                       :0x0
14:32:12: Device Size C_SIZE                            :0xedc8
14:32:12: Reserv3                                       :0x0
14:32:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:12: Reserv4                                       :0x0
14:32:12: Write Speed Factor R2W_FACTOR                 :0x2
14:32:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:12: FILE_FORMAT_GRP                               :0x0
14:32:12: COPY flag                                     :0x1
14:32:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:12: File_Format                                   :0x0
14:32:12: CRC                                           :0x0
14:32:12: ####CSD Registe Values####  

14:32:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:12: [GetSCRRegisterEntry] Passed
14:32:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:12: Data_Status_After Erases          : 0
14:32:12: CPRM Security Support             : No Security
14:32:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:12: Spec. Version                     : Version 3.0X
14:32:12: Extended Security Support         : Extended_Security_Not_Supported
14:32:12: Command Support                   : COMMAND_SUPPORT
14:32:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CB70>, <py_sfcl.CommandDataDefinition object at 0x0667CBA0>) , Command count = 411 ] 
14:32:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CC60>, <py_sfcl.CommandDataDefinition object at 0x0667CC90>) , Command count = 412 ] 
14:32:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:12: [ SetBusWidth(0x4) , Command count = 413 ] 
14:32:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667CDE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 414 ] 
14:32:12: Protected Area Size 0x28000
14:32:12: Bus Width           2
14:32:12: Secure Mode         0
14:32:12: Speed  Class        4
14:32:12: Perf Move           0
14:32:12: Au Size             9
14:32:12: Erase Size          15
14:32:12: Erase Timeout       1
14:32:12: Erase offset        1
14:32:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 415 ] 
14:32:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:13: Host Frequency set to 100000 KHz
14:32:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:13: ####CSD Registe 2.0 Values####
14:32:13: CSD_STRUCTURE                                 :0x1
14:32:13: Reserv1                                       :0x0
14:32:13: Time Access 1 TAAC                            :0xe
14:32:13: Time Access 2 NSAC*100                        :0x0
14:32:13: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:13: Card Command Classess CCC                     :0x5b5
14:32:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:13: DSR(driver stage register)  DSR_IMP           :0x0
14:32:13: Reserv2                                       :0x0
14:32:13: Device Size C_SIZE                            :0xedc8
14:32:13: Reserv3                                       :0x0
14:32:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:13: Reserv4                                       :0x0
14:32:13: Write Speed Factor R2W_FACTOR                 :0x2
14:32:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:13: FILE_FORMAT_GRP                               :0x0
14:32:13: COPY flag                                     :0x1
14:32:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:13: File_Format                                   :0x0
14:32:13: CRC                                           :0x0
14:32:13: ####CSD Registe Values####  

14:32:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CEA0>, <py_sfcl.CommandDataDefinition object at 0x0667CFC0>) , Command count = 416 ] 
14:32:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C270>, <py_sfcl.CommandDataDefinition object at 0x0667C930>) , Command count = 417 ] 
14:32:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:13: [DVTCommonLib]### Erase :Erase API Called
14:32:13: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1E000 with Blockcount:0x2001
14:32:13: [ EraseLba(0x1E000, 0x2001) , Command count = 418 ] 
14:32:13: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1E000 with Blockcount:0x2001 

14:32:13: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 12
14:32:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x20000 to EndLba:0x20008 with Increment Pattern
14:32:13: [ WrLbaNoData(0x20000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 419 ] 
14:32:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x20000 to EndLba:0x20008 with Increment Pattern 

14:32:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F060>, <py_sfcl.CommandDataDefinition object at 0x0667CF60>) , Command count = 420 ] 
14:32:13: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F090>, <py_sfcl.CommandDataDefinition object at 0x0667CD50>) , Command count = 421 ] 
14:32:13: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:13: [DVTCommonLib]###  R1bCommandAbort called
14:32:13: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2A, False) , Command count = 422 ] 
14:32:13: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:15: Host Frequency set to 25000 KHz
14:32:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F2A0>, 0x0, True) , Command count = 423 ] 
14:32:15: [GO18_globalSetVolt]### Host voltage value is set.
14:32:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F1B0>, 0x0, False) , Command count = 424 ] 
14:32:15: [GO18_globalSetVolt]### Host voltage value is set.
14:32:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 425 ] 
14:32:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 426 ] 
14:32:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 427 ] 
14:32:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F4B0>, <py_sfcl.CommandDataDefinition object at 0x0667F2D0>) , Command count = 428 ] 
14:32:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F3C0>, <py_sfcl.CommandDataDefinition object at 0x0667F150>) , Command count = 429 ] 
14:32:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:15: [ SetCardRCA(0x1, 0xD555) , Command count = 430 ] 
14:32:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:15: Host Frequency set to 25000 KHz
14:32:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:15: ####CSD Registe 2.0 Values####
14:32:15: CSD_STRUCTURE                                 :0x1
14:32:15: Reserv1                                       :0x0
14:32:15: Time Access 1 TAAC                            :0xe
14:32:15: Time Access 2 NSAC*100                        :0x0
14:32:15: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:15: Card Command Classess CCC                     :0x5b5
14:32:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:15: DSR(driver stage register)  DSR_IMP           :0x0
14:32:15: Reserv2                                       :0x0
14:32:15: Device Size C_SIZE                            :0xedc8
14:32:15: Reserv3                                       :0x0
14:32:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:15: Reserv4                                       :0x0
14:32:15: Write Speed Factor R2W_FACTOR                 :0x2
14:32:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:15: FILE_FORMAT_GRP                               :0x0
14:32:15: COPY flag                                     :0x1
14:32:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:15: File_Format                                   :0x0
14:32:15: CRC                                           :0x0
14:32:15: ####CSD Registe Values####  

14:32:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:15: [GetSCRRegisterEntry] Passed
14:32:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:15: Data_Status_After Erases          : 0
14:32:15: CPRM Security Support             : No Security
14:32:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:15: Spec. Version                     : Version 3.0X
14:32:15: Extended Security Support         : Extended_Security_Not_Supported
14:32:15: Command Support                   : COMMAND_SUPPORT
14:32:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F330>, <py_sfcl.CommandDataDefinition object at 0x0667F360>) , Command count = 431 ] 
14:32:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F420>, <py_sfcl.CommandDataDefinition object at 0x0667F450>) , Command count = 432 ] 
14:32:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:15: [ SetBusWidth(0x4) , Command count = 433 ] 
14:32:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F5A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 434 ] 
14:32:15: Protected Area Size 0x28000
14:32:15: Bus Width           2
14:32:15: Secure Mode         0
14:32:15: Speed  Class        4
14:32:15: Perf Move           0
14:32:15: Au Size             9
14:32:15: Erase Size          15
14:32:15: Erase Timeout       1
14:32:15: Erase offset        1
14:32:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 435 ] 
14:32:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:15: Host Frequency set to 100000 KHz
14:32:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:15: ####CSD Registe 2.0 Values####
14:32:15: CSD_STRUCTURE                                 :0x1
14:32:15: Reserv1                                       :0x0
14:32:15: Time Access 1 TAAC                            :0xe
14:32:15: Time Access 2 NSAC*100                        :0x0
14:32:15: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:15: Card Command Classess CCC                     :0x5b5
14:32:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:15: DSR(driver stage register)  DSR_IMP           :0x0
14:32:15: Reserv2                                       :0x0
14:32:15: Device Size C_SIZE                            :0xedc8
14:32:15: Reserv3                                       :0x0
14:32:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:15: Reserv4                                       :0x0
14:32:15: Write Speed Factor R2W_FACTOR                 :0x2
14:32:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:15: FILE_FORMAT_GRP                               :0x0
14:32:15: COPY flag                                     :0x1
14:32:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:15: File_Format                                   :0x0
14:32:15: CRC                                           :0x0
14:32:15: ####CSD Registe Values####  

14:32:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F660>, <py_sfcl.CommandDataDefinition object at 0x0667F780>) , Command count = 436 ] 
14:32:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CE70>, <py_sfcl.CommandDataDefinition object at 0x0667F240>) , Command count = 437 ] 
14:32:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:15: [DVTCommonLib]### Erase :Erase API Called
14:32:15: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x20000 with Blockcount:0x2001
14:32:15: [ EraseLba(0x20000, 0x2001) , Command count = 438 ] 
14:32:15: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x20000 with Blockcount:0x2001 

14:32:15: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 11
14:32:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x22000 to EndLba:0x22008 with Increment Pattern
14:32:15: [ WrLbaNoData(0x22000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 439 ] 
14:32:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x22000 to EndLba:0x22008 with Increment Pattern 

14:32:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F720>, <py_sfcl.CommandDataDefinition object at 0x0667F6C0>) , Command count = 440 ] 
14:32:15: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F810>, <py_sfcl.CommandDataDefinition object at 0x0667F510>) , Command count = 441 ] 
14:32:15: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:15: [DVTCommonLib]###  R1bCommandAbort called
14:32:15: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x19, False) , Command count = 442 ] 
14:32:15: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:18: Host Frequency set to 25000 KHz
14:32:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:18: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FA20>, 0x0, True) , Command count = 443 ] 
14:32:18: [GO18_globalSetVolt]### Host voltage value is set.
14:32:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F930>, 0x0, False) , Command count = 444 ] 
14:32:18: [GO18_globalSetVolt]### Host voltage value is set.
14:32:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 445 ] 
14:32:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 446 ] 
14:32:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 447 ] 
14:32:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FC30>, <py_sfcl.CommandDataDefinition object at 0x0667FA50>) , Command count = 448 ] 
14:32:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FB40>, <py_sfcl.CommandDataDefinition object at 0x0667F1E0>) , Command count = 449 ] 
14:32:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:18: [ SetCardRCA(0x1, 0xD555) , Command count = 450 ] 
14:32:18: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:18: Host Frequency set to 25000 KHz
14:32:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:18: ####CSD Registe 2.0 Values####
14:32:18: CSD_STRUCTURE                                 :0x1
14:32:18: Reserv1                                       :0x0
14:32:18: Time Access 1 TAAC                            :0xe
14:32:18: Time Access 2 NSAC*100                        :0x0
14:32:18: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:18: Card Command Classess CCC                     :0x5b5
14:32:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:18: DSR(driver stage register)  DSR_IMP           :0x0
14:32:18: Reserv2                                       :0x0
14:32:18: Device Size C_SIZE                            :0xedc8
14:32:18: Reserv3                                       :0x0
14:32:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:18: Reserv4                                       :0x0
14:32:18: Write Speed Factor R2W_FACTOR                 :0x2
14:32:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:18: FILE_FORMAT_GRP                               :0x0
14:32:18: COPY flag                                     :0x1
14:32:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:18: File_Format                                   :0x0
14:32:18: CRC                                           :0x0
14:32:18: ####CSD Registe Values####  

14:32:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:18: [GetSCRRegisterEntry] Passed
14:32:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:18: Data_Status_After Erases          : 0
14:32:18: CPRM Security Support             : No Security
14:32:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:18: Spec. Version                     : Version 3.0X
14:32:18: Extended Security Support         : Extended_Security_Not_Supported
14:32:18: Command Support                   : COMMAND_SUPPORT
14:32:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FAB0>, <py_sfcl.CommandDataDefinition object at 0x0667FAE0>) , Command count = 451 ] 
14:32:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FBA0>, <py_sfcl.CommandDataDefinition object at 0x0667FBD0>) , Command count = 452 ] 
14:32:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:18: [ SetBusWidth(0x4) , Command count = 453 ] 
14:32:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667FD20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 454 ] 
14:32:18: Protected Area Size 0x28000
14:32:18: Bus Width           2
14:32:18: Secure Mode         0
14:32:18: Speed  Class        4
14:32:18: Perf Move           0
14:32:18: Au Size             9
14:32:18: Erase Size          15
14:32:18: Erase Timeout       1
14:32:18: Erase offset        1
14:32:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 455 ] 
14:32:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:18: Host Frequency set to 100000 KHz
14:32:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:18: ####CSD Registe 2.0 Values####
14:32:18: CSD_STRUCTURE                                 :0x1
14:32:18: Reserv1                                       :0x0
14:32:18: Time Access 1 TAAC                            :0xe
14:32:18: Time Access 2 NSAC*100                        :0x0
14:32:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:18: Card Command Classess CCC                     :0x5b5
14:32:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:18: DSR(driver stage register)  DSR_IMP           :0x0
14:32:18: Reserv2                                       :0x0
14:32:18: Device Size C_SIZE                            :0xedc8
14:32:18: Reserv3                                       :0x0
14:32:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:18: Reserv4                                       :0x0
14:32:18: Write Speed Factor R2W_FACTOR                 :0x2
14:32:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:18: FILE_FORMAT_GRP                               :0x0
14:32:18: COPY flag                                     :0x1
14:32:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:18: File_Format                                   :0x0
14:32:18: CRC                                           :0x0
14:32:18: ####CSD Registe Values####  

14:32:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FDE0>, <py_sfcl.CommandDataDefinition object at 0x0667FF00>) , Command count = 456 ] 
14:32:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F870>, <py_sfcl.CommandDataDefinition object at 0x0667F9F0>) , Command count = 457 ] 
14:32:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:18: [DVTCommonLib]### Erase :Erase API Called
14:32:18: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x22000 with Blockcount:0x2001
14:32:18: [ EraseLba(0x22000, 0x2001) , Command count = 458 ] 
14:32:18: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x22000 with Blockcount:0x2001 

14:32:18: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 10
14:32:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x24000 to EndLba:0x24008 with Increment Pattern
14:32:18: [ WrLbaNoData(0x24000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 459 ] 
14:32:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x24000 to EndLba:0x24008 with Increment Pattern 

14:32:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FEA0>, <py_sfcl.CommandDataDefinition object at 0x0667FE40>) , Command count = 460 ] 
14:32:18: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FF90>, <py_sfcl.CommandDataDefinition object at 0x0667FC90>) , Command count = 461 ] 
14:32:18: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:18: [DVTCommonLib]###  R1bCommandAbort called
14:32:18: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x31, False) , Command count = 462 ] 
14:32:18: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:18: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:20: Host Frequency set to 25000 KHz
14:32:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:20: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FFC0>, 0x0, True) , Command count = 463 ] 
14:32:20: [GO18_globalSetVolt]### Host voltage value is set.
14:32:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x066830F0>, 0x0, False) , Command count = 464 ] 
14:32:20: [GO18_globalSetVolt]### Host voltage value is set.
14:32:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 465 ] 
14:32:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 466 ] 
14:32:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 467 ] 
14:32:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066833F0>, <py_sfcl.CommandDataDefinition object at 0x06683210>) , Command count = 468 ] 
14:32:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683300>, <py_sfcl.CommandDataDefinition object at 0x06683180>) , Command count = 469 ] 
14:32:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:21: [ SetCardRCA(0x1, 0xD555) , Command count = 470 ] 
14:32:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:21: Host Frequency set to 25000 KHz
14:32:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:21: ####CSD Registe 2.0 Values####
14:32:21: CSD_STRUCTURE                                 :0x1
14:32:21: Reserv1                                       :0x0
14:32:21: Time Access 1 TAAC                            :0xe
14:32:21: Time Access 2 NSAC*100                        :0x0
14:32:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:21: Card Command Classess CCC                     :0x5b5
14:32:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:21: DSR(driver stage register)  DSR_IMP           :0x0
14:32:21: Reserv2                                       :0x0
14:32:21: Device Size C_SIZE                            :0xedc8
14:32:21: Reserv3                                       :0x0
14:32:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:21: Reserv4                                       :0x0
14:32:21: Write Speed Factor R2W_FACTOR                 :0x2
14:32:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:21: FILE_FORMAT_GRP                               :0x0
14:32:21: COPY flag                                     :0x1
14:32:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:21: File_Format                                   :0x0
14:32:21: CRC                                           :0x0
14:32:21: ####CSD Registe Values####  

14:32:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:21: [GetSCRRegisterEntry] Passed
14:32:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:21: Data_Status_After Erases          : 0
14:32:21: CPRM Security Support             : No Security
14:32:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:21: Spec. Version                     : Version 3.0X
14:32:21: Extended Security Support         : Extended_Security_Not_Supported
14:32:21: Command Support                   : COMMAND_SUPPORT
14:32:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683270>, <py_sfcl.CommandDataDefinition object at 0x066832A0>) , Command count = 471 ] 
14:32:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683360>, <py_sfcl.CommandDataDefinition object at 0x06683390>) , Command count = 472 ] 
14:32:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:21: [ SetBusWidth(0x4) , Command count = 473 ] 
14:32:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066834E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 474 ] 
14:32:21: Protected Area Size 0x28000
14:32:21: Bus Width           2
14:32:21: Secure Mode         0
14:32:21: Speed  Class        4
14:32:21: Perf Move           0
14:32:21: Au Size             9
14:32:21: Erase Size          15
14:32:21: Erase Timeout       1
14:32:21: Erase offset        1
14:32:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 475 ] 
14:32:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:21: Host Frequency set to 100000 KHz
14:32:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:21: ####CSD Registe 2.0 Values####
14:32:21: CSD_STRUCTURE                                 :0x1
14:32:21: Reserv1                                       :0x0
14:32:21: Time Access 1 TAAC                            :0xe
14:32:21: Time Access 2 NSAC*100                        :0x0
14:32:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:21: Card Command Classess CCC                     :0x5b5
14:32:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:21: DSR(driver stage register)  DSR_IMP           :0x0
14:32:21: Reserv2                                       :0x0
14:32:21: Device Size C_SIZE                            :0xedc8
14:32:21: Reserv3                                       :0x0
14:32:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:21: Reserv4                                       :0x0
14:32:21: Write Speed Factor R2W_FACTOR                 :0x2
14:32:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:21: FILE_FORMAT_GRP                               :0x0
14:32:21: COPY flag                                     :0x1
14:32:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:21: File_Format                                   :0x0
14:32:21: CRC                                           :0x0
14:32:21: ####CSD Registe Values####  

14:32:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066835A0>, <py_sfcl.CommandDataDefinition object at 0x066836C0>) , Command count = 476 ] 
14:32:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683030>, <py_sfcl.CommandDataDefinition object at 0x066831B0>) , Command count = 477 ] 
14:32:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:21: [DVTCommonLib]### Erase :Erase API Called
14:32:21: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x24000 with Blockcount:0x2001
14:32:21: [ EraseLba(0x24000, 0x2001) , Command count = 478 ] 
14:32:21: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x24000 with Blockcount:0x2001 

14:32:21: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 9
14:32:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x26000 to EndLba:0x26008 with Increment Pattern
14:32:21: [ WrLbaNoData(0x26000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 479 ] 
14:32:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x26000 to EndLba:0x26008 with Increment Pattern 

14:32:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683660>, <py_sfcl.CommandDataDefinition object at 0x06683600>) , Command count = 480 ] 
14:32:21: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683750>, <py_sfcl.CommandDataDefinition object at 0x06683450>) , Command count = 481 ] 
14:32:21: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:21: [DVTCommonLib]###  R1bCommandAbort called
14:32:21: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1E, False) , Command count = 482 ] 
14:32:21: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:21: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:23: Host Frequency set to 25000 KHz
14:32:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:23: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683960>, 0x0, True) , Command count = 483 ] 
14:32:23: [GO18_globalSetVolt]### Host voltage value is set.
14:32:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683870>, 0x0, False) , Command count = 484 ] 
14:32:23: [GO18_globalSetVolt]### Host voltage value is set.
14:32:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 485 ] 
14:32:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 486 ] 
14:32:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 487 ] 
14:32:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683B70>, <py_sfcl.CommandDataDefinition object at 0x06683990>) , Command count = 488 ] 
14:32:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683A80>, <py_sfcl.CommandDataDefinition object at 0x06683120>) , Command count = 489 ] 
14:32:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:23: [ SetCardRCA(0x1, 0xD555) , Command count = 490 ] 
14:32:23: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:24: Host Frequency set to 25000 KHz
14:32:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:24: ####CSD Registe 2.0 Values####
14:32:24: CSD_STRUCTURE                                 :0x1
14:32:24: Reserv1                                       :0x0
14:32:24: Time Access 1 TAAC                            :0xe
14:32:24: Time Access 2 NSAC*100                        :0x0
14:32:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:24: Card Command Classess CCC                     :0x5b5
14:32:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:24: DSR(driver stage register)  DSR_IMP           :0x0
14:32:24: Reserv2                                       :0x0
14:32:24: Device Size C_SIZE                            :0xedc8
14:32:24: Reserv3                                       :0x0
14:32:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:24: Reserv4                                       :0x0
14:32:24: Write Speed Factor R2W_FACTOR                 :0x2
14:32:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:24: FILE_FORMAT_GRP                               :0x0
14:32:24: COPY flag                                     :0x1
14:32:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:24: File_Format                                   :0x0
14:32:24: CRC                                           :0x0
14:32:24: ####CSD Registe Values####  

14:32:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:24: [GetSCRRegisterEntry] Passed
14:32:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:24: Data_Status_After Erases          : 0
14:32:24: CPRM Security Support             : No Security
14:32:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:24: Spec. Version                     : Version 3.0X
14:32:24: Extended Security Support         : Extended_Security_Not_Supported
14:32:24: Command Support                   : COMMAND_SUPPORT
14:32:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066839F0>, <py_sfcl.CommandDataDefinition object at 0x06683A20>) , Command count = 491 ] 
14:32:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683AE0>, <py_sfcl.CommandDataDefinition object at 0x06683B10>) , Command count = 492 ] 
14:32:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:24: [ SetBusWidth(0x4) , Command count = 493 ] 
14:32:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683C60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 494 ] 
14:32:24: Protected Area Size 0x28000
14:32:24: Bus Width           2
14:32:24: Secure Mode         0
14:32:24: Speed  Class        4
14:32:24: Perf Move           0
14:32:24: Au Size             9
14:32:24: Erase Size          15
14:32:24: Erase Timeout       1
14:32:24: Erase offset        1
14:32:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 495 ] 
14:32:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:24: Host Frequency set to 100000 KHz
14:32:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:24: ####CSD Registe 2.0 Values####
14:32:24: CSD_STRUCTURE                                 :0x1
14:32:24: Reserv1                                       :0x0
14:32:24: Time Access 1 TAAC                            :0xe
14:32:24: Time Access 2 NSAC*100                        :0x0
14:32:24: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:24: Card Command Classess CCC                     :0x5b5
14:32:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:24: DSR(driver stage register)  DSR_IMP           :0x0
14:32:24: Reserv2                                       :0x0
14:32:24: Device Size C_SIZE                            :0xedc8
14:32:24: Reserv3                                       :0x0
14:32:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:24: Reserv4                                       :0x0
14:32:24: Write Speed Factor R2W_FACTOR                 :0x2
14:32:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:24: FILE_FORMAT_GRP                               :0x0
14:32:24: COPY flag                                     :0x1
14:32:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:24: File_Format                                   :0x0
14:32:24: CRC                                           :0x0
14:32:24: ####CSD Registe Values####  

14:32:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D20>, <py_sfcl.CommandDataDefinition object at 0x06683E40>) , Command count = 496 ] 
14:32:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066837B0>, <py_sfcl.CommandDataDefinition object at 0x06683930>) , Command count = 497 ] 
14:32:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:24: [DVTCommonLib]### Erase :Erase API Called
14:32:24: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x26000 with Blockcount:0x2001
14:32:24: [ EraseLba(0x26000, 0x2001) , Command count = 498 ] 
14:32:24: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x26000 with Blockcount:0x2001 

14:32:24: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 8
14:32:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x28000 to EndLba:0x28008 with Increment Pattern
14:32:24: [ WrLbaNoData(0x28000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 499 ] 
14:32:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x28000 to EndLba:0x28008 with Increment Pattern 

14:32:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683DE0>, <py_sfcl.CommandDataDefinition object at 0x06683D80>) , Command count = 500 ] 
14:32:24: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683ED0>, <py_sfcl.CommandDataDefinition object at 0x06683BD0>) , Command count = 501 ] 
14:32:24: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:24: [DVTCommonLib]###  R1bCommandAbort called
14:32:24: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x26, False) , Command count = 502 ] 
14:32:24: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:24: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:26: Host Frequency set to 25000 KHz
14:32:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:26: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683F00>, 0x0, True) , Command count = 503 ] 
14:32:26: [GO18_globalSetVolt]### Host voltage value is set.
14:32:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683FC0>, 0x0, False) , Command count = 504 ] 
14:32:26: [GO18_globalSetVolt]### Host voltage value is set.
14:32:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 505 ] 
14:32:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 506 ] 
14:32:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 507 ] 
14:32:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC0480>, <py_sfcl.CommandDataDefinition object at 0x05FC6F90>) , Command count = 508 ] 
14:32:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8C00>, <py_sfcl.CommandDataDefinition object at 0x06683F60>) , Command count = 509 ] 
14:32:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:26: [ SetCardRCA(0x1, 0xD555) , Command count = 510 ] 
14:32:26: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:26: Host Frequency set to 25000 KHz
14:32:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:26: ####CSD Registe 2.0 Values####
14:32:26: CSD_STRUCTURE                                 :0x1
14:32:26: Reserv1                                       :0x0
14:32:26: Time Access 1 TAAC                            :0xe
14:32:26: Time Access 2 NSAC*100                        :0x0
14:32:26: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:26: Card Command Classess CCC                     :0x5b5
14:32:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:26: DSR(driver stage register)  DSR_IMP           :0x0
14:32:26: Reserv2                                       :0x0
14:32:26: Device Size C_SIZE                            :0xedc8
14:32:26: Reserv3                                       :0x0
14:32:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:26: Reserv4                                       :0x0
14:32:26: Write Speed Factor R2W_FACTOR                 :0x2
14:32:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:26: FILE_FORMAT_GRP                               :0x0
14:32:26: COPY flag                                     :0x1
14:32:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:26: File_Format                                   :0x0
14:32:26: CRC                                           :0x0
14:32:26: ####CSD Registe Values####  

14:32:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:26: [GetSCRRegisterEntry] Passed
14:32:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:26: Data_Status_After Erases          : 0
14:32:26: CPRM Security Support             : No Security
14:32:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:26: Spec. Version                     : Version 3.0X
14:32:26: Extended Security Support         : Extended_Security_Not_Supported
14:32:26: Command Support                   : COMMAND_SUPPORT
14:32:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E42840>, <py_sfcl.CommandDataDefinition object at 0x06685C00>) , Command count = 511 ] 
14:32:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8C60>, <py_sfcl.CommandDataDefinition object at 0x06685120>) , Command count = 512 ] 
14:32:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:26: [ SetBusWidth(0x4) , Command count = 513 ] 
14:32:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066853C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 514 ] 
14:32:26: Protected Area Size 0x28000
14:32:26: Bus Width           2
14:32:26: Secure Mode         0
14:32:26: Speed  Class        4
14:32:26: Perf Move           0
14:32:26: Au Size             9
14:32:26: Erase Size          15
14:32:26: Erase Timeout       1
14:32:26: Erase offset        1
14:32:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 515 ] 
14:32:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:27: Host Frequency set to 100000 KHz
14:32:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:27: ####CSD Registe 2.0 Values####
14:32:27: CSD_STRUCTURE                                 :0x1
14:32:27: Reserv1                                       :0x0
14:32:27: Time Access 1 TAAC                            :0xe
14:32:27: Time Access 2 NSAC*100                        :0x0
14:32:27: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:27: Card Command Classess CCC                     :0x5b5
14:32:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:27: DSR(driver stage register)  DSR_IMP           :0x0
14:32:27: Reserv2                                       :0x0
14:32:27: Device Size C_SIZE                            :0xedc8
14:32:27: Reserv3                                       :0x0
14:32:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:27: Reserv4                                       :0x0
14:32:27: Write Speed Factor R2W_FACTOR                 :0x2
14:32:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:27: FILE_FORMAT_GRP                               :0x0
14:32:27: COPY flag                                     :0x1
14:32:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:27: File_Format                                   :0x0
14:32:27: CRC                                           :0x0
14:32:27: ####CSD Registe Values####  

14:32:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6570>, <py_sfcl.CommandDataDefinition object at 0x05FED1B0>) , Command count = 516 ] 
14:32:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683CF0>, <py_sfcl.CommandDataDefinition object at 0x066851E0>) , Command count = 517 ] 
14:32:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:27: [DVTCommonLib]### Erase :Erase API Called
14:32:27: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x28000 with Blockcount:0x2001
14:32:27: [ EraseLba(0x28000, 0x2001) , Command count = 518 ] 
14:32:27: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x28000 with Blockcount:0x2001 

14:32:27: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 7
14:32:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2A000 to EndLba:0x2A008 with Increment Pattern
14:32:27: [ WrLbaNoData(0x2A000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 519 ] 
14:32:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2A000 to EndLba:0x2A008 with Increment Pattern 

14:32:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8F00>, <py_sfcl.CommandDataDefinition object at 0x06685210>) , Command count = 520 ] 
14:32:27: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BAB0>, <py_sfcl.CommandDataDefinition object at 0x06685180>) , Command count = 521 ] 
14:32:27: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:27: [DVTCommonLib]###  R1bCommandAbort called
14:32:27: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x16, False) , Command count = 522 ] 
14:32:27: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:29: Host Frequency set to 25000 KHz
14:32:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FC6360>, 0x0, True) , Command count = 523 ] 
14:32:29: [GO18_globalSetVolt]### Host voltage value is set.
14:32:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FDAC90>, 0x0, False) , Command count = 524 ] 
14:32:29: [GO18_globalSetVolt]### Host voltage value is set.
14:32:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 525 ] 
14:32:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 526 ] 
14:32:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 527 ] 
14:32:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BE10>, <py_sfcl.CommandDataDefinition object at 0x06685600>) , Command count = 528 ] 
14:32:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060327E0>, <py_sfcl.CommandDataDefinition object at 0x06685420>) , Command count = 529 ] 
14:32:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:29: [ SetCardRCA(0x1, 0xD555) , Command count = 530 ] 
14:32:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:29: Host Frequency set to 25000 KHz
14:32:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:29: ####CSD Registe 2.0 Values####
14:32:29: CSD_STRUCTURE                                 :0x1
14:32:29: Reserv1                                       :0x0
14:32:29: Time Access 1 TAAC                            :0xe
14:32:29: Time Access 2 NSAC*100                        :0x0
14:32:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:29: Card Command Classess CCC                     :0x5b5
14:32:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:29: DSR(driver stage register)  DSR_IMP           :0x0
14:32:29: Reserv2                                       :0x0
14:32:29: Device Size C_SIZE                            :0xedc8
14:32:29: Reserv3                                       :0x0
14:32:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:29: Reserv4                                       :0x0
14:32:29: Write Speed Factor R2W_FACTOR                 :0x2
14:32:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:29: FILE_FORMAT_GRP                               :0x0
14:32:29: COPY flag                                     :0x1
14:32:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:29: File_Format                                   :0x0
14:32:29: CRC                                           :0x0
14:32:29: ####CSD Registe Values####  

14:32:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:29: [GetSCRRegisterEntry] Passed
14:32:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:29: Data_Status_After Erases          : 0
14:32:29: CPRM Security Support             : No Security
14:32:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:29: Spec. Version                     : Version 3.0X
14:32:29: Extended Security Support         : Extended_Security_Not_Supported
14:32:29: Command Support                   : COMMAND_SUPPORT
14:32:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060327B0>, <py_sfcl.CommandDataDefinition object at 0x06685B70>) , Command count = 531 ] 
14:32:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032840>, <py_sfcl.CommandDataDefinition object at 0x066854B0>) , Command count = 532 ] 
14:32:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:29: [ SetBusWidth(0x4) , Command count = 533 ] 
14:32:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 534 ] 
14:32:29: Protected Area Size 0x28000
14:32:29: Bus Width           2
14:32:29: Secure Mode         0
14:32:29: Speed  Class        4
14:32:29: Perf Move           0
14:32:29: Au Size             9
14:32:29: Erase Size          15
14:32:29: Erase Timeout       1
14:32:29: Erase offset        1
14:32:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 535 ] 
14:32:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:29: Host Frequency set to 100000 KHz
14:32:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:29: ####CSD Registe 2.0 Values####
14:32:29: CSD_STRUCTURE                                 :0x1
14:32:29: Reserv1                                       :0x0
14:32:29: Time Access 1 TAAC                            :0xe
14:32:29: Time Access 2 NSAC*100                        :0x0
14:32:29: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:29: Card Command Classess CCC                     :0x5b5
14:32:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:29: DSR(driver stage register)  DSR_IMP           :0x0
14:32:29: Reserv2                                       :0x0
14:32:29: Device Size C_SIZE                            :0xedc8
14:32:29: Reserv3                                       :0x0
14:32:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:29: Reserv4                                       :0x0
14:32:29: Write Speed Factor R2W_FACTOR                 :0x2
14:32:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:29: FILE_FORMAT_GRP                               :0x0
14:32:29: COPY flag                                     :0x1
14:32:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:29: File_Format                                   :0x0
14:32:29: CRC                                           :0x0
14:32:29: ####CSD Registe Values####  

14:32:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032AE0>, <py_sfcl.CommandDataDefinition object at 0x06685C60>) , Command count = 536 ] 
14:32:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E5BDB0>, <py_sfcl.CommandDataDefinition object at 0x066855A0>) , Command count = 537 ] 
14:32:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:29: [DVTCommonLib]### Erase :Erase API Called
14:32:29: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2A000 with Blockcount:0x2001
14:32:29: [ EraseLba(0x2A000, 0x2001) , Command count = 538 ] 
14:32:29: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2A000 with Blockcount:0x2001 

14:32:29: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 6
14:32:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2C000 to EndLba:0x2C008 with Increment Pattern
14:32:29: [ WrLbaNoData(0x2C000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 539 ] 
14:32:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2C000 to EndLba:0x2C008 with Increment Pattern 

14:32:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032BA0>, <py_sfcl.CommandDataDefinition object at 0x066855D0>) , Command count = 540 ] 
14:32:29: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032B70>, <py_sfcl.CommandDataDefinition object at 0x06685540>) , Command count = 541 ] 
14:32:29: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:29: [DVTCommonLib]###  R1bCommandAbort called
14:32:29: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xE, False) , Command count = 542 ] 
14:32:29: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:29: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:32: Host Frequency set to 25000 KHz
14:32:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:32: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x06032E10>, 0x0, True) , Command count = 543 ] 
14:32:32: [GO18_globalSetVolt]### Host voltage value is set.
14:32:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x06572300>, 0x0, False) , Command count = 544 ] 
14:32:32: [GO18_globalSetVolt]### Host voltage value is set.
14:32:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 545 ] 
14:32:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 546 ] 
14:32:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 547 ] 
14:32:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BF90>, <py_sfcl.CommandDataDefinition object at 0x06685960>) , Command count = 548 ] 
14:32:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06685840>, <py_sfcl.CommandDataDefinition object at 0x06685390>) , Command count = 549 ] 
14:32:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:32: [ SetCardRCA(0x1, 0xD555) , Command count = 550 ] 
14:32:32: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:32: Host Frequency set to 25000 KHz
14:32:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:32: ####CSD Registe 2.0 Values####
14:32:32: CSD_STRUCTURE                                 :0x1
14:32:32: Reserv1                                       :0x0
14:32:32: Time Access 1 TAAC                            :0xe
14:32:32: Time Access 2 NSAC*100                        :0x0
14:32:32: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:32: Card Command Classess CCC                     :0x5b5
14:32:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:32: DSR(driver stage register)  DSR_IMP           :0x0
14:32:32: Reserv2                                       :0x0
14:32:32: Device Size C_SIZE                            :0xedc8
14:32:32: Reserv3                                       :0x0
14:32:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:32: Reserv4                                       :0x0
14:32:32: Write Speed Factor R2W_FACTOR                 :0x2
14:32:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:32: FILE_FORMAT_GRP                               :0x0
14:32:32: COPY flag                                     :0x1
14:32:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:32: File_Format                                   :0x0
14:32:32: CRC                                           :0x0
14:32:32: ####CSD Registe Values####  

14:32:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:32: [GetSCRRegisterEntry] Passed
14:32:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:32: Data_Status_After Erases          : 0
14:32:32: CPRM Security Support             : No Security
14:32:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:32: Spec. Version                     : Version 3.0X
14:32:32: Extended Security Support         : Extended_Security_Not_Supported
14:32:32: Command Support                   : COMMAND_SUPPORT
14:32:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06685030>, <py_sfcl.CommandDataDefinition object at 0x066857B0>) , Command count = 551 ] 
14:32:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666BA0>, <py_sfcl.CommandDataDefinition object at 0x06666C60>) , Command count = 552 ] 
14:32:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:32: [ SetBusWidth(0x4) , Command count = 553 ] 
14:32:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685900>, <0x200/0x200, Spc, pat:0x0>) , Command count = 554 ] 
14:32:32: Protected Area Size 0x28000
14:32:32: Bus Width           2
14:32:32: Secure Mode         0
14:32:32: Speed  Class        4
14:32:32: Perf Move           0
14:32:32: Au Size             9
14:32:32: Erase Size          15
14:32:32: Erase Timeout       1
14:32:32: Erase offset        1
14:32:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 555 ] 
14:32:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:32: Host Frequency set to 100000 KHz
14:32:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:32: ####CSD Registe 2.0 Values####
14:32:32: CSD_STRUCTURE                                 :0x1
14:32:32: Reserv1                                       :0x0
14:32:32: Time Access 1 TAAC                            :0xe
14:32:32: Time Access 2 NSAC*100                        :0x0
14:32:32: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:32: Card Command Classess CCC                     :0x5b5
14:32:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:32: DSR(driver stage register)  DSR_IMP           :0x0
14:32:32: Reserv2                                       :0x0
14:32:32: Device Size C_SIZE                            :0xedc8
14:32:32: Reserv3                                       :0x0
14:32:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:32: Reserv4                                       :0x0
14:32:32: Write Speed Factor R2W_FACTOR                 :0x2
14:32:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:32: FILE_FORMAT_GRP                               :0x0
14:32:32: COPY flag                                     :0x1
14:32:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:32: File_Format                                   :0x0
14:32:32: CRC                                           :0x0
14:32:32: ####CSD Registe Values####  

14:32:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666390>, <py_sfcl.CommandDataDefinition object at 0x06685090>) , Command count = 556 ] 
14:32:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032B10>, <py_sfcl.CommandDataDefinition object at 0x06685930>) , Command count = 557 ] 
14:32:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:32: [DVTCommonLib]### Erase :Erase API Called
14:32:32: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2C000 with Blockcount:0x2001
14:32:32: [ EraseLba(0x2C000, 0x2001) , Command count = 558 ] 
14:32:32: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2C000 with Blockcount:0x2001 

14:32:32: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 5
14:32:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2E000 to EndLba:0x2E008 with Increment Pattern
14:32:32: [ WrLbaNoData(0x2E000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 559 ] 
14:32:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2E000 to EndLba:0x2E008 with Increment Pattern 

14:32:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066667E0>, <py_sfcl.CommandDataDefinition object at 0x066666F0>) , Command count = 560 ] 
14:32:32: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666E10>, <py_sfcl.CommandDataDefinition object at 0x066669C0>) , Command count = 561 ] 
14:32:32: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:32: [DVTCommonLib]###  R1bCommandAbort called
14:32:32: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2A, False) , Command count = 562 ] 
14:32:32: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:32: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:34: Host Frequency set to 25000 KHz
14:32:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:34: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x065721E0>, 0x0, True) , Command count = 563 ] 
14:32:34: [GO18_globalSetVolt]### Host voltage value is set.
14:32:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x066665A0>, 0x0, False) , Command count = 564 ] 
14:32:34: [GO18_globalSetVolt]### Host voltage value is set.
14:32:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 565 ] 
14:32:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 566 ] 
14:32:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 567 ] 
14:32:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB120>, <py_sfcl.CommandDataDefinition object at 0x06666DE0>) , Command count = 568 ] 
14:32:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB1E0>, <py_sfcl.CommandDataDefinition object at 0x06666B10>) , Command count = 569 ] 
14:32:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:35: [ SetCardRCA(0x1, 0xD555) , Command count = 570 ] 
14:32:35: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:35: Host Frequency set to 25000 KHz
14:32:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:35: ####CSD Registe 2.0 Values####
14:32:35: CSD_STRUCTURE                                 :0x1
14:32:35: Reserv1                                       :0x0
14:32:35: Time Access 1 TAAC                            :0xe
14:32:35: Time Access 2 NSAC*100                        :0x0
14:32:35: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:35: Card Command Classess CCC                     :0x5b5
14:32:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:35: DSR(driver stage register)  DSR_IMP           :0x0
14:32:35: Reserv2                                       :0x0
14:32:35: Device Size C_SIZE                            :0xedc8
14:32:35: Reserv3                                       :0x0
14:32:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:35: Reserv4                                       :0x0
14:32:35: Write Speed Factor R2W_FACTOR                 :0x2
14:32:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:35: FILE_FORMAT_GRP                               :0x0
14:32:35: COPY flag                                     :0x1
14:32:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:35: File_Format                                   :0x0
14:32:35: CRC                                           :0x0
14:32:35: ####CSD Registe Values####  

14:32:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:35: [GetSCRRegisterEntry] Passed
14:32:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:35: Data_Status_After Erases          : 0
14:32:35: CPRM Security Support             : No Security
14:32:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:35: Spec. Version                     : Version 3.0X
14:32:35: Extended Security Support         : Extended_Security_Not_Supported
14:32:35: Command Support                   : COMMAND_SUPPORT
14:32:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB300>, <py_sfcl.CommandDataDefinition object at 0x066AB180>) , Command count = 571 ] 
14:32:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB210>, <py_sfcl.CommandDataDefinition object at 0x066AB270>) , Command count = 572 ] 
14:32:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:35: [ SetBusWidth(0x4) , Command count = 573 ] 
14:32:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06666750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 574 ] 
14:32:35: Protected Area Size 0x28000
14:32:35: Bus Width           2
14:32:35: Secure Mode         0
14:32:35: Speed  Class        4
14:32:35: Perf Move           0
14:32:35: Au Size             9
14:32:35: Erase Size          15
14:32:35: Erase Timeout       1
14:32:35: Erase offset        1
14:32:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 575 ] 
14:32:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:35: Host Frequency set to 100000 KHz
14:32:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:35: ####CSD Registe 2.0 Values####
14:32:35: CSD_STRUCTURE                                 :0x1
14:32:35: Reserv1                                       :0x0
14:32:35: Time Access 1 TAAC                            :0xe
14:32:35: Time Access 2 NSAC*100                        :0x0
14:32:35: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:35: Card Command Classess CCC                     :0x5b5
14:32:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:35: DSR(driver stage register)  DSR_IMP           :0x0
14:32:35: Reserv2                                       :0x0
14:32:35: Device Size C_SIZE                            :0xedc8
14:32:35: Reserv3                                       :0x0
14:32:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:35: Reserv4                                       :0x0
14:32:35: Write Speed Factor R2W_FACTOR                 :0x2
14:32:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:35: FILE_FORMAT_GRP                               :0x0
14:32:35: COPY flag                                     :0x1
14:32:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:35: File_Format                                   :0x0
14:32:35: CRC                                           :0x0
14:32:35: ####CSD Registe Values####  

14:32:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572A20>, <py_sfcl.CommandDataDefinition object at 0x06666FC0>) , Command count = 576 ] 
14:32:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066668A0>, <py_sfcl.CommandDataDefinition object at 0x06666540>) , Command count = 577 ] 
14:32:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:35: [DVTCommonLib]### Erase :Erase API Called
14:32:35: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2E000 with Blockcount:0x2001
14:32:35: [ EraseLba(0x2E000, 0x2001) , Command count = 578 ] 
14:32:35: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2E000 with Blockcount:0x2001 

14:32:35: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 4
14:32:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x30000 to EndLba:0x30008 with Increment Pattern
14:32:35: [ WrLbaNoData(0x30000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 579 ] 
14:32:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x30000 to EndLba:0x30008 with Increment Pattern 

14:32:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666570>, <py_sfcl.CommandDataDefinition object at 0x06666B40>) , Command count = 580 ] 
14:32:35: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB7B0>, <py_sfcl.CommandDataDefinition object at 0x066AB600>) , Command count = 581 ] 
14:32:35: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:35: [DVTCommonLib]###  R1bCommandAbort called
14:32:35: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1, False) , Command count = 582 ] 
14:32:35: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:35: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:37: Host Frequency set to 25000 KHz
14:32:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB5D0>, 0x0, True) , Command count = 583 ] 
14:32:37: [GO18_globalSetVolt]### Host voltage value is set.
14:32:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB9F0>, 0x0, False) , Command count = 584 ] 
14:32:37: [GO18_globalSetVolt]### Host voltage value is set.
14:32:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 585 ] 
14:32:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 586 ] 
14:32:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 587 ] 
14:32:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABEA0>, <py_sfcl.CommandDataDefinition object at 0x066ABF60>) , Command count = 588 ] 
14:32:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABED0>, <py_sfcl.CommandDataDefinition object at 0x066AB480>) , Command count = 589 ] 
14:32:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:37: [ SetCardRCA(0x1, 0xD555) , Command count = 590 ] 
14:32:37: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:38: Host Frequency set to 25000 KHz
14:32:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:38: ####CSD Registe 2.0 Values####
14:32:38: CSD_STRUCTURE                                 :0x1
14:32:38: Reserv1                                       :0x0
14:32:38: Time Access 1 TAAC                            :0xe
14:32:38: Time Access 2 NSAC*100                        :0x0
14:32:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:38: Card Command Classess CCC                     :0x5b5
14:32:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:38: DSR(driver stage register)  DSR_IMP           :0x0
14:32:38: Reserv2                                       :0x0
14:32:38: Device Size C_SIZE                            :0xedc8
14:32:38: Reserv3                                       :0x0
14:32:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:38: Reserv4                                       :0x0
14:32:38: Write Speed Factor R2W_FACTOR                 :0x2
14:32:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:38: FILE_FORMAT_GRP                               :0x0
14:32:38: COPY flag                                     :0x1
14:32:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:38: File_Format                                   :0x0
14:32:38: CRC                                           :0x0
14:32:38: ####CSD Registe Values####  

14:32:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:38: [GetSCRRegisterEntry] Passed
14:32:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:38: Data_Status_After Erases          : 0
14:32:38: CPRM Security Support             : No Security
14:32:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:38: Spec. Version                     : Version 3.0X
14:32:38: Extended Security Support         : Extended_Security_Not_Supported
14:32:38: Command Support                   : COMMAND_SUPPORT
14:32:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF00>, <py_sfcl.CommandDataDefinition object at 0x066AB660>) , Command count = 591 ] 
14:32:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A060>, <py_sfcl.CommandDataDefinition object at 0x066ABF90>) , Command count = 592 ] 
14:32:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:38: [ SetBusWidth(0x4) , Command count = 593 ] 
14:32:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A0C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 594 ] 
14:32:38: Protected Area Size 0x28000
14:32:38: Bus Width           2
14:32:38: Secure Mode         0
14:32:38: Speed  Class        4
14:32:38: Perf Move           0
14:32:38: Au Size             9
14:32:38: Erase Size          15
14:32:38: Erase Timeout       1
14:32:38: Erase offset        1
14:32:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 595 ] 
14:32:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:38: Host Frequency set to 100000 KHz
14:32:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:38: ####CSD Registe 2.0 Values####
14:32:38: CSD_STRUCTURE                                 :0x1
14:32:38: Reserv1                                       :0x0
14:32:38: Time Access 1 TAAC                            :0xe
14:32:38: Time Access 2 NSAC*100                        :0x0
14:32:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:38: Card Command Classess CCC                     :0x5b5
14:32:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:38: DSR(driver stage register)  DSR_IMP           :0x0
14:32:38: Reserv2                                       :0x0
14:32:38: Device Size C_SIZE                            :0xedc8
14:32:38: Reserv3                                       :0x0
14:32:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:38: Reserv4                                       :0x0
14:32:38: Write Speed Factor R2W_FACTOR                 :0x2
14:32:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:38: FILE_FORMAT_GRP                               :0x0
14:32:38: COPY flag                                     :0x1
14:32:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:38: File_Format                                   :0x0
14:32:38: CRC                                           :0x0
14:32:38: ####CSD Registe Values####  

14:32:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB4B0>, <py_sfcl.CommandDataDefinition object at 0x0667A2A0>) , Command count = 596 ] 
14:32:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06685750>, <py_sfcl.CommandDataDefinition object at 0x06685A50>) , Command count = 597 ] 
14:32:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:38: [DVTCommonLib]### Erase :Erase API Called
14:32:38: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x30000 with Blockcount:0x2001
14:32:38: [ EraseLba(0x30000, 0x2001) , Command count = 598 ] 
14:32:38: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x30000 with Blockcount:0x2001 

14:32:38: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 3
14:32:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x32000 to EndLba:0x32008 with Increment Pattern
14:32:38: [ WrLbaNoData(0x32000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 599 ] 
14:32:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x32000 to EndLba:0x32008 with Increment Pattern 

14:32:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A510>, <py_sfcl.CommandDataDefinition object at 0x0667A330>) , Command count = 600 ] 
14:32:38: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A420>, <py_sfcl.CommandDataDefinition object at 0x06685750>) , Command count = 601 ] 
14:32:38: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:38: [DVTCommonLib]###  R1bCommandAbort called
14:32:38: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x3, False) , Command count = 602 ] 
14:32:38: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:38: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:40: Host Frequency set to 25000 KHz
14:32:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:40: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A390>, 0x0, True) , Command count = 603 ] 
14:32:40: [GO18_globalSetVolt]### Host voltage value is set.
14:32:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A630>, 0x0, False) , Command count = 604 ] 
14:32:40: [GO18_globalSetVolt]### Host voltage value is set.
14:32:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 605 ] 
14:32:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 606 ] 
14:32:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 607 ] 
14:32:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A720>, <py_sfcl.CommandDataDefinition object at 0x0667A840>) , Command count = 608 ] 
14:32:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A750>, <py_sfcl.CommandDataDefinition object at 0x0667A4B0>) , Command count = 609 ] 
14:32:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:40: [ SetCardRCA(0x1, 0xD555) , Command count = 610 ] 
14:32:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:40: Host Frequency set to 25000 KHz
14:32:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:40: ####CSD Registe 2.0 Values####
14:32:40: CSD_STRUCTURE                                 :0x1
14:32:40: Reserv1                                       :0x0
14:32:40: Time Access 1 TAAC                            :0xe
14:32:40: Time Access 2 NSAC*100                        :0x0
14:32:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:40: Card Command Classess CCC                     :0x5b5
14:32:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:40: DSR(driver stage register)  DSR_IMP           :0x0
14:32:40: Reserv2                                       :0x0
14:32:40: Device Size C_SIZE                            :0xedc8
14:32:40: Reserv3                                       :0x0
14:32:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:40: Reserv4                                       :0x0
14:32:40: Write Speed Factor R2W_FACTOR                 :0x2
14:32:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:40: FILE_FORMAT_GRP                               :0x0
14:32:40: COPY flag                                     :0x1
14:32:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:40: File_Format                                   :0x0
14:32:40: CRC                                           :0x0
14:32:40: ####CSD Registe Values####  

14:32:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:40: [GetSCRRegisterEntry] Passed
14:32:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:40: Data_Status_After Erases          : 0
14:32:40: CPRM Security Support             : No Security
14:32:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:40: Spec. Version                     : Version 3.0X
14:32:40: Extended Security Support         : Extended_Security_Not_Supported
14:32:40: Command Support                   : COMMAND_SUPPORT
14:32:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A300>, <py_sfcl.CommandDataDefinition object at 0x0667A8A0>) , Command count = 611 ] 
14:32:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A7E0>, <py_sfcl.CommandDataDefinition object at 0x0667A780>) , Command count = 612 ] 
14:32:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:40: [ SetBusWidth(0x4) , Command count = 613 ] 
14:32:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A900>, <0x200/0x200, Spc, pat:0x0>) , Command count = 614 ] 
14:32:40: Protected Area Size 0x28000
14:32:40: Bus Width           2
14:32:40: Secure Mode         0
14:32:40: Speed  Class        4
14:32:40: Perf Move           0
14:32:40: Au Size             9
14:32:40: Erase Size          15
14:32:40: Erase Timeout       1
14:32:40: Erase offset        1
14:32:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 615 ] 
14:32:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:40: Host Frequency set to 100000 KHz
14:32:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:40: ####CSD Registe 2.0 Values####
14:32:40: CSD_STRUCTURE                                 :0x1
14:32:40: Reserv1                                       :0x0
14:32:40: Time Access 1 TAAC                            :0xe
14:32:40: Time Access 2 NSAC*100                        :0x0
14:32:40: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:40: Card Command Classess CCC                     :0x5b5
14:32:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:40: DSR(driver stage register)  DSR_IMP           :0x0
14:32:40: Reserv2                                       :0x0
14:32:40: Device Size C_SIZE                            :0xedc8
14:32:40: Reserv3                                       :0x0
14:32:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:40: Reserv4                                       :0x0
14:32:40: Write Speed Factor R2W_FACTOR                 :0x2
14:32:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:40: FILE_FORMAT_GRP                               :0x0
14:32:40: COPY flag                                     :0x1
14:32:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:40: File_Format                                   :0x0
14:32:40: CRC                                           :0x0
14:32:40: ####CSD Registe Values####  

14:32:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AA80>, <py_sfcl.CommandDataDefinition object at 0x0667AAE0>) , Command count = 616 ] 
14:32:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A030>, <py_sfcl.CommandDataDefinition object at 0x066856C0>) , Command count = 617 ] 
14:32:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:40: [DVTCommonLib]### Erase :Erase API Called
14:32:40: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x32000 with Blockcount:0x2001
14:32:40: [ EraseLba(0x32000, 0x2001) , Command count = 618 ] 
14:32:40: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x32000 with Blockcount:0x2001 

14:32:40: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 2
14:32:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x34000 to EndLba:0x34008 with Increment Pattern
14:32:40: [ WrLbaNoData(0x34000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 619 ] 
14:32:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x34000 to EndLba:0x34008 with Increment Pattern 

14:32:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AD20>, <py_sfcl.CommandDataDefinition object at 0x0667AB40>) , Command count = 620 ] 
14:32:41: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A450>, <py_sfcl.CommandDataDefinition object at 0x0667AC00>) , Command count = 621 ] 
14:32:41: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:41: [DVTCommonLib]###  R1bCommandAbort called
14:32:41: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x13, False) , Command count = 622 ] 
14:32:41: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:43: Host Frequency set to 25000 KHz
14:32:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667ABA0>, 0x0, True) , Command count = 623 ] 
14:32:43: [GO18_globalSetVolt]### Host voltage value is set.
14:32:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AE40>, 0x0, False) , Command count = 624 ] 
14:32:43: [GO18_globalSetVolt]### Host voltage value is set.
14:32:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 625 ] 
14:32:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 626 ] 
14:32:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 627 ] 
14:32:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AF60>, <py_sfcl.CommandDataDefinition object at 0x0667AE70>) , Command count = 628 ] 
14:32:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AF30>, <py_sfcl.CommandDataDefinition object at 0x0667AF00>) , Command count = 629 ] 
14:32:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:43: [ SetCardRCA(0x1, 0xD555) , Command count = 630 ] 
14:32:43: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:43: Host Frequency set to 25000 KHz
14:32:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:43: ####CSD Registe 2.0 Values####
14:32:43: CSD_STRUCTURE                                 :0x1
14:32:43: Reserv1                                       :0x0
14:32:43: Time Access 1 TAAC                            :0xe
14:32:43: Time Access 2 NSAC*100                        :0x0
14:32:43: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:43: Card Command Classess CCC                     :0x5b5
14:32:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:43: DSR(driver stage register)  DSR_IMP           :0x0
14:32:43: Reserv2                                       :0x0
14:32:43: Device Size C_SIZE                            :0xedc8
14:32:43: Reserv3                                       :0x0
14:32:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:43: Reserv4                                       :0x0
14:32:43: Write Speed Factor R2W_FACTOR                 :0x2
14:32:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:43: FILE_FORMAT_GRP                               :0x0
14:32:43: COPY flag                                     :0x1
14:32:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:43: File_Format                                   :0x0
14:32:43: CRC                                           :0x0
14:32:43: ####CSD Registe Values####  

14:32:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:43: [GetSCRRegisterEntry] Passed
14:32:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:43: Data_Status_After Erases          : 0
14:32:43: CPRM Security Support             : No Security
14:32:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:43: Spec. Version                     : Version 3.0X
14:32:43: Extended Security Support         : Extended_Security_Not_Supported
14:32:43: Command Support                   : COMMAND_SUPPORT
14:32:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C060>, <py_sfcl.CommandDataDefinition object at 0x0667A930>) , Command count = 631 ] 
14:32:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C030>, <py_sfcl.CommandDataDefinition object at 0x0667AFC0>) , Command count = 632 ] 
14:32:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:43: [ SetBusWidth(0x4) , Command count = 633 ] 
14:32:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 634 ] 
14:32:43: Protected Area Size 0x28000
14:32:43: Bus Width           2
14:32:43: Secure Mode         0
14:32:43: Speed  Class        4
14:32:43: Perf Move           0
14:32:43: Au Size             9
14:32:43: Erase Size          15
14:32:43: Erase Timeout       1
14:32:43: Erase offset        1
14:32:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 635 ] 
14:32:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:43: Host Frequency set to 100000 KHz
14:32:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:43: ####CSD Registe 2.0 Values####
14:32:43: CSD_STRUCTURE                                 :0x1
14:32:43: Reserv1                                       :0x0
14:32:43: Time Access 1 TAAC                            :0xe
14:32:43: Time Access 2 NSAC*100                        :0x0
14:32:43: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:43: Card Command Classess CCC                     :0x5b5
14:32:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:43: DSR(driver stage register)  DSR_IMP           :0x0
14:32:43: Reserv2                                       :0x0
14:32:43: Device Size C_SIZE                            :0xedc8
14:32:43: Reserv3                                       :0x0
14:32:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:43: Reserv4                                       :0x0
14:32:43: Write Speed Factor R2W_FACTOR                 :0x2
14:32:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:43: FILE_FORMAT_GRP                               :0x0
14:32:43: COPY flag                                     :0x1
14:32:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:43: File_Format                                   :0x0
14:32:43: CRC                                           :0x0
14:32:43: ####CSD Registe Values####  

14:32:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AA20>, <py_sfcl.CommandDataDefinition object at 0x0667A0C0>) , Command count = 636 ] 
14:32:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A990>, <py_sfcl.CommandDataDefinition object at 0x0667AD80>) , Command count = 637 ] 
14:32:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:43: [DVTCommonLib]### Erase :Erase API Called
14:32:43: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x34000 with Blockcount:0x2001
14:32:43: [ EraseLba(0x34000, 0x2001) , Command count = 638 ] 
14:32:43: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x34000 with Blockcount:0x2001 

14:32:43: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 1
14:32:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x36000 to EndLba:0x36008 with Increment Pattern
14:32:43: [ WrLbaNoData(0x36000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 639 ] 
14:32:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x36000 to EndLba:0x36008 with Increment Pattern 

14:32:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C570>, <py_sfcl.CommandDataDefinition object at 0x0667C390>) , Command count = 640 ] 
14:32:43: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ACC0>, <py_sfcl.CommandDataDefinition object at 0x0667C0F0>) , Command count = 641 ] 
14:32:43: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:43: [DVTCommonLib]###  R1bCommandAbort called
14:32:43: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x25, False) , Command count = 642 ] 
14:32:43: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:43: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:45: Host Frequency set to 25000 KHz
14:32:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:45: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C3F0>, 0x0, True) , Command count = 643 ] 
14:32:45: [GO18_globalSetVolt]### Host voltage value is set.
14:32:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C630>, 0x0, False) , Command count = 644 ] 
14:32:46: [GO18_globalSetVolt]### Host voltage value is set.
14:32:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 645 ] 
14:32:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 646 ] 
14:32:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 647 ] 
14:32:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C720>, <py_sfcl.CommandDataDefinition object at 0x0667C840>) , Command count = 648 ] 
14:32:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C750>, <py_sfcl.CommandDataDefinition object at 0x0667C6C0>) , Command count = 649 ] 
14:32:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:46: [ SetCardRCA(0x1, 0xD555) , Command count = 650 ] 
14:32:46: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:46: Host Frequency set to 25000 KHz
14:32:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:46: ####CSD Registe 2.0 Values####
14:32:46: CSD_STRUCTURE                                 :0x1
14:32:46: Reserv1                                       :0x0
14:32:46: Time Access 1 TAAC                            :0xe
14:32:46: Time Access 2 NSAC*100                        :0x0
14:32:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:46: Card Command Classess CCC                     :0x5b5
14:32:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:46: DSR(driver stage register)  DSR_IMP           :0x0
14:32:46: Reserv2                                       :0x0
14:32:46: Device Size C_SIZE                            :0xedc8
14:32:46: Reserv3                                       :0x0
14:32:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:46: Reserv4                                       :0x0
14:32:46: Write Speed Factor R2W_FACTOR                 :0x2
14:32:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:46: FILE_FORMAT_GRP                               :0x0
14:32:46: COPY flag                                     :0x1
14:32:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:46: File_Format                                   :0x0
14:32:46: CRC                                           :0x0
14:32:46: ####CSD Registe Values####  

14:32:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:46: [GetSCRRegisterEntry] Passed
14:32:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:46: Data_Status_After Erases          : 0
14:32:46: CPRM Security Support             : No Security
14:32:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:46: Spec. Version                     : Version 3.0X
14:32:46: Extended Security Support         : Extended_Security_Not_Supported
14:32:46: Command Support                   : COMMAND_SUPPORT
14:32:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C180>, <py_sfcl.CommandDataDefinition object at 0x0667C360>) , Command count = 651 ] 
14:32:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C7E0>, <py_sfcl.CommandDataDefinition object at 0x0667C780>) , Command count = 652 ] 
14:32:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:46: [ SetBusWidth(0x4) , Command count = 653 ] 
14:32:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C900>, <0x200/0x200, Spc, pat:0x0>) , Command count = 654 ] 
14:32:46: Protected Area Size 0x28000
14:32:46: Bus Width           2
14:32:46: Secure Mode         0
14:32:46: Speed  Class        4
14:32:46: Perf Move           0
14:32:46: Au Size             9
14:32:46: Erase Size          15
14:32:46: Erase Timeout       1
14:32:46: Erase offset        1
14:32:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 655 ] 
14:32:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:46: Host Frequency set to 100000 KHz
14:32:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:46: ####CSD Registe 2.0 Values####
14:32:46: CSD_STRUCTURE                                 :0x1
14:32:46: Reserv1                                       :0x0
14:32:46: Time Access 1 TAAC                            :0xe
14:32:46: Time Access 2 NSAC*100                        :0x0
14:32:46: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:46: Card Command Classess CCC                     :0x5b5
14:32:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:46: DSR(driver stage register)  DSR_IMP           :0x0
14:32:46: Reserv2                                       :0x0
14:32:46: Device Size C_SIZE                            :0xedc8
14:32:46: Reserv3                                       :0x0
14:32:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:46: Reserv4                                       :0x0
14:32:46: Write Speed Factor R2W_FACTOR                 :0x2
14:32:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:46: FILE_FORMAT_GRP                               :0x0
14:32:46: COPY flag                                     :0x1
14:32:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:46: File_Format                                   :0x0
14:32:46: CRC                                           :0x0
14:32:46: ####CSD Registe Values####  

14:32:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CA80>, <py_sfcl.CommandDataDefinition object at 0x0667CAE0>) , Command count = 656 ] 
14:32:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C1E0>, <py_sfcl.CommandDataDefinition object at 0x0667C540>) , Command count = 657 ] 
14:32:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:46: [DVTCommonLib]### Erase :Erase API Called
14:32:46: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x36000 with Blockcount:0x2001
14:32:46: [ EraseLba(0x36000, 0x2001) , Command count = 658 ] 
14:32:46: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x36000 with Blockcount:0x2001 

14:32:46: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 0
14:32:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x38000 to EndLba:0x38008 with Increment Pattern
14:32:46: [ WrLbaNoData(0x38000, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 659 ] 
14:32:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x38000 to EndLba:0x38008 with Increment Pattern 

14:32:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CCF0>, <py_sfcl.CommandDataDefinition object at 0x0667CB10>) , Command count = 660 ] 
14:32:46: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C4B0>, <py_sfcl.CommandDataDefinition object at 0x0667C5D0>) , Command count = 661 ] 
14:32:46: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:46: [DVTCommonLib]###  R1bCommandAbort called
14:32:46: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x27, False) , Command count = 662 ] 
14:32:46: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:46: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:48: Host Frequency set to 25000 KHz
14:32:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:48: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CB70>, 0x0, True) , Command count = 663 ] 
14:32:48: [GO18_globalSetVolt]### Host voltage value is set.
14:32:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CDB0>, 0x0, False) , Command count = 664 ] 
14:32:48: [GO18_globalSetVolt]### Host voltage value is set.
14:32:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 665 ] 
14:32:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 666 ] 
14:32:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 667 ] 
14:32:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CEA0>, <py_sfcl.CommandDataDefinition object at 0x0667CFC0>) , Command count = 668 ] 
14:32:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CED0>, <py_sfcl.CommandDataDefinition object at 0x0667C990>) , Command count = 669 ] 
14:32:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:49: [ SetCardRCA(0x1, 0xD555) , Command count = 670 ] 
14:32:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:49: Host Frequency set to 25000 KHz
14:32:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:49: ####CSD Registe 2.0 Values####
14:32:49: CSD_STRUCTURE                                 :0x1
14:32:49: Reserv1                                       :0x0
14:32:49: Time Access 1 TAAC                            :0xe
14:32:49: Time Access 2 NSAC*100                        :0x0
14:32:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:49: Card Command Classess CCC                     :0x5b5
14:32:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:49: DSR(driver stage register)  DSR_IMP           :0x0
14:32:49: Reserv2                                       :0x0
14:32:49: Device Size C_SIZE                            :0xedc8
14:32:49: Reserv3                                       :0x0
14:32:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:49: Reserv4                                       :0x0
14:32:49: Write Speed Factor R2W_FACTOR                 :0x2
14:32:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:49: FILE_FORMAT_GRP                               :0x0
14:32:49: COPY flag                                     :0x1
14:32:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:49: File_Format                                   :0x0
14:32:49: CRC                                           :0x0
14:32:49: ####CSD Registe Values####  

14:32:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:49: [GetSCRRegisterEntry] Passed
14:32:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:49: Data_Status_After Erases          : 0
14:32:49: CPRM Security Support             : No Security
14:32:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:49: Spec. Version                     : Version 3.0X
14:32:49: Extended Security Support         : Extended_Security_Not_Supported
14:32:49: Command Support                   : COMMAND_SUPPORT
14:32:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C270>, <py_sfcl.CommandDataDefinition object at 0x0667C930>) , Command count = 671 ] 
14:32:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F060>, <py_sfcl.CommandDataDefinition object at 0x0667CF60>) , Command count = 672 ] 
14:32:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:49: [ SetBusWidth(0x4) , Command count = 673 ] 
14:32:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 674 ] 
14:32:49: Protected Area Size 0x28000
14:32:49: Bus Width           2
14:32:49: Secure Mode         0
14:32:49: Speed  Class        4
14:32:49: Perf Move           0
14:32:49: Au Size             9
14:32:49: Erase Size          15
14:32:49: Erase Timeout       1
14:32:49: Erase offset        1
14:32:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 675 ] 
14:32:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:49: Host Frequency set to 100000 KHz
14:32:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:49: ####CSD Registe 2.0 Values####
14:32:49: CSD_STRUCTURE                                 :0x1
14:32:49: Reserv1                                       :0x0
14:32:49: Time Access 1 TAAC                            :0xe
14:32:49: Time Access 2 NSAC*100                        :0x0
14:32:49: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:49: Card Command Classess CCC                     :0x5b5
14:32:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:49: DSR(driver stage register)  DSR_IMP           :0x0
14:32:49: Reserv2                                       :0x0
14:32:49: Device Size C_SIZE                            :0xedc8
14:32:49: Reserv3                                       :0x0
14:32:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:49: Reserv4                                       :0x0
14:32:49: Write Speed Factor R2W_FACTOR                 :0x2
14:32:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:49: FILE_FORMAT_GRP                               :0x0
14:32:49: COPY flag                                     :0x1
14:32:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:49: File_Format                                   :0x0
14:32:49: CRC                                           :0x0
14:32:49: ####CSD Registe Values####  

14:32:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F180>, <py_sfcl.CommandDataDefinition object at 0x0667CA20>) , Command count = 676 ] 
14:32:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C960>, <py_sfcl.CommandDataDefinition object at 0x0667CCC0>) , Command count = 677 ] 
14:32:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:49: [DVTCommonLib]### Erase :Erase API Called
14:32:49: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x38000 with Blockcount:0x2001
14:32:49: [ EraseLba(0x38000, 0x2001) , Command count = 678 ] 
14:32:49: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x38000 with Blockcount:0x2001 

14:32:49: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Outer loop Count 1022
14:32:49: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 28
14:32:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x8 to EndLba:0x10 with Increment Pattern
14:32:49: [ WrLbaNoData(0x8, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 679 ] 
14:32:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x8 to EndLba:0x10 with Increment Pattern 

14:32:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F4B0>, <py_sfcl.CommandDataDefinition object at 0x0667F2D0>) , Command count = 680 ] 
14:32:49: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CC30>, <py_sfcl.CommandDataDefinition object at 0x0667F090>) , Command count = 681 ] 
14:32:49: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:49: [DVTCommonLib]###  R1bCommandAbort called
14:32:49: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x22, False) , Command count = 682 ] 
14:32:49: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:49: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:51: Host Frequency set to 25000 KHz
14:32:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F330>, 0x0, True) , Command count = 683 ] 
14:32:51: [GO18_globalSetVolt]### Host voltage value is set.
14:32:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F570>, 0x0, False) , Command count = 684 ] 
14:32:51: [GO18_globalSetVolt]### Host voltage value is set.
14:32:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 685 ] 
14:32:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 686 ] 
14:32:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 687 ] 
14:32:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F660>, <py_sfcl.CommandDataDefinition object at 0x0667F780>) , Command count = 688 ] 
14:32:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F690>, <py_sfcl.CommandDataDefinition object at 0x0667F150>) , Command count = 689 ] 
14:32:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:51: [ SetCardRCA(0x1, 0xD555) , Command count = 690 ] 
14:32:51: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:51: Host Frequency set to 25000 KHz
14:32:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:51: ####CSD Registe 2.0 Values####
14:32:51: CSD_STRUCTURE                                 :0x1
14:32:51: Reserv1                                       :0x0
14:32:51: Time Access 1 TAAC                            :0xe
14:32:51: Time Access 2 NSAC*100                        :0x0
14:32:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:51: Card Command Classess CCC                     :0x5b5
14:32:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:51: DSR(driver stage register)  DSR_IMP           :0x0
14:32:51: Reserv2                                       :0x0
14:32:51: Device Size C_SIZE                            :0xedc8
14:32:51: Reserv3                                       :0x0
14:32:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:51: Reserv4                                       :0x0
14:32:51: Write Speed Factor R2W_FACTOR                 :0x2
14:32:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:51: FILE_FORMAT_GRP                               :0x0
14:32:51: COPY flag                                     :0x1
14:32:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:52: File_Format                                   :0x0
14:32:52: CRC                                           :0x0
14:32:52: ####CSD Registe Values####  

14:32:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:52: [GetSCRRegisterEntry] Passed
14:32:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:52: Data_Status_After Erases          : 0
14:32:52: CPRM Security Support             : No Security
14:32:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:52: Spec. Version                     : Version 3.0X
14:32:52: Extended Security Support         : Extended_Security_Not_Supported
14:32:52: Command Support                   : COMMAND_SUPPORT
14:32:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CE70>, <py_sfcl.CommandDataDefinition object at 0x0667F240>) , Command count = 691 ] 
14:32:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F720>, <py_sfcl.CommandDataDefinition object at 0x0667F6C0>) , Command count = 692 ] 
14:32:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:52: [ SetBusWidth(0x4) , Command count = 693 ] 
14:32:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 694 ] 
14:32:52: Protected Area Size 0x28000
14:32:52: Bus Width           2
14:32:52: Secure Mode         0
14:32:52: Speed  Class        4
14:32:52: Perf Move           0
14:32:52: Au Size             9
14:32:52: Erase Size          15
14:32:52: Erase Timeout       1
14:32:52: Erase offset        1
14:32:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 695 ] 
14:32:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:52: Host Frequency set to 100000 KHz
14:32:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:52: ####CSD Registe 2.0 Values####
14:32:52: CSD_STRUCTURE                                 :0x1
14:32:52: Reserv1                                       :0x0
14:32:52: Time Access 1 TAAC                            :0xe
14:32:52: Time Access 2 NSAC*100                        :0x0
14:32:52: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:52: Card Command Classess CCC                     :0x5b5
14:32:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:52: DSR(driver stage register)  DSR_IMP           :0x0
14:32:52: Reserv2                                       :0x0
14:32:52: Device Size C_SIZE                            :0xedc8
14:32:52: Reserv3                                       :0x0
14:32:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:52: Reserv4                                       :0x0
14:32:52: Write Speed Factor R2W_FACTOR                 :0x2
14:32:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:52: FILE_FORMAT_GRP                               :0x0
14:32:52: COPY flag                                     :0x1
14:32:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:52: File_Format                                   :0x0
14:32:52: CRC                                           :0x0
14:32:52: ####CSD Registe Values####  

14:32:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F9C0>, <py_sfcl.CommandDataDefinition object at 0x0667FA20>) , Command count = 696 ] 
14:32:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F120>, <py_sfcl.CommandDataDefinition object at 0x0667F480>) , Command count = 697 ] 
14:32:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:52: [DVTCommonLib]### Erase :Erase API Called
14:32:52: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x8 with Blockcount:0x2001
14:32:52: [ EraseLba(0x8, 0x2001) , Command count = 698 ] 
14:32:52: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x8 with Blockcount:0x2001 

14:32:52: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 27
14:32:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2008 to EndLba:0x2010 with Increment Pattern
14:32:52: [ WrLbaNoData(0x2008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 699 ] 
14:32:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2008 to EndLba:0x2010 with Increment Pattern 

14:32:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FC30>, <py_sfcl.CommandDataDefinition object at 0x0667FA50>) , Command count = 700 ] 
14:32:52: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F3F0>, <py_sfcl.CommandDataDefinition object at 0x0667F510>) , Command count = 701 ] 
14:32:52: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:52: [DVTCommonLib]###  R1bCommandAbort called
14:32:52: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x31, False) , Command count = 702 ] 
14:32:52: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:52: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:54: Host Frequency set to 25000 KHz
14:32:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:54: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FAB0>, 0x0, True) , Command count = 703 ] 
14:32:54: [GO18_globalSetVolt]### Host voltage value is set.
14:32:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FCF0>, 0x0, False) , Command count = 704 ] 
14:32:54: [GO18_globalSetVolt]### Host voltage value is set.
14:32:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 705 ] 
14:32:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 706 ] 
14:32:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 707 ] 
14:32:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FDE0>, <py_sfcl.CommandDataDefinition object at 0x0667FF00>) , Command count = 708 ] 
14:32:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FE10>, <py_sfcl.CommandDataDefinition object at 0x0667F1E0>) , Command count = 709 ] 
14:32:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:54: [ SetCardRCA(0x1, 0xD555) , Command count = 710 ] 
14:32:54: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:54: Host Frequency set to 25000 KHz
14:32:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:54: ####CSD Registe 2.0 Values####
14:32:54: CSD_STRUCTURE                                 :0x1
14:32:54: Reserv1                                       :0x0
14:32:54: Time Access 1 TAAC                            :0xe
14:32:54: Time Access 2 NSAC*100                        :0x0
14:32:54: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:54: Card Command Classess CCC                     :0x5b5
14:32:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:54: DSR(driver stage register)  DSR_IMP           :0x0
14:32:54: Reserv2                                       :0x0
14:32:54: Device Size C_SIZE                            :0xedc8
14:32:54: Reserv3                                       :0x0
14:32:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:54: Reserv4                                       :0x0
14:32:54: Write Speed Factor R2W_FACTOR                 :0x2
14:32:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:54: FILE_FORMAT_GRP                               :0x0
14:32:54: COPY flag                                     :0x1
14:32:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:54: File_Format                                   :0x0
14:32:54: CRC                                           :0x0
14:32:54: ####CSD Registe Values####  

14:32:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:54: [GetSCRRegisterEntry] Passed
14:32:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:54: Data_Status_After Erases          : 0
14:32:54: CPRM Security Support             : No Security
14:32:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:54: Spec. Version                     : Version 3.0X
14:32:54: Extended Security Support         : Extended_Security_Not_Supported
14:32:54: Command Support                   : COMMAND_SUPPORT
14:32:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F870>, <py_sfcl.CommandDataDefinition object at 0x0667F9F0>) , Command count = 711 ] 
14:32:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FEA0>, <py_sfcl.CommandDataDefinition object at 0x0667FE40>) , Command count = 712 ] 
14:32:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:54: [ SetBusWidth(0x4) , Command count = 713 ] 
14:32:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667FF30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 714 ] 
14:32:54: Protected Area Size 0x28000
14:32:54: Bus Width           2
14:32:54: Secure Mode         0
14:32:54: Speed  Class        4
14:32:54: Perf Move           0
14:32:54: Au Size             9
14:32:54: Erase Size          15
14:32:54: Erase Timeout       1
14:32:54: Erase offset        1
14:32:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 715 ] 
14:32:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:54: Host Frequency set to 100000 KHz
14:32:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:54: ####CSD Registe 2.0 Values####
14:32:54: CSD_STRUCTURE                                 :0x1
14:32:54: Reserv1                                       :0x0
14:32:54: Time Access 1 TAAC                            :0xe
14:32:54: Time Access 2 NSAC*100                        :0x0
14:32:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:54: Card Command Classess CCC                     :0x5b5
14:32:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:54: DSR(driver stage register)  DSR_IMP           :0x0
14:32:54: Reserv2                                       :0x0
14:32:54: Device Size C_SIZE                            :0xedc8
14:32:54: Reserv3                                       :0x0
14:32:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:54: Reserv4                                       :0x0
14:32:54: Write Speed Factor R2W_FACTOR                 :0x2
14:32:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:54: FILE_FORMAT_GRP                               :0x0
14:32:54: COPY flag                                     :0x1
14:32:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:54: File_Format                                   :0x0
14:32:54: CRC                                           :0x0
14:32:54: ####CSD Registe Values####  

14:32:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F960>, <py_sfcl.CommandDataDefinition object at 0x0667F840>) , Command count = 716 ] 
14:32:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F7B0>, <py_sfcl.CommandDataDefinition object at 0x0667F8D0>) , Command count = 717 ] 
14:32:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:54: [DVTCommonLib]### Erase :Erase API Called
14:32:54: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2008 with Blockcount:0x2001
14:32:54: [ EraseLba(0x2008, 0x2001) , Command count = 718 ] 
14:32:54: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2008 with Blockcount:0x2001 

14:32:54: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 26
14:32:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x4008 to EndLba:0x4010 with Increment Pattern
14:32:54: [ WrLbaNoData(0x4008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 719 ] 
14:32:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x4008 to EndLba:0x4010 with Increment Pattern 

14:32:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FC90>, <py_sfcl.CommandDataDefinition object at 0x066833F0>) , Command count = 720 ] 
14:32:54: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FB70>, <py_sfcl.CommandDataDefinition object at 0x06683060>) , Command count = 721 ] 
14:32:54: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:54: [DVTCommonLib]###  R1bCommandAbort called
14:32:55: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x5, False) , Command count = 722 ] 
14:32:55: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:57: Host Frequency set to 25000 KHz
14:32:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683270>, 0x0, True) , Command count = 723 ] 
14:32:57: [GO18_globalSetVolt]### Host voltage value is set.
14:32:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x066834B0>, 0x0, False) , Command count = 724 ] 
14:32:57: [GO18_globalSetVolt]### Host voltage value is set.
14:32:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 725 ] 
14:32:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 726 ] 
14:32:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 727 ] 
14:32:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066835A0>, <py_sfcl.CommandDataDefinition object at 0x066836C0>) , Command count = 728 ] 
14:32:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066835D0>, <py_sfcl.CommandDataDefinition object at 0x06683540>) , Command count = 729 ] 
14:32:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:57: [ SetCardRCA(0x1, 0xD555) , Command count = 730 ] 
14:32:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:57: Host Frequency set to 25000 KHz
14:32:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:57: ####CSD Registe 2.0 Values####
14:32:57: CSD_STRUCTURE                                 :0x1
14:32:57: Reserv1                                       :0x0
14:32:57: Time Access 1 TAAC                            :0xe
14:32:57: Time Access 2 NSAC*100                        :0x0
14:32:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:57: Card Command Classess CCC                     :0x5b5
14:32:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:57: DSR(driver stage register)  DSR_IMP           :0x0
14:32:57: Reserv2                                       :0x0
14:32:57: Device Size C_SIZE                            :0xedc8
14:32:57: Reserv3                                       :0x0
14:32:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:57: Reserv4                                       :0x0
14:32:57: Write Speed Factor R2W_FACTOR                 :0x2
14:32:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:57: FILE_FORMAT_GRP                               :0x0
14:32:57: COPY flag                                     :0x1
14:32:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:57: File_Format                                   :0x0
14:32:57: CRC                                           :0x0
14:32:57: ####CSD Registe Values####  

14:32:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:57: [GetSCRRegisterEntry] Passed
14:32:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:57: Data_Status_After Erases          : 0
14:32:57: CPRM Security Support             : No Security
14:32:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:57: Spec. Version                     : Version 3.0X
14:32:57: Extended Security Support         : Extended_Security_Not_Supported
14:32:57: Command Support                   : COMMAND_SUPPORT
14:32:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683030>, <py_sfcl.CommandDataDefinition object at 0x066831B0>) , Command count = 731 ] 
14:32:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683660>, <py_sfcl.CommandDataDefinition object at 0x06683600>) , Command count = 732 ] 
14:32:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:57: [ SetBusWidth(0x4) , Command count = 733 ] 
14:32:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 734 ] 
14:32:57: Protected Area Size 0x28000
14:32:57: Bus Width           2
14:32:57: Secure Mode         0
14:32:57: Speed  Class        4
14:32:57: Perf Move           0
14:32:57: Au Size             9
14:32:57: Erase Size          15
14:32:57: Erase Timeout       1
14:32:57: Erase offset        1
14:32:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 735 ] 
14:32:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:57: Host Frequency set to 100000 KHz
14:32:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:57: ####CSD Registe 2.0 Values####
14:32:57: CSD_STRUCTURE                                 :0x1
14:32:57: Reserv1                                       :0x0
14:32:57: Time Access 1 TAAC                            :0xe
14:32:57: Time Access 2 NSAC*100                        :0x0
14:32:57: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:57: Card Command Classess CCC                     :0x5b5
14:32:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:57: DSR(driver stage register)  DSR_IMP           :0x0
14:32:57: Reserv2                                       :0x0
14:32:57: Device Size C_SIZE                            :0xedc8
14:32:57: Reserv3                                       :0x0
14:32:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:57: Reserv4                                       :0x0
14:32:57: Write Speed Factor R2W_FACTOR                 :0x2
14:32:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:57: FILE_FORMAT_GRP                               :0x0
14:32:57: COPY flag                                     :0x1
14:32:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:57: File_Format                                   :0x0
14:32:57: CRC                                           :0x0
14:32:57: ####CSD Registe Values####  

14:32:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683900>, <py_sfcl.CommandDataDefinition object at 0x06683960>) , Command count = 736 ] 
14:32:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683090>, <py_sfcl.CommandDataDefinition object at 0x066833C0>) , Command count = 737 ] 
14:32:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:57: [DVTCommonLib]### Erase :Erase API Called
14:32:57: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x4008 with Blockcount:0x2001
14:32:57: [ EraseLba(0x4008, 0x2001) , Command count = 738 ] 
14:32:57: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x4008 with Blockcount:0x2001 

14:32:57: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 25
14:32:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x6008 to EndLba:0x6010 with Increment Pattern
14:32:57: [ WrLbaNoData(0x6008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 739 ] 
14:32:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x6008 to EndLba:0x6010 with Increment Pattern 

14:32:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683B70>, <py_sfcl.CommandDataDefinition object at 0x06683990>) , Command count = 740 ] 
14:32:57: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:32:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683330>, <py_sfcl.CommandDataDefinition object at 0x06683450>) , Command count = 741 ] 
14:32:57: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:32:57: [DVTCommonLib]###  R1bCommandAbort called
14:32:57: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x22, False) , Command count = 742 ] 
14:32:57: [DVTCommonLib]###  R1bCommandAbort Completed 

14:32:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:59: Host Frequency set to 25000 KHz
14:32:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x066839F0>, 0x0, True) , Command count = 743 ] 
14:32:59: [GO18_globalSetVolt]### Host voltage value is set.
14:32:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683C30>, 0x0, False) , Command count = 744 ] 
14:32:59: [GO18_globalSetVolt]### Host voltage value is set.
14:32:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 745 ] 
14:32:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 746 ] 
14:33:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 747 ] 
14:33:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D20>, <py_sfcl.CommandDataDefinition object at 0x06683E40>) , Command count = 748 ] 
14:33:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D50>, <py_sfcl.CommandDataDefinition object at 0x06683AE0>) , Command count = 749 ] 
14:33:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:00: [ SetCardRCA(0x1, 0xD555) , Command count = 750 ] 
14:33:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:00: Host Frequency set to 25000 KHz
14:33:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:00: ####CSD Registe 2.0 Values####
14:33:00: CSD_STRUCTURE                                 :0x1
14:33:00: Reserv1                                       :0x0
14:33:00: Time Access 1 TAAC                            :0xe
14:33:00: Time Access 2 NSAC*100                        :0x0
14:33:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:00: Card Command Classess CCC                     :0x5b5
14:33:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:00: DSR(driver stage register)  DSR_IMP           :0x0
14:33:00: Reserv2                                       :0x0
14:33:00: Device Size C_SIZE                            :0xedc8
14:33:00: Reserv3                                       :0x0
14:33:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:00: Reserv4                                       :0x0
14:33:00: Write Speed Factor R2W_FACTOR                 :0x2
14:33:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:00: FILE_FORMAT_GRP                               :0x0
14:33:00: COPY flag                                     :0x1
14:33:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:00: File_Format                                   :0x0
14:33:00: CRC                                           :0x0
14:33:00: ####CSD Registe Values####  

14:33:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:00: [GetSCRRegisterEntry] Passed
14:33:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:00: Data_Status_After Erases          : 0
14:33:00: CPRM Security Support             : No Security
14:33:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:00: Spec. Version                     : Version 3.0X
14:33:00: Extended Security Support         : Extended_Security_Not_Supported
14:33:00: Command Support                   : COMMAND_SUPPORT
14:33:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066837B0>, <py_sfcl.CommandDataDefinition object at 0x06683930>) , Command count = 751 ] 
14:33:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683DE0>, <py_sfcl.CommandDataDefinition object at 0x06683D80>) , Command count = 752 ] 
14:33:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:00: [ SetBusWidth(0x4) , Command count = 753 ] 
14:33:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683F30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 754 ] 
14:33:00: Protected Area Size 0x28000
14:33:00: Bus Width           2
14:33:00: Secure Mode         0
14:33:00: Speed  Class        4
14:33:00: Perf Move           0
14:33:00: Au Size             9
14:33:00: Erase Size          15
14:33:00: Erase Timeout       1
14:33:00: Erase offset        1
14:33:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 755 ] 
14:33:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:00: Host Frequency set to 100000 KHz
14:33:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:00: ####CSD Registe 2.0 Values####
14:33:00: CSD_STRUCTURE                                 :0x1
14:33:00: Reserv1                                       :0x0
14:33:00: Time Access 1 TAAC                            :0xe
14:33:00: Time Access 2 NSAC*100                        :0x0
14:33:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:00: Card Command Classess CCC                     :0x5b5
14:33:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:00: DSR(driver stage register)  DSR_IMP           :0x0
14:33:00: Reserv2                                       :0x0
14:33:00: Device Size C_SIZE                            :0xedc8
14:33:00: Reserv3                                       :0x0
14:33:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:00: Reserv4                                       :0x0
14:33:00: Write Speed Factor R2W_FACTOR                 :0x2
14:33:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:00: FILE_FORMAT_GRP                               :0x0
14:33:00: COPY flag                                     :0x1
14:33:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:00: File_Format                                   :0x0
14:33:00: CRC                                           :0x0
14:33:00: ####CSD Registe Values####  

14:33:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066838A0>, <py_sfcl.CommandDataDefinition object at 0x06683F00>) , Command count = 756 ] 
14:33:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066836F0>, <py_sfcl.CommandDataDefinition object at 0x06683B40>) , Command count = 757 ] 
14:33:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:00: [DVTCommonLib]### Erase :Erase API Called
14:33:00: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x6008 with Blockcount:0x2001
14:33:00: [ EraseLba(0x6008, 0x2001) , Command count = 758 ] 
14:33:00: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x6008 with Blockcount:0x2001 

14:33:00: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 24
14:33:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x8008 to EndLba:0x8010 with Increment Pattern
14:33:00: [ WrLbaNoData(0x8008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 759 ] 
14:33:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x8008 to EndLba:0x8010 with Increment Pattern 

14:33:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC0480>, <py_sfcl.CommandDataDefinition object at 0x05FC6F90>) , Command count = 760 ] 
14:33:00: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683AB0>, <py_sfcl.CommandDataDefinition object at 0x06683F90>) , Command count = 761 ] 
14:33:00: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:00: [DVTCommonLib]###  R1bCommandAbort called
14:33:00: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x23, False) , Command count = 762 ] 
14:33:00: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:02: Host Frequency set to 25000 KHz
14:33:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:02: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x01E42840>, 0x0, True) , Command count = 763 ] 
14:33:02: [GO18_globalSetVolt]### Host voltage value is set.
14:33:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FE8FC0>, 0x0, False) , Command count = 764 ] 
14:33:02: [GO18_globalSetVolt]### Host voltage value is set.
14:33:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 765 ] 
14:33:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 766 ] 
14:33:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 767 ] 
14:33:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6570>, <py_sfcl.CommandDataDefinition object at 0x05FED1B0>) , Command count = 768 ] 
14:33:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8990>, <py_sfcl.CommandDataDefinition object at 0x06685240>) , Command count = 769 ] 
14:33:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:03: [ SetCardRCA(0x1, 0xD555) , Command count = 770 ] 
14:33:03: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:03: Host Frequency set to 25000 KHz
14:33:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:03: ####CSD Registe 2.0 Values####
14:33:03: CSD_STRUCTURE                                 :0x1
14:33:03: Reserv1                                       :0x0
14:33:03: Time Access 1 TAAC                            :0xe
14:33:03: Time Access 2 NSAC*100                        :0x0
14:33:03: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:03: Card Command Classess CCC                     :0x5b5
14:33:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:03: DSR(driver stage register)  DSR_IMP           :0x0
14:33:03: Reserv2                                       :0x0
14:33:03: Device Size C_SIZE                            :0xedc8
14:33:03: Reserv3                                       :0x0
14:33:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:03: Reserv4                                       :0x0
14:33:03: Write Speed Factor R2W_FACTOR                 :0x2
14:33:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:03: FILE_FORMAT_GRP                               :0x0
14:33:03: COPY flag                                     :0x1
14:33:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:03: File_Format                                   :0x0
14:33:03: CRC                                           :0x0
14:33:03: ####CSD Registe Values####  

14:33:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:03: [GetSCRRegisterEntry] Passed
14:33:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:03: Data_Status_After Erases          : 0
14:33:03: CPRM Security Support             : No Security
14:33:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:03: Spec. Version                     : Version 3.0X
14:33:03: Extended Security Support         : Extended_Security_Not_Supported
14:33:03: Command Support                   : COMMAND_SUPPORT
14:33:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683CF0>, <py_sfcl.CommandDataDefinition object at 0x06685CC0>) , Command count = 771 ] 
14:33:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8F00>, <py_sfcl.CommandDataDefinition object at 0x06685210>) , Command count = 772 ] 
14:33:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:03: [ SetBusWidth(0x4) , Command count = 773 ] 
14:33:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685BA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 774 ] 
14:33:03: Protected Area Size 0x28000
14:33:03: Bus Width           2
14:33:03: Secure Mode         0
14:33:03: Speed  Class        4
14:33:03: Perf Move           0
14:33:03: Au Size             9
14:33:03: Erase Size          15
14:33:03: Erase Timeout       1
14:33:03: Erase offset        1
14:33:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 775 ] 
14:33:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:03: Host Frequency set to 100000 KHz
14:33:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:03: ####CSD Registe 2.0 Values####
14:33:03: CSD_STRUCTURE                                 :0x1
14:33:03: Reserv1                                       :0x0
14:33:03: Time Access 1 TAAC                            :0xe
14:33:03: Time Access 2 NSAC*100                        :0x0
14:33:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:03: Card Command Classess CCC                     :0x5b5
14:33:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:03: DSR(driver stage register)  DSR_IMP           :0x0
14:33:03: Reserv2                                       :0x0
14:33:03: Device Size C_SIZE                            :0xedc8
14:33:03: Reserv3                                       :0x0
14:33:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:03: Reserv4                                       :0x0
14:33:03: Write Speed Factor R2W_FACTOR                 :0x2
14:33:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:03: FILE_FORMAT_GRP                               :0x0
14:33:03: COPY flag                                     :0x1
14:33:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:03: File_Format                                   :0x0
14:33:03: CRC                                           :0x0
14:33:03: ####CSD Registe Values####  

14:33:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC01E0>, <py_sfcl.CommandDataDefinition object at 0x05FC6360>) , Command count = 776 ] 
14:33:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066854E0>, <py_sfcl.CommandDataDefinition object at 0x06685BD0>) , Command count = 777 ] 
14:33:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:03: [DVTCommonLib]### Erase :Erase API Called
14:33:03: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x8008 with Blockcount:0x2001
14:33:03: [ EraseLba(0x8008, 0x2001) , Command count = 778 ] 
14:33:03: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x8008 with Blockcount:0x2001 

14:33:03: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 23
14:33:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xA008 to EndLba:0xA010 with Increment Pattern
14:33:03: [ WrLbaNoData(0xA008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 779 ] 
14:33:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xA008 to EndLba:0xA010 with Increment Pattern 

14:33:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BE10>, <py_sfcl.CommandDataDefinition object at 0x06685600>) , Command count = 780 ] 
14:33:03: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8F90>, <py_sfcl.CommandDataDefinition object at 0x06685180>) , Command count = 781 ] 
14:33:03: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:03: [DVTCommonLib]###  R1bCommandAbort called
14:33:03: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1C, False) , Command count = 782 ] 
14:33:03: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:05: Host Frequency set to 25000 KHz
14:33:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x060327B0>, 0x0, True) , Command count = 783 ] 
14:33:05: [GO18_globalSetVolt]### Host voltage value is set.
14:33:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x060329F0>, 0x0, False) , Command count = 784 ] 
14:33:05: [GO18_globalSetVolt]### Host voltage value is set.
14:33:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 785 ] 
14:33:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 786 ] 
14:33:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 787 ] 
14:33:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032AE0>, <py_sfcl.CommandDataDefinition object at 0x06685C60>) , Command count = 788 ] 
14:33:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC0690>, <py_sfcl.CommandDataDefinition object at 0x066853C0>) , Command count = 789 ] 
14:33:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:05: [ SetCardRCA(0x1, 0xD555) , Command count = 790 ] 
14:33:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:05: Host Frequency set to 25000 KHz
14:33:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:06: ####CSD Registe 2.0 Values####
14:33:06: CSD_STRUCTURE                                 :0x1
14:33:06: Reserv1                                       :0x0
14:33:06: Time Access 1 TAAC                            :0xe
14:33:06: Time Access 2 NSAC*100                        :0x0
14:33:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:06: Card Command Classess CCC                     :0x5b5
14:33:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:06: DSR(driver stage register)  DSR_IMP           :0x0
14:33:06: Reserv2                                       :0x0
14:33:06: Device Size C_SIZE                            :0xedc8
14:33:06: Reserv3                                       :0x0
14:33:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:06: Reserv4                                       :0x0
14:33:06: Write Speed Factor R2W_FACTOR                 :0x2
14:33:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:06: FILE_FORMAT_GRP                               :0x0
14:33:06: COPY flag                                     :0x1
14:33:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:06: File_Format                                   :0x0
14:33:06: CRC                                           :0x0
14:33:06: ####CSD Registe Values####  

14:33:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:06: [GetSCRRegisterEntry] Passed
14:33:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:06: Data_Status_After Erases          : 0
14:33:06: CPRM Security Support             : No Security
14:33:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:06: Spec. Version                     : Version 3.0X
14:33:06: Extended Security Support         : Extended_Security_Not_Supported
14:33:06: Command Support                   : COMMAND_SUPPORT
14:33:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E5BDB0>, <py_sfcl.CommandDataDefinition object at 0x06685780>) , Command count = 791 ] 
14:33:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032BA0>, <py_sfcl.CommandDataDefinition object at 0x066855D0>) , Command count = 792 ] 
14:33:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:06: [ SetBusWidth(0x4) , Command count = 793 ] 
14:33:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685C90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 794 ] 
14:33:06: Protected Area Size 0x28000
14:33:06: Bus Width           2
14:33:06: Secure Mode         0
14:33:06: Speed  Class        4
14:33:06: Perf Move           0
14:33:06: Au Size             9
14:33:06: Erase Size          15
14:33:06: Erase Timeout       1
14:33:06: Erase offset        1
14:33:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 795 ] 
14:33:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:06: Host Frequency set to 100000 KHz
14:33:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:06: ####CSD Registe 2.0 Values####
14:33:06: CSD_STRUCTURE                                 :0x1
14:33:06: Reserv1                                       :0x0
14:33:06: Time Access 1 TAAC                            :0xe
14:33:06: Time Access 2 NSAC*100                        :0x0
14:33:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:06: Card Command Classess CCC                     :0x5b5
14:33:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:06: DSR(driver stage register)  DSR_IMP           :0x0
14:33:06: Reserv2                                       :0x0
14:33:06: Device Size C_SIZE                            :0xedc8
14:33:06: Reserv3                                       :0x0
14:33:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:06: Reserv4                                       :0x0
14:33:06: Write Speed Factor R2W_FACTOR                 :0x2
14:33:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:06: FILE_FORMAT_GRP                               :0x0
14:33:06: COPY flag                                     :0x1
14:33:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:06: File_Format                                   :0x0
14:33:06: CRC                                           :0x0
14:33:06: ####CSD Registe Values####  

14:33:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDAE40>, <py_sfcl.CommandDataDefinition object at 0x066859C0>) , Command count = 796 ] 
14:33:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066858A0>, <py_sfcl.CommandDataDefinition object at 0x066854B0>) , Command count = 797 ] 
14:33:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:06: [DVTCommonLib]### Erase :Erase API Called
14:33:06: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xA008 with Blockcount:0x2001
14:33:06: [ EraseLba(0xA008, 0x2001) , Command count = 798 ] 
14:33:06: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xA008 with Blockcount:0x2001 

14:33:06: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 22
14:33:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xC008 to EndLba:0xC010 with Increment Pattern
14:33:06: [ WrLbaNoData(0xC008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 799 ] 
14:33:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xC008 to EndLba:0xC010 with Increment Pattern 

14:33:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BF90>, <py_sfcl.CommandDataDefinition object at 0x06685960>) , Command count = 800 ] 
14:33:06: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032810>, <py_sfcl.CommandDataDefinition object at 0x06685540>) , Command count = 801 ] 
14:33:06: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:06: [DVTCommonLib]###  R1bCommandAbort called
14:33:06: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x28, False) , Command count = 802 ] 
14:33:06: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:08: Host Frequency set to 25000 KHz
14:33:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:08: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x06685D20>, 0x0, True) , Command count = 803 ] 
14:33:08: [GO18_globalSetVolt]### Host voltage value is set.
14:33:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x066666C0>, 0x0, False) , Command count = 804 ] 
14:33:08: [GO18_globalSetVolt]### Host voltage value is set.
14:33:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 805 ] 
14:33:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 806 ] 
14:33:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:08: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 807 ] 
14:33:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666390>, <py_sfcl.CommandDataDefinition object at 0x06666BA0>) , Command count = 808 ] 
14:33:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666630>, <py_sfcl.CommandDataDefinition object at 0x06685090>) , Command count = 809 ] 
14:33:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:08: [ SetCardRCA(0x1, 0xD555) , Command count = 810 ] 
14:33:08: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:08: Host Frequency set to 25000 KHz
14:33:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:08: ####CSD Registe 2.0 Values####
14:33:08: CSD_STRUCTURE                                 :0x1
14:33:08: Reserv1                                       :0x0
14:33:08: Time Access 1 TAAC                            :0xe
14:33:08: Time Access 2 NSAC*100                        :0x0
14:33:08: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:08: Card Command Classess CCC                     :0x5b5
14:33:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:08: DSR(driver stage register)  DSR_IMP           :0x0
14:33:08: Reserv2                                       :0x0
14:33:08: Device Size C_SIZE                            :0xedc8
14:33:08: Reserv3                                       :0x0
14:33:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:08: Reserv4                                       :0x0
14:33:08: Write Speed Factor R2W_FACTOR                 :0x2
14:33:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:08: FILE_FORMAT_GRP                               :0x0
14:33:08: COPY flag                                     :0x1
14:33:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:08: File_Format                                   :0x0
14:33:08: CRC                                           :0x0
14:33:08: ####CSD Registe Values####  

14:33:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:08: [GetSCRRegisterEntry] Passed
14:33:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:08: Data_Status_After Erases          : 0
14:33:08: CPRM Security Support             : No Security
14:33:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:08: Spec. Version                     : Version 3.0X
14:33:08: Extended Security Support         : Extended_Security_Not_Supported
14:33:08: Command Support                   : COMMAND_SUPPORT
14:33:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032B10>, <py_sfcl.CommandDataDefinition object at 0x06666B70>) , Command count = 811 ] 
14:33:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066667E0>, <py_sfcl.CommandDataDefinition object at 0x066666F0>) , Command count = 812 ] 
14:33:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:08: [ SetBusWidth(0x4) , Command count = 813 ] 
14:33:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066662D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 814 ] 
14:33:08: Protected Area Size 0x28000
14:33:08: Bus Width           2
14:33:08: Secure Mode         0
14:33:08: Speed  Class        4
14:33:08: Perf Move           0
14:33:08: Au Size             9
14:33:08: Erase Size          15
14:33:08: Erase Timeout       1
14:33:08: Erase offset        1
14:33:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 815 ] 
14:33:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:08: Host Frequency set to 100000 KHz
14:33:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:08: ####CSD Registe 2.0 Values####
14:33:08: CSD_STRUCTURE                                 :0x1
14:33:08: Reserv1                                       :0x0
14:33:08: Time Access 1 TAAC                            :0xe
14:33:08: Time Access 2 NSAC*100                        :0x0
14:33:08: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:08: Card Command Classess CCC                     :0x5b5
14:33:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:08: DSR(driver stage register)  DSR_IMP           :0x0
14:33:08: Reserv2                                       :0x0
14:33:08: Device Size C_SIZE                            :0xedc8
14:33:08: Reserv3                                       :0x0
14:33:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:08: Reserv4                                       :0x0
14:33:08: Write Speed Factor R2W_FACTOR                 :0x2
14:33:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:08: FILE_FORMAT_GRP                               :0x0
14:33:08: COPY flag                                     :0x1
14:33:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:08: File_Format                                   :0x0
14:33:08: CRC                                           :0x0
14:33:08: ####CSD Registe Values####  

14:33:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065724B0>, <py_sfcl.CommandDataDefinition object at 0x06666720>) , Command count = 816 ] 
14:33:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06685C90>, <py_sfcl.CommandDataDefinition object at 0x06685B10>) , Command count = 817 ] 
14:33:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:08: [DVTCommonLib]### Erase :Erase API Called
14:33:08: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xC008 with Blockcount:0x2001
14:33:08: [ EraseLba(0xC008, 0x2001) , Command count = 818 ] 
14:33:08: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xC008 with Blockcount:0x2001 

14:33:08: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 21
14:33:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xE008 to EndLba:0xE010 with Increment Pattern
14:33:08: [ WrLbaNoData(0xE008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 819 ] 
14:33:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xE008 to EndLba:0xE010 with Increment Pattern 

14:33:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB120>, <py_sfcl.CommandDataDefinition object at 0x06666DE0>) , Command count = 820 ] 
14:33:08: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666120>, <py_sfcl.CommandDataDefinition object at 0x06685C90>) , Command count = 821 ] 
14:33:08: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:08: [DVTCommonLib]###  R1bCommandAbort called
14:33:09: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2A, False) , Command count = 822 ] 
14:33:09: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:09: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:11: Host Frequency set to 25000 KHz
14:33:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:11: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB300>, 0x0, True) , Command count = 823 ] 
14:33:11: [GO18_globalSetVolt]### Host voltage value is set.
14:33:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB2A0>, 0x0, False) , Command count = 824 ] 
14:33:11: [GO18_globalSetVolt]### Host voltage value is set.
14:33:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 825 ] 
14:33:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 826 ] 
14:33:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 827 ] 
14:33:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572A20>, <py_sfcl.CommandDataDefinition object at 0x066AB210>) , Command count = 828 ] 
14:33:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666360>, <py_sfcl.CommandDataDefinition object at 0x06666660>) , Command count = 829 ] 
14:33:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:11: [ SetCardRCA(0x1, 0xD555) , Command count = 830 ] 
14:33:11: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:11: Host Frequency set to 25000 KHz
14:33:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:11: ####CSD Registe 2.0 Values####
14:33:11: CSD_STRUCTURE                                 :0x1
14:33:11: Reserv1                                       :0x0
14:33:11: Time Access 1 TAAC                            :0xe
14:33:11: Time Access 2 NSAC*100                        :0x0
14:33:11: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:11: Card Command Classess CCC                     :0x5b5
14:33:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:11: DSR(driver stage register)  DSR_IMP           :0x0
14:33:11: Reserv2                                       :0x0
14:33:11: Device Size C_SIZE                            :0xedc8
14:33:11: Reserv3                                       :0x0
14:33:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:11: Reserv4                                       :0x0
14:33:11: Write Speed Factor R2W_FACTOR                 :0x2
14:33:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:11: FILE_FORMAT_GRP                               :0x0
14:33:11: COPY flag                                     :0x1
14:33:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:11: File_Format                                   :0x0
14:33:11: CRC                                           :0x0
14:33:11: ####CSD Registe Values####  

14:33:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:11: [GetSCRRegisterEntry] Passed
14:33:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:11: Data_Status_After Erases          : 0
14:33:11: CPRM Security Support             : No Security
14:33:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:11: Spec. Version                     : Version 3.0X
14:33:11: Extended Security Support         : Extended_Security_Not_Supported
14:33:11: Command Support                   : COMMAND_SUPPORT
14:33:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB570>, <py_sfcl.CommandDataDefinition object at 0x066668A0>) , Command count = 831 ] 
14:33:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB5A0>, <py_sfcl.CommandDataDefinition object at 0x06666570>) , Command count = 832 ] 
14:33:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:11: [ SetBusWidth(0x4) , Command count = 833 ] 
14:33:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066665A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 834 ] 
14:33:11: Protected Area Size 0x28000
14:33:11: Bus Width           2
14:33:11: Secure Mode         0
14:33:11: Speed  Class        4
14:33:11: Perf Move           0
14:33:11: Au Size             9
14:33:11: Erase Size          15
14:33:11: Erase Timeout       1
14:33:11: Erase offset        1
14:33:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 835 ] 
14:33:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:11: Host Frequency set to 100000 KHz
14:33:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:11: ####CSD Registe 2.0 Values####
14:33:11: CSD_STRUCTURE                                 :0x1
14:33:11: Reserv1                                       :0x0
14:33:11: Time Access 1 TAAC                            :0xe
14:33:11: Time Access 2 NSAC*100                        :0x0
14:33:11: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:11: Card Command Classess CCC                     :0x5b5
14:33:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:11: DSR(driver stage register)  DSR_IMP           :0x0
14:33:11: Reserv2                                       :0x0
14:33:11: Device Size C_SIZE                            :0xedc8
14:33:11: Reserv3                                       :0x0
14:33:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:11: Reserv4                                       :0x0
14:33:11: Write Speed Factor R2W_FACTOR                 :0x2
14:33:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:11: FILE_FORMAT_GRP                               :0x0
14:33:11: COPY flag                                     :0x1
14:33:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:11: File_Format                                   :0x0
14:33:11: CRC                                           :0x0
14:33:11: ####CSD Registe Values####  

14:33:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB420>, <py_sfcl.CommandDataDefinition object at 0x066664E0>) , Command count = 836 ] 
14:33:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BED0>, <py_sfcl.CommandDataDefinition object at 0x06666840>) , Command count = 837 ] 
14:33:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:11: [DVTCommonLib]### Erase :Erase API Called
14:33:11: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xE008 with Blockcount:0x2001
14:33:11: [ EraseLba(0xE008, 0x2001) , Command count = 838 ] 
14:33:11: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xE008 with Blockcount:0x2001 

14:33:11: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 20
14:33:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x10008 to EndLba:0x10010 with Increment Pattern
14:33:11: [ WrLbaNoData(0x10008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 839 ] 
14:33:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x10008 to EndLba:0x10010 with Increment Pattern 

14:33:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABEA0>, <py_sfcl.CommandDataDefinition object at 0x066ABF60>) , Command count = 840 ] 
14:33:11: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666420>, <py_sfcl.CommandDataDefinition object at 0x066AB600>) , Command count = 841 ] 
14:33:11: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:11: [DVTCommonLib]###  R1bCommandAbort called
14:33:11: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x26, False) , Command count = 842 ] 
14:33:11: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:13: Host Frequency set to 25000 KHz
14:33:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABF00>, 0x0, True) , Command count = 843 ] 
14:33:13: [GO18_globalSetVolt]### Host voltage value is set.
14:33:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABFC0>, 0x0, False) , Command count = 844 ] 
14:33:14: [GO18_globalSetVolt]### Host voltage value is set.
14:33:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 845 ] 
14:33:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 846 ] 
14:33:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 847 ] 
14:33:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A2A0>, <py_sfcl.CommandDataDefinition object at 0x0667A180>) , Command count = 848 ] 
14:33:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666090>, <py_sfcl.CommandDataDefinition object at 0x066ABF90>) , Command count = 849 ] 
14:33:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:14: [ SetCardRCA(0x1, 0xD555) , Command count = 850 ] 
14:33:14: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:14: Host Frequency set to 25000 KHz
14:33:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:14: ####CSD Registe 2.0 Values####
14:33:14: CSD_STRUCTURE                                 :0x1
14:33:14: Reserv1                                       :0x0
14:33:14: Time Access 1 TAAC                            :0xe
14:33:14: Time Access 2 NSAC*100                        :0x0
14:33:14: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:14: Card Command Classess CCC                     :0x5b5
14:33:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:14: DSR(driver stage register)  DSR_IMP           :0x0
14:33:14: Reserv2                                       :0x0
14:33:14: Device Size C_SIZE                            :0xedc8
14:33:14: Reserv3                                       :0x0
14:33:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:14: Reserv4                                       :0x0
14:33:14: Write Speed Factor R2W_FACTOR                 :0x2
14:33:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:14: FILE_FORMAT_GRP                               :0x0
14:33:14: COPY flag                                     :0x1
14:33:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:14: File_Format                                   :0x0
14:33:14: CRC                                           :0x0
14:33:14: ####CSD Registe Values####  

14:33:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:14: [GetSCRRegisterEntry] Passed
14:33:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:14: Data_Status_After Erases          : 0
14:33:14: CPRM Security Support             : No Security
14:33:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:14: Spec. Version                     : Version 3.0X
14:33:14: Extended Security Support         : Extended_Security_Not_Supported
14:33:14: Command Support                   : COMMAND_SUPPORT
14:33:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A240>, <py_sfcl.CommandDataDefinition object at 0x0667A3F0>) , Command count = 851 ] 
14:33:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A510>, <py_sfcl.CommandDataDefinition object at 0x0667A330>) , Command count = 852 ] 
14:33:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:14: [ SetBusWidth(0x4) , Command count = 853 ] 
14:33:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A3C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 854 ] 
14:33:14: Protected Area Size 0x28000
14:33:14: Bus Width           2
14:33:14: Secure Mode         0
14:33:14: Speed  Class        4
14:33:14: Perf Move           0
14:33:14: Au Size             9
14:33:14: Erase Size          15
14:33:14: Erase Timeout       1
14:33:14: Erase offset        1
14:33:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 855 ] 
14:33:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:14: Host Frequency set to 100000 KHz
14:33:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:14: ####CSD Registe 2.0 Values####
14:33:14: CSD_STRUCTURE                                 :0x1
14:33:14: Reserv1                                       :0x0
14:33:14: Time Access 1 TAAC                            :0xe
14:33:14: Time Access 2 NSAC*100                        :0x0
14:33:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:14: Card Command Classess CCC                     :0x5b5
14:33:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:14: DSR(driver stage register)  DSR_IMP           :0x0
14:33:14: Reserv2                                       :0x0
14:33:14: Device Size C_SIZE                            :0xedc8
14:33:14: Reserv3                                       :0x0
14:33:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:14: Reserv4                                       :0x0
14:33:14: Write Speed Factor R2W_FACTOR                 :0x2
14:33:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:14: FILE_FORMAT_GRP                               :0x0
14:33:14: COPY flag                                     :0x1
14:33:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:14: File_Format                                   :0x0
14:33:14: CRC                                           :0x0
14:33:14: ####CSD Registe Values####  

14:33:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABDB0>, <py_sfcl.CommandDataDefinition object at 0x0667A390>) , Command count = 856 ] 
14:33:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572330>, <py_sfcl.CommandDataDefinition object at 0x06685870>) , Command count = 857 ] 
14:33:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:14: [DVTCommonLib]### Erase :Erase API Called
14:33:14: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x10008 with Blockcount:0x2001
14:33:14: [ EraseLba(0x10008, 0x2001) , Command count = 858 ] 
14:33:14: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x10008 with Blockcount:0x2001 

14:33:14: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 19
14:33:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x12008 to EndLba:0x12010 with Increment Pattern
14:33:14: [ WrLbaNoData(0x12008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 859 ] 
14:33:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x12008 to EndLba:0x12010 with Increment Pattern 

14:33:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A720>, <py_sfcl.CommandDataDefinition object at 0x0667A840>) , Command count = 860 ] 
14:33:14: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB630>, <py_sfcl.CommandDataDefinition object at 0x0667A480>) , Command count = 861 ] 
14:33:14: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:14: [DVTCommonLib]###  R1bCommandAbort called
14:33:14: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2, False) , Command count = 862 ] 
14:33:14: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:14: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:16: Host Frequency set to 25000 KHz
14:33:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:16: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A300>, 0x0, True) , Command count = 863 ] 
14:33:16: [GO18_globalSetVolt]### Host voltage value is set.
14:33:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A810>, 0x0, False) , Command count = 864 ] 
14:33:16: [GO18_globalSetVolt]### Host voltage value is set.
14:33:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 865 ] 
14:33:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 866 ] 
14:33:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 867 ] 
14:33:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AA80>, <py_sfcl.CommandDataDefinition object at 0x0667AAE0>) , Command count = 868 ] 
14:33:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AB70>, <py_sfcl.CommandDataDefinition object at 0x0667A9C0>) , Command count = 869 ] 
14:33:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:17: [ SetCardRCA(0x1, 0xD555) , Command count = 870 ] 
14:33:17: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:17: Host Frequency set to 25000 KHz
14:33:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:17: ####CSD Registe 2.0 Values####
14:33:17: CSD_STRUCTURE                                 :0x1
14:33:17: Reserv1                                       :0x0
14:33:17: Time Access 1 TAAC                            :0xe
14:33:17: Time Access 2 NSAC*100                        :0x0
14:33:17: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:17: Card Command Classess CCC                     :0x5b5
14:33:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:17: DSR(driver stage register)  DSR_IMP           :0x0
14:33:17: Reserv2                                       :0x0
14:33:17: Device Size C_SIZE                            :0xedc8
14:33:17: Reserv3                                       :0x0
14:33:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:17: Reserv4                                       :0x0
14:33:17: Write Speed Factor R2W_FACTOR                 :0x2
14:33:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:17: FILE_FORMAT_GRP                               :0x0
14:33:17: COPY flag                                     :0x1
14:33:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:17: File_Format                                   :0x0
14:33:17: CRC                                           :0x0
14:33:17: ####CSD Registe Values####  

14:33:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:17: [GetSCRRegisterEntry] Passed
14:33:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:17: Data_Status_After Erases          : 0
14:33:17: CPRM Security Support             : No Security
14:33:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:17: Spec. Version                     : Version 3.0X
14:33:17: Extended Security Support         : Extended_Security_Not_Supported
14:33:17: Command Support                   : COMMAND_SUPPORT
14:33:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A030>, <py_sfcl.CommandDataDefinition object at 0x0667A960>) , Command count = 871 ] 
14:33:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AD20>, <py_sfcl.CommandDataDefinition object at 0x0667AB40>) , Command count = 872 ] 
14:33:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:17: [ SetBusWidth(0x4) , Command count = 873 ] 
14:33:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667ABD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 874 ] 
14:33:17: Protected Area Size 0x28000
14:33:17: Bus Width           2
14:33:17: Secure Mode         0
14:33:17: Speed  Class        4
14:33:17: Perf Move           0
14:33:17: Au Size             9
14:33:17: Erase Size          15
14:33:17: Erase Timeout       1
14:33:17: Erase offset        1
14:33:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 875 ] 
14:33:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:17: Host Frequency set to 100000 KHz
14:33:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:17: ####CSD Registe 2.0 Values####
14:33:17: CSD_STRUCTURE                                 :0x1
14:33:17: Reserv1                                       :0x0
14:33:17: Time Access 1 TAAC                            :0xe
14:33:17: Time Access 2 NSAC*100                        :0x0
14:33:17: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:17: Card Command Classess CCC                     :0x5b5
14:33:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:17: DSR(driver stage register)  DSR_IMP           :0x0
14:33:17: Reserv2                                       :0x0
14:33:17: Device Size C_SIZE                            :0xedc8
14:33:17: Reserv3                                       :0x0
14:33:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:17: Reserv4                                       :0x0
14:33:17: Write Speed Factor R2W_FACTOR                 :0x2
14:33:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:17: FILE_FORMAT_GRP                               :0x0
14:33:17: COPY flag                                     :0x1
14:33:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:17: File_Format                                   :0x0
14:33:17: CRC                                           :0x0
14:33:17: ####CSD Registe Values####  

14:33:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE10>, <py_sfcl.CommandDataDefinition object at 0x0667ABA0>) , Command count = 876 ] 
14:33:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066857E0>, <py_sfcl.CommandDataDefinition object at 0x066856C0>) , Command count = 877 ] 
14:33:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:17: [DVTCommonLib]### Erase :Erase API Called
14:33:17: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x12008 with Blockcount:0x2001
14:33:17: [ EraseLba(0x12008, 0x2001) , Command count = 878 ] 
14:33:17: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x12008 with Blockcount:0x2001 

14:33:17: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 18
14:33:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x14008 to EndLba:0x14010 with Increment Pattern
14:33:17: [ WrLbaNoData(0x14008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 879 ] 
14:33:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x14008 to EndLba:0x14010 with Increment Pattern 

14:33:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AF60>, <py_sfcl.CommandDataDefinition object at 0x0667AE70>) , Command count = 880 ] 
14:33:17: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A540>, <py_sfcl.CommandDataDefinition object at 0x066857E0>) , Command count = 881 ] 
14:33:17: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:17: [DVTCommonLib]###  R1bCommandAbort called
14:33:17: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1E, False) , Command count = 882 ] 
14:33:17: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:17: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:19: Host Frequency set to 25000 KHz
14:33:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:19: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C060>, 0x0, True) , Command count = 883 ] 
14:33:19: [GO18_globalSetVolt]### Host voltage value is set.
14:33:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C090>, 0x0, False) , Command count = 884 ] 
14:33:19: [GO18_globalSetVolt]### Host voltage value is set.
14:33:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 885 ] 
14:33:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 886 ] 
14:33:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 887 ] 
14:33:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AA20>, <py_sfcl.CommandDataDefinition object at 0x0667A0C0>) , Command count = 888 ] 
14:33:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C3C0>, <py_sfcl.CommandDataDefinition object at 0x0667AFC0>) , Command count = 889 ] 
14:33:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:19: [ SetCardRCA(0x1, 0xD555) , Command count = 890 ] 
14:33:19: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:20: Host Frequency set to 25000 KHz
14:33:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:20: ####CSD Registe 2.0 Values####
14:33:20: CSD_STRUCTURE                                 :0x1
14:33:20: Reserv1                                       :0x0
14:33:20: Time Access 1 TAAC                            :0xe
14:33:20: Time Access 2 NSAC*100                        :0x0
14:33:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:20: Card Command Classess CCC                     :0x5b5
14:33:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:20: DSR(driver stage register)  DSR_IMP           :0x0
14:33:20: Reserv2                                       :0x0
14:33:20: Device Size C_SIZE                            :0xedc8
14:33:20: Reserv3                                       :0x0
14:33:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:20: Reserv4                                       :0x0
14:33:20: Write Speed Factor R2W_FACTOR                 :0x2
14:33:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:20: FILE_FORMAT_GRP                               :0x0
14:33:20: COPY flag                                     :0x1
14:33:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:20: File_Format                                   :0x0
14:33:20: CRC                                           :0x0
14:33:20: ####CSD Registe Values####  

14:33:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:20: [GetSCRRegisterEntry] Passed
14:33:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:20: Data_Status_After Erases          : 0
14:33:20: CPRM Security Support             : No Security
14:33:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:20: Spec. Version                     : Version 3.0X
14:33:20: Extended Security Support         : Extended_Security_Not_Supported
14:33:20: Command Support                   : COMMAND_SUPPORT
14:33:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C1B0>, <py_sfcl.CommandDataDefinition object at 0x0667A990>) , Command count = 891 ] 
14:33:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C570>, <py_sfcl.CommandDataDefinition object at 0x0667C390>) , Command count = 892 ] 
14:33:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:20: [ SetBusWidth(0x4) , Command count = 893 ] 
14:33:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667AE40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 894 ] 
14:33:20: Protected Area Size 0x28000
14:33:20: Bus Width           2
14:33:20: Secure Mode         0
14:33:20: Speed  Class        4
14:33:20: Perf Move           0
14:33:20: Au Size             9
14:33:20: Erase Size          15
14:33:20: Erase Timeout       1
14:33:20: Erase offset        1
14:33:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 895 ] 
14:33:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:20: Host Frequency set to 100000 KHz
14:33:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:20: ####CSD Registe 2.0 Values####
14:33:20: CSD_STRUCTURE                                 :0x1
14:33:20: Reserv1                                       :0x0
14:33:20: Time Access 1 TAAC                            :0xe
14:33:20: Time Access 2 NSAC*100                        :0x0
14:33:20: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:20: Card Command Classess CCC                     :0x5b5
14:33:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:20: DSR(driver stage register)  DSR_IMP           :0x0
14:33:20: Reserv2                                       :0x0
14:33:20: Device Size C_SIZE                            :0xedc8
14:33:20: Reserv3                                       :0x0
14:33:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:20: Reserv4                                       :0x0
14:33:20: Write Speed Factor R2W_FACTOR                 :0x2
14:33:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:20: FILE_FORMAT_GRP                               :0x0
14:33:20: COPY flag                                     :0x1
14:33:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:20: File_Format                                   :0x0
14:33:20: CRC                                           :0x0
14:33:20: ####CSD Registe Values####  

14:33:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A690>, <py_sfcl.CommandDataDefinition object at 0x0667C3F0>) , Command count = 896 ] 
14:33:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06685300>, <py_sfcl.CommandDataDefinition object at 0x06685390>) , Command count = 897 ] 
14:33:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:20: [DVTCommonLib]### Erase :Erase API Called
14:33:20: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x14008 with Blockcount:0x2001
14:33:20: [ EraseLba(0x14008, 0x2001) , Command count = 898 ] 
14:33:20: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x14008 with Blockcount:0x2001 

14:33:20: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 17
14:33:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x16008 to EndLba:0x16010 with Increment Pattern
14:33:20: [ WrLbaNoData(0x16008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 899 ] 
14:33:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x16008 to EndLba:0x16010 with Increment Pattern 

14:33:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C720>, <py_sfcl.CommandDataDefinition object at 0x0667C840>) , Command count = 900 ] 
14:33:20: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ADB0>, <py_sfcl.CommandDataDefinition object at 0x06685300>) , Command count = 901 ] 
14:33:20: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:20: [DVTCommonLib]###  R1bCommandAbort called
14:33:20: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1C, False) , Command count = 902 ] 
14:33:20: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:20: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:22: Host Frequency set to 25000 KHz
14:33:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:22: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C180>, 0x0, True) , Command count = 903 ] 
14:33:22: [GO18_globalSetVolt]### Host voltage value is set.
14:33:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C810>, 0x0, False) , Command count = 904 ] 
14:33:22: [GO18_globalSetVolt]### Host voltage value is set.
14:33:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 905 ] 
14:33:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 906 ] 
14:33:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 907 ] 
14:33:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CA80>, <py_sfcl.CommandDataDefinition object at 0x0667CAE0>) , Command count = 908 ] 
14:33:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A6F0>, <py_sfcl.CommandDataDefinition object at 0x0667C780>) , Command count = 909 ] 
14:33:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:22: [ SetCardRCA(0x1, 0xD555) , Command count = 910 ] 
14:33:22: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:22: Host Frequency set to 25000 KHz
14:33:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:22: ####CSD Registe 2.0 Values####
14:33:22: CSD_STRUCTURE                                 :0x1
14:33:22: Reserv1                                       :0x0
14:33:22: Time Access 1 TAAC                            :0xe
14:33:22: Time Access 2 NSAC*100                        :0x0
14:33:22: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:22: Card Command Classess CCC                     :0x5b5
14:33:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:22: DSR(driver stage register)  DSR_IMP           :0x0
14:33:22: Reserv2                                       :0x0
14:33:22: Device Size C_SIZE                            :0xedc8
14:33:22: Reserv3                                       :0x0
14:33:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:22: Reserv4                                       :0x0
14:33:22: Write Speed Factor R2W_FACTOR                 :0x2
14:33:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:22: FILE_FORMAT_GRP                               :0x0
14:33:22: COPY flag                                     :0x1
14:33:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:22: File_Format                                   :0x0
14:33:22: CRC                                           :0x0
14:33:22: ####CSD Registe Values####  

14:33:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:22: [GetSCRRegisterEntry] Passed
14:33:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:22: Data_Status_After Erases          : 0
14:33:22: CPRM Security Support             : No Security
14:33:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:22: Spec. Version                     : Version 3.0X
14:33:22: Extended Security Support         : Extended_Security_Not_Supported
14:33:22: Command Support                   : COMMAND_SUPPORT
14:33:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C1E0>, <py_sfcl.CommandDataDefinition object at 0x0667C540>) , Command count = 911 ] 
14:33:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CCF0>, <py_sfcl.CommandDataDefinition object at 0x0667CB10>) , Command count = 912 ] 
14:33:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:22: [ SetBusWidth(0x4) , Command count = 913 ] 
14:33:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667CBA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 914 ] 
14:33:22: Protected Area Size 0x28000
14:33:22: Bus Width           2
14:33:22: Secure Mode         0
14:33:22: Speed  Class        4
14:33:22: Perf Move           0
14:33:22: Au Size             9
14:33:22: Erase Size          15
14:33:22: Erase Timeout       1
14:33:22: Erase offset        1
14:33:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 915 ] 
14:33:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:22: Host Frequency set to 100000 KHz
14:33:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:22: ####CSD Registe 2.0 Values####
14:33:22: CSD_STRUCTURE                                 :0x1
14:33:22: Reserv1                                       :0x0
14:33:22: Time Access 1 TAAC                            :0xe
14:33:22: Time Access 2 NSAC*100                        :0x0
14:33:22: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:22: Card Command Classess CCC                     :0x5b5
14:33:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:22: DSR(driver stage register)  DSR_IMP           :0x0
14:33:22: Reserv2                                       :0x0
14:33:22: Device Size C_SIZE                            :0xedc8
14:33:22: Reserv3                                       :0x0
14:33:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:22: Reserv4                                       :0x0
14:33:22: Write Speed Factor R2W_FACTOR                 :0x2
14:33:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:22: FILE_FORMAT_GRP                               :0x0
14:33:22: COPY flag                                     :0x1
14:33:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:22: File_Format                                   :0x0
14:33:22: CRC                                           :0x0
14:33:22: ####CSD Registe Values####  

14:33:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AED0>, <py_sfcl.CommandDataDefinition object at 0x0667CB70>) , Command count = 916 ] 
14:33:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A660>, <py_sfcl.CommandDataDefinition object at 0x06685270>) , Command count = 917 ] 
14:33:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:22: [DVTCommonLib]### Erase :Erase API Called
14:33:22: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x16008 with Blockcount:0x2001
14:33:23: [ EraseLba(0x16008, 0x2001) , Command count = 918 ] 
14:33:23: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x16008 with Blockcount:0x2001 

14:33:23: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 16
14:33:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x18008 to EndLba:0x18010 with Increment Pattern
14:33:23: [ WrLbaNoData(0x18008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 919 ] 
14:33:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x18008 to EndLba:0x18010 with Increment Pattern 

14:33:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CEA0>, <py_sfcl.CommandDataDefinition object at 0x0667CFC0>) , Command count = 920 ] 
14:33:23: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C5A0>, <py_sfcl.CommandDataDefinition object at 0x0667CAB0>) , Command count = 921 ] 
14:33:23: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:23: [DVTCommonLib]###  R1bCommandAbort called
14:33:23: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2B, False) , Command count = 922 ] 
14:33:23: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:23: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:25: Host Frequency set to 25000 KHz
14:33:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C270>, 0x0, True) , Command count = 923 ] 
14:33:25: [GO18_globalSetVolt]### Host voltage value is set.
14:33:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CF90>, 0x0, False) , Command count = 924 ] 
14:33:25: [GO18_globalSetVolt]### Host voltage value is set.
14:33:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 925 ] 
14:33:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 926 ] 
14:33:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 927 ] 
14:33:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F180>, <py_sfcl.CommandDataDefinition object at 0x0667CA20>) , Command count = 928 ] 
14:33:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C6F0>, <py_sfcl.CommandDataDefinition object at 0x0667C990>) , Command count = 929 ] 
14:33:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:25: [ SetCardRCA(0x1, 0xD555) , Command count = 930 ] 
14:33:25: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:25: Host Frequency set to 25000 KHz
14:33:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:25: ####CSD Registe 2.0 Values####
14:33:25: CSD_STRUCTURE                                 :0x1
14:33:25: Reserv1                                       :0x0
14:33:25: Time Access 1 TAAC                            :0xe
14:33:25: Time Access 2 NSAC*100                        :0x0
14:33:25: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:25: Card Command Classess CCC                     :0x5b5
14:33:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:25: DSR(driver stage register)  DSR_IMP           :0x0
14:33:25: Reserv2                                       :0x0
14:33:25: Device Size C_SIZE                            :0xedc8
14:33:25: Reserv3                                       :0x0
14:33:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:25: Reserv4                                       :0x0
14:33:25: Write Speed Factor R2W_FACTOR                 :0x2
14:33:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:25: FILE_FORMAT_GRP                               :0x0
14:33:25: COPY flag                                     :0x1
14:33:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:25: File_Format                                   :0x0
14:33:25: CRC                                           :0x0
14:33:25: ####CSD Registe Values####  

14:33:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:25: [GetSCRRegisterEntry] Passed
14:33:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:25: Data_Status_After Erases          : 0
14:33:25: CPRM Security Support             : No Security
14:33:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:25: Spec. Version                     : Version 3.0X
14:33:25: Extended Security Support         : Extended_Security_Not_Supported
14:33:25: Command Support                   : COMMAND_SUPPORT
14:33:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F300>, <py_sfcl.CommandDataDefinition object at 0x0667C960>) , Command count = 931 ] 
14:33:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F4B0>, <py_sfcl.CommandDataDefinition object at 0x0667F2D0>) , Command count = 932 ] 
14:33:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:25: [ SetBusWidth(0x4) , Command count = 933 ] 
14:33:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667CDB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 934 ] 
14:33:25: Protected Area Size 0x28000
14:33:25: Bus Width           2
14:33:25: Secure Mode         0
14:33:25: Speed  Class        4
14:33:25: Perf Move           0
14:33:25: Au Size             9
14:33:25: Erase Size          15
14:33:25: Erase Timeout       1
14:33:25: Erase offset        1
14:33:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 935 ] 
14:33:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:25: Host Frequency set to 100000 KHz
14:33:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:25: ####CSD Registe 2.0 Values####
14:33:25: CSD_STRUCTURE                                 :0x1
14:33:25: Reserv1                                       :0x0
14:33:25: Time Access 1 TAAC                            :0xe
14:33:25: Time Access 2 NSAC*100                        :0x0
14:33:25: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:25: Card Command Classess CCC                     :0x5b5
14:33:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:25: DSR(driver stage register)  DSR_IMP           :0x0
14:33:25: Reserv2                                       :0x0
14:33:25: Device Size C_SIZE                            :0xedc8
14:33:25: Reserv3                                       :0x0
14:33:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:25: Reserv4                                       :0x0
14:33:25: Write Speed Factor R2W_FACTOR                 :0x2
14:33:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:25: FILE_FORMAT_GRP                               :0x0
14:33:25: COPY flag                                     :0x1
14:33:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:25: File_Format                                   :0x0
14:33:25: CRC                                           :0x0
14:33:25: ####CSD Registe Values####  

14:33:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F540>, <py_sfcl.CommandDataDefinition object at 0x0667C690>) , Command count = 936 ] 
14:33:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AEA0>, <py_sfcl.CommandDataDefinition object at 0x0667CF00>) , Command count = 937 ] 
14:33:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:25: [DVTCommonLib]### Erase :Erase API Called
14:33:25: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x18008 with Blockcount:0x2001
14:33:25: [ EraseLba(0x18008, 0x2001) , Command count = 938 ] 
14:33:25: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x18008 with Blockcount:0x2001 

14:33:25: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 15
14:33:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1A008 to EndLba:0x1A010 with Increment Pattern
14:33:25: [ WrLbaNoData(0x1A008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 939 ] 
14:33:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1A008 to EndLba:0x1A010 with Increment Pattern 

14:33:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F660>, <py_sfcl.CommandDataDefinition object at 0x0667F780>) , Command count = 940 ] 
14:33:25: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CD20>, <py_sfcl.CommandDataDefinition object at 0x0667F090>) , Command count = 941 ] 
14:33:25: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:25: [DVTCommonLib]###  R1bCommandAbort called
14:33:25: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2F, False) , Command count = 942 ] 
14:33:25: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:25: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:27: Host Frequency set to 25000 KHz
14:33:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CE70>, 0x0, True) , Command count = 943 ] 
14:33:28: [GO18_globalSetVolt]### Host voltage value is set.
14:33:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F750>, 0x0, False) , Command count = 944 ] 
14:33:28: [GO18_globalSetVolt]### Host voltage value is set.
14:33:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 945 ] 
14:33:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 946 ] 
14:33:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 947 ] 
14:33:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F9C0>, <py_sfcl.CommandDataDefinition object at 0x0667FA20>) , Command count = 948 ] 
14:33:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FA80>, <py_sfcl.CommandDataDefinition object at 0x0667F720>) , Command count = 949 ] 
14:33:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:28: [ SetCardRCA(0x1, 0xD555) , Command count = 950 ] 
14:33:28: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:28: Host Frequency set to 25000 KHz
14:33:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:28: ####CSD Registe 2.0 Values####
14:33:28: CSD_STRUCTURE                                 :0x1
14:33:28: Reserv1                                       :0x0
14:33:28: Time Access 1 TAAC                            :0xe
14:33:28: Time Access 2 NSAC*100                        :0x0
14:33:28: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:28: Card Command Classess CCC                     :0x5b5
14:33:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:28: DSR(driver stage register)  DSR_IMP           :0x0
14:33:28: Reserv2                                       :0x0
14:33:28: Device Size C_SIZE                            :0xedc8
14:33:28: Reserv3                                       :0x0
14:33:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:28: Reserv4                                       :0x0
14:33:28: Write Speed Factor R2W_FACTOR                 :0x2
14:33:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:28: FILE_FORMAT_GRP                               :0x0
14:33:28: COPY flag                                     :0x1
14:33:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:28: File_Format                                   :0x0
14:33:28: CRC                                           :0x0
14:33:28: ####CSD Registe Values####  

14:33:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:28: [GetSCRRegisterEntry] Passed
14:33:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:28: Data_Status_After Erases          : 0
14:33:28: CPRM Security Support             : No Security
14:33:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:28: Spec. Version                     : Version 3.0X
14:33:28: Extended Security Support         : Extended_Security_Not_Supported
14:33:28: Command Support                   : COMMAND_SUPPORT
14:33:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F120>, <py_sfcl.CommandDataDefinition object at 0x0667F480>) , Command count = 951 ] 
14:33:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FC30>, <py_sfcl.CommandDataDefinition object at 0x0667FA50>) , Command count = 952 ] 
14:33:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:28: [ SetBusWidth(0x4) , Command count = 953 ] 
14:33:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667FAE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 954 ] 
14:33:28: Protected Area Size 0x28000
14:33:28: Bus Width           2
14:33:28: Secure Mode         0
14:33:28: Speed  Class        4
14:33:28: Perf Move           0
14:33:28: Au Size             9
14:33:28: Erase Size          15
14:33:28: Erase Timeout       1
14:33:28: Erase offset        1
14:33:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 955 ] 
14:33:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:28: Host Frequency set to 100000 KHz
14:33:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:28: ####CSD Registe 2.0 Values####
14:33:28: CSD_STRUCTURE                                 :0x1
14:33:28: Reserv1                                       :0x0
14:33:28: Time Access 1 TAAC                            :0xe
14:33:28: Time Access 2 NSAC*100                        :0x0
14:33:28: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:28: Card Command Classess CCC                     :0x5b5
14:33:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:28: DSR(driver stage register)  DSR_IMP           :0x0
14:33:28: Reserv2                                       :0x0
14:33:28: Device Size C_SIZE                            :0xedc8
14:33:28: Reserv3                                       :0x0
14:33:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:28: Reserv4                                       :0x0
14:33:28: Write Speed Factor R2W_FACTOR                 :0x2
14:33:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:28: FILE_FORMAT_GRP                               :0x0
14:33:28: COPY flag                                     :0x1
14:33:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:28: File_Format                                   :0x0
14:33:28: CRC                                           :0x0
14:33:28: ####CSD Registe Values####  

14:33:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CE10>, <py_sfcl.CommandDataDefinition object at 0x0667FAB0>) , Command count = 956 ] 
14:33:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C660>, <py_sfcl.CommandDataDefinition object at 0x0667F2A0>) , Command count = 957 ] 
14:33:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:28: [DVTCommonLib]### Erase :Erase API Called
14:33:28: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1A008 with Blockcount:0x2001
14:33:28: [ EraseLba(0x1A008, 0x2001) , Command count = 958 ] 
14:33:28: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1A008 with Blockcount:0x2001 

14:33:28: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 14
14:33:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1C008 to EndLba:0x1C010 with Increment Pattern
14:33:28: [ WrLbaNoData(0x1C008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 959 ] 
14:33:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1C008 to EndLba:0x1C010 with Increment Pattern 

14:33:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FDE0>, <py_sfcl.CommandDataDefinition object at 0x0667FF00>) , Command count = 960 ] 
14:33:28: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F4E0>, <py_sfcl.CommandDataDefinition object at 0x0667F510>) , Command count = 961 ] 
14:33:28: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:28: [DVTCommonLib]###  R1bCommandAbort called
14:33:28: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xB, False) , Command count = 962 ] 
14:33:28: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:28: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:30: Host Frequency set to 25000 KHz
14:33:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:30: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F870>, 0x0, True) , Command count = 963 ] 
14:33:30: [GO18_globalSetVolt]### Host voltage value is set.
14:33:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FED0>, 0x0, False) , Command count = 964 ] 
14:33:30: [GO18_globalSetVolt]### Host voltage value is set.
14:33:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 965 ] 
14:33:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 966 ] 
14:33:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 967 ] 
14:33:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F960>, <py_sfcl.CommandDataDefinition object at 0x0667F840>) , Command count = 968 ] 
14:33:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683240>, <py_sfcl.CommandDataDefinition object at 0x0667F1E0>) , Command count = 969 ] 
14:33:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:31: [ SetCardRCA(0x1, 0xD555) , Command count = 970 ] 
14:33:31: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:31: Host Frequency set to 25000 KHz
14:33:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:31: ####CSD Registe 2.0 Values####
14:33:31: CSD_STRUCTURE                                 :0x1
14:33:31: Reserv1                                       :0x0
14:33:31: Time Access 1 TAAC                            :0xe
14:33:31: Time Access 2 NSAC*100                        :0x0
14:33:31: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:31: Card Command Classess CCC                     :0x5b5
14:33:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:31: DSR(driver stage register)  DSR_IMP           :0x0
14:33:31: Reserv2                                       :0x0
14:33:31: Device Size C_SIZE                            :0xedc8
14:33:31: Reserv3                                       :0x0
14:33:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:31: Reserv4                                       :0x0
14:33:31: Write Speed Factor R2W_FACTOR                 :0x2
14:33:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:31: FILE_FORMAT_GRP                               :0x0
14:33:31: COPY flag                                     :0x1
14:33:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:31: File_Format                                   :0x0
14:33:31: CRC                                           :0x0
14:33:31: ####CSD Registe Values####  

14:33:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:31: [GetSCRRegisterEntry] Passed
14:33:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:31: Data_Status_After Erases          : 0
14:33:31: CPRM Security Support             : No Security
14:33:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:31: Spec. Version                     : Version 3.0X
14:33:31: Extended Security Support         : Extended_Security_Not_Supported
14:33:31: Command Support                   : COMMAND_SUPPORT
14:33:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683210>, <py_sfcl.CommandDataDefinition object at 0x0667F7B0>) , Command count = 971 ] 
14:33:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066833F0>, <py_sfcl.CommandDataDefinition object at 0x066832D0>) , Command count = 972 ] 
14:33:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:31: [ SetBusWidth(0x4) , Command count = 973 ] 
14:33:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667FCF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 974 ] 
14:33:31: Protected Area Size 0x28000
14:33:31: Bus Width           2
14:33:31: Secure Mode         0
14:33:31: Speed  Class        4
14:33:31: Perf Move           0
14:33:31: Au Size             9
14:33:31: Erase Size          15
14:33:31: Erase Timeout       1
14:33:31: Erase offset        1
14:33:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 975 ] 
14:33:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:31: Host Frequency set to 100000 KHz
14:33:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:31: ####CSD Registe 2.0 Values####
14:33:31: CSD_STRUCTURE                                 :0x1
14:33:31: Reserv1                                       :0x0
14:33:31: Time Access 1 TAAC                            :0xe
14:33:31: Time Access 2 NSAC*100                        :0x0
14:33:31: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:31: Card Command Classess CCC                     :0x5b5
14:33:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:31: DSR(driver stage register)  DSR_IMP           :0x0
14:33:31: Reserv2                                       :0x0
14:33:31: Device Size C_SIZE                            :0xedc8
14:33:31: Reserv3                                       :0x0
14:33:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:31: Reserv4                                       :0x0
14:33:31: Write Speed Factor R2W_FACTOR                 :0x2
14:33:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:31: FILE_FORMAT_GRP                               :0x0
14:33:31: COPY flag                                     :0x1
14:33:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:31: File_Format                                   :0x0
14:33:31: CRC                                           :0x0
14:33:31: ####CSD Registe Values####  

14:33:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683480>, <py_sfcl.CommandDataDefinition object at 0x0667F5D0>) , Command count = 976 ] 
14:33:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CDE0>, <py_sfcl.CommandDataDefinition object at 0x0667F1B0>) , Command count = 977 ] 
14:33:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:31: [DVTCommonLib]### Erase :Erase API Called
14:33:31: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1C008 with Blockcount:0x2001
14:33:31: [ EraseLba(0x1C008, 0x2001) , Command count = 978 ] 
14:33:31: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1C008 with Blockcount:0x2001 

14:33:31: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 13
14:33:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1E008 to EndLba:0x1E010 with Increment Pattern
14:33:31: [ WrLbaNoData(0x1E008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 979 ] 
14:33:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1E008 to EndLba:0x1E010 with Increment Pattern 

14:33:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066835A0>, <py_sfcl.CommandDataDefinition object at 0x066836C0>) , Command count = 980 ] 
14:33:31: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FC60>, <py_sfcl.CommandDataDefinition object at 0x06683060>) , Command count = 981 ] 
14:33:31: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:31: [DVTCommonLib]###  R1bCommandAbort called
14:33:31: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x8, False) , Command count = 982 ] 
14:33:31: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:31: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:33: Host Frequency set to 25000 KHz
14:33:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683030>, 0x0, True) , Command count = 983 ] 
14:33:33: [GO18_globalSetVolt]### Host voltage value is set.
14:33:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683690>, 0x0, False) , Command count = 984 ] 
14:33:33: [GO18_globalSetVolt]### Host voltage value is set.
14:33:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 985 ] 
14:33:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 986 ] 
14:33:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 987 ] 
14:33:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683900>, <py_sfcl.CommandDataDefinition object at 0x06683960>) , Command count = 988 ] 
14:33:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066839C0>, <py_sfcl.CommandDataDefinition object at 0x06683840>) , Command count = 989 ] 
14:33:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:33: [ SetCardRCA(0x1, 0xD555) , Command count = 990 ] 
14:33:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:34: Host Frequency set to 25000 KHz
14:33:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:34: ####CSD Registe 2.0 Values####
14:33:34: CSD_STRUCTURE                                 :0x1
14:33:34: Reserv1                                       :0x0
14:33:34: Time Access 1 TAAC                            :0xe
14:33:34: Time Access 2 NSAC*100                        :0x0
14:33:34: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:34: Card Command Classess CCC                     :0x5b5
14:33:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:34: DSR(driver stage register)  DSR_IMP           :0x0
14:33:34: Reserv2                                       :0x0
14:33:34: Device Size C_SIZE                            :0xedc8
14:33:34: Reserv3                                       :0x0
14:33:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:34: Reserv4                                       :0x0
14:33:34: Write Speed Factor R2W_FACTOR                 :0x2
14:33:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:34: FILE_FORMAT_GRP                               :0x0
14:33:34: COPY flag                                     :0x1
14:33:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:34: File_Format                                   :0x0
14:33:34: CRC                                           :0x0
14:33:34: ####CSD Registe Values####  

14:33:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:34: [GetSCRRegisterEntry] Passed
14:33:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:34: Data_Status_After Erases          : 0
14:33:34: CPRM Security Support             : No Security
14:33:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:34: Spec. Version                     : Version 3.0X
14:33:34: Extended Security Support         : Extended_Security_Not_Supported
14:33:34: Command Support                   : COMMAND_SUPPORT
14:33:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683090>, <py_sfcl.CommandDataDefinition object at 0x066833C0>) , Command count = 991 ] 
14:33:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683B70>, <py_sfcl.CommandDataDefinition object at 0x06683990>) , Command count = 992 ] 
14:33:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:34: [ SetBusWidth(0x4) , Command count = 993 ] 
14:33:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683A20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 994 ] 
14:33:34: Protected Area Size 0x28000
14:33:34: Bus Width           2
14:33:34: Secure Mode         0
14:33:34: Speed  Class        4
14:33:34: Perf Move           0
14:33:34: Au Size             9
14:33:34: Erase Size          15
14:33:34: Erase Timeout       1
14:33:34: Erase offset        1
14:33:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 995 ] 
14:33:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:34: Host Frequency set to 100000 KHz
14:33:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:34: ####CSD Registe 2.0 Values####
14:33:34: CSD_STRUCTURE                                 :0x1
14:33:34: Reserv1                                       :0x0
14:33:34: Time Access 1 TAAC                            :0xe
14:33:34: Time Access 2 NSAC*100                        :0x0
14:33:34: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:34: Card Command Classess CCC                     :0x5b5
14:33:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:34: DSR(driver stage register)  DSR_IMP           :0x0
14:33:34: Reserv2                                       :0x0
14:33:34: Device Size C_SIZE                            :0xedc8
14:33:34: Reserv3                                       :0x0
14:33:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:34: Reserv4                                       :0x0
14:33:34: Write Speed Factor R2W_FACTOR                 :0x2
14:33:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:34: FILE_FORMAT_GRP                               :0x0
14:33:34: COPY flag                                     :0x1
14:33:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:34: File_Format                                   :0x0
14:33:34: CRC                                           :0x0
14:33:34: ####CSD Registe Values####  

14:33:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FD50>, <py_sfcl.CommandDataDefinition object at 0x066839F0>) , Command count = 996 ] 
14:33:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F5A0>, <py_sfcl.CommandDataDefinition object at 0x06683720>) , Command count = 997 ] 
14:33:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:34: [DVTCommonLib]### Erase :Erase API Called
14:33:34: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1E008 with Blockcount:0x2001
14:33:34: [ EraseLba(0x1E008, 0x2001) , Command count = 998 ] 
14:33:34: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1E008 with Blockcount:0x2001 

14:33:34: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 12
14:33:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x20008 to EndLba:0x20010 with Increment Pattern
14:33:34: [ WrLbaNoData(0x20008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 999 ] 
14:33:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x20008 to EndLba:0x20010 with Increment Pattern 

14:33:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D20>, <py_sfcl.CommandDataDefinition object at 0x06683E40>) , Command count = 1000 ] 
14:33:34: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683420>, <py_sfcl.CommandDataDefinition object at 0x06683450>) , Command count = 1001 ] 
14:33:34: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:34: [DVTCommonLib]###  R1bCommandAbort called
14:33:34: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2D, False) , Command count = 1002 ] 
14:33:34: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:34: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:36: Host Frequency set to 25000 KHz
14:33:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:36: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x066837B0>, 0x0, True) , Command count = 1003 ] 
14:33:36: [GO18_globalSetVolt]### Host voltage value is set.
14:33:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683E10>, 0x0, False) , Command count = 1004 ] 
14:33:36: [GO18_globalSetVolt]### Host voltage value is set.
14:33:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1005 ] 
14:33:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1006 ] 
14:33:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1007 ] 
14:33:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066838A0>, <py_sfcl.CommandDataDefinition object at 0x06683F00>) , Command count = 1008 ] 
14:33:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05EE6B70>, <py_sfcl.CommandDataDefinition object at 0x06683DE0>) , Command count = 1009 ] 
14:33:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:36: [ SetCardRCA(0x1, 0xD555) , Command count = 1010 ] 
14:33:36: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:36: Host Frequency set to 25000 KHz
14:33:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:36: ####CSD Registe 2.0 Values####
14:33:36: CSD_STRUCTURE                                 :0x1
14:33:36: Reserv1                                       :0x0
14:33:36: Time Access 1 TAAC                            :0xe
14:33:36: Time Access 2 NSAC*100                        :0x0
14:33:36: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:36: Card Command Classess CCC                     :0x5b5
14:33:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:36: DSR(driver stage register)  DSR_IMP           :0x0
14:33:36: Reserv2                                       :0x0
14:33:36: Device Size C_SIZE                            :0xedc8
14:33:36: Reserv3                                       :0x0
14:33:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:36: Reserv4                                       :0x0
14:33:36: Write Speed Factor R2W_FACTOR                 :0x2
14:33:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:36: FILE_FORMAT_GRP                               :0x0
14:33:36: COPY flag                                     :0x1
14:33:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:36: File_Format                                   :0x0
14:33:36: CRC                                           :0x0
14:33:36: ####CSD Registe Values####  

14:33:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:36: [GetSCRRegisterEntry] Passed
14:33:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:36: Data_Status_After Erases          : 0
14:33:36: CPRM Security Support             : No Security
14:33:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:36: Spec. Version                     : Version 3.0X
14:33:36: Extended Security Support         : Extended_Security_Not_Supported
14:33:36: Command Support                   : COMMAND_SUPPORT
14:33:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066836F0>, <py_sfcl.CommandDataDefinition object at 0x06683B40>) , Command count = 1011 ] 
14:33:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC0480>, <py_sfcl.CommandDataDefinition object at 0x05FC6F90>) , Command count = 1012 ] 
14:33:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:36: [ SetBusWidth(0x4) , Command count = 1013 ] 
14:33:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683F60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1014 ] 
14:33:36: Protected Area Size 0x28000
14:33:36: Bus Width           2
14:33:36: Secure Mode         0
14:33:36: Speed  Class        4
14:33:36: Perf Move           0
14:33:36: Au Size             9
14:33:36: Erase Size          15
14:33:36: Erase Timeout       1
14:33:36: Erase offset        1
14:33:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1015 ] 
14:33:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:36: Host Frequency set to 100000 KHz
14:33:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:36: ####CSD Registe 2.0 Values####
14:33:36: CSD_STRUCTURE                                 :0x1
14:33:36: Reserv1                                       :0x0
14:33:36: Time Access 1 TAAC                            :0xe
14:33:36: Time Access 2 NSAC*100                        :0x0
14:33:36: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:36: Card Command Classess CCC                     :0x5b5
14:33:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:36: DSR(driver stage register)  DSR_IMP           :0x0
14:33:36: Reserv2                                       :0x0
14:33:36: Device Size C_SIZE                            :0xedc8
14:33:36: Reserv3                                       :0x0
14:33:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:36: Reserv4                                       :0x0
14:33:36: Write Speed Factor R2W_FACTOR                 :0x2
14:33:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:36: FILE_FORMAT_GRP                               :0x0
14:33:36: COPY flag                                     :0x1
14:33:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:36: File_Format                                   :0x0
14:33:36: CRC                                           :0x0
14:33:36: ####CSD Registe Values####  

14:33:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683510>, <py_sfcl.CommandDataDefinition object at 0x01E42840>) , Command count = 1016 ] 
14:33:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06685060>, <py_sfcl.CommandDataDefinition object at 0x066850F0>) , Command count = 1017 ] 
14:33:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:36: [DVTCommonLib]### Erase :Erase API Called
14:33:36: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x20008 with Blockcount:0x2001
14:33:36: [ EraseLba(0x20008, 0x2001) , Command count = 1018 ] 
14:33:36: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x20008 with Blockcount:0x2001 

14:33:36: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 11
14:33:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x22008 to EndLba:0x22010 with Increment Pattern
14:33:36: [ WrLbaNoData(0x22008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1019 ] 
14:33:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x22008 to EndLba:0x22010 with Increment Pattern 

14:33:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6570>, <py_sfcl.CommandDataDefinition object at 0x05FED1B0>) , Command count = 1020 ] 
14:33:36: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683BA0>, <py_sfcl.CommandDataDefinition object at 0x066850F0>) , Command count = 1021 ] 
14:33:36: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:36: [DVTCommonLib]###  R1bCommandAbort called
14:33:37: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x12, False) , Command count = 1022 ] 
14:33:37: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:37: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:39: Host Frequency set to 25000 KHz
14:33:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:39: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683CF0>, 0x0, True) , Command count = 1023 ] 
14:33:39: [GO18_globalSetVolt]### Host voltage value is set.
14:33:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x0602B6C0>, 0x0, False) , Command count = 1024 ] 
14:33:39: [GO18_globalSetVolt]### Host voltage value is set.
14:33:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1025 ] 
14:33:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1026 ] 
14:33:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1027 ] 
14:33:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC01E0>, <py_sfcl.CommandDataDefinition object at 0x05FC6360>) , Command count = 1028 ] 
14:33:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDADB0>, <py_sfcl.CommandDataDefinition object at 0x06685CF0>) , Command count = 1029 ] 
14:33:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:39: [ SetCardRCA(0x1, 0xD555) , Command count = 1030 ] 
14:33:39: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:39: Host Frequency set to 25000 KHz
14:33:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:39: ####CSD Registe 2.0 Values####
14:33:39: CSD_STRUCTURE                                 :0x1
14:33:39: Reserv1                                       :0x0
14:33:39: Time Access 1 TAAC                            :0xe
14:33:39: Time Access 2 NSAC*100                        :0x0
14:33:39: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:39: Card Command Classess CCC                     :0x5b5
14:33:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:39: DSR(driver stage register)  DSR_IMP           :0x0
14:33:39: Reserv2                                       :0x0
14:33:39: Device Size C_SIZE                            :0xedc8
14:33:39: Reserv3                                       :0x0
14:33:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:39: Reserv4                                       :0x0
14:33:39: Write Speed Factor R2W_FACTOR                 :0x2
14:33:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:39: FILE_FORMAT_GRP                               :0x0
14:33:39: COPY flag                                     :0x1
14:33:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:39: File_Format                                   :0x0
14:33:39: CRC                                           :0x0
14:33:39: ####CSD Registe Values####  

14:33:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:39: [GetSCRRegisterEntry] Passed
14:33:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:39: Data_Status_After Erases          : 0
14:33:39: CPRM Security Support             : No Security
14:33:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:39: Spec. Version                     : Version 3.0X
14:33:39: Extended Security Support         : Extended_Security_Not_Supported
14:33:39: Command Support                   : COMMAND_SUPPORT
14:33:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06685900>, <py_sfcl.CommandDataDefinition object at 0x066854E0>) , Command count = 1031 ] 
14:33:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BE10>, <py_sfcl.CommandDataDefinition object at 0x06685600>) , Command count = 1032 ] 
14:33:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:39: [ SetBusWidth(0x4) , Command count = 1033 ] 
14:33:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685C30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1034 ] 
14:33:39: Protected Area Size 0x28000
14:33:39: Bus Width           2
14:33:39: Secure Mode         0
14:33:39: Speed  Class        4
14:33:39: Perf Move           0
14:33:39: Au Size             9
14:33:39: Erase Size          15
14:33:39: Erase Timeout       1
14:33:39: Erase offset        1
14:33:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1035 ] 
14:33:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:39: Host Frequency set to 100000 KHz
14:33:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:39: ####CSD Registe 2.0 Values####
14:33:39: CSD_STRUCTURE                                 :0x1
14:33:39: Reserv1                                       :0x0
14:33:39: Time Access 1 TAAC                            :0xe
14:33:39: Time Access 2 NSAC*100                        :0x0
14:33:39: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:39: Card Command Classess CCC                     :0x5b5
14:33:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:39: DSR(driver stage register)  DSR_IMP           :0x0
14:33:39: Reserv2                                       :0x0
14:33:39: Device Size C_SIZE                            :0xedc8
14:33:39: Reserv3                                       :0x0
14:33:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:39: Reserv4                                       :0x0
14:33:39: Write Speed Factor R2W_FACTOR                 :0x2
14:33:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:39: FILE_FORMAT_GRP                               :0x0
14:33:39: COPY flag                                     :0x1
14:33:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:39: File_Format                                   :0x0
14:33:39: CRC                                           :0x0
14:33:39: ####CSD Registe Values####  

14:33:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683C90>, <py_sfcl.CommandDataDefinition object at 0x060327B0>) , Command count = 1036 ] 
14:33:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066834E0>, <py_sfcl.CommandDataDefinition object at 0x06685B70>) , Command count = 1037 ] 
14:33:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:39: [DVTCommonLib]### Erase :Erase API Called
14:33:39: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x22008 with Blockcount:0x2001
14:33:39: [ EraseLba(0x22008, 0x2001) , Command count = 1038 ] 
14:33:39: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x22008 with Blockcount:0x2001 

14:33:39: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 10
14:33:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x24008 to EndLba:0x24010 with Increment Pattern
14:33:39: [ WrLbaNoData(0x24008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1039 ] 
14:33:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x24008 to EndLba:0x24010 with Increment Pattern 

14:33:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032AE0>, <py_sfcl.CommandDataDefinition object at 0x06685C60>) , Command count = 1040 ] 
14:33:39: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8CC0>, <py_sfcl.CommandDataDefinition object at 0x06685180>) , Command count = 1041 ] 
14:33:39: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:39: [DVTCommonLib]###  R1bCommandAbort called
14:33:39: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x26, False) , Command count = 1042 ] 
14:33:39: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:41: Host Frequency set to 25000 KHz
14:33:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x01E5BDB0>, 0x0, True) , Command count = 1043 ] 
14:33:41: [GO18_globalSetVolt]### Host voltage value is set.
14:33:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x06032B40>, 0x0, False) , Command count = 1044 ] 
14:33:41: [GO18_globalSetVolt]### Host voltage value is set.
14:33:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1045 ] 
14:33:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1046 ] 
14:33:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1047 ] 
14:33:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDAE40>, <py_sfcl.CommandDataDefinition object at 0x066859C0>) , Command count = 1048 ] 
14:33:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572060>, <py_sfcl.CommandDataDefinition object at 0x06685BA0>) , Command count = 1049 ] 
14:33:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:42: [ SetCardRCA(0x1, 0xD555) , Command count = 1050 ] 
14:33:42: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:42: Host Frequency set to 25000 KHz
14:33:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:42: ####CSD Registe 2.0 Values####
14:33:42: CSD_STRUCTURE                                 :0x1
14:33:42: Reserv1                                       :0x0
14:33:42: Time Access 1 TAAC                            :0xe
14:33:42: Time Access 2 NSAC*100                        :0x0
14:33:42: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:42: Card Command Classess CCC                     :0x5b5
14:33:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:42: DSR(driver stage register)  DSR_IMP           :0x0
14:33:42: Reserv2                                       :0x0
14:33:42: Device Size C_SIZE                            :0xedc8
14:33:42: Reserv3                                       :0x0
14:33:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:42: Reserv4                                       :0x0
14:33:42: Write Speed Factor R2W_FACTOR                 :0x2
14:33:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:42: FILE_FORMAT_GRP                               :0x0
14:33:42: COPY flag                                     :0x1
14:33:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:42: File_Format                                   :0x0
14:33:42: CRC                                           :0x0
14:33:42: ####CSD Registe Values####  

14:33:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:42: [GetSCRRegisterEntry] Passed
14:33:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:42: Data_Status_After Erases          : 0
14:33:42: CPRM Security Support             : No Security
14:33:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:42: Spec. Version                     : Version 3.0X
14:33:42: Extended Security Support         : Extended_Security_Not_Supported
14:33:42: Command Support                   : COMMAND_SUPPORT
14:33:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06685AB0>, <py_sfcl.CommandDataDefinition object at 0x066858A0>) , Command count = 1051 ] 
14:33:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BF90>, <py_sfcl.CommandDataDefinition object at 0x06685960>) , Command count = 1052 ] 
14:33:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:42: [ SetBusWidth(0x4) , Command count = 1053 ] 
14:33:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1054 ] 
14:33:42: Protected Area Size 0x28000
14:33:42: Bus Width           2
14:33:42: Secure Mode         0
14:33:42: Speed  Class        4
14:33:42: Perf Move           0
14:33:42: Au Size             9
14:33:42: Erase Size          15
14:33:42: Erase Timeout       1
14:33:42: Erase offset        1
14:33:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1055 ] 
14:33:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:42: Host Frequency set to 100000 KHz
14:33:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:42: ####CSD Registe 2.0 Values####
14:33:42: CSD_STRUCTURE                                 :0x1
14:33:42: Reserv1                                       :0x0
14:33:42: Time Access 1 TAAC                            :0xe
14:33:42: Time Access 2 NSAC*100                        :0x0
14:33:42: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:42: Card Command Classess CCC                     :0x5b5
14:33:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:42: DSR(driver stage register)  DSR_IMP           :0x0
14:33:42: Reserv2                                       :0x0
14:33:42: Device Size C_SIZE                            :0xedc8
14:33:42: Reserv3                                       :0x0
14:33:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:42: Reserv4                                       :0x0
14:33:42: Write Speed Factor R2W_FACTOR                 :0x2
14:33:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:42: FILE_FORMAT_GRP                               :0x0
14:33:42: COPY flag                                     :0x1
14:33:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:42: File_Format                                   :0x0
14:33:42: CRC                                           :0x0
14:33:42: ####CSD Registe Values####  

14:33:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEDAE0>, <py_sfcl.CommandDataDefinition object at 0x06685AE0>) , Command count = 1056 ] 
14:33:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066857B0>, <py_sfcl.CommandDataDefinition object at 0x066855D0>) , Command count = 1057 ] 
14:33:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:42: [DVTCommonLib]### Erase :Erase API Called
14:33:42: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x24008 with Blockcount:0x2001
14:33:42: [ EraseLba(0x24008, 0x2001) , Command count = 1058 ] 
14:33:42: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x24008 with Blockcount:0x2001 

14:33:42: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 9
14:33:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x26008 to EndLba:0x26010 with Increment Pattern
14:33:42: [ WrLbaNoData(0x26008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1059 ] 
14:33:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x26008 to EndLba:0x26010 with Increment Pattern 

14:33:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666390>, <py_sfcl.CommandDataDefinition object at 0x06666BA0>) , Command count = 1060 ] 
14:33:42: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032960>, <py_sfcl.CommandDataDefinition object at 0x066856F0>) , Command count = 1061 ] 
14:33:42: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:42: [DVTCommonLib]###  R1bCommandAbort called
14:33:42: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1E, False) , Command count = 1062 ] 
14:33:42: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:42: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:44: Host Frequency set to 25000 KHz
14:33:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:44: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x06032B10>, 0x0, True) , Command count = 1063 ] 
14:33:44: [GO18_globalSetVolt]### Host voltage value is set.
14:33:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666960>, 0x0, False) , Command count = 1064 ] 
14:33:44: [GO18_globalSetVolt]### Host voltage value is set.
14:33:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1065 ] 
14:33:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1066 ] 
14:33:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1067 ] 
14:33:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065724B0>, <py_sfcl.CommandDataDefinition object at 0x06666720>) , Command count = 1068 ] 
14:33:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BDB0>, <py_sfcl.CommandDataDefinition object at 0x066858D0>) , Command count = 1069 ] 
14:33:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1070 ] 
14:33:45: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:45: Host Frequency set to 25000 KHz
14:33:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:45: ####CSD Registe 2.0 Values####
14:33:45: CSD_STRUCTURE                                 :0x1
14:33:45: Reserv1                                       :0x0
14:33:45: Time Access 1 TAAC                            :0xe
14:33:45: Time Access 2 NSAC*100                        :0x0
14:33:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:45: Card Command Classess CCC                     :0x5b5
14:33:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:45: DSR(driver stage register)  DSR_IMP           :0x0
14:33:45: Reserv2                                       :0x0
14:33:45: Device Size C_SIZE                            :0xedc8
14:33:45: Reserv3                                       :0x0
14:33:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:45: Reserv4                                       :0x0
14:33:45: Write Speed Factor R2W_FACTOR                 :0x2
14:33:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:45: FILE_FORMAT_GRP                               :0x0
14:33:45: COPY flag                                     :0x1
14:33:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:45: File_Format                                   :0x0
14:33:45: CRC                                           :0x0
14:33:45: ####CSD Registe Values####  

14:33:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:45: [GetSCRRegisterEntry] Passed
14:33:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:45: Data_Status_After Erases          : 0
14:33:45: CPRM Security Support             : No Security
14:33:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:45: Spec. Version                     : Version 3.0X
14:33:45: Extended Security Support         : Extended_Security_Not_Supported
14:33:45: Command Support                   : COMMAND_SUPPORT
14:33:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666E70>, <py_sfcl.CommandDataDefinition object at 0x066669C0>) , Command count = 1071 ] 
14:33:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB120>, <py_sfcl.CommandDataDefinition object at 0x06666DE0>) , Command count = 1072 ] 
14:33:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:45: [ SetBusWidth(0x4) , Command count = 1073 ] 
14:33:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066666C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1074 ] 
14:33:45: Protected Area Size 0x28000
14:33:45: Bus Width           2
14:33:45: Secure Mode         0
14:33:45: Speed  Class        4
14:33:45: Perf Move           0
14:33:45: Au Size             9
14:33:45: Erase Size          15
14:33:45: Erase Timeout       1
14:33:45: Erase offset        1
14:33:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1075 ] 
14:33:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:45: Host Frequency set to 100000 KHz
14:33:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:45: ####CSD Registe 2.0 Values####
14:33:45: CSD_STRUCTURE                                 :0x1
14:33:45: Reserv1                                       :0x0
14:33:45: Time Access 1 TAAC                            :0xe
14:33:45: Time Access 2 NSAC*100                        :0x0
14:33:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:45: Card Command Classess CCC                     :0x5b5
14:33:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:45: DSR(driver stage register)  DSR_IMP           :0x0
14:33:45: Reserv2                                       :0x0
14:33:45: Device Size C_SIZE                            :0xedc8
14:33:45: Reserv3                                       :0x0
14:33:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:45: Reserv4                                       :0x0
14:33:45: Write Speed Factor R2W_FACTOR                 :0x2
14:33:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:45: FILE_FORMAT_GRP                               :0x0
14:33:45: COPY flag                                     :0x1
14:33:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:45: File_Format                                   :0x0
14:33:45: CRC                                           :0x0
14:33:45: ####CSD Registe Values####  

14:33:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032AB0>, <py_sfcl.CommandDataDefinition object at 0x066851E0>) , Command count = 1076 ] 
14:33:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06685030>, <py_sfcl.CommandDataDefinition object at 0x06685D50>) , Command count = 1077 ] 
14:33:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:45: [DVTCommonLib]### Erase :Erase API Called
14:33:45: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x26008 with Blockcount:0x2001
14:33:45: [ EraseLba(0x26008, 0x2001) , Command count = 1078 ] 
14:33:45: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x26008 with Blockcount:0x2001 

14:33:45: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 8
14:33:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x28008 to EndLba:0x28010 with Increment Pattern
14:33:45: [ WrLbaNoData(0x28008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1079 ] 
14:33:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x28008 to EndLba:0x28010 with Increment Pattern 

14:33:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572A20>, <py_sfcl.CommandDataDefinition object at 0x066AB210>) , Command count = 1080 ] 
14:33:45: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666870>, <py_sfcl.CommandDataDefinition object at 0x06685030>) , Command count = 1081 ] 
14:33:45: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:45: [DVTCommonLib]###  R1bCommandAbort called
14:33:45: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2D, False) , Command count = 1082 ] 
14:33:45: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:45: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:47: Host Frequency set to 25000 KHz
14:33:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:47: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB570>, 0x0, True) , Command count = 1083 ] 
14:33:47: [GO18_globalSetVolt]### Host voltage value is set.
14:33:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB3F0>, 0x0, False) , Command count = 1084 ] 
14:33:47: [GO18_globalSetVolt]### Host voltage value is set.
14:33:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1085 ] 
14:33:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1086 ] 
14:33:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1087 ] 
14:33:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB420>, <py_sfcl.CommandDataDefinition object at 0x066664E0>) , Command count = 1088 ] 
14:33:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE40>, <py_sfcl.CommandDataDefinition object at 0x066663F0>) , Command count = 1089 ] 
14:33:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:47: [ SetCardRCA(0x1, 0xD555) , Command count = 1090 ] 
14:33:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:47: Host Frequency set to 25000 KHz
14:33:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:47: ####CSD Registe 2.0 Values####
14:33:47: CSD_STRUCTURE                                 :0x1
14:33:47: Reserv1                                       :0x0
14:33:47: Time Access 1 TAAC                            :0xe
14:33:47: Time Access 2 NSAC*100                        :0x0
14:33:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:47: Card Command Classess CCC                     :0x5b5
14:33:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:47: DSR(driver stage register)  DSR_IMP           :0x0
14:33:47: Reserv2                                       :0x0
14:33:47: Device Size C_SIZE                            :0xedc8
14:33:47: Reserv3                                       :0x0
14:33:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:47: Reserv4                                       :0x0
14:33:47: Write Speed Factor R2W_FACTOR                 :0x2
14:33:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:47: FILE_FORMAT_GRP                               :0x0
14:33:47: COPY flag                                     :0x1
14:33:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:47: File_Format                                   :0x0
14:33:47: CRC                                           :0x0
14:33:47: ####CSD Registe Values####  

14:33:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:47: [GetSCRRegisterEntry] Passed
14:33:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:47: Data_Status_After Erases          : 0
14:33:47: CPRM Security Support             : No Security
14:33:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:47: Spec. Version                     : Version 3.0X
14:33:47: Extended Security Support         : Extended_Security_Not_Supported
14:33:47: Command Support                   : COMMAND_SUPPORT
14:33:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BED0>, <py_sfcl.CommandDataDefinition object at 0x066AB360>) , Command count = 1091 ] 
14:33:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABEA0>, <py_sfcl.CommandDataDefinition object at 0x066ABF60>) , Command count = 1092 ] 
14:33:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:47: [ SetBusWidth(0x4) , Command count = 1093 ] 
14:33:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066AB660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1094 ] 
14:33:47: Protected Area Size 0x28000
14:33:47: Bus Width           2
14:33:47: Secure Mode         0
14:33:47: Speed  Class        4
14:33:47: Perf Move           0
14:33:47: Au Size             9
14:33:47: Erase Size          15
14:33:47: Erase Timeout       1
14:33:47: Erase offset        1
14:33:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1095 ] 
14:33:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:48: Host Frequency set to 100000 KHz
14:33:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:48: ####CSD Registe 2.0 Values####
14:33:48: CSD_STRUCTURE                                 :0x1
14:33:48: Reserv1                                       :0x0
14:33:48: Time Access 1 TAAC                            :0xe
14:33:48: Time Access 2 NSAC*100                        :0x0
14:33:48: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:48: Card Command Classess CCC                     :0x5b5
14:33:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:48: DSR(driver stage register)  DSR_IMP           :0x0
14:33:48: Reserv2                                       :0x0
14:33:48: Device Size C_SIZE                            :0xedc8
14:33:48: Reserv3                                       :0x0
14:33:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:48: Reserv4                                       :0x0
14:33:48: Write Speed Factor R2W_FACTOR                 :0x2
14:33:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:48: FILE_FORMAT_GRP                               :0x0
14:33:48: COPY flag                                     :0x1
14:33:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:48: File_Format                                   :0x0
14:33:48: CRC                                           :0x0
14:33:48: ####CSD Registe Values####  

14:33:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB240>, <py_sfcl.CommandDataDefinition object at 0x066AB480>) , Command count = 1096 ] 
14:33:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666540>, <py_sfcl.CommandDataDefinition object at 0x066855A0>) , Command count = 1097 ] 
14:33:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:48: [DVTCommonLib]### Erase :Erase API Called
14:33:48: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x28008 with Blockcount:0x2001
14:33:48: [ EraseLba(0x28008, 0x2001) , Command count = 1098 ] 
14:33:48: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x28008 with Blockcount:0x2001 

14:33:48: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 7
14:33:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2A008 to EndLba:0x2A010 with Increment Pattern
14:33:48: [ WrLbaNoData(0x2A008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1099 ] 
14:33:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2A008 to EndLba:0x2A010 with Increment Pattern 

14:33:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A2A0>, <py_sfcl.CommandDataDefinition object at 0x0667A180>) , Command count = 1100 ] 
14:33:48: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066662A0>, <py_sfcl.CommandDataDefinition object at 0x066AB4B0>) , Command count = 1101 ] 
14:33:48: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:48: [DVTCommonLib]###  R1bCommandAbort called
14:33:48: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x14, False) , Command count = 1102 ] 
14:33:48: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:50: Host Frequency set to 25000 KHz
14:33:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABF90>, 0x0, True) , Command count = 1103 ] 
14:33:50: [GO18_globalSetVolt]### Host voltage value is set.
14:33:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A360>, 0x0, False) , Command count = 1104 ] 
14:33:50: [GO18_globalSetVolt]### Host voltage value is set.
14:33:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1105 ] 
14:33:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1106 ] 
14:33:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1107 ] 
14:33:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABDB0>, <py_sfcl.CommandDataDefinition object at 0x0667A390>) , Command count = 1108 ] 
14:33:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A6C0>, <py_sfcl.CommandDataDefinition object at 0x0667A510>) , Command count = 1109 ] 
14:33:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:50: [ SetCardRCA(0x1, 0xD555) , Command count = 1110 ] 
14:33:50: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:50: Host Frequency set to 25000 KHz
14:33:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:50: ####CSD Registe 2.0 Values####
14:33:50: CSD_STRUCTURE                                 :0x1
14:33:50: Reserv1                                       :0x0
14:33:50: Time Access 1 TAAC                            :0xe
14:33:50: Time Access 2 NSAC*100                        :0x0
14:33:50: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:50: Card Command Classess CCC                     :0x5b5
14:33:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:50: DSR(driver stage register)  DSR_IMP           :0x0
14:33:50: Reserv2                                       :0x0
14:33:50: Device Size C_SIZE                            :0xedc8
14:33:50: Reserv3                                       :0x0
14:33:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:50: Reserv4                                       :0x0
14:33:50: Write Speed Factor R2W_FACTOR                 :0x2
14:33:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:50: FILE_FORMAT_GRP                               :0x0
14:33:50: COPY flag                                     :0x1
14:33:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:50: File_Format                                   :0x0
14:33:50: CRC                                           :0x0
14:33:50: ####CSD Registe Values####  

14:33:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:50: [GetSCRRegisterEntry] Passed
14:33:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:50: Data_Status_After Erases          : 0
14:33:50: CPRM Security Support             : No Security
14:33:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:50: Spec. Version                     : Version 3.0X
14:33:50: Extended Security Support         : Extended_Security_Not_Supported
14:33:50: Command Support                   : COMMAND_SUPPORT
14:33:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572330>, <py_sfcl.CommandDataDefinition object at 0x0667A0F0>) , Command count = 1111 ] 
14:33:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A720>, <py_sfcl.CommandDataDefinition object at 0x0667A840>) , Command count = 1112 ] 
14:33:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:50: [ SetBusWidth(0x4) , Command count = 1113 ] 
14:33:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A8A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1114 ] 
14:33:50: Protected Area Size 0x28000
14:33:50: Bus Width           2
14:33:50: Secure Mode         0
14:33:50: Speed  Class        4
14:33:50: Perf Move           0
14:33:50: Au Size             9
14:33:50: Erase Size          15
14:33:50: Erase Timeout       1
14:33:50: Erase offset        1
14:33:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1115 ] 
14:33:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:50: Host Frequency set to 100000 KHz
14:33:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:50: ####CSD Registe 2.0 Values####
14:33:50: CSD_STRUCTURE                                 :0x1
14:33:50: Reserv1                                       :0x0
14:33:50: Time Access 1 TAAC                            :0xe
14:33:50: Time Access 2 NSAC*100                        :0x0
14:33:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:50: Card Command Classess CCC                     :0x5b5
14:33:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:50: DSR(driver stage register)  DSR_IMP           :0x0
14:33:50: Reserv2                                       :0x0
14:33:50: Device Size C_SIZE                            :0xedc8
14:33:50: Reserv3                                       :0x0
14:33:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:50: Reserv4                                       :0x0
14:33:50: Write Speed Factor R2W_FACTOR                 :0x2
14:33:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:50: FILE_FORMAT_GRP                               :0x0
14:33:50: COPY flag                                     :0x1
14:33:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:50: File_Format                                   :0x0
14:33:50: CRC                                           :0x0
14:33:50: ####CSD Registe Values####  

14:33:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB2D0>, <py_sfcl.CommandDataDefinition object at 0x0667A300>) , Command count = 1116 ] 
14:33:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06685090>, <py_sfcl.CommandDataDefinition object at 0x06685630>) , Command count = 1117 ] 
14:33:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:50: [DVTCommonLib]### Erase :Erase API Called
14:33:50: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2A008 with Blockcount:0x2001
14:33:50: [ EraseLba(0x2A008, 0x2001) , Command count = 1118 ] 
14:33:50: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2A008 with Blockcount:0x2001 

14:33:50: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 6
14:33:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2C008 to EndLba:0x2C010 with Increment Pattern
14:33:50: [ WrLbaNoData(0x2C008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1119 ] 
14:33:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2C008 to EndLba:0x2C010 with Increment Pattern 

14:33:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AA80>, <py_sfcl.CommandDataDefinition object at 0x0667AAE0>) , Command count = 1120 ] 
14:33:50: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A090>, <py_sfcl.CommandDataDefinition object at 0x06685090>) , Command count = 1121 ] 
14:33:50: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:50: [DVTCommonLib]###  R1bCommandAbort called
14:33:51: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x26, False) , Command count = 1122 ] 
14:33:51: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:53: Host Frequency set to 25000 KHz
14:33:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:53: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A030>, 0x0, True) , Command count = 1123 ] 
14:33:53: [GO18_globalSetVolt]### Host voltage value is set.
14:33:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AC90>, 0x0, False) , Command count = 1124 ] 
14:33:53: [GO18_globalSetVolt]### Host voltage value is set.
14:33:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1125 ] 
14:33:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1126 ] 
14:33:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1127 ] 
14:33:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE10>, <py_sfcl.CommandDataDefinition object at 0x0667ABA0>) , Command count = 1128 ] 
14:33:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB450>, <py_sfcl.CommandDataDefinition object at 0x0667AB40>) , Command count = 1129 ] 
14:33:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:53: [ SetCardRCA(0x1, 0xD555) , Command count = 1130 ] 
14:33:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:53: Host Frequency set to 25000 KHz
14:33:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:53: ####CSD Registe 2.0 Values####
14:33:53: CSD_STRUCTURE                                 :0x1
14:33:53: Reserv1                                       :0x0
14:33:53: Time Access 1 TAAC                            :0xe
14:33:53: Time Access 2 NSAC*100                        :0x0
14:33:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:53: Card Command Classess CCC                     :0x5b5
14:33:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:53: DSR(driver stage register)  DSR_IMP           :0x0
14:33:53: Reserv2                                       :0x0
14:33:53: Device Size C_SIZE                            :0xedc8
14:33:53: Reserv3                                       :0x0
14:33:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:53: Reserv4                                       :0x0
14:33:53: Write Speed Factor R2W_FACTOR                 :0x2
14:33:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:53: FILE_FORMAT_GRP                               :0x0
14:33:53: COPY flag                                     :0x1
14:33:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:53: File_Format                                   :0x0
14:33:53: CRC                                           :0x0
14:33:53: ####CSD Registe Values####  

14:33:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:53: [GetSCRRegisterEntry] Passed
14:33:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:53: Data_Status_After Erases          : 0
14:33:53: CPRM Security Support             : No Security
14:33:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:53: Spec. Version                     : Version 3.0X
14:33:53: Extended Security Support         : Extended_Security_Not_Supported
14:33:53: Command Support                   : COMMAND_SUPPORT
14:33:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ACF0>, <py_sfcl.CommandDataDefinition object at 0x0667AC00>) , Command count = 1131 ] 
14:33:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AF60>, <py_sfcl.CommandDataDefinition object at 0x0667AE70>) , Command count = 1132 ] 
14:33:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:53: [ SetBusWidth(0x4) , Command count = 1133 ] 
14:33:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1134 ] 
14:33:53: Protected Area Size 0x28000
14:33:53: Bus Width           2
14:33:53: Secure Mode         0
14:33:53: Speed  Class        4
14:33:53: Perf Move           0
14:33:53: Au Size             9
14:33:53: Erase Size          15
14:33:53: Erase Timeout       1
14:33:53: Erase offset        1
14:33:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1135 ] 
14:33:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:53: Host Frequency set to 100000 KHz
14:33:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:53: ####CSD Registe 2.0 Values####
14:33:53: CSD_STRUCTURE                                 :0x1
14:33:53: Reserv1                                       :0x0
14:33:53: Time Access 1 TAAC                            :0xe
14:33:53: Time Access 2 NSAC*100                        :0x0
14:33:53: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:53: Card Command Classess CCC                     :0x5b5
14:33:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:53: DSR(driver stage register)  DSR_IMP           :0x0
14:33:53: Reserv2                                       :0x0
14:33:53: Device Size C_SIZE                            :0xedc8
14:33:53: Reserv3                                       :0x0
14:33:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:53: Reserv4                                       :0x0
14:33:53: Write Speed Factor R2W_FACTOR                 :0x2
14:33:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:53: FILE_FORMAT_GRP                               :0x0
14:33:53: COPY flag                                     :0x1
14:33:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:53: File_Format                                   :0x0
14:33:53: CRC                                           :0x0
14:33:53: ####CSD Registe Values####  

14:33:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A1E0>, <py_sfcl.CommandDataDefinition object at 0x0667A8A0>) , Command count = 1136 ] 
14:33:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666750>, <py_sfcl.CommandDataDefinition object at 0x06685D80>) , Command count = 1137 ] 
14:33:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:53: [DVTCommonLib]### Erase :Erase API Called
14:33:53: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2C008 with Blockcount:0x2001
14:33:53: [ EraseLba(0x2C008, 0x2001) , Command count = 1138 ] 
14:33:53: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2C008 with Blockcount:0x2001 

14:33:53: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 5
14:33:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2E008 to EndLba:0x2E010 with Increment Pattern
14:33:53: [ WrLbaNoData(0x2E008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1139 ] 
14:33:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2E008 to EndLba:0x2E010 with Increment Pattern 

14:33:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AA20>, <py_sfcl.CommandDataDefinition object at 0x0667A0C0>) , Command count = 1140 ] 
14:33:53: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A8D0>, <py_sfcl.CommandDataDefinition object at 0x0667AF00>) , Command count = 1141 ] 
14:33:53: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:53: [DVTCommonLib]###  R1bCommandAbort called
14:33:53: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1E, False) , Command count = 1142 ] 
14:33:53: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:53: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:55: Host Frequency set to 25000 KHz
14:33:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C1B0>, 0x0, True) , Command count = 1143 ] 
14:33:55: [GO18_globalSetVolt]### Host voltage value is set.
14:33:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C480>, 0x0, False) , Command count = 1144 ] 
14:33:55: [GO18_globalSetVolt]### Host voltage value is set.
14:33:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1145 ] 
14:33:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1146 ] 
14:33:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1147 ] 
14:33:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C3F0>, <py_sfcl.CommandDataDefinition object at 0x0667C390>) , Command count = 1148 ] 
14:33:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A870>, <py_sfcl.CommandDataDefinition object at 0x0667AF00>) , Command count = 1149 ] 
14:33:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:56: [ SetCardRCA(0x1, 0xD555) , Command count = 1150 ] 
14:33:56: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:56: Host Frequency set to 25000 KHz
14:33:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:56: ####CSD Registe 2.0 Values####
14:33:56: CSD_STRUCTURE                                 :0x1
14:33:56: Reserv1                                       :0x0
14:33:56: Time Access 1 TAAC                            :0xe
14:33:56: Time Access 2 NSAC*100                        :0x0
14:33:56: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:56: Card Command Classess CCC                     :0x5b5
14:33:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:56: DSR(driver stage register)  DSR_IMP           :0x0
14:33:56: Reserv2                                       :0x0
14:33:56: Device Size C_SIZE                            :0xedc8
14:33:56: Reserv3                                       :0x0
14:33:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:56: Reserv4                                       :0x0
14:33:56: Write Speed Factor R2W_FACTOR                 :0x2
14:33:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:56: FILE_FORMAT_GRP                               :0x0
14:33:56: COPY flag                                     :0x1
14:33:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:56: File_Format                                   :0x0
14:33:56: CRC                                           :0x0
14:33:56: ####CSD Registe Values####  

14:33:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:56: [GetSCRRegisterEntry] Passed
14:33:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:56: Data_Status_After Erases          : 0
14:33:56: CPRM Security Support             : No Security
14:33:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:56: Spec. Version                     : Version 3.0X
14:33:56: Extended Security Support         : Extended_Security_Not_Supported
14:33:56: Command Support                   : COMMAND_SUPPORT
14:33:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C4E0>, <py_sfcl.CommandDataDefinition object at 0x0667C0F0>) , Command count = 1151 ] 
14:33:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C720>, <py_sfcl.CommandDataDefinition object at 0x0667C840>) , Command count = 1152 ] 
14:33:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:56: [ SetBusWidth(0x4) , Command count = 1153 ] 
14:33:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1154 ] 
14:33:56: Protected Area Size 0x28000
14:33:56: Bus Width           2
14:33:56: Secure Mode         0
14:33:56: Speed  Class        4
14:33:56: Perf Move           0
14:33:56: Au Size             9
14:33:56: Erase Size          15
14:33:56: Erase Timeout       1
14:33:56: Erase offset        1
14:33:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1155 ] 
14:33:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:56: Host Frequency set to 100000 KHz
14:33:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:56: ####CSD Registe 2.0 Values####
14:33:56: CSD_STRUCTURE                                 :0x1
14:33:56: Reserv1                                       :0x0
14:33:56: Time Access 1 TAAC                            :0xe
14:33:56: Time Access 2 NSAC*100                        :0x0
14:33:56: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:56: Card Command Classess CCC                     :0x5b5
14:33:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:56: DSR(driver stage register)  DSR_IMP           :0x0
14:33:56: Reserv2                                       :0x0
14:33:56: Device Size C_SIZE                            :0xedc8
14:33:56: Reserv3                                       :0x0
14:33:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:56: Reserv4                                       :0x0
14:33:56: Write Speed Factor R2W_FACTOR                 :0x2
14:33:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:56: FILE_FORMAT_GRP                               :0x0
14:33:56: COPY flag                                     :0x1
14:33:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:56: File_Format                                   :0x0
14:33:56: CRC                                           :0x0
14:33:56: ####CSD Registe Values####  

14:33:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C2D0>, <py_sfcl.CommandDataDefinition object at 0x0667C7B0>) , Command count = 1156 ] 
14:33:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C210>, <py_sfcl.CommandDataDefinition object at 0x0667A3C0>) , Command count = 1157 ] 
14:33:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:56: [DVTCommonLib]### Erase :Erase API Called
14:33:56: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2E008 with Blockcount:0x2001
14:33:56: [ EraseLba(0x2E008, 0x2001) , Command count = 1158 ] 
14:33:56: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2E008 with Blockcount:0x2001 

14:33:56: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 4
14:33:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x30008 to EndLba:0x30010 with Increment Pattern
14:33:56: [ WrLbaNoData(0x30008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1159 ] 
14:33:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x30008 to EndLba:0x30010 with Increment Pattern 

14:33:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CA80>, <py_sfcl.CommandDataDefinition object at 0x0667CAE0>) , Command count = 1160 ] 
14:33:56: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C120>, <py_sfcl.CommandDataDefinition object at 0x0667C150>) , Command count = 1161 ] 
14:33:56: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:56: [DVTCommonLib]###  R1bCommandAbort called
14:33:56: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2C, False) , Command count = 1162 ] 
14:33:56: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:56: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:58: Host Frequency set to 25000 KHz
14:33:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:58: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C1E0>, 0x0, True) , Command count = 1163 ] 
14:33:58: [GO18_globalSetVolt]### Host voltage value is set.
14:33:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CC00>, 0x0, False) , Command count = 1164 ] 
14:33:58: [GO18_globalSetVolt]### Host voltage value is set.
14:33:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1165 ] 
14:33:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1166 ] 
14:33:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1167 ] 
14:33:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AED0>, <py_sfcl.CommandDataDefinition object at 0x0667CB70>) , Command count = 1168 ] 
14:33:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CE40>, <py_sfcl.CommandDataDefinition object at 0x0667CCF0>) , Command count = 1169 ] 
14:33:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1170 ] 
14:33:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:59: Host Frequency set to 25000 KHz
14:33:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:59: ####CSD Registe 2.0 Values####
14:33:59: CSD_STRUCTURE                                 :0x1
14:33:59: Reserv1                                       :0x0
14:33:59: Time Access 1 TAAC                            :0xe
14:33:59: Time Access 2 NSAC*100                        :0x0
14:33:59: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:59: Card Command Classess CCC                     :0x5b5
14:33:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:59: DSR(driver stage register)  DSR_IMP           :0x0
14:33:59: Reserv2                                       :0x0
14:33:59: Device Size C_SIZE                            :0xedc8
14:33:59: Reserv3                                       :0x0
14:33:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:59: Reserv4                                       :0x0
14:33:59: Write Speed Factor R2W_FACTOR                 :0x2
14:33:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:59: FILE_FORMAT_GRP                               :0x0
14:33:59: COPY flag                                     :0x1
14:33:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:59: File_Format                                   :0x0
14:33:59: CRC                                           :0x0
14:33:59: ####CSD Registe Values####  

14:33:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:59: [GetSCRRegisterEntry] Passed
14:33:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:59: Data_Status_After Erases          : 0
14:33:59: CPRM Security Support             : No Security
14:33:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:59: Spec. Version                     : Version 3.0X
14:33:59: Extended Security Support         : Extended_Security_Not_Supported
14:33:59: Command Support                   : COMMAND_SUPPORT
14:33:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A660>, <py_sfcl.CommandDataDefinition object at 0x0667CC60>) , Command count = 1171 ] 
14:33:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CEA0>, <py_sfcl.CommandDataDefinition object at 0x0667CFC0>) , Command count = 1172 ] 
14:33:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:59: [ SetBusWidth(0x4) , Command count = 1173 ] 
14:33:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1174 ] 
14:33:59: Protected Area Size 0x28000
14:33:59: Bus Width           2
14:33:59: Secure Mode         0
14:33:59: Speed  Class        4
14:33:59: Perf Move           0
14:33:59: Au Size             9
14:33:59: Erase Size          15
14:33:59: Erase Timeout       1
14:33:59: Erase offset        1
14:33:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1175 ] 
14:33:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:59: Host Frequency set to 100000 KHz
14:33:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:59: ####CSD Registe 2.0 Values####
14:33:59: CSD_STRUCTURE                                 :0x1
14:33:59: Reserv1                                       :0x0
14:33:59: Time Access 1 TAAC                            :0xe
14:33:59: Time Access 2 NSAC*100                        :0x0
14:33:59: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:59: Card Command Classess CCC                     :0x5b5
14:33:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:59: DSR(driver stage register)  DSR_IMP           :0x0
14:33:59: Reserv2                                       :0x0
14:33:59: Device Size C_SIZE                            :0xedc8
14:33:59: Reserv3                                       :0x0
14:33:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:59: Reserv4                                       :0x0
14:33:59: Write Speed Factor R2W_FACTOR                 :0x2
14:33:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:59: FILE_FORMAT_GRP                               :0x0
14:33:59: COPY flag                                     :0x1
14:33:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:59: File_Format                                   :0x0
14:33:59: CRC                                           :0x0
14:33:59: ####CSD Registe Values####  

14:33:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CC90>, <py_sfcl.CommandDataDefinition object at 0x0667C270>) , Command count = 1176 ] 
14:33:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C6C0>, <py_sfcl.CommandDataDefinition object at 0x06685090>) , Command count = 1177 ] 
14:33:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:59: [DVTCommonLib]### Erase :Erase API Called
14:33:59: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x30008 with Blockcount:0x2001
14:33:59: [ EraseLba(0x30008, 0x2001) , Command count = 1178 ] 
14:33:59: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x30008 with Blockcount:0x2001 

14:33:59: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 3
14:33:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x32008 to EndLba:0x32010 with Increment Pattern
14:33:59: [ WrLbaNoData(0x32008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1179 ] 
14:33:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x32008 to EndLba:0x32010 with Increment Pattern 

14:33:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F180>, <py_sfcl.CommandDataDefinition object at 0x0667CA20>) , Command count = 1180 ] 
14:33:59: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:33:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C8D0>, <py_sfcl.CommandDataDefinition object at 0x0667C900>) , Command count = 1181 ] 
14:33:59: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:33:59: [DVTCommonLib]###  R1bCommandAbort called
14:33:59: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1F, False) , Command count = 1182 ] 
14:33:59: [DVTCommonLib]###  R1bCommandAbort Completed 

14:33:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:01: Host Frequency set to 25000 KHz
14:34:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F300>, 0x0, True) , Command count = 1183 ] 
14:34:01: [GO18_globalSetVolt]### Host voltage value is set.
14:34:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F3C0>, 0x0, False) , Command count = 1184 ] 
14:34:01: [GO18_globalSetVolt]### Host voltage value is set.
14:34:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1185 ] 
14:34:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1186 ] 
14:34:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1187 ] 
14:34:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F540>, <py_sfcl.CommandDataDefinition object at 0x0667F2D0>) , Command count = 1188 ] 
14:34:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F600>, <py_sfcl.CommandDataDefinition object at 0x0667CBA0>) , Command count = 1189 ] 
14:34:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:01: [ SetCardRCA(0x1, 0xD555) , Command count = 1190 ] 
14:34:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:01: Host Frequency set to 25000 KHz
14:34:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:01: ####CSD Registe 2.0 Values####
14:34:01: CSD_STRUCTURE                                 :0x1
14:34:01: Reserv1                                       :0x0
14:34:01: Time Access 1 TAAC                            :0xe
14:34:01: Time Access 2 NSAC*100                        :0x0
14:34:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:01: Card Command Classess CCC                     :0x5b5
14:34:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:01: DSR(driver stage register)  DSR_IMP           :0x0
14:34:01: Reserv2                                       :0x0
14:34:01: Device Size C_SIZE                            :0xedc8
14:34:01: Reserv3                                       :0x0
14:34:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:01: Reserv4                                       :0x0
14:34:01: Write Speed Factor R2W_FACTOR                 :0x2
14:34:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:01: FILE_FORMAT_GRP                               :0x0
14:34:01: COPY flag                                     :0x1
14:34:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:01: File_Format                                   :0x0
14:34:01: CRC                                           :0x0
14:34:01: ####CSD Registe Values####  

14:34:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:01: [GetSCRRegisterEntry] Passed
14:34:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:01: Data_Status_After Erases          : 0
14:34:01: CPRM Security Support             : No Security
14:34:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:01: Spec. Version                     : Version 3.0X
14:34:01: Extended Security Support         : Extended_Security_Not_Supported
14:34:01: Command Support                   : COMMAND_SUPPORT
14:34:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AEA0>, <py_sfcl.CommandDataDefinition object at 0x0667F420>) , Command count = 1191 ] 
14:34:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F660>, <py_sfcl.CommandDataDefinition object at 0x0667F780>) , Command count = 1192 ] 
14:34:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:01: [ SetBusWidth(0x4) , Command count = 1193 ] 
14:34:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667CF90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1194 ] 
14:34:01: Protected Area Size 0x28000
14:34:01: Bus Width           2
14:34:01: Secure Mode         0
14:34:01: Speed  Class        4
14:34:01: Perf Move           0
14:34:01: Au Size             9
14:34:01: Erase Size          15
14:34:01: Erase Timeout       1
14:34:01: Erase offset        1
14:34:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1195 ] 
14:34:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:02: Host Frequency set to 100000 KHz
14:34:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:02: ####CSD Registe 2.0 Values####
14:34:02: CSD_STRUCTURE                                 :0x1
14:34:02: Reserv1                                       :0x0
14:34:02: Time Access 1 TAAC                            :0xe
14:34:02: Time Access 2 NSAC*100                        :0x0
14:34:02: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:02: Card Command Classess CCC                     :0x5b5
14:34:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:02: DSR(driver stage register)  DSR_IMP           :0x0
14:34:02: Reserv2                                       :0x0
14:34:02: Device Size C_SIZE                            :0xedc8
14:34:02: Reserv3                                       :0x0
14:34:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:02: Reserv4                                       :0x0
14:34:02: Write Speed Factor R2W_FACTOR                 :0x2
14:34:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:02: FILE_FORMAT_GRP                               :0x0
14:34:02: COPY flag                                     :0x1
14:34:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:02: File_Format                                   :0x0
14:34:02: CRC                                           :0x0
14:34:02: ####CSD Registe Values####  

14:34:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F450>, <py_sfcl.CommandDataDefinition object at 0x0667C930>) , Command count = 1196 ] 
14:34:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A9F0>, <py_sfcl.CommandDataDefinition object at 0x0667CCC0>) , Command count = 1197 ] 
14:34:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:02: [DVTCommonLib]### Erase :Erase API Called
14:34:02: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x32008 with Blockcount:0x2001
14:34:02: [ EraseLba(0x32008, 0x2001) , Command count = 1198 ] 
14:34:02: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x32008 with Blockcount:0x2001 

14:34:02: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 2
14:34:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x34008 to EndLba:0x34010 with Increment Pattern
14:34:02: [ WrLbaNoData(0x34008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1199 ] 
14:34:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x34008 to EndLba:0x34010 with Increment Pattern 

14:34:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F9C0>, <py_sfcl.CommandDataDefinition object at 0x0667FA20>) , Command count = 1200 ] 
14:34:02: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CD50>, <py_sfcl.CommandDataDefinition object at 0x0667F090>) , Command count = 1201 ] 
14:34:02: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:02: [DVTCommonLib]###  R1bCommandAbort called
14:34:02: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xA, False) , Command count = 1202 ] 
14:34:02: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:02: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:04: Host Frequency set to 25000 KHz
14:34:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:04: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F120>, 0x0, True) , Command count = 1203 ] 
14:34:04: [GO18_globalSetVolt]### Host voltage value is set.
14:34:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FB40>, 0x0, False) , Command count = 1204 ] 
14:34:04: [GO18_globalSetVolt]### Host voltage value is set.
14:34:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1205 ] 
14:34:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1206 ] 
14:34:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1207 ] 
14:34:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CE10>, <py_sfcl.CommandDataDefinition object at 0x0667FAB0>) , Command count = 1208 ] 
14:34:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FD80>, <py_sfcl.CommandDataDefinition object at 0x0667FCC0>) , Command count = 1209 ] 
14:34:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:04: [ SetCardRCA(0x1, 0xD555) , Command count = 1210 ] 
14:34:04: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:04: Host Frequency set to 25000 KHz
14:34:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:04: ####CSD Registe 2.0 Values####
14:34:04: CSD_STRUCTURE                                 :0x1
14:34:04: Reserv1                                       :0x0
14:34:04: Time Access 1 TAAC                            :0xe
14:34:04: Time Access 2 NSAC*100                        :0x0
14:34:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:04: Card Command Classess CCC                     :0x5b5
14:34:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:04: DSR(driver stage register)  DSR_IMP           :0x0
14:34:04: Reserv2                                       :0x0
14:34:04: Device Size C_SIZE                            :0xedc8
14:34:04: Reserv3                                       :0x0
14:34:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:04: Reserv4                                       :0x0
14:34:04: Write Speed Factor R2W_FACTOR                 :0x2
14:34:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:04: FILE_FORMAT_GRP                               :0x0
14:34:04: COPY flag                                     :0x1
14:34:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:04: File_Format                                   :0x0
14:34:04: CRC                                           :0x0
14:34:04: ####CSD Registe Values####  

14:34:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:04: [GetSCRRegisterEntry] Passed
14:34:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:04: Data_Status_After Erases          : 0
14:34:04: CPRM Security Support             : No Security
14:34:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:04: Spec. Version                     : Version 3.0X
14:34:04: Extended Security Support         : Extended_Security_Not_Supported
14:34:04: Command Support                   : COMMAND_SUPPORT
14:34:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C660>, <py_sfcl.CommandDataDefinition object at 0x0667F2A0>) , Command count = 1211 ] 
14:34:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FDE0>, <py_sfcl.CommandDataDefinition object at 0x0667FF00>) , Command count = 1212 ] 
14:34:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:04: [ SetBusWidth(0x4) , Command count = 1213 ] 
14:34:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1214 ] 
14:34:04: Protected Area Size 0x28000
14:34:04: Bus Width           2
14:34:04: Secure Mode         0
14:34:04: Speed  Class        4
14:34:04: Perf Move           0
14:34:04: Au Size             9
14:34:04: Erase Size          15
14:34:04: Erase Timeout       1
14:34:04: Erase offset        1
14:34:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1215 ] 
14:34:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:04: Host Frequency set to 100000 KHz
14:34:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:04: ####CSD Registe 2.0 Values####
14:34:04: CSD_STRUCTURE                                 :0x1
14:34:04: Reserv1                                       :0x0
14:34:04: Time Access 1 TAAC                            :0xe
14:34:04: Time Access 2 NSAC*100                        :0x0
14:34:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:04: Card Command Classess CCC                     :0x5b5
14:34:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:04: DSR(driver stage register)  DSR_IMP           :0x0
14:34:04: Reserv2                                       :0x0
14:34:04: Device Size C_SIZE                            :0xedc8
14:34:04: Reserv3                                       :0x0
14:34:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:04: Reserv4                                       :0x0
14:34:04: Write Speed Factor R2W_FACTOR                 :0x2
14:34:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:04: FILE_FORMAT_GRP                               :0x0
14:34:04: COPY flag                                     :0x1
14:34:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:04: File_Format                                   :0x0
14:34:04: CRC                                           :0x0
14:34:04: ####CSD Registe Values####  

14:34:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FBD0>, <py_sfcl.CommandDataDefinition object at 0x0667F870>) , Command count = 1216 ] 
14:34:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F150>, <py_sfcl.CommandDataDefinition object at 0x0667F8A0>) , Command count = 1217 ] 
14:34:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:04: [DVTCommonLib]### Erase :Erase API Called
14:34:04: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x34008 with Blockcount:0x2001
14:34:04: [ EraseLba(0x34008, 0x2001) , Command count = 1218 ] 
14:34:04: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x34008 with Blockcount:0x2001 

14:34:04: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 1
14:34:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x36008 to EndLba:0x36010 with Increment Pattern
14:34:04: [ WrLbaNoData(0x36008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1219 ] 
14:34:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x36008 to EndLba:0x36010 with Increment Pattern 

14:34:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F960>, <py_sfcl.CommandDataDefinition object at 0x0667F840>) , Command count = 1220 ] 
14:34:04: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F810>, <py_sfcl.CommandDataDefinition object at 0x0667F510>) , Command count = 1221 ] 
14:34:04: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:04: [DVTCommonLib]###  R1bCommandAbort called
14:34:05: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1C, False) , Command count = 1222 ] 
14:34:05: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:05: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:07: Host Frequency set to 25000 KHz
14:34:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:07: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683210>, 0x0, True) , Command count = 1223 ] 
14:34:07: [GO18_globalSetVolt]### Host voltage value is set.
14:34:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683300>, 0x0, False) , Command count = 1224 ] 
14:34:07: [GO18_globalSetVolt]### Host voltage value is set.
14:34:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1225 ] 
14:34:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1226 ] 
14:34:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1227 ] 
14:34:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683480>, <py_sfcl.CommandDataDefinition object at 0x066832D0>) , Command count = 1228 ] 
14:34:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE70>, <py_sfcl.CommandDataDefinition object at 0x0667FF60>) , Command count = 1229 ] 
14:34:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:07: [ SetCardRCA(0x1, 0xD555) , Command count = 1230 ] 
14:34:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:07: Host Frequency set to 25000 KHz
14:34:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:07: ####CSD Registe 2.0 Values####
14:34:07: CSD_STRUCTURE                                 :0x1
14:34:07: Reserv1                                       :0x0
14:34:07: Time Access 1 TAAC                            :0xe
14:34:07: Time Access 2 NSAC*100                        :0x0
14:34:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:07: Card Command Classess CCC                     :0x5b5
14:34:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:07: DSR(driver stage register)  DSR_IMP           :0x0
14:34:07: Reserv2                                       :0x0
14:34:07: Device Size C_SIZE                            :0xedc8
14:34:07: Reserv3                                       :0x0
14:34:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:07: Reserv4                                       :0x0
14:34:07: Write Speed Factor R2W_FACTOR                 :0x2
14:34:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:07: FILE_FORMAT_GRP                               :0x0
14:34:07: COPY flag                                     :0x1
14:34:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:07: File_Format                                   :0x0
14:34:07: CRC                                           :0x0
14:34:07: ####CSD Registe Values####  

14:34:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:07: [GetSCRRegisterEntry] Passed
14:34:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:07: Data_Status_After Erases          : 0
14:34:07: CPRM Security Support             : No Security
14:34:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:07: Spec. Version                     : Version 3.0X
14:34:07: Extended Security Support         : Extended_Security_Not_Supported
14:34:07: Command Support                   : COMMAND_SUPPORT
14:34:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CDE0>, <py_sfcl.CommandDataDefinition object at 0x06683360>) , Command count = 1231 ] 
14:34:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066835A0>, <py_sfcl.CommandDataDefinition object at 0x066836C0>) , Command count = 1232 ] 
14:34:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:07: [ SetBusWidth(0x4) , Command count = 1233 ] 
14:34:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667FED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1234 ] 
14:34:07: Protected Area Size 0x28000
14:34:07: Bus Width           2
14:34:07: Secure Mode         0
14:34:07: Speed  Class        4
14:34:07: Perf Move           0
14:34:07: Au Size             9
14:34:07: Erase Size          15
14:34:07: Erase Timeout       1
14:34:07: Erase offset        1
14:34:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1235 ] 
14:34:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:07: Host Frequency set to 100000 KHz
14:34:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:07: ####CSD Registe 2.0 Values####
14:34:07: CSD_STRUCTURE                                 :0x1
14:34:07: Reserv1                                       :0x0
14:34:07: Time Access 1 TAAC                            :0xe
14:34:07: Time Access 2 NSAC*100                        :0x0
14:34:07: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:07: Card Command Classess CCC                     :0x5b5
14:34:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:07: DSR(driver stage register)  DSR_IMP           :0x0
14:34:07: Reserv2                                       :0x0
14:34:07: Device Size C_SIZE                            :0xedc8
14:34:07: Reserv3                                       :0x0
14:34:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:07: Reserv4                                       :0x0
14:34:07: Write Speed Factor R2W_FACTOR                 :0x2
14:34:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:07: FILE_FORMAT_GRP                               :0x0
14:34:07: COPY flag                                     :0x1
14:34:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:07: File_Format                                   :0x0
14:34:07: CRC                                           :0x0
14:34:07: ####CSD Registe Values####  

14:34:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683630>, <py_sfcl.CommandDataDefinition object at 0x0667F930>) , Command count = 1236 ] 
14:34:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F570>, <py_sfcl.CommandDataDefinition object at 0x0667F8D0>) , Command count = 1237 ] 
14:34:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:07: [DVTCommonLib]### Erase :Erase API Called
14:34:07: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x36008 with Blockcount:0x2001
14:34:07: [ EraseLba(0x36008, 0x2001) , Command count = 1238 ] 
14:34:07: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x36008 with Blockcount:0x2001 

14:34:07: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 0
14:34:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x38008 to EndLba:0x38010 with Increment Pattern
14:34:07: [ WrLbaNoData(0x38008, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1239 ] 
14:34:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x38008 to EndLba:0x38010 with Increment Pattern 

14:34:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683900>, <py_sfcl.CommandDataDefinition object at 0x06683960>) , Command count = 1240 ] 
14:34:07: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FF90>, <py_sfcl.CommandDataDefinition object at 0x06683060>) , Command count = 1241 ] 
14:34:07: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:07: [DVTCommonLib]###  R1bCommandAbort called
14:34:07: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x16, False) , Command count = 1242 ] 
14:34:07: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:09: Host Frequency set to 25000 KHz
14:34:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683090>, 0x0, True) , Command count = 1243 ] 
14:34:09: [GO18_globalSetVolt]### Host voltage value is set.
14:34:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683A80>, 0x0, False) , Command count = 1244 ] 
14:34:09: [GO18_globalSetVolt]### Host voltage value is set.
14:34:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1245 ] 
14:34:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1246 ] 
14:34:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1247 ] 
14:34:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FD50>, <py_sfcl.CommandDataDefinition object at 0x066839F0>) , Command count = 1248 ] 
14:34:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683CC0>, <py_sfcl.CommandDataDefinition object at 0x066832A0>) , Command count = 1249 ] 
14:34:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:10: [ SetCardRCA(0x1, 0xD555) , Command count = 1250 ] 
14:34:10: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:10: Host Frequency set to 25000 KHz
14:34:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:10: ####CSD Registe 2.0 Values####
14:34:10: CSD_STRUCTURE                                 :0x1
14:34:10: Reserv1                                       :0x0
14:34:10: Time Access 1 TAAC                            :0xe
14:34:10: Time Access 2 NSAC*100                        :0x0
14:34:10: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:10: Card Command Classess CCC                     :0x5b5
14:34:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:10: DSR(driver stage register)  DSR_IMP           :0x0
14:34:10: Reserv2                                       :0x0
14:34:10: Device Size C_SIZE                            :0xedc8
14:34:10: Reserv3                                       :0x0
14:34:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:10: Reserv4                                       :0x0
14:34:10: Write Speed Factor R2W_FACTOR                 :0x2
14:34:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:10: FILE_FORMAT_GRP                               :0x0
14:34:10: COPY flag                                     :0x1
14:34:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:10: File_Format                                   :0x0
14:34:10: CRC                                           :0x0
14:34:10: ####CSD Registe Values####  

14:34:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:10: [GetSCRRegisterEntry] Passed
14:34:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:10: Data_Status_After Erases          : 0
14:34:10: CPRM Security Support             : No Security
14:34:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:10: Spec. Version                     : Version 3.0X
14:34:10: Extended Security Support         : Extended_Security_Not_Supported
14:34:10: Command Support                   : COMMAND_SUPPORT
14:34:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F5A0>, <py_sfcl.CommandDataDefinition object at 0x06683720>) , Command count = 1251 ] 
14:34:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D20>, <py_sfcl.CommandDataDefinition object at 0x06683E40>) , Command count = 1252 ] 
14:34:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:10: [ SetBusWidth(0x4) , Command count = 1253 ] 
14:34:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1254 ] 
14:34:10: Protected Area Size 0x28000
14:34:10: Bus Width           2
14:34:10: Secure Mode         0
14:34:10: Speed  Class        4
14:34:10: Perf Move           0
14:34:10: Au Size             9
14:34:10: Erase Size          15
14:34:10: Erase Timeout       1
14:34:10: Erase offset        1
14:34:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1255 ] 
14:34:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:10: Host Frequency set to 100000 KHz
14:34:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:10: ####CSD Registe 2.0 Values####
14:34:10: CSD_STRUCTURE                                 :0x1
14:34:10: Reserv1                                       :0x0
14:34:10: Time Access 1 TAAC                            :0xe
14:34:10: Time Access 2 NSAC*100                        :0x0
14:34:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:10: Card Command Classess CCC                     :0x5b5
14:34:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:10: DSR(driver stage register)  DSR_IMP           :0x0
14:34:10: Reserv2                                       :0x0
14:34:10: Device Size C_SIZE                            :0xedc8
14:34:10: Reserv3                                       :0x0
14:34:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:10: Reserv4                                       :0x0
14:34:10: Write Speed Factor R2W_FACTOR                 :0x2
14:34:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:10: FILE_FORMAT_GRP                               :0x0
14:34:10: COPY flag                                     :0x1
14:34:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:10: File_Format                                   :0x0
14:34:10: CRC                                           :0x0
14:34:10: ####CSD Registe Values####  

14:34:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683810>, <py_sfcl.CommandDataDefinition object at 0x066837B0>) , Command count = 1256 ] 
14:34:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683540>, <py_sfcl.CommandDataDefinition object at 0x066837E0>) , Command count = 1257 ] 
14:34:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:10: [DVTCommonLib]### Erase :Erase API Called
14:34:10: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x38008 with Blockcount:0x2001
14:34:10: [ EraseLba(0x38008, 0x2001) , Command count = 1258 ] 
14:34:10: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x38008 with Blockcount:0x2001 

14:34:10: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Outer loop Count 1021
14:34:10: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 28
14:34:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x10 to EndLba:0x18 with Increment Pattern
14:34:10: [ WrLbaNoData(0x10, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1259 ] 
14:34:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x10 to EndLba:0x18 with Increment Pattern 

14:34:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066838A0>, <py_sfcl.CommandDataDefinition object at 0x06683F00>) , Command count = 1260 ] 
14:34:10: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683750>, <py_sfcl.CommandDataDefinition object at 0x06683450>) , Command count = 1261 ] 
14:34:10: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:10: [DVTCommonLib]###  R1bCommandAbort called
14:34:10: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x4, False) , Command count = 1262 ] 
14:34:10: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:12: Host Frequency set to 25000 KHz
14:34:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:12: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x066836F0>, 0x0, True) , Command count = 1263 ] 
14:34:12: [GO18_globalSetVolt]### Host voltage value is set.
14:34:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FE8C00>, 0x0, False) , Command count = 1264 ] 
14:34:12: [GO18_globalSetVolt]### Host voltage value is set.
14:34:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1265 ] 
14:34:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1266 ] 
14:34:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1267 ] 
14:34:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E42840>, <py_sfcl.CommandDataDefinition object at 0x05FC6F90>) , Command count = 1268 ] 
14:34:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AF90>, <py_sfcl.CommandDataDefinition object at 0x06683DE0>) , Command count = 1269 ] 
14:34:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:12: [ SetCardRCA(0x1, 0xD555) , Command count = 1270 ] 
14:34:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:13: Host Frequency set to 25000 KHz
14:34:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:13: ####CSD Registe 2.0 Values####
14:34:13: CSD_STRUCTURE                                 :0x1
14:34:13: Reserv1                                       :0x0
14:34:13: Time Access 1 TAAC                            :0xe
14:34:13: Time Access 2 NSAC*100                        :0x0
14:34:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:13: Card Command Classess CCC                     :0x5b5
14:34:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:13: DSR(driver stage register)  DSR_IMP           :0x0
14:34:13: Reserv2                                       :0x0
14:34:13: Device Size C_SIZE                            :0xedc8
14:34:13: Reserv3                                       :0x0
14:34:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:13: Reserv4                                       :0x0
14:34:13: Write Speed Factor R2W_FACTOR                 :0x2
14:34:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:13: FILE_FORMAT_GRP                               :0x0
14:34:13: COPY flag                                     :0x1
14:34:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:13: File_Format                                   :0x0
14:34:13: CRC                                           :0x0
14:34:13: ####CSD Registe Values####  

14:34:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:13: [GetSCRRegisterEntry] Passed
14:34:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:13: Data_Status_After Erases          : 0
14:34:13: CPRM Security Support             : No Security
14:34:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:13: Spec. Version                     : Version 3.0X
14:34:13: Extended Security Support         : Extended_Security_Not_Supported
14:34:13: Command Support                   : COMMAND_SUPPORT
14:34:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8C60>, <py_sfcl.CommandDataDefinition object at 0x06683F90>) , Command count = 1271 ] 
14:34:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6570>, <py_sfcl.CommandDataDefinition object at 0x05FED1B0>) , Command count = 1272 ] 
14:34:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:13: [ SetBusWidth(0x4) , Command count = 1273 ] 
14:34:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685A20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1274 ] 
14:34:13: Protected Area Size 0x28000
14:34:13: Bus Width           2
14:34:13: Secure Mode         0
14:34:13: Speed  Class        4
14:34:13: Perf Move           0
14:34:13: Au Size             9
14:34:13: Erase Size          15
14:34:13: Erase Timeout       1
14:34:13: Erase offset        1
14:34:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1275 ] 
14:34:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:13: Host Frequency set to 100000 KHz
14:34:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:13: ####CSD Registe 2.0 Values####
14:34:13: CSD_STRUCTURE                                 :0x1
14:34:13: Reserv1                                       :0x0
14:34:13: Time Access 1 TAAC                            :0xe
14:34:13: Time Access 2 NSAC*100                        :0x0
14:34:13: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:13: Card Command Classess CCC                     :0x5b5
14:34:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:13: DSR(driver stage register)  DSR_IMP           :0x0
14:34:13: Reserv2                                       :0x0
14:34:13: Device Size C_SIZE                            :0xedc8
14:34:13: Reserv3                                       :0x0
14:34:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:13: Reserv4                                       :0x0
14:34:13: Write Speed Factor R2W_FACTOR                 :0x2
14:34:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:13: FILE_FORMAT_GRP                               :0x0
14:34:13: COPY flag                                     :0x1
14:34:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:13: File_Format                                   :0x0
14:34:13: CRC                                           :0x0
14:34:13: ####CSD Registe Values####  

14:34:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683870>, <py_sfcl.CommandDataDefinition object at 0x06683CF0>) , Command count = 1276 ] 
14:34:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FF30>, <py_sfcl.CommandDataDefinition object at 0x06685CC0>) , Command count = 1277 ] 
14:34:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:13: [DVTCommonLib]### Erase :Erase API Called
14:34:13: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x10 with Blockcount:0x2001
14:34:13: [ EraseLba(0x10, 0x2001) , Command count = 1278 ] 
14:34:13: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x10 with Blockcount:0x2001 

14:34:13: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 27
14:34:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2010 to EndLba:0x2018 with Increment Pattern
14:34:13: [ WrLbaNoData(0x2010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1279 ] 
14:34:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2010 to EndLba:0x2018 with Increment Pattern 

14:34:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC01E0>, <py_sfcl.CommandDataDefinition object at 0x05FC6360>) , Command count = 1280 ] 
14:34:13: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683ED0>, <py_sfcl.CommandDataDefinition object at 0x066850F0>) , Command count = 1281 ] 
14:34:13: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:13: [DVTCommonLib]###  R1bCommandAbort called
14:34:13: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x28, False) , Command count = 1282 ] 
14:34:13: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:15: Host Frequency set to 25000 KHz
14:34:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06685360>, 0x0, True) , Command count = 1283 ] 
14:34:15: [GO18_globalSetVolt]### Host voltage value is set.
14:34:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x060327E0>, 0x0, False) , Command count = 1284 ] 
14:34:15: [GO18_globalSetVolt]### Host voltage value is set.
14:34:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1285 ] 
14:34:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1286 ] 
14:34:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1287 ] 
14:34:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683C90>, <py_sfcl.CommandDataDefinition object at 0x060327B0>) , Command count = 1288 ] 
14:34:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032840>, <py_sfcl.CommandDataDefinition object at 0x06685990>) , Command count = 1289 ] 
14:34:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:15: [ SetCardRCA(0x1, 0xD555) , Command count = 1290 ] 
14:34:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:15: Host Frequency set to 25000 KHz
14:34:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:15: ####CSD Registe 2.0 Values####
14:34:15: CSD_STRUCTURE                                 :0x1
14:34:15: Reserv1                                       :0x0
14:34:15: Time Access 1 TAAC                            :0xe
14:34:15: Time Access 2 NSAC*100                        :0x0
14:34:15: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:15: Card Command Classess CCC                     :0x5b5
14:34:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:15: DSR(driver stage register)  DSR_IMP           :0x0
14:34:15: Reserv2                                       :0x0
14:34:15: Device Size C_SIZE                            :0xedc8
14:34:15: Reserv3                                       :0x0
14:34:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:15: Reserv4                                       :0x0
14:34:15: Write Speed Factor R2W_FACTOR                 :0x2
14:34:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:15: FILE_FORMAT_GRP                               :0x0
14:34:15: COPY flag                                     :0x1
14:34:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:15: File_Format                                   :0x0
14:34:15: CRC                                           :0x0
14:34:15: ####CSD Registe Values####  

14:34:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:15: [GetSCRRegisterEntry] Passed
14:34:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:15: Data_Status_After Erases          : 0
14:34:15: CPRM Security Support             : No Security
14:34:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:15: Spec. Version                     : Version 3.0X
14:34:15: Extended Security Support         : Extended_Security_Not_Supported
14:34:15: Command Support                   : COMMAND_SUPPORT
14:34:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066834E0>, <py_sfcl.CommandDataDefinition object at 0x066857E0>) , Command count = 1291 ] 
14:34:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032AE0>, <py_sfcl.CommandDataDefinition object at 0x06685C60>) , Command count = 1292 ] 
14:34:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:15: [ SetBusWidth(0x4) , Command count = 1293 ] 
14:34:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1294 ] 
14:34:15: Protected Area Size 0x28000
14:34:15: Bus Width           2
14:34:15: Secure Mode         0
14:34:15: Speed  Class        4
14:34:15: Perf Move           0
14:34:15: Au Size             9
14:34:15: Erase Size          15
14:34:15: Erase Timeout       1
14:34:15: Erase offset        1
14:34:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1295 ] 
14:34:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:16: Host Frequency set to 100000 KHz
14:34:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:16: ####CSD Registe 2.0 Values####
14:34:16: CSD_STRUCTURE                                 :0x1
14:34:16: Reserv1                                       :0x0
14:34:16: Time Access 1 TAAC                            :0xe
14:34:16: Time Access 2 NSAC*100                        :0x0
14:34:16: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:16: Card Command Classess CCC                     :0x5b5
14:34:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:16: DSR(driver stage register)  DSR_IMP           :0x0
14:34:16: Reserv2                                       :0x0
14:34:16: Device Size C_SIZE                            :0xedc8
14:34:16: Reserv3                                       :0x0
14:34:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:16: Reserv4                                       :0x0
14:34:16: Write Speed Factor R2W_FACTOR                 :0x2
14:34:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:16: FILE_FORMAT_GRP                               :0x0
14:34:16: COPY flag                                     :0x1
14:34:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:16: File_Format                                   :0x0
14:34:16: CRC                                           :0x0
14:34:16: ####CSD Registe Values####  

14:34:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683FC0>, <py_sfcl.CommandDataDefinition object at 0x06685030>) , Command count = 1296 ] 
14:34:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683780>, <py_sfcl.CommandDataDefinition object at 0x06685780>) , Command count = 1297 ] 
14:34:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:16: [DVTCommonLib]### Erase :Erase API Called
14:34:16: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2010 with Blockcount:0x2001
14:34:16: [ EraseLba(0x2010, 0x2001) , Command count = 1298 ] 
14:34:16: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2010 with Blockcount:0x2001 

14:34:16: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 26
14:34:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x4010 to EndLba:0x4018 with Increment Pattern
14:34:16: [ WrLbaNoData(0x4010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1299 ] 
14:34:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x4010 to EndLba:0x4018 with Increment Pattern 

14:34:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDAE40>, <py_sfcl.CommandDataDefinition object at 0x066859C0>) , Command count = 1300 ] 
14:34:16: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BAB0>, <py_sfcl.CommandDataDefinition object at 0x06685180>) , Command count = 1301 ] 
14:34:16: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:16: [DVTCommonLib]###  R1bCommandAbort called
14:34:16: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x17, False) , Command count = 1302 ] 
14:34:16: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:18: Host Frequency set to 25000 KHz
14:34:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:18: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x06685C90>, 0x0, True) , Command count = 1303 ] 
14:34:18: [GO18_globalSetVolt]### Host voltage value is set.
14:34:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x06685840>, 0x0, False) , Command count = 1304 ] 
14:34:18: [GO18_globalSetVolt]### Host voltage value is set.
14:34:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1305 ] 
14:34:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1306 ] 
14:34:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1307 ] 
14:34:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEDAE0>, <py_sfcl.CommandDataDefinition object at 0x06685AE0>) , Command count = 1308 ] 
14:34:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F030>, <py_sfcl.CommandDataDefinition object at 0x06685D20>) , Command count = 1309 ] 
14:34:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:18: [ SetCardRCA(0x1, 0xD555) , Command count = 1310 ] 
14:34:18: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:18: Host Frequency set to 25000 KHz
14:34:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:18: ####CSD Registe 2.0 Values####
14:34:18: CSD_STRUCTURE                                 :0x1
14:34:18: Reserv1                                       :0x0
14:34:18: Time Access 1 TAAC                            :0xe
14:34:18: Time Access 2 NSAC*100                        :0x0
14:34:18: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:18: Card Command Classess CCC                     :0x5b5
14:34:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:18: DSR(driver stage register)  DSR_IMP           :0x0
14:34:18: Reserv2                                       :0x0
14:34:18: Device Size C_SIZE                            :0xedc8
14:34:18: Reserv3                                       :0x0
14:34:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:18: Reserv4                                       :0x0
14:34:18: Write Speed Factor R2W_FACTOR                 :0x2
14:34:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:18: FILE_FORMAT_GRP                               :0x0
14:34:18: COPY flag                                     :0x1
14:34:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:18: File_Format                                   :0x0
14:34:18: CRC                                           :0x0
14:34:18: ####CSD Registe Values####  

14:34:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:18: [GetSCRRegisterEntry] Passed
14:34:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:18: Data_Status_After Erases          : 0
14:34:18: CPRM Security Support             : No Security
14:34:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:18: Spec. Version                     : Version 3.0X
14:34:18: Extended Security Support         : Extended_Security_Not_Supported
14:34:18: Command Support                   : COMMAND_SUPPORT
14:34:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666C60>, <py_sfcl.CommandDataDefinition object at 0x06685450>) , Command count = 1311 ] 
14:34:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666390>, <py_sfcl.CommandDataDefinition object at 0x06666BA0>) , Command count = 1312 ] 
14:34:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:18: [ SetBusWidth(0x4) , Command count = 1313 ] 
14:34:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06666B70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1314 ] 
14:34:18: Protected Area Size 0x28000
14:34:18: Bus Width           2
14:34:18: Secure Mode         0
14:34:18: Speed  Class        4
14:34:18: Perf Move           0
14:34:18: Au Size             9
14:34:18: Erase Size          15
14:34:18: Erase Timeout       1
14:34:18: Erase offset        1
14:34:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1315 ] 
14:34:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:18: Host Frequency set to 100000 KHz
14:34:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:18: ####CSD Registe 2.0 Values####
14:34:18: CSD_STRUCTURE                                 :0x1
14:34:18: Reserv1                                       :0x0
14:34:18: Time Access 1 TAAC                            :0xe
14:34:18: Time Access 2 NSAC*100                        :0x0
14:34:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:18: Card Command Classess CCC                     :0x5b5
14:34:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:18: DSR(driver stage register)  DSR_IMP           :0x0
14:34:18: Reserv2                                       :0x0
14:34:18: Device Size C_SIZE                            :0xedc8
14:34:18: Reserv3                                       :0x0
14:34:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:18: Reserv4                                       :0x0
14:34:18: Write Speed Factor R2W_FACTOR                 :0x2
14:34:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:18: FILE_FORMAT_GRP                               :0x0
14:34:18: COPY flag                                     :0x1
14:34:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:18: File_Format                                   :0x0
14:34:18: CRC                                           :0x0
14:34:18: ####CSD Registe Values####  

14:34:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDAC90>, <py_sfcl.CommandDataDefinition object at 0x06666D50>) , Command count = 1316 ] 
14:34:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683F30>, <py_sfcl.CommandDataDefinition object at 0x06685300>) , Command count = 1317 ] 
14:34:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:18: [DVTCommonLib]### Erase :Erase API Called
14:34:18: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x4010 with Blockcount:0x2001
14:34:18: [ EraseLba(0x4010, 0x2001) , Command count = 1318 ] 
14:34:18: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x4010 with Blockcount:0x2001 

14:34:18: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 25
14:34:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x6010 to EndLba:0x6018 with Increment Pattern
14:34:18: [ WrLbaNoData(0x6010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1319 ] 
14:34:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x6010 to EndLba:0x6018 with Increment Pattern 

14:34:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065724B0>, <py_sfcl.CommandDataDefinition object at 0x06666720>) , Command count = 1320 ] 
14:34:18: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032B70>, <py_sfcl.CommandDataDefinition object at 0x066851B0>) , Command count = 1321 ] 
14:34:18: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:18: [DVTCommonLib]###  R1bCommandAbort called
14:34:19: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xF, False) , Command count = 1322 ] 
14:34:19: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:21: Host Frequency set to 25000 KHz
14:34:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666E70>, 0x0, True) , Command count = 1323 ] 
14:34:21: [GO18_globalSetVolt]### Host voltage value is set.
14:34:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB1E0>, 0x0, False) , Command count = 1324 ] 
14:34:21: [GO18_globalSetVolt]### Host voltage value is set.
14:34:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1325 ] 
14:34:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1326 ] 
14:34:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1327 ] 
14:34:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032AB0>, <py_sfcl.CommandDataDefinition object at 0x066AB120>) , Command count = 1328 ] 
14:34:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6F30>, <py_sfcl.CommandDataDefinition object at 0x066851E0>) , Command count = 1329 ] 
14:34:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:21: [ SetCardRCA(0x1, 0xD555) , Command count = 1330 ] 
14:34:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:21: Host Frequency set to 25000 KHz
14:34:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:21: ####CSD Registe 2.0 Values####
14:34:21: CSD_STRUCTURE                                 :0x1
14:34:21: Reserv1                                       :0x0
14:34:21: Time Access 1 TAAC                            :0xe
14:34:21: Time Access 2 NSAC*100                        :0x0
14:34:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:21: Card Command Classess CCC                     :0x5b5
14:34:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:21: DSR(driver stage register)  DSR_IMP           :0x0
14:34:21: Reserv2                                       :0x0
14:34:21: Device Size C_SIZE                            :0xedc8
14:34:21: Reserv3                                       :0x0
14:34:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:21: Reserv4                                       :0x0
14:34:21: Write Speed Factor R2W_FACTOR                 :0x2
14:34:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:21: FILE_FORMAT_GRP                               :0x0
14:34:21: COPY flag                                     :0x1
14:34:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:21: File_Format                                   :0x0
14:34:21: CRC                                           :0x0
14:34:21: ####CSD Registe Values####  

14:34:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:21: [GetSCRRegisterEntry] Passed
14:34:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:21: Data_Status_After Erases          : 0
14:34:21: CPRM Security Support             : No Security
14:34:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:21: Spec. Version                     : Version 3.0X
14:34:21: Extended Security Support         : Extended_Security_Not_Supported
14:34:21: Command Support                   : COMMAND_SUPPORT
14:34:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666B10>, <py_sfcl.CommandDataDefinition object at 0x06666120>) , Command count = 1331 ] 
14:34:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572A20>, <py_sfcl.CommandDataDefinition object at 0x066AB210>) , Command count = 1332 ] 
14:34:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:21: [ SetBusWidth(0x4) , Command count = 1333 ] 
14:34:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066668A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1334 ] 
14:34:21: Protected Area Size 0x28000
14:34:21: Bus Width           2
14:34:21: Secure Mode         0
14:34:21: Speed  Class        4
14:34:21: Perf Move           0
14:34:21: Au Size             9
14:34:21: Erase Size          15
14:34:21: Erase Timeout       1
14:34:21: Erase offset        1
14:34:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1335 ] 
14:34:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:21: Host Frequency set to 100000 KHz
14:34:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:21: ####CSD Registe 2.0 Values####
14:34:21: CSD_STRUCTURE                                 :0x1
14:34:21: Reserv1                                       :0x0
14:34:21: Time Access 1 TAAC                            :0xe
14:34:21: Time Access 2 NSAC*100                        :0x0
14:34:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:21: Card Command Classess CCC                     :0x5b5
14:34:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:21: DSR(driver stage register)  DSR_IMP           :0x0
14:34:21: Reserv2                                       :0x0
14:34:21: Device Size C_SIZE                            :0xedc8
14:34:21: Reserv3                                       :0x0
14:34:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:21: Reserv4                                       :0x0
14:34:21: Write Speed Factor R2W_FACTOR                 :0x2
14:34:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:21: FILE_FORMAT_GRP                               :0x0
14:34:21: COPY flag                                     :0x1
14:34:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:21: File_Format                                   :0x0
14:34:21: CRC                                           :0x0
14:34:21: ####CSD Registe Values####  

14:34:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572300>, <py_sfcl.CommandDataDefinition object at 0x06666B70>) , Command count = 1336 ] 
14:34:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032E10>, <py_sfcl.CommandDataDefinition object at 0x066853F0>) , Command count = 1337 ] 
14:34:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:21: [DVTCommonLib]### Erase :Erase API Called
14:34:21: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x6010 with Blockcount:0x2001
14:34:21: [ EraseLba(0x6010, 0x2001) , Command count = 1338 ] 
14:34:21: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x6010 with Blockcount:0x2001 

14:34:21: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 24
14:34:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x8010 to EndLba:0x8018 with Increment Pattern
14:34:21: [ WrLbaNoData(0x8010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1339 ] 
14:34:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x8010 to EndLba:0x8018 with Increment Pattern 

14:34:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB420>, <py_sfcl.CommandDataDefinition object at 0x066664E0>) , Command count = 1340 ] 
14:34:21: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666E10>, <py_sfcl.CommandDataDefinition object at 0x066662D0>) , Command count = 1341 ] 
14:34:21: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:21: [DVTCommonLib]###  R1bCommandAbort called
14:34:21: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x9, False) , Command count = 1342 ] 
14:34:21: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:21: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:23: Host Frequency set to 25000 KHz
14:34:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:23: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x0665BED0>, 0x0, True) , Command count = 1343 ] 
14:34:23: [GO18_globalSetVolt]### Host voltage value is set.
14:34:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABED0>, 0x0, False) , Command count = 1344 ] 
14:34:23: [GO18_globalSetVolt]### Host voltage value is set.
14:34:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1345 ] 
14:34:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1346 ] 
14:34:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1347 ] 
14:34:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB240>, <py_sfcl.CommandDataDefinition object at 0x066AB480>) , Command count = 1348 ] 
14:34:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A060>, <py_sfcl.CommandDataDefinition object at 0x066666C0>) , Command count = 1349 ] 
14:34:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:24: [ SetCardRCA(0x1, 0xD555) , Command count = 1350 ] 
14:34:24: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:24: Host Frequency set to 25000 KHz
14:34:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:24: ####CSD Registe 2.0 Values####
14:34:24: CSD_STRUCTURE                                 :0x1
14:34:24: Reserv1                                       :0x0
14:34:24: Time Access 1 TAAC                            :0xe
14:34:24: Time Access 2 NSAC*100                        :0x0
14:34:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:24: Card Command Classess CCC                     :0x5b5
14:34:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:24: DSR(driver stage register)  DSR_IMP           :0x0
14:34:24: Reserv2                                       :0x0
14:34:24: Device Size C_SIZE                            :0xedc8
14:34:24: Reserv3                                       :0x0
14:34:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:24: Reserv4                                       :0x0
14:34:24: Write Speed Factor R2W_FACTOR                 :0x2
14:34:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:24: FILE_FORMAT_GRP                               :0x0
14:34:24: COPY flag                                     :0x1
14:34:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:24: File_Format                                   :0x0
14:34:24: CRC                                           :0x0
14:34:24: ####CSD Registe Values####  

14:34:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:24: [GetSCRRegisterEntry] Passed
14:34:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:24: Data_Status_After Erases          : 0
14:34:24: CPRM Security Support             : No Security
14:34:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:24: Spec. Version                     : Version 3.0X
14:34:24: Extended Security Support         : Extended_Security_Not_Supported
14:34:24: Command Support                   : COMMAND_SUPPORT
14:34:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF30>, <py_sfcl.CommandDataDefinition object at 0x066AB600>) , Command count = 1351 ] 
14:34:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A2A0>, <py_sfcl.CommandDataDefinition object at 0x0667A180>) , Command count = 1352 ] 
14:34:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:24: [ SetBusWidth(0x4) , Command count = 1353 ] 
14:34:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1354 ] 
14:34:24: Protected Area Size 0x28000
14:34:24: Bus Width           2
14:34:24: Secure Mode         0
14:34:24: Speed  Class        4
14:34:24: Perf Move           0
14:34:24: Au Size             9
14:34:24: Erase Size          15
14:34:24: Erase Timeout       1
14:34:24: Erase offset        1
14:34:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1355 ] 
14:34:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:24: Host Frequency set to 100000 KHz
14:34:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:24: ####CSD Registe 2.0 Values####
14:34:24: CSD_STRUCTURE                                 :0x1
14:34:24: Reserv1                                       :0x0
14:34:24: Time Access 1 TAAC                            :0xe
14:34:24: Time Access 2 NSAC*100                        :0x0
14:34:24: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:24: Card Command Classess CCC                     :0x5b5
14:34:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:24: DSR(driver stage register)  DSR_IMP           :0x0
14:34:24: Reserv2                                       :0x0
14:34:24: Device Size C_SIZE                            :0xedc8
14:34:24: Reserv3                                       :0x0
14:34:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:24: Reserv4                                       :0x0
14:34:24: Write Speed Factor R2W_FACTOR                 :0x2
14:34:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:24: FILE_FORMAT_GRP                               :0x0
14:34:24: COPY flag                                     :0x1
14:34:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:24: File_Format                                   :0x0
14:34:24: CRC                                           :0x0
14:34:24: ####CSD Registe Values####  

14:34:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB690>, <py_sfcl.CommandDataDefinition object at 0x066ABF90>) , Command count = 1356 ] 
14:34:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065721E0>, <py_sfcl.CommandDataDefinition object at 0x06685720>) , Command count = 1357 ] 
14:34:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:24: [DVTCommonLib]### Erase :Erase API Called
14:34:24: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x8010 with Blockcount:0x2001
14:34:24: [ EraseLba(0x8010, 0x2001) , Command count = 1358 ] 
14:34:24: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x8010 with Blockcount:0x2001 

14:34:24: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 23
14:34:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xA010 to EndLba:0xA018 with Increment Pattern
14:34:24: [ WrLbaNoData(0xA010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1359 ] 
14:34:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xA010 to EndLba:0xA018 with Increment Pattern 

14:34:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABDB0>, <py_sfcl.CommandDataDefinition object at 0x066AB4B0>) , Command count = 1360 ] 
14:34:24: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB7B0>, <py_sfcl.CommandDataDefinition object at 0x0667A150>) , Command count = 1361 ] 
14:34:24: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:24: [DVTCommonLib]###  R1bCommandAbort called
14:34:24: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x29, False) , Command count = 1362 ] 
14:34:24: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:24: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:26: Host Frequency set to 25000 KHz
14:34:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:26: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x06572330>, 0x0, True) , Command count = 1363 ] 
14:34:26: [GO18_globalSetVolt]### Host voltage value is set.
14:34:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A750>, 0x0, False) , Command count = 1364 ] 
14:34:26: [GO18_globalSetVolt]### Host voltage value is set.
14:34:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1365 ] 
14:34:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1366 ] 
14:34:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1367 ] 
14:34:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB2D0>, <py_sfcl.CommandDataDefinition object at 0x0667A300>) , Command count = 1368 ] 
14:34:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FDB0>, <py_sfcl.CommandDataDefinition object at 0x0667A720>) , Command count = 1369 ] 
14:34:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:26: [ SetCardRCA(0x1, 0xD555) , Command count = 1370 ] 
14:34:27: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:27: Host Frequency set to 25000 KHz
14:34:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:27: ####CSD Registe 2.0 Values####
14:34:27: CSD_STRUCTURE                                 :0x1
14:34:27: Reserv1                                       :0x0
14:34:27: Time Access 1 TAAC                            :0xe
14:34:27: Time Access 2 NSAC*100                        :0x0
14:34:27: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:27: Card Command Classess CCC                     :0x5b5
14:34:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:27: DSR(driver stage register)  DSR_IMP           :0x0
14:34:27: Reserv2                                       :0x0
14:34:27: Device Size C_SIZE                            :0xedc8
14:34:27: Reserv3                                       :0x0
14:34:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:27: Reserv4                                       :0x0
14:34:27: Write Speed Factor R2W_FACTOR                 :0x2
14:34:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:27: FILE_FORMAT_GRP                               :0x0
14:34:27: COPY flag                                     :0x1
14:34:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:27: File_Format                                   :0x0
14:34:27: CRC                                           :0x0
14:34:27: ####CSD Registe Values####  

14:34:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:27: [GetSCRRegisterEntry] Passed
14:34:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:27: Data_Status_After Erases          : 0
14:34:27: CPRM Security Support             : No Security
14:34:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:27: Spec. Version                     : Version 3.0X
14:34:27: Extended Security Support         : Extended_Security_Not_Supported
14:34:27: Command Support                   : COMMAND_SUPPORT
14:34:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A7E0>, <py_sfcl.CommandDataDefinition object at 0x0667A480>) , Command count = 1371 ] 
14:34:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AA80>, <py_sfcl.CommandDataDefinition object at 0x0667AAE0>) , Command count = 1372 ] 
14:34:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:27: [ SetBusWidth(0x4) , Command count = 1373 ] 
14:34:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1374 ] 
14:34:27: Protected Area Size 0x28000
14:34:27: Bus Width           2
14:34:27: Secure Mode         0
14:34:27: Speed  Class        4
14:34:27: Perf Move           0
14:34:27: Au Size             9
14:34:27: Erase Size          15
14:34:27: Erase Timeout       1
14:34:27: Erase offset        1
14:34:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1375 ] 
14:34:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:27: Host Frequency set to 100000 KHz
14:34:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:27: ####CSD Registe 2.0 Values####
14:34:27: CSD_STRUCTURE                                 :0x1
14:34:27: Reserv1                                       :0x0
14:34:27: Time Access 1 TAAC                            :0xe
14:34:27: Time Access 2 NSAC*100                        :0x0
14:34:27: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:27: Card Command Classess CCC                     :0x5b5
14:34:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:27: DSR(driver stage register)  DSR_IMP           :0x0
14:34:27: Reserv2                                       :0x0
14:34:27: Device Size C_SIZE                            :0xedc8
14:34:27: Reserv3                                       :0x0
14:34:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:27: Reserv4                                       :0x0
14:34:27: Write Speed Factor R2W_FACTOR                 :0x2
14:34:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:27: FILE_FORMAT_GRP                               :0x0
14:34:27: COPY flag                                     :0x1
14:34:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:27: File_Format                                   :0x0
14:34:27: CRC                                           :0x0
14:34:27: ####CSD Registe Values####  

14:34:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB9F0>, <py_sfcl.CommandDataDefinition object at 0x0667A030>) , Command count = 1376 ] 
14:34:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB5D0>, <py_sfcl.CommandDataDefinition object at 0x06685240>) , Command count = 1377 ] 
14:34:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:27: [DVTCommonLib]### Erase :Erase API Called
14:34:27: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xA010 with Blockcount:0x2001
14:34:27: [ EraseLba(0xA010, 0x2001) , Command count = 1378 ] 
14:34:27: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xA010 with Blockcount:0x2001 

14:34:27: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 22
14:34:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xC010 to EndLba:0xC018 with Increment Pattern
14:34:27: [ WrLbaNoData(0xC010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1379 ] 
14:34:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xC010 to EndLba:0xC018 with Increment Pattern 

14:34:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE10>, <py_sfcl.CommandDataDefinition object at 0x0667ABA0>) , Command count = 1380 ] 
14:34:27: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A420>, <py_sfcl.CommandDataDefinition object at 0x0667AD20>) , Command count = 1381 ] 
14:34:27: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:27: [DVTCommonLib]###  R1bCommandAbort called
14:34:27: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xF, False) , Command count = 1382 ] 
14:34:27: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:29: Host Frequency set to 25000 KHz
14:34:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667ACF0>, 0x0, True) , Command count = 1383 ] 
14:34:29: [GO18_globalSetVolt]### Host voltage value is set.
14:34:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AF30>, 0x0, False) , Command count = 1384 ] 
14:34:29: [GO18_globalSetVolt]### Host voltage value is set.
14:34:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1385 ] 
14:34:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1386 ] 
14:34:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1387 ] 
14:34:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A1E0>, <py_sfcl.CommandDataDefinition object at 0x0667A8A0>) , Command count = 1388 ] 
14:34:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C030>, <py_sfcl.CommandDataDefinition object at 0x0667ADE0>) , Command count = 1389 ] 
14:34:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:29: [ SetCardRCA(0x1, 0xD555) , Command count = 1390 ] 
14:34:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:29: Host Frequency set to 25000 KHz
14:34:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:29: ####CSD Registe 2.0 Values####
14:34:29: CSD_STRUCTURE                                 :0x1
14:34:29: Reserv1                                       :0x0
14:34:29: Time Access 1 TAAC                            :0xe
14:34:29: Time Access 2 NSAC*100                        :0x0
14:34:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:29: Card Command Classess CCC                     :0x5b5
14:34:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:29: DSR(driver stage register)  DSR_IMP           :0x0
14:34:29: Reserv2                                       :0x0
14:34:29: Device Size C_SIZE                            :0xedc8
14:34:29: Reserv3                                       :0x0
14:34:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:29: Reserv4                                       :0x0
14:34:29: Write Speed Factor R2W_FACTOR                 :0x2
14:34:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:29: FILE_FORMAT_GRP                               :0x0
14:34:29: COPY flag                                     :0x1
14:34:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:29: File_Format                                   :0x0
14:34:29: CRC                                           :0x0
14:34:29: ####CSD Registe Values####  

14:34:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:29: [GetSCRRegisterEntry] Passed
14:34:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:29: Data_Status_After Erases          : 0
14:34:29: CPRM Security Support             : No Security
14:34:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:29: Spec. Version                     : Version 3.0X
14:34:29: Extended Security Support         : Extended_Security_Not_Supported
14:34:29: Command Support                   : COMMAND_SUPPORT
14:34:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666750>, <py_sfcl.CommandDataDefinition object at 0x0667A1B0>) , Command count = 1391 ] 
14:34:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AA20>, <py_sfcl.CommandDataDefinition object at 0x0667A0C0>) , Command count = 1392 ] 
14:34:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:29: [ SetBusWidth(0x4) , Command count = 1393 ] 
14:34:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667AC90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1394 ] 
14:34:29: Protected Area Size 0x28000
14:34:29: Bus Width           2
14:34:29: Secure Mode         0
14:34:29: Speed  Class        4
14:34:29: Perf Move           0
14:34:29: Au Size             9
14:34:29: Erase Size          15
14:34:29: Erase Timeout       1
14:34:29: Erase offset        1
14:34:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1395 ] 
14:34:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:30: Host Frequency set to 100000 KHz
14:34:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:30: ####CSD Registe 2.0 Values####
14:34:30: CSD_STRUCTURE                                 :0x1
14:34:30: Reserv1                                       :0x0
14:34:30: Time Access 1 TAAC                            :0xe
14:34:30: Time Access 2 NSAC*100                        :0x0
14:34:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:30: Card Command Classess CCC                     :0x5b5
14:34:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:30: DSR(driver stage register)  DSR_IMP           :0x0
14:34:30: Reserv2                                       :0x0
14:34:30: Device Size C_SIZE                            :0xedc8
14:34:30: Reserv3                                       :0x0
14:34:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:30: Reserv4                                       :0x0
14:34:30: Write Speed Factor R2W_FACTOR                 :0x2
14:34:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:30: FILE_FORMAT_GRP                               :0x0
14:34:30: COPY flag                                     :0x1
14:34:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:30: File_Format                                   :0x0
14:34:30: CRC                                           :0x0
14:34:30: ####CSD Registe Values####  

14:34:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AB10>, <py_sfcl.CommandDataDefinition object at 0x0667A960>) , Command count = 1396 ] 
14:34:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066858D0>, <py_sfcl.CommandDataDefinition object at 0x06685D80>) , Command count = 1397 ] 
14:34:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:30: [DVTCommonLib]### Erase :Erase API Called
14:34:30: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xC010 with Blockcount:0x2001
14:34:30: [ EraseLba(0xC010, 0x2001) , Command count = 1398 ] 
14:34:30: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xC010 with Blockcount:0x2001 

14:34:30: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 21
14:34:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xE010 to EndLba:0xE018 with Increment Pattern
14:34:30: [ WrLbaNoData(0xE010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1399 ] 
14:34:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xE010 to EndLba:0xE018 with Increment Pattern 

14:34:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C3F0>, <py_sfcl.CommandDataDefinition object at 0x0667C390>) , Command count = 1400 ] 
14:34:30: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A450>, <py_sfcl.CommandDataDefinition object at 0x066858D0>) , Command count = 1401 ] 
14:34:30: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:30: [DVTCommonLib]###  R1bCommandAbort called
14:34:30: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x14, False) , Command count = 1402 ] 
14:34:30: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:32: Host Frequency set to 25000 KHz
14:34:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:32: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C4E0>, 0x0, True) , Command count = 1403 ] 
14:34:32: [GO18_globalSetVolt]### Host voltage value is set.
14:34:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C750>, 0x0, False) , Command count = 1404 ] 
14:34:32: [GO18_globalSetVolt]### Host voltage value is set.
14:34:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1405 ] 
14:34:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1406 ] 
14:34:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1407 ] 
14:34:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C2D0>, <py_sfcl.CommandDataDefinition object at 0x0667C7B0>) , Command count = 1408 ] 
14:34:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C9C0>, <py_sfcl.CommandDataDefinition object at 0x0667A870>) , Command count = 1409 ] 
14:34:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:32: [ SetCardRCA(0x1, 0xD555) , Command count = 1410 ] 
14:34:32: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:32: Host Frequency set to 25000 KHz
14:34:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:32: ####CSD Registe 2.0 Values####
14:34:32: CSD_STRUCTURE                                 :0x1
14:34:32: Reserv1                                       :0x0
14:34:32: Time Access 1 TAAC                            :0xe
14:34:32: Time Access 2 NSAC*100                        :0x0
14:34:32: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:32: Card Command Classess CCC                     :0x5b5
14:34:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:32: DSR(driver stage register)  DSR_IMP           :0x0
14:34:32: Reserv2                                       :0x0
14:34:32: Device Size C_SIZE                            :0xedc8
14:34:32: Reserv3                                       :0x0
14:34:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:32: Reserv4                                       :0x0
14:34:32: Write Speed Factor R2W_FACTOR                 :0x2
14:34:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:32: FILE_FORMAT_GRP                               :0x0
14:34:32: COPY flag                                     :0x1
14:34:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:32: File_Format                                   :0x0
14:34:32: CRC                                           :0x0
14:34:32: ####CSD Registe Values####  

14:34:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:32: [GetSCRRegisterEntry] Passed
14:34:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:32: Data_Status_After Erases          : 0
14:34:32: CPRM Security Support             : No Security
14:34:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:32: Spec. Version                     : Version 3.0X
14:34:32: Extended Security Support         : Extended_Security_Not_Supported
14:34:32: Command Support                   : COMMAND_SUPPORT
14:34:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C210>, <py_sfcl.CommandDataDefinition object at 0x0667C8A0>) , Command count = 1411 ] 
14:34:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CA80>, <py_sfcl.CommandDataDefinition object at 0x0667CAE0>) , Command count = 1412 ] 
14:34:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:32: [ SetBusWidth(0x4) , Command count = 1413 ] 
14:34:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1414 ] 
14:34:32: Protected Area Size 0x28000
14:34:32: Bus Width           2
14:34:32: Secure Mode         0
14:34:32: Speed  Class        4
14:34:32: Perf Move           0
14:34:32: Au Size             9
14:34:32: Erase Size          15
14:34:32: Erase Timeout       1
14:34:32: Erase offset        1
14:34:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1415 ] 
14:34:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:32: Host Frequency set to 100000 KHz
14:34:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:32: ####CSD Registe 2.0 Values####
14:34:32: CSD_STRUCTURE                                 :0x1
14:34:32: Reserv1                                       :0x0
14:34:32: Time Access 1 TAAC                            :0xe
14:34:32: Time Access 2 NSAC*100                        :0x0
14:34:32: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:32: Card Command Classess CCC                     :0x5b5
14:34:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:32: DSR(driver stage register)  DSR_IMP           :0x0
14:34:32: Reserv2                                       :0x0
14:34:32: Device Size C_SIZE                            :0xedc8
14:34:32: Reserv3                                       :0x0
14:34:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:32: Reserv4                                       :0x0
14:34:32: Write Speed Factor R2W_FACTOR                 :0x2
14:34:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:32: FILE_FORMAT_GRP                               :0x0
14:34:32: COPY flag                                     :0x1
14:34:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:32: File_Format                                   :0x0
14:34:32: CRC                                           :0x0
14:34:32: ####CSD Registe Values####  

14:34:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C330>, <py_sfcl.CommandDataDefinition object at 0x0667C1E0>) , Command count = 1416 ] 
14:34:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AFC0>, <py_sfcl.CommandDataDefinition object at 0x06685930>) , Command count = 1417 ] 
14:34:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:32: [DVTCommonLib]### Erase :Erase API Called
14:34:32: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xE010 with Blockcount:0x2001
14:34:32: [ EraseLba(0xE010, 0x2001) , Command count = 1418 ] 
14:34:32: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xE010 with Blockcount:0x2001 

14:34:32: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 20
14:34:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x10010 to EndLba:0x10018 with Increment Pattern
14:34:32: [ WrLbaNoData(0x10010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1419 ] 
14:34:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x10010 to EndLba:0x10018 with Increment Pattern 

14:34:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AED0>, <py_sfcl.CommandDataDefinition object at 0x0667CB70>) , Command count = 1420 ] 
14:34:32: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ACC0>, <py_sfcl.CommandDataDefinition object at 0x0667C780>) , Command count = 1421 ] 
14:34:32: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:32: [DVTCommonLib]###  R1bCommandAbort called
14:34:33: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1B, False) , Command count = 1422 ] 
14:34:33: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:33: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:35: Host Frequency set to 25000 KHz
14:34:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A660>, 0x0, True) , Command count = 1423 ] 
14:34:35: [GO18_globalSetVolt]### Host voltage value is set.
14:34:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CED0>, 0x0, False) , Command count = 1424 ] 
14:34:35: [GO18_globalSetVolt]### Host voltage value is set.
14:34:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1425 ] 
14:34:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1426 ] 
14:34:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1427 ] 
14:34:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CC90>, <py_sfcl.CommandDataDefinition object at 0x0667C270>) , Command count = 1428 ] 
14:34:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F060>, <py_sfcl.CommandDataDefinition object at 0x0667CF30>) , Command count = 1429 ] 
14:34:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:35: [ SetCardRCA(0x1, 0xD555) , Command count = 1430 ] 
14:34:35: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:35: Host Frequency set to 25000 KHz
14:34:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:35: ####CSD Registe 2.0 Values####
14:34:35: CSD_STRUCTURE                                 :0x1
14:34:35: Reserv1                                       :0x0
14:34:35: Time Access 1 TAAC                            :0xe
14:34:35: Time Access 2 NSAC*100                        :0x0
14:34:35: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:35: Card Command Classess CCC                     :0x5b5
14:34:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:35: DSR(driver stage register)  DSR_IMP           :0x0
14:34:35: Reserv2                                       :0x0
14:34:35: Device Size C_SIZE                            :0xedc8
14:34:35: Reserv3                                       :0x0
14:34:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:35: Reserv4                                       :0x0
14:34:35: Write Speed Factor R2W_FACTOR                 :0x2
14:34:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:35: FILE_FORMAT_GRP                               :0x0
14:34:35: COPY flag                                     :0x1
14:34:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:35: File_Format                                   :0x0
14:34:35: CRC                                           :0x0
14:34:35: ####CSD Registe Values####  

14:34:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:35: [GetSCRRegisterEntry] Passed
14:34:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:35: Data_Status_After Erases          : 0
14:34:35: CPRM Security Support             : No Security
14:34:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:35: Spec. Version                     : Version 3.0X
14:34:35: Extended Security Support         : Extended_Security_Not_Supported
14:34:35: Command Support                   : COMMAND_SUPPORT
14:34:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C6C0>, <py_sfcl.CommandDataDefinition object at 0x0667CF60>) , Command count = 1431 ] 
14:34:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F180>, <py_sfcl.CommandDataDefinition object at 0x0667CA20>) , Command count = 1432 ] 
14:34:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:35: [ SetBusWidth(0x4) , Command count = 1433 ] 
14:34:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667CC00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1434 ] 
14:34:35: Protected Area Size 0x28000
14:34:35: Bus Width           2
14:34:35: Secure Mode         0
14:34:35: Speed  Class        4
14:34:35: Perf Move           0
14:34:35: Au Size             9
14:34:35: Erase Size          15
14:34:35: Erase Timeout       1
14:34:35: Erase offset        1
14:34:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1435 ] 
14:34:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:35: Host Frequency set to 100000 KHz
14:34:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:35: ####CSD Registe 2.0 Values####
14:34:35: CSD_STRUCTURE                                 :0x1
14:34:35: Reserv1                                       :0x0
14:34:35: Time Access 1 TAAC                            :0xe
14:34:35: Time Access 2 NSAC*100                        :0x0
14:34:35: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:35: Card Command Classess CCC                     :0x5b5
14:34:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:35: DSR(driver stage register)  DSR_IMP           :0x0
14:34:35: Reserv2                                       :0x0
14:34:35: Device Size C_SIZE                            :0xedc8
14:34:35: Reserv3                                       :0x0
14:34:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:35: Reserv4                                       :0x0
14:34:35: Write Speed Factor R2W_FACTOR                 :0x2
14:34:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:35: FILE_FORMAT_GRP                               :0x0
14:34:35: COPY flag                                     :0x1
14:34:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:35: File_Format                                   :0x0
14:34:35: CRC                                           :0x0
14:34:35: ####CSD Registe Values####  

14:34:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C240>, <py_sfcl.CommandDataDefinition object at 0x0667C540>) , Command count = 1436 ] 
14:34:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ABD0>, <py_sfcl.CommandDataDefinition object at 0x0667C180>) , Command count = 1437 ] 
14:34:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:35: [DVTCommonLib]### Erase :Erase API Called
14:34:35: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x10010 with Blockcount:0x2001
14:34:35: [ EraseLba(0x10010, 0x2001) , Command count = 1438 ] 
14:34:35: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x10010 with Blockcount:0x2001 

14:34:35: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 19
14:34:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x12010 to EndLba:0x12018 with Increment Pattern
14:34:35: [ WrLbaNoData(0x12010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1439 ] 
14:34:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x12010 to EndLba:0x12018 with Increment Pattern 

14:34:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F540>, <py_sfcl.CommandDataDefinition object at 0x0667F2D0>) , Command count = 1440 ] 
14:34:35: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C4B0>, <py_sfcl.CommandDataDefinition object at 0x0667C900>) , Command count = 1441 ] 
14:34:35: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:35: [DVTCommonLib]###  R1bCommandAbort called
14:34:35: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1D, False) , Command count = 1442 ] 
14:34:35: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:35: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:37: Host Frequency set to 25000 KHz
14:34:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AEA0>, 0x0, True) , Command count = 1443 ] 
14:34:37: [GO18_globalSetVolt]### Host voltage value is set.
14:34:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F690>, 0x0, False) , Command count = 1444 ] 
14:34:37: [GO18_globalSetVolt]### Host voltage value is set.
14:34:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1445 ] 
14:34:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1446 ] 
14:34:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1447 ] 
14:34:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F450>, <py_sfcl.CommandDataDefinition object at 0x0667F780>) , Command count = 1448 ] 
14:34:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F900>, <py_sfcl.CommandDataDefinition object at 0x0667CE70>) , Command count = 1449 ] 
14:34:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:38: [ SetCardRCA(0x1, 0xD555) , Command count = 1450 ] 
14:34:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:38: Host Frequency set to 25000 KHz
14:34:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:38: ####CSD Registe 2.0 Values####
14:34:38: CSD_STRUCTURE                                 :0x1
14:34:38: Reserv1                                       :0x0
14:34:38: Time Access 1 TAAC                            :0xe
14:34:38: Time Access 2 NSAC*100                        :0x0
14:34:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:38: Card Command Classess CCC                     :0x5b5
14:34:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:38: DSR(driver stage register)  DSR_IMP           :0x0
14:34:38: Reserv2                                       :0x0
14:34:38: Device Size C_SIZE                            :0xedc8
14:34:38: Reserv3                                       :0x0
14:34:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:38: Reserv4                                       :0x0
14:34:38: Write Speed Factor R2W_FACTOR                 :0x2
14:34:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:38: FILE_FORMAT_GRP                               :0x0
14:34:38: COPY flag                                     :0x1
14:34:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:38: File_Format                                   :0x0
14:34:38: CRC                                           :0x0
14:34:38: ####CSD Registe Values####  

14:34:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:38: [GetSCRRegisterEntry] Passed
14:34:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:38: Data_Status_After Erases          : 0
14:34:38: CPRM Security Support             : No Security
14:34:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:38: Spec. Version                     : Version 3.0X
14:34:38: Extended Security Support         : Extended_Security_Not_Supported
14:34:38: Command Support                   : COMMAND_SUPPORT
14:34:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A9F0>, <py_sfcl.CommandDataDefinition object at 0x0667F6C0>) , Command count = 1451 ] 
14:34:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F9C0>, <py_sfcl.CommandDataDefinition object at 0x0667FA20>) , Command count = 1452 ] 
14:34:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:38: [ SetBusWidth(0x4) , Command count = 1453 ] 
14:34:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1454 ] 
14:34:38: Protected Area Size 0x28000
14:34:38: Bus Width           2
14:34:38: Secure Mode         0
14:34:38: Speed  Class        4
14:34:38: Perf Move           0
14:34:38: Au Size             9
14:34:38: Erase Size          15
14:34:38: Erase Timeout       1
14:34:38: Erase offset        1
14:34:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1455 ] 
14:34:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:38: Host Frequency set to 100000 KHz
14:34:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:38: ####CSD Registe 2.0 Values####
14:34:38: CSD_STRUCTURE                                 :0x1
14:34:38: Reserv1                                       :0x0
14:34:38: Time Access 1 TAAC                            :0xe
14:34:38: Time Access 2 NSAC*100                        :0x0
14:34:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:38: Card Command Classess CCC                     :0x5b5
14:34:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:38: DSR(driver stage register)  DSR_IMP           :0x0
14:34:38: Reserv2                                       :0x0
14:34:38: Device Size C_SIZE                            :0xedc8
14:34:38: Reserv3                                       :0x0
14:34:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:38: Reserv4                                       :0x0
14:34:38: Write Speed Factor R2W_FACTOR                 :0x2
14:34:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:38: FILE_FORMAT_GRP                               :0x0
14:34:38: COPY flag                                     :0x1
14:34:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:38: File_Format                                   :0x0
14:34:38: CRC                                           :0x0
14:34:38: ####CSD Registe Values####  

14:34:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F7E0>, <py_sfcl.CommandDataDefinition object at 0x0667FB10>) , Command count = 1456 ] 
14:34:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AE40>, <py_sfcl.CommandDataDefinition object at 0x0667C360>) , Command count = 1457 ] 
14:34:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:38: [DVTCommonLib]### Erase :Erase API Called
14:34:38: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x12010 with Blockcount:0x2001
14:34:38: [ EraseLba(0x12010, 0x2001) , Command count = 1458 ] 
14:34:38: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x12010 with Blockcount:0x2001 

14:34:38: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 18
14:34:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x14010 to EndLba:0x14018 with Increment Pattern
14:34:38: [ WrLbaNoData(0x14010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1459 ] 
14:34:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x14010 to EndLba:0x14018 with Increment Pattern 

14:34:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CE10>, <py_sfcl.CommandDataDefinition object at 0x0667FAB0>) , Command count = 1460 ] 
14:34:38: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CC30>, <py_sfcl.CommandDataDefinition object at 0x0667F090>) , Command count = 1461 ] 
14:34:38: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:38: [DVTCommonLib]###  R1bCommandAbort called
14:34:38: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xD, False) , Command count = 1462 ] 
14:34:38: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:38: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:40: Host Frequency set to 25000 KHz
14:34:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:40: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C660>, 0x0, True) , Command count = 1463 ] 
14:34:40: [GO18_globalSetVolt]### Host voltage value is set.
14:34:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FE10>, 0x0, False) , Command count = 1464 ] 
14:34:40: [GO18_globalSetVolt]### Host voltage value is set.
14:34:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1465 ] 
14:34:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1466 ] 
14:34:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1467 ] 
14:34:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FBD0>, <py_sfcl.CommandDataDefinition object at 0x0667F870>) , Command count = 1468 ] 
14:34:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FFC0>, <py_sfcl.CommandDataDefinition object at 0x0667F240>) , Command count = 1469 ] 
14:34:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1470 ] 
14:34:41: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:41: Host Frequency set to 25000 KHz
14:34:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:41: ####CSD Registe 2.0 Values####
14:34:41: CSD_STRUCTURE                                 :0x1
14:34:41: Reserv1                                       :0x0
14:34:41: Time Access 1 TAAC                            :0xe
14:34:41: Time Access 2 NSAC*100                        :0x0
14:34:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:41: Card Command Classess CCC                     :0x5b5
14:34:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:41: DSR(driver stage register)  DSR_IMP           :0x0
14:34:41: Reserv2                                       :0x0
14:34:41: Device Size C_SIZE                            :0xedc8
14:34:41: Reserv3                                       :0x0
14:34:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:41: Reserv4                                       :0x0
14:34:41: Write Speed Factor R2W_FACTOR                 :0x2
14:34:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:41: FILE_FORMAT_GRP                               :0x0
14:34:41: COPY flag                                     :0x1
14:34:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:41: File_Format                                   :0x0
14:34:41: CRC                                           :0x0
14:34:41: ####CSD Registe Values####  

14:34:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:41: [GetSCRRegisterEntry] Passed
14:34:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:41: Data_Status_After Erases          : 0
14:34:41: CPRM Security Support             : No Security
14:34:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:41: Spec. Version                     : Version 3.0X
14:34:41: Extended Security Support         : Extended_Security_Not_Supported
14:34:41: Command Support                   : COMMAND_SUPPORT
14:34:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F150>, <py_sfcl.CommandDataDefinition object at 0x0667F8A0>) , Command count = 1471 ] 
14:34:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F960>, <py_sfcl.CommandDataDefinition object at 0x0667F840>) , Command count = 1472 ] 
14:34:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:41: [ SetBusWidth(0x4) , Command count = 1473 ] 
14:34:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F7B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1474 ] 
14:34:41: Protected Area Size 0x28000
14:34:41: Bus Width           2
14:34:41: Secure Mode         0
14:34:41: Speed  Class        4
14:34:41: Perf Move           0
14:34:41: Au Size             9
14:34:41: Erase Size          15
14:34:41: Erase Timeout       1
14:34:41: Erase offset        1
14:34:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1475 ] 
14:34:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:41: Host Frequency set to 100000 KHz
14:34:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:41: ####CSD Registe 2.0 Values####
14:34:41: CSD_STRUCTURE                                 :0x1
14:34:41: Reserv1                                       :0x0
14:34:41: Time Access 1 TAAC                            :0xe
14:34:41: Time Access 2 NSAC*100                        :0x0
14:34:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:41: Card Command Classess CCC                     :0x5b5
14:34:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:41: DSR(driver stage register)  DSR_IMP           :0x0
14:34:41: Reserv2                                       :0x0
14:34:41: Device Size C_SIZE                            :0xedc8
14:34:41: Reserv3                                       :0x0
14:34:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:41: Reserv4                                       :0x0
14:34:41: Write Speed Factor R2W_FACTOR                 :0x2
14:34:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:41: FILE_FORMAT_GRP                               :0x0
14:34:41: COPY flag                                     :0x1
14:34:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:41: File_Format                                   :0x0
14:34:41: CRC                                           :0x0
14:34:41: ####CSD Registe Values####  

14:34:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FE40>, <py_sfcl.CommandDataDefinition object at 0x0667F480>) , Command count = 1476 ] 
14:34:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F720>, <py_sfcl.CommandDataDefinition object at 0x0667FBA0>) , Command count = 1477 ] 
14:34:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:41: [DVTCommonLib]### Erase :Erase API Called
14:34:41: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x14010 with Blockcount:0x2001
14:34:41: [ EraseLba(0x14010, 0x2001) , Command count = 1478 ] 
14:34:41: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x14010 with Blockcount:0x2001 

14:34:41: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 17
14:34:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x16010 to EndLba:0x16018 with Increment Pattern
14:34:41: [ WrLbaNoData(0x16010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1479 ] 
14:34:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x16010 to EndLba:0x16018 with Increment Pattern 

14:34:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683480>, <py_sfcl.CommandDataDefinition object at 0x066832D0>) , Command count = 1480 ] 
14:34:41: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F3F0>, <py_sfcl.CommandDataDefinition object at 0x0667F510>) , Command count = 1481 ] 
14:34:41: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:41: [DVTCommonLib]###  R1bCommandAbort called
14:34:41: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xB, False) , Command count = 1482 ] 
14:34:41: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:43: Host Frequency set to 25000 KHz
14:34:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CDE0>, 0x0, True) , Command count = 1483 ] 
14:34:43: [GO18_globalSetVolt]### Host voltage value is set.
14:34:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x066835D0>, 0x0, False) , Command count = 1484 ] 
14:34:43: [GO18_globalSetVolt]### Host voltage value is set.
14:34:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1485 ] 
14:34:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1486 ] 
14:34:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1487 ] 
14:34:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683630>, <py_sfcl.CommandDataDefinition object at 0x066836C0>) , Command count = 1488 ] 
14:34:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C870>, <py_sfcl.CommandDataDefinition object at 0x0667F9F0>) , Command count = 1489 ] 
14:34:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:43: [ SetCardRCA(0x1, 0xD555) , Command count = 1490 ] 
14:34:43: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:43: Host Frequency set to 25000 KHz
14:34:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:44: ####CSD Registe 2.0 Values####
14:34:44: CSD_STRUCTURE                                 :0x1
14:34:44: Reserv1                                       :0x0
14:34:44: Time Access 1 TAAC                            :0xe
14:34:44: Time Access 2 NSAC*100                        :0x0
14:34:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:44: Card Command Classess CCC                     :0x5b5
14:34:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:44: DSR(driver stage register)  DSR_IMP           :0x0
14:34:44: Reserv2                                       :0x0
14:34:44: Device Size C_SIZE                            :0xedc8
14:34:44: Reserv3                                       :0x0
14:34:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:44: Reserv4                                       :0x0
14:34:44: Write Speed Factor R2W_FACTOR                 :0x2
14:34:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:44: FILE_FORMAT_GRP                               :0x0
14:34:44: COPY flag                                     :0x1
14:34:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:44: File_Format                                   :0x0
14:34:44: CRC                                           :0x0
14:34:44: ####CSD Registe Values####  

14:34:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:44: [GetSCRRegisterEntry] Passed
14:34:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:44: Data_Status_After Erases          : 0
14:34:44: CPRM Security Support             : No Security
14:34:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:44: Spec. Version                     : Version 3.0X
14:34:44: Extended Security Support         : Extended_Security_Not_Supported
14:34:44: Command Support                   : COMMAND_SUPPORT
14:34:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683660>, <py_sfcl.CommandDataDefinition object at 0x0667F570>) , Command count = 1491 ] 
14:34:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683900>, <py_sfcl.CommandDataDefinition object at 0x06683960>) , Command count = 1492 ] 
14:34:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:44: [ SetBusWidth(0x4) , Command count = 1493 ] 
14:34:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066833C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1494 ] 
14:34:44: Protected Area Size 0x28000
14:34:44: Bus Width           2
14:34:44: Secure Mode         0
14:34:44: Speed  Class        4
14:34:44: Perf Move           0
14:34:44: Au Size             9
14:34:44: Erase Size          15
14:34:44: Erase Timeout       1
14:34:44: Erase offset        1
14:34:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1495 ] 
14:34:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:44: Host Frequency set to 100000 KHz
14:34:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:44: ####CSD Registe 2.0 Values####
14:34:44: CSD_STRUCTURE                                 :0x1
14:34:44: Reserv1                                       :0x0
14:34:44: Time Access 1 TAAC                            :0xe
14:34:44: Time Access 2 NSAC*100                        :0x0
14:34:44: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:44: Card Command Classess CCC                     :0x5b5
14:34:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:44: DSR(driver stage register)  DSR_IMP           :0x0
14:34:44: Reserv2                                       :0x0
14:34:44: Device Size C_SIZE                            :0xedc8
14:34:44: Reserv3                                       :0x0
14:34:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:44: Reserv4                                       :0x0
14:34:44: Write Speed Factor R2W_FACTOR                 :0x2
14:34:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:44: FILE_FORMAT_GRP                               :0x0
14:34:44: COPY flag                                     :0x1
14:34:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:44: File_Format                                   :0x0
14:34:44: CRC                                           :0x0
14:34:44: ####CSD Registe Values####  

14:34:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683180>, <py_sfcl.CommandDataDefinition object at 0x06683A50>) , Command count = 1496 ] 
14:34:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F1B0>, <py_sfcl.CommandDataDefinition object at 0x06685DB0>) , Command count = 1497 ] 
14:34:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:44: [DVTCommonLib]### Erase :Erase API Called
14:34:44: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x16010 with Blockcount:0x2001
14:34:44: [ EraseLba(0x16010, 0x2001) , Command count = 1498 ] 
14:34:44: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x16010 with Blockcount:0x2001 

14:34:44: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 16
14:34:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x18010 to EndLba:0x18018 with Increment Pattern
14:34:44: [ WrLbaNoData(0x18010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1499 ] 
14:34:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x18010 to EndLba:0x18018 with Increment Pattern 

14:34:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FD50>, <py_sfcl.CommandDataDefinition object at 0x066839F0>) , Command count = 1500 ] 
14:34:44: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FB70>, <py_sfcl.CommandDataDefinition object at 0x066831E0>) , Command count = 1501 ] 
14:34:44: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:44: [DVTCommonLib]###  R1bCommandAbort called
14:34:44: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x9, False) , Command count = 1502 ] 
14:34:44: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:44: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:46: Host Frequency set to 25000 KHz
14:34:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:46: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F5A0>, 0x0, True) , Command count = 1503 ] 
14:34:46: [GO18_globalSetVolt]### Host voltage value is set.
14:34:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683D50>, 0x0, False) , Command count = 1504 ] 
14:34:46: [GO18_globalSetVolt]### Host voltage value is set.
14:34:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1505 ] 
14:34:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1506 ] 
14:34:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1507 ] 
14:34:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683810>, <py_sfcl.CommandDataDefinition object at 0x066837B0>) , Command count = 1508 ] 
14:34:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683E70>, <py_sfcl.CommandDataDefinition object at 0x06683E40>) , Command count = 1509 ] 
14:34:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:46: [ SetCardRCA(0x1, 0xD555) , Command count = 1510 ] 
14:34:46: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:46: Host Frequency set to 25000 KHz
14:34:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:46: ####CSD Registe 2.0 Values####
14:34:46: CSD_STRUCTURE                                 :0x1
14:34:46: Reserv1                                       :0x0
14:34:46: Time Access 1 TAAC                            :0xe
14:34:46: Time Access 2 NSAC*100                        :0x0
14:34:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:46: Card Command Classess CCC                     :0x5b5
14:34:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:46: DSR(driver stage register)  DSR_IMP           :0x0
14:34:46: Reserv2                                       :0x0
14:34:46: Device Size C_SIZE                            :0xedc8
14:34:46: Reserv3                                       :0x0
14:34:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:46: Reserv4                                       :0x0
14:34:46: Write Speed Factor R2W_FACTOR                 :0x2
14:34:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:46: FILE_FORMAT_GRP                               :0x0
14:34:46: COPY flag                                     :0x1
14:34:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:46: File_Format                                   :0x0
14:34:46: CRC                                           :0x0
14:34:46: ####CSD Registe Values####  

14:34:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:46: [GetSCRRegisterEntry] Passed
14:34:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:46: Data_Status_After Erases          : 0
14:34:46: CPRM Security Support             : No Security
14:34:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:46: Spec. Version                     : Version 3.0X
14:34:46: Extended Security Support         : Extended_Security_Not_Supported
14:34:46: Command Support                   : COMMAND_SUPPORT
14:34:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683540>, <py_sfcl.CommandDataDefinition object at 0x066837E0>) , Command count = 1511 ] 
14:34:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066838A0>, <py_sfcl.CommandDataDefinition object at 0x06683F00>) , Command count = 1512 ] 
14:34:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:46: [ SetBusWidth(0x4) , Command count = 1513 ] 
14:34:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683B40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1514 ] 
14:34:46: Protected Area Size 0x28000
14:34:46: Bus Width           2
14:34:46: Secure Mode         0
14:34:46: Speed  Class        4
14:34:46: Perf Move           0
14:34:46: Au Size             9
14:34:46: Erase Size          15
14:34:46: Erase Timeout       1
14:34:46: Erase offset        1
14:34:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1515 ] 
14:34:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:46: Host Frequency set to 100000 KHz
14:34:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:46: ####CSD Registe 2.0 Values####
14:34:46: CSD_STRUCTURE                                 :0x1
14:34:46: Reserv1                                       :0x0
14:34:46: Time Access 1 TAAC                            :0xe
14:34:46: Time Access 2 NSAC*100                        :0x0
14:34:46: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:46: Card Command Classess CCC                     :0x5b5
14:34:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:46: DSR(driver stage register)  DSR_IMP           :0x0
14:34:46: Reserv2                                       :0x0
14:34:46: Device Size C_SIZE                            :0xedc8
14:34:46: Reserv3                                       :0x0
14:34:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:46: Reserv4                                       :0x0
14:34:46: Write Speed Factor R2W_FACTOR                 :0x2
14:34:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:46: FILE_FORMAT_GRP                               :0x0
14:34:46: COPY flag                                     :0x1
14:34:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:46: File_Format                                   :0x0
14:34:46: CRC                                           :0x0
14:34:46: ####CSD Registe Values####  

14:34:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683EA0>, <py_sfcl.CommandDataDefinition object at 0x066836F0>) , Command count = 1516 ] 
14:34:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683840>, <py_sfcl.CommandDataDefinition object at 0x066831B0>) , Command count = 1517 ] 
14:34:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:46: [DVTCommonLib]### Erase :Erase API Called
14:34:46: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x18010 with Blockcount:0x2001
14:34:46: [ EraseLba(0x18010, 0x2001) , Command count = 1518 ] 
14:34:46: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x18010 with Blockcount:0x2001 

14:34:46: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 15
14:34:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1A010 to EndLba:0x1A018 with Increment Pattern
14:34:46: [ WrLbaNoData(0x1A010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1519 ] 
14:34:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1A010 to EndLba:0x1A018 with Increment Pattern 

14:34:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E42840>, <py_sfcl.CommandDataDefinition object at 0x05FC6F90>) , Command count = 1520 ] 
14:34:46: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683330>, <py_sfcl.CommandDataDefinition object at 0x06683450>) , Command count = 1521 ] 
14:34:46: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:46: [DVTCommonLib]###  R1bCommandAbort called
14:34:47: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x5, False) , Command count = 1522 ] 
14:34:47: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:49: Host Frequency set to 25000 KHz
14:34:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FE8C60>, 0x0, True) , Command count = 1523 ] 
14:34:49: [GO18_globalSetVolt]### Host voltage value is set.
14:34:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FE8990>, 0x0, False) , Command count = 1524 ] 
14:34:49: [GO18_globalSetVolt]### Host voltage value is set.
14:34:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1525 ] 
14:34:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1526 ] 
14:34:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1527 ] 
14:34:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FED1B0>, <py_sfcl.CommandDataDefinition object at 0x06683870>) , Command count = 1528 ] 
14:34:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8F00>, <py_sfcl.CommandDataDefinition object at 0x06683030>) , Command count = 1529 ] 
14:34:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:49: [ SetCardRCA(0x1, 0xD555) , Command count = 1530 ] 
14:34:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:49: Host Frequency set to 25000 KHz
14:34:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:49: ####CSD Registe 2.0 Values####
14:34:49: CSD_STRUCTURE                                 :0x1
14:34:49: Reserv1                                       :0x0
14:34:49: Time Access 1 TAAC                            :0xe
14:34:49: Time Access 2 NSAC*100                        :0x0
14:34:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:49: Card Command Classess CCC                     :0x5b5
14:34:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:49: DSR(driver stage register)  DSR_IMP           :0x0
14:34:49: Reserv2                                       :0x0
14:34:49: Device Size C_SIZE                            :0xedc8
14:34:49: Reserv3                                       :0x0
14:34:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:49: Reserv4                                       :0x0
14:34:49: Write Speed Factor R2W_FACTOR                 :0x2
14:34:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:49: FILE_FORMAT_GRP                               :0x0
14:34:49: COPY flag                                     :0x1
14:34:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:49: File_Format                                   :0x0
14:34:49: CRC                                           :0x0
14:34:49: ####CSD Registe Values####  

14:34:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:49: [GetSCRRegisterEntry] Passed
14:34:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:49: Data_Status_After Erases          : 0
14:34:49: CPRM Security Support             : No Security
14:34:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:49: Spec. Version                     : Version 3.0X
14:34:49: Extended Security Support         : Extended_Security_Not_Supported
14:34:49: Command Support                   : COMMAND_SUPPORT
14:34:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FF30>, <py_sfcl.CommandDataDefinition object at 0x066856C0>) , Command count = 1531 ] 
14:34:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC01E0>, <py_sfcl.CommandDataDefinition object at 0x05FC6360>) , Command count = 1532 ] 
14:34:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:49: [ SetBusWidth(0x4) , Command count = 1533 ] 
14:34:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685900>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1534 ] 
14:34:49: Protected Area Size 0x28000
14:34:49: Bus Width           2
14:34:49: Secure Mode         0
14:34:49: Speed  Class        4
14:34:49: Perf Move           0
14:34:49: Au Size             9
14:34:49: Erase Size          15
14:34:49: Erase Timeout       1
14:34:49: Erase offset        1
14:34:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1535 ] 
14:34:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:49: Host Frequency set to 100000 KHz
14:34:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:49: ####CSD Registe 2.0 Values####
14:34:49: CSD_STRUCTURE                                 :0x1
14:34:49: Reserv1                                       :0x0
14:34:49: Time Access 1 TAAC                            :0xe
14:34:49: Time Access 2 NSAC*100                        :0x0
14:34:49: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:49: Card Command Classess CCC                     :0x5b5
14:34:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:49: DSR(driver stage register)  DSR_IMP           :0x0
14:34:49: Reserv2                                       :0x0
14:34:49: Device Size C_SIZE                            :0xedc8
14:34:49: Reserv3                                       :0x0
14:34:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:49: Reserv4                                       :0x0
14:34:49: Write Speed Factor R2W_FACTOR                 :0x2
14:34:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:49: FILE_FORMAT_GRP                               :0x0
14:34:49: COPY flag                                     :0x1
14:34:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:49: File_Format                                   :0x0
14:34:49: CRC                                           :0x0
14:34:49: ####CSD Registe Values####  

14:34:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683C30>, <py_sfcl.CommandDataDefinition object at 0x06685390>) , Command count = 1536 ] 
14:34:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066854E0>, <py_sfcl.CommandDataDefinition object at 0x06685060>) , Command count = 1537 ] 
14:34:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:49: [DVTCommonLib]### Erase :Erase API Called
14:34:49: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1A010 with Blockcount:0x2001
14:34:49: [ EraseLba(0x1A010, 0x2001) , Command count = 1538 ] 
14:34:49: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1A010 with Blockcount:0x2001 

14:34:49: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 14
14:34:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1C010 to EndLba:0x1C018 with Increment Pattern
14:34:49: [ WrLbaNoData(0x1C010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1539 ] 
14:34:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1C010 to EndLba:0x1C018 with Increment Pattern 

14:34:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683C90>, <py_sfcl.CommandDataDefinition object at 0x060327B0>) , Command count = 1540 ] 
14:34:49: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683AB0>, <py_sfcl.CommandDataDefinition object at 0x066850F0>) , Command count = 1541 ] 
14:34:49: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:49: [DVTCommonLib]###  R1bCommandAbort called
14:34:49: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2A, False) , Command count = 1542 ] 
14:34:49: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:49: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:51: Host Frequency set to 25000 KHz
14:34:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x066834E0>, 0x0, True) , Command count = 1543 ] 
14:34:51: [GO18_globalSetVolt]### Host voltage value is set.
14:34:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FC0690>, 0x0, False) , Command count = 1544 ] 
14:34:52: [GO18_globalSetVolt]### Host voltage value is set.
14:34:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1545 ] 
14:34:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1546 ] 
14:34:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1547 ] 
14:34:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683FC0>, <py_sfcl.CommandDataDefinition object at 0x06685030>) , Command count = 1548 ] 
14:34:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032BA0>, <py_sfcl.CommandDataDefinition object at 0x06685A20>) , Command count = 1549 ] 
14:34:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:52: [ SetCardRCA(0x1, 0xD555) , Command count = 1550 ] 
14:34:52: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:52: Host Frequency set to 25000 KHz
14:34:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:52: ####CSD Registe 2.0 Values####
14:34:52: CSD_STRUCTURE                                 :0x1
14:34:52: Reserv1                                       :0x0
14:34:52: Time Access 1 TAAC                            :0xe
14:34:52: Time Access 2 NSAC*100                        :0x0
14:34:52: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:52: Card Command Classess CCC                     :0x5b5
14:34:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:52: DSR(driver stage register)  DSR_IMP           :0x0
14:34:52: Reserv2                                       :0x0
14:34:52: Device Size C_SIZE                            :0xedc8
14:34:52: Reserv3                                       :0x0
14:34:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:52: Reserv4                                       :0x0
14:34:52: Write Speed Factor R2W_FACTOR                 :0x2
14:34:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:52: FILE_FORMAT_GRP                               :0x0
14:34:52: COPY flag                                     :0x1
14:34:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:52: File_Format                                   :0x0
14:34:52: CRC                                           :0x0
14:34:52: ####CSD Registe Values####  

14:34:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:52: [GetSCRRegisterEntry] Passed
14:34:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:52: Data_Status_After Erases          : 0
14:34:52: CPRM Security Support             : No Security
14:34:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:52: Spec. Version                     : Version 3.0X
14:34:52: Extended Security Support         : Extended_Security_Not_Supported
14:34:52: Command Support                   : COMMAND_SUPPORT
14:34:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683780>, <py_sfcl.CommandDataDefinition object at 0x06685090>) , Command count = 1551 ] 
14:34:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDAE40>, <py_sfcl.CommandDataDefinition object at 0x066859C0>) , Command count = 1552 ] 
14:34:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:52: [ SetBusWidth(0x4) , Command count = 1553 ] 
14:34:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685AB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1554 ] 
14:34:52: Protected Area Size 0x28000
14:34:52: Bus Width           2
14:34:52: Secure Mode         0
14:34:52: Speed  Class        4
14:34:52: Perf Move           0
14:34:52: Au Size             9
14:34:52: Erase Size          15
14:34:52: Erase Timeout       1
14:34:52: Erase offset        1
14:34:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1555 ] 
14:34:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:52: Host Frequency set to 100000 KHz
14:34:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:52: ####CSD Registe 2.0 Values####
14:34:52: CSD_STRUCTURE                                 :0x1
14:34:52: Reserv1                                       :0x0
14:34:52: Time Access 1 TAAC                            :0xe
14:34:52: Time Access 2 NSAC*100                        :0x0
14:34:52: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:52: Card Command Classess CCC                     :0x5b5
14:34:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:52: DSR(driver stage register)  DSR_IMP           :0x0
14:34:52: Reserv2                                       :0x0
14:34:52: Device Size C_SIZE                            :0xedc8
14:34:52: Reserv3                                       :0x0
14:34:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:52: Reserv4                                       :0x0
14:34:52: Write Speed Factor R2W_FACTOR                 :0x2
14:34:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:52: FILE_FORMAT_GRP                               :0x0
14:34:52: COPY flag                                     :0x1
14:34:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:52: File_Format                                   :0x0
14:34:52: CRC                                           :0x0
14:34:52: ####CSD Registe Values####  

14:34:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8FC0>, <py_sfcl.CommandDataDefinition object at 0x066853C0>) , Command count = 1556 ] 
14:34:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066858A0>, <py_sfcl.CommandDataDefinition object at 0x06685C60>) , Command count = 1557 ] 
14:34:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:52: [DVTCommonLib]### Erase :Erase API Called
14:34:52: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1C010 with Blockcount:0x2001
14:34:52: [ EraseLba(0x1C010, 0x2001) , Command count = 1558 ] 
14:34:52: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1C010 with Blockcount:0x2001 

14:34:52: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 13
14:34:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1E010 to EndLba:0x1E018 with Increment Pattern
14:34:52: [ WrLbaNoData(0x1E010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1559 ] 
14:34:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1E010 to EndLba:0x1E018 with Increment Pattern 

14:34:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEDAE0>, <py_sfcl.CommandDataDefinition object at 0x06685AE0>) , Command count = 1560 ] 
14:34:52: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8F90>, <py_sfcl.CommandDataDefinition object at 0x06685180>) , Command count = 1561 ] 
14:34:52: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:52: [DVTCommonLib]###  R1bCommandAbort called
14:34:52: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x16, False) , Command count = 1562 ] 
14:34:52: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:52: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:54: Host Frequency set to 25000 KHz
14:34:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:54: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666C60>, 0x0, True) , Command count = 1563 ] 
14:34:54: [GO18_globalSetVolt]### Host voltage value is set.
14:34:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666630>, 0x0, False) , Command count = 1564 ] 
14:34:54: [GO18_globalSetVolt]### Host voltage value is set.
14:34:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1565 ] 
14:34:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1566 ] 
14:34:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1567 ] 
14:34:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDAC90>, <py_sfcl.CommandDataDefinition object at 0x06666D50>) , Command count = 1568 ] 
14:34:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066667E0>, <py_sfcl.CommandDataDefinition object at 0x06685960>) , Command count = 1569 ] 
14:34:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1570 ] 
14:34:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:55: Host Frequency set to 25000 KHz
14:34:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:55: ####CSD Registe 2.0 Values####
14:34:55: CSD_STRUCTURE                                 :0x1
14:34:55: Reserv1                                       :0x0
14:34:55: Time Access 1 TAAC                            :0xe
14:34:55: Time Access 2 NSAC*100                        :0x0
14:34:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:55: Card Command Classess CCC                     :0x5b5
14:34:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:55: DSR(driver stage register)  DSR_IMP           :0x0
14:34:55: Reserv2                                       :0x0
14:34:55: Device Size C_SIZE                            :0xedc8
14:34:55: Reserv3                                       :0x0
14:34:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:55: Reserv4                                       :0x0
14:34:55: Write Speed Factor R2W_FACTOR                 :0x2
14:34:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:55: FILE_FORMAT_GRP                               :0x0
14:34:55: COPY flag                                     :0x1
14:34:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:55: File_Format                                   :0x0
14:34:55: CRC                                           :0x0
14:34:55: ####CSD Registe Values####  

14:34:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:55: [GetSCRRegisterEntry] Passed
14:34:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:55: Data_Status_After Erases          : 0
14:34:55: CPRM Security Support             : No Security
14:34:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:55: Spec. Version                     : Version 3.0X
14:34:55: Extended Security Support         : Extended_Security_Not_Supported
14:34:55: Command Support                   : COMMAND_SUPPORT
14:34:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683F30>, <py_sfcl.CommandDataDefinition object at 0x066666F0>) , Command count = 1571 ] 
14:34:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065724B0>, <py_sfcl.CommandDataDefinition object at 0x06666720>) , Command count = 1572 ] 
14:34:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:55: [ SetBusWidth(0x4) , Command count = 1573 ] 
14:34:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06666990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1574 ] 
14:34:55: Protected Area Size 0x28000
14:34:55: Bus Width           2
14:34:55: Secure Mode         0
14:34:55: Speed  Class        4
14:34:55: Perf Move           0
14:34:55: Au Size             9
14:34:55: Erase Size          15
14:34:55: Erase Timeout       1
14:34:55: Erase offset        1
14:34:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1575 ] 
14:34:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:55: Host Frequency set to 100000 KHz
14:34:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:55: ####CSD Registe 2.0 Values####
14:34:55: CSD_STRUCTURE                                 :0x1
14:34:55: Reserv1                                       :0x0
14:34:55: Time Access 1 TAAC                            :0xe
14:34:55: Time Access 2 NSAC*100                        :0x0
14:34:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:55: Card Command Classess CCC                     :0x5b5
14:34:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:55: DSR(driver stage register)  DSR_IMP           :0x0
14:34:55: Reserv2                                       :0x0
14:34:55: Device Size C_SIZE                            :0xedc8
14:34:55: Reserv3                                       :0x0
14:34:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:55: Reserv4                                       :0x0
14:34:55: Write Speed Factor R2W_FACTOR                 :0x2
14:34:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:55: FILE_FORMAT_GRP                               :0x0
14:34:55: COPY flag                                     :0x1
14:34:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:55: File_Format                                   :0x0
14:34:55: CRC                                           :0x0
14:34:55: ####CSD Registe Values####  

14:34:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060329F0>, <py_sfcl.CommandDataDefinition object at 0x06685120>) , Command count = 1576 ] 
14:34:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06685840>, <py_sfcl.CommandDataDefinition object at 0x06685540>) , Command count = 1577 ] 
14:34:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:55: [DVTCommonLib]### Erase :Erase API Called
14:34:55: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1E010 with Blockcount:0x2001
14:34:55: [ EraseLba(0x1E010, 0x2001) , Command count = 1578 ] 
14:34:55: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1E010 with Blockcount:0x2001 

14:34:55: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 12
14:34:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x20010 to EndLba:0x20018 with Increment Pattern
14:34:55: [ WrLbaNoData(0x20010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1579 ] 
14:34:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x20010 to EndLba:0x20018 with Increment Pattern 

14:34:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032AB0>, <py_sfcl.CommandDataDefinition object at 0x066AB120>) , Command count = 1580 ] 
14:34:55: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032810>, <py_sfcl.CommandDataDefinition object at 0x06685150>) , Command count = 1581 ] 
14:34:55: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:55: [DVTCommonLib]###  R1bCommandAbort called
14:34:55: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x9, False) , Command count = 1582 ] 
14:34:55: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:57: Host Frequency set to 25000 KHz
14:34:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666B10>, 0x0, True) , Command count = 1583 ] 
14:34:57: [GO18_globalSetVolt]### Host voltage value is set.
14:34:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666360>, 0x0, False) , Command count = 1584 ] 
14:34:57: [GO18_globalSetVolt]### Host voltage value is set.
14:34:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1585 ] 
14:34:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1586 ] 
14:34:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1587 ] 
14:34:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572300>, <py_sfcl.CommandDataDefinition object at 0x066AB210>) , Command count = 1588 ] 
14:34:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB5A0>, <py_sfcl.CommandDataDefinition object at 0x06685150>) , Command count = 1589 ] 
14:34:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:57: [ SetCardRCA(0x1, 0xD555) , Command count = 1590 ] 
14:34:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:58: Host Frequency set to 25000 KHz
14:34:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:58: ####CSD Registe 2.0 Values####
14:34:58: CSD_STRUCTURE                                 :0x1
14:34:58: Reserv1                                       :0x0
14:34:58: Time Access 1 TAAC                            :0xe
14:34:58: Time Access 2 NSAC*100                        :0x0
14:34:58: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:58: Card Command Classess CCC                     :0x5b5
14:34:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:58: DSR(driver stage register)  DSR_IMP           :0x0
14:34:58: Reserv2                                       :0x0
14:34:58: Device Size C_SIZE                            :0xedc8
14:34:58: Reserv3                                       :0x0
14:34:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:58: Reserv4                                       :0x0
14:34:58: Write Speed Factor R2W_FACTOR                 :0x2
14:34:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:58: FILE_FORMAT_GRP                               :0x0
14:34:58: COPY flag                                     :0x1
14:34:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:58: File_Format                                   :0x0
14:34:58: CRC                                           :0x0
14:34:58: ####CSD Registe Values####  

14:34:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:58: [GetSCRRegisterEntry] Passed
14:34:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:58: Data_Status_After Erases          : 0
14:34:58: CPRM Security Support             : No Security
14:34:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:58: Spec. Version                     : Version 3.0X
14:34:58: Extended Security Support         : Extended_Security_Not_Supported
14:34:58: Command Support                   : COMMAND_SUPPORT
14:34:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032E10>, <py_sfcl.CommandDataDefinition object at 0x06666660>) , Command count = 1591 ] 
14:34:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB420>, <py_sfcl.CommandDataDefinition object at 0x066664E0>) , Command count = 1592 ] 
14:34:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:58: [ SetBusWidth(0x4) , Command count = 1593 ] 
14:34:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066AB360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1594 ] 
14:34:58: Protected Area Size 0x28000
14:34:58: Bus Width           2
14:34:58: Secure Mode         0
14:34:58: Speed  Class        4
14:34:58: Perf Move           0
14:34:58: Au Size             9
14:34:58: Erase Size          15
14:34:58: Erase Timeout       1
14:34:58: Erase offset        1
14:34:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1595 ] 
14:34:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:58: Host Frequency set to 100000 KHz
14:34:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:58: ####CSD Registe 2.0 Values####
14:34:58: CSD_STRUCTURE                                 :0x1
14:34:58: Reserv1                                       :0x0
14:34:58: Time Access 1 TAAC                            :0xe
14:34:58: Time Access 2 NSAC*100                        :0x0
14:34:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:58: Card Command Classess CCC                     :0x5b5
14:34:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:58: DSR(driver stage register)  DSR_IMP           :0x0
14:34:58: Reserv2                                       :0x0
14:34:58: Device Size C_SIZE                            :0xedc8
14:34:58: Reserv3                                       :0x0
14:34:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:58: Reserv4                                       :0x0
14:34:58: Write Speed Factor R2W_FACTOR                 :0x2
14:34:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:58: FILE_FORMAT_GRP                               :0x0
14:34:58: COPY flag                                     :0x1
14:34:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:58: File_Format                                   :0x0
14:34:58: CRC                                           :0x0
14:34:58: ####CSD Registe Values####  

14:34:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BED0>, <py_sfcl.CommandDataDefinition object at 0x066AB180>) , Command count = 1596 ] 
14:34:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666D80>, <py_sfcl.CommandDataDefinition object at 0x06685B40>) , Command count = 1597 ] 
14:34:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:58: [DVTCommonLib]### Erase :Erase API Called
14:34:58: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x20010 with Blockcount:0x2001
14:34:58: [ EraseLba(0x20010, 0x2001) , Command count = 1598 ] 
14:34:58: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x20010 with Blockcount:0x2001 

14:34:58: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 11
14:34:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x22010 to EndLba:0x22018 with Increment Pattern
14:34:58: [ WrLbaNoData(0x22010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1599 ] 
14:34:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x22010 to EndLba:0x22018 with Increment Pattern 

14:34:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB240>, <py_sfcl.CommandDataDefinition object at 0x066AB480>) , Command count = 1600 ] 
14:34:58: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:34:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB270>, <py_sfcl.CommandDataDefinition object at 0x066662D0>) , Command count = 1601 ] 
14:34:58: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:34:58: [DVTCommonLib]###  R1bCommandAbort called
14:34:58: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x30, False) , Command count = 1602 ] 
14:34:58: [DVTCommonLib]###  R1bCommandAbort Completed 

14:34:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:00: Host Frequency set to 25000 KHz
14:35:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABF30>, 0x0, True) , Command count = 1603 ] 
14:35:00: [GO18_globalSetVolt]### Host voltage value is set.
14:35:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666090>, 0x0, False) , Command count = 1604 ] 
14:35:00: [GO18_globalSetVolt]### Host voltage value is set.
14:35:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1605 ] 
14:35:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1606 ] 
14:35:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1607 ] 
14:35:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB690>, <py_sfcl.CommandDataDefinition object at 0x066ABF90>) , Command count = 1608 ] 
14:35:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A5A0>, <py_sfcl.CommandDataDefinition object at 0x066662D0>) , Command count = 1609 ] 
14:35:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:00: [ SetCardRCA(0x1, 0xD555) , Command count = 1610 ] 
14:35:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:00: Host Frequency set to 25000 KHz
14:35:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:00: ####CSD Registe 2.0 Values####
14:35:00: CSD_STRUCTURE                                 :0x1
14:35:00: Reserv1                                       :0x0
14:35:00: Time Access 1 TAAC                            :0xe
14:35:00: Time Access 2 NSAC*100                        :0x0
14:35:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:00: Card Command Classess CCC                     :0x5b5
14:35:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:00: DSR(driver stage register)  DSR_IMP           :0x0
14:35:00: Reserv2                                       :0x0
14:35:00: Device Size C_SIZE                            :0xedc8
14:35:00: Reserv3                                       :0x0
14:35:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:00: Reserv4                                       :0x0
14:35:00: Write Speed Factor R2W_FACTOR                 :0x2
14:35:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:00: FILE_FORMAT_GRP                               :0x0
14:35:00: COPY flag                                     :0x1
14:35:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:00: File_Format                                   :0x0
14:35:00: CRC                                           :0x0
14:35:00: ####CSD Registe Values####  

14:35:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:00: [GetSCRRegisterEntry] Passed
14:35:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:00: Data_Status_After Erases          : 0
14:35:00: CPRM Security Support             : No Security
14:35:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:00: Spec. Version                     : Version 3.0X
14:35:00: Extended Security Support         : Extended_Security_Not_Supported
14:35:00: Command Support                   : COMMAND_SUPPORT
14:35:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065721E0>, <py_sfcl.CommandDataDefinition object at 0x0667A390>) , Command count = 1611 ] 
14:35:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABDB0>, <py_sfcl.CommandDataDefinition object at 0x066AB4B0>) , Command count = 1612 ] 
14:35:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:00: [ SetBusWidth(0x4) , Command count = 1613 ] 
14:35:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A0F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1614 ] 
14:35:00: Protected Area Size 0x28000
14:35:00: Bus Width           2
14:35:00: Secure Mode         0
14:35:00: Speed  Class        4
14:35:00: Perf Move           0
14:35:00: Au Size             9
14:35:00: Erase Size          15
14:35:00: Erase Timeout       1
14:35:00: Erase offset        1
14:35:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1615 ] 
14:35:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:00: Host Frequency set to 100000 KHz
14:35:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:00: ####CSD Registe 2.0 Values####
14:35:00: CSD_STRUCTURE                                 :0x1
14:35:00: Reserv1                                       :0x0
14:35:00: Time Access 1 TAAC                            :0xe
14:35:00: Time Access 2 NSAC*100                        :0x0
14:35:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:00: Card Command Classess CCC                     :0x5b5
14:35:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:00: DSR(driver stage register)  DSR_IMP           :0x0
14:35:00: Reserv2                                       :0x0
14:35:00: Device Size C_SIZE                            :0xedc8
14:35:00: Reserv3                                       :0x0
14:35:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:00: Reserv4                                       :0x0
14:35:00: Write Speed Factor R2W_FACTOR                 :0x2
14:35:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:00: FILE_FORMAT_GRP                               :0x0
14:35:00: COPY flag                                     :0x1
14:35:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:00: File_Format                                   :0x0
14:35:00: CRC                                           :0x0
14:35:00: ####CSD Registe Values####  

14:35:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB2A0>, <py_sfcl.CommandDataDefinition object at 0x06572330>) , Command count = 1616 ] 
14:35:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB300>, <py_sfcl.CommandDataDefinition object at 0x066857B0>) , Command count = 1617 ] 
14:35:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:00: [DVTCommonLib]### Erase :Erase API Called
14:35:00: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x22010 with Blockcount:0x2001
14:35:00: [ EraseLba(0x22010, 0x2001) , Command count = 1618 ] 
14:35:00: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x22010 with Blockcount:0x2001 

14:35:00: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 10
14:35:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x24010 to EndLba:0x24018 with Increment Pattern
14:35:00: [ WrLbaNoData(0x24010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1619 ] 
14:35:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x24010 to EndLba:0x24018 with Increment Pattern 

14:35:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB2D0>, <py_sfcl.CommandDataDefinition object at 0x0667A300>) , Command count = 1620 ] 
14:35:00: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666420>, <py_sfcl.CommandDataDefinition object at 0x0667A120>) , Command count = 1621 ] 
14:35:00: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:00: [DVTCommonLib]###  R1bCommandAbort called
14:35:01: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x12, False) , Command count = 1622 ] 
14:35:01: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:01: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:03: Host Frequency set to 25000 KHz
14:35:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:03: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A7E0>, 0x0, True) , Command count = 1623 ] 
14:35:03: [GO18_globalSetVolt]### Host voltage value is set.
14:35:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AB70>, 0x0, False) , Command count = 1624 ] 
14:35:03: [GO18_globalSetVolt]### Host voltage value is set.
14:35:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1625 ] 
14:35:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1626 ] 
14:35:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1627 ] 
14:35:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB9F0>, <py_sfcl.CommandDataDefinition object at 0x0667A030>) , Command count = 1628 ] 
14:35:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AE10>, <py_sfcl.CommandDataDefinition object at 0x0667AA80>) , Command count = 1629 ] 
14:35:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:03: [ SetCardRCA(0x1, 0xD555) , Command count = 1630 ] 
14:35:03: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:03: Host Frequency set to 25000 KHz
14:35:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:03: ####CSD Registe 2.0 Values####
14:35:03: CSD_STRUCTURE                                 :0x1
14:35:03: Reserv1                                       :0x0
14:35:03: Time Access 1 TAAC                            :0xe
14:35:03: Time Access 2 NSAC*100                        :0x0
14:35:03: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:03: Card Command Classess CCC                     :0x5b5
14:35:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:03: DSR(driver stage register)  DSR_IMP           :0x0
14:35:03: Reserv2                                       :0x0
14:35:03: Device Size C_SIZE                            :0xedc8
14:35:03: Reserv3                                       :0x0
14:35:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:03: Reserv4                                       :0x0
14:35:03: Write Speed Factor R2W_FACTOR                 :0x2
14:35:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:03: FILE_FORMAT_GRP                               :0x0
14:35:03: COPY flag                                     :0x1
14:35:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:03: File_Format                                   :0x0
14:35:03: CRC                                           :0x0
14:35:03: ####CSD Registe Values####  

14:35:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:03: [GetSCRRegisterEntry] Passed
14:35:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:03: Data_Status_After Erases          : 0
14:35:03: CPRM Security Support             : No Security
14:35:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:03: Spec. Version                     : Version 3.0X
14:35:03: Extended Security Support         : Extended_Security_Not_Supported
14:35:03: Command Support                   : COMMAND_SUPPORT
14:35:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB5D0>, <py_sfcl.CommandDataDefinition object at 0x0667A4B0>) , Command count = 1631 ] 
14:35:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE10>, <py_sfcl.CommandDataDefinition object at 0x0667ABA0>) , Command count = 1632 ] 
14:35:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:03: [ SetBusWidth(0x4) , Command count = 1633 ] 
14:35:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667AC00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1634 ] 
14:35:03: Protected Area Size 0x28000
14:35:03: Bus Width           2
14:35:03: Secure Mode         0
14:35:03: Speed  Class        4
14:35:03: Perf Move           0
14:35:03: Au Size             9
14:35:03: Erase Size          15
14:35:03: Erase Timeout       1
14:35:03: Erase offset        1
14:35:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1635 ] 
14:35:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:03: Host Frequency set to 100000 KHz
14:35:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:03: ####CSD Registe 2.0 Values####
14:35:03: CSD_STRUCTURE                                 :0x1
14:35:03: Reserv1                                       :0x0
14:35:03: Time Access 1 TAAC                            :0xe
14:35:03: Time Access 2 NSAC*100                        :0x0
14:35:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:03: Card Command Classess CCC                     :0x5b5
14:35:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:03: DSR(driver stage register)  DSR_IMP           :0x0
14:35:03: Reserv2                                       :0x0
14:35:03: Device Size C_SIZE                            :0xedc8
14:35:03: Reserv3                                       :0x0
14:35:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:03: Reserv4                                       :0x0
14:35:03: Write Speed Factor R2W_FACTOR                 :0x2
14:35:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:03: FILE_FORMAT_GRP                               :0x0
14:35:03: COPY flag                                     :0x1
14:35:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:03: File_Format                                   :0x0
14:35:03: CRC                                           :0x0
14:35:03: ####CSD Registe Values####  

14:35:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABFC0>, <py_sfcl.CommandDataDefinition object at 0x0667ACF0>) , Command count = 1636 ] 
14:35:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF00>, <py_sfcl.CommandDataDefinition object at 0x06685D50>) , Command count = 1637 ] 
14:35:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:03: [DVTCommonLib]### Erase :Erase API Called
14:35:03: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x24010 with Blockcount:0x2001
14:35:03: [ EraseLba(0x24010, 0x2001) , Command count = 1638 ] 
14:35:03: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x24010 with Blockcount:0x2001 

14:35:03: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 9
14:35:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x26010 to EndLba:0x26018 with Increment Pattern
14:35:03: [ WrLbaNoData(0x26010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1639 ] 
14:35:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x26010 to EndLba:0x26018 with Increment Pattern 

14:35:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A1E0>, <py_sfcl.CommandDataDefinition object at 0x0667A8A0>) , Command count = 1640 ] 
14:35:03: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB630>, <py_sfcl.CommandDataDefinition object at 0x0667AE70>) , Command count = 1641 ] 
14:35:03: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:03: [DVTCommonLib]###  R1bCommandAbort called
14:35:03: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x12, False) , Command count = 1642 ] 
14:35:03: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:05: Host Frequency set to 25000 KHz
14:35:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666750>, 0x0, True) , Command count = 1643 ] 
14:35:05: [GO18_globalSetVolt]### Host voltage value is set.
14:35:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C3C0>, 0x0, False) , Command count = 1644 ] 
14:35:06: [GO18_globalSetVolt]### Host voltage value is set.
14:35:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1645 ] 
14:35:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1646 ] 
14:35:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1647 ] 
14:35:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AB10>, <py_sfcl.CommandDataDefinition object at 0x0667A960>) , Command count = 1648 ] 
14:35:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABDE0>, <py_sfcl.CommandDataDefinition object at 0x0667AA20>) , Command count = 1649 ] 
14:35:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1650 ] 
14:35:06: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:06: Host Frequency set to 25000 KHz
14:35:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:06: ####CSD Registe 2.0 Values####
14:35:06: CSD_STRUCTURE                                 :0x1
14:35:06: Reserv1                                       :0x0
14:35:06: Time Access 1 TAAC                            :0xe
14:35:06: Time Access 2 NSAC*100                        :0x0
14:35:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:06: Card Command Classess CCC                     :0x5b5
14:35:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:06: DSR(driver stage register)  DSR_IMP           :0x0
14:35:06: Reserv2                                       :0x0
14:35:06: Device Size C_SIZE                            :0xedc8
14:35:06: Reserv3                                       :0x0
14:35:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:06: Reserv4                                       :0x0
14:35:06: Write Speed Factor R2W_FACTOR                 :0x2
14:35:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:06: FILE_FORMAT_GRP                               :0x0
14:35:06: COPY flag                                     :0x1
14:35:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:06: File_Format                                   :0x0
14:35:06: CRC                                           :0x0
14:35:06: ####CSD Registe Values####  

14:35:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:06: [GetSCRRegisterEntry] Passed
14:35:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:06: Data_Status_After Erases          : 0
14:35:06: CPRM Security Support             : No Security
14:35:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:06: Spec. Version                     : Version 3.0X
14:35:06: Extended Security Support         : Extended_Security_Not_Supported
14:35:06: Command Support                   : COMMAND_SUPPORT
14:35:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A690>, <py_sfcl.CommandDataDefinition object at 0x0667A090>) , Command count = 1651 ] 
14:35:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C3F0>, <py_sfcl.CommandDataDefinition object at 0x0667C390>) , Command count = 1652 ] 
14:35:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:06: [ SetBusWidth(0x4) , Command count = 1653 ] 
14:35:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667AF30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1654 ] 
14:35:06: Protected Area Size 0x28000
14:35:06: Bus Width           2
14:35:06: Secure Mode         0
14:35:06: Speed  Class        4
14:35:06: Perf Move           0
14:35:06: Au Size             9
14:35:06: Erase Size          15
14:35:06: Erase Timeout       1
14:35:06: Erase offset        1
14:35:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1655 ] 
14:35:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:06: Host Frequency set to 100000 KHz
14:35:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:06: ####CSD Registe 2.0 Values####
14:35:06: CSD_STRUCTURE                                 :0x1
14:35:06: Reserv1                                       :0x0
14:35:06: Time Access 1 TAAC                            :0xe
14:35:06: Time Access 2 NSAC*100                        :0x0
14:35:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:06: Card Command Classess CCC                     :0x5b5
14:35:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:06: DSR(driver stage register)  DSR_IMP           :0x0
14:35:06: Reserv2                                       :0x0
14:35:06: Device Size C_SIZE                            :0xedc8
14:35:06: Reserv3                                       :0x0
14:35:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:06: Reserv4                                       :0x0
14:35:06: Write Speed Factor R2W_FACTOR                 :0x2
14:35:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:06: FILE_FORMAT_GRP                               :0x0
14:35:06: COPY flag                                     :0x1
14:35:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:06: File_Format                                   :0x0
14:35:06: CRC                                           :0x0
14:35:06: ####CSD Registe Values####  

14:35:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AD80>, <py_sfcl.CommandDataDefinition object at 0x0667AC00>) , Command count = 1656 ] 
14:35:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB660>, <py_sfcl.CommandDataDefinition object at 0x066855A0>) , Command count = 1657 ] 
14:35:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:06: [DVTCommonLib]### Erase :Erase API Called
14:35:06: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x26010 with Blockcount:0x2001
14:35:06: [ EraseLba(0x26010, 0x2001) , Command count = 1658 ] 
14:35:06: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x26010 with Blockcount:0x2001 

14:35:06: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 8
14:35:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x28010 to EndLba:0x28018 with Increment Pattern
14:35:06: [ WrLbaNoData(0x28010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1659 ] 
14:35:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x28010 to EndLba:0x28018 with Increment Pattern 

14:35:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C2D0>, <py_sfcl.CommandDataDefinition object at 0x0667C7B0>) , Command count = 1660 ] 
14:35:06: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A540>, <py_sfcl.CommandDataDefinition object at 0x0667A930>) , Command count = 1661 ] 
14:35:06: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:06: [DVTCommonLib]###  R1bCommandAbort called
14:35:06: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2D, False) , Command count = 1662 ] 
14:35:06: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:08: Host Frequency set to 25000 KHz
14:35:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:08: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C210>, 0x0, True) , Command count = 1663 ] 
14:35:08: [GO18_globalSetVolt]### Host voltage value is set.
14:35:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C7E0>, 0x0, False) , Command count = 1664 ] 
14:35:08: [GO18_globalSetVolt]### Host voltage value is set.
14:35:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1665 ] 
14:35:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1666 ] 
14:35:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1667 ] 
14:35:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C330>, <py_sfcl.CommandDataDefinition object at 0x0667C1E0>) , Command count = 1668 ] 
14:35:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CD80>, <py_sfcl.CommandDataDefinition object at 0x0667A930>) , Command count = 1669 ] 
14:35:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1670 ] 
14:35:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:09: Host Frequency set to 25000 KHz
14:35:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:09: ####CSD Registe 2.0 Values####
14:35:09: CSD_STRUCTURE                                 :0x1
14:35:09: Reserv1                                       :0x0
14:35:09: Time Access 1 TAAC                            :0xe
14:35:09: Time Access 2 NSAC*100                        :0x0
14:35:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:09: Card Command Classess CCC                     :0x5b5
14:35:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:09: DSR(driver stage register)  DSR_IMP           :0x0
14:35:09: Reserv2                                       :0x0
14:35:09: Device Size C_SIZE                            :0xedc8
14:35:09: Reserv3                                       :0x0
14:35:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:09: Reserv4                                       :0x0
14:35:09: Write Speed Factor R2W_FACTOR                 :0x2
14:35:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:09: FILE_FORMAT_GRP                               :0x0
14:35:09: COPY flag                                     :0x1
14:35:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:09: File_Format                                   :0x0
14:35:09: CRC                                           :0x0
14:35:09: ####CSD Registe Values####  

14:35:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:09: [GetSCRRegisterEntry] Passed
14:35:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:09: Data_Status_After Erases          : 0
14:35:09: CPRM Security Support             : No Security
14:35:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:09: Spec. Version                     : Version 3.0X
14:35:09: Extended Security Support         : Extended_Security_Not_Supported
14:35:09: Command Support                   : COMMAND_SUPPORT
14:35:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CB10>, <py_sfcl.CommandDataDefinition object at 0x0667C150>) , Command count = 1671 ] 
14:35:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CB70>, <py_sfcl.CommandDataDefinition object at 0x0667AED0>) , Command count = 1672 ] 
14:35:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:09: [ SetBusWidth(0x4) , Command count = 1673 ] 
14:35:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667CC60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1674 ] 
14:35:09: Protected Area Size 0x28000
14:35:09: Bus Width           2
14:35:09: Secure Mode         0
14:35:09: Speed  Class        4
14:35:09: Perf Move           0
14:35:09: Au Size             9
14:35:09: Erase Size          15
14:35:09: Erase Timeout       1
14:35:09: Erase offset        1
14:35:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1675 ] 
14:35:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:09: Host Frequency set to 100000 KHz
14:35:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:09: ####CSD Registe 2.0 Values####
14:35:09: CSD_STRUCTURE                                 :0x1
14:35:09: Reserv1                                       :0x0
14:35:09: Time Access 1 TAAC                            :0xe
14:35:09: Time Access 2 NSAC*100                        :0x0
14:35:09: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:09: Card Command Classess CCC                     :0x5b5
14:35:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:09: DSR(driver stage register)  DSR_IMP           :0x0
14:35:09: Reserv2                                       :0x0
14:35:09: Device Size C_SIZE                            :0xedc8
14:35:09: Reserv3                                       :0x0
14:35:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:09: Reserv4                                       :0x0
14:35:09: Write Speed Factor R2W_FACTOR                 :0x2
14:35:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:09: FILE_FORMAT_GRP                               :0x0
14:35:09: COPY flag                                     :0x1
14:35:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:09: File_Format                                   :0x0
14:35:09: CRC                                           :0x0
14:35:09: ####CSD Registe Values####  

14:35:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CB40>, <py_sfcl.CommandDataDefinition object at 0x0667C4E0>) , Command count = 1676 ] 
14:35:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C060>, <py_sfcl.CommandDataDefinition object at 0x06685BD0>) , Command count = 1677 ] 
14:35:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:09: [DVTCommonLib]### Erase :Erase API Called
14:35:09: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x28010 with Blockcount:0x2001
14:35:09: [ EraseLba(0x28010, 0x2001) , Command count = 1678 ] 
14:35:09: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x28010 with Blockcount:0x2001 

14:35:09: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 7
14:35:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2A010 to EndLba:0x2A018 with Increment Pattern
14:35:09: [ WrLbaNoData(0x2A010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1679 ] 
14:35:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2A010 to EndLba:0x2A018 with Increment Pattern 

14:35:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CC90>, <py_sfcl.CommandDataDefinition object at 0x0667C270>) , Command count = 1680 ] 
14:35:09: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ADB0>, <py_sfcl.CommandDataDefinition object at 0x0667CFC0>) , Command count = 1681 ] 
14:35:09: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:09: [DVTCommonLib]###  R1bCommandAbort called
14:35:09: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x17, False) , Command count = 1682 ] 
14:35:09: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:09: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:11: Host Frequency set to 25000 KHz
14:35:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:11: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C6C0>, 0x0, True) , Command count = 1683 ] 
14:35:11: [GO18_globalSetVolt]### Host voltage value is set.
14:35:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C6F0>, 0x0, False) , Command count = 1684 ] 
14:35:11: [GO18_globalSetVolt]### Host voltage value is set.
14:35:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1685 ] 
14:35:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1686 ] 
14:35:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1687 ] 
14:35:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C240>, <py_sfcl.CommandDataDefinition object at 0x0667C540>) , Command count = 1688 ] 
14:35:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F4B0>, <py_sfcl.CommandDataDefinition object at 0x0667CF30>) , Command count = 1689 ] 
14:35:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:11: [ SetCardRCA(0x1, 0xD555) , Command count = 1690 ] 
14:35:11: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:12: Host Frequency set to 25000 KHz
14:35:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:12: ####CSD Registe 2.0 Values####
14:35:12: CSD_STRUCTURE                                 :0x1
14:35:12: Reserv1                                       :0x0
14:35:12: Time Access 1 TAAC                            :0xe
14:35:12: Time Access 2 NSAC*100                        :0x0
14:35:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:12: Card Command Classess CCC                     :0x5b5
14:35:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:12: DSR(driver stage register)  DSR_IMP           :0x0
14:35:12: Reserv2                                       :0x0
14:35:12: Device Size C_SIZE                            :0xedc8
14:35:12: Reserv3                                       :0x0
14:35:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:12: Reserv4                                       :0x0
14:35:12: Write Speed Factor R2W_FACTOR                 :0x2
14:35:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:12: FILE_FORMAT_GRP                               :0x0
14:35:12: COPY flag                                     :0x1
14:35:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:12: File_Format                                   :0x0
14:35:12: CRC                                           :0x0
14:35:12: ####CSD Registe Values####  

14:35:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:12: [GetSCRRegisterEntry] Passed
14:35:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:12: Data_Status_After Erases          : 0
14:35:12: CPRM Security Support             : No Security
14:35:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:12: Spec. Version                     : Version 3.0X
14:35:12: Extended Security Support         : Extended_Security_Not_Supported
14:35:12: Command Support                   : COMMAND_SUPPORT
14:35:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ABD0>, <py_sfcl.CommandDataDefinition object at 0x0667C180>) , Command count = 1691 ] 
14:35:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F540>, <py_sfcl.CommandDataDefinition object at 0x0667F2D0>) , Command count = 1692 ] 
14:35:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:12: [ SetBusWidth(0x4) , Command count = 1693 ] 
14:35:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F0F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1694 ] 
14:35:12: Protected Area Size 0x28000
14:35:12: Bus Width           2
14:35:12: Secure Mode         0
14:35:12: Speed  Class        4
14:35:12: Perf Move           0
14:35:12: Au Size             9
14:35:12: Erase Size          15
14:35:12: Erase Timeout       1
14:35:12: Erase offset        1
14:35:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1695 ] 
14:35:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:12: Host Frequency set to 100000 KHz
14:35:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:12: ####CSD Registe 2.0 Values####
14:35:12: CSD_STRUCTURE                                 :0x1
14:35:12: Reserv1                                       :0x0
14:35:12: Time Access 1 TAAC                            :0xe
14:35:12: Time Access 2 NSAC*100                        :0x0
14:35:12: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:12: Card Command Classess CCC                     :0x5b5
14:35:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:12: DSR(driver stage register)  DSR_IMP           :0x0
14:35:12: Reserv2                                       :0x0
14:35:12: Device Size C_SIZE                            :0xedc8
14:35:12: Reserv3                                       :0x0
14:35:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:12: Reserv4                                       :0x0
14:35:12: Write Speed Factor R2W_FACTOR                 :0x2
14:35:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:12: FILE_FORMAT_GRP                               :0x0
14:35:12: COPY flag                                     :0x1
14:35:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:12: File_Format                                   :0x0
14:35:12: CRC                                           :0x0
14:35:12: ####CSD Registe Values####  

14:35:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C630>, <py_sfcl.CommandDataDefinition object at 0x0667CC60>) , Command count = 1696 ] 
14:35:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CAB0>, <py_sfcl.CommandDataDefinition object at 0x06685870>) , Command count = 1697 ] 
14:35:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:12: [DVTCommonLib]### Erase :Erase API Called
14:35:12: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2A010 with Blockcount:0x2001
14:35:12: [ EraseLba(0x2A010, 0x2001) , Command count = 1698 ] 
14:35:12: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2A010 with Blockcount:0x2001 

14:35:12: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 6
14:35:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2C010 to EndLba:0x2C018 with Increment Pattern
14:35:12: [ WrLbaNoData(0x2C010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1699 ] 
14:35:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2C010 to EndLba:0x2C018 with Increment Pattern 

14:35:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F450>, <py_sfcl.CommandDataDefinition object at 0x0667F780>) , Command count = 1700 ] 
14:35:12: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C5A0>, <py_sfcl.CommandDataDefinition object at 0x0667C930>) , Command count = 1701 ] 
14:35:12: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:12: [DVTCommonLib]###  R1bCommandAbort called
14:35:12: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1E, False) , Command count = 1702 ] 
14:35:12: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:12: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:14: Host Frequency set to 25000 KHz
14:35:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:14: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A9F0>, 0x0, True) , Command count = 1703 ] 
14:35:14: [GO18_globalSetVolt]### Host voltage value is set.
14:35:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FA80>, 0x0, False) , Command count = 1704 ] 
14:35:14: [GO18_globalSetVolt]### Host voltage value is set.
14:35:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1705 ] 
14:35:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1706 ] 
14:35:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1707 ] 
14:35:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F7E0>, <py_sfcl.CommandDataDefinition object at 0x0667FB10>) , Command count = 1708 ] 
14:35:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683570>, <py_sfcl.CommandDataDefinition object at 0x0667CC00>) , Command count = 1709 ] 
14:35:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:14: [ SetCardRCA(0x1, 0xD555) , Command count = 1710 ] 
14:35:14: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:14: Host Frequency set to 25000 KHz
14:35:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:14: ####CSD Registe 2.0 Values####
14:35:14: CSD_STRUCTURE                                 :0x1
14:35:14: Reserv1                                       :0x0
14:35:14: Time Access 1 TAAC                            :0xe
14:35:14: Time Access 2 NSAC*100                        :0x0
14:35:14: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:14: Card Command Classess CCC                     :0x5b5
14:35:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:14: DSR(driver stage register)  DSR_IMP           :0x0
14:35:14: Reserv2                                       :0x0
14:35:14: Device Size C_SIZE                            :0xedc8
14:35:14: Reserv3                                       :0x0
14:35:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:14: Reserv4                                       :0x0
14:35:14: Write Speed Factor R2W_FACTOR                 :0x2
14:35:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:14: FILE_FORMAT_GRP                               :0x0
14:35:14: COPY flag                                     :0x1
14:35:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:14: File_Format                                   :0x0
14:35:14: CRC                                           :0x0
14:35:14: ####CSD Registe Values####  

14:35:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:14: [GetSCRRegisterEntry] Passed
14:35:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:14: Data_Status_After Erases          : 0
14:35:14: CPRM Security Support             : No Security
14:35:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:14: Spec. Version                     : Version 3.0X
14:35:14: Extended Security Support         : Extended_Security_Not_Supported
14:35:14: Command Support                   : COMMAND_SUPPORT
14:35:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AE40>, <py_sfcl.CommandDataDefinition object at 0x0667FC30>) , Command count = 1711 ] 
14:35:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FAB0>, <py_sfcl.CommandDataDefinition object at 0x0667FA50>) , Command count = 1712 ] 
14:35:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:14: [ SetBusWidth(0x4) , Command count = 1713 ] 
14:35:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F2A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1714 ] 
14:35:14: Protected Area Size 0x28000
14:35:14: Bus Width           2
14:35:14: Secure Mode         0
14:35:14: Speed  Class        4
14:35:14: Perf Move           0
14:35:14: Au Size             9
14:35:14: Erase Size          15
14:35:14: Erase Timeout       1
14:35:14: Erase offset        1
14:35:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1715 ] 
14:35:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:14: Host Frequency set to 100000 KHz
14:35:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:14: ####CSD Registe 2.0 Values####
14:35:14: CSD_STRUCTURE                                 :0x1
14:35:14: Reserv1                                       :0x0
14:35:14: Time Access 1 TAAC                            :0xe
14:35:14: Time Access 2 NSAC*100                        :0x0
14:35:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:14: Card Command Classess CCC                     :0x5b5
14:35:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:14: DSR(driver stage register)  DSR_IMP           :0x0
14:35:14: Reserv2                                       :0x0
14:35:14: Device Size C_SIZE                            :0xedc8
14:35:14: Reserv3                                       :0x0
14:35:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:14: Reserv4                                       :0x0
14:35:14: Write Speed Factor R2W_FACTOR                 :0x2
14:35:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:14: FILE_FORMAT_GRP                               :0x0
14:35:14: COPY flag                                     :0x1
14:35:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:14: File_Format                                   :0x0
14:35:14: CRC                                           :0x0
14:35:14: ####CSD Registe Values####  

14:35:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F360>, <py_sfcl.CommandDataDefinition object at 0x0667F270>) , Command count = 1716 ] 
14:35:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CBA0>, <py_sfcl.CommandDataDefinition object at 0x0667CCC0>) , Command count = 1717 ] 
14:35:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:14: [DVTCommonLib]### Erase :Erase API Called
14:35:14: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2C010 with Blockcount:0x2001
14:35:14: [ EraseLba(0x2C010, 0x2001) , Command count = 1718 ] 
14:35:14: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2C010 with Blockcount:0x2001 

14:35:14: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 5
14:35:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2E010 to EndLba:0x2E018 with Increment Pattern
14:35:14: [ WrLbaNoData(0x2E010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1719 ] 
14:35:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2E010 to EndLba:0x2E018 with Increment Pattern 

14:35:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FBD0>, <py_sfcl.CommandDataDefinition object at 0x0667F870>) , Command count = 1720 ] 
14:35:15: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CD20>, <py_sfcl.CommandDataDefinition object at 0x0667F090>) , Command count = 1721 ] 
14:35:15: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:15: [DVTCommonLib]###  R1bCommandAbort called
14:35:15: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2B, False) , Command count = 1722 ] 
14:35:15: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:17: Host Frequency set to 25000 KHz
14:35:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:17: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F150>, 0x0, True) , Command count = 1723 ] 
14:35:17: [GO18_globalSetVolt]### Host voltage value is set.
14:35:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683240>, 0x0, False) , Command count = 1724 ] 
14:35:17: [GO18_globalSetVolt]### Host voltage value is set.
14:35:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1725 ] 
14:35:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1726 ] 
14:35:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1727 ] 
14:35:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FE40>, <py_sfcl.CommandDataDefinition object at 0x0667F480>) , Command count = 1728 ] 
14:35:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066833F0>, <py_sfcl.CommandDataDefinition object at 0x0667F3C0>) , Command count = 1729 ] 
14:35:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:17: [ SetCardRCA(0x1, 0xD555) , Command count = 1730 ] 
14:35:17: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:17: Host Frequency set to 25000 KHz
14:35:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:17: ####CSD Registe 2.0 Values####
14:35:17: CSD_STRUCTURE                                 :0x1
14:35:17: Reserv1                                       :0x0
14:35:17: Time Access 1 TAAC                            :0xe
14:35:17: Time Access 2 NSAC*100                        :0x0
14:35:17: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:17: Card Command Classess CCC                     :0x5b5
14:35:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:17: DSR(driver stage register)  DSR_IMP           :0x0
14:35:17: Reserv2                                       :0x0
14:35:17: Device Size C_SIZE                            :0xedc8
14:35:17: Reserv3                                       :0x0
14:35:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:17: Reserv4                                       :0x0
14:35:17: Write Speed Factor R2W_FACTOR                 :0x2
14:35:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:17: FILE_FORMAT_GRP                               :0x0
14:35:17: COPY flag                                     :0x1
14:35:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:17: File_Format                                   :0x0
14:35:17: CRC                                           :0x0
14:35:17: ####CSD Registe Values####  

14:35:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:17: [GetSCRRegisterEntry] Passed
14:35:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:17: Data_Status_After Erases          : 0
14:35:17: CPRM Security Support             : No Security
14:35:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:17: Spec. Version                     : Version 3.0X
14:35:17: Extended Security Support         : Extended_Security_Not_Supported
14:35:17: Command Support                   : COMMAND_SUPPORT
14:35:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F720>, <py_sfcl.CommandDataDefinition object at 0x0667FBA0>) , Command count = 1731 ] 
14:35:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683480>, <py_sfcl.CommandDataDefinition object at 0x066832D0>) , Command count = 1732 ] 
14:35:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:17: [ SetBusWidth(0x4) , Command count = 1733 ] 
14:35:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683390>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1734 ] 
14:35:17: Protected Area Size 0x28000
14:35:17: Bus Width           2
14:35:17: Secure Mode         0
14:35:17: Speed  Class        4
14:35:17: Perf Move           0
14:35:17: Au Size             9
14:35:17: Erase Size          15
14:35:17: Erase Timeout       1
14:35:17: Erase offset        1
14:35:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1735 ] 
14:35:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:17: Host Frequency set to 100000 KHz
14:35:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:17: ####CSD Registe 2.0 Values####
14:35:17: CSD_STRUCTURE                                 :0x1
14:35:17: Reserv1                                       :0x0
14:35:17: Time Access 1 TAAC                            :0xe
14:35:17: Time Access 2 NSAC*100                        :0x0
14:35:17: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:17: Card Command Classess CCC                     :0x5b5
14:35:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:17: DSR(driver stage register)  DSR_IMP           :0x0
14:35:17: Reserv2                                       :0x0
14:35:17: Device Size C_SIZE                            :0xedc8
14:35:17: Reserv3                                       :0x0
14:35:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:17: Reserv4                                       :0x0
14:35:17: Write Speed Factor R2W_FACTOR                 :0x2
14:35:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:17: FILE_FORMAT_GRP                               :0x0
14:35:17: COPY flag                                     :0x1
14:35:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:17: File_Format                                   :0x0
14:35:17: CRC                                           :0x0
14:35:17: ####CSD Registe Values####  

14:35:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F1E0>, <py_sfcl.CommandDataDefinition object at 0x0667F2A0>) , Command count = 1736 ] 
14:35:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FCC0>, <py_sfcl.CommandDataDefinition object at 0x0667FEA0>) , Command count = 1737 ] 
14:35:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:17: [DVTCommonLib]### Erase :Erase API Called
14:35:17: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2E010 with Blockcount:0x2001
14:35:17: [ EraseLba(0x2E010, 0x2001) , Command count = 1738 ] 
14:35:17: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2E010 with Blockcount:0x2001 

14:35:17: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 4
14:35:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x30010 to EndLba:0x30018 with Increment Pattern
14:35:17: [ WrLbaNoData(0x30010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1739 ] 
14:35:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x30010 to EndLba:0x30018 with Increment Pattern 

14:35:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683630>, <py_sfcl.CommandDataDefinition object at 0x066836C0>) , Command count = 1740 ] 
14:35:17: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F4E0>, <py_sfcl.CommandDataDefinition object at 0x0667F510>) , Command count = 1741 ] 
14:35:17: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:17: [DVTCommonLib]###  R1bCommandAbort called
14:35:17: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xD, False) , Command count = 1742 ] 
14:35:17: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:17: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:19: Host Frequency set to 25000 KHz
14:35:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:19: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683660>, 0x0, True) , Command count = 1743 ] 
14:35:19: [GO18_globalSetVolt]### Host voltage value is set.
14:35:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x066839C0>, 0x0, False) , Command count = 1744 ] 
14:35:20: [GO18_globalSetVolt]### Host voltage value is set.
14:35:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1745 ] 
14:35:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1746 ] 
14:35:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1747 ] 
14:35:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683180>, <py_sfcl.CommandDataDefinition object at 0x06683A50>) , Command count = 1748 ] 
14:35:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683C00>, <py_sfcl.CommandDataDefinition object at 0x0667F7B0>) , Command count = 1749 ] 
14:35:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1750 ] 
14:35:20: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:20: Host Frequency set to 25000 KHz
14:35:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:20: ####CSD Registe 2.0 Values####
14:35:20: CSD_STRUCTURE                                 :0x1
14:35:20: Reserv1                                       :0x0
14:35:20: Time Access 1 TAAC                            :0xe
14:35:20: Time Access 2 NSAC*100                        :0x0
14:35:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:20: Card Command Classess CCC                     :0x5b5
14:35:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:20: DSR(driver stage register)  DSR_IMP           :0x0
14:35:20: Reserv2                                       :0x0
14:35:20: Device Size C_SIZE                            :0xedc8
14:35:20: Reserv3                                       :0x0
14:35:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:20: Reserv4                                       :0x0
14:35:20: Write Speed Factor R2W_FACTOR                 :0x2
14:35:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:20: FILE_FORMAT_GRP                               :0x0
14:35:20: COPY flag                                     :0x1
14:35:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:20: File_Format                                   :0x0
14:35:20: CRC                                           :0x0
14:35:20: ####CSD Registe Values####  

14:35:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:20: [GetSCRRegisterEntry] Passed
14:35:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:20: Data_Status_After Erases          : 0
14:35:20: CPRM Security Support             : No Security
14:35:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:20: Spec. Version                     : Version 3.0X
14:35:20: Extended Security Support         : Extended_Security_Not_Supported
14:35:20: Command Support                   : COMMAND_SUPPORT
14:35:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683B70>, <py_sfcl.CommandDataDefinition object at 0x06683060>) , Command count = 1751 ] 
14:35:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066839F0>, <py_sfcl.CommandDataDefinition object at 0x0667FD50>) , Command count = 1752 ] 
14:35:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:20: [ SetBusWidth(0x4) , Command count = 1753 ] 
14:35:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1754 ] 
14:35:20: Protected Area Size 0x28000
14:35:20: Bus Width           2
14:35:20: Secure Mode         0
14:35:20: Speed  Class        4
14:35:20: Perf Move           0
14:35:20: Au Size             9
14:35:20: Erase Size          15
14:35:20: Erase Timeout       1
14:35:20: Erase offset        1
14:35:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1755 ] 
14:35:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:20: Host Frequency set to 100000 KHz
14:35:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:20: ####CSD Registe 2.0 Values####
14:35:20: CSD_STRUCTURE                                 :0x1
14:35:20: Reserv1                                       :0x0
14:35:20: Time Access 1 TAAC                            :0xe
14:35:20: Time Access 2 NSAC*100                        :0x0
14:35:20: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:20: Card Command Classess CCC                     :0x5b5
14:35:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:20: DSR(driver stage register)  DSR_IMP           :0x0
14:35:20: Reserv2                                       :0x0
14:35:20: Device Size C_SIZE                            :0xedc8
14:35:20: Reserv3                                       :0x0
14:35:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:20: Reserv4                                       :0x0
14:35:20: Write Speed Factor R2W_FACTOR                 :0x2
14:35:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:20: FILE_FORMAT_GRP                               :0x0
14:35:20: COPY flag                                     :0x1
14:35:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:20: File_Format                                   :0x0
14:35:20: CRC                                           :0x0
14:35:20: ####CSD Registe Values####  

14:35:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683990>, <py_sfcl.CommandDataDefinition object at 0x06683390>) , Command count = 1756 ] 
14:35:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066858D0>, <py_sfcl.CommandDataDefinition object at 0x06685DB0>) , Command count = 1757 ] 
14:35:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:20: [DVTCommonLib]### Erase :Erase API Called
14:35:20: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x30010 with Blockcount:0x2001
14:35:20: [ EraseLba(0x30010, 0x2001) , Command count = 1758 ] 
14:35:20: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x30010 with Blockcount:0x2001 

14:35:20: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 3
14:35:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x32010 to EndLba:0x32018 with Increment Pattern
14:35:20: [ WrLbaNoData(0x32010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1759 ] 
14:35:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x32010 to EndLba:0x32018 with Increment Pattern 

14:35:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683810>, <py_sfcl.CommandDataDefinition object at 0x066837B0>) , Command count = 1760 ] 
14:35:20: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FC60>, <py_sfcl.CommandDataDefinition object at 0x066858D0>) , Command count = 1761 ] 
14:35:20: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:20: [DVTCommonLib]###  R1bCommandAbort called
14:35:20: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x3, False) , Command count = 1762 ] 
14:35:20: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:20: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:22: Host Frequency set to 25000 KHz
14:35:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:22: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683540>, 0x0, True) , Command count = 1763 ] 
14:35:22: [GO18_globalSetVolt]### Host voltage value is set.
14:35:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x05EE6B70>, 0x0, False) , Command count = 1764 ] 
14:35:22: [GO18_globalSetVolt]### Host voltage value is set.
14:35:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1765 ] 
14:35:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1766 ] 
14:35:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1767 ] 
14:35:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683EA0>, <py_sfcl.CommandDataDefinition object at 0x066836F0>) , Command count = 1768 ] 
14:35:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC0480>, <py_sfcl.CommandDataDefinition object at 0x066838A0>) , Command count = 1769 ] 
14:35:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1770 ] 
14:35:23: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:23: Host Frequency set to 25000 KHz
14:35:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:23: ####CSD Registe 2.0 Values####
14:35:23: CSD_STRUCTURE                                 :0x1
14:35:23: Reserv1                                       :0x0
14:35:23: Time Access 1 TAAC                            :0xe
14:35:23: Time Access 2 NSAC*100                        :0x0
14:35:23: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:23: Card Command Classess CCC                     :0x5b5
14:35:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:23: DSR(driver stage register)  DSR_IMP           :0x0
14:35:23: Reserv2                                       :0x0
14:35:23: Device Size C_SIZE                            :0xedc8
14:35:23: Reserv3                                       :0x0
14:35:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:23: Reserv4                                       :0x0
14:35:23: Write Speed Factor R2W_FACTOR                 :0x2
14:35:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:23: FILE_FORMAT_GRP                               :0x0
14:35:23: COPY flag                                     :0x1
14:35:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:23: File_Format                                   :0x0
14:35:23: CRC                                           :0x0
14:35:23: ####CSD Registe Values####  

14:35:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:23: [GetSCRRegisterEntry] Passed
14:35:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:23: Data_Status_After Erases          : 0
14:35:23: CPRM Security Support             : No Security
14:35:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:23: Spec. Version                     : Version 3.0X
14:35:23: Extended Security Support         : Extended_Security_Not_Supported
14:35:23: Command Support                   : COMMAND_SUPPORT
14:35:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683840>, <py_sfcl.CommandDataDefinition object at 0x066831B0>) , Command count = 1771 ] 
14:35:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E42840>, <py_sfcl.CommandDataDefinition object at 0x05FC6F90>) , Command count = 1772 ] 
14:35:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:23: [ SetBusWidth(0x4) , Command count = 1773 ] 
14:35:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683F90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1774 ] 
14:35:23: Protected Area Size 0x28000
14:35:23: Bus Width           2
14:35:23: Secure Mode         0
14:35:23: Speed  Class        4
14:35:23: Perf Move           0
14:35:23: Au Size             9
14:35:23: Erase Size          15
14:35:23: Erase Timeout       1
14:35:23: Erase offset        1
14:35:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1775 ] 
14:35:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:23: Host Frequency set to 100000 KHz
14:35:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:23: ####CSD Registe 2.0 Values####
14:35:23: CSD_STRUCTURE                                 :0x1
14:35:23: Reserv1                                       :0x0
14:35:23: Time Access 1 TAAC                            :0xe
14:35:23: Time Access 2 NSAC*100                        :0x0
14:35:23: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:23: Card Command Classess CCC                     :0x5b5
14:35:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:23: DSR(driver stage register)  DSR_IMP           :0x0
14:35:23: Reserv2                                       :0x0
14:35:23: Device Size C_SIZE                            :0xedc8
14:35:23: Reserv3                                       :0x0
14:35:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:23: Reserv4                                       :0x0
14:35:23: Write Speed Factor R2W_FACTOR                 :0x2
14:35:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:23: FILE_FORMAT_GRP                               :0x0
14:35:23: COPY flag                                     :0x1
14:35:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:23: File_Format                                   :0x0
14:35:23: CRC                                           :0x0
14:35:23: ####CSD Registe Values####  

14:35:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683BD0>, <py_sfcl.CommandDataDefinition object at 0x06683720>) , Command count = 1776 ] 
14:35:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066832A0>, <py_sfcl.CommandDataDefinition object at 0x06683090>) , Command count = 1777 ] 
14:35:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:23: [DVTCommonLib]### Erase :Erase API Called
14:35:23: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x32010 with Blockcount:0x2001
14:35:23: [ EraseLba(0x32010, 0x2001) , Command count = 1778 ] 
14:35:23: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x32010 with Blockcount:0x2001 

14:35:23: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 2
14:35:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x34010 to EndLba:0x34018 with Increment Pattern
14:35:23: [ WrLbaNoData(0x34010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1779 ] 
14:35:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x34010 to EndLba:0x34018 with Increment Pattern 

14:35:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FED1B0>, <py_sfcl.CommandDataDefinition object at 0x06683870>) , Command count = 1780 ] 
14:35:23: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683420>, <py_sfcl.CommandDataDefinition object at 0x06683450>) , Command count = 1781 ] 
14:35:23: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:23: [DVTCommonLib]###  R1bCommandAbort called
14:35:23: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1A, False) , Command count = 1782 ] 
14:35:23: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:23: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:25: Host Frequency set to 25000 KHz
14:35:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FF30>, 0x0, True) , Command count = 1783 ] 
14:35:25: [GO18_globalSetVolt]### Host voltage value is set.
14:35:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FDADB0>, 0x0, False) , Command count = 1784 ] 
14:35:25: [GO18_globalSetVolt]### Host voltage value is set.
14:35:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1785 ] 
14:35:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1786 ] 
14:35:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1787 ] 
14:35:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683C30>, <py_sfcl.CommandDataDefinition object at 0x05FC6360>) , Command count = 1788 ] 
14:35:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BE10>, <py_sfcl.CommandDataDefinition object at 0x066859F0>) , Command count = 1789 ] 
14:35:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:25: [ SetCardRCA(0x1, 0xD555) , Command count = 1790 ] 
14:35:25: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:25: Host Frequency set to 25000 KHz
14:35:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:25: ####CSD Registe 2.0 Values####
14:35:25: CSD_STRUCTURE                                 :0x1
14:35:25: Reserv1                                       :0x0
14:35:25: Time Access 1 TAAC                            :0xe
14:35:25: Time Access 2 NSAC*100                        :0x0
14:35:25: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:25: Card Command Classess CCC                     :0x5b5
14:35:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:25: DSR(driver stage register)  DSR_IMP           :0x0
14:35:25: Reserv2                                       :0x0
14:35:25: Device Size C_SIZE                            :0xedc8
14:35:25: Reserv3                                       :0x0
14:35:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:25: Reserv4                                       :0x0
14:35:25: Write Speed Factor R2W_FACTOR                 :0x2
14:35:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:25: FILE_FORMAT_GRP                               :0x0
14:35:25: COPY flag                                     :0x1
14:35:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:25: File_Format                                   :0x0
14:35:25: CRC                                           :0x0
14:35:25: ####CSD Registe Values####  

14:35:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:25: [GetSCRRegisterEntry] Passed
14:35:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:25: Data_Status_After Erases          : 0
14:35:25: CPRM Security Support             : No Security
14:35:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:25: Spec. Version                     : Version 3.0X
14:35:25: Extended Security Support         : Extended_Security_Not_Supported
14:35:25: Command Support                   : COMMAND_SUPPORT
14:35:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06685BA0>, <py_sfcl.CommandDataDefinition object at 0x066854E0>) , Command count = 1791 ] 
14:35:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683C90>, <py_sfcl.CommandDataDefinition object at 0x060327B0>) , Command count = 1792 ] 
14:35:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:26: [ SetBusWidth(0x4) , Command count = 1793 ] 
14:35:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685270>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1794 ] 
14:35:26: Protected Area Size 0x28000
14:35:26: Bus Width           2
14:35:26: Secure Mode         0
14:35:26: Speed  Class        4
14:35:26: Perf Move           0
14:35:26: Au Size             9
14:35:26: Erase Size          15
14:35:26: Erase Timeout       1
14:35:26: Erase offset        1
14:35:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1795 ] 
14:35:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:26: Host Frequency set to 100000 KHz
14:35:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:26: ####CSD Registe 2.0 Values####
14:35:26: CSD_STRUCTURE                                 :0x1
14:35:26: Reserv1                                       :0x0
14:35:26: Time Access 1 TAAC                            :0xe
14:35:26: Time Access 2 NSAC*100                        :0x0
14:35:26: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:26: Card Command Classess CCC                     :0x5b5
14:35:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:26: DSR(driver stage register)  DSR_IMP           :0x0
14:35:26: Reserv2                                       :0x0
14:35:26: Device Size C_SIZE                            :0xedc8
14:35:26: Reserv3                                       :0x0
14:35:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:26: Reserv4                                       :0x0
14:35:26: Write Speed Factor R2W_FACTOR                 :0x2
14:35:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:26: FILE_FORMAT_GRP                               :0x0
14:35:26: COPY flag                                     :0x1
14:35:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:26: File_Format                                   :0x0
14:35:26: CRC                                           :0x0
14:35:26: ####CSD Registe Values####  

14:35:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683E10>, <py_sfcl.CommandDataDefinition object at 0x066834E0>) , Command count = 1796 ] 
14:35:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FED0>, <py_sfcl.CommandDataDefinition object at 0x066857E0>) , Command count = 1797 ] 
14:35:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:26: [DVTCommonLib]### Erase :Erase API Called
14:35:26: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x34010 with Blockcount:0x2001
14:35:26: [ EraseLba(0x34010, 0x2001) , Command count = 1798 ] 
14:35:26: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x34010 with Blockcount:0x2001 

14:35:26: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 1
14:35:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x36010 to EndLba:0x36018 with Increment Pattern
14:35:26: [ WrLbaNoData(0x36010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1799 ] 
14:35:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x36010 to EndLba:0x36018 with Increment Pattern 

14:35:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683FC0>, <py_sfcl.CommandDataDefinition object at 0x06685030>) , Command count = 1800 ] 
14:35:26: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683BA0>, <py_sfcl.CommandDataDefinition object at 0x066850F0>) , Command count = 1801 ] 
14:35:26: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:26: [DVTCommonLib]###  R1bCommandAbort called
14:35:26: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x10, False) , Command count = 1802 ] 
14:35:26: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:26: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:28: Host Frequency set to 25000 KHz
14:35:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:28: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683780>, 0x0, True) , Command count = 1803 ] 
14:35:28: [GO18_globalSetVolt]### Host voltage value is set.
14:35:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x06572060>, 0x0, False) , Command count = 1804 ] 
14:35:28: [GO18_globalSetVolt]### Host voltage value is set.
14:35:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1805 ] 
14:35:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1806 ] 
14:35:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1807 ] 
14:35:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8FC0>, <py_sfcl.CommandDataDefinition object at 0x066853C0>) , Command count = 1808 ] 
14:35:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BF90>, <py_sfcl.CommandDataDefinition object at 0x06685C90>) , Command count = 1809 ] 
14:35:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:28: [ SetCardRCA(0x1, 0xD555) , Command count = 1810 ] 
14:35:28: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:28: Host Frequency set to 25000 KHz
14:35:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:28: ####CSD Registe 2.0 Values####
14:35:28: CSD_STRUCTURE                                 :0x1
14:35:28: Reserv1                                       :0x0
14:35:28: Time Access 1 TAAC                            :0xe
14:35:28: Time Access 2 NSAC*100                        :0x0
14:35:28: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:28: Card Command Classess CCC                     :0x5b5
14:35:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:28: DSR(driver stage register)  DSR_IMP           :0x0
14:35:28: Reserv2                                       :0x0
14:35:28: Device Size C_SIZE                            :0xedc8
14:35:28: Reserv3                                       :0x0
14:35:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:28: Reserv4                                       :0x0
14:35:28: Write Speed Factor R2W_FACTOR                 :0x2
14:35:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:28: FILE_FORMAT_GRP                               :0x0
14:35:28: COPY flag                                     :0x1
14:35:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:28: File_Format                                   :0x0
14:35:28: CRC                                           :0x0
14:35:28: ####CSD Registe Values####  

14:35:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:28: [GetSCRRegisterEntry] Passed
14:35:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:28: Data_Status_After Erases          : 0
14:35:28: CPRM Security Support             : No Security
14:35:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:28: Spec. Version                     : Version 3.0X
14:35:28: Extended Security Support         : Extended_Security_Not_Supported
14:35:28: Command Support                   : COMMAND_SUPPORT
14:35:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06685420>, <py_sfcl.CommandDataDefinition object at 0x066858A0>) , Command count = 1811 ] 
14:35:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEDAE0>, <py_sfcl.CommandDataDefinition object at 0x06685AE0>) , Command count = 1812 ] 
14:35:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:28: [ SetBusWidth(0x4) , Command count = 1813 ] 
14:35:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685CF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1814 ] 
14:35:28: Protected Area Size 0x28000
14:35:28: Bus Width           2
14:35:28: Secure Mode         0
14:35:28: Speed  Class        4
14:35:28: Perf Move           0
14:35:28: Au Size             9
14:35:28: Erase Size          15
14:35:28: Erase Timeout       1
14:35:28: Erase offset        1
14:35:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1815 ] 
14:35:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:28: Host Frequency set to 100000 KHz
14:35:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:28: ####CSD Registe 2.0 Values####
14:35:28: CSD_STRUCTURE                                 :0x1
14:35:28: Reserv1                                       :0x0
14:35:28: Time Access 1 TAAC                            :0xe
14:35:28: Time Access 2 NSAC*100                        :0x0
14:35:28: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:28: Card Command Classess CCC                     :0x5b5
14:35:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:28: DSR(driver stage register)  DSR_IMP           :0x0
14:35:28: Reserv2                                       :0x0
14:35:28: Device Size C_SIZE                            :0xedc8
14:35:28: Reserv3                                       :0x0
14:35:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:28: Reserv4                                       :0x0
14:35:28: Write Speed Factor R2W_FACTOR                 :0x2
14:35:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:28: FILE_FORMAT_GRP                               :0x0
14:35:28: COPY flag                                     :0x1
14:35:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:28: File_Format                                   :0x0
14:35:28: CRC                                           :0x0
14:35:28: ####CSD Registe Values####  

14:35:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602B6C0>, <py_sfcl.CommandDataDefinition object at 0x066858D0>) , Command count = 1816 ] 
14:35:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683930>, <py_sfcl.CommandDataDefinition object at 0x06685450>) , Command count = 1817 ] 
14:35:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:28: [DVTCommonLib]### Erase :Erase API Called
14:35:28: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x36010 with Blockcount:0x2001
14:35:28: [ EraseLba(0x36010, 0x2001) , Command count = 1818 ] 
14:35:28: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x36010 with Blockcount:0x2001 

14:35:28: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 0
14:35:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x38010 to EndLba:0x38018 with Increment Pattern
14:35:28: [ WrLbaNoData(0x38010, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1819 ] 
14:35:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x38010 to EndLba:0x38018 with Increment Pattern 

14:35:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDAC90>, <py_sfcl.CommandDataDefinition object at 0x06666D50>) , Command count = 1820 ] 
14:35:28: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8CC0>, <py_sfcl.CommandDataDefinition object at 0x06685A80>) , Command count = 1821 ] 
14:35:28: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:28: [DVTCommonLib]###  R1bCommandAbort called
14:35:29: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x8, False) , Command count = 1822 ] 
14:35:29: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:29: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:31: Host Frequency set to 25000 KHz
14:35:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:31: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683F30>, 0x0, True) , Command count = 1823 ] 
14:35:31: [GO18_globalSetVolt]### Host voltage value is set.
14:35:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x0665BDB0>, 0x0, False) , Command count = 1824 ] 
14:35:31: [GO18_globalSetVolt]### Host voltage value is set.
14:35:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1825 ] 
14:35:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1826 ] 
14:35:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1827 ] 
14:35:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060329F0>, <py_sfcl.CommandDataDefinition object at 0x06666720>) , Command count = 1828 ] 
14:35:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BC60>, <py_sfcl.CommandDataDefinition object at 0x066855D0>) , Command count = 1829 ] 
14:35:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:31: [ SetCardRCA(0x1, 0xD555) , Command count = 1830 ] 
14:35:31: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:31: Host Frequency set to 25000 KHz
14:35:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:31: ####CSD Registe 2.0 Values####
14:35:31: CSD_STRUCTURE                                 :0x1
14:35:31: Reserv1                                       :0x0
14:35:31: Time Access 1 TAAC                            :0xe
14:35:31: Time Access 2 NSAC*100                        :0x0
14:35:31: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:31: Card Command Classess CCC                     :0x5b5
14:35:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:31: DSR(driver stage register)  DSR_IMP           :0x0
14:35:31: Reserv2                                       :0x0
14:35:31: Device Size C_SIZE                            :0xedc8
14:35:31: Reserv3                                       :0x0
14:35:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:31: Reserv4                                       :0x0
14:35:31: Write Speed Factor R2W_FACTOR                 :0x2
14:35:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:31: FILE_FORMAT_GRP                               :0x0
14:35:31: COPY flag                                     :0x1
14:35:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:31: File_Format                                   :0x0
14:35:31: CRC                                           :0x0
14:35:31: ####CSD Registe Values####  

14:35:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:31: [GetSCRRegisterEntry] Passed
14:35:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:31: Data_Status_After Erases          : 0
14:35:31: CPRM Security Support             : No Security
14:35:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:31: Spec. Version                     : Version 3.0X
14:35:31: Extended Security Support         : Extended_Security_Not_Supported
14:35:31: Command Support                   : COMMAND_SUPPORT
14:35:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666DE0>, <py_sfcl.CommandDataDefinition object at 0x066852A0>) , Command count = 1831 ] 
14:35:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032AB0>, <py_sfcl.CommandDataDefinition object at 0x066AB120>) , Command count = 1832 ] 
14:35:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:31: [ SetBusWidth(0x4) , Command count = 1833 ] 
14:35:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06666120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1834 ] 
14:35:31: Protected Area Size 0x28000
14:35:31: Bus Width           2
14:35:31: Secure Mode         0
14:35:31: Speed  Class        4
14:35:31: Perf Move           0
14:35:31: Au Size             9
14:35:31: Erase Size          15
14:35:31: Erase Timeout       1
14:35:31: Erase offset        1
14:35:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1835 ] 
14:35:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:31: Host Frequency set to 100000 KHz
14:35:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:31: ####CSD Registe 2.0 Values####
14:35:31: CSD_STRUCTURE                                 :0x1
14:35:31: Reserv1                                       :0x0
14:35:31: Time Access 1 TAAC                            :0xe
14:35:31: Time Access 2 NSAC*100                        :0x0
14:35:31: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:31: Card Command Classess CCC                     :0x5b5
14:35:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:31: DSR(driver stage register)  DSR_IMP           :0x0
14:35:31: Reserv2                                       :0x0
14:35:31: Device Size C_SIZE                            :0xedc8
14:35:31: Reserv3                                       :0x0
14:35:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:31: Reserv4                                       :0x0
14:35:31: Write Speed Factor R2W_FACTOR                 :0x2
14:35:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:31: FILE_FORMAT_GRP                               :0x0
14:35:31: COPY flag                                     :0x1
14:35:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:31: File_Format                                   :0x0
14:35:31: CRC                                           :0x0
14:35:31: ####CSD Registe Values####  

14:35:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032B40>, <py_sfcl.CommandDataDefinition object at 0x06666FC0>) , Command count = 1836 ] 
14:35:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E5BDB0>, <py_sfcl.CommandDataDefinition object at 0x06685CF0>) , Command count = 1837 ] 
14:35:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:31: [DVTCommonLib]### Erase :Erase API Called
14:35:31: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x38010 with Blockcount:0x2001
14:35:31: [ EraseLba(0x38010, 0x2001) , Command count = 1838 ] 
14:35:31: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x38010 with Blockcount:0x2001 

14:35:31: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Outer loop Count 1020
14:35:31: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 28
14:35:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x18 to EndLba:0x20 with Increment Pattern
14:35:31: [ WrLbaNoData(0x18, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1839 ] 
14:35:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x18 to EndLba:0x20 with Increment Pattern 

14:35:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572300>, <py_sfcl.CommandDataDefinition object at 0x066AB210>) , Command count = 1840 ] 
14:35:31: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032960>, <py_sfcl.CommandDataDefinition object at 0x06685CF0>) , Command count = 1841 ] 
14:35:31: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:31: [DVTCommonLib]###  R1bCommandAbort called
14:35:31: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x14, False) , Command count = 1842 ] 
14:35:31: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:31: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:33: Host Frequency set to 25000 KHz
14:35:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x06032E10>, 0x0, True) , Command count = 1843 ] 
14:35:33: [GO18_globalSetVolt]### Host voltage value is set.
14:35:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABE40>, 0x0, False) , Command count = 1844 ] 
14:35:34: [GO18_globalSetVolt]### Host voltage value is set.
14:35:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1845 ] 
14:35:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1846 ] 
14:35:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1847 ] 
14:35:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BED0>, <py_sfcl.CommandDataDefinition object at 0x066AB180>) , Command count = 1848 ] 
14:35:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABEA0>, <py_sfcl.CommandDataDefinition object at 0x06685CF0>) , Command count = 1849 ] 
14:35:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1850 ] 
14:35:34: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:34: Host Frequency set to 25000 KHz
14:35:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:34: ####CSD Registe 2.0 Values####
14:35:34: CSD_STRUCTURE                                 :0x1
14:35:34: Reserv1                                       :0x0
14:35:34: Time Access 1 TAAC                            :0xe
14:35:34: Time Access 2 NSAC*100                        :0x0
14:35:34: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:34: Card Command Classess CCC                     :0x5b5
14:35:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:34: DSR(driver stage register)  DSR_IMP           :0x0
14:35:34: Reserv2                                       :0x0
14:35:34: Device Size C_SIZE                            :0xedc8
14:35:34: Reserv3                                       :0x0
14:35:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:34: Reserv4                                       :0x0
14:35:34: Write Speed Factor R2W_FACTOR                 :0x2
14:35:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:34: FILE_FORMAT_GRP                               :0x0
14:35:34: COPY flag                                     :0x1
14:35:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:34: File_Format                                   :0x0
14:35:34: CRC                                           :0x0
14:35:34: ####CSD Registe Values####  

14:35:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:34: [GetSCRRegisterEntry] Passed
14:35:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:34: Data_Status_After Erases          : 0
14:35:34: CPRM Security Support             : No Security
14:35:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:34: Spec. Version                     : Version 3.0X
14:35:34: Extended Security Support         : Extended_Security_Not_Supported
14:35:34: Command Support                   : COMMAND_SUPPORT
14:35:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666D80>, <py_sfcl.CommandDataDefinition object at 0x066663F0>) , Command count = 1851 ] 
14:35:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB240>, <py_sfcl.CommandDataDefinition object at 0x066AB480>) , Command count = 1852 ] 
14:35:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:34: [ SetBusWidth(0x4) , Command count = 1853 ] 
14:35:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06666360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1854 ] 
14:35:34: Protected Area Size 0x28000
14:35:34: Bus Width           2
14:35:34: Secure Mode         0
14:35:34: Speed  Class        4
14:35:34: Perf Move           0
14:35:34: Au Size             9
14:35:34: Erase Size          15
14:35:34: Erase Timeout       1
14:35:34: Erase offset        1
14:35:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1855 ] 
14:35:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:34: Host Frequency set to 100000 KHz
14:35:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:34: ####CSD Registe 2.0 Values####
14:35:34: CSD_STRUCTURE                                 :0x1
14:35:34: Reserv1                                       :0x0
14:35:34: Time Access 1 TAAC                            :0xe
14:35:34: Time Access 2 NSAC*100                        :0x0
14:35:34: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:34: Card Command Classess CCC                     :0x5b5
14:35:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:34: DSR(driver stage register)  DSR_IMP           :0x0
14:35:34: Reserv2                                       :0x0
14:35:34: Device Size C_SIZE                            :0xedc8
14:35:34: Reserv3                                       :0x0
14:35:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:34: Reserv4                                       :0x0
14:35:34: Write Speed Factor R2W_FACTOR                 :0x2
14:35:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:34: FILE_FORMAT_GRP                               :0x0
14:35:34: COPY flag                                     :0x1
14:35:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:34: File_Format                                   :0x0
14:35:34: CRC                                           :0x0
14:35:34: ####CSD Registe Values####  

14:35:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666840>, <py_sfcl.CommandDataDefinition object at 0x06666120>) , Command count = 1856 ] 
14:35:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032B10>, <py_sfcl.CommandDataDefinition object at 0x06685A20>) , Command count = 1857 ] 
14:35:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:34: [DVTCommonLib]### Erase :Erase API Called
14:35:34: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x18 with Blockcount:0x2001
14:35:34: [ EraseLba(0x18, 0x2001) , Command count = 1858 ] 
14:35:34: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x18 with Blockcount:0x2001 

14:35:34: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 27
14:35:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2018 to EndLba:0x2020 with Increment Pattern
14:35:34: [ WrLbaNoData(0x2018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1859 ] 
14:35:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2018 to EndLba:0x2020 with Increment Pattern 

14:35:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB690>, <py_sfcl.CommandDataDefinition object at 0x066ABF90>) , Command count = 1860 ] 
14:35:34: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666870>, <py_sfcl.CommandDataDefinition object at 0x0667A3F0>) , Command count = 1861 ] 
14:35:34: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:34: [DVTCommonLib]###  R1bCommandAbort called
14:35:34: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1B, False) , Command count = 1862 ] 
14:35:34: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:34: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:36: Host Frequency set to 25000 KHz
14:35:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:36: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x065721E0>, 0x0, True) , Command count = 1863 ] 
14:35:36: [GO18_globalSetVolt]### Host voltage value is set.
14:35:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A6C0>, 0x0, False) , Command count = 1864 ] 
14:35:36: [GO18_globalSetVolt]### Host voltage value is set.
14:35:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1865 ] 
14:35:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1866 ] 
14:35:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1867 ] 
14:35:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572330>, <py_sfcl.CommandDataDefinition object at 0x066AB2A0>) , Command count = 1868 ] 
14:35:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A4E0>, <py_sfcl.CommandDataDefinition object at 0x06666870>) , Command count = 1869 ] 
14:35:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1870 ] 
14:35:37: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:37: Host Frequency set to 25000 KHz
14:35:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:37: ####CSD Registe 2.0 Values####
14:35:37: CSD_STRUCTURE                                 :0x1
14:35:37: Reserv1                                       :0x0
14:35:37: Time Access 1 TAAC                            :0xe
14:35:37: Time Access 2 NSAC*100                        :0x0
14:35:37: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:37: Card Command Classess CCC                     :0x5b5
14:35:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:37: DSR(driver stage register)  DSR_IMP           :0x0
14:35:37: Reserv2                                       :0x0
14:35:37: Device Size C_SIZE                            :0xedc8
14:35:37: Reserv3                                       :0x0
14:35:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:37: Reserv4                                       :0x0
14:35:37: Write Speed Factor R2W_FACTOR                 :0x2
14:35:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:37: FILE_FORMAT_GRP                               :0x0
14:35:37: COPY flag                                     :0x1
14:35:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:37: File_Format                                   :0x0
14:35:37: CRC                                           :0x0
14:35:37: ####CSD Registe Values####  

14:35:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:37: [GetSCRRegisterEntry] Passed
14:35:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:37: Data_Status_After Erases          : 0
14:35:37: CPRM Security Support             : No Security
14:35:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:37: Spec. Version                     : Version 3.0X
14:35:37: Extended Security Support         : Extended_Security_Not_Supported
14:35:37: Command Support                   : COMMAND_SUPPORT
14:35:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB300>, <py_sfcl.CommandDataDefinition object at 0x0667A840>) , Command count = 1871 ] 
14:35:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB2D0>, <py_sfcl.CommandDataDefinition object at 0x0667A300>) , Command count = 1872 ] 
14:35:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:37: [ SetBusWidth(0x4) , Command count = 1873 ] 
14:35:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06666090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1874 ] 
14:35:37: Protected Area Size 0x28000
14:35:37: Bus Width           2
14:35:37: Secure Mode         0
14:35:37: Speed  Class        4
14:35:37: Perf Move           0
14:35:37: Au Size             9
14:35:37: Erase Size          15
14:35:37: Erase Timeout       1
14:35:37: Erase offset        1
14:35:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1875 ] 
14:35:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:37: Host Frequency set to 100000 KHz
14:35:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:37: ####CSD Registe 2.0 Values####
14:35:37: CSD_STRUCTURE                                 :0x1
14:35:37: Reserv1                                       :0x0
14:35:37: Time Access 1 TAAC                            :0xe
14:35:37: Time Access 2 NSAC*100                        :0x0
14:35:37: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:37: Card Command Classess CCC                     :0x5b5
14:35:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:37: DSR(driver stage register)  DSR_IMP           :0x0
14:35:37: Reserv2                                       :0x0
14:35:37: Device Size C_SIZE                            :0xedc8
14:35:37: Reserv3                                       :0x0
14:35:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:37: Reserv4                                       :0x0
14:35:37: Write Speed Factor R2W_FACTOR                 :0x2
14:35:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:37: FILE_FORMAT_GRP                               :0x0
14:35:37: COPY flag                                     :0x1
14:35:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:37: File_Format                                   :0x0
14:35:37: CRC                                           :0x0
14:35:37: ####CSD Registe Values####  

14:35:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB3F0>, <py_sfcl.CommandDataDefinition object at 0x0667A7E0>) , Command count = 1876 ] 
14:35:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06685900>, <py_sfcl.CommandDataDefinition object at 0x066857B0>) , Command count = 1877 ] 
14:35:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:37: [DVTCommonLib]### Erase :Erase API Called
14:35:37: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2018 with Blockcount:0x2001
14:35:37: [ EraseLba(0x2018, 0x2001) , Command count = 1878 ] 
14:35:37: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2018 with Blockcount:0x2001 

14:35:37: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 26
14:35:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x4018 to EndLba:0x4020 with Increment Pattern
14:35:37: [ WrLbaNoData(0x4018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1879 ] 
14:35:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x4018 to EndLba:0x4020 with Increment Pattern 

14:35:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB9F0>, <py_sfcl.CommandDataDefinition object at 0x0667A030>) , Command count = 1880 ] 
14:35:37: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066662A0>, <py_sfcl.CommandDataDefinition object at 0x06685900>) , Command count = 1881 ] 
14:35:37: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:37: [DVTCommonLib]###  R1bCommandAbort called
14:35:37: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x12, False) , Command count = 1882 ] 
14:35:37: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:37: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:39: Host Frequency set to 25000 KHz
14:35:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:39: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB5D0>, 0x0, True) , Command count = 1883 ] 
14:35:39: [GO18_globalSetVolt]### Host voltage value is set.
14:35:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB450>, 0x0, False) , Command count = 1884 ] 
14:35:39: [GO18_globalSetVolt]### Host voltage value is set.
14:35:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1885 ] 
14:35:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1886 ] 
14:35:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1887 ] 
14:35:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABFC0>, <py_sfcl.CommandDataDefinition object at 0x0667ACF0>) , Command count = 1888 ] 
14:35:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F630>, <py_sfcl.CommandDataDefinition object at 0x0667ABA0>) , Command count = 1889 ] 
14:35:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:39: [ SetCardRCA(0x1, 0xD555) , Command count = 1890 ] 
14:35:39: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:39: Host Frequency set to 25000 KHz
14:35:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:39: ####CSD Registe 2.0 Values####
14:35:39: CSD_STRUCTURE                                 :0x1
14:35:39: Reserv1                                       :0x0
14:35:39: Time Access 1 TAAC                            :0xe
14:35:39: Time Access 2 NSAC*100                        :0x0
14:35:39: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:39: Card Command Classess CCC                     :0x5b5
14:35:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:39: DSR(driver stage register)  DSR_IMP           :0x0
14:35:39: Reserv2                                       :0x0
14:35:39: Device Size C_SIZE                            :0xedc8
14:35:39: Reserv3                                       :0x0
14:35:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:39: Reserv4                                       :0x0
14:35:39: Write Speed Factor R2W_FACTOR                 :0x2
14:35:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:39: FILE_FORMAT_GRP                               :0x0
14:35:39: COPY flag                                     :0x1
14:35:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:39: File_Format                                   :0x0
14:35:39: CRC                                           :0x0
14:35:39: ####CSD Registe Values####  

14:35:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:39: [GetSCRRegisterEntry] Passed
14:35:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:39: Data_Status_After Erases          : 0
14:35:39: CPRM Security Support             : No Security
14:35:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:39: Spec. Version                     : Version 3.0X
14:35:39: Extended Security Support         : Extended_Security_Not_Supported
14:35:40: Command Support                   : COMMAND_SUPPORT
14:35:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF00>, <py_sfcl.CommandDataDefinition object at 0x0667AF60>) , Command count = 1891 ] 
14:35:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A1E0>, <py_sfcl.CommandDataDefinition object at 0x0667A8A0>) , Command count = 1892 ] 
14:35:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:40: [ SetBusWidth(0x4) , Command count = 1893 ] 
14:35:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A1B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1894 ] 
14:35:40: Protected Area Size 0x28000
14:35:40: Bus Width           2
14:35:40: Secure Mode         0
14:35:40: Speed  Class        4
14:35:40: Perf Move           0
14:35:40: Au Size             9
14:35:40: Erase Size          15
14:35:40: Erase Timeout       1
14:35:40: Erase offset        1
14:35:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1895 ] 
14:35:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:40: Host Frequency set to 100000 KHz
14:35:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:40: ####CSD Registe 2.0 Values####
14:35:40: CSD_STRUCTURE                                 :0x1
14:35:40: Reserv1                                       :0x0
14:35:40: Time Access 1 TAAC                            :0xe
14:35:40: Time Access 2 NSAC*100                        :0x0
14:35:40: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:40: Card Command Classess CCC                     :0x5b5
14:35:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:40: DSR(driver stage register)  DSR_IMP           :0x0
14:35:40: Reserv2                                       :0x0
14:35:40: Device Size C_SIZE                            :0xedc8
14:35:40: Reserv3                                       :0x0
14:35:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:40: Reserv4                                       :0x0
14:35:40: Write Speed Factor R2W_FACTOR                 :0x2
14:35:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:40: FILE_FORMAT_GRP                               :0x0
14:35:40: COPY flag                                     :0x1
14:35:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:40: File_Format                                   :0x0
14:35:40: CRC                                           :0x0
14:35:40: ####CSD Registe Values####  

14:35:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666750>, <py_sfcl.CommandDataDefinition object at 0x0667AB40>) , Command count = 1896 ] 
14:35:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066668A0>, <py_sfcl.CommandDataDefinition object at 0x06685150>) , Command count = 1897 ] 
14:35:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:40: [DVTCommonLib]### Erase :Erase API Called
14:35:40: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x4018 with Blockcount:0x2001
14:35:40: [ EraseLba(0x4018, 0x2001) , Command count = 1898 ] 
14:35:40: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x4018 with Blockcount:0x2001 

14:35:40: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 25
14:35:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x6018 to EndLba:0x6020 with Increment Pattern
14:35:40: [ WrLbaNoData(0x6018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1899 ] 
14:35:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x6018 to EndLba:0x6020 with Increment Pattern 

14:35:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AB10>, <py_sfcl.CommandDataDefinition object at 0x0667A960>) , Command count = 1900 ] 
14:35:40: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C570>, <py_sfcl.CommandDataDefinition object at 0x0667A360>) , Command count = 1901 ] 
14:35:40: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:40: [DVTCommonLib]###  R1bCommandAbort called
14:35:40: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1F, False) , Command count = 1902 ] 
14:35:40: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:40: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:42: Host Frequency set to 25000 KHz
14:35:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:42: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A690>, 0x0, True) , Command count = 1903 ] 
14:35:42: [GO18_globalSetVolt]### Host voltage value is set.
14:35:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C510>, 0x0, False) , Command count = 1904 ] 
14:35:42: [GO18_globalSetVolt]### Host voltage value is set.
14:35:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1905 ] 
14:35:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1906 ] 
14:35:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1907 ] 
14:35:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C390>, <py_sfcl.CommandDataDefinition object at 0x0667AD80>) , Command count = 1908 ] 
14:35:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C720>, <py_sfcl.CommandDataDefinition object at 0x0667A630>) , Command count = 1909 ] 
14:35:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:42: [ SetCardRCA(0x1, 0xD555) , Command count = 1910 ] 
14:35:42: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:42: Host Frequency set to 25000 KHz
14:35:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:42: ####CSD Registe 2.0 Values####
14:35:42: CSD_STRUCTURE                                 :0x1
14:35:42: Reserv1                                       :0x0
14:35:42: Time Access 1 TAAC                            :0xe
14:35:42: Time Access 2 NSAC*100                        :0x0
14:35:42: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:42: Card Command Classess CCC                     :0x5b5
14:35:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:42: DSR(driver stage register)  DSR_IMP           :0x0
14:35:42: Reserv2                                       :0x0
14:35:42: Device Size C_SIZE                            :0xedc8
14:35:42: Reserv3                                       :0x0
14:35:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:42: Reserv4                                       :0x0
14:35:42: Write Speed Factor R2W_FACTOR                 :0x2
14:35:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:42: FILE_FORMAT_GRP                               :0x0
14:35:42: COPY flag                                     :0x1
14:35:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:42: File_Format                                   :0x0
14:35:42: CRC                                           :0x0
14:35:42: ####CSD Registe Values####  

14:35:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:42: [GetSCRRegisterEntry] Passed
14:35:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:42: Data_Status_After Erases          : 0
14:35:42: CPRM Security Support             : No Security
14:35:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:42: Spec. Version                     : Version 3.0X
14:35:42: Extended Security Support         : Extended_Security_Not_Supported
14:35:42: Command Support                   : COMMAND_SUPPORT
14:35:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB660>, <py_sfcl.CommandDataDefinition object at 0x0667A810>) , Command count = 1911 ] 
14:35:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C2D0>, <py_sfcl.CommandDataDefinition object at 0x0667C7B0>) , Command count = 1912 ] 
14:35:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:42: [ SetBusWidth(0x4) , Command count = 1913 ] 
14:35:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C8A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1914 ] 
14:35:42: Protected Area Size 0x28000
14:35:42: Bus Width           2
14:35:42: Secure Mode         0
14:35:42: Speed  Class        4
14:35:42: Perf Move           0
14:35:42: Au Size             9
14:35:42: Erase Size          15
14:35:42: Erase Timeout       1
14:35:42: Erase offset        1
14:35:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1915 ] 
14:35:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:42: Host Frequency set to 100000 KHz
14:35:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:42: ####CSD Registe 2.0 Values####
14:35:42: CSD_STRUCTURE                                 :0x1
14:35:42: Reserv1                                       :0x0
14:35:42: Time Access 1 TAAC                            :0xe
14:35:42: Time Access 2 NSAC*100                        :0x0
14:35:42: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:42: Card Command Classess CCC                     :0x5b5
14:35:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:42: DSR(driver stage register)  DSR_IMP           :0x0
14:35:42: Reserv2                                       :0x0
14:35:42: Device Size C_SIZE                            :0xedc8
14:35:42: Reserv3                                       :0x0
14:35:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:42: Reserv4                                       :0x0
14:35:42: Write Speed Factor R2W_FACTOR                 :0x2
14:35:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:42: FILE_FORMAT_GRP                               :0x0
14:35:42: COPY flag                                     :0x1
14:35:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:42: File_Format                                   :0x0
14:35:42: CRC                                           :0x0
14:35:42: ####CSD Registe Values####  

14:35:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C450>, <py_sfcl.CommandDataDefinition object at 0x0667A1B0>) , Command count = 1916 ] 
14:35:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ADE0>, <py_sfcl.CommandDataDefinition object at 0x066850C0>) , Command count = 1917 ] 
14:35:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:42: [DVTCommonLib]### Erase :Erase API Called
14:35:42: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x6018 with Blockcount:0x2001
14:35:42: [ EraseLba(0x6018, 0x2001) , Command count = 1918 ] 
14:35:42: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x6018 with Blockcount:0x2001 

14:35:42: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 24
14:35:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x8018 to EndLba:0x8020 with Increment Pattern
14:35:42: [ WrLbaNoData(0x8018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1919 ] 
14:35:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x8018 to EndLba:0x8020 with Increment Pattern 

14:35:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C330>, <py_sfcl.CommandDataDefinition object at 0x0667C1E0>) , Command count = 1920 ] 
14:35:42: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C600>, <py_sfcl.CommandDataDefinition object at 0x0667A540>) , Command count = 1921 ] 
14:35:42: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:42: [DVTCommonLib]###  R1bCommandAbort called
14:35:43: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x6, False) , Command count = 1922 ] 
14:35:43: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:43: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:45: Host Frequency set to 25000 KHz
14:35:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:45: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CB10>, 0x0, True) , Command count = 1923 ] 
14:35:45: [GO18_globalSetVolt]### Host voltage value is set.
14:35:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CE40>, 0x0, False) , Command count = 1924 ] 
14:35:45: [GO18_globalSetVolt]### Host voltage value is set.
14:35:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1925 ] 
14:35:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1926 ] 
14:35:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1927 ] 
14:35:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CB40>, <py_sfcl.CommandDataDefinition object at 0x0667C4E0>) , Command count = 1928 ] 
14:35:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066830C0>, <py_sfcl.CommandDataDefinition object at 0x0667AED0>) , Command count = 1929 ] 
14:35:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:45: [ SetCardRCA(0x1, 0xD555) , Command count = 1930 ] 
14:35:45: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:45: Host Frequency set to 25000 KHz
14:35:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:45: ####CSD Registe 2.0 Values####
14:35:45: CSD_STRUCTURE                                 :0x1
14:35:45: Reserv1                                       :0x0
14:35:45: Time Access 1 TAAC                            :0xe
14:35:45: Time Access 2 NSAC*100                        :0x0
14:35:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:45: Card Command Classess CCC                     :0x5b5
14:35:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:45: DSR(driver stage register)  DSR_IMP           :0x0
14:35:45: Reserv2                                       :0x0
14:35:45: Device Size C_SIZE                            :0xedc8
14:35:45: Reserv3                                       :0x0
14:35:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:45: Reserv4                                       :0x0
14:35:45: Write Speed Factor R2W_FACTOR                 :0x2
14:35:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:45: FILE_FORMAT_GRP                               :0x0
14:35:45: COPY flag                                     :0x1
14:35:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:45: File_Format                                   :0x0
14:35:45: CRC                                           :0x0
14:35:45: ####CSD Registe Values####  

14:35:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:45: [GetSCRRegisterEntry] Passed
14:35:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:45: Data_Status_After Erases          : 0
14:35:45: CPRM Security Support             : No Security
14:35:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:45: Spec. Version                     : Version 3.0X
14:35:45: Extended Security Support         : Extended_Security_Not_Supported
14:35:45: Command Support                   : COMMAND_SUPPORT
14:35:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C060>, <py_sfcl.CommandDataDefinition object at 0x0667CEA0>) , Command count = 1931 ] 
14:35:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CC90>, <py_sfcl.CommandDataDefinition object at 0x0667C270>) , Command count = 1932 ] 
14:35:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:45: [ SetBusWidth(0x4) , Command count = 1933 ] 
14:35:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667CF60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1934 ] 
14:35:45: Protected Area Size 0x28000
14:35:45: Bus Width           2
14:35:45: Secure Mode         0
14:35:45: Speed  Class        4
14:35:45: Perf Move           0
14:35:45: Au Size             9
14:35:45: Erase Size          15
14:35:45: Erase Timeout       1
14:35:45: Erase offset        1
14:35:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1935 ] 
14:35:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:45: Host Frequency set to 100000 KHz
14:35:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:45: ####CSD Registe 2.0 Values####
14:35:45: CSD_STRUCTURE                                 :0x1
14:35:45: Reserv1                                       :0x0
14:35:45: Time Access 1 TAAC                            :0xe
14:35:45: Time Access 2 NSAC*100                        :0x0
14:35:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:45: Card Command Classess CCC                     :0x5b5
14:35:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:45: DSR(driver stage register)  DSR_IMP           :0x0
14:35:45: Reserv2                                       :0x0
14:35:45: Device Size C_SIZE                            :0xedc8
14:35:45: Reserv3                                       :0x0
14:35:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:45: Reserv4                                       :0x0
14:35:45: Write Speed Factor R2W_FACTOR                 :0x2
14:35:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:45: FILE_FORMAT_GRP                               :0x0
14:35:45: COPY flag                                     :0x1
14:35:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:45: File_Format                                   :0x0
14:35:45: CRC                                           :0x0
14:35:45: ####CSD Registe Values####  

14:35:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C5D0>, <py_sfcl.CommandDataDefinition object at 0x0667C6C0>) , Command count = 1936 ] 
14:35:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C1B0>, <py_sfcl.CommandDataDefinition object at 0x066854B0>) , Command count = 1937 ] 
14:35:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:45: [DVTCommonLib]### Erase :Erase API Called
14:35:45: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x8018 with Blockcount:0x2001
14:35:45: [ EraseLba(0x8018, 0x2001) , Command count = 1938 ] 
14:35:45: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x8018 with Blockcount:0x2001 

14:35:45: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 23
14:35:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xA018 to EndLba:0xA020 with Increment Pattern
14:35:45: [ WrLbaNoData(0xA018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1939 ] 
14:35:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xA018 to EndLba:0xA020 with Increment Pattern 

14:35:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C240>, <py_sfcl.CommandDataDefinition object at 0x0667C540>) , Command count = 1940 ] 
14:35:45: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C120>, <py_sfcl.CommandDataDefinition object at 0x0667C960>) , Command count = 1941 ] 
14:35:45: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:45: [DVTCommonLib]###  R1bCommandAbort called
14:35:45: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x13, False) , Command count = 1942 ] 
14:35:45: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:45: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:47: Host Frequency set to 25000 KHz
14:35:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:47: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667ABD0>, 0x0, True) , Command count = 1943 ] 
14:35:47: [GO18_globalSetVolt]### Host voltage value is set.
14:35:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F600>, 0x0, False) , Command count = 1944 ] 
14:35:47: [GO18_globalSetVolt]### Host voltage value is set.
14:35:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1945 ] 
14:35:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1946 ] 
14:35:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1947 ] 
14:35:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F2D0>, <py_sfcl.CommandDataDefinition object at 0x0667C630>) , Command count = 1948 ] 
14:35:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F660>, <py_sfcl.CommandDataDefinition object at 0x0667CED0>) , Command count = 1949 ] 
14:35:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:48: [ SetCardRCA(0x1, 0xD555) , Command count = 1950 ] 
14:35:48: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:48: Host Frequency set to 25000 KHz
14:35:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:48: ####CSD Registe 2.0 Values####
14:35:48: CSD_STRUCTURE                                 :0x1
14:35:48: Reserv1                                       :0x0
14:35:48: Time Access 1 TAAC                            :0xe
14:35:48: Time Access 2 NSAC*100                        :0x0
14:35:48: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:48: Card Command Classess CCC                     :0x5b5
14:35:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:48: DSR(driver stage register)  DSR_IMP           :0x0
14:35:48: Reserv2                                       :0x0
14:35:48: Device Size C_SIZE                            :0xedc8
14:35:48: Reserv3                                       :0x0
14:35:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:48: Reserv4                                       :0x0
14:35:48: Write Speed Factor R2W_FACTOR                 :0x2
14:35:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:48: FILE_FORMAT_GRP                               :0x0
14:35:48: COPY flag                                     :0x1
14:35:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:48: File_Format                                   :0x0
14:35:48: CRC                                           :0x0
14:35:48: ####CSD Registe Values####  

14:35:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:48: [GetSCRRegisterEntry] Passed
14:35:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:48: Data_Status_After Erases          : 0
14:35:48: CPRM Security Support             : No Security
14:35:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:48: Spec. Version                     : Version 3.0X
14:35:48: Extended Security Support         : Extended_Security_Not_Supported
14:35:48: Command Support                   : COMMAND_SUPPORT
14:35:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CAB0>, <py_sfcl.CommandDataDefinition object at 0x0667C810>) , Command count = 1951 ] 
14:35:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F450>, <py_sfcl.CommandDataDefinition object at 0x0667F780>) , Command count = 1952 ] 
14:35:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:48: [ SetBusWidth(0x4) , Command count = 1953 ] 
14:35:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F0C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1954 ] 
14:35:48: Protected Area Size 0x28000
14:35:48: Bus Width           2
14:35:48: Secure Mode         0
14:35:48: Speed  Class        4
14:35:48: Perf Move           0
14:35:48: Au Size             9
14:35:48: Erase Size          15
14:35:48: Erase Timeout       1
14:35:48: Erase offset        1
14:35:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1955 ] 
14:35:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:48: Host Frequency set to 100000 KHz
14:35:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:48: ####CSD Registe 2.0 Values####
14:35:48: CSD_STRUCTURE                                 :0x1
14:35:48: Reserv1                                       :0x0
14:35:48: Time Access 1 TAAC                            :0xe
14:35:48: Time Access 2 NSAC*100                        :0x0
14:35:48: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:48: Card Command Classess CCC                     :0x5b5
14:35:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:48: DSR(driver stage register)  DSR_IMP           :0x0
14:35:48: Reserv2                                       :0x0
14:35:48: Device Size C_SIZE                            :0xedc8
14:35:48: Reserv3                                       :0x0
14:35:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:48: Reserv4                                       :0x0
14:35:48: Write Speed Factor R2W_FACTOR                 :0x2
14:35:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:48: FILE_FORMAT_GRP                               :0x0
14:35:48: COPY flag                                     :0x1
14:35:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:48: File_Format                                   :0x0
14:35:48: CRC                                           :0x0
14:35:48: ####CSD Registe Values####  

14:35:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F390>, <py_sfcl.CommandDataDefinition object at 0x0667CF60>) , Command count = 1956 ] 
14:35:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AC90>, <py_sfcl.CommandDataDefinition object at 0x06685D80>) , Command count = 1957 ] 
14:35:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:48: [DVTCommonLib]### Erase :Erase API Called
14:35:48: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xA018 with Blockcount:0x2001
14:35:48: [ EraseLba(0xA018, 0x2001) , Command count = 1958 ] 
14:35:48: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xA018 with Blockcount:0x2001 

14:35:48: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 22
14:35:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xC018 to EndLba:0xC020 with Increment Pattern
14:35:48: [ WrLbaNoData(0xC018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1959 ] 
14:35:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xC018 to EndLba:0xC020 with Increment Pattern 

14:35:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F7E0>, <py_sfcl.CommandDataDefinition object at 0x0667FB10>) , Command count = 1960 ] 
14:35:48: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C8D0>, <py_sfcl.CommandDataDefinition object at 0x0667C930>) , Command count = 1961 ] 
14:35:48: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:48: [DVTCommonLib]###  R1bCommandAbort called
14:35:48: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x11, False) , Command count = 1962 ] 
14:35:48: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:50: Host Frequency set to 25000 KHz
14:35:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AE40>, 0x0, True) , Command count = 1963 ] 
14:35:50: [GO18_globalSetVolt]### Host voltage value is set.
14:35:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FD80>, 0x0, False) , Command count = 1964 ] 
14:35:50: [GO18_globalSetVolt]### Host voltage value is set.
14:35:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1965 ] 
14:35:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1966 ] 
14:35:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1967 ] 
14:35:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F360>, <py_sfcl.CommandDataDefinition object at 0x0667F270>) , Command count = 1968 ] 
14:35:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FE70>, <py_sfcl.CommandDataDefinition object at 0x0667C660>) , Command count = 1969 ] 
14:35:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:51: [ SetCardRCA(0x1, 0xD555) , Command count = 1970 ] 
14:35:51: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:51: Host Frequency set to 25000 KHz
14:35:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:51: ####CSD Registe 2.0 Values####
14:35:51: CSD_STRUCTURE                                 :0x1
14:35:51: Reserv1                                       :0x0
14:35:51: Time Access 1 TAAC                            :0xe
14:35:51: Time Access 2 NSAC*100                        :0x0
14:35:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:51: Card Command Classess CCC                     :0x5b5
14:35:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:51: DSR(driver stage register)  DSR_IMP           :0x0
14:35:51: Reserv2                                       :0x0
14:35:51: Device Size C_SIZE                            :0xedc8
14:35:51: Reserv3                                       :0x0
14:35:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:51: Reserv4                                       :0x0
14:35:51: Write Speed Factor R2W_FACTOR                 :0x2
14:35:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:51: FILE_FORMAT_GRP                               :0x0
14:35:51: COPY flag                                     :0x1
14:35:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:51: File_Format                                   :0x0
14:35:51: CRC                                           :0x0
14:35:51: ####CSD Registe Values####  

14:35:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:51: [GetSCRRegisterEntry] Passed
14:35:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:51: Data_Status_After Erases          : 0
14:35:51: CPRM Security Support             : No Security
14:35:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:51: Spec. Version                     : Version 3.0X
14:35:51: Extended Security Support         : Extended_Security_Not_Supported
14:35:51: Command Support                   : COMMAND_SUPPORT
14:35:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FDE0>, <py_sfcl.CommandDataDefinition object at 0x0667CBA0>) , Command count = 1971 ] 
14:35:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FBD0>, <py_sfcl.CommandDataDefinition object at 0x0667F870>) , Command count = 1972 ] 
14:35:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:51: [ SetBusWidth(0x4) , Command count = 1973 ] 
14:35:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F8A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1974 ] 
14:35:51: Protected Area Size 0x28000
14:35:51: Bus Width           2
14:35:51: Secure Mode         0
14:35:51: Speed  Class        4
14:35:51: Perf Move           0
14:35:51: Au Size             9
14:35:51: Erase Size          15
14:35:51: Erase Timeout       1
14:35:51: Erase offset        1
14:35:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1975 ] 
14:35:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:51: Host Frequency set to 100000 KHz
14:35:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:51: ####CSD Registe 2.0 Values####
14:35:51: CSD_STRUCTURE                                 :0x1
14:35:51: Reserv1                                       :0x0
14:35:51: Time Access 1 TAAC                            :0xe
14:35:51: Time Access 2 NSAC*100                        :0x0
14:35:51: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:51: Card Command Classess CCC                     :0x5b5
14:35:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:51: DSR(driver stage register)  DSR_IMP           :0x0
14:35:51: Reserv2                                       :0x0
14:35:51: Device Size C_SIZE                            :0xedc8
14:35:51: Reserv3                                       :0x0
14:35:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:51: Reserv4                                       :0x0
14:35:51: Write Speed Factor R2W_FACTOR                 :0x2
14:35:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:51: FILE_FORMAT_GRP                               :0x0
14:35:51: COPY flag                                     :0x1
14:35:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:51: File_Format                                   :0x0
14:35:51: CRC                                           :0x0
14:35:51: ####CSD Registe Values####  

14:35:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FF00>, <py_sfcl.CommandDataDefinition object at 0x0667F150>) , Command count = 1976 ] 
14:35:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F300>, <py_sfcl.CommandDataDefinition object at 0x0667C360>) , Command count = 1977 ] 
14:35:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:51: [DVTCommonLib]### Erase :Erase API Called
14:35:51: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xC018 with Blockcount:0x2001
14:35:51: [ EraseLba(0xC018, 0x2001) , Command count = 1978 ] 
14:35:51: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xC018 with Blockcount:0x2001 

14:35:51: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 21
14:35:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xE018 to EndLba:0xE020 with Increment Pattern
14:35:51: [ WrLbaNoData(0xE018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1979 ] 
14:35:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xE018 to EndLba:0xE020 with Increment Pattern 

14:35:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FE40>, <py_sfcl.CommandDataDefinition object at 0x0667F480>) , Command count = 1980 ] 
14:35:51: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CD50>, <py_sfcl.CommandDataDefinition object at 0x0667F090>) , Command count = 1981 ] 
14:35:51: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:51: [DVTCommonLib]###  R1bCommandAbort called
14:35:51: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2B, False) , Command count = 1982 ] 
14:35:51: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:53: Host Frequency set to 25000 KHz
14:35:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:53: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F720>, 0x0, True) , Command count = 1983 ] 
14:35:53: [GO18_globalSetVolt]### Host voltage value is set.
14:35:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABE70>, 0x0, False) , Command count = 1984 ] 
14:35:53: [GO18_globalSetVolt]### Host voltage value is set.
14:35:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1985 ] 
14:35:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1986 ] 
14:35:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1987 ] 
14:35:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066832D0>, <py_sfcl.CommandDataDefinition object at 0x0667F1E0>) , Command count = 1988 ] 
14:35:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066835A0>, <py_sfcl.CommandDataDefinition object at 0x0667F120>) , Command count = 1989 ] 
14:35:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:53: [ SetCardRCA(0x1, 0xD555) , Command count = 1990 ] 
14:35:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:53: Host Frequency set to 25000 KHz
14:35:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:53: ####CSD Registe 2.0 Values####
14:35:53: CSD_STRUCTURE                                 :0x1
14:35:53: Reserv1                                       :0x0
14:35:53: Time Access 1 TAAC                            :0xe
14:35:53: Time Access 2 NSAC*100                        :0x0
14:35:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:53: Card Command Classess CCC                     :0x5b5
14:35:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:53: DSR(driver stage register)  DSR_IMP           :0x0
14:35:53: Reserv2                                       :0x0
14:35:53: Device Size C_SIZE                            :0xedc8
14:35:53: Reserv3                                       :0x0
14:35:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:53: Reserv4                                       :0x0
14:35:53: Write Speed Factor R2W_FACTOR                 :0x2
14:35:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:53: FILE_FORMAT_GRP                               :0x0
14:35:53: COPY flag                                     :0x1
14:35:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:53: File_Format                                   :0x0
14:35:53: CRC                                           :0x0
14:35:53: ####CSD Registe Values####  

14:35:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:53: [GetSCRRegisterEntry] Passed
14:35:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:53: Data_Status_After Erases          : 0
14:35:53: CPRM Security Support             : No Security
14:35:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:53: Spec. Version                     : Version 3.0X
14:35:53: Extended Security Support         : Extended_Security_Not_Supported
14:35:53: Command Support                   : COMMAND_SUPPORT
14:35:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FCC0>, <py_sfcl.CommandDataDefinition object at 0x0667FEA0>) , Command count = 1991 ] 
14:35:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683630>, <py_sfcl.CommandDataDefinition object at 0x066836C0>) , Command count = 1992 ] 
14:35:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:54: [ SetBusWidth(0x4) , Command count = 1993 ] 
14:35:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1994 ] 
14:35:54: Protected Area Size 0x28000
14:35:54: Bus Width           2
14:35:54: Secure Mode         0
14:35:54: Speed  Class        4
14:35:54: Perf Move           0
14:35:54: Au Size             9
14:35:54: Erase Size          15
14:35:54: Erase Timeout       1
14:35:54: Erase offset        1
14:35:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1995 ] 
14:35:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:54: Host Frequency set to 100000 KHz
14:35:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:54: ####CSD Registe 2.0 Values####
14:35:54: CSD_STRUCTURE                                 :0x1
14:35:54: Reserv1                                       :0x0
14:35:54: Time Access 1 TAAC                            :0xe
14:35:54: Time Access 2 NSAC*100                        :0x0
14:35:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:54: Card Command Classess CCC                     :0x5b5
14:35:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:54: DSR(driver stage register)  DSR_IMP           :0x0
14:35:54: Reserv2                                       :0x0
14:35:54: Device Size C_SIZE                            :0xedc8
14:35:54: Reserv3                                       :0x0
14:35:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:54: Reserv4                                       :0x0
14:35:54: Write Speed Factor R2W_FACTOR                 :0x2
14:35:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:54: FILE_FORMAT_GRP                               :0x0
14:35:54: COPY flag                                     :0x1
14:35:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:54: File_Format                                   :0x0
14:35:54: CRC                                           :0x0
14:35:54: ####CSD Registe Values####  

14:35:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F750>, <py_sfcl.CommandDataDefinition object at 0x0667F8A0>) , Command count = 1996 ] 
14:35:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F240>, <py_sfcl.CommandDataDefinition object at 0x0667FAE0>) , Command count = 1997 ] 
14:35:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:54: [DVTCommonLib]### Erase :Erase API Called
14:35:54: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xE018 with Blockcount:0x2001
14:35:54: [ EraseLba(0xE018, 0x2001) , Command count = 1998 ] 
14:35:54: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xE018 with Blockcount:0x2001 

14:35:54: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 20
14:35:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x10018 to EndLba:0x10020 with Increment Pattern
14:35:54: [ WrLbaNoData(0x10018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 1999 ] 
14:35:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x10018 to EndLba:0x10020 with Increment Pattern 

14:35:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683180>, <py_sfcl.CommandDataDefinition object at 0x06683A50>) , Command count = 2000 ] 
14:35:54: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F810>, <py_sfcl.CommandDataDefinition object at 0x0667F4E0>) , Command count = 2001 ] 
14:35:54: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:54: [DVTCommonLib]###  R1bCommandAbort called
14:35:54: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x22, False) , Command count = 2002 ] 
14:35:54: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:54: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:56: Host Frequency set to 25000 KHz
14:35:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:56: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683B70>, 0x0, True) , Command count = 2003 ] 
14:35:56: [GO18_globalSetVolt]### Host voltage value is set.
14:35:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683CC0>, 0x0, False) , Command count = 2004 ] 
14:35:56: [GO18_globalSetVolt]### Host voltage value is set.
14:35:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2005 ] 
14:35:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2006 ] 
14:35:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2007 ] 
14:35:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683990>, <py_sfcl.CommandDataDefinition object at 0x06683390>) , Command count = 2008 ] 
14:35:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CDB0>, <py_sfcl.CommandDataDefinition object at 0x0667FD50>) , Command count = 2009 ] 
14:35:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:56: [ SetCardRCA(0x1, 0xD555) , Command count = 2010 ] 
14:35:56: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:56: Host Frequency set to 25000 KHz
14:35:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:56: ####CSD Registe 2.0 Values####
14:35:56: CSD_STRUCTURE                                 :0x1
14:35:56: Reserv1                                       :0x0
14:35:56: Time Access 1 TAAC                            :0xe
14:35:56: Time Access 2 NSAC*100                        :0x0
14:35:56: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:56: Card Command Classess CCC                     :0x5b5
14:35:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:56: DSR(driver stage register)  DSR_IMP           :0x0
14:35:56: Reserv2                                       :0x0
14:35:56: Device Size C_SIZE                            :0xedc8
14:35:56: Reserv3                                       :0x0
14:35:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:56: Reserv4                                       :0x0
14:35:56: Write Speed Factor R2W_FACTOR                 :0x2
14:35:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:56: FILE_FORMAT_GRP                               :0x0
14:35:56: COPY flag                                     :0x1
14:35:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:56: File_Format                                   :0x0
14:35:56: CRC                                           :0x0
14:35:56: ####CSD Registe Values####  

14:35:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:56: [GetSCRRegisterEntry] Passed
14:35:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:56: Data_Status_After Erases          : 0
14:35:56: CPRM Security Support             : No Security
14:35:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:56: Spec. Version                     : Version 3.0X
14:35:56: Extended Security Support         : Extended_Security_Not_Supported
14:35:56: Command Support                   : COMMAND_SUPPORT
14:35:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683DB0>, <py_sfcl.CommandDataDefinition object at 0x066831E0>) , Command count = 2011 ] 
14:35:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683810>, <py_sfcl.CommandDataDefinition object at 0x066837B0>) , Command count = 2012 ] 
14:35:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:56: [ SetBusWidth(0x4) , Command count = 2013 ] 
14:35:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066837E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2014 ] 
14:35:56: Protected Area Size 0x28000
14:35:56: Bus Width           2
14:35:56: Secure Mode         0
14:35:56: Speed  Class        4
14:35:56: Perf Move           0
14:35:56: Au Size             9
14:35:56: Erase Size          15
14:35:56: Erase Timeout       1
14:35:56: Erase offset        1
14:35:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2015 ] 
14:35:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:56: Host Frequency set to 100000 KHz
14:35:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:56: ####CSD Registe 2.0 Values####
14:35:56: CSD_STRUCTURE                                 :0x1
14:35:56: Reserv1                                       :0x0
14:35:56: Time Access 1 TAAC                            :0xe
14:35:56: Time Access 2 NSAC*100                        :0x0
14:35:56: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:56: Card Command Classess CCC                     :0x5b5
14:35:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:56: DSR(driver stage register)  DSR_IMP           :0x0
14:35:56: Reserv2                                       :0x0
14:35:56: Device Size C_SIZE                            :0xedc8
14:35:56: Reserv3                                       :0x0
14:35:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:56: Reserv4                                       :0x0
14:35:56: Write Speed Factor R2W_FACTOR                 :0x2
14:35:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:56: FILE_FORMAT_GRP                               :0x0
14:35:56: COPY flag                                     :0x1
14:35:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:56: File_Format                                   :0x0
14:35:56: CRC                                           :0x0
14:35:56: ####CSD Registe Values####  

14:35:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D20>, <py_sfcl.CommandDataDefinition object at 0x06683540>) , Command count = 2016 ] 
14:35:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683210>, <py_sfcl.CommandDataDefinition object at 0x06685630>) , Command count = 2017 ] 
14:35:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:56: [DVTCommonLib]### Erase :Erase API Called
14:35:56: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x10018 with Blockcount:0x2001
14:35:56: [ EraseLba(0x10018, 0x2001) , Command count = 2018 ] 
14:35:56: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x10018 with Blockcount:0x2001 

14:35:56: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 19
14:35:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x12018 to EndLba:0x12020 with Increment Pattern
14:35:56: [ WrLbaNoData(0x12018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2019 ] 
14:35:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x12018 to EndLba:0x12020 with Increment Pattern 

14:35:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683EA0>, <py_sfcl.CommandDataDefinition object at 0x066836F0>) , Command count = 2020 ] 
14:35:56: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FF90>, <py_sfcl.CommandDataDefinition object at 0x06683300>) , Command count = 2021 ] 
14:35:56: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:56: [DVTCommonLib]###  R1bCommandAbort called
14:35:57: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2C, False) , Command count = 2022 ] 
14:35:57: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:59: Host Frequency set to 25000 KHz
14:35:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683840>, 0x0, True) , Command count = 2023 ] 
14:35:59: [GO18_globalSetVolt]### Host voltage value is set.
14:35:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AF90>, 0x0, False) , Command count = 2024 ] 
14:35:59: [GO18_globalSetVolt]### Host voltage value is set.
14:35:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2025 ] 
14:35:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2026 ] 
14:35:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2027 ] 
14:35:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6F90>, <py_sfcl.CommandDataDefinition object at 0x06683BD0>) , Command count = 2028 ] 
14:35:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6570>, <py_sfcl.CommandDataDefinition object at 0x06683DE0>) , Command count = 2029 ] 
14:35:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:59: [ SetCardRCA(0x1, 0xD555) , Command count = 2030 ] 
14:35:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:59: Host Frequency set to 25000 KHz
14:35:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:59: ####CSD Registe 2.0 Values####
14:35:59: CSD_STRUCTURE                                 :0x1
14:35:59: Reserv1                                       :0x0
14:35:59: Time Access 1 TAAC                            :0xe
14:35:59: Time Access 2 NSAC*100                        :0x0
14:35:59: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:59: Card Command Classess CCC                     :0x5b5
14:35:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:59: DSR(driver stage register)  DSR_IMP           :0x0
14:35:59: Reserv2                                       :0x0
14:35:59: Device Size C_SIZE                            :0xedc8
14:35:59: Reserv3                                       :0x0
14:35:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:59: Reserv4                                       :0x0
14:35:59: Write Speed Factor R2W_FACTOR                 :0x2
14:35:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:59: FILE_FORMAT_GRP                               :0x0
14:35:59: COPY flag                                     :0x1
14:35:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:59: File_Format                                   :0x0
14:35:59: CRC                                           :0x0
14:35:59: ####CSD Registe Values####  

14:35:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:59: [GetSCRRegisterEntry] Passed
14:35:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:59: Data_Status_After Erases          : 0
14:35:59: CPRM Security Support             : No Security
14:35:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:59: Spec. Version                     : Version 3.0X
14:35:59: Extended Security Support         : Extended_Security_Not_Supported
14:35:59: Command Support                   : COMMAND_SUPPORT
14:35:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066832A0>, <py_sfcl.CommandDataDefinition object at 0x06683090>) , Command count = 2031 ] 
14:35:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FED1B0>, <py_sfcl.CommandDataDefinition object at 0x06683870>) , Command count = 2032 ] 
14:35:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:59: [ SetBusWidth(0x4) , Command count = 2033 ] 
14:35:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2034 ] 
14:35:59: Protected Area Size 0x28000
14:35:59: Bus Width           2
14:35:59: Secure Mode         0
14:35:59: Speed  Class        4
14:35:59: Perf Move           0
14:35:59: Au Size             9
14:35:59: Erase Size          15
14:35:59: Erase Timeout       1
14:35:59: Erase offset        1
14:35:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2035 ] 
14:35:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:59: Host Frequency set to 100000 KHz
14:35:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:59: ####CSD Registe 2.0 Values####
14:35:59: CSD_STRUCTURE                                 :0x1
14:35:59: Reserv1                                       :0x0
14:35:59: Time Access 1 TAAC                            :0xe
14:35:59: Time Access 2 NSAC*100                        :0x0
14:35:59: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:59: Card Command Classess CCC                     :0x5b5
14:35:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:59: DSR(driver stage register)  DSR_IMP           :0x0
14:35:59: Reserv2                                       :0x0
14:35:59: Device Size C_SIZE                            :0xedc8
14:35:59: Reserv3                                       :0x0
14:35:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:59: Reserv4                                       :0x0
14:35:59: Write Speed Factor R2W_FACTOR                 :0x2
14:35:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:59: FILE_FORMAT_GRP                               :0x0
14:35:59: COPY flag                                     :0x1
14:35:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:59: File_Format                                   :0x0
14:35:59: CRC                                           :0x0
14:35:59: ####CSD Registe Values####  

14:35:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683A80>, <py_sfcl.CommandDataDefinition object at 0x066837E0>) , Command count = 2036 ] 
14:35:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683E40>, <py_sfcl.CommandDataDefinition object at 0x06685720>) , Command count = 2037 ] 
14:35:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:59: [DVTCommonLib]### Erase :Erase API Called
14:35:59: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x12018 with Blockcount:0x2001
14:35:59: [ EraseLba(0x12018, 0x2001) , Command count = 2038 ] 
14:35:59: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x12018 with Blockcount:0x2001 

14:35:59: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 18
14:35:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x14018 to EndLba:0x14020 with Increment Pattern
14:35:59: [ WrLbaNoData(0x14018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2039 ] 
14:35:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x14018 to EndLba:0x14020 with Increment Pattern 

14:35:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6360>, <py_sfcl.CommandDataDefinition object at 0x06683C30>) , Command count = 2040 ] 
14:35:59: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:35:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683750>, <py_sfcl.CommandDataDefinition object at 0x06685360>) , Command count = 2041 ] 
14:35:59: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:35:59: [DVTCommonLib]###  R1bCommandAbort called
14:35:59: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xC, False) , Command count = 2042 ] 
14:35:59: [DVTCommonLib]###  R1bCommandAbort Completed 

14:35:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:01: Host Frequency set to 25000 KHz
14:36:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x06685240>, 0x0, True) , Command count = 2043 ] 
14:36:01: [GO18_globalSetVolt]### Host voltage value is set.
14:36:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x06032840>, 0x0, False) , Command count = 2044 ] 
14:36:01: [GO18_globalSetVolt]### Host voltage value is set.
14:36:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2045 ] 
14:36:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2046 ] 
14:36:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2047 ] 
14:36:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683E10>, <py_sfcl.CommandDataDefinition object at 0x066834E0>) , Command count = 2048 ] 
14:36:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032AE0>, <py_sfcl.CommandDataDefinition object at 0x066856C0>) , Command count = 2049 ] 
14:36:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:02: [ SetCardRCA(0x1, 0xD555) , Command count = 2050 ] 
14:36:02: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:02: Host Frequency set to 25000 KHz
14:36:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:02: ####CSD Registe 2.0 Values####
14:36:02: CSD_STRUCTURE                                 :0x1
14:36:02: Reserv1                                       :0x0
14:36:02: Time Access 1 TAAC                            :0xe
14:36:02: Time Access 2 NSAC*100                        :0x0
14:36:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:02: Card Command Classess CCC                     :0x5b5
14:36:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:02: DSR(driver stage register)  DSR_IMP           :0x0
14:36:02: Reserv2                                       :0x0
14:36:02: Device Size C_SIZE                            :0xedc8
14:36:02: Reserv3                                       :0x0
14:36:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:02: Reserv4                                       :0x0
14:36:02: Write Speed Factor R2W_FACTOR                 :0x2
14:36:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:02: FILE_FORMAT_GRP                               :0x0
14:36:02: COPY flag                                     :0x1
14:36:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:02: File_Format                                   :0x0
14:36:02: CRC                                           :0x0
14:36:02: ####CSD Registe Values####  

14:36:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:02: [GetSCRRegisterEntry] Passed
14:36:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:02: Data_Status_After Erases          : 0
14:36:02: CPRM Security Support             : No Security
14:36:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:02: Spec. Version                     : Version 3.0X
14:36:02: Extended Security Support         : Extended_Security_Not_Supported
14:36:02: Command Support                   : COMMAND_SUPPORT
14:36:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FED0>, <py_sfcl.CommandDataDefinition object at 0x06685E10>) , Command count = 2051 ] 
14:36:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683FC0>, <py_sfcl.CommandDataDefinition object at 0x06685030>) , Command count = 2052 ] 
14:36:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:02: [ SetBusWidth(0x4) , Command count = 2053 ] 
14:36:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2054 ] 
14:36:02: Protected Area Size 0x28000
14:36:02: Bus Width           2
14:36:02: Secure Mode         0
14:36:02: Speed  Class        4
14:36:02: Perf Move           0
14:36:02: Au Size             9
14:36:02: Erase Size          15
14:36:02: Erase Timeout       1
14:36:02: Erase offset        1
14:36:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2055 ] 
14:36:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:02: Host Frequency set to 100000 KHz
14:36:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:02: ####CSD Registe 2.0 Values####
14:36:02: CSD_STRUCTURE                                 :0x1
14:36:02: Reserv1                                       :0x0
14:36:02: Time Access 1 TAAC                            :0xe
14:36:02: Time Access 2 NSAC*100                        :0x0
14:36:02: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:02: Card Command Classess CCC                     :0x5b5
14:36:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:02: DSR(driver stage register)  DSR_IMP           :0x0
14:36:02: Reserv2                                       :0x0
14:36:02: Device Size C_SIZE                            :0xedc8
14:36:02: Reserv3                                       :0x0
14:36:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:02: Reserv4                                       :0x0
14:36:02: Write Speed Factor R2W_FACTOR                 :0x2
14:36:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:02: FILE_FORMAT_GRP                               :0x0
14:36:02: COPY flag                                     :0x1
14:36:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:02: File_Format                                   :0x0
14:36:02: CRC                                           :0x0
14:36:02: ####CSD Registe Values####  

14:36:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8C00>, <py_sfcl.CommandDataDefinition object at 0x06683780>) , Command count = 2056 ] 
14:36:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066833C0>, <py_sfcl.CommandDataDefinition object at 0x06685090>) , Command count = 2057 ] 
14:36:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:02: [DVTCommonLib]### Erase :Erase API Called
14:36:02: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x14018 with Blockcount:0x2001
14:36:02: [ EraseLba(0x14018, 0x2001) , Command count = 2058 ] 
14:36:02: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x14018 with Blockcount:0x2001 

14:36:02: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 17
14:36:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x16018 to EndLba:0x16020 with Increment Pattern
14:36:02: [ WrLbaNoData(0x16018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2059 ] 
14:36:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x16018 to EndLba:0x16020 with Increment Pattern 

14:36:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8FC0>, <py_sfcl.CommandDataDefinition object at 0x066853C0>) , Command count = 2060 ] 
14:36:02: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683ED0>, <py_sfcl.CommandDataDefinition object at 0x066850F0>) , Command count = 2061 ] 
14:36:02: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:02: [DVTCommonLib]###  R1bCommandAbort called
14:36:02: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x3, False) , Command count = 2062 ] 
14:36:02: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:02: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:04: Host Frequency set to 25000 KHz
14:36:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:04: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x06685B70>, 0x0, True) , Command count = 2063 ] 
14:36:04: [GO18_globalSetVolt]### Host voltage value is set.
14:36:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F030>, 0x0, False) , Command count = 2064 ] 
14:36:04: [GO18_globalSetVolt]### Host voltage value is set.
14:36:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2065 ] 
14:36:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2066 ] 
14:36:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2067 ] 
14:36:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602B6C0>, <py_sfcl.CommandDataDefinition object at 0x066858D0>) , Command count = 2068 ] 
14:36:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666390>, <py_sfcl.CommandDataDefinition object at 0x06685270>) , Command count = 2069 ] 
14:36:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:04: [ SetCardRCA(0x1, 0xD555) , Command count = 2070 ] 
14:36:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:05: Host Frequency set to 25000 KHz
14:36:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:05: ####CSD Registe 2.0 Values####
14:36:05: CSD_STRUCTURE                                 :0x1
14:36:05: Reserv1                                       :0x0
14:36:05: Time Access 1 TAAC                            :0xe
14:36:05: Time Access 2 NSAC*100                        :0x0
14:36:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:05: Card Command Classess CCC                     :0x5b5
14:36:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:05: DSR(driver stage register)  DSR_IMP           :0x0
14:36:05: Reserv2                                       :0x0
14:36:05: Device Size C_SIZE                            :0xedc8
14:36:05: Reserv3                                       :0x0
14:36:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:05: Reserv4                                       :0x0
14:36:05: Write Speed Factor R2W_FACTOR                 :0x2
14:36:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:05: FILE_FORMAT_GRP                               :0x0
14:36:05: COPY flag                                     :0x1
14:36:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:05: File_Format                                   :0x0
14:36:05: CRC                                           :0x0
14:36:05: ####CSD Registe Values####  

14:36:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:05: [GetSCRRegisterEntry] Passed
14:36:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:05: Data_Status_After Erases          : 0
14:36:05: CPRM Security Support             : No Security
14:36:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:05: Spec. Version                     : Version 3.0X
14:36:05: Extended Security Support         : Extended_Security_Not_Supported
14:36:05: Command Support                   : COMMAND_SUPPORT
14:36:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683930>, <py_sfcl.CommandDataDefinition object at 0x06666BA0>) , Command count = 2071 ] 
14:36:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDAC90>, <py_sfcl.CommandDataDefinition object at 0x06666D50>) , Command count = 2072 ] 
14:36:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:05: [ SetBusWidth(0x4) , Command count = 2073 ] 
14:36:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066666F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2074 ] 
14:36:05: Protected Area Size 0x28000
14:36:05: Bus Width           2
14:36:05: Secure Mode         0
14:36:05: Speed  Class        4
14:36:05: Perf Move           0
14:36:05: Au Size             9
14:36:05: Erase Size          15
14:36:05: Erase Timeout       1
14:36:05: Erase offset        1
14:36:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2075 ] 
14:36:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:05: Host Frequency set to 100000 KHz
14:36:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:05: ####CSD Registe 2.0 Values####
14:36:05: CSD_STRUCTURE                                 :0x1
14:36:05: Reserv1                                       :0x0
14:36:05: Time Access 1 TAAC                            :0xe
14:36:05: Time Access 2 NSAC*100                        :0x0
14:36:05: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:05: Card Command Classess CCC                     :0x5b5
14:36:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:05: DSR(driver stage register)  DSR_IMP           :0x0
14:36:05: Reserv2                                       :0x0
14:36:05: Device Size C_SIZE                            :0xedc8
14:36:05: Reserv3                                       :0x0
14:36:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:05: Reserv4                                       :0x0
14:36:05: Write Speed Factor R2W_FACTOR                 :0x2
14:36:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:05: FILE_FORMAT_GRP                               :0x0
14:36:05: COPY flag                                     :0x1
14:36:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:05: File_Format                                   :0x0
14:36:05: CRC                                           :0x0
14:36:05: ####CSD Registe Values####  

14:36:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060327E0>, <py_sfcl.CommandDataDefinition object at 0x066851E0>) , Command count = 2076 ] 
14:36:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683B40>, <py_sfcl.CommandDataDefinition object at 0x06685CC0>) , Command count = 2077 ] 
14:36:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:05: [DVTCommonLib]### Erase :Erase API Called
14:36:05: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x16018 with Blockcount:0x2001
14:36:05: [ EraseLba(0x16018, 0x2001) , Command count = 2078 ] 
14:36:05: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x16018 with Blockcount:0x2001 

14:36:05: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 16
14:36:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x18018 to EndLba:0x18020 with Increment Pattern
14:36:05: [ WrLbaNoData(0x18018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2079 ] 
14:36:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x18018 to EndLba:0x18020 with Increment Pattern 

14:36:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060329F0>, <py_sfcl.CommandDataDefinition object at 0x06666720>) , Command count = 2080 ] 
14:36:05: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BAB0>, <py_sfcl.CommandDataDefinition object at 0x06685A80>) , Command count = 2081 ] 
14:36:05: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:05: [DVTCommonLib]###  R1bCommandAbort called
14:36:05: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1B, False) , Command count = 2082 ] 
14:36:05: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:05: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:07: Host Frequency set to 25000 KHz
14:36:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:07: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666DE0>, 0x0, True) , Command count = 2083 ] 
14:36:07: [GO18_globalSetVolt]### Host voltage value is set.
14:36:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FC6F30>, 0x0, False) , Command count = 2084 ] 
14:36:07: [GO18_globalSetVolt]### Host voltage value is set.
14:36:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2085 ] 
14:36:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2086 ] 
14:36:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2087 ] 
14:36:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032B40>, <py_sfcl.CommandDataDefinition object at 0x06666FC0>) , Command count = 2088 ] 
14:36:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572A20>, <py_sfcl.CommandDataDefinition object at 0x06685300>) , Command count = 2089 ] 
14:36:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:07: [ SetCardRCA(0x1, 0xD555) , Command count = 2090 ] 
14:36:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:07: Host Frequency set to 25000 KHz
14:36:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:07: ####CSD Registe 2.0 Values####
14:36:07: CSD_STRUCTURE                                 :0x1
14:36:07: Reserv1                                       :0x0
14:36:07: Time Access 1 TAAC                            :0xe
14:36:07: Time Access 2 NSAC*100                        :0x0
14:36:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:07: Card Command Classess CCC                     :0x5b5
14:36:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:07: DSR(driver stage register)  DSR_IMP           :0x0
14:36:07: Reserv2                                       :0x0
14:36:07: Device Size C_SIZE                            :0xedc8
14:36:07: Reserv3                                       :0x0
14:36:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:07: Reserv4                                       :0x0
14:36:07: Write Speed Factor R2W_FACTOR                 :0x2
14:36:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:07: FILE_FORMAT_GRP                               :0x0
14:36:07: COPY flag                                     :0x1
14:36:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:07: File_Format                                   :0x0
14:36:07: CRC                                           :0x0
14:36:07: ####CSD Registe Values####  

14:36:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:07: [GetSCRRegisterEntry] Passed
14:36:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:07: Data_Status_After Erases          : 0
14:36:07: CPRM Security Support             : No Security
14:36:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:07: Spec. Version                     : Version 3.0X
14:36:07: Extended Security Support         : Extended_Security_Not_Supported
14:36:07: Command Support                   : COMMAND_SUPPORT
14:36:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E5BDB0>, <py_sfcl.CommandDataDefinition object at 0x06666B70>) , Command count = 2091 ] 
14:36:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572300>, <py_sfcl.CommandDataDefinition object at 0x066AB210>) , Command count = 2092 ] 
14:36:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:07: [ SetBusWidth(0x4) , Command count = 2093 ] 
14:36:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06666660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2094 ] 
14:36:07: Protected Area Size 0x28000
14:36:07: Bus Width           2
14:36:07: Secure Mode         0
14:36:07: Speed  Class        4
14:36:07: Perf Move           0
14:36:07: Au Size             9
14:36:07: Erase Size          15
14:36:07: Erase Timeout       1
14:36:07: Erase offset        1
14:36:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2095 ] 
14:36:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:08: Host Frequency set to 100000 KHz
14:36:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:08: ####CSD Registe 2.0 Values####
14:36:08: CSD_STRUCTURE                                 :0x1
14:36:08: Reserv1                                       :0x0
14:36:08: Time Access 1 TAAC                            :0xe
14:36:08: Time Access 2 NSAC*100                        :0x0
14:36:08: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:08: Card Command Classess CCC                     :0x5b5
14:36:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:08: DSR(driver stage register)  DSR_IMP           :0x0
14:36:08: Reserv2                                       :0x0
14:36:08: Device Size C_SIZE                            :0xedc8
14:36:08: Reserv3                                       :0x0
14:36:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:08: Reserv4                                       :0x0
14:36:08: Write Speed Factor R2W_FACTOR                 :0x2
14:36:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:08: FILE_FORMAT_GRP                               :0x0
14:36:08: COPY flag                                     :0x1
14:36:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:08: File_Format                                   :0x0
14:36:08: CRC                                           :0x0
14:36:08: ####CSD Registe Values####  

14:36:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066669C0>, <py_sfcl.CommandDataDefinition object at 0x066666F0>) , Command count = 2096 ] 
14:36:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066856F0>, <py_sfcl.CommandDataDefinition object at 0x066859F0>) , Command count = 2097 ] 
14:36:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:08: [DVTCommonLib]### Erase :Erase API Called
14:36:08: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x18018 with Blockcount:0x2001
14:36:08: [ EraseLba(0x18018, 0x2001) , Command count = 2098 ] 
14:36:08: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x18018 with Blockcount:0x2001 

14:36:08: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 15
14:36:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1A018 to EndLba:0x1A020 with Increment Pattern
14:36:08: [ WrLbaNoData(0x1A018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2099 ] 
14:36:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1A018 to EndLba:0x1A020 with Increment Pattern 

14:36:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BED0>, <py_sfcl.CommandDataDefinition object at 0x066AB180>) , Command count = 2100 ] 
14:36:08: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032B70>, <py_sfcl.CommandDataDefinition object at 0x066859F0>) , Command count = 2101 ] 
14:36:08: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:08: [DVTCommonLib]###  R1bCommandAbort called
14:36:08: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x11, False) , Command count = 2102 ] 
14:36:08: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:10: Host Frequency set to 25000 KHz
14:36:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666D80>, 0x0, True) , Command count = 2103 ] 
14:36:10: [GO18_globalSetVolt]### Host voltage value is set.
14:36:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A060>, 0x0, False) , Command count = 2104 ] 
14:36:10: [GO18_globalSetVolt]### Host voltage value is set.
14:36:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2105 ] 
14:36:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2106 ] 
14:36:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2107 ] 
14:36:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB480>, <py_sfcl.CommandDataDefinition object at 0x06666840>) , Command count = 2108 ] 
14:36:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A2A0>, <py_sfcl.CommandDataDefinition object at 0x066859F0>) , Command count = 2109 ] 
14:36:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:10: [ SetCardRCA(0x1, 0xD555) , Command count = 2110 ] 
14:36:10: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:10: Host Frequency set to 25000 KHz
14:36:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:10: ####CSD Registe 2.0 Values####
14:36:10: CSD_STRUCTURE                                 :0x1
14:36:10: Reserv1                                       :0x0
14:36:10: Time Access 1 TAAC                            :0xe
14:36:10: Time Access 2 NSAC*100                        :0x0
14:36:10: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:10: Card Command Classess CCC                     :0x5b5
14:36:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:10: DSR(driver stage register)  DSR_IMP           :0x0
14:36:10: Reserv2                                       :0x0
14:36:10: Device Size C_SIZE                            :0xedc8
14:36:10: Reserv3                                       :0x0
14:36:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:10: Reserv4                                       :0x0
14:36:10: Write Speed Factor R2W_FACTOR                 :0x2
14:36:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:10: FILE_FORMAT_GRP                               :0x0
14:36:10: COPY flag                                     :0x1
14:36:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:10: File_Format                                   :0x0
14:36:10: CRC                                           :0x0
14:36:10: ####CSD Registe Values####  

14:36:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:10: [GetSCRRegisterEntry] Passed
14:36:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:10: Data_Status_After Erases          : 0
14:36:10: CPRM Security Support             : No Security
14:36:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:10: Spec. Version                     : Version 3.0X
14:36:10: Extended Security Support         : Extended_Security_Not_Supported
14:36:10: Command Support                   : COMMAND_SUPPORT
14:36:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032B10>, <py_sfcl.CommandDataDefinition object at 0x066666C0>) , Command count = 2111 ] 
14:36:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB690>, <py_sfcl.CommandDataDefinition object at 0x066ABF90>) , Command count = 2112 ] 
14:36:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:10: [ SetBusWidth(0x4) , Command count = 2113 ] 
14:36:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A390>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2114 ] 
14:36:10: Protected Area Size 0x28000
14:36:10: Bus Width           2
14:36:10: Secure Mode         0
14:36:10: Speed  Class        4
14:36:10: Perf Move           0
14:36:10: Au Size             9
14:36:10: Erase Size          15
14:36:10: Erase Timeout       1
14:36:10: Erase offset        1
14:36:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2115 ] 
14:36:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:10: Host Frequency set to 100000 KHz
14:36:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:10: ####CSD Registe 2.0 Values####
14:36:10: CSD_STRUCTURE                                 :0x1
14:36:10: Reserv1                                       :0x0
14:36:10: Time Access 1 TAAC                            :0xe
14:36:10: Time Access 2 NSAC*100                        :0x0
14:36:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:10: Card Command Classess CCC                     :0x5b5
14:36:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:10: DSR(driver stage register)  DSR_IMP           :0x0
14:36:10: Reserv2                                       :0x0
14:36:10: Device Size C_SIZE                            :0xedc8
14:36:10: Reserv3                                       :0x0
14:36:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:10: Reserv4                                       :0x0
14:36:10: Write Speed Factor R2W_FACTOR                 :0x2
14:36:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:10: FILE_FORMAT_GRP                               :0x0
14:36:10: COPY flag                                     :0x1
14:36:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:10: File_Format                                   :0x0
14:36:10: CRC                                           :0x0
14:36:10: ####CSD Registe Values####  

14:36:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB1E0>, <py_sfcl.CommandDataDefinition object at 0x065721E0>) , Command count = 2116 ] 
14:36:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666E70>, <py_sfcl.CommandDataDefinition object at 0x06685C90>) , Command count = 2117 ] 
14:36:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:10: [DVTCommonLib]### Erase :Erase API Called
14:36:10: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1A018 with Blockcount:0x2001
14:36:10: [ EraseLba(0x1A018, 0x2001) , Command count = 2118 ] 
14:36:10: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1A018 with Blockcount:0x2001 

14:36:10: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 14
14:36:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1C018 to EndLba:0x1C020 with Increment Pattern
14:36:10: [ WrLbaNoData(0x1C018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2119 ] 
14:36:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1C018 to EndLba:0x1C020 with Increment Pattern 

14:36:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572330>, <py_sfcl.CommandDataDefinition object at 0x066AB2A0>) , Command count = 2120 ] 
14:36:10: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF60>, <py_sfcl.CommandDataDefinition object at 0x0667A510>) , Command count = 2121 ] 
14:36:10: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:10: [DVTCommonLib]###  R1bCommandAbort called
14:36:11: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x10, False) , Command count = 2122 ] 
14:36:11: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:13: Host Frequency set to 25000 KHz
14:36:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB300>, 0x0, True) , Command count = 2123 ] 
14:36:13: [GO18_globalSetVolt]### Host voltage value is set.
14:36:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FDB0>, 0x0, False) , Command count = 2124 ] 
14:36:13: [GO18_globalSetVolt]### Host voltage value is set.
14:36:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2125 ] 
14:36:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2126 ] 
14:36:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2127 ] 
14:36:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB3F0>, <py_sfcl.CommandDataDefinition object at 0x0667A7E0>) , Command count = 2128 ] 
14:36:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A570>, <py_sfcl.CommandDataDefinition object at 0x0667A720>) , Command count = 2129 ] 
14:36:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:13: [ SetCardRCA(0x1, 0xD555) , Command count = 2130 ] 
14:36:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:13: Host Frequency set to 25000 KHz
14:36:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:13: ####CSD Registe 2.0 Values####
14:36:13: CSD_STRUCTURE                                 :0x1
14:36:13: Reserv1                                       :0x0
14:36:13: Time Access 1 TAAC                            :0xe
14:36:13: Time Access 2 NSAC*100                        :0x0
14:36:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:13: Card Command Classess CCC                     :0x5b5
14:36:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:13: DSR(driver stage register)  DSR_IMP           :0x0
14:36:13: Reserv2                                       :0x0
14:36:13: Device Size C_SIZE                            :0xedc8
14:36:13: Reserv3                                       :0x0
14:36:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:13: Reserv4                                       :0x0
14:36:13: Write Speed Factor R2W_FACTOR                 :0x2
14:36:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:13: FILE_FORMAT_GRP                               :0x0
14:36:13: COPY flag                                     :0x1
14:36:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:13: File_Format                                   :0x0
14:36:13: CRC                                           :0x0
14:36:13: ####CSD Registe Values####  

14:36:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:13: [GetSCRRegisterEntry] Passed
14:36:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:13: Data_Status_After Erases          : 0
14:36:13: CPRM Security Support             : No Security
14:36:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:13: Spec. Version                     : Version 3.0X
14:36:13: Extended Security Support         : Extended_Security_Not_Supported
14:36:13: Command Support                   : COMMAND_SUPPORT
14:36:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AAE0>, <py_sfcl.CommandDataDefinition object at 0x0667A120>) , Command count = 2131 ] 
14:36:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB9F0>, <py_sfcl.CommandDataDefinition object at 0x0667A030>) , Command count = 2132 ] 
14:36:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:13: [ SetBusWidth(0x4) , Command count = 2133 ] 
14:36:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A4B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2134 ] 
14:36:13: Protected Area Size 0x28000
14:36:13: Bus Width           2
14:36:13: Secure Mode         0
14:36:13: Speed  Class        4
14:36:13: Perf Move           0
14:36:13: Au Size             9
14:36:13: Erase Size          15
14:36:13: Erase Timeout       1
14:36:13: Erase offset        1
14:36:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2135 ] 
14:36:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:13: Host Frequency set to 100000 KHz
14:36:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:13: ####CSD Registe 2.0 Values####
14:36:13: CSD_STRUCTURE                                 :0x1
14:36:13: Reserv1                                       :0x0
14:36:13: Time Access 1 TAAC                            :0xe
14:36:13: Time Access 2 NSAC*100                        :0x0
14:36:13: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:13: Card Command Classess CCC                     :0x5b5
14:36:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:13: DSR(driver stage register)  DSR_IMP           :0x0
14:36:13: Reserv2                                       :0x0
14:36:13: Device Size C_SIZE                            :0xedc8
14:36:13: Reserv3                                       :0x0
14:36:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:13: Reserv4                                       :0x0
14:36:13: Write Speed Factor R2W_FACTOR                 :0x2
14:36:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:13: FILE_FORMAT_GRP                               :0x0
14:36:13: COPY flag                                     :0x1
14:36:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:13: File_Format                                   :0x0
14:36:13: CRC                                           :0x0
14:36:13: ####CSD Registe Values####  

14:36:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABED0>, <py_sfcl.CommandDataDefinition object at 0x0667A390>) , Command count = 2136 ] 
14:36:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666960>, <py_sfcl.CommandDataDefinition object at 0x066855D0>) , Command count = 2137 ] 
14:36:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:13: [DVTCommonLib]### Erase :Erase API Called
14:36:13: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1C018 with Blockcount:0x2001
14:36:13: [ EraseLba(0x1C018, 0x2001) , Command count = 2138 ] 
14:36:13: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1C018 with Blockcount:0x2001 

14:36:13: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 13
14:36:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1E018 to EndLba:0x1E020 with Increment Pattern
14:36:13: [ WrLbaNoData(0x1E018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2139 ] 
14:36:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1E018 to EndLba:0x1E020 with Increment Pattern 

14:36:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABFC0>, <py_sfcl.CommandDataDefinition object at 0x0667ACF0>) , Command count = 2140 ] 
14:36:13: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB7B0>, <py_sfcl.CommandDataDefinition object at 0x066855D0>) , Command count = 2141 ] 
14:36:13: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:13: [DVTCommonLib]###  R1bCommandAbort called
14:36:13: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x28, False) , Command count = 2142 ] 
14:36:13: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:15: Host Frequency set to 25000 KHz
14:36:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABF00>, 0x0, True) , Command count = 2143 ] 
14:36:15: [GO18_globalSetVolt]### Host voltage value is set.
14:36:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C030>, 0x0, False) , Command count = 2144 ] 
14:36:15: [GO18_globalSetVolt]### Host voltage value is set.
14:36:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2145 ] 
14:36:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2146 ] 
14:36:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2147 ] 
14:36:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666750>, <py_sfcl.CommandDataDefinition object at 0x0667AB40>) , Command count = 2148 ] 
14:36:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A990>, <py_sfcl.CommandDataDefinition object at 0x0667A8A0>) , Command count = 2149 ] 
14:36:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:16: [ SetCardRCA(0x1, 0xD555) , Command count = 2150 ] 
14:36:16: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:16: Host Frequency set to 25000 KHz
14:36:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:16: ####CSD Registe 2.0 Values####
14:36:16: CSD_STRUCTURE                                 :0x1
14:36:16: Reserv1                                       :0x0
14:36:16: Time Access 1 TAAC                            :0xe
14:36:16: Time Access 2 NSAC*100                        :0x0
14:36:16: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:16: Card Command Classess CCC                     :0x5b5
14:36:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:16: DSR(driver stage register)  DSR_IMP           :0x0
14:36:16: Reserv2                                       :0x0
14:36:16: Device Size C_SIZE                            :0xedc8
14:36:16: Reserv3                                       :0x0
14:36:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:16: Reserv4                                       :0x0
14:36:16: Write Speed Factor R2W_FACTOR                 :0x2
14:36:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:16: FILE_FORMAT_GRP                               :0x0
14:36:16: COPY flag                                     :0x1
14:36:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:16: File_Format                                   :0x0
14:36:16: CRC                                           :0x0
14:36:16: ####CSD Registe Values####  

14:36:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:16: [GetSCRRegisterEntry] Passed
14:36:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:16: Data_Status_After Erases          : 0
14:36:16: CPRM Security Support             : No Security
14:36:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:16: Spec. Version                     : Version 3.0X
14:36:16: Extended Security Support         : Extended_Security_Not_Supported
14:36:16: Command Support                   : COMMAND_SUPPORT
14:36:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066668A0>, <py_sfcl.CommandDataDefinition object at 0x0667A0C0>) , Command count = 2151 ] 
14:36:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AB10>, <py_sfcl.CommandDataDefinition object at 0x0667A960>) , Command count = 2152 ] 
14:36:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:16: [ SetBusWidth(0x4) , Command count = 2153 ] 
14:36:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2154 ] 
14:36:16: Protected Area Size 0x28000
14:36:16: Bus Width           2
14:36:16: Secure Mode         0
14:36:16: Speed  Class        4
14:36:16: Perf Move           0
14:36:16: Au Size             9
14:36:16: Erase Size          15
14:36:16: Erase Timeout       1
14:36:16: Erase offset        1
14:36:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2155 ] 
14:36:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:16: Host Frequency set to 100000 KHz
14:36:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:16: ####CSD Registe 2.0 Values####
14:36:16: CSD_STRUCTURE                                 :0x1
14:36:16: Reserv1                                       :0x0
14:36:16: Time Access 1 TAAC                            :0xe
14:36:16: Time Access 2 NSAC*100                        :0x0
14:36:16: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:16: Card Command Classess CCC                     :0x5b5
14:36:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:16: DSR(driver stage register)  DSR_IMP           :0x0
14:36:16: Reserv2                                       :0x0
14:36:16: Device Size C_SIZE                            :0xedc8
14:36:16: Reserv3                                       :0x0
14:36:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:16: Reserv4                                       :0x0
14:36:16: Write Speed Factor R2W_FACTOR                 :0x2
14:36:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:16: FILE_FORMAT_GRP                               :0x0
14:36:16: COPY flag                                     :0x1
14:36:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:16: File_Format                                   :0x0
14:36:16: CRC                                           :0x0
14:36:16: ####CSD Registe Values####  

14:36:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A240>, <py_sfcl.CommandDataDefinition object at 0x0667A690>) , Command count = 2156 ] 
14:36:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB360>, <py_sfcl.CommandDataDefinition object at 0x06685B40>) , Command count = 2157 ] 
14:36:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:16: [DVTCommonLib]### Erase :Erase API Called
14:36:16: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1E018 with Blockcount:0x2001
14:36:16: [ EraseLba(0x1E018, 0x2001) , Command count = 2158 ] 
14:36:16: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1E018 with Blockcount:0x2001 

14:36:16: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 12
14:36:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x20018 to EndLba:0x20020 with Increment Pattern
14:36:16: [ WrLbaNoData(0x20018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2159 ] 
14:36:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x20018 to EndLba:0x20020 with Increment Pattern 

14:36:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C390>, <py_sfcl.CommandDataDefinition object at 0x0667AD80>) , Command count = 2160 ] 
14:36:16: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A420>, <py_sfcl.CommandDataDefinition object at 0x0667AC00>) , Command count = 2161 ] 
14:36:16: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:16: [DVTCommonLib]###  R1bCommandAbort called
14:36:16: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1D, False) , Command count = 2162 ] 
14:36:16: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:18: Host Frequency set to 25000 KHz
14:36:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:18: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB660>, 0x0, True) , Command count = 2163 ] 
14:36:18: [GO18_globalSetVolt]### Host voltage value is set.
14:36:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C9C0>, 0x0, False) , Command count = 2164 ] 
14:36:18: [GO18_globalSetVolt]### Host voltage value is set.
14:36:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2165 ] 
14:36:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2166 ] 
14:36:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2167 ] 
14:36:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C450>, <py_sfcl.CommandDataDefinition object at 0x0667C2D0>) , Command count = 2168 ] 
14:36:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CA80>, <py_sfcl.CommandDataDefinition object at 0x0667A1B0>) , Command count = 2169 ] 
14:36:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:18: [ SetCardRCA(0x1, 0xD555) , Command count = 2170 ] 
14:36:19: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:19: Host Frequency set to 25000 KHz
14:36:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:19: ####CSD Registe 2.0 Values####
14:36:19: CSD_STRUCTURE                                 :0x1
14:36:19: Reserv1                                       :0x0
14:36:19: Time Access 1 TAAC                            :0xe
14:36:19: Time Access 2 NSAC*100                        :0x0
14:36:19: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:19: Card Command Classess CCC                     :0x5b5
14:36:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:19: DSR(driver stage register)  DSR_IMP           :0x0
14:36:19: Reserv2                                       :0x0
14:36:19: Device Size C_SIZE                            :0xedc8
14:36:19: Reserv3                                       :0x0
14:36:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:19: Reserv4                                       :0x0
14:36:19: Write Speed Factor R2W_FACTOR                 :0x2
14:36:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:19: FILE_FORMAT_GRP                               :0x0
14:36:19: COPY flag                                     :0x1
14:36:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:19: File_Format                                   :0x0
14:36:19: CRC                                           :0x0
14:36:19: ####CSD Registe Values####  

14:36:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:19: [GetSCRRegisterEntry] Passed
14:36:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:19: Data_Status_After Erases          : 0
14:36:19: CPRM Security Support             : No Security
14:36:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:19: Spec. Version                     : Version 3.0X
14:36:19: Extended Security Support         : Extended_Security_Not_Supported
14:36:19: Command Support                   : COMMAND_SUPPORT
14:36:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CBD0>, <py_sfcl.CommandDataDefinition object at 0x0667ADE0>) , Command count = 2171 ] 
14:36:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C330>, <py_sfcl.CommandDataDefinition object at 0x0667C1E0>) , Command count = 2172 ] 
14:36:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:19: [ SetBusWidth(0x4) , Command count = 2173 ] 
14:36:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2174 ] 
14:36:19: Protected Area Size 0x28000
14:36:19: Bus Width           2
14:36:19: Secure Mode         0
14:36:19: Speed  Class        4
14:36:19: Perf Move           0
14:36:19: Au Size             9
14:36:19: Erase Size          15
14:36:19: Erase Timeout       1
14:36:19: Erase offset        1
14:36:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2175 ] 
14:36:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:19: Host Frequency set to 100000 KHz
14:36:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:19: ####CSD Registe 2.0 Values####
14:36:19: CSD_STRUCTURE                                 :0x1
14:36:19: Reserv1                                       :0x0
14:36:19: Time Access 1 TAAC                            :0xe
14:36:19: Time Access 2 NSAC*100                        :0x0
14:36:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:19: Card Command Classess CCC                     :0x5b5
14:36:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:19: DSR(driver stage register)  DSR_IMP           :0x0
14:36:19: Reserv2                                       :0x0
14:36:19: Device Size C_SIZE                            :0xedc8
14:36:19: Reserv3                                       :0x0
14:36:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:19: Reserv4                                       :0x0
14:36:19: Write Speed Factor R2W_FACTOR                 :0x2
14:36:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:19: FILE_FORMAT_GRP                               :0x0
14:36:19: COPY flag                                     :0x1
14:36:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:19: File_Format                                   :0x0
14:36:19: CRC                                           :0x0
14:36:19: ####CSD Registe Values####  

14:36:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C0F0>, <py_sfcl.CommandDataDefinition object at 0x0667A090>) , Command count = 2176 ] 
14:36:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AA20>, <py_sfcl.CommandDataDefinition object at 0x0667A450>) , Command count = 2177 ] 
14:36:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:19: [DVTCommonLib]### Erase :Erase API Called
14:36:19: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x20018 with Blockcount:0x2001
14:36:19: [ EraseLba(0x20018, 0x2001) , Command count = 2178 ] 
14:36:19: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x20018 with Blockcount:0x2001 

14:36:19: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 11
14:36:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x22018 to EndLba:0x22020 with Increment Pattern
14:36:19: [ WrLbaNoData(0x22018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2179 ] 
14:36:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x22018 to EndLba:0x22020 with Increment Pattern 

14:36:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CB40>, <py_sfcl.CommandDataDefinition object at 0x0667C4E0>) , Command count = 2180 ] 
14:36:19: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C840>, <py_sfcl.CommandDataDefinition object at 0x0667A3C0>) , Command count = 2181 ] 
14:36:19: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:19: [DVTCommonLib]###  R1bCommandAbort called
14:36:19: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x9, False) , Command count = 2182 ] 
14:36:19: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:21: Host Frequency set to 25000 KHz
14:36:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C060>, 0x0, True) , Command count = 2183 ] 
14:36:21: [GO18_globalSetVolt]### Host voltage value is set.
14:36:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F060>, 0x0, False) , Command count = 2184 ] 
14:36:21: [GO18_globalSetVolt]### Host voltage value is set.
14:36:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2185 ] 
14:36:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2186 ] 
14:36:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2187 ] 
14:36:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C5D0>, <py_sfcl.CommandDataDefinition object at 0x0667C6C0>) , Command count = 2188 ] 
14:36:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F180>, <py_sfcl.CommandDataDefinition object at 0x0667A3C0>) , Command count = 2189 ] 
14:36:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:21: [ SetCardRCA(0x1, 0xD555) , Command count = 2190 ] 
14:36:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:21: Host Frequency set to 25000 KHz
14:36:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:21: ####CSD Registe 2.0 Values####
14:36:21: CSD_STRUCTURE                                 :0x1
14:36:21: Reserv1                                       :0x0
14:36:21: Time Access 1 TAAC                            :0xe
14:36:21: Time Access 2 NSAC*100                        :0x0
14:36:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:21: Card Command Classess CCC                     :0x5b5
14:36:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:21: DSR(driver stage register)  DSR_IMP           :0x0
14:36:21: Reserv2                                       :0x0
14:36:21: Device Size C_SIZE                            :0xedc8
14:36:21: Reserv3                                       :0x0
14:36:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:21: Reserv4                                       :0x0
14:36:21: Write Speed Factor R2W_FACTOR                 :0x2
14:36:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:21: FILE_FORMAT_GRP                               :0x0
14:36:21: COPY flag                                     :0x1
14:36:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:21: File_Format                                   :0x0
14:36:21: CRC                                           :0x0
14:36:21: ####CSD Registe Values####  

14:36:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:21: [GetSCRRegisterEntry] Passed
14:36:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:21: Data_Status_After Erases          : 0
14:36:21: CPRM Security Support             : No Security
14:36:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:21: Spec. Version                     : Version 3.0X
14:36:21: Extended Security Support         : Extended_Security_Not_Supported
14:36:21: Command Support                   : COMMAND_SUPPORT
14:36:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C1B0>, <py_sfcl.CommandDataDefinition object at 0x0667CA20>) , Command count = 2191 ] 
14:36:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C240>, <py_sfcl.CommandDataDefinition object at 0x0667C540>) , Command count = 2192 ] 
14:36:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:21: [ SetBusWidth(0x4) , Command count = 2193 ] 
14:36:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2194 ] 
14:36:22: Protected Area Size 0x28000
14:36:22: Bus Width           2
14:36:22: Secure Mode         0
14:36:22: Speed  Class        4
14:36:22: Perf Move           0
14:36:22: Au Size             9
14:36:22: Erase Size          15
14:36:22: Erase Timeout       1
14:36:22: Erase offset        1
14:36:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2195 ] 
14:36:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:22: Host Frequency set to 100000 KHz
14:36:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:22: ####CSD Registe 2.0 Values####
14:36:22: CSD_STRUCTURE                                 :0x1
14:36:22: Reserv1                                       :0x0
14:36:22: Time Access 1 TAAC                            :0xe
14:36:22: Time Access 2 NSAC*100                        :0x0
14:36:22: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:22: Card Command Classess CCC                     :0x5b5
14:36:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:22: DSR(driver stage register)  DSR_IMP           :0x0
14:36:22: Reserv2                                       :0x0
14:36:22: Device Size C_SIZE                            :0xedc8
14:36:22: Reserv3                                       :0x0
14:36:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:22: Reserv4                                       :0x0
14:36:22: Write Speed Factor R2W_FACTOR                 :0x2
14:36:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:22: FILE_FORMAT_GRP                               :0x0
14:36:22: COPY flag                                     :0x1
14:36:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:22: File_Format                                   :0x0
14:36:22: CRC                                           :0x0
14:36:22: ####CSD Registe Values####  

14:36:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C480>, <py_sfcl.CommandDataDefinition object at 0x0667C150>) , Command count = 2196 ] 
14:36:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A930>, <py_sfcl.CommandDataDefinition object at 0x06685CF0>) , Command count = 2197 ] 
14:36:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:22: [DVTCommonLib]### Erase :Erase API Called
14:36:22: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x22018 with Blockcount:0x2001
14:36:22: [ EraseLba(0x22018, 0x2001) , Command count = 2198 ] 
14:36:22: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x22018 with Blockcount:0x2001 

14:36:22: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 10
14:36:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x24018 to EndLba:0x24020 with Increment Pattern
14:36:22: [ WrLbaNoData(0x24018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2199 ] 
14:36:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x24018 to EndLba:0x24020 with Increment Pattern 

14:36:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F2D0>, <py_sfcl.CommandDataDefinition object at 0x0667C630>) , Command count = 2200 ] 
14:36:22: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ACC0>, <py_sfcl.CommandDataDefinition object at 0x0667CC60>) , Command count = 2201 ] 
14:36:22: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:22: [DVTCommonLib]###  R1bCommandAbort called
14:36:22: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2E, False) , Command count = 2202 ] 
14:36:22: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:24: Host Frequency set to 25000 KHz
14:36:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:24: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CAB0>, 0x0, True) , Command count = 2203 ] 
14:36:24: [GO18_globalSetVolt]### Host voltage value is set.
14:36:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F900>, 0x0, False) , Command count = 2204 ] 
14:36:24: [GO18_globalSetVolt]### Host voltage value is set.
14:36:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2205 ] 
14:36:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2206 ] 
14:36:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2207 ] 
14:36:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F390>, <py_sfcl.CommandDataDefinition object at 0x0667F780>) , Command count = 2208 ] 
14:36:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F9C0>, <py_sfcl.CommandDataDefinition object at 0x0667C6F0>) , Command count = 2209 ] 
14:36:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:24: [ SetCardRCA(0x1, 0xD555) , Command count = 2210 ] 
14:36:24: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:24: Host Frequency set to 25000 KHz
14:36:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:24: ####CSD Registe 2.0 Values####
14:36:24: CSD_STRUCTURE                                 :0x1
14:36:24: Reserv1                                       :0x0
14:36:24: Time Access 1 TAAC                            :0xe
14:36:24: Time Access 2 NSAC*100                        :0x0
14:36:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:24: Card Command Classess CCC                     :0x5b5
14:36:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:24: DSR(driver stage register)  DSR_IMP           :0x0
14:36:24: Reserv2                                       :0x0
14:36:24: Device Size C_SIZE                            :0xedc8
14:36:24: Reserv3                                       :0x0
14:36:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:24: Reserv4                                       :0x0
14:36:24: Write Speed Factor R2W_FACTOR                 :0x2
14:36:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:24: FILE_FORMAT_GRP                               :0x0
14:36:24: COPY flag                                     :0x1
14:36:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:24: File_Format                                   :0x0
14:36:24: CRC                                           :0x0
14:36:24: ####CSD Registe Values####  

14:36:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:24: [GetSCRRegisterEntry] Passed
14:36:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:24: Data_Status_After Erases          : 0
14:36:24: CPRM Security Support             : No Security
14:36:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:24: Spec. Version                     : Version 3.0X
14:36:24: Extended Security Support         : Extended_Security_Not_Supported
14:36:24: Command Support                   : COMMAND_SUPPORT
14:36:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AC90>, <py_sfcl.CommandDataDefinition object at 0x0667CE70>) , Command count = 2211 ] 
14:36:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F7E0>, <py_sfcl.CommandDataDefinition object at 0x0667FB10>) , Command count = 2212 ] 
14:36:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:24: [ SetBusWidth(0x4) , Command count = 2213 ] 
14:36:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667FC30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2214 ] 
14:36:24: Protected Area Size 0x28000
14:36:24: Bus Width           2
14:36:24: Secure Mode         0
14:36:24: Speed  Class        4
14:36:24: Perf Move           0
14:36:24: Au Size             9
14:36:24: Erase Size          15
14:36:24: Erase Timeout       1
14:36:24: Erase offset        1
14:36:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2215 ] 
14:36:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:24: Host Frequency set to 100000 KHz
14:36:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:24: ####CSD Registe 2.0 Values####
14:36:24: CSD_STRUCTURE                                 :0x1
14:36:24: Reserv1                                       :0x0
14:36:24: Time Access 1 TAAC                            :0xe
14:36:24: Time Access 2 NSAC*100                        :0x0
14:36:24: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:24: Card Command Classess CCC                     :0x5b5
14:36:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:24: DSR(driver stage register)  DSR_IMP           :0x0
14:36:24: Reserv2                                       :0x0
14:36:24: Device Size C_SIZE                            :0xedc8
14:36:24: Reserv3                                       :0x0
14:36:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:24: Reserv4                                       :0x0
14:36:24: Write Speed Factor R2W_FACTOR                 :0x2
14:36:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:24: FILE_FORMAT_GRP                               :0x0
14:36:24: COPY flag                                     :0x1
14:36:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:24: File_Format                                   :0x0
14:36:24: CRC                                           :0x0
14:36:24: ####CSD Registe Values####  

14:36:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F420>, <py_sfcl.CommandDataDefinition object at 0x0667C180>) , Command count = 2216 ] 
14:36:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AF30>, <py_sfcl.CommandDataDefinition object at 0x06685D50>) , Command count = 2217 ] 
14:36:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:24: [DVTCommonLib]### Erase :Erase API Called
14:36:24: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x24018 with Blockcount:0x2001
14:36:24: [ EraseLba(0x24018, 0x2001) , Command count = 2218 ] 
14:36:24: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x24018 with Blockcount:0x2001 

14:36:24: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 9
14:36:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x26018 to EndLba:0x26020 with Increment Pattern
14:36:24: [ WrLbaNoData(0x26018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2219 ] 
14:36:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x26018 to EndLba:0x26020 with Increment Pattern 

14:36:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F360>, <py_sfcl.CommandDataDefinition object at 0x0667F270>) , Command count = 2220 ] 
14:36:24: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C4B0>, <py_sfcl.CommandDataDefinition object at 0x0667C930>) , Command count = 2221 ] 
14:36:24: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:24: [DVTCommonLib]###  R1bCommandAbort called
14:36:25: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2E, False) , Command count = 2222 ] 
14:36:25: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:25: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:27: Host Frequency set to 25000 KHz
14:36:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FDE0>, 0x0, True) , Command count = 2223 ] 
14:36:27: [GO18_globalSetVolt]### Host voltage value is set.
14:36:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FFC0>, 0x0, False) , Command count = 2224 ] 
14:36:27: [GO18_globalSetVolt]### Host voltage value is set.
14:36:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2225 ] 
14:36:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2226 ] 
14:36:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2227 ] 
14:36:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FF00>, <py_sfcl.CommandDataDefinition object at 0x0667F150>) , Command count = 2228 ] 
14:36:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FC90>, <py_sfcl.CommandDataDefinition object at 0x0667C930>) , Command count = 2229 ] 
14:36:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:27: [ SetCardRCA(0x1, 0xD555) , Command count = 2230 ] 
14:36:27: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:27: Host Frequency set to 25000 KHz
14:36:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:27: ####CSD Registe 2.0 Values####
14:36:27: CSD_STRUCTURE                                 :0x1
14:36:27: Reserv1                                       :0x0
14:36:27: Time Access 1 TAAC                            :0xe
14:36:27: Time Access 2 NSAC*100                        :0x0
14:36:27: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:27: Card Command Classess CCC                     :0x5b5
14:36:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:27: DSR(driver stage register)  DSR_IMP           :0x0
14:36:27: Reserv2                                       :0x0
14:36:27: Device Size C_SIZE                            :0xedc8
14:36:27: Reserv3                                       :0x0
14:36:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:27: Reserv4                                       :0x0
14:36:27: Write Speed Factor R2W_FACTOR                 :0x2
14:36:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:27: FILE_FORMAT_GRP                               :0x0
14:36:27: COPY flag                                     :0x1
14:36:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:27: File_Format                                   :0x0
14:36:27: CRC                                           :0x0
14:36:27: ####CSD Registe Values####  

14:36:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:27: [GetSCRRegisterEntry] Passed
14:36:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:27: Data_Status_After Erases          : 0
14:36:27: CPRM Security Support             : No Security
14:36:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:27: Spec. Version                     : Version 3.0X
14:36:27: Extended Security Support         : Extended_Security_Not_Supported
14:36:27: Command Support                   : COMMAND_SUPPORT
14:36:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F300>, <py_sfcl.CommandDataDefinition object at 0x0667F960>) , Command count = 2231 ] 
14:36:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FE40>, <py_sfcl.CommandDataDefinition object at 0x0667F480>) , Command count = 2232 ] 
14:36:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:27: [ SetBusWidth(0x4) , Command count = 2233 ] 
14:36:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667FBA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2234 ] 
14:36:27: Protected Area Size 0x28000
14:36:27: Bus Width           2
14:36:27: Secure Mode         0
14:36:27: Speed  Class        4
14:36:27: Perf Move           0
14:36:27: Au Size             9
14:36:27: Erase Size          15
14:36:27: Erase Timeout       1
14:36:27: Erase offset        1
14:36:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2235 ] 
14:36:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:27: Host Frequency set to 100000 KHz
14:36:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:27: ####CSD Registe 2.0 Values####
14:36:27: CSD_STRUCTURE                                 :0x1
14:36:27: Reserv1                                       :0x0
14:36:27: Time Access 1 TAAC                            :0xe
14:36:27: Time Access 2 NSAC*100                        :0x0
14:36:27: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:27: Card Command Classess CCC                     :0x5b5
14:36:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:27: DSR(driver stage register)  DSR_IMP           :0x0
14:36:27: Reserv2                                       :0x0
14:36:27: Device Size C_SIZE                            :0xedc8
14:36:27: Reserv3                                       :0x0
14:36:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:27: Reserv4                                       :0x0
14:36:27: Write Speed Factor R2W_FACTOR                 :0x2
14:36:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:27: FILE_FORMAT_GRP                               :0x0
14:36:27: COPY flag                                     :0x1
14:36:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:27: File_Format                                   :0x0
14:36:27: CRC                                           :0x0
14:36:27: ####CSD Registe Values####  

14:36:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F840>, <py_sfcl.CommandDataDefinition object at 0x0667F720>) , Command count = 2236 ] 
14:36:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AEA0>, <py_sfcl.CommandDataDefinition object at 0x0667CCC0>) , Command count = 2237 ] 
14:36:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:27: [DVTCommonLib]### Erase :Erase API Called
14:36:27: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x26018 with Blockcount:0x2001
14:36:27: [ EraseLba(0x26018, 0x2001) , Command count = 2238 ] 
14:36:27: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x26018 with Blockcount:0x2001 

14:36:27: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 8
14:36:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x28018 to EndLba:0x28020 with Increment Pattern
14:36:27: [ WrLbaNoData(0x28018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2239 ] 
14:36:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x28018 to EndLba:0x28020 with Increment Pattern 

14:36:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066832D0>, <py_sfcl.CommandDataDefinition object at 0x0667F1E0>) , Command count = 2240 ] 
14:36:27: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CC30>, <py_sfcl.CommandDataDefinition object at 0x0667F090>) , Command count = 2241 ] 
14:36:27: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:27: [DVTCommonLib]###  R1bCommandAbort called
14:36:27: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1E, False) , Command count = 2242 ] 
14:36:27: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:29: Host Frequency set to 25000 KHz
14:36:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FCC0>, 0x0, True) , Command count = 2243 ] 
14:36:29: [GO18_globalSetVolt]### Host voltage value is set.
14:36:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C870>, 0x0, False) , Command count = 2244 ] 
14:36:29: [GO18_globalSetVolt]### Host voltage value is set.
14:36:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2245 ] 
14:36:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2246 ] 
14:36:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2247 ] 
14:36:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066836C0>, <py_sfcl.CommandDataDefinition object at 0x0667F750>) , Command count = 2248 ] 
14:36:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683900>, <py_sfcl.CommandDataDefinition object at 0x0667F0F0>) , Command count = 2249 ] 
14:36:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:30: [ SetCardRCA(0x1, 0xD555) , Command count = 2250 ] 
14:36:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:30: Host Frequency set to 25000 KHz
14:36:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:30: ####CSD Registe 2.0 Values####
14:36:30: CSD_STRUCTURE                                 :0x1
14:36:30: Reserv1                                       :0x0
14:36:30: Time Access 1 TAAC                            :0xe
14:36:30: Time Access 2 NSAC*100                        :0x0
14:36:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:30: Card Command Classess CCC                     :0x5b5
14:36:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:30: DSR(driver stage register)  DSR_IMP           :0x0
14:36:30: Reserv2                                       :0x0
14:36:30: Device Size C_SIZE                            :0xedc8
14:36:30: Reserv3                                       :0x0
14:36:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:30: Reserv4                                       :0x0
14:36:30: Write Speed Factor R2W_FACTOR                 :0x2
14:36:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:30: FILE_FORMAT_GRP                               :0x0
14:36:30: COPY flag                                     :0x1
14:36:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:30: File_Format                                   :0x0
14:36:30: CRC                                           :0x0
14:36:30: ####CSD Registe Values####  

14:36:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:30: [GetSCRRegisterEntry] Passed
14:36:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:30: Data_Status_After Erases          : 0
14:36:30: CPRM Security Support             : No Security
14:36:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:30: Spec. Version                     : Version 3.0X
14:36:30: Extended Security Support         : Extended_Security_Not_Supported
14:36:30: Command Support                   : COMMAND_SUPPORT
14:36:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F240>, <py_sfcl.CommandDataDefinition object at 0x0667FAE0>) , Command count = 2251 ] 
14:36:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683180>, <py_sfcl.CommandDataDefinition object at 0x06683A50>) , Command count = 2252 ] 
14:36:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:30: [ SetBusWidth(0x4) , Command count = 2253 ] 
14:36:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683060>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2254 ] 
14:36:30: Protected Area Size 0x28000
14:36:30: Bus Width           2
14:36:30: Secure Mode         0
14:36:30: Speed  Class        4
14:36:30: Perf Move           0
14:36:30: Au Size             9
14:36:30: Erase Size          15
14:36:30: Erase Timeout       1
14:36:30: Erase offset        1
14:36:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2255 ] 
14:36:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:30: Host Frequency set to 100000 KHz
14:36:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:30: ####CSD Registe 2.0 Values####
14:36:30: CSD_STRUCTURE                                 :0x1
14:36:30: Reserv1                                       :0x0
14:36:30: Time Access 1 TAAC                            :0xe
14:36:30: Time Access 2 NSAC*100                        :0x0
14:36:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:30: Card Command Classess CCC                     :0x5b5
14:36:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:30: DSR(driver stage register)  DSR_IMP           :0x0
14:36:30: Reserv2                                       :0x0
14:36:30: Device Size C_SIZE                            :0xedc8
14:36:30: Reserv3                                       :0x0
14:36:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:30: Reserv4                                       :0x0
14:36:30: Write Speed Factor R2W_FACTOR                 :0x2
14:36:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:30: FILE_FORMAT_GRP                               :0x0
14:36:30: COPY flag                                     :0x1
14:36:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:30: File_Format                                   :0x0
14:36:30: CRC                                           :0x0
14:36:30: ####CSD Registe Values####  

14:36:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683360>, <py_sfcl.CommandDataDefinition object at 0x0667FBA0>) , Command count = 2256 ] 
14:36:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F3C0>, <py_sfcl.CommandDataDefinition object at 0x0667FF60>) , Command count = 2257 ] 
14:36:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:30: [DVTCommonLib]### Erase :Erase API Called
14:36:30: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x28018 with Blockcount:0x2001
14:36:30: [ EraseLba(0x28018, 0x2001) , Command count = 2258 ] 
14:36:30: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x28018 with Blockcount:0x2001 

14:36:30: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 7
14:36:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2A018 to EndLba:0x2A020 with Increment Pattern
14:36:30: [ WrLbaNoData(0x2A018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2259 ] 
14:36:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2A018 to EndLba:0x2A020 with Increment Pattern 

14:36:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683990>, <py_sfcl.CommandDataDefinition object at 0x06683390>) , Command count = 2260 ] 
14:36:30: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F3F0>, <py_sfcl.CommandDataDefinition object at 0x0667F810>) , Command count = 2261 ] 
14:36:30: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:30: [DVTCommonLib]###  R1bCommandAbort called
14:36:30: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x7, False) , Command count = 2262 ] 
14:36:30: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:32: Host Frequency set to 25000 KHz
14:36:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:32: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683DB0>, 0x0, True) , Command count = 2263 ] 
14:36:32: [GO18_globalSetVolt]### Host voltage value is set.
14:36:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683E70>, 0x0, False) , Command count = 2264 ] 
14:36:32: [GO18_globalSetVolt]### Host voltage value is set.
14:36:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2265 ] 
14:36:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2266 ] 
14:36:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2267 ] 
14:36:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D20>, <py_sfcl.CommandDataDefinition object at 0x06683540>) , Command count = 2268 ] 
14:36:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066830F0>, <py_sfcl.CommandDataDefinition object at 0x0667F810>) , Command count = 2269 ] 
14:36:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:33: [ SetCardRCA(0x1, 0xD555) , Command count = 2270 ] 
14:36:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:33: Host Frequency set to 25000 KHz
14:36:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:33: ####CSD Registe 2.0 Values####
14:36:33: CSD_STRUCTURE                                 :0x1
14:36:33: Reserv1                                       :0x0
14:36:33: Time Access 1 TAAC                            :0xe
14:36:33: Time Access 2 NSAC*100                        :0x0
14:36:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:33: Card Command Classess CCC                     :0x5b5
14:36:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:33: DSR(driver stage register)  DSR_IMP           :0x0
14:36:33: Reserv2                                       :0x0
14:36:33: Device Size C_SIZE                            :0xedc8
14:36:33: Reserv3                                       :0x0
14:36:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:33: Reserv4                                       :0x0
14:36:33: Write Speed Factor R2W_FACTOR                 :0x2
14:36:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:33: FILE_FORMAT_GRP                               :0x0
14:36:33: COPY flag                                     :0x1
14:36:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:33: File_Format                                   :0x0
14:36:33: CRC                                           :0x0
14:36:33: ####CSD Registe Values####  

14:36:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:33: [GetSCRRegisterEntry] Passed
14:36:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:33: Data_Status_After Erases          : 0
14:36:33: CPRM Security Support             : No Security
14:36:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:33: Spec. Version                     : Version 3.0X
14:36:33: Extended Security Support         : Extended_Security_Not_Supported
14:36:33: Command Support                   : COMMAND_SUPPORT
14:36:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683210>, <py_sfcl.CommandDataDefinition object at 0x06683F00>) , Command count = 2271 ] 
14:36:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683EA0>, <py_sfcl.CommandDataDefinition object at 0x066836F0>) , Command count = 2272 ] 
14:36:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:33: [ SetBusWidth(0x4) , Command count = 2273 ] 
14:36:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066831B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2274 ] 
14:36:33: Protected Area Size 0x28000
14:36:33: Bus Width           2
14:36:33: Secure Mode         0
14:36:33: Speed  Class        4
14:36:33: Perf Move           0
14:36:33: Au Size             9
14:36:33: Erase Size          15
14:36:33: Erase Timeout       1
14:36:33: Erase offset        1
14:36:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2275 ] 
14:36:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:33: Host Frequency set to 100000 KHz
14:36:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:33: ####CSD Registe 2.0 Values####
14:36:33: CSD_STRUCTURE                                 :0x1
14:36:33: Reserv1                                       :0x0
14:36:33: Time Access 1 TAAC                            :0xe
14:36:33: Time Access 2 NSAC*100                        :0x0
14:36:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:33: Card Command Classess CCC                     :0x5b5
14:36:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:33: DSR(driver stage register)  DSR_IMP           :0x0
14:36:33: Reserv2                                       :0x0
14:36:33: Device Size C_SIZE                            :0xedc8
14:36:33: Reserv3                                       :0x0
14:36:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:33: Reserv4                                       :0x0
14:36:33: Write Speed Factor R2W_FACTOR                 :0x2
14:36:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:33: FILE_FORMAT_GRP                               :0x0
14:36:33: COPY flag                                     :0x1
14:36:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:33: File_Format                                   :0x0
14:36:33: CRC                                           :0x0
14:36:33: ####CSD Registe Values####  

14:36:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D80>, <py_sfcl.CommandDataDefinition object at 0x06683840>) , Command count = 2276 ] 
14:36:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CDE0>, <py_sfcl.CommandDataDefinition object at 0x06685930>) , Command count = 2277 ] 
14:36:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:33: [DVTCommonLib]### Erase :Erase API Called
14:36:33: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2A018 with Blockcount:0x2001
14:36:33: [ EraseLba(0x2A018, 0x2001) , Command count = 2278 ] 
14:36:33: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2A018 with Blockcount:0x2001 

14:36:33: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 6
14:36:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2C018 to EndLba:0x2C020 with Increment Pattern
14:36:33: [ WrLbaNoData(0x2C018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2279 ] 
14:36:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2C018 to EndLba:0x2C020 with Increment Pattern 

14:36:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6F90>, <py_sfcl.CommandDataDefinition object at 0x06683BD0>) , Command count = 2280 ] 
14:36:33: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FB70>, <py_sfcl.CommandDataDefinition object at 0x06683720>) , Command count = 2281 ] 
14:36:33: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:33: [DVTCommonLib]###  R1bCommandAbort called
14:36:33: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xC, False) , Command count = 2282 ] 
14:36:33: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:33: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:35: Host Frequency set to 25000 KHz
14:36:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x066832A0>, 0x0, True) , Command count = 2283 ] 
14:36:35: [GO18_globalSetVolt]### Host voltage value is set.
14:36:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FE8F00>, 0x0, False) , Command count = 2284 ] 
14:36:35: [GO18_globalSetVolt]### Host voltage value is set.
14:36:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2285 ] 
14:36:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2286 ] 
14:36:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2287 ] 
14:36:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683A80>, <py_sfcl.CommandDataDefinition object at 0x066837E0>) , Command count = 2288 ] 
14:36:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC01E0>, <py_sfcl.CommandDataDefinition object at 0x066839C0>) , Command count = 2289 ] 
14:36:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:35: [ SetCardRCA(0x1, 0xD555) , Command count = 2290 ] 
14:36:35: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:35: Host Frequency set to 25000 KHz
14:36:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:35: ####CSD Registe 2.0 Values####
14:36:35: CSD_STRUCTURE                                 :0x1
14:36:35: Reserv1                                       :0x0
14:36:35: Time Access 1 TAAC                            :0xe
14:36:35: Time Access 2 NSAC*100                        :0x0
14:36:35: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:35: Card Command Classess CCC                     :0x5b5
14:36:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:35: DSR(driver stage register)  DSR_IMP           :0x0
14:36:35: Reserv2                                       :0x0
14:36:35: Device Size C_SIZE                            :0xedc8
14:36:35: Reserv3                                       :0x0
14:36:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:35: Reserv4                                       :0x0
14:36:35: Write Speed Factor R2W_FACTOR                 :0x2
14:36:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:35: FILE_FORMAT_GRP                               :0x0
14:36:35: COPY flag                                     :0x1
14:36:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:35: File_Format                                   :0x0
14:36:35: CRC                                           :0x0
14:36:35: ####CSD Registe Values####  

14:36:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:35: [GetSCRRegisterEntry] Passed
14:36:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:35: Data_Status_After Erases          : 0
14:36:35: CPRM Security Support             : No Security
14:36:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:35: Spec. Version                     : Version 3.0X
14:36:35: Extended Security Support         : Extended_Security_Not_Supported
14:36:35: Command Support                   : COMMAND_SUPPORT
14:36:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683E40>, <py_sfcl.CommandDataDefinition object at 0x06683450>) , Command count = 2291 ] 
14:36:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6360>, <py_sfcl.CommandDataDefinition object at 0x06683C30>) , Command count = 2292 ] 
14:36:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:35: [ SetBusWidth(0x4) , Command count = 2293 ] 
14:36:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685BA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2294 ] 
14:36:35: Protected Area Size 0x28000
14:36:35: Bus Width           2
14:36:35: Secure Mode         0
14:36:35: Speed  Class        4
14:36:35: Perf Move           0
14:36:35: Au Size             9
14:36:35: Erase Size          15
14:36:35: Erase Timeout       1
14:36:35: Erase offset        1
14:36:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2295 ] 
14:36:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:36: Host Frequency set to 100000 KHz
14:36:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:36: ####CSD Registe 2.0 Values####
14:36:36: CSD_STRUCTURE                                 :0x1
14:36:36: Reserv1                                       :0x0
14:36:36: Time Access 1 TAAC                            :0xe
14:36:36: Time Access 2 NSAC*100                        :0x0
14:36:36: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:36: Card Command Classess CCC                     :0x5b5
14:36:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:36: DSR(driver stage register)  DSR_IMP           :0x0
14:36:36: Reserv2                                       :0x0
14:36:36: Device Size C_SIZE                            :0xedc8
14:36:36: Reserv3                                       :0x0
14:36:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:36: Reserv4                                       :0x0
14:36:36: Write Speed Factor R2W_FACTOR                 :0x2
14:36:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:36: FILE_FORMAT_GRP                               :0x0
14:36:36: COPY flag                                     :0x1
14:36:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:36: File_Format                                   :0x0
14:36:36: CRC                                           :0x0
14:36:36: ####CSD Registe Values####  

14:36:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D50>, <py_sfcl.CommandDataDefinition object at 0x066850C0>) , Command count = 2296 ] 
14:36:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F5A0>, <py_sfcl.CommandDataDefinition object at 0x066854E0>) , Command count = 2297 ] 
14:36:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:36: [DVTCommonLib]### Erase :Erase API Called
14:36:36: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2C018 with Blockcount:0x2001
14:36:36: [ EraseLba(0x2C018, 0x2001) , Command count = 2298 ] 
14:36:36: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2C018 with Blockcount:0x2001 

14:36:36: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 5
14:36:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2E018 to EndLba:0x2E020 with Increment Pattern
14:36:36: [ WrLbaNoData(0x2E018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2299 ] 
14:36:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2E018 to EndLba:0x2E020 with Increment Pattern 

14:36:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683E10>, <py_sfcl.CommandDataDefinition object at 0x066834E0>) , Command count = 2300 ] 
14:36:36: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683330>, <py_sfcl.CommandDataDefinition object at 0x06685A50>) , Command count = 2301 ] 
14:36:36: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:36: [DVTCommonLib]###  R1bCommandAbort called
14:36:36: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x26, False) , Command count = 2302 ] 
14:36:36: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:36: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:38: Host Frequency set to 25000 KHz
14:36:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:38: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FED0>, 0x0, True) , Command count = 2303 ] 
14:36:38: [GO18_globalSetVolt]### Host voltage value is set.
14:36:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x06032BA0>, 0x0, False) , Command count = 2304 ] 
14:36:38: [GO18_globalSetVolt]### Host voltage value is set.
14:36:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2305 ] 
14:36:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2306 ] 
14:36:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2307 ] 
14:36:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8C00>, <py_sfcl.CommandDataDefinition object at 0x06683780>) , Command count = 2308 ] 
14:36:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDAE40>, <py_sfcl.CommandDataDefinition object at 0x06685B10>) , Command count = 2309 ] 
14:36:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:38: [ SetCardRCA(0x1, 0xD555) , Command count = 2310 ] 
14:36:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:38: Host Frequency set to 25000 KHz
14:36:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:38: ####CSD Registe 2.0 Values####
14:36:38: CSD_STRUCTURE                                 :0x1
14:36:38: Reserv1                                       :0x0
14:36:38: Time Access 1 TAAC                            :0xe
14:36:38: Time Access 2 NSAC*100                        :0x0
14:36:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:38: Card Command Classess CCC                     :0x5b5
14:36:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:38: DSR(driver stage register)  DSR_IMP           :0x0
14:36:38: Reserv2                                       :0x0
14:36:38: Device Size C_SIZE                            :0xedc8
14:36:38: Reserv3                                       :0x0
14:36:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:38: Reserv4                                       :0x0
14:36:38: Write Speed Factor R2W_FACTOR                 :0x2
14:36:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:38: FILE_FORMAT_GRP                               :0x0
14:36:38: COPY flag                                     :0x1
14:36:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:38: File_Format                                   :0x0
14:36:38: CRC                                           :0x0
14:36:38: ####CSD Registe Values####  

14:36:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:38: [GetSCRRegisterEntry] Passed
14:36:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:38: Data_Status_After Erases          : 0
14:36:38: CPRM Security Support             : No Security
14:36:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:38: Spec. Version                     : Version 3.0X
14:36:38: Extended Security Support         : Extended_Security_Not_Supported
14:36:38: Command Support                   : COMMAND_SUPPORT
14:36:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066833C0>, <py_sfcl.CommandDataDefinition object at 0x06685840>) , Command count = 2311 ] 
14:36:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8FC0>, <py_sfcl.CommandDataDefinition object at 0x066853C0>) , Command count = 2312 ] 
14:36:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:38: [ SetBusWidth(0x4) , Command count = 2313 ] 
14:36:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2314 ] 
14:36:38: Protected Area Size 0x28000
14:36:38: Bus Width           2
14:36:38: Secure Mode         0
14:36:38: Speed  Class        4
14:36:38: Perf Move           0
14:36:38: Au Size             9
14:36:38: Erase Size          15
14:36:38: Erase Timeout       1
14:36:38: Erase offset        1
14:36:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2315 ] 
14:36:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:38: Host Frequency set to 100000 KHz
14:36:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:38: ####CSD Registe 2.0 Values####
14:36:38: CSD_STRUCTURE                                 :0x1
14:36:38: Reserv1                                       :0x0
14:36:38: Time Access 1 TAAC                            :0xe
14:36:38: Time Access 2 NSAC*100                        :0x0
14:36:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:38: Card Command Classess CCC                     :0x5b5
14:36:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:38: DSR(driver stage register)  DSR_IMP           :0x0
14:36:38: Reserv2                                       :0x0
14:36:38: Device Size C_SIZE                            :0xedc8
14:36:38: Reserv3                                       :0x0
14:36:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:38: Reserv4                                       :0x0
14:36:38: Write Speed Factor R2W_FACTOR                 :0x2
14:36:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:38: FILE_FORMAT_GRP                               :0x0
14:36:38: COPY flag                                     :0x1
14:36:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:38: File_Format                                   :0x0
14:36:38: CRC                                           :0x0
14:36:38: ####CSD Registe Values####  

14:36:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8990>, <py_sfcl.CommandDataDefinition object at 0x06685DB0>) , Command count = 2316 ] 
14:36:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8C60>, <py_sfcl.CommandDataDefinition object at 0x066858A0>) , Command count = 2317 ] 
14:36:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:38: [DVTCommonLib]### Erase :Erase API Called
14:36:38: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2E018 with Blockcount:0x2001
14:36:38: [ EraseLba(0x2E018, 0x2001) , Command count = 2318 ] 
14:36:38: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2E018 with Blockcount:0x2001 

14:36:38: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 4
14:36:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x30018 to EndLba:0x30020 with Increment Pattern
14:36:38: [ WrLbaNoData(0x30018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2319 ] 
14:36:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x30018 to EndLba:0x30020 with Increment Pattern 

14:36:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602B6C0>, <py_sfcl.CommandDataDefinition object at 0x066858D0>) , Command count = 2320 ] 
14:36:38: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683AB0>, <py_sfcl.CommandDataDefinition object at 0x066850F0>) , Command count = 2321 ] 
14:36:38: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:38: [DVTCommonLib]###  R1bCommandAbort called
14:36:39: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x16, False) , Command count = 2322 ] 
14:36:39: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:41: Host Frequency set to 25000 KHz
14:36:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683930>, 0x0, True) , Command count = 2323 ] 
14:36:41: [GO18_globalSetVolt]### Host voltage value is set.
14:36:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x066667E0>, 0x0, False) , Command count = 2324 ] 
14:36:41: [GO18_globalSetVolt]### Host voltage value is set.
14:36:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2325 ] 
14:36:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2326 ] 
14:36:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2327 ] 
14:36:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060327E0>, <py_sfcl.CommandDataDefinition object at 0x06666D50>) , Command count = 2328 ] 
14:36:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065724B0>, <py_sfcl.CommandDataDefinition object at 0x06685AE0>) , Command count = 2329 ] 
14:36:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:41: [ SetCardRCA(0x1, 0xD555) , Command count = 2330 ] 
14:36:41: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:41: Host Frequency set to 25000 KHz
14:36:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:41: ####CSD Registe 2.0 Values####
14:36:41: CSD_STRUCTURE                                 :0x1
14:36:41: Reserv1                                       :0x0
14:36:41: Time Access 1 TAAC                            :0xe
14:36:41: Time Access 2 NSAC*100                        :0x0
14:36:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:41: Card Command Classess CCC                     :0x5b5
14:36:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:41: DSR(driver stage register)  DSR_IMP           :0x0
14:36:41: Reserv2                                       :0x0
14:36:41: Device Size C_SIZE                            :0xedc8
14:36:41: Reserv3                                       :0x0
14:36:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:41: Reserv4                                       :0x0
14:36:41: Write Speed Factor R2W_FACTOR                 :0x2
14:36:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:41: FILE_FORMAT_GRP                               :0x0
14:36:41: COPY flag                                     :0x1
14:36:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:41: File_Format                                   :0x0
14:36:41: CRC                                           :0x0
14:36:41: ####CSD Registe Values####  

14:36:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:41: [GetSCRRegisterEntry] Passed
14:36:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:41: Data_Status_After Erases          : 0
14:36:41: CPRM Security Support             : No Security
14:36:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:41: Spec. Version                     : Version 3.0X
14:36:41: Extended Security Support         : Extended_Security_Not_Supported
14:36:41: Command Support                   : COMMAND_SUPPORT
14:36:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683B40>, <py_sfcl.CommandDataDefinition object at 0x06685720>) , Command count = 2331 ] 
14:36:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060329F0>, <py_sfcl.CommandDataDefinition object at 0x06666720>) , Command count = 2332 ] 
14:36:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:41: [ SetBusWidth(0x4) , Command count = 2333 ] 
14:36:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685060>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2334 ] 
14:36:41: Protected Area Size 0x28000
14:36:41: Bus Width           2
14:36:41: Secure Mode         0
14:36:41: Speed  Class        4
14:36:41: Perf Move           0
14:36:41: Au Size             9
14:36:41: Erase Size          15
14:36:41: Erase Timeout       1
14:36:41: Erase offset        1
14:36:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2335 ] 
14:36:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:41: Host Frequency set to 100000 KHz
14:36:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:41: ####CSD Registe 2.0 Values####
14:36:41: CSD_STRUCTURE                                 :0x1
14:36:41: Reserv1                                       :0x0
14:36:41: Time Access 1 TAAC                            :0xe
14:36:41: Time Access 2 NSAC*100                        :0x0
14:36:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:41: Card Command Classess CCC                     :0x5b5
14:36:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:41: DSR(driver stage register)  DSR_IMP           :0x0
14:36:41: Reserv2                                       :0x0
14:36:41: Device Size C_SIZE                            :0xedc8
14:36:41: Reserv3                                       :0x0
14:36:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:41: Reserv4                                       :0x0
14:36:41: Write Speed Factor R2W_FACTOR                 :0x2
14:36:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:41: FILE_FORMAT_GRP                               :0x0
14:36:41: COPY flag                                     :0x1
14:36:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:41: File_Format                                   :0x0
14:36:41: CRC                                           :0x0
14:36:41: ####CSD Registe Values####  

14:36:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC0690>, <py_sfcl.CommandDataDefinition object at 0x06685990>) , Command count = 2336 ] 
14:36:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683F90>, <py_sfcl.CommandDataDefinition object at 0x066852A0>) , Command count = 2337 ] 
14:36:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:41: [DVTCommonLib]### Erase :Erase API Called
14:36:41: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x30018 with Blockcount:0x2001
14:36:41: [ EraseLba(0x30018, 0x2001) , Command count = 2338 ] 
14:36:41: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x30018 with Blockcount:0x2001 

14:36:41: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 3
14:36:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x32018 to EndLba:0x32020 with Increment Pattern
14:36:41: [ WrLbaNoData(0x32018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2339 ] 
14:36:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x32018 to EndLba:0x32020 with Increment Pattern 

14:36:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032B40>, <py_sfcl.CommandDataDefinition object at 0x06666FC0>) , Command count = 2340 ] 
14:36:41: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8F90>, <py_sfcl.CommandDataDefinition object at 0x06685C00>) , Command count = 2341 ] 
14:36:41: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:41: [DVTCommonLib]###  R1bCommandAbort called
14:36:41: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xB, False) , Command count = 2342 ] 
14:36:41: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:43: Host Frequency set to 25000 KHz
14:36:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x01E5BDB0>, 0x0, True) , Command count = 2343 ] 
14:36:43: [GO18_globalSetVolt]### Host voltage value is set.
14:36:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB5A0>, 0x0, False) , Command count = 2344 ] 
14:36:43: [GO18_globalSetVolt]### Host voltage value is set.
14:36:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2345 ] 
14:36:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2346 ] 
14:36:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2347 ] 
14:36:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB210>, <py_sfcl.CommandDataDefinition object at 0x066669C0>) , Command count = 2348 ] 
14:36:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066664E0>, <py_sfcl.CommandDataDefinition object at 0x06685C00>) , Command count = 2349 ] 
14:36:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:44: [ SetCardRCA(0x1, 0xD555) , Command count = 2350 ] 
14:36:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:44: Host Frequency set to 25000 KHz
14:36:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:44: ####CSD Registe 2.0 Values####
14:36:44: CSD_STRUCTURE                                 :0x1
14:36:44: Reserv1                                       :0x0
14:36:44: Time Access 1 TAAC                            :0xe
14:36:44: Time Access 2 NSAC*100                        :0x0
14:36:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:44: Card Command Classess CCC                     :0x5b5
14:36:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:44: DSR(driver stage register)  DSR_IMP           :0x0
14:36:44: Reserv2                                       :0x0
14:36:44: Device Size C_SIZE                            :0xedc8
14:36:44: Reserv3                                       :0x0
14:36:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:44: Reserv4                                       :0x0
14:36:44: Write Speed Factor R2W_FACTOR                 :0x2
14:36:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:44: FILE_FORMAT_GRP                               :0x0
14:36:44: COPY flag                                     :0x1
14:36:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:44: File_Format                                   :0x0
14:36:44: CRC                                           :0x0
14:36:44: ####CSD Registe Values####  

14:36:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:44: [GetSCRRegisterEntry] Passed
14:36:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:44: Data_Status_After Erases          : 0
14:36:44: CPRM Security Support             : No Security
14:36:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:44: Spec. Version                     : Version 3.0X
14:36:44: Extended Security Support         : Extended_Security_Not_Supported
14:36:44: Command Support                   : COMMAND_SUPPORT
14:36:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB420>, <py_sfcl.CommandDataDefinition object at 0x066AB3C0>) , Command count = 2351 ] 
14:36:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BED0>, <py_sfcl.CommandDataDefinition object at 0x066AB180>) , Command count = 2352 ] 
14:36:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:44: [ SetBusWidth(0x4) , Command count = 2353 ] 
14:36:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066663F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2354 ] 
14:36:44: Protected Area Size 0x28000
14:36:44: Bus Width           2
14:36:44: Secure Mode         0
14:36:44: Speed  Class        4
14:36:44: Perf Move           0
14:36:44: Au Size             9
14:36:44: Erase Size          15
14:36:44: Erase Timeout       1
14:36:44: Erase offset        1
14:36:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2355 ] 
14:36:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:44: Host Frequency set to 100000 KHz
14:36:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:44: ####CSD Registe 2.0 Values####
14:36:44: CSD_STRUCTURE                                 :0x1
14:36:44: Reserv1                                       :0x0
14:36:44: Time Access 1 TAAC                            :0xe
14:36:44: Time Access 2 NSAC*100                        :0x0
14:36:44: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:44: Card Command Classess CCC                     :0x5b5
14:36:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:44: DSR(driver stage register)  DSR_IMP           :0x0
14:36:44: Reserv2                                       :0x0
14:36:44: Device Size C_SIZE                            :0xedc8
14:36:44: Reserv3                                       :0x0
14:36:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:44: Reserv4                                       :0x0
14:36:44: Write Speed Factor R2W_FACTOR                 :0x2
14:36:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:44: FILE_FORMAT_GRP                               :0x0
14:36:44: COPY flag                                     :0x1
14:36:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:44: File_Format                                   :0x0
14:36:44: CRC                                           :0x0
14:36:44: ####CSD Registe Values####  

14:36:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666630>, <py_sfcl.CommandDataDefinition object at 0x06666E10>) , Command count = 2356 ] 
14:36:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666C60>, <py_sfcl.CommandDataDefinition object at 0x06685060>) , Command count = 2357 ] 
14:36:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:44: [DVTCommonLib]### Erase :Erase API Called
14:36:44: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x32018 with Blockcount:0x2001
14:36:44: [ EraseLba(0x32018, 0x2001) , Command count = 2358 ] 
14:36:44: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x32018 with Blockcount:0x2001 

14:36:44: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 2
14:36:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x34018 to EndLba:0x34020 with Increment Pattern
14:36:44: [ WrLbaNoData(0x34018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2359 ] 
14:36:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x34018 to EndLba:0x34020 with Increment Pattern 

14:36:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB480>, <py_sfcl.CommandDataDefinition object at 0x06666840>) , Command count = 2360 ] 
14:36:44: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032810>, <py_sfcl.CommandDataDefinition object at 0x06685060>) , Command count = 2361 ] 
14:36:44: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:44: [DVTCommonLib]###  R1bCommandAbort called
14:36:44: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x16, False) , Command count = 2362 ] 
14:36:44: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:44: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:46: Host Frequency set to 25000 KHz
14:36:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:46: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x06032B10>, 0x0, True) , Command count = 2363 ] 
14:36:46: [GO18_globalSetVolt]### Host voltage value is set.
14:36:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A5A0>, 0x0, False) , Command count = 2364 ] 
14:36:46: [GO18_globalSetVolt]### Host voltage value is set.
14:36:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2365 ] 
14:36:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2366 ] 
14:36:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2367 ] 
14:36:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065721E0>, <py_sfcl.CommandDataDefinition object at 0x066AB1E0>) , Command count = 2368 ] 
14:36:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABDB0>, <py_sfcl.CommandDataDefinition object at 0x06685060>) , Command count = 2369 ] 
14:36:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:46: [ SetCardRCA(0x1, 0xD555) , Command count = 2370 ] 
14:36:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:47: Host Frequency set to 25000 KHz
14:36:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:47: ####CSD Registe 2.0 Values####
14:36:47: CSD_STRUCTURE                                 :0x1
14:36:47: Reserv1                                       :0x0
14:36:47: Time Access 1 TAAC                            :0xe
14:36:47: Time Access 2 NSAC*100                        :0x0
14:36:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:47: Card Command Classess CCC                     :0x5b5
14:36:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:47: DSR(driver stage register)  DSR_IMP           :0x0
14:36:47: Reserv2                                       :0x0
14:36:47: Device Size C_SIZE                            :0xedc8
14:36:47: Reserv3                                       :0x0
14:36:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:47: Reserv4                                       :0x0
14:36:47: Write Speed Factor R2W_FACTOR                 :0x2
14:36:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:47: FILE_FORMAT_GRP                               :0x0
14:36:47: COPY flag                                     :0x1
14:36:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:47: File_Format                                   :0x0
14:36:47: CRC                                           :0x0
14:36:47: ####CSD Registe Values####  

14:36:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:47: [GetSCRRegisterEntry] Passed
14:36:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:47: Data_Status_After Erases          : 0
14:36:47: CPRM Security Support             : No Security
14:36:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:47: Spec. Version                     : Version 3.0X
14:36:47: Extended Security Support         : Extended_Security_Not_Supported
14:36:47: Command Support                   : COMMAND_SUPPORT
14:36:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666E70>, <py_sfcl.CommandDataDefinition object at 0x06666540>) , Command count = 2371 ] 
14:36:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572330>, <py_sfcl.CommandDataDefinition object at 0x066AB2A0>) , Command count = 2372 ] 
14:36:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:47: [ SetBusWidth(0x4) , Command count = 2373 ] 
14:36:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2374 ] 
14:36:47: Protected Area Size 0x28000
14:36:47: Bus Width           2
14:36:47: Secure Mode         0
14:36:47: Speed  Class        4
14:36:47: Perf Move           0
14:36:47: Au Size             9
14:36:47: Erase Size          15
14:36:47: Erase Timeout       1
14:36:47: Erase offset        1
14:36:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2375 ] 
14:36:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:47: Host Frequency set to 100000 KHz
14:36:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:47: ####CSD Registe 2.0 Values####
14:36:47: CSD_STRUCTURE                                 :0x1
14:36:47: Reserv1                                       :0x0
14:36:47: Time Access 1 TAAC                            :0xe
14:36:47: Time Access 2 NSAC*100                        :0x0
14:36:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:47: Card Command Classess CCC                     :0x5b5
14:36:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:47: DSR(driver stage register)  DSR_IMP           :0x0
14:36:47: Reserv2                                       :0x0
14:36:47: Device Size C_SIZE                            :0xedc8
14:36:47: Reserv3                                       :0x0
14:36:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:47: Reserv4                                       :0x0
14:36:47: Write Speed Factor R2W_FACTOR                 :0x2
14:36:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:47: FILE_FORMAT_GRP                               :0x0
14:36:47: COPY flag                                     :0x1
14:36:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:47: File_Format                                   :0x0
14:36:47: CRC                                           :0x0
14:36:47: ####CSD Registe Values####  

14:36:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB600>, <py_sfcl.CommandDataDefinition object at 0x066AB300>) , Command count = 2376 ] 
14:36:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666B10>, <py_sfcl.CommandDataDefinition object at 0x06685270>) , Command count = 2377 ] 
14:36:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:47: [DVTCommonLib]### Erase :Erase API Called
14:36:47: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x34018 with Blockcount:0x2001
14:36:47: [ EraseLba(0x34018, 0x2001) , Command count = 2378 ] 
14:36:47: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x34018 with Blockcount:0x2001 

14:36:47: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 1
14:36:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x36018 to EndLba:0x36020 with Increment Pattern
14:36:47: [ WrLbaNoData(0x36018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2379 ] 
14:36:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x36018 to EndLba:0x36020 with Increment Pattern 

14:36:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB3F0>, <py_sfcl.CommandDataDefinition object at 0x066662D0>) , Command count = 2380 ] 
14:36:47: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB270>, <py_sfcl.CommandDataDefinition object at 0x0667A300>) , Command count = 2381 ] 
14:36:47: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:47: [DVTCommonLib]###  R1bCommandAbort called
14:36:47: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x27, False) , Command count = 2382 ] 
14:36:47: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:49: Host Frequency set to 25000 KHz
14:36:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666990>, 0x0, True) , Command count = 2383 ] 
14:36:49: [GO18_globalSetVolt]### Host voltage value is set.
14:36:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AE10>, 0x0, False) , Command count = 2384 ] 
14:36:49: [GO18_globalSetVolt]### Host voltage value is set.
14:36:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2385 ] 
14:36:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2386 ] 
14:36:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2387 ] 
14:36:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABED0>, <py_sfcl.CommandDataDefinition object at 0x06666870>) , Command count = 2388 ] 
14:36:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE10>, <py_sfcl.CommandDataDefinition object at 0x0667A030>) , Command count = 2389 ] 
14:36:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:49: [ SetCardRCA(0x1, 0xD555) , Command count = 2390 ] 
14:36:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:49: Host Frequency set to 25000 KHz
14:36:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:49: ####CSD Registe 2.0 Values####
14:36:49: CSD_STRUCTURE                                 :0x1
14:36:49: Reserv1                                       :0x0
14:36:49: Time Access 1 TAAC                            :0xe
14:36:49: Time Access 2 NSAC*100                        :0x0
14:36:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:49: Card Command Classess CCC                     :0x5b5
14:36:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:49: DSR(driver stage register)  DSR_IMP           :0x0
14:36:49: Reserv2                                       :0x0
14:36:49: Device Size C_SIZE                            :0xedc8
14:36:49: Reserv3                                       :0x0
14:36:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:49: Reserv4                                       :0x0
14:36:49: Write Speed Factor R2W_FACTOR                 :0x2
14:36:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:49: FILE_FORMAT_GRP                               :0x0
14:36:49: COPY flag                                     :0x1
14:36:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:49: File_Format                                   :0x0
14:36:49: CRC                                           :0x0
14:36:49: ####CSD Registe Values####  

14:36:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:49: [GetSCRRegisterEntry] Passed
14:36:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:49: Data_Status_After Erases          : 0
14:36:49: CPRM Security Support             : No Security
14:36:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:49: Spec. Version                     : Version 3.0X
14:36:49: Extended Security Support         : Extended_Security_Not_Supported
14:36:49: Command Support                   : COMMAND_SUPPORT
14:36:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666960>, <py_sfcl.CommandDataDefinition object at 0x0667A7B0>) , Command count = 2391 ] 
14:36:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABFC0>, <py_sfcl.CommandDataDefinition object at 0x0667ACF0>) , Command count = 2392 ] 
14:36:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:49: [ SetBusWidth(0x4) , Command count = 2393 ] 
14:36:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667AF60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2394 ] 
14:36:49: Protected Area Size 0x28000
14:36:49: Bus Width           2
14:36:49: Secure Mode         0
14:36:49: Speed  Class        4
14:36:49: Perf Move           0
14:36:49: Au Size             9
14:36:49: Erase Size          15
14:36:49: Erase Timeout       1
14:36:49: Erase offset        1
14:36:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2395 ] 
14:36:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:50: Host Frequency set to 100000 KHz
14:36:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:50: ####CSD Registe 2.0 Values####
14:36:50: CSD_STRUCTURE                                 :0x1
14:36:50: Reserv1                                       :0x0
14:36:50: Time Access 1 TAAC                            :0xe
14:36:50: Time Access 2 NSAC*100                        :0x0
14:36:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:50: Card Command Classess CCC                     :0x5b5
14:36:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:50: DSR(driver stage register)  DSR_IMP           :0x0
14:36:50: Reserv2                                       :0x0
14:36:50: Device Size C_SIZE                            :0xedc8
14:36:50: Reserv3                                       :0x0
14:36:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:50: Reserv4                                       :0x0
14:36:50: Write Speed Factor R2W_FACTOR                 :0x2
14:36:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:50: FILE_FORMAT_GRP                               :0x0
14:36:50: COPY flag                                     :0x1
14:36:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:50: File_Format                                   :0x0
14:36:50: CRC                                           :0x0
14:36:50: ####CSD Registe Values####  

14:36:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A480>, <py_sfcl.CommandDataDefinition object at 0x0667A840>) , Command count = 2396 ] 
14:36:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF30>, <py_sfcl.CommandDataDefinition object at 0x06685C30>) , Command count = 2397 ] 
14:36:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:50: [DVTCommonLib]### Erase :Erase API Called
14:36:50: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x36018 with Blockcount:0x2001
14:36:50: [ EraseLba(0x36018, 0x2001) , Command count = 2398 ] 
14:36:50: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x36018 with Blockcount:0x2001 

14:36:50: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 0
14:36:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x38018 to EndLba:0x38020 with Increment Pattern
14:36:50: [ WrLbaNoData(0x38018, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2399 ] 
14:36:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x38018 to EndLba:0x38020 with Increment Pattern 

14:36:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666750>, <py_sfcl.CommandDataDefinition object at 0x0667AB40>) , Command count = 2400 ] 
14:36:50: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666420>, <py_sfcl.CommandDataDefinition object at 0x06685C30>) , Command count = 2401 ] 
14:36:50: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:50: [DVTCommonLib]###  R1bCommandAbort called
14:36:50: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x22, False) , Command count = 2402 ] 
14:36:50: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:50: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:52: Host Frequency set to 25000 KHz
14:36:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:52: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x066668A0>, 0x0, True) , Command count = 2403 ] 
14:36:52: [GO18_globalSetVolt]### Host voltage value is set.
14:36:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABDE0>, 0x0, False) , Command count = 2404 ] 
14:36:52: [GO18_globalSetVolt]### Host voltage value is set.
14:36:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2405 ] 
14:36:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2406 ] 
14:36:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2407 ] 
14:36:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A240>, <py_sfcl.CommandDataDefinition object at 0x0667A690>) , Command count = 2408 ] 
14:36:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C3F0>, <py_sfcl.CommandDataDefinition object at 0x0667A960>) , Command count = 2409 ] 
14:36:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:52: [ SetCardRCA(0x1, 0xD555) , Command count = 2410 ] 
14:36:52: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:52: Host Frequency set to 25000 KHz
14:36:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:52: ####CSD Registe 2.0 Values####
14:36:52: CSD_STRUCTURE                                 :0x1
14:36:52: Reserv1                                       :0x0
14:36:52: Time Access 1 TAAC                            :0xe
14:36:52: Time Access 2 NSAC*100                        :0x0
14:36:52: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:52: Card Command Classess CCC                     :0x5b5
14:36:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:52: DSR(driver stage register)  DSR_IMP           :0x0
14:36:52: Reserv2                                       :0x0
14:36:52: Device Size C_SIZE                            :0xedc8
14:36:52: Reserv3                                       :0x0
14:36:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:52: Reserv4                                       :0x0
14:36:52: Write Speed Factor R2W_FACTOR                 :0x2
14:36:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:52: FILE_FORMAT_GRP                               :0x0
14:36:52: COPY flag                                     :0x1
14:36:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:52: File_Format                                   :0x0
14:36:52: CRC                                           :0x0
14:36:52: ####CSD Registe Values####  

14:36:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:52: [GetSCRRegisterEntry] Passed
14:36:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:52: Data_Status_After Erases          : 0
14:36:52: CPRM Security Support             : No Security
14:36:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:52: Spec. Version                     : Version 3.0X
14:36:52: Extended Security Support         : Extended_Security_Not_Supported
14:36:52: Command Support                   : COMMAND_SUPPORT
14:36:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB360>, <py_sfcl.CommandDataDefinition object at 0x0667A750>) , Command count = 2411 ] 
14:36:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C390>, <py_sfcl.CommandDataDefinition object at 0x0667AD80>) , Command count = 2412 ] 
14:36:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:52: [ SetBusWidth(0x4) , Command count = 2413 ] 
14:36:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2414 ] 
14:36:52: Protected Area Size 0x28000
14:36:52: Bus Width           2
14:36:52: Secure Mode         0
14:36:52: Speed  Class        4
14:36:52: Perf Move           0
14:36:52: Au Size             9
14:36:52: Erase Size          15
14:36:52: Erase Timeout       1
14:36:52: Erase offset        1
14:36:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2415 ] 
14:36:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:52: Host Frequency set to 100000 KHz
14:36:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:52: ####CSD Registe 2.0 Values####
14:36:52: CSD_STRUCTURE                                 :0x1
14:36:52: Reserv1                                       :0x0
14:36:52: Time Access 1 TAAC                            :0xe
14:36:52: Time Access 2 NSAC*100                        :0x0
14:36:52: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:52: Card Command Classess CCC                     :0x5b5
14:36:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:52: DSR(driver stage register)  DSR_IMP           :0x0
14:36:52: Reserv2                                       :0x0
14:36:52: Device Size C_SIZE                            :0xedc8
14:36:52: Reserv3                                       :0x0
14:36:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:52: Reserv4                                       :0x0
14:36:52: Write Speed Factor R2W_FACTOR                 :0x2
14:36:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:52: FILE_FORMAT_GRP                               :0x0
14:36:52: COPY flag                                     :0x1
14:36:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:52: File_Format                                   :0x0
14:36:52: CRC                                           :0x0
14:36:52: ####CSD Registe Values####  

14:36:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A0F0>, <py_sfcl.CommandDataDefinition object at 0x0667AF60>) , Command count = 2416 ] 
14:36:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06685A20>, <py_sfcl.CommandDataDefinition object at 0x066852D0>) , Command count = 2417 ] 
14:36:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:52: [DVTCommonLib]### Erase :Erase API Called
14:36:52: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x38018 with Blockcount:0x2001
14:36:52: [ EraseLba(0x38018, 0x2001) , Command count = 2418 ] 
14:36:52: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x38018 with Blockcount:0x2001 

14:36:52: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Outer loop Count 1019
14:36:52: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 28
14:36:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x20 to EndLba:0x28 with Increment Pattern
14:36:52: [ WrLbaNoData(0x20, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2419 ] 
14:36:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x20 to EndLba:0x28 with Increment Pattern 

14:36:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C450>, <py_sfcl.CommandDataDefinition object at 0x0667C2D0>) , Command count = 2420 ] 
14:36:52: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB630>, <py_sfcl.CommandDataDefinition object at 0x06685A20>) , Command count = 2421 ] 
14:36:52: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:52: [DVTCommonLib]###  R1bCommandAbort called
14:36:52: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x14, False) , Command count = 2422 ] 
14:36:52: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:52: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:55: Host Frequency set to 25000 KHz
14:36:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CBD0>, 0x0, True) , Command count = 2423 ] 
14:36:55: [GO18_globalSetVolt]### Host voltage value is set.
14:36:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CD80>, 0x0, False) , Command count = 2424 ] 
14:36:55: [GO18_globalSetVolt]### Host voltage value is set.
14:36:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2425 ] 
14:36:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2426 ] 
14:36:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2427 ] 
14:36:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C0F0>, <py_sfcl.CommandDataDefinition object at 0x0667C1E0>) , Command count = 2428 ] 
14:36:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CB70>, <py_sfcl.CommandDataDefinition object at 0x0667AB70>) , Command count = 2429 ] 
14:36:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:55: [ SetCardRCA(0x1, 0xD555) , Command count = 2430 ] 
14:36:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:55: Host Frequency set to 25000 KHz
14:36:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:55: ####CSD Registe 2.0 Values####
14:36:55: CSD_STRUCTURE                                 :0x1
14:36:55: Reserv1                                       :0x0
14:36:55: Time Access 1 TAAC                            :0xe
14:36:55: Time Access 2 NSAC*100                        :0x0
14:36:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:55: Card Command Classess CCC                     :0x5b5
14:36:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:55: DSR(driver stage register)  DSR_IMP           :0x0
14:36:55: Reserv2                                       :0x0
14:36:55: Device Size C_SIZE                            :0xedc8
14:36:55: Reserv3                                       :0x0
14:36:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:55: Reserv4                                       :0x0
14:36:55: Write Speed Factor R2W_FACTOR                 :0x2
14:36:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:55: FILE_FORMAT_GRP                               :0x0
14:36:55: COPY flag                                     :0x1
14:36:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:55: File_Format                                   :0x0
14:36:55: CRC                                           :0x0
14:36:55: ####CSD Registe Values####  

14:36:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:55: [GetSCRRegisterEntry] Passed
14:36:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:55: Data_Status_After Erases          : 0
14:36:55: CPRM Security Support             : No Security
14:36:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:55: Spec. Version                     : Version 3.0X
14:36:55: Extended Security Support         : Extended_Security_Not_Supported
14:36:55: Command Support                   : COMMAND_SUPPORT
14:36:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C420>, <py_sfcl.CommandDataDefinition object at 0x0667AA20>) , Command count = 2431 ] 
14:36:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CB40>, <py_sfcl.CommandDataDefinition object at 0x0667C4E0>) , Command count = 2432 ] 
14:36:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:55: [ SetBusWidth(0x4) , Command count = 2433 ] 
14:36:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667CEA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2434 ] 
14:36:55: Protected Area Size 0x28000
14:36:55: Bus Width           2
14:36:55: Secure Mode         0
14:36:55: Speed  Class        4
14:36:55: Perf Move           0
14:36:55: Au Size             9
14:36:55: Erase Size          15
14:36:55: Erase Timeout       1
14:36:55: Erase offset        1
14:36:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2435 ] 
14:36:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:55: Host Frequency set to 100000 KHz
14:36:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:55: ####CSD Registe 2.0 Values####
14:36:55: CSD_STRUCTURE                                 :0x1
14:36:55: Reserv1                                       :0x0
14:36:55: Time Access 1 TAAC                            :0xe
14:36:55: Time Access 2 NSAC*100                        :0x0
14:36:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:55: Card Command Classess CCC                     :0x5b5
14:36:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:55: DSR(driver stage register)  DSR_IMP           :0x0
14:36:55: Reserv2                                       :0x0
14:36:55: Device Size C_SIZE                            :0xedc8
14:36:55: Reserv3                                       :0x0
14:36:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:55: Reserv4                                       :0x0
14:36:55: Write Speed Factor R2W_FACTOR                 :0x2
14:36:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:55: FILE_FORMAT_GRP                               :0x0
14:36:55: COPY flag                                     :0x1
14:36:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:55: File_Format                                   :0x0
14:36:55: CRC                                           :0x0
14:36:55: ####CSD Registe Values####  

14:36:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C3C0>, <py_sfcl.CommandDataDefinition object at 0x0667C060>) , Command count = 2436 ] 
14:36:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666090>, <py_sfcl.CommandDataDefinition object at 0x06685300>) , Command count = 2437 ] 
14:36:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:55: [DVTCommonLib]### Erase :Erase API Called
14:36:55: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x20 with Blockcount:0x2001
14:36:55: [ EraseLba(0x20, 0x2001) , Command count = 2438 ] 
14:36:55: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x20 with Blockcount:0x2001 

14:36:55: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 27
14:36:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2020 to EndLba:0x2028 with Increment Pattern
14:36:55: [ WrLbaNoData(0x2020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2439 ] 
14:36:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2020 to EndLba:0x2028 with Increment Pattern 

14:36:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AFC0>, <py_sfcl.CommandDataDefinition object at 0x0667C5D0>) , Command count = 2440 ] 
14:36:55: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CAE0>, <py_sfcl.CommandDataDefinition object at 0x0667C090>) , Command count = 2441 ] 
14:36:55: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:55: [DVTCommonLib]###  R1bCommandAbort called
14:36:55: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1, False) , Command count = 2442 ] 
14:36:55: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:57: Host Frequency set to 25000 KHz
14:36:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C1B0>, 0x0, True) , Command count = 2443 ] 
14:36:57: [GO18_globalSetVolt]### Host voltage value is set.
14:36:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F4B0>, 0x0, False) , Command count = 2444 ] 
14:36:57: [GO18_globalSetVolt]### Host voltage value is set.
14:36:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2445 ] 
14:36:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2446 ] 
14:36:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2447 ] 
14:36:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C480>, <py_sfcl.CommandDataDefinition object at 0x0667C150>) , Command count = 2448 ] 
14:36:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F540>, <py_sfcl.CommandDataDefinition object at 0x0667C690>) , Command count = 2449 ] 
14:36:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:58: [ SetCardRCA(0x1, 0xD555) , Command count = 2450 ] 
14:36:58: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:58: Host Frequency set to 25000 KHz
14:36:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:58: ####CSD Registe 2.0 Values####
14:36:58: CSD_STRUCTURE                                 :0x1
14:36:58: Reserv1                                       :0x0
14:36:58: Time Access 1 TAAC                            :0xe
14:36:58: Time Access 2 NSAC*100                        :0x0
14:36:58: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:58: Card Command Classess CCC                     :0x5b5
14:36:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:58: DSR(driver stage register)  DSR_IMP           :0x0
14:36:58: Reserv2                                       :0x0
14:36:58: Device Size C_SIZE                            :0xedc8
14:36:58: Reserv3                                       :0x0
14:36:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:58: Reserv4                                       :0x0
14:36:58: Write Speed Factor R2W_FACTOR                 :0x2
14:36:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:58: FILE_FORMAT_GRP                               :0x0
14:36:58: COPY flag                                     :0x1
14:36:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:58: File_Format                                   :0x0
14:36:58: CRC                                           :0x0
14:36:58: ####CSD Registe Values####  

14:36:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:58: [GetSCRRegisterEntry] Passed
14:36:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:58: Data_Status_After Erases          : 0
14:36:58: CPRM Security Support             : No Security
14:36:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:58: Spec. Version                     : Version 3.0X
14:36:58: Extended Security Support         : Extended_Security_Not_Supported
14:36:58: Command Support                   : COMMAND_SUPPORT
14:36:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CF30>, <py_sfcl.CommandDataDefinition object at 0x0667C960>) , Command count = 2451 ] 
14:36:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F2D0>, <py_sfcl.CommandDataDefinition object at 0x0667C630>) , Command count = 2452 ] 
14:36:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:58: [ SetBusWidth(0x4) , Command count = 2453 ] 
14:36:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2454 ] 
14:36:58: Protected Area Size 0x28000
14:36:58: Bus Width           2
14:36:58: Secure Mode         0
14:36:58: Speed  Class        4
14:36:58: Perf Move           0
14:36:58: Au Size             9
14:36:58: Erase Size          15
14:36:58: Erase Timeout       1
14:36:58: Erase offset        1
14:36:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2455 ] 
14:36:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:58: Host Frequency set to 100000 KHz
14:36:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:58: ####CSD Registe 2.0 Values####
14:36:58: CSD_STRUCTURE                                 :0x1
14:36:58: Reserv1                                       :0x0
14:36:58: Time Access 1 TAAC                            :0xe
14:36:58: Time Access 2 NSAC*100                        :0x0
14:36:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:58: Card Command Classess CCC                     :0x5b5
14:36:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:58: DSR(driver stage register)  DSR_IMP           :0x0
14:36:58: Reserv2                                       :0x0
14:36:58: Device Size C_SIZE                            :0xedc8
14:36:58: Reserv3                                       :0x0
14:36:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:58: Reserv4                                       :0x0
14:36:58: Write Speed Factor R2W_FACTOR                 :0x2
14:36:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:58: FILE_FORMAT_GRP                               :0x0
14:36:58: COPY flag                                     :0x1
14:36:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:58: File_Format                                   :0x0
14:36:58: CRC                                           :0x0
14:36:58: ####CSD Registe Values####  

14:36:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C990>, <py_sfcl.CommandDataDefinition object at 0x0667CAB0>) , Command count = 2456 ] 
14:36:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C210>, <py_sfcl.CommandDataDefinition object at 0x06685150>) , Command count = 2457 ] 
14:36:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:58: [DVTCommonLib]### Erase :Erase API Called
14:36:58: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2020 with Blockcount:0x2001
14:36:58: [ EraseLba(0x2020, 0x2001) , Command count = 2458 ] 
14:36:58: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2020 with Blockcount:0x2001 

14:36:58: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 26
14:36:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x4020 to EndLba:0x4028 with Increment Pattern
14:36:58: [ WrLbaNoData(0x4020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2459 ] 
14:36:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x4020 to EndLba:0x4028 with Increment Pattern 

14:36:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F390>, <py_sfcl.CommandDataDefinition object at 0x0667F780>) , Command count = 2460 ] 
14:36:58: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:36:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ADB0>, <py_sfcl.CommandDataDefinition object at 0x0667CF60>) , Command count = 2461 ] 
14:36:58: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:36:58: [DVTCommonLib]###  R1bCommandAbort called
14:36:58: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x27, False) , Command count = 2462 ] 
14:36:58: [DVTCommonLib]###  R1bCommandAbort Completed 

14:36:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:00: Host Frequency set to 25000 KHz
14:37:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AC90>, 0x0, True) , Command count = 2463 ] 
14:37:00: [GO18_globalSetVolt]### Host voltage value is set.
14:37:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683570>, 0x0, False) , Command count = 2464 ] 
14:37:00: [GO18_globalSetVolt]### Host voltage value is set.
14:37:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2465 ] 
14:37:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2466 ] 
14:37:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2467 ] 
14:37:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F420>, <py_sfcl.CommandDataDefinition object at 0x0667FB10>) , Command count = 2468 ] 
14:37:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FAB0>, <py_sfcl.CommandDataDefinition object at 0x0667CE10>) , Command count = 2469 ] 
14:37:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:00: [ SetCardRCA(0x1, 0xD555) , Command count = 2470 ] 
14:37:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:01: Host Frequency set to 25000 KHz
14:37:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:01: ####CSD Registe 2.0 Values####
14:37:01: CSD_STRUCTURE                                 :0x1
14:37:01: Reserv1                                       :0x0
14:37:01: Time Access 1 TAAC                            :0xe
14:37:01: Time Access 2 NSAC*100                        :0x0
14:37:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:01: Card Command Classess CCC                     :0x5b5
14:37:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:01: DSR(driver stage register)  DSR_IMP           :0x0
14:37:01: Reserv2                                       :0x0
14:37:01: Device Size C_SIZE                            :0xedc8
14:37:01: Reserv3                                       :0x0
14:37:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:01: Reserv4                                       :0x0
14:37:01: Write Speed Factor R2W_FACTOR                 :0x2
14:37:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:01: FILE_FORMAT_GRP                               :0x0
14:37:01: COPY flag                                     :0x1
14:37:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:01: File_Format                                   :0x0
14:37:01: CRC                                           :0x0
14:37:01: ####CSD Registe Values####  

14:37:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:01: [GetSCRRegisterEntry] Passed
14:37:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:01: Data_Status_After Erases          : 0
14:37:01: CPRM Security Support             : No Security
14:37:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:01: Spec. Version                     : Version 3.0X
14:37:01: Extended Security Support         : Extended_Security_Not_Supported
14:37:01: Command Support                   : COMMAND_SUPPORT
14:37:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AF30>, <py_sfcl.CommandDataDefinition object at 0x0667CC00>) , Command count = 2471 ] 
14:37:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F360>, <py_sfcl.CommandDataDefinition object at 0x0667F270>) , Command count = 2472 ] 
14:37:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:01: [ SetBusWidth(0x4) , Command count = 2473 ] 
14:37:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2474 ] 
14:37:01: Protected Area Size 0x28000
14:37:01: Bus Width           2
14:37:01: Secure Mode         0
14:37:01: Speed  Class        4
14:37:01: Perf Move           0
14:37:01: Au Size             9
14:37:01: Erase Size          15
14:37:01: Erase Timeout       1
14:37:01: Erase offset        1
14:37:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2475 ] 
14:37:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:01: Host Frequency set to 100000 KHz
14:37:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:01: ####CSD Registe 2.0 Values####
14:37:01: CSD_STRUCTURE                                 :0x1
14:37:01: Reserv1                                       :0x0
14:37:01: Time Access 1 TAAC                            :0xe
14:37:01: Time Access 2 NSAC*100                        :0x0
14:37:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:01: Card Command Classess CCC                     :0x5b5
14:37:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:01: DSR(driver stage register)  DSR_IMP           :0x0
14:37:01: Reserv2                                       :0x0
14:37:01: Device Size C_SIZE                            :0xedc8
14:37:01: Reserv3                                       :0x0
14:37:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:01: Reserv4                                       :0x0
14:37:01: Write Speed Factor R2W_FACTOR                 :0x2
14:37:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:01: FILE_FORMAT_GRP                               :0x0
14:37:01: COPY flag                                     :0x1
14:37:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:01: File_Format                                   :0x0
14:37:01: CRC                                           :0x0
14:37:01: ####CSD Registe Values####  

14:37:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F6C0>, <py_sfcl.CommandDataDefinition object at 0x0667C810>) , Command count = 2476 ] 
14:37:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CED0>, <py_sfcl.CommandDataDefinition object at 0x06685540>) , Command count = 2477 ] 
14:37:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:01: [DVTCommonLib]### Erase :Erase API Called
14:37:01: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x4020 with Blockcount:0x2001
14:37:01: [ EraseLba(0x4020, 0x2001) , Command count = 2478 ] 
14:37:01: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x4020 with Blockcount:0x2001 

14:37:01: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 25
14:37:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x6020 to EndLba:0x6028 with Increment Pattern
14:37:01: [ WrLbaNoData(0x6020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2479 ] 
14:37:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x6020 to EndLba:0x6028 with Increment Pattern 

14:37:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FF00>, <py_sfcl.CommandDataDefinition object at 0x0667F150>) , Command count = 2480 ] 
14:37:01: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FA20>, <py_sfcl.CommandDataDefinition object at 0x0667C4B0>) , Command count = 2481 ] 
14:37:01: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:01: [DVTCommonLib]###  R1bCommandAbort called
14:37:01: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x3, False) , Command count = 2482 ] 
14:37:01: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:01: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:03: Host Frequency set to 25000 KHz
14:37:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:03: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F300>, 0x0, True) , Command count = 2483 ] 
14:37:03: [GO18_globalSetVolt]### Host voltage value is set.
14:37:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x066833F0>, 0x0, False) , Command count = 2484 ] 
14:37:03: [GO18_globalSetVolt]### Host voltage value is set.
14:37:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2485 ] 
14:37:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2486 ] 
14:37:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2487 ] 
14:37:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F840>, <py_sfcl.CommandDataDefinition object at 0x0667F720>) , Command count = 2488 ] 
14:37:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683480>, <py_sfcl.CommandDataDefinition object at 0x0667C4B0>) , Command count = 2489 ] 
14:37:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:03: [ SetCardRCA(0x1, 0xD555) , Command count = 2490 ] 
14:37:03: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:03: Host Frequency set to 25000 KHz
14:37:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:03: ####CSD Registe 2.0 Values####
14:37:03: CSD_STRUCTURE                                 :0x1
14:37:03: Reserv1                                       :0x0
14:37:03: Time Access 1 TAAC                            :0xe
14:37:03: Time Access 2 NSAC*100                        :0x0
14:37:03: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:03: Card Command Classess CCC                     :0x5b5
14:37:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:03: DSR(driver stage register)  DSR_IMP           :0x0
14:37:03: Reserv2                                       :0x0
14:37:03: Device Size C_SIZE                            :0xedc8
14:37:03: Reserv3                                       :0x0
14:37:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:03: Reserv4                                       :0x0
14:37:03: Write Speed Factor R2W_FACTOR                 :0x2
14:37:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:03: FILE_FORMAT_GRP                               :0x0
14:37:03: COPY flag                                     :0x1
14:37:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:03: File_Format                                   :0x0
14:37:03: CRC                                           :0x0
14:37:03: ####CSD Registe Values####  

14:37:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:03: [GetSCRRegisterEntry] Passed
14:37:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:03: Data_Status_After Erases          : 0
14:37:03: CPRM Security Support             : No Security
14:37:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:03: Spec. Version                     : Version 3.0X
14:37:03: Extended Security Support         : Extended_Security_Not_Supported
14:37:03: Command Support                   : COMMAND_SUPPORT
14:37:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AEA0>, <py_sfcl.CommandDataDefinition object at 0x0667FE10>) , Command count = 2491 ] 
14:37:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066832D0>, <py_sfcl.CommandDataDefinition object at 0x0667F1E0>) , Command count = 2492 ] 
14:37:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:03: [ SetBusWidth(0x4) , Command count = 2493 ] 
14:37:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667FEA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2494 ] 
14:37:03: Protected Area Size 0x28000
14:37:03: Bus Width           2
14:37:03: Secure Mode         0
14:37:03: Speed  Class        4
14:37:03: Perf Move           0
14:37:03: Au Size             9
14:37:03: Erase Size          15
14:37:03: Erase Timeout       1
14:37:03: Erase offset        1
14:37:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2495 ] 
14:37:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:04: Host Frequency set to 100000 KHz
14:37:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:04: ####CSD Registe 2.0 Values####
14:37:04: CSD_STRUCTURE                                 :0x1
14:37:04: Reserv1                                       :0x0
14:37:04: Time Access 1 TAAC                            :0xe
14:37:04: Time Access 2 NSAC*100                        :0x0
14:37:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:04: Card Command Classess CCC                     :0x5b5
14:37:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:04: DSR(driver stage register)  DSR_IMP           :0x0
14:37:04: Reserv2                                       :0x0
14:37:04: Device Size C_SIZE                            :0xedc8
14:37:04: Reserv3                                       :0x0
14:37:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:04: Reserv4                                       :0x0
14:37:04: Write Speed Factor R2W_FACTOR                 :0x2
14:37:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:04: FILE_FORMAT_GRP                               :0x0
14:37:04: COPY flag                                     :0x1
14:37:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:04: File_Format                                   :0x0
14:37:04: CRC                                           :0x0
14:37:04: ####CSD Registe Values####  

14:37:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F690>, <py_sfcl.CommandDataDefinition object at 0x0667FCC0>) , Command count = 2496 ] 
14:37:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A9F0>, <py_sfcl.CommandDataDefinition object at 0x0667C360>) , Command count = 2497 ] 
14:37:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:04: [DVTCommonLib]### Erase :Erase API Called
14:37:04: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x6020 with Blockcount:0x2001
14:37:04: [ EraseLba(0x6020, 0x2001) , Command count = 2498 ] 
14:37:04: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x6020 with Blockcount:0x2001 

14:37:04: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 24
14:37:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x8020 to EndLba:0x8028 with Increment Pattern
14:37:04: [ WrLbaNoData(0x8020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2499 ] 
14:37:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x8020 to EndLba:0x8028 with Increment Pattern 

14:37:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066836C0>, <py_sfcl.CommandDataDefinition object at 0x0667F750>) , Command count = 2500 ] 
14:37:04: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CD20>, <py_sfcl.CommandDataDefinition object at 0x0667F090>) , Command count = 2501 ] 
14:37:04: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:04: [DVTCommonLib]###  R1bCommandAbort called
14:37:04: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x20, False) , Command count = 2502 ] 
14:37:04: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:06: Host Frequency set to 25000 KHz
14:37:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F240>, 0x0, True) , Command count = 2503 ] 
14:37:06: [GO18_globalSetVolt]### Host voltage value is set.
14:37:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683C00>, 0x0, False) , Command count = 2504 ] 
14:37:06: [GO18_globalSetVolt]### Host voltage value is set.
14:37:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2505 ] 
14:37:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2506 ] 
14:37:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2507 ] 
14:37:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683360>, <py_sfcl.CommandDataDefinition object at 0x06683A50>) , Command count = 2508 ] 
14:37:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066839F0>, <py_sfcl.CommandDataDefinition object at 0x0667F0C0>) , Command count = 2509 ] 
14:37:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:06: [ SetCardRCA(0x1, 0xD555) , Command count = 2510 ] 
14:37:06: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:06: Host Frequency set to 25000 KHz
14:37:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:06: ####CSD Registe 2.0 Values####
14:37:06: CSD_STRUCTURE                                 :0x1
14:37:06: Reserv1                                       :0x0
14:37:06: Time Access 1 TAAC                            :0xe
14:37:06: Time Access 2 NSAC*100                        :0x0
14:37:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:06: Card Command Classess CCC                     :0x5b5
14:37:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:06: DSR(driver stage register)  DSR_IMP           :0x0
14:37:06: Reserv2                                       :0x0
14:37:06: Device Size C_SIZE                            :0xedc8
14:37:06: Reserv3                                       :0x0
14:37:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:06: Reserv4                                       :0x0
14:37:06: Write Speed Factor R2W_FACTOR                 :0x2
14:37:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:06: FILE_FORMAT_GRP                               :0x0
14:37:06: COPY flag                                     :0x1
14:37:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:06: File_Format                                   :0x0
14:37:06: CRC                                           :0x0
14:37:06: ####CSD Registe Values####  

14:37:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:06: [GetSCRRegisterEntry] Passed
14:37:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:06: Data_Status_After Erases          : 0
14:37:06: CPRM Security Support             : No Security
14:37:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:06: Spec. Version                     : Version 3.0X
14:37:06: Extended Security Support         : Extended_Security_Not_Supported
14:37:06: Command Support                   : COMMAND_SUPPORT
14:37:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F3C0>, <py_sfcl.CommandDataDefinition object at 0x0667FF60>) , Command count = 2511 ] 
14:37:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683990>, <py_sfcl.CommandDataDefinition object at 0x06683390>) , Command count = 2512 ] 
14:37:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:06: [ SetBusWidth(0x4) , Command count = 2513 ] 
14:37:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066831E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2514 ] 
14:37:06: Protected Area Size 0x28000
14:37:06: Bus Width           2
14:37:06: Secure Mode         0
14:37:06: Speed  Class        4
14:37:06: Perf Move           0
14:37:06: Au Size             9
14:37:06: Erase Size          15
14:37:06: Erase Timeout       1
14:37:06: Erase offset        1
14:37:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2515 ] 
14:37:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:06: Host Frequency set to 100000 KHz
14:37:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:06: ####CSD Registe 2.0 Values####
14:37:06: CSD_STRUCTURE                                 :0x1
14:37:06: Reserv1                                       :0x0
14:37:06: Time Access 1 TAAC                            :0xe
14:37:06: Time Access 2 NSAC*100                        :0x0
14:37:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:06: Card Command Classess CCC                     :0x5b5
14:37:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:06: DSR(driver stage register)  DSR_IMP           :0x0
14:37:06: Reserv2                                       :0x0
14:37:06: Device Size C_SIZE                            :0xedc8
14:37:06: Reserv3                                       :0x0
14:37:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:06: Reserv4                                       :0x0
14:37:06: Write Speed Factor R2W_FACTOR                 :0x2
14:37:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:06: FILE_FORMAT_GRP                               :0x0
14:37:06: COPY flag                                     :0x1
14:37:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:06: File_Format                                   :0x0
14:37:06: CRC                                           :0x0
14:37:06: ####CSD Registe Values####  

14:37:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683240>, <py_sfcl.CommandDataDefinition object at 0x0667F330>) , Command count = 2516 ] 
14:37:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F120>, <py_sfcl.CommandDataDefinition object at 0x0667F9F0>) , Command count = 2517 ] 
14:37:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:06: [DVTCommonLib]### Erase :Erase API Called
14:37:06: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x8020 with Blockcount:0x2001
14:37:06: [ EraseLba(0x8020, 0x2001) , Command count = 2518 ] 
14:37:06: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x8020 with Blockcount:0x2001 

14:37:06: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 23
14:37:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xA020 to EndLba:0xA028 with Increment Pattern
14:37:06: [ WrLbaNoData(0xA020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2519 ] 
14:37:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xA020 to EndLba:0xA028 with Increment Pattern 

14:37:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D20>, <py_sfcl.CommandDataDefinition object at 0x06683540>) , Command count = 2520 ] 
14:37:06: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683960>, <py_sfcl.CommandDataDefinition object at 0x0667F8D0>) , Command count = 2521 ] 
14:37:06: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:06: [DVTCommonLib]###  R1bCommandAbort called
14:37:06: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2, False) , Command count = 2522 ] 
14:37:06: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:09: Host Frequency set to 25000 KHz
14:37:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683210>, 0x0, True) , Command count = 2523 ] 
14:37:09: [GO18_globalSetVolt]### Host voltage value is set.
14:37:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FC0480>, 0x0, False) , Command count = 2524 ] 
14:37:09: [GO18_globalSetVolt]### Host voltage value is set.
14:37:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2525 ] 
14:37:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2526 ] 
14:37:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2527 ] 
14:37:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D80>, <py_sfcl.CommandDataDefinition object at 0x06683840>) , Command count = 2528 ] 
14:37:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E42840>, <py_sfcl.CommandDataDefinition object at 0x06683EA0>) , Command count = 2529 ] 
14:37:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:09: [ SetCardRCA(0x1, 0xD555) , Command count = 2530 ] 
14:37:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:09: Host Frequency set to 25000 KHz
14:37:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:09: ####CSD Registe 2.0 Values####
14:37:09: CSD_STRUCTURE                                 :0x1
14:37:09: Reserv1                                       :0x0
14:37:09: Time Access 1 TAAC                            :0xe
14:37:09: Time Access 2 NSAC*100                        :0x0
14:37:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:09: Card Command Classess CCC                     :0x5b5
14:37:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:09: DSR(driver stage register)  DSR_IMP           :0x0
14:37:09: Reserv2                                       :0x0
14:37:09: Device Size C_SIZE                            :0xedc8
14:37:09: Reserv3                                       :0x0
14:37:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:09: Reserv4                                       :0x0
14:37:09: Write Speed Factor R2W_FACTOR                 :0x2
14:37:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:09: FILE_FORMAT_GRP                               :0x0
14:37:09: COPY flag                                     :0x1
14:37:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:09: File_Format                                   :0x0
14:37:09: CRC                                           :0x0
14:37:09: ####CSD Registe Values####  

14:37:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:09: [GetSCRRegisterEntry] Passed
14:37:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:09: Data_Status_After Erases          : 0
14:37:09: CPRM Security Support             : No Security
14:37:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:09: Spec. Version                     : Version 3.0X
14:37:09: Extended Security Support         : Extended_Security_Not_Supported
14:37:09: Command Support                   : COMMAND_SUPPORT
14:37:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CDE0>, <py_sfcl.CommandDataDefinition object at 0x066838A0>) , Command count = 2531 ] 
14:37:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6F90>, <py_sfcl.CommandDataDefinition object at 0x06683BD0>) , Command count = 2532 ] 
14:37:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:09: [ SetBusWidth(0x4) , Command count = 2533 ] 
14:37:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2534 ] 
14:37:09: Protected Area Size 0x28000
14:37:09: Bus Width           2
14:37:09: Secure Mode         0
14:37:09: Speed  Class        4
14:37:09: Perf Move           0
14:37:09: Au Size             9
14:37:09: Erase Size          15
14:37:09: Erase Timeout       1
14:37:09: Erase offset        1
14:37:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2535 ] 
14:37:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:09: Host Frequency set to 100000 KHz
14:37:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:09: ####CSD Registe 2.0 Values####
14:37:09: CSD_STRUCTURE                                 :0x1
14:37:09: Reserv1                                       :0x0
14:37:09: Time Access 1 TAAC                            :0xe
14:37:09: Time Access 2 NSAC*100                        :0x0
14:37:09: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:09: Card Command Classess CCC                     :0x5b5
14:37:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:09: DSR(driver stage register)  DSR_IMP           :0x0
14:37:09: Reserv2                                       :0x0
14:37:09: Device Size C_SIZE                            :0xedc8
14:37:09: Reserv3                                       :0x0
14:37:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:09: Reserv4                                       :0x0
14:37:09: Write Speed Factor R2W_FACTOR                 :0x2
14:37:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:09: FILE_FORMAT_GRP                               :0x0
14:37:09: COPY flag                                     :0x1
14:37:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:09: File_Format                                   :0x0
14:37:09: CRC                                           :0x0
14:37:09: ####CSD Registe Values####  

14:37:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066835D0>, <py_sfcl.CommandDataDefinition object at 0x066832A0>) , Command count = 2536 ] 
14:37:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683660>, <py_sfcl.CommandDataDefinition object at 0x0667F810>) , Command count = 2537 ] 
14:37:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:09: [DVTCommonLib]### Erase :Erase API Called
14:37:09: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xA020 with Blockcount:0x2001
14:37:09: [ EraseLba(0xA020, 0x2001) , Command count = 2538 ] 
14:37:09: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xA020 with Blockcount:0x2001 

14:37:09: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 22
14:37:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xC020 to EndLba:0xC028 with Increment Pattern
14:37:09: [ WrLbaNoData(0xC020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2539 ] 
14:37:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xC020 to EndLba:0xC028 with Increment Pattern 

14:37:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683A80>, <py_sfcl.CommandDataDefinition object at 0x066837E0>) , Command count = 2540 ] 
14:37:09: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FC60>, <py_sfcl.CommandDataDefinition object at 0x06683720>) , Command count = 2541 ] 
14:37:09: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:09: [DVTCommonLib]###  R1bCommandAbort called
14:37:09: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x22, False) , Command count = 2542 ] 
14:37:09: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:09: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:11: Host Frequency set to 25000 KHz
14:37:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:11: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683E40>, 0x0, True) , Command count = 2543 ] 
14:37:11: [GO18_globalSetVolt]### Host voltage value is set.
14:37:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x0602BE10>, 0x0, False) , Command count = 2544 ] 
14:37:11: [GO18_globalSetVolt]### Host voltage value is set.
14:37:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2545 ] 
14:37:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2546 ] 
14:37:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2547 ] 
14:37:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D50>, <py_sfcl.CommandDataDefinition object at 0x06683690>) , Command count = 2548 ] 
14:37:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683C90>, <py_sfcl.CommandDataDefinition object at 0x06683C30>) , Command count = 2549 ] 
14:37:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:12: [ SetCardRCA(0x1, 0xD555) , Command count = 2550 ] 
14:37:12: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:12: Host Frequency set to 25000 KHz
14:37:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:12: ####CSD Registe 2.0 Values####
14:37:12: CSD_STRUCTURE                                 :0x1
14:37:12: Reserv1                                       :0x0
14:37:12: Time Access 1 TAAC                            :0xe
14:37:12: Time Access 2 NSAC*100                        :0x0
14:37:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:12: Card Command Classess CCC                     :0x5b5
14:37:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:12: DSR(driver stage register)  DSR_IMP           :0x0
14:37:12: Reserv2                                       :0x0
14:37:12: Device Size C_SIZE                            :0xedc8
14:37:12: Reserv3                                       :0x0
14:37:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:12: Reserv4                                       :0x0
14:37:12: Write Speed Factor R2W_FACTOR                 :0x2
14:37:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:12: FILE_FORMAT_GRP                               :0x0
14:37:12: COPY flag                                     :0x1
14:37:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:12: File_Format                                   :0x0
14:37:12: CRC                                           :0x0
14:37:12: ####CSD Registe Values####  

14:37:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:12: [GetSCRRegisterEntry] Passed
14:37:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:12: Data_Status_After Erases          : 0
14:37:12: CPRM Security Support             : No Security
14:37:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:12: Spec. Version                     : Version 3.0X
14:37:12: Extended Security Support         : Extended_Security_Not_Supported
14:37:12: Command Support                   : COMMAND_SUPPORT
14:37:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F5A0>, <py_sfcl.CommandDataDefinition object at 0x060327B0>) , Command count = 2551 ] 
14:37:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683E10>, <py_sfcl.CommandDataDefinition object at 0x066834E0>) , Command count = 2552 ] 
14:37:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:12: [ SetBusWidth(0x4) , Command count = 2553 ] 
14:37:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066853F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2554 ] 
14:37:12: Protected Area Size 0x28000
14:37:12: Bus Width           2
14:37:12: Secure Mode         0
14:37:12: Speed  Class        4
14:37:12: Perf Move           0
14:37:12: Au Size             9
14:37:12: Erase Size          15
14:37:12: Erase Timeout       1
14:37:12: Erase offset        1
14:37:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2555 ] 
14:37:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:12: Host Frequency set to 100000 KHz
14:37:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:12: ####CSD Registe 2.0 Values####
14:37:12: CSD_STRUCTURE                                 :0x1
14:37:12: Reserv1                                       :0x0
14:37:12: Time Access 1 TAAC                            :0xe
14:37:12: Time Access 2 NSAC*100                        :0x0
14:37:12: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:12: Card Command Classess CCC                     :0x5b5
14:37:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:12: DSR(driver stage register)  DSR_IMP           :0x0
14:37:12: Reserv2                                       :0x0
14:37:12: Device Size C_SIZE                            :0xedc8
14:37:12: Reserv3                                       :0x0
14:37:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:12: Reserv4                                       :0x0
14:37:12: Write Speed Factor R2W_FACTOR                 :0x2
14:37:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:12: FILE_FORMAT_GRP                               :0x0
14:37:12: COPY flag                                     :0x1
14:37:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:12: File_Format                                   :0x0
14:37:12: CRC                                           :0x0
14:37:12: ####CSD Registe Values####  

14:37:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05EE6B70>, <py_sfcl.CommandDataDefinition object at 0x0667FED0>) , Command count = 2556 ] 
14:37:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683DE0>, <py_sfcl.CommandDataDefinition object at 0x06685E10>) , Command count = 2557 ] 
14:37:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:12: [DVTCommonLib]### Erase :Erase API Called
14:37:12: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xC020 with Blockcount:0x2001
14:37:12: [ EraseLba(0xC020, 0x2001) , Command count = 2558 ] 
14:37:12: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xC020 with Blockcount:0x2001 

14:37:12: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 21
14:37:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xE020 to EndLba:0xE028 with Increment Pattern
14:37:12: [ WrLbaNoData(0xE020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2559 ] 
14:37:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xE020 to EndLba:0xE028 with Increment Pattern 

14:37:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8C00>, <py_sfcl.CommandDataDefinition object at 0x06683780>) , Command count = 2560 ] 
14:37:12: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683420>, <py_sfcl.CommandDataDefinition object at 0x06685A50>) , Command count = 2561 ] 
14:37:12: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:12: [DVTCommonLib]###  R1bCommandAbort called
14:37:12: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xD, False) , Command count = 2562 ] 
14:37:12: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:12: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:14: Host Frequency set to 25000 KHz
14:37:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:14: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x066833C0>, 0x0, True) , Command count = 2563 ] 
14:37:14: [GO18_globalSetVolt]### Host voltage value is set.
14:37:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x0665BF90>, 0x0, False) , Command count = 2564 ] 
14:37:14: [GO18_globalSetVolt]### Host voltage value is set.
14:37:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2565 ] 
14:37:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2566 ] 
14:37:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2567 ] 
14:37:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8990>, <py_sfcl.CommandDataDefinition object at 0x06685DB0>) , Command count = 2568 ] 
14:37:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEDAE0>, <py_sfcl.CommandDataDefinition object at 0x06685B70>) , Command count = 2569 ] 
14:37:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:14: [ SetCardRCA(0x1, 0xD555) , Command count = 2570 ] 
14:37:14: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:15: Host Frequency set to 25000 KHz
14:37:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:15: ####CSD Registe 2.0 Values####
14:37:15: CSD_STRUCTURE                                 :0x1
14:37:15: Reserv1                                       :0x0
14:37:15: Time Access 1 TAAC                            :0xe
14:37:15: Time Access 2 NSAC*100                        :0x0
14:37:15: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:15: Card Command Classess CCC                     :0x5b5
14:37:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:15: DSR(driver stage register)  DSR_IMP           :0x0
14:37:15: Reserv2                                       :0x0
14:37:15: Device Size C_SIZE                            :0xedc8
14:37:15: Reserv3                                       :0x0
14:37:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:15: Reserv4                                       :0x0
14:37:15: Write Speed Factor R2W_FACTOR                 :0x2
14:37:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:15: FILE_FORMAT_GRP                               :0x0
14:37:15: COPY flag                                     :0x1
14:37:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:15: File_Format                                   :0x0
14:37:15: CRC                                           :0x0
14:37:15: ####CSD Registe Values####  

14:37:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:15: [GetSCRRegisterEntry] Passed
14:37:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:15: Data_Status_After Erases          : 0
14:37:15: CPRM Security Support             : No Security
14:37:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:15: Spec. Version                     : Version 3.0X
14:37:15: Extended Security Support         : Extended_Security_Not_Supported
14:37:15: Command Support                   : COMMAND_SUPPORT
14:37:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8C60>, <py_sfcl.CommandDataDefinition object at 0x06685930>) , Command count = 2571 ] 
14:37:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602B6C0>, <py_sfcl.CommandDataDefinition object at 0x066858D0>) , Command count = 2572 ] 
14:37:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:15: [ SetBusWidth(0x4) , Command count = 2573 ] 
14:37:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06666BA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2574 ] 
14:37:15: Protected Area Size 0x28000
14:37:15: Bus Width           2
14:37:15: Secure Mode         0
14:37:15: Speed  Class        4
14:37:15: Perf Move           0
14:37:15: Au Size             9
14:37:15: Erase Size          15
14:37:15: Erase Timeout       1
14:37:15: Erase offset        1
14:37:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2575 ] 
14:37:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:15: Host Frequency set to 100000 KHz
14:37:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:15: ####CSD Registe 2.0 Values####
14:37:15: CSD_STRUCTURE                                 :0x1
14:37:15: Reserv1                                       :0x0
14:37:15: Time Access 1 TAAC                            :0xe
14:37:15: Time Access 2 NSAC*100                        :0x0
14:37:15: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:15: Card Command Classess CCC                     :0x5b5
14:37:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:15: DSR(driver stage register)  DSR_IMP           :0x0
14:37:15: Reserv2                                       :0x0
14:37:15: Device Size C_SIZE                            :0xedc8
14:37:15: Reserv3                                       :0x0
14:37:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:15: Reserv4                                       :0x0
14:37:15: Write Speed Factor R2W_FACTOR                 :0x2
14:37:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:15: FILE_FORMAT_GRP                               :0x0
14:37:15: COPY flag                                     :0x1
14:37:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:15: File_Format                                   :0x0
14:37:15: CRC                                           :0x0
14:37:15: ####CSD Registe Values####  

14:37:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDADB0>, <py_sfcl.CommandDataDefinition object at 0x06685960>) , Command count = 2576 ] 
14:37:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FF30>, <py_sfcl.CommandDataDefinition object at 0x066855A0>) , Command count = 2577 ] 
14:37:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:15: [DVTCommonLib]### Erase :Erase API Called
14:37:15: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xE020 with Blockcount:0x2001
14:37:15: [ EraseLba(0xE020, 0x2001) , Command count = 2578 ] 
14:37:15: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xE020 with Blockcount:0x2001 

14:37:15: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 20
14:37:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x10020 to EndLba:0x10028 with Increment Pattern
14:37:15: [ WrLbaNoData(0x10020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2579 ] 
14:37:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x10020 to EndLba:0x10028 with Increment Pattern 

14:37:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060327E0>, <py_sfcl.CommandDataDefinition object at 0x06666D50>) , Command count = 2580 ] 
14:37:15: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683BA0>, <py_sfcl.CommandDataDefinition object at 0x066850F0>) , Command count = 2581 ] 
14:37:15: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:15: [DVTCommonLib]###  R1bCommandAbort called
14:37:15: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x30, False) , Command count = 2582 ] 
14:37:15: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:17: Host Frequency set to 25000 KHz
14:37:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:17: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683B40>, 0x0, True) , Command count = 2583 ] 
14:37:17: [GO18_globalSetVolt]### Host voltage value is set.
14:37:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x0602BC60>, 0x0, False) , Command count = 2584 ] 
14:37:17: [GO18_globalSetVolt]### Host voltage value is set.
14:37:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2585 ] 
14:37:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2586 ] 
14:37:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2587 ] 
14:37:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC0690>, <py_sfcl.CommandDataDefinition object at 0x06666720>) , Command count = 2588 ] 
14:37:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032AB0>, <py_sfcl.CommandDataDefinition object at 0x06685180>) , Command count = 2589 ] 
14:37:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:17: [ SetCardRCA(0x1, 0xD555) , Command count = 2590 ] 
14:37:17: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:17: Host Frequency set to 25000 KHz
14:37:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:17: ####CSD Registe 2.0 Values####
14:37:17: CSD_STRUCTURE                                 :0x1
14:37:17: Reserv1                                       :0x0
14:37:17: Time Access 1 TAAC                            :0xe
14:37:17: Time Access 2 NSAC*100                        :0x0
14:37:17: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:17: Card Command Classess CCC                     :0x5b5
14:37:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:17: DSR(driver stage register)  DSR_IMP           :0x0
14:37:17: Reserv2                                       :0x0
14:37:17: Device Size C_SIZE                            :0xedc8
14:37:17: Reserv3                                       :0x0
14:37:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:17: Reserv4                                       :0x0
14:37:17: Write Speed Factor R2W_FACTOR                 :0x2
14:37:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:17: FILE_FORMAT_GRP                               :0x0
14:37:17: COPY flag                                     :0x1
14:37:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:17: File_Format                                   :0x0
14:37:17: CRC                                           :0x0
14:37:17: ####CSD Registe Values####  

14:37:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:17: [GetSCRRegisterEntry] Passed
14:37:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:17: Data_Status_After Erases          : 0
14:37:17: CPRM Security Support             : No Security
14:37:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:17: Spec. Version                     : Version 3.0X
14:37:17: Extended Security Support         : Extended_Security_Not_Supported
14:37:17: Command Support                   : COMMAND_SUPPORT
14:37:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683F90>, <py_sfcl.CommandDataDefinition object at 0x066AB120>) , Command count = 2591 ] 
14:37:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032B40>, <py_sfcl.CommandDataDefinition object at 0x06666FC0>) , Command count = 2592 ] 
14:37:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:17: [ SetBusWidth(0x4) , Command count = 2593 ] 
14:37:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06666B70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2594 ] 
14:37:17: Protected Area Size 0x28000
14:37:17: Bus Width           2
14:37:17: Secure Mode         0
14:37:17: Speed  Class        4
14:37:17: Perf Move           0
14:37:17: Au Size             9
14:37:17: Erase Size          15
14:37:17: Erase Timeout       1
14:37:17: Erase offset        1
14:37:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2595 ] 
14:37:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:18: Host Frequency set to 100000 KHz
14:37:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:18: ####CSD Registe 2.0 Values####
14:37:18: CSD_STRUCTURE                                 :0x1
14:37:18: Reserv1                                       :0x0
14:37:18: Time Access 1 TAAC                            :0xe
14:37:18: Time Access 2 NSAC*100                        :0x0
14:37:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:18: Card Command Classess CCC                     :0x5b5
14:37:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:18: DSR(driver stage register)  DSR_IMP           :0x0
14:37:18: Reserv2                                       :0x0
14:37:18: Device Size C_SIZE                            :0xedc8
14:37:18: Reserv3                                       :0x0
14:37:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:18: Reserv4                                       :0x0
14:37:18: Write Speed Factor R2W_FACTOR                 :0x2
14:37:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:18: FILE_FORMAT_GRP                               :0x0
14:37:18: COPY flag                                     :0x1
14:37:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:18: File_Format                                   :0x0
14:37:18: CRC                                           :0x0
14:37:18: ####CSD Registe Values####  

14:37:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572060>, <py_sfcl.CommandDataDefinition object at 0x06666BA0>) , Command count = 2596 ] 
14:37:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683030>, <py_sfcl.CommandDataDefinition object at 0x06685390>) , Command count = 2597 ] 
14:37:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:18: [DVTCommonLib]### Erase :Erase API Called
14:37:18: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x10020 with Blockcount:0x2001
14:37:18: [ EraseLba(0x10020, 0x2001) , Command count = 2598 ] 
14:37:18: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x10020 with Blockcount:0x2001 

14:37:18: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 19
14:37:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x12020 to EndLba:0x12028 with Increment Pattern
14:37:18: [ WrLbaNoData(0x12020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2599 ] 
14:37:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x12020 to EndLba:0x12028 with Increment Pattern 

14:37:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB210>, <py_sfcl.CommandDataDefinition object at 0x066669C0>) , Command count = 2600 ] 
14:37:18: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8CC0>, <py_sfcl.CommandDataDefinition object at 0x06685390>) , Command count = 2601 ] 
14:37:18: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:18: [DVTCommonLib]###  R1bCommandAbort called
14:37:18: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2A, False) , Command count = 2602 ] 
14:37:18: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:18: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:20: Host Frequency set to 25000 KHz
14:37:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:20: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB420>, 0x0, True) , Command count = 2603 ] 
14:37:20: [GO18_globalSetVolt]### Host voltage value is set.
14:37:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABEA0>, 0x0, False) , Command count = 2604 ] 
14:37:20: [GO18_globalSetVolt]### Host voltage value is set.
14:37:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2605 ] 
14:37:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2606 ] 
14:37:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2607 ] 
14:37:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666630>, <py_sfcl.CommandDataDefinition object at 0x06666E10>) , Command count = 2608 ] 
14:37:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB240>, <py_sfcl.CommandDataDefinition object at 0x066857E0>) , Command count = 2609 ] 
14:37:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:20: [ SetCardRCA(0x1, 0xD555) , Command count = 2610 ] 
14:37:20: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:20: Host Frequency set to 25000 KHz
14:37:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:20: ####CSD Registe 2.0 Values####
14:37:20: CSD_STRUCTURE                                 :0x1
14:37:20: Reserv1                                       :0x0
14:37:20: Time Access 1 TAAC                            :0xe
14:37:20: Time Access 2 NSAC*100                        :0x0
14:37:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:20: Card Command Classess CCC                     :0x5b5
14:37:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:20: DSR(driver stage register)  DSR_IMP           :0x0
14:37:20: Reserv2                                       :0x0
14:37:20: Device Size C_SIZE                            :0xedc8
14:37:20: Reserv3                                       :0x0
14:37:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:20: Reserv4                                       :0x0
14:37:20: Write Speed Factor R2W_FACTOR                 :0x2
14:37:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:20: FILE_FORMAT_GRP                               :0x0
14:37:20: COPY flag                                     :0x1
14:37:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:20: File_Format                                   :0x0
14:37:20: CRC                                           :0x0
14:37:20: ####CSD Registe Values####  

14:37:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:20: [GetSCRRegisterEntry] Passed
14:37:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:20: Data_Status_After Erases          : 0
14:37:20: CPRM Security Support             : No Security
14:37:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:20: Spec. Version                     : Version 3.0X
14:37:20: Extended Security Support         : Extended_Security_Not_Supported
14:37:20: Command Support                   : COMMAND_SUPPORT
14:37:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666C60>, <py_sfcl.CommandDataDefinition object at 0x06666120>) , Command count = 2611 ] 
14:37:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB480>, <py_sfcl.CommandDataDefinition object at 0x06666840>) , Command count = 2612 ] 
14:37:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:20: [ SetBusWidth(0x4) , Command count = 2613 ] 
14:37:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066666C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2614 ] 
14:37:20: Protected Area Size 0x28000
14:37:20: Bus Width           2
14:37:20: Secure Mode         0
14:37:20: Speed  Class        4
14:37:20: Perf Move           0
14:37:20: Au Size             9
14:37:20: Erase Size          15
14:37:20: Erase Timeout       1
14:37:20: Erase offset        1
14:37:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2615 ] 
14:37:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:20: Host Frequency set to 100000 KHz
14:37:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:20: ####CSD Registe 2.0 Values####
14:37:20: CSD_STRUCTURE                                 :0x1
14:37:20: Reserv1                                       :0x0
14:37:20: Time Access 1 TAAC                            :0xe
14:37:20: Time Access 2 NSAC*100                        :0x0
14:37:20: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:20: Card Command Classess CCC                     :0x5b5
14:37:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:20: DSR(driver stage register)  DSR_IMP           :0x0
14:37:20: Reserv2                                       :0x0
14:37:20: Device Size C_SIZE                            :0xedc8
14:37:20: Reserv3                                       :0x0
14:37:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:20: Reserv4                                       :0x0
14:37:20: Write Speed Factor R2W_FACTOR                 :0x2
14:37:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:20: FILE_FORMAT_GRP                               :0x0
14:37:20: COPY flag                                     :0x1
14:37:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:20: File_Format                                   :0x0
14:37:20: CRC                                           :0x0
14:37:20: ####CSD Registe Values####  

14:37:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BDB0>, <py_sfcl.CommandDataDefinition object at 0x06032B10>) , Command count = 2616 ] 
14:37:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683F30>, <py_sfcl.CommandDataDefinition object at 0x06685B10>) , Command count = 2617 ] 
14:37:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:20: [DVTCommonLib]### Erase :Erase API Called
14:37:20: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x12020 with Blockcount:0x2001
14:37:20: [ EraseLba(0x12020, 0x2001) , Command count = 2618 ] 
14:37:20: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x12020 with Blockcount:0x2001 

14:37:20: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 18
14:37:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x14020 to EndLba:0x14028 with Increment Pattern
14:37:20: [ WrLbaNoData(0x14020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2619 ] 
14:37:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x14020 to EndLba:0x14028 with Increment Pattern 

14:37:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065721E0>, <py_sfcl.CommandDataDefinition object at 0x066AB1E0>) , Command count = 2620 ] 
14:37:20: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032960>, <py_sfcl.CommandDataDefinition object at 0x06685B10>) , Command count = 2621 ] 
14:37:20: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:20: [DVTCommonLib]###  R1bCommandAbort called
14:37:20: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x5, False) , Command count = 2622 ] 
14:37:20: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:20: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:23: Host Frequency set to 25000 KHz
14:37:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:23: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666E70>, 0x0, True) , Command count = 2623 ] 
14:37:23: [GO18_globalSetVolt]### Host voltage value is set.
14:37:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A4E0>, 0x0, False) , Command count = 2624 ] 
14:37:23: [GO18_globalSetVolt]### Host voltage value is set.
14:37:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2625 ] 
14:37:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2626 ] 
14:37:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2627 ] 
14:37:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB600>, <py_sfcl.CommandDataDefinition object at 0x066AB300>) , Command count = 2628 ] 
14:37:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB2D0>, <py_sfcl.CommandDataDefinition object at 0x06685B10>) , Command count = 2629 ] 
14:37:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:23: [ SetCardRCA(0x1, 0xD555) , Command count = 2630 ] 
14:37:23: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:23: Host Frequency set to 25000 KHz
14:37:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:23: ####CSD Registe 2.0 Values####
14:37:23: CSD_STRUCTURE                                 :0x1
14:37:23: Reserv1                                       :0x0
14:37:23: Time Access 1 TAAC                            :0xe
14:37:23: Time Access 2 NSAC*100                        :0x0
14:37:23: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:23: Card Command Classess CCC                     :0x5b5
14:37:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:23: DSR(driver stage register)  DSR_IMP           :0x0
14:37:23: Reserv2                                       :0x0
14:37:23: Device Size C_SIZE                            :0xedc8
14:37:23: Reserv3                                       :0x0
14:37:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:23: Reserv4                                       :0x0
14:37:23: Write Speed Factor R2W_FACTOR                 :0x2
14:37:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:23: FILE_FORMAT_GRP                               :0x0
14:37:23: COPY flag                                     :0x1
14:37:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:23: File_Format                                   :0x0
14:37:23: CRC                                           :0x0
14:37:23: ####CSD Registe Values####  

14:37:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:23: [GetSCRRegisterEntry] Passed
14:37:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:23: Data_Status_After Erases          : 0
14:37:23: CPRM Security Support             : No Security
14:37:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:23: Spec. Version                     : Version 3.0X
14:37:23: Extended Security Support         : Extended_Security_Not_Supported
14:37:23: Command Support                   : COMMAND_SUPPORT
14:37:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666B10>, <py_sfcl.CommandDataDefinition object at 0x0667A7E0>) , Command count = 2631 ] 
14:37:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB3F0>, <py_sfcl.CommandDataDefinition object at 0x066662D0>) , Command count = 2632 ] 
14:37:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:23: [ SetBusWidth(0x4) , Command count = 2633 ] 
14:37:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667AAE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2634 ] 
14:37:23: Protected Area Size 0x28000
14:37:23: Bus Width           2
14:37:23: Secure Mode         0
14:37:23: Speed  Class        4
14:37:23: Perf Move           0
14:37:23: Au Size             9
14:37:23: Erase Size          15
14:37:23: Erase Timeout       1
14:37:23: Erase offset        1
14:37:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2635 ] 
14:37:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:23: Host Frequency set to 100000 KHz
14:37:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:23: ####CSD Registe 2.0 Values####
14:37:23: CSD_STRUCTURE                                 :0x1
14:37:23: Reserv1                                       :0x0
14:37:23: Time Access 1 TAAC                            :0xe
14:37:23: Time Access 2 NSAC*100                        :0x0
14:37:23: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:23: Card Command Classess CCC                     :0x5b5
14:37:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:23: DSR(driver stage register)  DSR_IMP           :0x0
14:37:23: Reserv2                                       :0x0
14:37:23: Device Size C_SIZE                            :0xedc8
14:37:23: Reserv3                                       :0x0
14:37:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:23: Reserv4                                       :0x0
14:37:23: Write Speed Factor R2W_FACTOR                 :0x2
14:37:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:23: FILE_FORMAT_GRP                               :0x0
14:37:23: COPY flag                                     :0x1
14:37:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:23: File_Format                                   :0x0
14:37:23: CRC                                           :0x0
14:37:23: ####CSD Registe Values####  

14:37:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE40>, <py_sfcl.CommandDataDefinition object at 0x06666990>) , Command count = 2636 ] 
14:37:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032E10>, <py_sfcl.CommandDataDefinition object at 0x06685BA0>) , Command count = 2637 ] 
14:37:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:23: [DVTCommonLib]### Erase :Erase API Called
14:37:23: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x14020 with Blockcount:0x2001
14:37:23: [ EraseLba(0x14020, 0x2001) , Command count = 2638 ] 
14:37:23: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x14020 with Blockcount:0x2001 

14:37:23: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 17
14:37:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x16020 to EndLba:0x16028 with Increment Pattern
14:37:23: [ WrLbaNoData(0x16020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2639 ] 
14:37:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x16020 to EndLba:0x16028 with Increment Pattern 

14:37:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABED0>, <py_sfcl.CommandDataDefinition object at 0x06666870>) , Command count = 2640 ] 
14:37:23: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB4B0>, <py_sfcl.CommandDataDefinition object at 0x0667A390>) , Command count = 2641 ] 
14:37:23: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:23: [DVTCommonLib]###  R1bCommandAbort called
14:37:23: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x16, False) , Command count = 2642 ] 
14:37:23: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:23: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:25: Host Frequency set to 25000 KHz
14:37:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666960>, 0x0, True) , Command count = 2643 ] 
14:37:25: [GO18_globalSetVolt]### Host voltage value is set.
14:37:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F630>, 0x0, False) , Command count = 2644 ] 
14:37:25: [GO18_globalSetVolt]### Host voltage value is set.
14:37:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2645 ] 
14:37:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2646 ] 
14:37:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2647 ] 
14:37:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A480>, <py_sfcl.CommandDataDefinition object at 0x0667A840>) , Command count = 2648 ] 
14:37:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AD50>, <py_sfcl.CommandDataDefinition object at 0x0667A030>) , Command count = 2649 ] 
14:37:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:26: [ SetCardRCA(0x1, 0xD555) , Command count = 2650 ] 
14:37:26: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:26: Host Frequency set to 25000 KHz
14:37:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:26: ####CSD Registe 2.0 Values####
14:37:26: CSD_STRUCTURE                                 :0x1
14:37:26: Reserv1                                       :0x0
14:37:26: Time Access 1 TAAC                            :0xe
14:37:26: Time Access 2 NSAC*100                        :0x0
14:37:26: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:26: Card Command Classess CCC                     :0x5b5
14:37:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:26: DSR(driver stage register)  DSR_IMP           :0x0
14:37:26: Reserv2                                       :0x0
14:37:26: Device Size C_SIZE                            :0xedc8
14:37:26: Reserv3                                       :0x0
14:37:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:26: Reserv4                                       :0x0
14:37:26: Write Speed Factor R2W_FACTOR                 :0x2
14:37:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:26: FILE_FORMAT_GRP                               :0x0
14:37:26: COPY flag                                     :0x1
14:37:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:26: File_Format                                   :0x0
14:37:26: CRC                                           :0x0
14:37:26: ####CSD Registe Values####  

14:37:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:26: [GetSCRRegisterEntry] Passed
14:37:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:26: Data_Status_After Erases          : 0
14:37:26: CPRM Security Support             : No Security
14:37:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:26: Spec. Version                     : Version 3.0X
14:37:26: Extended Security Support         : Extended_Security_Not_Supported
14:37:26: Command Support                   : COMMAND_SUPPORT
14:37:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF30>, <py_sfcl.CommandDataDefinition object at 0x0667AD20>) , Command count = 2651 ] 
14:37:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666750>, <py_sfcl.CommandDataDefinition object at 0x0667AB40>) , Command count = 2652 ] 
14:37:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:26: [ SetBusWidth(0x4) , Command count = 2653 ] 
14:37:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A0C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2654 ] 
14:37:26: Protected Area Size 0x28000
14:37:26: Bus Width           2
14:37:26: Secure Mode         0
14:37:26: Speed  Class        4
14:37:26: Perf Move           0
14:37:26: Au Size             9
14:37:26: Erase Size          15
14:37:26: Erase Timeout       1
14:37:26: Erase offset        1
14:37:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2655 ] 
14:37:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:26: Host Frequency set to 100000 KHz
14:37:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:26: ####CSD Registe 2.0 Values####
14:37:26: CSD_STRUCTURE                                 :0x1
14:37:26: Reserv1                                       :0x0
14:37:26: Time Access 1 TAAC                            :0xe
14:37:26: Time Access 2 NSAC*100                        :0x0
14:37:26: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:26: Card Command Classess CCC                     :0x5b5
14:37:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:26: DSR(driver stage register)  DSR_IMP           :0x0
14:37:26: Reserv2                                       :0x0
14:37:26: Device Size C_SIZE                            :0xedc8
14:37:26: Reserv3                                       :0x0
14:37:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:26: Reserv4                                       :0x0
14:37:26: Write Speed Factor R2W_FACTOR                 :0x2
14:37:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:26: FILE_FORMAT_GRP                               :0x0
14:37:26: COPY flag                                     :0x1
14:37:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:26: File_Format                                   :0x0
14:37:26: CRC                                           :0x0
14:37:26: ####CSD Registe Values####  

14:37:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A6C0>, <py_sfcl.CommandDataDefinition object at 0x0667AAE0>) , Command count = 2656 ] 
14:37:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666660>, <py_sfcl.CommandDataDefinition object at 0x06685C00>) , Command count = 2657 ] 
14:37:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:26: [DVTCommonLib]### Erase :Erase API Called
14:37:26: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x16020 with Blockcount:0x2001
14:37:26: [ EraseLba(0x16020, 0x2001) , Command count = 2658 ] 
14:37:26: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x16020 with Blockcount:0x2001 

14:37:26: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 16
14:37:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x18020 to EndLba:0x18028 with Increment Pattern
14:37:26: [ WrLbaNoData(0x18020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2659 ] 
14:37:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x18020 to EndLba:0x18028 with Increment Pattern 

14:37:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A240>, <py_sfcl.CommandDataDefinition object at 0x0667A690>) , Command count = 2660 ] 
14:37:26: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066662A0>, <py_sfcl.CommandDataDefinition object at 0x06685C00>) , Command count = 2661 ] 
14:37:26: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:26: [DVTCommonLib]###  R1bCommandAbort called
14:37:26: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xF, False) , Command count = 2662 ] 
14:37:26: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:26: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:28: Host Frequency set to 25000 KHz
14:37:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:28: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB360>, 0x0, True) , Command count = 2663 ] 
14:37:28: [GO18_globalSetVolt]### Host voltage value is set.
14:37:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C720>, 0x0, False) , Command count = 2664 ] 
14:37:28: [GO18_globalSetVolt]### Host voltage value is set.
14:37:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2665 ] 
14:37:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2666 ] 
14:37:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2667 ] 
14:37:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A0F0>, <py_sfcl.CommandDataDefinition object at 0x0667AF60>) , Command count = 2668 ] 
14:37:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683A20>, <py_sfcl.CommandDataDefinition object at 0x0667AD80>) , Command count = 2669 ] 
14:37:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:28: [ SetCardRCA(0x1, 0xD555) , Command count = 2670 ] 
14:37:28: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:29: Host Frequency set to 25000 KHz
14:37:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:29: ####CSD Registe 2.0 Values####
14:37:29: CSD_STRUCTURE                                 :0x1
14:37:29: Reserv1                                       :0x0
14:37:29: Time Access 1 TAAC                            :0xe
14:37:29: Time Access 2 NSAC*100                        :0x0
14:37:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:29: Card Command Classess CCC                     :0x5b5
14:37:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:29: DSR(driver stage register)  DSR_IMP           :0x0
14:37:29: Reserv2                                       :0x0
14:37:29: Device Size C_SIZE                            :0xedc8
14:37:29: Reserv3                                       :0x0
14:37:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:29: Reserv4                                       :0x0
14:37:29: Write Speed Factor R2W_FACTOR                 :0x2
14:37:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:29: FILE_FORMAT_GRP                               :0x0
14:37:29: COPY flag                                     :0x1
14:37:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:29: File_Format                                   :0x0
14:37:29: CRC                                           :0x0
14:37:29: ####CSD Registe Values####  

14:37:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:29: [GetSCRRegisterEntry] Passed
14:37:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:29: Data_Status_After Erases          : 0
14:37:29: CPRM Security Support             : No Security
14:37:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:29: Spec. Version                     : Version 3.0X
14:37:29: Extended Security Support         : Extended_Security_Not_Supported
14:37:29: Command Support                   : COMMAND_SUPPORT
14:37:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A6F0>, <py_sfcl.CommandDataDefinition object at 0x0667A420>) , Command count = 2671 ] 
14:37:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C450>, <py_sfcl.CommandDataDefinition object at 0x0667C2D0>) , Command count = 2672 ] 
14:37:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:29: [ SetBusWidth(0x4) , Command count = 2673 ] 
14:37:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667ADE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2674 ] 
14:37:29: Protected Area Size 0x28000
14:37:29: Bus Width           2
14:37:29: Secure Mode         0
14:37:29: Speed  Class        4
14:37:29: Perf Move           0
14:37:29: Au Size             9
14:37:29: Erase Size          15
14:37:29: Erase Timeout       1
14:37:29: Erase offset        1
14:37:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2675 ] 
14:37:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:29: Host Frequency set to 100000 KHz
14:37:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:29: ####CSD Registe 2.0 Values####
14:37:29: CSD_STRUCTURE                                 :0x1
14:37:29: Reserv1                                       :0x0
14:37:29: Time Access 1 TAAC                            :0xe
14:37:29: Time Access 2 NSAC*100                        :0x0
14:37:29: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:29: Card Command Classess CCC                     :0x5b5
14:37:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:29: DSR(driver stage register)  DSR_IMP           :0x0
14:37:29: Reserv2                                       :0x0
14:37:29: Device Size C_SIZE                            :0xedc8
14:37:29: Reserv3                                       :0x0
14:37:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:29: Reserv4                                       :0x0
14:37:29: Write Speed Factor R2W_FACTOR                 :0x2
14:37:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:29: FILE_FORMAT_GRP                               :0x0
14:37:29: COPY flag                                     :0x1
14:37:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:29: File_Format                                   :0x0
14:37:29: CRC                                           :0x0
14:37:29: ####CSD Registe Values####  

14:37:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB450>, <py_sfcl.CommandDataDefinition object at 0x0667A0C0>) , Command count = 2676 ] 
14:37:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB5D0>, <py_sfcl.CommandDataDefinition object at 0x06685C90>) , Command count = 2677 ] 
14:37:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:29: [DVTCommonLib]### Erase :Erase API Called
14:37:29: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x18020 with Blockcount:0x2001
14:37:29: [ EraseLba(0x18020, 0x2001) , Command count = 2678 ] 
14:37:29: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x18020 with Blockcount:0x2001 

14:37:29: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 15
14:37:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1A020 to EndLba:0x1A028 with Increment Pattern
14:37:29: [ WrLbaNoData(0x1A020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2679 ] 
14:37:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1A020 to EndLba:0x1A028 with Increment Pattern 

14:37:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C0F0>, <py_sfcl.CommandDataDefinition object at 0x0667C1E0>) , Command count = 2680 ] 
14:37:29: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C570>, <py_sfcl.CommandDataDefinition object at 0x0667AF00>) , Command count = 2681 ] 
14:37:29: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:29: [DVTCommonLib]###  R1bCommandAbort called
14:37:29: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x19, False) , Command count = 2682 ] 
14:37:29: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:29: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:31: Host Frequency set to 25000 KHz
14:37:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:31: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C420>, 0x0, True) , Command count = 2683 ] 
14:37:31: [GO18_globalSetVolt]### Host voltage value is set.
14:37:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x066830C0>, 0x0, False) , Command count = 2684 ] 
14:37:31: [GO18_globalSetVolt]### Host voltage value is set.
14:37:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2685 ] 
14:37:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2686 ] 
14:37:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2687 ] 
14:37:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C3C0>, <py_sfcl.CommandDataDefinition object at 0x0667C060>) , Command count = 2688 ] 
14:37:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CC90>, <py_sfcl.CommandDataDefinition object at 0x0667AF00>) , Command count = 2689 ] 
14:37:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:31: [ SetCardRCA(0x1, 0xD555) , Command count = 2690 ] 
14:37:31: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:31: Host Frequency set to 25000 KHz
14:37:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:31: ####CSD Registe 2.0 Values####
14:37:31: CSD_STRUCTURE                                 :0x1
14:37:31: Reserv1                                       :0x0
14:37:31: Time Access 1 TAAC                            :0xe
14:37:31: Time Access 2 NSAC*100                        :0x0
14:37:31: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:31: Card Command Classess CCC                     :0x5b5
14:37:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:31: DSR(driver stage register)  DSR_IMP           :0x0
14:37:31: Reserv2                                       :0x0
14:37:31: Device Size C_SIZE                            :0xedc8
14:37:31: Reserv3                                       :0x0
14:37:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:31: Reserv4                                       :0x0
14:37:31: Write Speed Factor R2W_FACTOR                 :0x2
14:37:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:31: FILE_FORMAT_GRP                               :0x0
14:37:31: COPY flag                                     :0x1
14:37:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:31: File_Format                                   :0x0
14:37:31: CRC                                           :0x0
14:37:31: ####CSD Registe Values####  

14:37:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:31: [GetSCRRegisterEntry] Passed
14:37:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:31: Data_Status_After Erases          : 0
14:37:31: CPRM Security Support             : No Security
14:37:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:31: Spec. Version                     : Version 3.0X
14:37:31: Extended Security Support         : Extended_Security_Not_Supported
14:37:31: Command Support                   : COMMAND_SUPPORT
14:37:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666090>, <py_sfcl.CommandDataDefinition object at 0x0667C6C0>) , Command count = 2691 ] 
14:37:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C5D0>, <py_sfcl.CommandDataDefinition object at 0x0667AFC0>) , Command count = 2692 ] 
14:37:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:31: [ SetBusWidth(0x4) , Command count = 2693 ] 
14:37:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667CA20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2694 ] 
14:37:31: Protected Area Size 0x28000
14:37:31: Bus Width           2
14:37:31: Secure Mode         0
14:37:31: Speed  Class        4
14:37:31: Perf Move           0
14:37:31: Au Size             9
14:37:31: Erase Size          15
14:37:31: Erase Timeout       1
14:37:31: Erase offset        1
14:37:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2695 ] 
14:37:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:31: Host Frequency set to 100000 KHz
14:37:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:32: ####CSD Registe 2.0 Values####
14:37:32: CSD_STRUCTURE                                 :0x1
14:37:32: Reserv1                                       :0x0
14:37:32: Time Access 1 TAAC                            :0xe
14:37:32: Time Access 2 NSAC*100                        :0x0
14:37:32: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:32: Card Command Classess CCC                     :0x5b5
14:37:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:32: DSR(driver stage register)  DSR_IMP           :0x0
14:37:32: Reserv2                                       :0x0
14:37:32: Device Size C_SIZE                            :0xedc8
14:37:32: Reserv3                                       :0x0
14:37:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:32: Reserv4                                       :0x0
14:37:32: Write Speed Factor R2W_FACTOR                 :0x2
14:37:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:32: FILE_FORMAT_GRP                               :0x0
14:37:32: COPY flag                                     :0x1
14:37:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:32: File_Format                                   :0x0
14:37:32: CRC                                           :0x0
14:37:32: ####CSD Registe Values####  

14:37:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C510>, <py_sfcl.CommandDataDefinition object at 0x0667C1B0>) , Command count = 2696 ] 
14:37:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A1B0>, <py_sfcl.CommandDataDefinition object at 0x06685900>) , Command count = 2697 ] 
14:37:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:32: [DVTCommonLib]### Erase :Erase API Called
14:37:32: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1A020 with Blockcount:0x2001
14:37:32: [ EraseLba(0x1A020, 0x2001) , Command count = 2698 ] 
14:37:32: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1A020 with Blockcount:0x2001 

14:37:32: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 14
14:37:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1C020 to EndLba:0x1C028 with Increment Pattern
14:37:32: [ WrLbaNoData(0x1C020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2699 ] 
14:37:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1C020 to EndLba:0x1C028 with Increment Pattern 

14:37:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A660>, <py_sfcl.CommandDataDefinition object at 0x0667C480>) , Command count = 2700 ] 
14:37:32: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C600>, <py_sfcl.CommandDataDefinition object at 0x0667C540>) , Command count = 2701 ] 
14:37:32: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:32: [DVTCommonLib]###  R1bCommandAbort called
14:37:32: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x10, False) , Command count = 2702 ] 
14:37:32: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:32: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:34: Host Frequency set to 25000 KHz
14:37:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:34: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CF30>, 0x0, True) , Command count = 2703 ] 
14:37:34: [GO18_globalSetVolt]### Host voltage value is set.
14:37:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F660>, 0x0, False) , Command count = 2704 ] 
14:37:34: [GO18_globalSetVolt]### Host voltage value is set.
14:37:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2705 ] 
14:37:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2706 ] 
14:37:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2707 ] 
14:37:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C990>, <py_sfcl.CommandDataDefinition object at 0x0667CAB0>) , Command count = 2708 ] 
14:37:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F450>, <py_sfcl.CommandDataDefinition object at 0x0667C750>) , Command count = 2709 ] 
14:37:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:34: [ SetCardRCA(0x1, 0xD555) , Command count = 2710 ] 
14:37:34: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:34: Host Frequency set to 25000 KHz
14:37:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:34: ####CSD Registe 2.0 Values####
14:37:34: CSD_STRUCTURE                                 :0x1
14:37:34: Reserv1                                       :0x0
14:37:34: Time Access 1 TAAC                            :0xe
14:37:34: Time Access 2 NSAC*100                        :0x0
14:37:34: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:34: Card Command Classess CCC                     :0x5b5
14:37:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:34: DSR(driver stage register)  DSR_IMP           :0x0
14:37:34: Reserv2                                       :0x0
14:37:34: Device Size C_SIZE                            :0xedc8
14:37:34: Reserv3                                       :0x0
14:37:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:34: Reserv4                                       :0x0
14:37:34: Write Speed Factor R2W_FACTOR                 :0x2
14:37:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:34: FILE_FORMAT_GRP                               :0x0
14:37:34: COPY flag                                     :0x1
14:37:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:34: File_Format                                   :0x0
14:37:34: CRC                                           :0x0
14:37:34: ####CSD Registe Values####  

14:37:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:34: [GetSCRRegisterEntry] Passed
14:37:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:34: Data_Status_After Erases          : 0
14:37:34: CPRM Security Support             : No Security
14:37:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:34: Spec. Version                     : Version 3.0X
14:37:34: Extended Security Support         : Extended_Security_Not_Supported
14:37:34: Command Support                   : COMMAND_SUPPORT
14:37:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C210>, <py_sfcl.CommandDataDefinition object at 0x0667C7E0>) , Command count = 2711 ] 
14:37:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F390>, <py_sfcl.CommandDataDefinition object at 0x0667F780>) , Command count = 2712 ] 
14:37:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:34: [ SetBusWidth(0x4) , Command count = 2713 ] 
14:37:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667CE70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2714 ] 
14:37:34: Protected Area Size 0x28000
14:37:34: Bus Width           2
14:37:34: Secure Mode         0
14:37:34: Speed  Class        4
14:37:34: Perf Move           0
14:37:34: Au Size             9
14:37:34: Erase Size          15
14:37:34: Erase Timeout       1
14:37:34: Erase offset        1
14:37:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2715 ] 
14:37:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:34: Host Frequency set to 100000 KHz
14:37:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:34: ####CSD Registe 2.0 Values####
14:37:34: CSD_STRUCTURE                                 :0x1
14:37:34: Reserv1                                       :0x0
14:37:34: Time Access 1 TAAC                            :0xe
14:37:34: Time Access 2 NSAC*100                        :0x0
14:37:34: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:34: Card Command Classess CCC                     :0x5b5
14:37:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:34: DSR(driver stage register)  DSR_IMP           :0x0
14:37:34: Reserv2                                       :0x0
14:37:34: Device Size C_SIZE                            :0xedc8
14:37:34: Reserv3                                       :0x0
14:37:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:34: Reserv4                                       :0x0
14:37:34: Write Speed Factor R2W_FACTOR                 :0x2
14:37:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:34: FILE_FORMAT_GRP                               :0x0
14:37:34: COPY flag                                     :0x1
14:37:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:34: File_Format                                   :0x0
14:37:34: CRC                                           :0x0
14:37:34: ####CSD Registe Values####  

14:37:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C8A0>, <py_sfcl.CommandDataDefinition object at 0x0667CA20>) , Command count = 2716 ] 
14:37:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CB10>, <py_sfcl.CommandDataDefinition object at 0x06685810>) , Command count = 2717 ] 
14:37:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:34: [DVTCommonLib]### Erase :Erase API Called
14:37:34: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1C020 with Blockcount:0x2001
14:37:34: [ EraseLba(0x1C020, 0x2001) , Command count = 2718 ] 
14:37:34: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1C020 with Blockcount:0x2001 

14:37:34: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 13
14:37:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1E020 to EndLba:0x1E028 with Increment Pattern
14:37:34: [ WrLbaNoData(0x1E020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2719 ] 
14:37:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1E020 to EndLba:0x1E028 with Increment Pattern 

14:37:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F420>, <py_sfcl.CommandDataDefinition object at 0x0667FB10>) , Command count = 2720 ] 
14:37:34: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C120>, <py_sfcl.CommandDataDefinition object at 0x0667C180>) , Command count = 2721 ] 
14:37:34: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:34: [DVTCommonLib]###  R1bCommandAbort called
14:37:34: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x7, False) , Command count = 2722 ] 
14:37:34: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:34: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:37: Host Frequency set to 25000 KHz
14:37:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AF30>, 0x0, True) , Command count = 2723 ] 
14:37:37: [GO18_globalSetVolt]### Host voltage value is set.
14:37:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FE70>, 0x0, False) , Command count = 2724 ] 
14:37:37: [GO18_globalSetVolt]### Host voltage value is set.
14:37:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2725 ] 
14:37:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2726 ] 
14:37:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2727 ] 
14:37:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F6C0>, <py_sfcl.CommandDataDefinition object at 0x0667F270>) , Command count = 2728 ] 
14:37:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FBD0>, <py_sfcl.CommandDataDefinition object at 0x0667CBA0>) , Command count = 2729 ] 
14:37:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:37: [ SetCardRCA(0x1, 0xD555) , Command count = 2730 ] 
14:37:37: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:37: Host Frequency set to 25000 KHz
14:37:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:37: ####CSD Registe 2.0 Values####
14:37:37: CSD_STRUCTURE                                 :0x1
14:37:37: Reserv1                                       :0x0
14:37:37: Time Access 1 TAAC                            :0xe
14:37:37: Time Access 2 NSAC*100                        :0x0
14:37:37: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:37: Card Command Classess CCC                     :0x5b5
14:37:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:37: DSR(driver stage register)  DSR_IMP           :0x0
14:37:37: Reserv2                                       :0x0
14:37:37: Device Size C_SIZE                            :0xedc8
14:37:37: Reserv3                                       :0x0
14:37:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:37: Reserv4                                       :0x0
14:37:37: Write Speed Factor R2W_FACTOR                 :0x2
14:37:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:37: FILE_FORMAT_GRP                               :0x0
14:37:37: COPY flag                                     :0x1
14:37:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:37: File_Format                                   :0x0
14:37:37: CRC                                           :0x0
14:37:37: ####CSD Registe Values####  

14:37:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:37: [GetSCRRegisterEntry] Passed
14:37:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:37: Data_Status_After Erases          : 0
14:37:37: CPRM Security Support             : No Security
14:37:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:37: Spec. Version                     : Version 3.0X
14:37:37: Extended Security Support         : Extended_Security_Not_Supported
14:37:37: Command Support                   : COMMAND_SUPPORT
14:37:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FC00>, <py_sfcl.CommandDataDefinition object at 0x0667CED0>) , Command count = 2731 ] 
14:37:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FF00>, <py_sfcl.CommandDataDefinition object at 0x0667F150>) , Command count = 2732 ] 
14:37:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:37: [ SetBusWidth(0x4) , Command count = 2733 ] 
14:37:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2734 ] 
14:37:37: Protected Area Size 0x28000
14:37:37: Bus Width           2
14:37:37: Secure Mode         0
14:37:37: Speed  Class        4
14:37:37: Perf Move           0
14:37:37: Au Size             9
14:37:37: Erase Size          15
14:37:37: Erase Timeout       1
14:37:37: Erase offset        1
14:37:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2735 ] 
14:37:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:37: Host Frequency set to 100000 KHz
14:37:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:37: ####CSD Registe 2.0 Values####
14:37:37: CSD_STRUCTURE                                 :0x1
14:37:37: Reserv1                                       :0x0
14:37:37: Time Access 1 TAAC                            :0xe
14:37:37: Time Access 2 NSAC*100                        :0x0
14:37:37: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:37: Card Command Classess CCC                     :0x5b5
14:37:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:37: DSR(driver stage register)  DSR_IMP           :0x0
14:37:37: Reserv2                                       :0x0
14:37:37: Device Size C_SIZE                            :0xedc8
14:37:37: Reserv3                                       :0x0
14:37:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:37: Reserv4                                       :0x0
14:37:37: Write Speed Factor R2W_FACTOR                 :0x2
14:37:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:37: FILE_FORMAT_GRP                               :0x0
14:37:37: COPY flag                                     :0x1
14:37:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:37: File_Format                                   :0x0
14:37:37: CRC                                           :0x0
14:37:37: ####CSD Registe Values####  

14:37:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F600>, <py_sfcl.CommandDataDefinition object at 0x0667F300>) , Command count = 2736 ] 
14:37:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ABD0>, <py_sfcl.CommandDataDefinition object at 0x066857B0>) , Command count = 2737 ] 
14:37:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:37: [DVTCommonLib]### Erase :Erase API Called
14:37:37: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1E020 with Blockcount:0x2001
14:37:37: [ EraseLba(0x1E020, 0x2001) , Command count = 2738 ] 
14:37:37: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1E020 with Blockcount:0x2001 

14:37:37: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 12
14:37:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x20020 to EndLba:0x20028 with Increment Pattern
14:37:37: [ WrLbaNoData(0x20020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2739 ] 
14:37:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x20020 to EndLba:0x20028 with Increment Pattern 

14:37:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C930>, <py_sfcl.CommandDataDefinition object at 0x0667F840>) , Command count = 2740 ] 
14:37:37: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FA50>, <py_sfcl.CommandDataDefinition object at 0x0667F5D0>) , Command count = 2741 ] 
14:37:37: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:37: [DVTCommonLib]###  R1bCommandAbort called
14:37:37: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x8, False) , Command count = 2742 ] 
14:37:37: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:37: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:39: Host Frequency set to 25000 KHz
14:37:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:39: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AEA0>, 0x0, True) , Command count = 2743 ] 
14:37:39: [GO18_globalSetVolt]### Host voltage value is set.
14:37:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x066835A0>, 0x0, False) , Command count = 2744 ] 
14:37:39: [GO18_globalSetVolt]### Host voltage value is set.
14:37:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2745 ] 
14:37:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2746 ] 
14:37:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2747 ] 
14:37:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F690>, <py_sfcl.CommandDataDefinition object at 0x0667FCC0>) , Command count = 2748 ] 
14:37:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683630>, <py_sfcl.CommandDataDefinition object at 0x0667F930>) , Command count = 2749 ] 
14:37:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:40: [ SetCardRCA(0x1, 0xD555) , Command count = 2750 ] 
14:37:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:40: Host Frequency set to 25000 KHz
14:37:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:40: ####CSD Registe 2.0 Values####
14:37:40: CSD_STRUCTURE                                 :0x1
14:37:40: Reserv1                                       :0x0
14:37:40: Time Access 1 TAAC                            :0xe
14:37:40: Time Access 2 NSAC*100                        :0x0
14:37:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:40: Card Command Classess CCC                     :0x5b5
14:37:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:40: DSR(driver stage register)  DSR_IMP           :0x0
14:37:40: Reserv2                                       :0x0
14:37:40: Device Size C_SIZE                            :0xedc8
14:37:40: Reserv3                                       :0x0
14:37:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:40: Reserv4                                       :0x0
14:37:40: Write Speed Factor R2W_FACTOR                 :0x2
14:37:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:40: FILE_FORMAT_GRP                               :0x0
14:37:40: COPY flag                                     :0x1
14:37:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:40: File_Format                                   :0x0
14:37:40: CRC                                           :0x0
14:37:40: ####CSD Registe Values####  

14:37:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:40: [GetSCRRegisterEntry] Passed
14:37:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:40: Data_Status_After Erases          : 0
14:37:40: CPRM Security Support             : No Security
14:37:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:40: Spec. Version                     : Version 3.0X
14:37:40: Extended Security Support         : Extended_Security_Not_Supported
14:37:40: Command Support                   : COMMAND_SUPPORT
14:37:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A9F0>, <py_sfcl.CommandDataDefinition object at 0x0667F570>) , Command count = 2751 ] 
14:37:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066836C0>, <py_sfcl.CommandDataDefinition object at 0x0667F750>) , Command count = 2752 ] 
14:37:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:40: [ SetBusWidth(0x4) , Command count = 2753 ] 
14:37:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667FAE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2754 ] 
14:37:40: Protected Area Size 0x28000
14:37:40: Bus Width           2
14:37:40: Secure Mode         0
14:37:40: Speed  Class        4
14:37:40: Perf Move           0
14:37:40: Au Size             9
14:37:40: Erase Size          15
14:37:40: Erase Timeout       1
14:37:40: Erase offset        1
14:37:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2755 ] 
14:37:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:40: Host Frequency set to 100000 KHz
14:37:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:40: ####CSD Registe 2.0 Values####
14:37:40: CSD_STRUCTURE                                 :0x1
14:37:40: Reserv1                                       :0x0
14:37:40: Time Access 1 TAAC                            :0xe
14:37:40: Time Access 2 NSAC*100                        :0x0
14:37:40: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:40: Card Command Classess CCC                     :0x5b5
14:37:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:40: DSR(driver stage register)  DSR_IMP           :0x0
14:37:40: Reserv2                                       :0x0
14:37:40: Device Size C_SIZE                            :0xedc8
14:37:40: Reserv3                                       :0x0
14:37:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:40: Reserv4                                       :0x0
14:37:40: Write Speed Factor R2W_FACTOR                 :0x2
14:37:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:40: FILE_FORMAT_GRP                               :0x0
14:37:40: COPY flag                                     :0x1
14:37:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:40: File_Format                                   :0x0
14:37:40: CRC                                           :0x0
14:37:40: ####CSD Registe Values####  

14:37:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FA80>, <py_sfcl.CommandDataDefinition object at 0x0667F510>) , Command count = 2756 ] 
14:37:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AE40>, <py_sfcl.CommandDataDefinition object at 0x0667CCC0>) , Command count = 2757 ] 
14:37:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:40: [DVTCommonLib]### Erase :Erase API Called
14:37:40: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x20020 with Blockcount:0x2001
14:37:40: [ EraseLba(0x20020, 0x2001) , Command count = 2758 ] 
14:37:40: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x20020 with Blockcount:0x2001 

14:37:40: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 11
14:37:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x22020 to EndLba:0x22028 with Increment Pattern
14:37:40: [ WrLbaNoData(0x22020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2759 ] 
14:37:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x22020 to EndLba:0x22028 with Increment Pattern 

14:37:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683360>, <py_sfcl.CommandDataDefinition object at 0x06683A50>) , Command count = 2760 ] 
14:37:40: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CD50>, <py_sfcl.CommandDataDefinition object at 0x0667F090>) , Command count = 2761 ] 
14:37:40: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:40: [DVTCommonLib]###  R1bCommandAbort called
14:37:40: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x19, False) , Command count = 2762 ] 
14:37:40: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:40: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:42: Host Frequency set to 25000 KHz
14:37:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:42: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F3C0>, 0x0, True) , Command count = 2763 ] 
14:37:42: [GO18_globalSetVolt]### Host voltage value is set.
14:37:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CDB0>, 0x0, False) , Command count = 2764 ] 
14:37:42: [GO18_globalSetVolt]### Host voltage value is set.
14:37:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2765 ] 
14:37:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2766 ] 
14:37:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2767 ] 
14:37:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683240>, <py_sfcl.CommandDataDefinition object at 0x06683390>) , Command count = 2768 ] 
14:37:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683810>, <py_sfcl.CommandDataDefinition object at 0x0667FC30>) , Command count = 2769 ] 
14:37:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:42: [ SetCardRCA(0x1, 0xD555) , Command count = 2770 ] 
14:37:42: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:43: Host Frequency set to 25000 KHz
14:37:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:43: ####CSD Registe 2.0 Values####
14:37:43: CSD_STRUCTURE                                 :0x1
14:37:43: Reserv1                                       :0x0
14:37:43: Time Access 1 TAAC                            :0xe
14:37:43: Time Access 2 NSAC*100                        :0x0
14:37:43: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:43: Card Command Classess CCC                     :0x5b5
14:37:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:43: DSR(driver stage register)  DSR_IMP           :0x0
14:37:43: Reserv2                                       :0x0
14:37:43: Device Size C_SIZE                            :0xedc8
14:37:43: Reserv3                                       :0x0
14:37:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:43: Reserv4                                       :0x0
14:37:43: Write Speed Factor R2W_FACTOR                 :0x2
14:37:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:43: FILE_FORMAT_GRP                               :0x0
14:37:43: COPY flag                                     :0x1
14:37:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:43: File_Format                                   :0x0
14:37:43: CRC                                           :0x0
14:37:43: ####CSD Registe Values####  

14:37:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:43: [GetSCRRegisterEntry] Passed
14:37:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:43: Data_Status_After Erases          : 0
14:37:43: CPRM Security Support             : No Security
14:37:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:43: Spec. Version                     : Version 3.0X
14:37:43: Extended Security Support         : Extended_Security_Not_Supported
14:37:43: Command Support                   : COMMAND_SUPPORT
14:37:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683AE0>, <py_sfcl.CommandDataDefinition object at 0x0667F120>) , Command count = 2771 ] 
14:37:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D20>, <py_sfcl.CommandDataDefinition object at 0x06683540>) , Command count = 2772 ] 
14:37:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:43: [ SetBusWidth(0x4) , Command count = 2773 ] 
14:37:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683F00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2774 ] 
14:37:43: Protected Area Size 0x28000
14:37:43: Bus Width           2
14:37:43: Secure Mode         0
14:37:43: Speed  Class        4
14:37:43: Perf Move           0
14:37:43: Au Size             9
14:37:43: Erase Size          15
14:37:43: Erase Timeout       1
14:37:43: Erase offset        1
14:37:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2775 ] 
14:37:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:43: Host Frequency set to 100000 KHz
14:37:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:43: ####CSD Registe 2.0 Values####
14:37:43: CSD_STRUCTURE                                 :0x1
14:37:43: Reserv1                                       :0x0
14:37:43: Time Access 1 TAAC                            :0xe
14:37:43: Time Access 2 NSAC*100                        :0x0
14:37:43: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:43: Card Command Classess CCC                     :0x5b5
14:37:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:43: DSR(driver stage register)  DSR_IMP           :0x0
14:37:43: Reserv2                                       :0x0
14:37:43: Device Size C_SIZE                            :0xedc8
14:37:43: Reserv3                                       :0x0
14:37:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:43: Reserv4                                       :0x0
14:37:43: Write Speed Factor R2W_FACTOR                 :0x2
14:37:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:43: FILE_FORMAT_GRP                               :0x0
14:37:43: COPY flag                                     :0x1
14:37:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:43: File_Format                                   :0x0
14:37:43: CRC                                           :0x0
14:37:43: ####CSD Registe Values####  

14:37:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE70>, <py_sfcl.CommandDataDefinition object at 0x0667F960>) , Command count = 2776 ] 
14:37:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FFC0>, <py_sfcl.CommandDataDefinition object at 0x0667F7B0>) , Command count = 2777 ] 
14:37:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:43: [DVTCommonLib]### Erase :Erase API Called
14:37:43: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x22020 with Blockcount:0x2001
14:37:43: [ EraseLba(0x22020, 0x2001) , Command count = 2778 ] 
14:37:43: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x22020 with Blockcount:0x2001 

14:37:43: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 10
14:37:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x24020 to EndLba:0x24028 with Increment Pattern
14:37:43: [ WrLbaNoData(0x24020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2779 ] 
14:37:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x24020 to EndLba:0x24028 with Increment Pattern 

14:37:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F8D0>, <py_sfcl.CommandDataDefinition object at 0x06683D80>) , Command count = 2780 ] 
14:37:43: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683120>, <py_sfcl.CommandDataDefinition object at 0x066836F0>) , Command count = 2781 ] 
14:37:43: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:43: [DVTCommonLib]###  R1bCommandAbort called
14:37:43: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1A, False) , Command count = 2782 ] 
14:37:43: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:43: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:45: Host Frequency set to 25000 KHz
14:37:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:45: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CDE0>, 0x0, True) , Command count = 2783 ] 
14:37:45: [GO18_globalSetVolt]### Host voltage value is set.
14:37:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FC6570>, 0x0, False) , Command count = 2784 ] 
14:37:45: [GO18_globalSetVolt]### Host voltage value is set.
14:37:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2785 ] 
14:37:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2786 ] 
14:37:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2787 ] 
14:37:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066835D0>, <py_sfcl.CommandDataDefinition object at 0x066832A0>) , Command count = 2788 ] 
14:37:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FED1B0>, <py_sfcl.CommandDataDefinition object at 0x06683DB0>) , Command count = 2789 ] 
14:37:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:45: [ SetCardRCA(0x1, 0xD555) , Command count = 2790 ] 
14:37:45: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:45: Host Frequency set to 25000 KHz
14:37:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:45: ####CSD Registe 2.0 Values####
14:37:45: CSD_STRUCTURE                                 :0x1
14:37:45: Reserv1                                       :0x0
14:37:45: Time Access 1 TAAC                            :0xe
14:37:45: Time Access 2 NSAC*100                        :0x0
14:37:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:45: Card Command Classess CCC                     :0x5b5
14:37:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:45: DSR(driver stage register)  DSR_IMP           :0x0
14:37:45: Reserv2                                       :0x0
14:37:45: Device Size C_SIZE                            :0xedc8
14:37:45: Reserv3                                       :0x0
14:37:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:45: Reserv4                                       :0x0
14:37:45: Write Speed Factor R2W_FACTOR                 :0x2
14:37:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:45: FILE_FORMAT_GRP                               :0x0
14:37:45: COPY flag                                     :0x1
14:37:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:45: File_Format                                   :0x0
14:37:45: CRC                                           :0x0
14:37:45: ####CSD Registe Values####  

14:37:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:45: [GetSCRRegisterEntry] Passed
14:37:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:45: Data_Status_After Erases          : 0
14:37:45: CPRM Security Support             : No Security
14:37:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:45: Spec. Version                     : Version 3.0X
14:37:45: Extended Security Support         : Extended_Security_Not_Supported
14:37:45: Command Support                   : COMMAND_SUPPORT
14:37:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F810>, <py_sfcl.CommandDataDefinition object at 0x06683660>) , Command count = 2791 ] 
14:37:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683A80>, <py_sfcl.CommandDataDefinition object at 0x066837E0>) , Command count = 2792 ] 
14:37:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:45: [ SetBusWidth(0x4) , Command count = 2793 ] 
14:37:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683450>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2794 ] 
14:37:45: Protected Area Size 0x28000
14:37:45: Bus Width           2
14:37:45: Secure Mode         0
14:37:45: Speed  Class        4
14:37:45: Perf Move           0
14:37:45: Au Size             9
14:37:45: Erase Size          15
14:37:45: Erase Timeout       1
14:37:45: Erase offset        1
14:37:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2795 ] 
14:37:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:45: Host Frequency set to 100000 KHz
14:37:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:45: ####CSD Registe 2.0 Values####
14:37:45: CSD_STRUCTURE                                 :0x1
14:37:45: Reserv1                                       :0x0
14:37:45: Time Access 1 TAAC                            :0xe
14:37:45: Time Access 2 NSAC*100                        :0x0
14:37:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:45: Card Command Classess CCC                     :0x5b5
14:37:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:45: DSR(driver stage register)  DSR_IMP           :0x0
14:37:45: Reserv2                                       :0x0
14:37:45: Device Size C_SIZE                            :0xedc8
14:37:46: Reserv3                                       :0x0
14:37:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:46: Reserv4                                       :0x0
14:37:46: Write Speed Factor R2W_FACTOR                 :0x2
14:37:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:46: FILE_FORMAT_GRP                               :0x0
14:37:46: COPY flag                                     :0x1
14:37:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:46: File_Format                                   :0x0
14:37:46: CRC                                           :0x0
14:37:46: ####CSD Registe Values####  

14:37:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066839C0>, <py_sfcl.CommandDataDefinition object at 0x06683E40>) , Command count = 2796 ] 
14:37:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683B70>, <py_sfcl.CommandDataDefinition object at 0x06683300>) , Command count = 2797 ] 
14:37:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:46: [DVTCommonLib]### Erase :Erase API Called
14:37:46: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x24020 with Blockcount:0x2001
14:37:46: [ EraseLba(0x24020, 0x2001) , Command count = 2798 ] 
14:37:46: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x24020 with Blockcount:0x2001 

14:37:46: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 9
14:37:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x26020 to EndLba:0x26028 with Increment Pattern
14:37:46: [ WrLbaNoData(0x26020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2799 ] 
14:37:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x26020 to EndLba:0x26028 with Increment Pattern 

14:37:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D50>, <py_sfcl.CommandDataDefinition object at 0x06683690>) , Command count = 2800 ] 
14:37:46: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FF90>, <py_sfcl.CommandDataDefinition object at 0x06683CC0>) , Command count = 2801 ] 
14:37:46: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:46: [DVTCommonLib]###  R1bCommandAbort called
14:37:46: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xC, False) , Command count = 2802 ] 
14:37:46: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:46: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:48: Host Frequency set to 25000 KHz
14:37:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:48: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F5A0>, 0x0, True) , Command count = 2803 ] 
14:37:48: [GO18_globalSetVolt]### Host voltage value is set.
14:37:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x06032AE0>, 0x0, False) , Command count = 2804 ] 
14:37:48: [GO18_globalSetVolt]### Host voltage value is set.
14:37:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2805 ] 
14:37:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2806 ] 
14:37:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2807 ] 
14:37:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05EE6B70>, <py_sfcl.CommandDataDefinition object at 0x0667FED0>) , Command count = 2808 ] 
14:37:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683FC0>, <py_sfcl.CommandDataDefinition object at 0x06685870>) , Command count = 2809 ] 
14:37:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:48: [ SetCardRCA(0x1, 0xD555) , Command count = 2810 ] 
14:37:48: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:48: Host Frequency set to 25000 KHz
14:37:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:48: ####CSD Registe 2.0 Values####
14:37:48: CSD_STRUCTURE                                 :0x1
14:37:48: Reserv1                                       :0x0
14:37:48: Time Access 1 TAAC                            :0xe
14:37:48: Time Access 2 NSAC*100                        :0x0
14:37:48: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:48: Card Command Classess CCC                     :0x5b5
14:37:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:48: DSR(driver stage register)  DSR_IMP           :0x0
14:37:48: Reserv2                                       :0x0
14:37:48: Device Size C_SIZE                            :0xedc8
14:37:48: Reserv3                                       :0x0
14:37:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:48: Reserv4                                       :0x0
14:37:48: Write Speed Factor R2W_FACTOR                 :0x2
14:37:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:48: FILE_FORMAT_GRP                               :0x0
14:37:48: COPY flag                                     :0x1
14:37:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:48: File_Format                                   :0x0
14:37:48: CRC                                           :0x0
14:37:48: ####CSD Registe Values####  

14:37:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:48: [GetSCRRegisterEntry] Passed
14:37:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:48: Data_Status_After Erases          : 0
14:37:48: CPRM Security Support             : No Security
14:37:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:48: Spec. Version                     : Version 3.0X
14:37:48: Extended Security Support         : Extended_Security_Not_Supported
14:37:48: Command Support                   : COMMAND_SUPPORT
14:37:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683DE0>, <py_sfcl.CommandDataDefinition object at 0x066856F0>) , Command count = 2811 ] 
14:37:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8C00>, <py_sfcl.CommandDataDefinition object at 0x06683780>) , Command count = 2812 ] 
14:37:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:48: [ SetBusWidth(0x4) , Command count = 2813 ] 
14:37:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685630>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2814 ] 
14:37:48: Protected Area Size 0x28000
14:37:48: Bus Width           2
14:37:48: Secure Mode         0
14:37:48: Speed  Class        4
14:37:48: Perf Move           0
14:37:48: Au Size             9
14:37:48: Erase Size          15
14:37:48: Erase Timeout       1
14:37:48: Erase offset        1
14:37:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2815 ] 
14:37:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:48: Host Frequency set to 100000 KHz
14:37:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:48: ####CSD Registe 2.0 Values####
14:37:48: CSD_STRUCTURE                                 :0x1
14:37:48: Reserv1                                       :0x0
14:37:48: Time Access 1 TAAC                            :0xe
14:37:48: Time Access 2 NSAC*100                        :0x0
14:37:48: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:48: Card Command Classess CCC                     :0x5b5
14:37:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:48: DSR(driver stage register)  DSR_IMP           :0x0
14:37:48: Reserv2                                       :0x0
14:37:48: Device Size C_SIZE                            :0xedc8
14:37:48: Reserv3                                       :0x0
14:37:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:48: Reserv4                                       :0x0
14:37:48: Write Speed Factor R2W_FACTOR                 :0x2
14:37:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:48: FILE_FORMAT_GRP                               :0x0
14:37:48: COPY flag                                     :0x1
14:37:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:48: File_Format                                   :0x0
14:37:48: CRC                                           :0x0
14:37:48: ####CSD Registe Values####  

14:37:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AF90>, <py_sfcl.CommandDataDefinition object at 0x066833C0>) , Command count = 2816 ] 
14:37:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683060>, <py_sfcl.CommandDataDefinition object at 0x06685840>) , Command count = 2817 ] 
14:37:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:48: [DVTCommonLib]### Erase :Erase API Called
14:37:48: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x26020 with Blockcount:0x2001
14:37:48: [ EraseLba(0x26020, 0x2001) , Command count = 2818 ] 
14:37:48: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x26020 with Blockcount:0x2001 

14:37:48: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 8
14:37:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x28020 to EndLba:0x28028 with Increment Pattern
14:37:48: [ WrLbaNoData(0x28020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2819 ] 
14:37:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x28020 to EndLba:0x28028 with Increment Pattern 

14:37:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8990>, <py_sfcl.CommandDataDefinition object at 0x06685DB0>) , Command count = 2820 ] 
14:37:48: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683750>, <py_sfcl.CommandDataDefinition object at 0x06685A50>) , Command count = 2821 ] 
14:37:48: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:48: [DVTCommonLib]###  R1bCommandAbort called
14:37:48: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xC, False) , Command count = 2822 ] 
14:37:48: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:51: Host Frequency set to 25000 KHz
14:37:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FE8C60>, 0x0, True) , Command count = 2823 ] 
14:37:51: [GO18_globalSetVolt]### Host voltage value is set.
14:37:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666390>, 0x0, False) , Command count = 2824 ] 
14:37:51: [GO18_globalSetVolt]### Host voltage value is set.
14:37:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2825 ] 
14:37:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2826 ] 
14:37:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2827 ] 
14:37:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDADB0>, <py_sfcl.CommandDataDefinition object at 0x06685960>) , Command count = 2828 ] 
14:37:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDAC90>, <py_sfcl.CommandDataDefinition object at 0x066853F0>) , Command count = 2829 ] 
14:37:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:51: [ SetCardRCA(0x1, 0xD555) , Command count = 2830 ] 
14:37:51: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:51: Host Frequency set to 25000 KHz
14:37:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:51: ####CSD Registe 2.0 Values####
14:37:51: CSD_STRUCTURE                                 :0x1
14:37:51: Reserv1                                       :0x0
14:37:51: Time Access 1 TAAC                            :0xe
14:37:51: Time Access 2 NSAC*100                        :0x0
14:37:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:51: Card Command Classess CCC                     :0x5b5
14:37:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:51: DSR(driver stage register)  DSR_IMP           :0x0
14:37:51: Reserv2                                       :0x0
14:37:51: Device Size C_SIZE                            :0xedc8
14:37:51: Reserv3                                       :0x0
14:37:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:51: Reserv4                                       :0x0
14:37:51: Write Speed Factor R2W_FACTOR                 :0x2
14:37:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:51: FILE_FORMAT_GRP                               :0x0
14:37:51: COPY flag                                     :0x1
14:37:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:51: File_Format                                   :0x0
14:37:51: CRC                                           :0x0
14:37:51: ####CSD Registe Values####  

14:37:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:51: [GetSCRRegisterEntry] Passed
14:37:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:51: Data_Status_After Erases          : 0
14:37:51: CPRM Security Support             : No Security
14:37:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:51: Spec. Version                     : Version 3.0X
14:37:51: Extended Security Support         : Extended_Security_Not_Supported
14:37:51: Command Support                   : COMMAND_SUPPORT
14:37:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FF30>, <py_sfcl.CommandDataDefinition object at 0x066854B0>) , Command count = 2831 ] 
14:37:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060327E0>, <py_sfcl.CommandDataDefinition object at 0x06666D50>) , Command count = 2832 ] 
14:37:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:51: [ SetBusWidth(0x4) , Command count = 2833 ] 
14:37:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685A20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2834 ] 
14:37:51: Protected Area Size 0x28000
14:37:51: Bus Width           2
14:37:51: Secure Mode         0
14:37:51: Speed  Class        4
14:37:51: Perf Move           0
14:37:51: Au Size             9
14:37:51: Erase Size          15
14:37:51: Erase Timeout       1
14:37:51: Erase offset        1
14:37:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2835 ] 
14:37:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:51: Host Frequency set to 100000 KHz
14:37:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:51: ####CSD Registe 2.0 Values####
14:37:51: CSD_STRUCTURE                                 :0x1
14:37:51: Reserv1                                       :0x0
14:37:51: Time Access 1 TAAC                            :0xe
14:37:51: Time Access 2 NSAC*100                        :0x0
14:37:51: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:51: Card Command Classess CCC                     :0x5b5
14:37:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:51: DSR(driver stage register)  DSR_IMP           :0x0
14:37:51: Reserv2                                       :0x0
14:37:51: Device Size C_SIZE                            :0xedc8
14:37:51: Reserv3                                       :0x0
14:37:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:51: Reserv4                                       :0x0
14:37:51: Write Speed Factor R2W_FACTOR                 :0x2
14:37:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:51: FILE_FORMAT_GRP                               :0x0
14:37:51: COPY flag                                     :0x1
14:37:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:51: File_Format                                   :0x0
14:37:51: CRC                                           :0x0
14:37:51: ####CSD Registe Values####  

14:37:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032840>, <py_sfcl.CommandDataDefinition object at 0x06685660>) , Command count = 2836 ] 
14:37:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066831B0>, <py_sfcl.CommandDataDefinition object at 0x06685720>) , Command count = 2837 ] 
14:37:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:51: [DVTCommonLib]### Erase :Erase API Called
14:37:51: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x28020 with Blockcount:0x2001
14:37:51: [ EraseLba(0x28020, 0x2001) , Command count = 2838 ] 
14:37:51: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x28020 with Blockcount:0x2001 

14:37:51: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 7
14:37:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2A020 to EndLba:0x2A028 with Increment Pattern
14:37:51: [ WrLbaNoData(0x2A020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2839 ] 
14:37:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2A020 to EndLba:0x2A028 with Increment Pattern 

14:37:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC0690>, <py_sfcl.CommandDataDefinition object at 0x06666720>) , Command count = 2840 ] 
14:37:51: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683ED0>, <py_sfcl.CommandDataDefinition object at 0x066850F0>) , Command count = 2841 ] 
14:37:51: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:51: [DVTCommonLib]###  R1bCommandAbort called
14:37:51: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xC, False) , Command count = 2842 ] 
14:37:51: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:53: Host Frequency set to 25000 KHz
14:37:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:53: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683F90>, 0x0, True) , Command count = 2843 ] 
14:37:53: [GO18_globalSetVolt]### Host voltage value is set.
14:37:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x06572A20>, 0x0, False) , Command count = 2844 ] 
14:37:53: [GO18_globalSetVolt]### Host voltage value is set.
14:37:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2845 ] 
14:37:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2846 ] 
14:37:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2847 ] 
14:37:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572060>, <py_sfcl.CommandDataDefinition object at 0x06666BA0>) , Command count = 2848 ] 
14:37:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572300>, <py_sfcl.CommandDataDefinition object at 0x066850F0>) , Command count = 2849 ] 
14:37:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:54: [ SetCardRCA(0x1, 0xD555) , Command count = 2850 ] 
14:37:54: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:54: Host Frequency set to 25000 KHz
14:37:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:54: ####CSD Registe 2.0 Values####
14:37:54: CSD_STRUCTURE                                 :0x1
14:37:54: Reserv1                                       :0x0
14:37:54: Time Access 1 TAAC                            :0xe
14:37:54: Time Access 2 NSAC*100                        :0x0
14:37:54: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:54: Card Command Classess CCC                     :0x5b5
14:37:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:54: DSR(driver stage register)  DSR_IMP           :0x0
14:37:54: Reserv2                                       :0x0
14:37:54: Device Size C_SIZE                            :0xedc8
14:37:54: Reserv3                                       :0x0
14:37:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:54: Reserv4                                       :0x0
14:37:54: Write Speed Factor R2W_FACTOR                 :0x2
14:37:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:54: FILE_FORMAT_GRP                               :0x0
14:37:54: COPY flag                                     :0x1
14:37:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:54: File_Format                                   :0x0
14:37:54: CRC                                           :0x0
14:37:54: ####CSD Registe Values####  

14:37:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:54: [GetSCRRegisterEntry] Passed
14:37:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:54: Data_Status_After Erases          : 0
14:37:54: CPRM Security Support             : No Security
14:37:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:54: Spec. Version                     : Version 3.0X
14:37:54: Extended Security Support         : Extended_Security_Not_Supported
14:37:54: Command Support                   : COMMAND_SUPPORT
14:37:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683030>, <py_sfcl.CommandDataDefinition object at 0x066666F0>) , Command count = 2851 ] 
14:37:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB210>, <py_sfcl.CommandDataDefinition object at 0x066669C0>) , Command count = 2852 ] 
14:37:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:54: [ SetBusWidth(0x4) , Command count = 2853 ] 
14:37:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066AB3C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2854 ] 
14:37:54: Protected Area Size 0x28000
14:37:54: Bus Width           2
14:37:54: Secure Mode         0
14:37:54: Speed  Class        4
14:37:54: Perf Move           0
14:37:54: Au Size             9
14:37:54: Erase Size          15
14:37:54: Erase Timeout       1
14:37:54: Erase offset        1
14:37:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2855 ] 
14:37:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:54: Host Frequency set to 100000 KHz
14:37:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:54: ####CSD Registe 2.0 Values####
14:37:54: CSD_STRUCTURE                                 :0x1
14:37:54: Reserv1                                       :0x0
14:37:54: Time Access 1 TAAC                            :0xe
14:37:54: Time Access 2 NSAC*100                        :0x0
14:37:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:54: Card Command Classess CCC                     :0x5b5
14:37:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:54: DSR(driver stage register)  DSR_IMP           :0x0
14:37:54: Reserv2                                       :0x0
14:37:54: Device Size C_SIZE                            :0xedc8
14:37:54: Reserv3                                       :0x0
14:37:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:54: Reserv4                                       :0x0
14:37:54: Write Speed Factor R2W_FACTOR                 :0x2
14:37:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:54: FILE_FORMAT_GRP                               :0x0
14:37:54: COPY flag                                     :0x1
14:37:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:54: File_Format                                   :0x0
14:37:54: CRC                                           :0x0
14:37:54: ####CSD Registe Values####  

14:37:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F030>, <py_sfcl.CommandDataDefinition object at 0x06685360>) , Command count = 2856 ] 
14:37:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06685120>, <py_sfcl.CommandDataDefinition object at 0x06685090>) , Command count = 2857 ] 
14:37:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:54: [DVTCommonLib]### Erase :Erase API Called
14:37:54: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2A020 with Blockcount:0x2001
14:37:54: [ EraseLba(0x2A020, 0x2001) , Command count = 2858 ] 
14:37:54: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2A020 with Blockcount:0x2001 

14:37:54: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 6
14:37:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2C020 to EndLba:0x2C028 with Increment Pattern
14:37:54: [ WrLbaNoData(0x2C020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2859 ] 
14:37:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2C020 to EndLba:0x2C028 with Increment Pattern 

14:37:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666630>, <py_sfcl.CommandDataDefinition object at 0x06666E10>) , Command count = 2860 ] 
14:37:54: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BAB0>, <py_sfcl.CommandDataDefinition object at 0x066856C0>) , Command count = 2861 ] 
14:37:54: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:54: [DVTCommonLib]###  R1bCommandAbort called
14:37:54: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xC, False) , Command count = 2862 ] 
14:37:54: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:54: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:56: Host Frequency set to 25000 KHz
14:37:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:56: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666C60>, 0x0, True) , Command count = 2863 ] 
14:37:56: [GO18_globalSetVolt]### Host voltage value is set.
14:37:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A2A0>, 0x0, False) , Command count = 2864 ] 
14:37:56: [GO18_globalSetVolt]### Host voltage value is set.
14:37:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2865 ] 
14:37:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2866 ] 
14:37:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2867 ] 
14:37:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BDB0>, <py_sfcl.CommandDataDefinition object at 0x06032B10>) , Command count = 2868 ] 
14:37:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB690>, <py_sfcl.CommandDataDefinition object at 0x066856C0>) , Command count = 2869 ] 
14:37:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:56: [ SetCardRCA(0x1, 0xD555) , Command count = 2870 ] 
14:37:56: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:57: Host Frequency set to 25000 KHz
14:37:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:57: ####CSD Registe 2.0 Values####
14:37:57: CSD_STRUCTURE                                 :0x1
14:37:57: Reserv1                                       :0x0
14:37:57: Time Access 1 TAAC                            :0xe
14:37:57: Time Access 2 NSAC*100                        :0x0
14:37:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:57: Card Command Classess CCC                     :0x5b5
14:37:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:57: DSR(driver stage register)  DSR_IMP           :0x0
14:37:57: Reserv2                                       :0x0
14:37:57: Device Size C_SIZE                            :0xedc8
14:37:57: Reserv3                                       :0x0
14:37:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:57: Reserv4                                       :0x0
14:37:57: Write Speed Factor R2W_FACTOR                 :0x2
14:37:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:57: FILE_FORMAT_GRP                               :0x0
14:37:57: COPY flag                                     :0x1
14:37:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:57: File_Format                                   :0x0
14:37:57: CRC                                           :0x0
14:37:57: ####CSD Registe Values####  

14:37:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:57: [GetSCRRegisterEntry] Passed
14:37:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:57: Data_Status_After Erases          : 0
14:37:57: CPRM Security Support             : No Security
14:37:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:57: Spec. Version                     : Version 3.0X
14:37:57: Extended Security Support         : Extended_Security_Not_Supported
14:37:57: Command Support                   : COMMAND_SUPPORT
14:37:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683F30>, <py_sfcl.CommandDataDefinition object at 0x066ABF90>) , Command count = 2871 ] 
14:37:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065721E0>, <py_sfcl.CommandDataDefinition object at 0x066AB1E0>) , Command count = 2872 ] 
14:37:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:57: [ SetBusWidth(0x4) , Command count = 2873 ] 
14:37:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06666540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2874 ] 
14:37:57: Protected Area Size 0x28000
14:37:57: Bus Width           2
14:37:57: Secure Mode         0
14:37:57: Speed  Class        4
14:37:57: Perf Move           0
14:37:57: Au Size             9
14:37:57: Erase Size          15
14:37:57: Erase Timeout       1
14:37:57: Erase offset        1
14:37:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2875 ] 
14:37:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:57: Host Frequency set to 100000 KHz
14:37:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:57: ####CSD Registe 2.0 Values####
14:37:57: CSD_STRUCTURE                                 :0x1
14:37:57: Reserv1                                       :0x0
14:37:57: Time Access 1 TAAC                            :0xe
14:37:57: Time Access 2 NSAC*100                        :0x0
14:37:57: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:57: Card Command Classess CCC                     :0x5b5
14:37:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:57: DSR(driver stage register)  DSR_IMP           :0x0
14:37:57: Reserv2                                       :0x0
14:37:57: Device Size C_SIZE                            :0xedc8
14:37:57: Reserv3                                       :0x0
14:37:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:57: Reserv4                                       :0x0
14:37:57: Write Speed Factor R2W_FACTOR                 :0x2
14:37:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:57: FILE_FORMAT_GRP                               :0x0
14:37:57: COPY flag                                     :0x1
14:37:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:57: File_Format                                   :0x0
14:37:57: CRC                                           :0x0
14:37:57: ####CSD Registe Values####  

14:37:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6F30>, <py_sfcl.CommandDataDefinition object at 0x06666E70>) , Command count = 2876 ] 
14:37:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666DE0>, <py_sfcl.CommandDataDefinition object at 0x06685B70>) , Command count = 2877 ] 
14:37:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:57: [DVTCommonLib]### Erase :Erase API Called
14:37:57: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2C020 with Blockcount:0x2001
14:37:57: [ EraseLba(0x2C020, 0x2001) , Command count = 2878 ] 
14:37:57: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2C020 with Blockcount:0x2001 

14:37:57: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 5
14:37:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2E020 to EndLba:0x2E028 with Increment Pattern
14:37:57: [ WrLbaNoData(0x2E020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2879 ] 
14:37:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2E020 to EndLba:0x2E028 with Increment Pattern 

14:37:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB600>, <py_sfcl.CommandDataDefinition object at 0x066AB300>) , Command count = 2880 ] 
14:37:57: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:37:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032B70>, <py_sfcl.CommandDataDefinition object at 0x06685B70>) , Command count = 2881 ] 
14:37:57: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:37:57: [DVTCommonLib]###  R1bCommandAbort called
14:37:57: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xF, False) , Command count = 2882 ] 
14:37:57: [DVTCommonLib]###  R1bCommandAbort Completed 

14:37:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:59: Host Frequency set to 25000 KHz
14:37:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666B10>, 0x0, True) , Command count = 2883 ] 
14:37:59: [GO18_globalSetVolt]### Host voltage value is set.
14:37:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A570>, 0x0, False) , Command count = 2884 ] 
14:37:59: [GO18_globalSetVolt]### Host voltage value is set.
14:37:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2885 ] 
14:37:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2886 ] 
14:37:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2887 ] 
14:37:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE40>, <py_sfcl.CommandDataDefinition object at 0x06666990>) , Command count = 2888 ] 
14:37:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB9F0>, <py_sfcl.CommandDataDefinition object at 0x06685B70>) , Command count = 2889 ] 
14:37:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:59: [ SetCardRCA(0x1, 0xD555) , Command count = 2890 ] 
14:37:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:59: Host Frequency set to 25000 KHz
14:37:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:59: ####CSD Registe 2.0 Values####
14:37:59: CSD_STRUCTURE                                 :0x1
14:37:59: Reserv1                                       :0x0
14:37:59: Time Access 1 TAAC                            :0xe
14:37:59: Time Access 2 NSAC*100                        :0x0
14:37:59: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:59: Card Command Classess CCC                     :0x5b5
14:37:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:59: DSR(driver stage register)  DSR_IMP           :0x0
14:37:59: Reserv2                                       :0x0
14:37:59: Device Size C_SIZE                            :0xedc8
14:37:59: Reserv3                                       :0x0
14:37:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:59: Reserv4                                       :0x0
14:37:59: Write Speed Factor R2W_FACTOR                 :0x2
14:37:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:59: FILE_FORMAT_GRP                               :0x0
14:37:59: COPY flag                                     :0x1
14:37:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:59: File_Format                                   :0x0
14:37:59: CRC                                           :0x0
14:37:59: ####CSD Registe Values####  

14:37:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:59: [GetSCRRegisterEntry] Passed
14:37:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:59: Data_Status_After Erases          : 0
14:37:59: CPRM Security Support             : No Security
14:37:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:59: Spec. Version                     : Version 3.0X
14:37:59: Extended Security Support         : Extended_Security_Not_Supported
14:37:59: Command Support                   : COMMAND_SUPPORT
14:37:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032E10>, <py_sfcl.CommandDataDefinition object at 0x0667AA80>) , Command count = 2891 ] 
14:37:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABED0>, <py_sfcl.CommandDataDefinition object at 0x06666870>) , Command count = 2892 ] 
14:37:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:59: [ SetBusWidth(0x4) , Command count = 2893 ] 
14:37:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A7B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2894 ] 
14:37:59: Protected Area Size 0x28000
14:37:59: Bus Width           2
14:37:59: Secure Mode         0
14:37:59: Speed  Class        4
14:37:59: Perf Move           0
14:37:59: Au Size             9
14:37:59: Erase Size          15
14:37:59: Erase Timeout       1
14:37:59: Erase offset        1
14:37:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2895 ] 
14:37:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:59: Host Frequency set to 100000 KHz
14:37:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:00: ####CSD Registe 2.0 Values####
14:38:00: CSD_STRUCTURE                                 :0x1
14:38:00: Reserv1                                       :0x0
14:38:00: Time Access 1 TAAC                            :0xe
14:38:00: Time Access 2 NSAC*100                        :0x0
14:38:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:00: Card Command Classess CCC                     :0x5b5
14:38:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:00: DSR(driver stage register)  DSR_IMP           :0x0
14:38:00: Reserv2                                       :0x0
14:38:00: Device Size C_SIZE                            :0xedc8
14:38:00: Reserv3                                       :0x0
14:38:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:00: Reserv4                                       :0x0
14:38:00: Write Speed Factor R2W_FACTOR                 :0x2
14:38:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:00: FILE_FORMAT_GRP                               :0x0
14:38:00: COPY flag                                     :0x1
14:38:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:00: File_Format                                   :0x0
14:38:00: CRC                                           :0x0
14:38:00: ####CSD Registe Values####  

14:38:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666960>, <py_sfcl.CommandDataDefinition object at 0x0667A720>) , Command count = 2896 ] 
14:38:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666D80>, <py_sfcl.CommandDataDefinition object at 0x06685180>) , Command count = 2897 ] 
14:38:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:00: [DVTCommonLib]### Erase :Erase API Called
14:38:00: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2E020 with Blockcount:0x2001
14:38:00: [ EraseLba(0x2E020, 0x2001) , Command count = 2898 ] 
14:38:00: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2E020 with Blockcount:0x2001 

14:38:00: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 4
14:38:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x30020 to EndLba:0x30028 with Increment Pattern
14:38:00: [ WrLbaNoData(0x30020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2899 ] 
14:38:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x30020 to EndLba:0x30028 with Increment Pattern 

14:38:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A480>, <py_sfcl.CommandDataDefinition object at 0x0667A840>) , Command count = 2900 ] 
14:38:00: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF60>, <py_sfcl.CommandDataDefinition object at 0x0667ABA0>) , Command count = 2901 ] 
14:38:00: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:00: [DVTCommonLib]###  R1bCommandAbort called
14:38:00: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xC, False) , Command count = 2902 ] 
14:38:00: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:02: Host Frequency set to 25000 KHz
14:38:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:02: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABF30>, 0x0, True) , Command count = 2903 ] 
14:38:02: [GO18_globalSetVolt]### Host voltage value is set.
14:38:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A990>, 0x0, False) , Command count = 2904 ] 
14:38:02: [GO18_globalSetVolt]### Host voltage value is set.
14:38:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2905 ] 
14:38:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2906 ] 
14:38:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2907 ] 
14:38:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A6C0>, <py_sfcl.CommandDataDefinition object at 0x0667AAE0>) , Command count = 2908 ] 
14:38:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A900>, <py_sfcl.CommandDataDefinition object at 0x0667A030>) , Command count = 2909 ] 
14:38:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:02: [ SetCardRCA(0x1, 0xD555) , Command count = 2910 ] 
14:38:02: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:02: Host Frequency set to 25000 KHz
14:38:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:02: ####CSD Registe 2.0 Values####
14:38:02: CSD_STRUCTURE                                 :0x1
14:38:02: Reserv1                                       :0x0
14:38:02: Time Access 1 TAAC                            :0xe
14:38:02: Time Access 2 NSAC*100                        :0x0
14:38:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:02: Card Command Classess CCC                     :0x5b5
14:38:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:02: DSR(driver stage register)  DSR_IMP           :0x0
14:38:02: Reserv2                                       :0x0
14:38:02: Device Size C_SIZE                            :0xedc8
14:38:02: Reserv3                                       :0x0
14:38:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:02: Reserv4                                       :0x0
14:38:02: Write Speed Factor R2W_FACTOR                 :0x2
14:38:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:02: FILE_FORMAT_GRP                               :0x0
14:38:02: COPY flag                                     :0x1
14:38:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:02: File_Format                                   :0x0
14:38:02: CRC                                           :0x0
14:38:02: ####CSD Registe Values####  

14:38:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:02: [GetSCRRegisterEntry] Passed
14:38:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:02: Data_Status_After Erases          : 0
14:38:02: CPRM Security Support             : No Security
14:38:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:02: Spec. Version                     : Version 3.0X
14:38:02: Extended Security Support         : Extended_Security_Not_Supported
14:38:02: Command Support                   : COMMAND_SUPPORT
14:38:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666660>, <py_sfcl.CommandDataDefinition object at 0x0667AE70>) , Command count = 2911 ] 
14:38:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A240>, <py_sfcl.CommandDataDefinition object at 0x0667A690>) , Command count = 2912 ] 
14:38:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:02: [ SetBusWidth(0x4) , Command count = 2913 ] 
14:38:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2914 ] 
14:38:02: Protected Area Size 0x28000
14:38:02: Bus Width           2
14:38:02: Secure Mode         0
14:38:02: Speed  Class        4
14:38:02: Perf Move           0
14:38:02: Au Size             9
14:38:02: Erase Size          15
14:38:02: Erase Timeout       1
14:38:02: Erase offset        1
14:38:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2915 ] 
14:38:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:02: Host Frequency set to 100000 KHz
14:38:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:02: ####CSD Registe 2.0 Values####
14:38:02: CSD_STRUCTURE                                 :0x1
14:38:02: Reserv1                                       :0x0
14:38:02: Time Access 1 TAAC                            :0xe
14:38:02: Time Access 2 NSAC*100                        :0x0
14:38:02: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:02: Card Command Classess CCC                     :0x5b5
14:38:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:02: DSR(driver stage register)  DSR_IMP           :0x0
14:38:02: Reserv2                                       :0x0
14:38:02: Device Size C_SIZE                            :0xedc8
14:38:02: Reserv3                                       :0x0
14:38:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:02: Reserv4                                       :0x0
14:38:02: Write Speed Factor R2W_FACTOR                 :0x2
14:38:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:02: FILE_FORMAT_GRP                               :0x0
14:38:02: COPY flag                                     :0x1
14:38:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:02: File_Format                                   :0x0
14:38:02: CRC                                           :0x0
14:38:02: ####CSD Registe Values####  

14:38:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FDB0>, <py_sfcl.CommandDataDefinition object at 0x0667A7B0>) , Command count = 2916 ] 
14:38:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066663F0>, <py_sfcl.CommandDataDefinition object at 0x06685780>) , Command count = 2917 ] 
14:38:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:02: [DVTCommonLib]### Erase :Erase API Called
14:38:02: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x30020 with Blockcount:0x2001
14:38:02: [ EraseLba(0x30020, 0x2001) , Command count = 2918 ] 
14:38:02: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x30020 with Blockcount:0x2001 

14:38:02: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 3
14:38:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x32020 to EndLba:0x32028 with Increment Pattern
14:38:02: [ WrLbaNoData(0x32020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2919 ] 
14:38:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x32020 to EndLba:0x32028 with Increment Pattern 

14:38:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A0F0>, <py_sfcl.CommandDataDefinition object at 0x0667AF60>) , Command count = 2920 ] 
14:38:02: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB7B0>, <py_sfcl.CommandDataDefinition object at 0x06685780>) , Command count = 2921 ] 
14:38:02: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:02: [DVTCommonLib]###  R1bCommandAbort called
14:38:02: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2E, False) , Command count = 2922 ] 
14:38:02: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:02: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:05: Host Frequency set to 25000 KHz
14:38:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A6F0>, 0x0, True) , Command count = 2923 ] 
14:38:05: [GO18_globalSetVolt]### Host voltage value is set.
14:38:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CA80>, 0x0, False) , Command count = 2924 ] 
14:38:05: [GO18_globalSetVolt]### Host voltage value is set.
14:38:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2925 ] 
14:38:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2926 ] 
14:38:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2927 ] 
14:38:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB450>, <py_sfcl.CommandDataDefinition object at 0x0667C2D0>) , Command count = 2928 ] 
14:38:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C330>, <py_sfcl.CommandDataDefinition object at 0x0667AC00>) , Command count = 2929 ] 
14:38:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:05: [ SetCardRCA(0x1, 0xD555) , Command count = 2930 ] 
14:38:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:05: Host Frequency set to 25000 KHz
14:38:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:05: ####CSD Registe 2.0 Values####
14:38:05: CSD_STRUCTURE                                 :0x1
14:38:05: Reserv1                                       :0x0
14:38:05: Time Access 1 TAAC                            :0xe
14:38:05: Time Access 2 NSAC*100                        :0x0
14:38:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:05: Card Command Classess CCC                     :0x5b5
14:38:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:05: DSR(driver stage register)  DSR_IMP           :0x0
14:38:05: Reserv2                                       :0x0
14:38:05: Device Size C_SIZE                            :0xedc8
14:38:05: Reserv3                                       :0x0
14:38:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:05: Reserv4                                       :0x0
14:38:05: Write Speed Factor R2W_FACTOR                 :0x2
14:38:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:05: FILE_FORMAT_GRP                               :0x0
14:38:05: COPY flag                                     :0x1
14:38:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:05: File_Format                                   :0x0
14:38:05: CRC                                           :0x0
14:38:05: ####CSD Registe Values####  

14:38:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:05: [GetSCRRegisterEntry] Passed
14:38:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:05: Data_Status_After Erases          : 0
14:38:05: CPRM Security Support             : No Security
14:38:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:05: Spec. Version                     : Version 3.0X
14:38:05: Extended Security Support         : Extended_Security_Not_Supported
14:38:05: Command Support                   : COMMAND_SUPPORT
14:38:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB5D0>, <py_sfcl.CommandDataDefinition object at 0x0667A870>) , Command count = 2931 ] 
14:38:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C0F0>, <py_sfcl.CommandDataDefinition object at 0x0667C1E0>) , Command count = 2932 ] 
14:38:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:05: [ SetBusWidth(0x4) , Command count = 2933 ] 
14:38:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667AA20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2934 ] 
14:38:05: Protected Area Size 0x28000
14:38:05: Bus Width           2
14:38:05: Secure Mode         0
14:38:05: Speed  Class        4
14:38:05: Perf Move           0
14:38:05: Au Size             9
14:38:05: Erase Size          15
14:38:05: Erase Timeout       1
14:38:05: Erase offset        1
14:38:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2935 ] 
14:38:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:05: Host Frequency set to 100000 KHz
14:38:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:05: ####CSD Registe 2.0 Values####
14:38:05: CSD_STRUCTURE                                 :0x1
14:38:05: Reserv1                                       :0x0
14:38:05: Time Access 1 TAAC                            :0xe
14:38:05: Time Access 2 NSAC*100                        :0x0
14:38:05: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:05: Card Command Classess CCC                     :0x5b5
14:38:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:05: DSR(driver stage register)  DSR_IMP           :0x0
14:38:05: Reserv2                                       :0x0
14:38:05: Device Size C_SIZE                            :0xedc8
14:38:05: Reserv3                                       :0x0
14:38:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:05: Reserv4                                       :0x0
14:38:05: Write Speed Factor R2W_FACTOR                 :0x2
14:38:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:05: FILE_FORMAT_GRP                               :0x0
14:38:05: COPY flag                                     :0x1
14:38:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:05: File_Format                                   :0x0
14:38:05: CRC                                           :0x0
14:38:05: ####CSD Registe Values####  

14:38:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C030>, <py_sfcl.CommandDataDefinition object at 0x0667A750>) , Command count = 2936 ] 
14:38:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF00>, <py_sfcl.CommandDataDefinition object at 0x06685270>) , Command count = 2937 ] 
14:38:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:05: [DVTCommonLib]### Erase :Erase API Called
14:38:05: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x32020 with Blockcount:0x2001
14:38:05: [ EraseLba(0x32020, 0x2001) , Command count = 2938 ] 
14:38:05: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x32020 with Blockcount:0x2001 

14:38:05: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 2
14:38:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x34020 to EndLba:0x34028 with Increment Pattern
14:38:05: [ WrLbaNoData(0x34020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2939 ] 
14:38:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x34020 to EndLba:0x34028 with Increment Pattern 

14:38:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AB70>, <py_sfcl.CommandDataDefinition object at 0x0667C3C0>) , Command count = 2940 ] 
14:38:05: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C7B0>, <py_sfcl.CommandDataDefinition object at 0x0667C780>) , Command count = 2941 ] 
14:38:05: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:05: [DVTCommonLib]###  R1bCommandAbort called
14:38:05: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1F, False) , Command count = 2942 ] 
14:38:05: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:05: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:07: Host Frequency set to 25000 KHz
14:38:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:07: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666090>, 0x0, True) , Command count = 2943 ] 
14:38:07: [GO18_globalSetVolt]### Host voltage value is set.
14:38:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F180>, 0x0, False) , Command count = 2944 ] 
14:38:07: [GO18_globalSetVolt]### Host voltage value is set.
14:38:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2945 ] 
14:38:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2946 ] 
14:38:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:08: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2947 ] 
14:38:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C510>, <py_sfcl.CommandDataDefinition object at 0x0667C1B0>) , Command count = 2948 ] 
14:38:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C240>, <py_sfcl.CommandDataDefinition object at 0x0667AFC0>) , Command count = 2949 ] 
14:38:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:08: [ SetCardRCA(0x1, 0xD555) , Command count = 2950 ] 
14:38:08: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:08: Host Frequency set to 25000 KHz
14:38:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:08: ####CSD Registe 2.0 Values####
14:38:08: CSD_STRUCTURE                                 :0x1
14:38:08: Reserv1                                       :0x0
14:38:08: Time Access 1 TAAC                            :0xe
14:38:08: Time Access 2 NSAC*100                        :0x0
14:38:08: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:08: Card Command Classess CCC                     :0x5b5
14:38:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:08: DSR(driver stage register)  DSR_IMP           :0x0
14:38:08: Reserv2                                       :0x0
14:38:08: Device Size C_SIZE                            :0xedc8
14:38:08: Reserv3                                       :0x0
14:38:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:08: Reserv4                                       :0x0
14:38:08: Write Speed Factor R2W_FACTOR                 :0x2
14:38:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:08: FILE_FORMAT_GRP                               :0x0
14:38:08: COPY flag                                     :0x1
14:38:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:08: File_Format                                   :0x0
14:38:08: CRC                                           :0x0
14:38:08: ####CSD Registe Values####  

14:38:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:08: [GetSCRRegisterEntry] Passed
14:38:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:08: Data_Status_After Erases          : 0
14:38:08: CPRM Security Support             : No Security
14:38:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:08: Spec. Version                     : Version 3.0X
14:38:08: Extended Security Support         : Extended_Security_Not_Supported
14:38:08: Command Support                   : COMMAND_SUPPORT
14:38:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C150>, <py_sfcl.CommandDataDefinition object at 0x0667C090>) , Command count = 2951 ] 
14:38:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C480>, <py_sfcl.CommandDataDefinition object at 0x0667A660>) , Command count = 2952 ] 
14:38:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:08: [ SetBusWidth(0x4) , Command count = 2953 ] 
14:38:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2954 ] 
14:38:08: Protected Area Size 0x28000
14:38:08: Bus Width           2
14:38:08: Secure Mode         0
14:38:08: Speed  Class        4
14:38:08: Perf Move           0
14:38:08: Au Size             9
14:38:08: Erase Size          15
14:38:08: Erase Timeout       1
14:38:08: Erase offset        1
14:38:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2955 ] 
14:38:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:08: Host Frequency set to 100000 KHz
14:38:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:08: ####CSD Registe 2.0 Values####
14:38:08: CSD_STRUCTURE                                 :0x1
14:38:08: Reserv1                                       :0x0
14:38:08: Time Access 1 TAAC                            :0xe
14:38:08: Time Access 2 NSAC*100                        :0x0
14:38:08: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:08: Card Command Classess CCC                     :0x5b5
14:38:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:08: DSR(driver stage register)  DSR_IMP           :0x0
14:38:08: Reserv2                                       :0x0
14:38:08: Device Size C_SIZE                            :0xedc8
14:38:08: Reserv3                                       :0x0
14:38:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:08: Reserv4                                       :0x0
14:38:08: Write Speed Factor R2W_FACTOR                 :0x2
14:38:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:08: FILE_FORMAT_GRP                               :0x0
14:38:08: COPY flag                                     :0x1
14:38:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:08: File_Format                                   :0x0
14:38:08: CRC                                           :0x0
14:38:08: ####CSD Registe Values####  

14:38:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C9C0>, <py_sfcl.CommandDataDefinition object at 0x0667CF30>) , Command count = 2956 ] 
14:38:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB660>, <py_sfcl.CommandDataDefinition object at 0x066855D0>) , Command count = 2957 ] 
14:38:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:08: [DVTCommonLib]### Erase :Erase API Called
14:38:08: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x34020 with Blockcount:0x2001
14:38:08: [ EraseLba(0x34020, 0x2001) , Command count = 2958 ] 
14:38:08: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x34020 with Blockcount:0x2001 

14:38:08: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 1
14:38:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x36020 to EndLba:0x36028 with Increment Pattern
14:38:08: [ WrLbaNoData(0x36020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2959 ] 
14:38:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x36020 to EndLba:0x36028 with Increment Pattern 

14:38:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A3C0>, <py_sfcl.CommandDataDefinition object at 0x0667C990>) , Command count = 2960 ] 
14:38:08: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C840>, <py_sfcl.CommandDataDefinition object at 0x0667C630>) , Command count = 2961 ] 
14:38:08: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:08: [DVTCommonLib]###  R1bCommandAbort called
14:38:08: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x27, False) , Command count = 2962 ] 
14:38:08: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:10: Host Frequency set to 25000 KHz
14:38:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A930>, 0x0, True) , Command count = 2963 ] 
14:38:10: [GO18_globalSetVolt]### Host voltage value is set.
14:38:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F9C0>, 0x0, False) , Command count = 2964 ] 
14:38:10: [GO18_globalSetVolt]### Host voltage value is set.
14:38:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2965 ] 
14:38:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2966 ] 
14:38:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2967 ] 
14:38:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F780>, <py_sfcl.CommandDataDefinition object at 0x0667C8A0>) , Command count = 2968 ] 
14:38:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F7E0>, <py_sfcl.CommandDataDefinition object at 0x0667C900>) , Command count = 2969 ] 
14:38:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:10: [ SetCardRCA(0x1, 0xD555) , Command count = 2970 ] 
14:38:10: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:11: Host Frequency set to 25000 KHz
14:38:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:11: ####CSD Registe 2.0 Values####
14:38:11: CSD_STRUCTURE                                 :0x1
14:38:11: Reserv1                                       :0x0
14:38:11: Time Access 1 TAAC                            :0xe
14:38:11: Time Access 2 NSAC*100                        :0x0
14:38:11: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:11: Card Command Classess CCC                     :0x5b5
14:38:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:11: DSR(driver stage register)  DSR_IMP           :0x0
14:38:11: Reserv2                                       :0x0
14:38:11: Device Size C_SIZE                            :0xedc8
14:38:11: Reserv3                                       :0x0
14:38:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:11: Reserv4                                       :0x0
14:38:11: Write Speed Factor R2W_FACTOR                 :0x2
14:38:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:11: FILE_FORMAT_GRP                               :0x0
14:38:11: COPY flag                                     :0x1
14:38:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:11: File_Format                                   :0x0
14:38:11: CRC                                           :0x0
14:38:11: ####CSD Registe Values####  

14:38:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:11: [GetSCRRegisterEntry] Passed
14:38:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:11: Data_Status_After Erases          : 0
14:38:11: CPRM Security Support             : No Security
14:38:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:11: Spec. Version                     : Version 3.0X
14:38:11: Extended Security Support         : Extended_Security_Not_Supported
14:38:11: Command Support                   : COMMAND_SUPPORT
14:38:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CB10>, <py_sfcl.CommandDataDefinition object at 0x0667C6F0>) , Command count = 2971 ] 
14:38:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F420>, <py_sfcl.CommandDataDefinition object at 0x0667FB10>) , Command count = 2972 ] 
14:38:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:11: [ SetBusWidth(0x4) , Command count = 2973 ] 
14:38:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667CC00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2974 ] 
14:38:11: Protected Area Size 0x28000
14:38:11: Bus Width           2
14:38:11: Secure Mode         0
14:38:11: Speed  Class        4
14:38:11: Perf Move           0
14:38:11: Au Size             9
14:38:11: Erase Size          15
14:38:11: Erase Timeout       1
14:38:11: Erase offset        1
14:38:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2975 ] 
14:38:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:11: Host Frequency set to 100000 KHz
14:38:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:11: ####CSD Registe 2.0 Values####
14:38:11: CSD_STRUCTURE                                 :0x1
14:38:11: Reserv1                                       :0x0
14:38:11: Time Access 1 TAAC                            :0xe
14:38:11: Time Access 2 NSAC*100                        :0x0
14:38:11: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:11: Card Command Classess CCC                     :0x5b5
14:38:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:11: DSR(driver stage register)  DSR_IMP           :0x0
14:38:11: Reserv2                                       :0x0
14:38:11: Device Size C_SIZE                            :0xedc8
14:38:11: Reserv3                                       :0x0
14:38:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:11: Reserv4                                       :0x0
14:38:11: Write Speed Factor R2W_FACTOR                 :0x2
14:38:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:11: FILE_FORMAT_GRP                               :0x0
14:38:11: COPY flag                                     :0x1
14:38:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:11: File_Format                                   :0x0
14:38:11: CRC                                           :0x0
14:38:11: ####CSD Registe Values####  

14:38:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F060>, <py_sfcl.CommandDataDefinition object at 0x0667C960>) , Command count = 2976 ] 
14:38:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AED0>, <py_sfcl.CommandDataDefinition object at 0x06685450>) , Command count = 2977 ] 
14:38:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:11: [DVTCommonLib]### Erase :Erase API Called
14:38:11: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x36020 with Blockcount:0x2001
14:38:11: [ EraseLba(0x36020, 0x2001) , Command count = 2978 ] 
14:38:11: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x36020 with Blockcount:0x2001 

14:38:11: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 0
14:38:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x38020 to EndLba:0x38028 with Increment Pattern
14:38:11: [ WrLbaNoData(0x38020, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2979 ] 
14:38:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x38020 to EndLba:0x38028 with Increment Pattern 

14:38:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F6C0>, <py_sfcl.CommandDataDefinition object at 0x0667F270>) , Command count = 2980 ] 
14:38:11: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ACC0>, <py_sfcl.CommandDataDefinition object at 0x0667C810>) , Command count = 2981 ] 
14:38:11: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:11: [DVTCommonLib]###  R1bCommandAbort called
14:38:11: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x7, False) , Command count = 2982 ] 
14:38:11: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:13: Host Frequency set to 25000 KHz
14:38:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FC00>, 0x0, True) , Command count = 2983 ] 
14:38:13: [GO18_globalSetVolt]### Host voltage value is set.
14:38:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FC90>, 0x0, False) , Command count = 2984 ] 
14:38:13: [GO18_globalSetVolt]### Host voltage value is set.
14:38:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2985 ] 
14:38:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2986 ] 
14:38:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2987 ] 
14:38:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F600>, <py_sfcl.CommandDataDefinition object at 0x0667F300>) , Command count = 2988 ] 
14:38:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FE40>, <py_sfcl.CommandDataDefinition object at 0x0667C810>) , Command count = 2989 ] 
14:38:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:13: [ SetCardRCA(0x1, 0xD555) , Command count = 2990 ] 
14:38:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:13: Host Frequency set to 25000 KHz
14:38:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:13: ####CSD Registe 2.0 Values####
14:38:13: CSD_STRUCTURE                                 :0x1
14:38:13: Reserv1                                       :0x0
14:38:13: Time Access 1 TAAC                            :0xe
14:38:13: Time Access 2 NSAC*100                        :0x0
14:38:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:13: Card Command Classess CCC                     :0x5b5
14:38:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:13: DSR(driver stage register)  DSR_IMP           :0x0
14:38:13: Reserv2                                       :0x0
14:38:13: Device Size C_SIZE                            :0xedc8
14:38:13: Reserv3                                       :0x0
14:38:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:13: Reserv4                                       :0x0
14:38:13: Write Speed Factor R2W_FACTOR                 :0x2
14:38:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:13: FILE_FORMAT_GRP                               :0x0
14:38:13: COPY flag                                     :0x1
14:38:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:13: File_Format                                   :0x0
14:38:13: CRC                                           :0x0
14:38:13: ####CSD Registe Values####  

14:38:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:13: [GetSCRRegisterEntry] Passed
14:38:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:13: Data_Status_After Erases          : 0
14:38:13: CPRM Security Support             : No Security
14:38:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:13: Spec. Version                     : Version 3.0X
14:38:13: Extended Security Support         : Extended_Security_Not_Supported
14:38:13: Command Support                   : COMMAND_SUPPORT
14:38:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ABD0>, <py_sfcl.CommandDataDefinition object at 0x0667F720>) , Command count = 2991 ] 
14:38:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F840>, <py_sfcl.CommandDataDefinition object at 0x0667C930>) , Command count = 2992 ] 
14:38:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:13: [ SetBusWidth(0x4) , Command count = 2993 ] 
14:38:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667FE10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2994 ] 
14:38:13: Protected Area Size 0x28000
14:38:13: Bus Width           2
14:38:13: Secure Mode         0
14:38:13: Speed  Class        4
14:38:13: Perf Move           0
14:38:13: Au Size             9
14:38:13: Erase Size          15
14:38:13: Erase Timeout       1
14:38:13: Erase offset        1
14:38:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2995 ] 
14:38:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:13: Host Frequency set to 100000 KHz
14:38:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:13: ####CSD Registe 2.0 Values####
14:38:13: CSD_STRUCTURE                                 :0x1
14:38:13: Reserv1                                       :0x0
14:38:13: Time Access 1 TAAC                            :0xe
14:38:13: Time Access 2 NSAC*100                        :0x0
14:38:13: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:13: Card Command Classess CCC                     :0x5b5
14:38:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:13: DSR(driver stage register)  DSR_IMP           :0x0
14:38:13: Reserv2                                       :0x0
14:38:13: Device Size C_SIZE                            :0xedc8
14:38:13: Reserv3                                       :0x0
14:38:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:13: Reserv4                                       :0x0
14:38:13: Write Speed Factor R2W_FACTOR                 :0x2
14:38:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:13: FILE_FORMAT_GRP                               :0x0
14:38:13: COPY flag                                     :0x1
14:38:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:13: File_Format                                   :0x0
14:38:13: CRC                                           :0x0
14:38:13: ####CSD Registe Values####  

14:38:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AEA0>, <py_sfcl.CommandDataDefinition object at 0x0667F900>) , Command count = 2996 ] 
14:38:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CE10>, <py_sfcl.CommandDataDefinition object at 0x06685300>) , Command count = 2997 ] 
14:38:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:13: [DVTCommonLib]### Erase :Erase API Called
14:38:14: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x38020 with Blockcount:0x2001
14:38:14: [ EraseLba(0x38020, 0x2001) , Command count = 2998 ] 
14:38:14: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x38020 with Blockcount:0x2001 

14:38:14: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Outer loop Count 1018
14:38:14: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 28
14:38:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x28 to EndLba:0x30 with Increment Pattern
14:38:14: [ WrLbaNoData(0x28, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 2999 ] 
14:38:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x28 to EndLba:0x30 with Increment Pattern 

14:38:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C4B0>, <py_sfcl.CommandDataDefinition object at 0x0667F690>) , Command count = 3000 ] 
14:38:14: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F870>, <py_sfcl.CommandDataDefinition object at 0x0667F1E0>) , Command count = 3001 ] 
14:38:14: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:14: [DVTCommonLib]###  R1bCommandAbort called
14:38:14: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x24, False) , Command count = 3002 ] 
14:38:14: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:14: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:16: Host Frequency set to 25000 KHz
14:38:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:16: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A9F0>, 0x0, True) , Command count = 3003 ] 
14:38:16: [GO18_globalSetVolt]### Host voltage value is set.
14:38:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683900>, 0x0, False) , Command count = 3004 ] 
14:38:16: [GO18_globalSetVolt]### Host voltage value is set.
14:38:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3005 ] 
14:38:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3006 ] 
14:38:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3007 ] 
14:38:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FA80>, <py_sfcl.CommandDataDefinition object at 0x0667F510>) , Command count = 3008 ] 
14:38:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683180>, <py_sfcl.CommandDataDefinition object at 0x0667F930>) , Command count = 3009 ] 
14:38:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:16: [ SetCardRCA(0x1, 0xD555) , Command count = 3010 ] 
14:38:16: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:16: Host Frequency set to 25000 KHz
14:38:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:16: ####CSD Registe 2.0 Values####
14:38:16: CSD_STRUCTURE                                 :0x1
14:38:16: Reserv1                                       :0x0
14:38:16: Time Access 1 TAAC                            :0xe
14:38:16: Time Access 2 NSAC*100                        :0x0
14:38:16: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:16: Card Command Classess CCC                     :0x5b5
14:38:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:16: DSR(driver stage register)  DSR_IMP           :0x0
14:38:16: Reserv2                                       :0x0
14:38:16: Device Size C_SIZE                            :0xedc8
14:38:16: Reserv3                                       :0x0
14:38:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:16: Reserv4                                       :0x0
14:38:16: Write Speed Factor R2W_FACTOR                 :0x2
14:38:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:16: FILE_FORMAT_GRP                               :0x0
14:38:16: COPY flag                                     :0x1
14:38:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:16: File_Format                                   :0x0
14:38:16: CRC                                           :0x0
14:38:16: ####CSD Registe Values####  

14:38:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:16: [GetSCRRegisterEntry] Passed
14:38:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:16: Data_Status_After Erases          : 0
14:38:16: CPRM Security Support             : No Security
14:38:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:16: Spec. Version                     : Version 3.0X
14:38:16: Extended Security Support         : Extended_Security_Not_Supported
14:38:16: Command Support                   : COMMAND_SUPPORT
14:38:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AE40>, <py_sfcl.CommandDataDefinition object at 0x0667FB40>) , Command count = 3011 ] 
14:38:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683360>, <py_sfcl.CommandDataDefinition object at 0x06683A50>) , Command count = 3012 ] 
14:38:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:16: [ SetBusWidth(0x4) , Command count = 3013 ] 
14:38:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667FF60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3014 ] 
14:38:16: Protected Area Size 0x28000
14:38:16: Bus Width           2
14:38:16: Secure Mode         0
14:38:16: Speed  Class        4
14:38:16: Perf Move           0
14:38:16: Au Size             9
14:38:16: Erase Size          15
14:38:16: Erase Timeout       1
14:38:16: Erase offset        1
14:38:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3015 ] 
14:38:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:16: Host Frequency set to 100000 KHz
14:38:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:16: ####CSD Registe 2.0 Values####
14:38:16: CSD_STRUCTURE                                 :0x1
14:38:16: Reserv1                                       :0x0
14:38:16: Time Access 1 TAAC                            :0xe
14:38:16: Time Access 2 NSAC*100                        :0x0
14:38:16: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:16: Card Command Classess CCC                     :0x5b5
14:38:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:16: DSR(driver stage register)  DSR_IMP           :0x0
14:38:16: Reserv2                                       :0x0
14:38:16: Device Size C_SIZE                            :0xedc8
14:38:16: Reserv3                                       :0x0
14:38:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:16: Reserv4                                       :0x0
14:38:16: Write Speed Factor R2W_FACTOR                 :0x2
14:38:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:16: FILE_FORMAT_GRP                               :0x0
14:38:16: COPY flag                                     :0x1
14:38:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:16: File_Format                                   :0x0
14:38:16: CRC                                           :0x0
14:38:16: ####CSD Registe Values####  

14:38:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FD80>, <py_sfcl.CommandDataDefinition object at 0x0667F4E0>) , Command count = 3016 ] 
14:38:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FDE0>, <py_sfcl.CommandDataDefinition object at 0x0667CF00>) , Command count = 3017 ] 
14:38:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:16: [DVTCommonLib]### Erase :Erase API Called
14:38:16: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x28 with Blockcount:0x2001
14:38:16: [ EraseLba(0x28, 0x2001) , Command count = 3018 ] 
14:38:16: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x28 with Blockcount:0x2001 

14:38:16: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 27
14:38:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2028 to EndLba:0x2030 with Increment Pattern
14:38:16: [ WrLbaNoData(0x2028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3019 ] 
14:38:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2028 to EndLba:0x2030 with Increment Pattern 

14:38:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683240>, <py_sfcl.CommandDataDefinition object at 0x06683390>) , Command count = 3020 ] 
14:38:16: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CC30>, <py_sfcl.CommandDataDefinition object at 0x0667F090>) , Command count = 3021 ] 
14:38:16: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:16: [DVTCommonLib]###  R1bCommandAbort called
14:38:16: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x15, False) , Command count = 3022 ] 
14:38:16: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:19: Host Frequency set to 25000 KHz
14:38:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:19: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683AE0>, 0x0, True) , Command count = 3023 ] 
14:38:19: [GO18_globalSetVolt]### Host voltage value is set.
14:38:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x066830F0>, 0x0, False) , Command count = 3024 ] 
14:38:19: [GO18_globalSetVolt]### Host voltage value is set.
14:38:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3025 ] 
14:38:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3026 ] 
14:38:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3027 ] 
14:38:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE70>, <py_sfcl.CommandDataDefinition object at 0x06683540>) , Command count = 3028 ] 
14:38:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB570>, <py_sfcl.CommandDataDefinition object at 0x0667FAE0>) , Command count = 3029 ] 
14:38:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:19: [ SetCardRCA(0x1, 0xD555) , Command count = 3030 ] 
14:38:19: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:19: Host Frequency set to 25000 KHz
14:38:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:19: ####CSD Registe 2.0 Values####
14:38:19: CSD_STRUCTURE                                 :0x1
14:38:19: Reserv1                                       :0x0
14:38:19: Time Access 1 TAAC                            :0xe
14:38:19: Time Access 2 NSAC*100                        :0x0
14:38:19: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:19: Card Command Classess CCC                     :0x5b5
14:38:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:19: DSR(driver stage register)  DSR_IMP           :0x0
14:38:19: Reserv2                                       :0x0
14:38:19: Device Size C_SIZE                            :0xedc8
14:38:19: Reserv3                                       :0x0
14:38:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:19: Reserv4                                       :0x0
14:38:19: Write Speed Factor R2W_FACTOR                 :0x2
14:38:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:19: FILE_FORMAT_GRP                               :0x0
14:38:19: COPY flag                                     :0x1
14:38:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:19: File_Format                                   :0x0
14:38:19: CRC                                           :0x0
14:38:19: ####CSD Registe Values####  

14:38:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:19: [GetSCRRegisterEntry] Passed
14:38:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:19: Data_Status_After Erases          : 0
14:38:19: CPRM Security Support             : No Security
14:38:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:19: Spec. Version                     : Version 3.0X
14:38:19: Extended Security Support         : Extended_Security_Not_Supported
14:38:19: Command Support                   : COMMAND_SUPPORT
14:38:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683840>, <py_sfcl.CommandDataDefinition object at 0x0667FFC0>) , Command count = 3031 ] 
14:38:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D80>, <py_sfcl.CommandDataDefinition object at 0x06683510>) , Command count = 3032 ] 
14:38:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:19: [ SetBusWidth(0x4) , Command count = 3033 ] 
14:38:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F1B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3034 ] 
14:38:19: Protected Area Size 0x28000
14:38:19: Bus Width           2
14:38:19: Secure Mode         0
14:38:19: Speed  Class        4
14:38:19: Perf Move           0
14:38:19: Au Size             9
14:38:19: Erase Size          15
14:38:19: Erase Timeout       1
14:38:19: Erase offset        1
14:38:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3035 ] 
14:38:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:19: Host Frequency set to 100000 KHz
14:38:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:19: ####CSD Registe 2.0 Values####
14:38:19: CSD_STRUCTURE                                 :0x1
14:38:19: Reserv1                                       :0x0
14:38:19: Time Access 1 TAAC                            :0xe
14:38:19: Time Access 2 NSAC*100                        :0x0
14:38:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:19: Card Command Classess CCC                     :0x5b5
14:38:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:19: DSR(driver stage register)  DSR_IMP           :0x0
14:38:19: Reserv2                                       :0x0
14:38:19: Device Size C_SIZE                            :0xedc8
14:38:19: Reserv3                                       :0x0
14:38:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:19: Reserv4                                       :0x0
14:38:19: Write Speed Factor R2W_FACTOR                 :0x2
14:38:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:19: FILE_FORMAT_GRP                               :0x0
14:38:19: COPY flag                                     :0x1
14:38:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:19: File_Format                                   :0x0
14:38:19: CRC                                           :0x0
14:38:19: ####CSD Registe Values####  

14:38:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C870>, <py_sfcl.CommandDataDefinition object at 0x0667FE10>) , Command count = 3036 ] 
14:38:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683270>, <py_sfcl.CommandDataDefinition object at 0x0667F9F0>) , Command count = 3037 ] 
14:38:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:19: [DVTCommonLib]### Erase :Erase API Called
14:38:19: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2028 with Blockcount:0x2001
14:38:19: [ EraseLba(0x2028, 0x2001) , Command count = 3038 ] 
14:38:19: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2028 with Blockcount:0x2001 

14:38:19: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 26
14:38:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x4028 to EndLba:0x4030 with Increment Pattern
14:38:19: [ WrLbaNoData(0x4028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3039 ] 
14:38:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x4028 to EndLba:0x4030 with Increment Pattern 

14:38:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066835D0>, <py_sfcl.CommandDataDefinition object at 0x066832A0>) , Command count = 3040 ] 
14:38:19: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066837B0>, <py_sfcl.CommandDataDefinition object at 0x066836F0>) , Command count = 3041 ] 
14:38:19: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:19: [DVTCommonLib]###  R1bCommandAbort called
14:38:19: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x27, False) , Command count = 3042 ] 
14:38:19: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:21: Host Frequency set to 25000 KHz
14:38:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F810>, 0x0, True) , Command count = 3043 ] 
14:38:21: [GO18_globalSetVolt]### Host voltage value is set.
14:38:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FC01E0>, 0x0, False) , Command count = 3044 ] 
14:38:21: [GO18_globalSetVolt]### Host voltage value is set.
14:38:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3045 ] 
14:38:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3046 ] 
14:38:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3047 ] 
14:38:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066839C0>, <py_sfcl.CommandDataDefinition object at 0x06683E40>) , Command count = 3048 ] 
14:38:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6360>, <py_sfcl.CommandDataDefinition object at 0x06683A80>) , Command count = 3049 ] 
14:38:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:22: [ SetCardRCA(0x1, 0xD555) , Command count = 3050 ] 
14:38:22: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:22: Host Frequency set to 25000 KHz
14:38:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:22: ####CSD Registe 2.0 Values####
14:38:22: CSD_STRUCTURE                                 :0x1
14:38:22: Reserv1                                       :0x0
14:38:22: Time Access 1 TAAC                            :0xe
14:38:22: Time Access 2 NSAC*100                        :0x0
14:38:22: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:22: Card Command Classess CCC                     :0x5b5
14:38:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:22: DSR(driver stage register)  DSR_IMP           :0x0
14:38:22: Reserv2                                       :0x0
14:38:22: Device Size C_SIZE                            :0xedc8
14:38:22: Reserv3                                       :0x0
14:38:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:22: Reserv4                                       :0x0
14:38:22: Write Speed Factor R2W_FACTOR                 :0x2
14:38:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:22: FILE_FORMAT_GRP                               :0x0
14:38:22: COPY flag                                     :0x1
14:38:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:22: File_Format                                   :0x0
14:38:22: CRC                                           :0x0
14:38:22: ####CSD Registe Values####  

14:38:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:22: [GetSCRRegisterEntry] Passed
14:38:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:22: Data_Status_After Erases          : 0
14:38:22: CPRM Security Support             : No Security
14:38:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:22: Spec. Version                     : Version 3.0X
14:38:22: Extended Security Support         : Extended_Security_Not_Supported
14:38:22: Command Support                   : COMMAND_SUPPORT
14:38:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683B70>, <py_sfcl.CommandDataDefinition object at 0x06683300>) , Command count = 3051 ] 
14:38:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D50>, <py_sfcl.CommandDataDefinition object at 0x06683690>) , Command count = 3052 ] 
14:38:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:22: [ SetBusWidth(0x4) , Command count = 3053 ] 
14:38:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x060327B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3054 ] 
14:38:22: Protected Area Size 0x28000
14:38:22: Bus Width           2
14:38:22: Secure Mode         0
14:38:22: Speed  Class        4
14:38:22: Perf Move           0
14:38:22: Au Size             9
14:38:22: Erase Size          15
14:38:22: Erase Timeout       1
14:38:22: Erase offset        1
14:38:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3055 ] 
14:38:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:22: Host Frequency set to 100000 KHz
14:38:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:22: ####CSD Registe 2.0 Values####
14:38:22: CSD_STRUCTURE                                 :0x1
14:38:22: Reserv1                                       :0x0
14:38:22: Time Access 1 TAAC                            :0xe
14:38:22: Time Access 2 NSAC*100                        :0x0
14:38:22: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:22: Card Command Classess CCC                     :0x5b5
14:38:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:22: DSR(driver stage register)  DSR_IMP           :0x0
14:38:22: Reserv2                                       :0x0
14:38:22: Device Size C_SIZE                            :0xedc8
14:38:22: Reserv3                                       :0x0
14:38:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:22: Reserv4                                       :0x0
14:38:22: Write Speed Factor R2W_FACTOR                 :0x2
14:38:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:22: FILE_FORMAT_GRP                               :0x0
14:38:22: COPY flag                                     :0x1
14:38:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:22: File_Format                                   :0x0
14:38:22: CRC                                           :0x0
14:38:22: ####CSD Registe Values####  

14:38:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F5A0>, <py_sfcl.CommandDataDefinition object at 0x06683E70>) , Command count = 3056 ] 
14:38:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FD50>, <py_sfcl.CommandDataDefinition object at 0x06685CF0>) , Command count = 3057 ] 
14:38:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:22: [DVTCommonLib]### Erase :Erase API Called
14:38:22: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x4028 with Blockcount:0x2001
14:38:22: [ EraseLba(0x4028, 0x2001) , Command count = 3058 ] 
14:38:22: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x4028 with Blockcount:0x2001 

14:38:22: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 25
14:38:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x6028 to EndLba:0x6030 with Increment Pattern
14:38:22: [ WrLbaNoData(0x6028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3059 ] 
14:38:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x6028 to EndLba:0x6030 with Increment Pattern 

14:38:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05EE6B70>, <py_sfcl.CommandDataDefinition object at 0x0667FED0>) , Command count = 3060 ] 
14:38:22: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FB70>, <py_sfcl.CommandDataDefinition object at 0x06685CF0>) , Command count = 3061 ] 
14:38:22: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:22: [DVTCommonLib]###  R1bCommandAbort called
14:38:22: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x8, False) , Command count = 3062 ] 
14:38:22: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:24: Host Frequency set to 25000 KHz
14:38:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:24: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683DE0>, 0x0, True) , Command count = 3063 ] 
14:38:24: [GO18_globalSetVolt]### Host voltage value is set.
14:38:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FDAE40>, 0x0, False) , Command count = 3064 ] 
14:38:24: [GO18_globalSetVolt]### Host voltage value is set.
14:38:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3065 ] 
14:38:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3066 ] 
14:38:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3067 ] 
14:38:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AF90>, <py_sfcl.CommandDataDefinition object at 0x066833C0>) , Command count = 3068 ] 
14:38:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8FC0>, <py_sfcl.CommandDataDefinition object at 0x06685060>) , Command count = 3069 ] 
14:38:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:24: [ SetCardRCA(0x1, 0xD555) , Command count = 3070 ] 
14:38:24: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:25: Host Frequency set to 25000 KHz
14:38:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:25: ####CSD Registe 2.0 Values####
14:38:25: CSD_STRUCTURE                                 :0x1
14:38:25: Reserv1                                       :0x0
14:38:25: Time Access 1 TAAC                            :0xe
14:38:25: Time Access 2 NSAC*100                        :0x0
14:38:25: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:25: Card Command Classess CCC                     :0x5b5
14:38:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:25: DSR(driver stage register)  DSR_IMP           :0x0
14:38:25: Reserv2                                       :0x0
14:38:25: Device Size C_SIZE                            :0xedc8
14:38:25: Reserv3                                       :0x0
14:38:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:25: Reserv4                                       :0x0
14:38:25: Write Speed Factor R2W_FACTOR                 :0x2
14:38:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:25: FILE_FORMAT_GRP                               :0x0
14:38:25: COPY flag                                     :0x1
14:38:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:25: File_Format                                   :0x0
14:38:25: CRC                                           :0x0
14:38:25: ####CSD Registe Values####  

14:38:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:25: [GetSCRRegisterEntry] Passed
14:38:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:25: Data_Status_After Erases          : 0
14:38:25: CPRM Security Support             : No Security
14:38:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:25: Spec. Version                     : Version 3.0X
14:38:25: Extended Security Support         : Extended_Security_Not_Supported
14:38:25: Command Support                   : COMMAND_SUPPORT
14:38:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683060>, <py_sfcl.CommandDataDefinition object at 0x06685510>) , Command count = 3071 ] 
14:38:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8990>, <py_sfcl.CommandDataDefinition object at 0x06685DB0>) , Command count = 3072 ] 
14:38:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:25: [ SetBusWidth(0x4) , Command count = 3073 ] 
14:38:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685BD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3074 ] 
14:38:25: Protected Area Size 0x28000
14:38:25: Bus Width           2
14:38:25: Secure Mode         0
14:38:25: Speed  Class        4
14:38:25: Perf Move           0
14:38:25: Au Size             9
14:38:25: Erase Size          15
14:38:25: Erase Timeout       1
14:38:25: Erase offset        1
14:38:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3075 ] 
14:38:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:25: Host Frequency set to 100000 KHz
14:38:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:25: ####CSD Registe 2.0 Values####
14:38:25: CSD_STRUCTURE                                 :0x1
14:38:25: Reserv1                                       :0x0
14:38:25: Time Access 1 TAAC                            :0xe
14:38:25: Time Access 2 NSAC*100                        :0x0
14:38:25: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:25: Card Command Classess CCC                     :0x5b5
14:38:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:25: DSR(driver stage register)  DSR_IMP           :0x0
14:38:25: Reserv2                                       :0x0
14:38:25: Device Size C_SIZE                            :0xedc8
14:38:25: Reserv3                                       :0x0
14:38:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:25: Reserv4                                       :0x0
14:38:25: Write Speed Factor R2W_FACTOR                 :0x2
14:38:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:25: FILE_FORMAT_GRP                               :0x0
14:38:25: COPY flag                                     :0x1
14:38:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:25: File_Format                                   :0x0
14:38:25: CRC                                           :0x0
14:38:25: ####CSD Registe Values####  

14:38:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8F00>, <py_sfcl.CommandDataDefinition object at 0x05FE8C60>) , Command count = 3076 ] 
14:38:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066831E0>, <py_sfcl.CommandDataDefinition object at 0x06685930>) , Command count = 3077 ] 
14:38:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:25: [DVTCommonLib]### Erase :Erase API Called
14:38:25: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x6028 with Blockcount:0x2001
14:38:25: [ EraseLba(0x6028, 0x2001) , Command count = 3078 ] 
14:38:25: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x6028 with Blockcount:0x2001 

14:38:25: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 24
14:38:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x8028 to EndLba:0x8030 with Increment Pattern
14:38:25: [ WrLbaNoData(0x8028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3079 ] 
14:38:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x8028 to EndLba:0x8030 with Increment Pattern 

14:38:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDADB0>, <py_sfcl.CommandDataDefinition object at 0x06685960>) , Command count = 3080 ] 
14:38:25: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683330>, <py_sfcl.CommandDataDefinition object at 0x06685A50>) , Command count = 3081 ] 
14:38:25: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:25: [DVTCommonLib]###  R1bCommandAbort called
14:38:25: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xD, False) , Command count = 3082 ] 
14:38:25: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:25: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:27: Host Frequency set to 25000 KHz
14:38:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FF30>, 0x0, True) , Command count = 3083 ] 
14:38:27: [GO18_globalSetVolt]### Host voltage value is set.
14:38:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x065724B0>, 0x0, False) , Command count = 3084 ] 
14:38:27: [GO18_globalSetVolt]### Host voltage value is set.
14:38:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3085 ] 
14:38:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3086 ] 
14:38:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3087 ] 
14:38:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032840>, <py_sfcl.CommandDataDefinition object at 0x06666D50>) , Command count = 3088 ] 
14:38:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060329F0>, <py_sfcl.CommandDataDefinition object at 0x066858D0>) , Command count = 3089 ] 
14:38:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:27: [ SetCardRCA(0x1, 0xD555) , Command count = 3090 ] 
14:38:27: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:27: Host Frequency set to 25000 KHz
14:38:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:27: ####CSD Registe 2.0 Values####
14:38:27: CSD_STRUCTURE                                 :0x1
14:38:27: Reserv1                                       :0x0
14:38:27: Time Access 1 TAAC                            :0xe
14:38:27: Time Access 2 NSAC*100                        :0x0
14:38:27: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:27: Card Command Classess CCC                     :0x5b5
14:38:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:27: DSR(driver stage register)  DSR_IMP           :0x0
14:38:27: Reserv2                                       :0x0
14:38:27: Device Size C_SIZE                            :0xedc8
14:38:27: Reserv3                                       :0x0
14:38:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:27: Reserv4                                       :0x0
14:38:27: Write Speed Factor R2W_FACTOR                 :0x2
14:38:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:27: FILE_FORMAT_GRP                               :0x0
14:38:27: COPY flag                                     :0x1
14:38:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:27: File_Format                                   :0x0
14:38:27: CRC                                           :0x0
14:38:27: ####CSD Registe Values####  

14:38:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:27: [GetSCRRegisterEntry] Passed
14:38:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:27: Data_Status_After Erases          : 0
14:38:27: CPRM Security Support             : No Security
14:38:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:27: Spec. Version                     : Version 3.0X
14:38:27: Extended Security Support         : Extended_Security_Not_Supported
14:38:27: Command Support                   : COMMAND_SUPPORT
14:38:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066831B0>, <py_sfcl.CommandDataDefinition object at 0x06685B10>) , Command count = 3091 ] 
14:38:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC0690>, <py_sfcl.CommandDataDefinition object at 0x06666720>) , Command count = 3092 ] 
14:38:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:27: [ SetBusWidth(0x4) , Command count = 3093 ] 
14:38:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066AB120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3094 ] 
14:38:27: Protected Area Size 0x28000
14:38:27: Bus Width           2
14:38:27: Secure Mode         0
14:38:27: Speed  Class        4
14:38:27: Perf Move           0
14:38:27: Au Size             9
14:38:27: Erase Size          15
14:38:27: Erase Timeout       1
14:38:27: Erase offset        1
14:38:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3095 ] 
14:38:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:28: Host Frequency set to 100000 KHz
14:38:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:28: ####CSD Registe 2.0 Values####
14:38:28: CSD_STRUCTURE                                 :0x1
14:38:28: Reserv1                                       :0x0
14:38:28: Time Access 1 TAAC                            :0xe
14:38:28: Time Access 2 NSAC*100                        :0x0
14:38:28: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:28: Card Command Classess CCC                     :0x5b5
14:38:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:28: DSR(driver stage register)  DSR_IMP           :0x0
14:38:28: Reserv2                                       :0x0
14:38:28: Device Size C_SIZE                            :0xedc8
14:38:28: Reserv3                                       :0x0
14:38:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:28: Reserv4                                       :0x0
14:38:28: Write Speed Factor R2W_FACTOR                 :0x2
14:38:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:28: FILE_FORMAT_GRP                               :0x0
14:38:28: COPY flag                                     :0x1
14:38:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:28: File_Format                                   :0x0
14:38:28: CRC                                           :0x0
14:38:28: ####CSD Registe Values####  

14:38:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032BA0>, <py_sfcl.CommandDataDefinition object at 0x06685B40>) , Command count = 3096 ] 
14:38:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683090>, <py_sfcl.CommandDataDefinition object at 0x06685480>) , Command count = 3097 ] 
14:38:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:28: [DVTCommonLib]### Erase :Erase API Called
14:38:28: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x8028 with Blockcount:0x2001
14:38:28: [ EraseLba(0x8028, 0x2001) , Command count = 3098 ] 
14:38:28: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x8028 with Blockcount:0x2001 

14:38:28: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 23
14:38:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xA028 to EndLba:0xA030 with Increment Pattern
14:38:28: [ WrLbaNoData(0xA028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3099 ] 
14:38:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xA028 to EndLba:0xA030 with Increment Pattern 

14:38:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572060>, <py_sfcl.CommandDataDefinition object at 0x06666BA0>) , Command count = 3100 ] 
14:38:28: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683AB0>, <py_sfcl.CommandDataDefinition object at 0x06685480>) , Command count = 3101 ] 
14:38:28: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:28: [DVTCommonLib]###  R1bCommandAbort called
14:38:28: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x3, False) , Command count = 3102 ] 
14:38:28: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:28: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:30: Host Frequency set to 25000 KHz
14:38:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:30: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683030>, 0x0, True) , Command count = 3103 ] 
14:38:30: [GO18_globalSetVolt]### Host voltage value is set.
14:38:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x066664E0>, 0x0, False) , Command count = 3104 ] 
14:38:30: [GO18_globalSetVolt]### Host voltage value is set.
14:38:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3105 ] 
14:38:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3106 ] 
14:38:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3107 ] 
14:38:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F030>, <py_sfcl.CommandDataDefinition object at 0x066669C0>) , Command count = 3108 ] 
14:38:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BED0>, <py_sfcl.CommandDataDefinition object at 0x06685A80>) , Command count = 3109 ] 
14:38:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:30: [ SetCardRCA(0x1, 0xD555) , Command count = 3110 ] 
14:38:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:30: Host Frequency set to 25000 KHz
14:38:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:30: ####CSD Registe 2.0 Values####
14:38:30: CSD_STRUCTURE                                 :0x1
14:38:30: Reserv1                                       :0x0
14:38:30: Time Access 1 TAAC                            :0xe
14:38:30: Time Access 2 NSAC*100                        :0x0
14:38:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:30: Card Command Classess CCC                     :0x5b5
14:38:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:30: DSR(driver stage register)  DSR_IMP           :0x0
14:38:30: Reserv2                                       :0x0
14:38:30: Device Size C_SIZE                            :0xedc8
14:38:30: Reserv3                                       :0x0
14:38:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:30: Reserv4                                       :0x0
14:38:30: Write Speed Factor R2W_FACTOR                 :0x2
14:38:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:30: FILE_FORMAT_GRP                               :0x0
14:38:30: COPY flag                                     :0x1
14:38:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:30: File_Format                                   :0x0
14:38:30: CRC                                           :0x0
14:38:30: ####CSD Registe Values####  

14:38:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:30: [GetSCRRegisterEntry] Passed
14:38:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:30: Data_Status_After Erases          : 0
14:38:30: CPRM Security Support             : No Security
14:38:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:30: Spec. Version                     : Version 3.0X
14:38:30: Extended Security Support         : Extended_Security_Not_Supported
14:38:30: Command Support                   : COMMAND_SUPPORT
14:38:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB180>, <py_sfcl.CommandDataDefinition object at 0x06685600>) , Command count = 3111 ] 
14:38:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666630>, <py_sfcl.CommandDataDefinition object at 0x06666E10>) , Command count = 3112 ] 
14:38:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:30: [ SetBusWidth(0x4) , Command count = 3113 ] 
14:38:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06666120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3114 ] 
14:38:30: Protected Area Size 0x28000
14:38:30: Bus Width           2
14:38:30: Secure Mode         0
14:38:30: Speed  Class        4
14:38:30: Perf Move           0
14:38:30: Au Size             9
14:38:30: Erase Size          15
14:38:30: Erase Timeout       1
14:38:30: Erase offset        1
14:38:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3115 ] 
14:38:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:30: Host Frequency set to 100000 KHz
14:38:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:30: ####CSD Registe 2.0 Values####
14:38:30: CSD_STRUCTURE                                 :0x1
14:38:30: Reserv1                                       :0x0
14:38:30: Time Access 1 TAAC                            :0xe
14:38:30: Time Access 2 NSAC*100                        :0x0
14:38:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:30: Card Command Classess CCC                     :0x5b5
14:38:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:30: DSR(driver stage register)  DSR_IMP           :0x0
14:38:30: Reserv2                                       :0x0
14:38:30: Device Size C_SIZE                            :0xedc8
14:38:30: Reserv3                                       :0x0
14:38:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:30: Reserv4                                       :0x0
14:38:30: Write Speed Factor R2W_FACTOR                 :0x2
14:38:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:30: FILE_FORMAT_GRP                               :0x0
14:38:30: COPY flag                                     :0x1
14:38:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:30: File_Format                                   :0x0
14:38:30: CRC                                           :0x0
14:38:30: ####CSD Registe Values####  

14:38:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066667E0>, <py_sfcl.CommandDataDefinition object at 0x06666C60>) , Command count = 3116 ] 
14:38:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683930>, <py_sfcl.CommandDataDefinition object at 0x06685870>) , Command count = 3117 ] 
14:38:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:30: [DVTCommonLib]### Erase :Erase API Called
14:38:30: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xA028 with Blockcount:0x2001
14:38:30: [ EraseLba(0xA028, 0x2001) , Command count = 3118 ] 
14:38:30: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xA028 with Blockcount:0x2001 

14:38:30: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 22
14:38:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xC028 to EndLba:0xC030 with Increment Pattern
14:38:30: [ WrLbaNoData(0xC028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3119 ] 
14:38:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xC028 to EndLba:0xC030 with Increment Pattern 

14:38:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BDB0>, <py_sfcl.CommandDataDefinition object at 0x06032B10>) , Command count = 3120 ] 
14:38:30: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8F90>, <py_sfcl.CommandDataDefinition object at 0x06685870>) , Command count = 3121 ] 
14:38:30: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:30: [DVTCommonLib]###  R1bCommandAbort called
14:38:30: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x19, False) , Command count = 3122 ] 
14:38:30: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:33: Host Frequency set to 25000 KHz
14:38:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683F30>, 0x0, True) , Command count = 3123 ] 
14:38:33: [GO18_globalSetVolt]### Host voltage value is set.
14:38:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABDB0>, 0x0, False) , Command count = 3124 ] 
14:38:33: [GO18_globalSetVolt]### Host voltage value is set.
14:38:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3125 ] 
14:38:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3126 ] 
14:38:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3127 ] 
14:38:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6F30>, <py_sfcl.CommandDataDefinition object at 0x06666E70>) , Command count = 3128 ] 
14:38:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572330>, <py_sfcl.CommandDataDefinition object at 0x06685870>) , Command count = 3129 ] 
14:38:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:33: [ SetCardRCA(0x1, 0xD555) , Command count = 3130 ] 
14:38:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:33: Host Frequency set to 25000 KHz
14:38:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:33: ####CSD Registe 2.0 Values####
14:38:33: CSD_STRUCTURE                                 :0x1
14:38:33: Reserv1                                       :0x0
14:38:33: Time Access 1 TAAC                            :0xe
14:38:33: Time Access 2 NSAC*100                        :0x0
14:38:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:33: Card Command Classess CCC                     :0x5b5
14:38:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:33: DSR(driver stage register)  DSR_IMP           :0x0
14:38:33: Reserv2                                       :0x0
14:38:33: Device Size C_SIZE                            :0xedc8
14:38:33: Reserv3                                       :0x0
14:38:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:33: Reserv4                                       :0x0
14:38:33: Write Speed Factor R2W_FACTOR                 :0x2
14:38:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:33: FILE_FORMAT_GRP                               :0x0
14:38:33: COPY flag                                     :0x1
14:38:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:33: File_Format                                   :0x0
14:38:33: CRC                                           :0x0
14:38:33: ####CSD Registe Values####  

14:38:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:33: [GetSCRRegisterEntry] Passed
14:38:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:33: Data_Status_After Erases          : 0
14:38:33: CPRM Security Support             : No Security
14:38:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:33: Spec. Version                     : Version 3.0X
14:38:33: Extended Security Support         : Extended_Security_Not_Supported
14:38:33: Command Support                   : COMMAND_SUPPORT
14:38:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666DE0>, <py_sfcl.CommandDataDefinition object at 0x066AB2A0>) , Command count = 3131 ] 
14:38:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB600>, <py_sfcl.CommandDataDefinition object at 0x066AB300>) , Command count = 3132 ] 
14:38:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:33: [ SetBusWidth(0x4) , Command count = 3133 ] 
14:38:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A7E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3134 ] 
14:38:33: Protected Area Size 0x28000
14:38:33: Bus Width           2
14:38:33: Secure Mode         0
14:38:33: Speed  Class        4
14:38:33: Perf Move           0
14:38:33: Au Size             9
14:38:33: Erase Size          15
14:38:33: Erase Timeout       1
14:38:33: Erase offset        1
14:38:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3135 ] 
14:38:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:33: Host Frequency set to 100000 KHz
14:38:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:33: ####CSD Registe 2.0 Values####
14:38:33: CSD_STRUCTURE                                 :0x1
14:38:33: Reserv1                                       :0x0
14:38:33: Time Access 1 TAAC                            :0xe
14:38:33: Time Access 2 NSAC*100                        :0x0
14:38:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:33: Card Command Classess CCC                     :0x5b5
14:38:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:33: DSR(driver stage register)  DSR_IMP           :0x0
14:38:33: Reserv2                                       :0x0
14:38:33: Device Size C_SIZE                            :0xedc8
14:38:33: Reserv3                                       :0x0
14:38:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:33: Reserv4                                       :0x0
14:38:33: Write Speed Factor R2W_FACTOR                 :0x2
14:38:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:33: FILE_FORMAT_GRP                               :0x0
14:38:33: COPY flag                                     :0x1
14:38:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:33: File_Format                                   :0x0
14:38:33: CRC                                           :0x0
14:38:33: ####CSD Registe Values####  

14:38:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB5A0>, <py_sfcl.CommandDataDefinition object at 0x06666B10>) , Command count = 3136 ] 
14:38:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E5BDB0>, <py_sfcl.CommandDataDefinition object at 0x066853F0>) , Command count = 3137 ] 
14:38:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:33: [DVTCommonLib]### Erase :Erase API Called
14:38:33: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xC028 with Blockcount:0x2001
14:38:33: [ EraseLba(0xC028, 0x2001) , Command count = 3138 ] 
14:38:33: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xC028 with Blockcount:0x2001 

14:38:33: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 21
14:38:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xE028 to EndLba:0xE030 with Increment Pattern
14:38:33: [ WrLbaNoData(0xE028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3139 ] 
14:38:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xE028 to EndLba:0xE030 with Increment Pattern 

14:38:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE40>, <py_sfcl.CommandDataDefinition object at 0x06666990>) , Command count = 3140 ] 
14:38:33: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032810>, <py_sfcl.CommandDataDefinition object at 0x066853F0>) , Command count = 3141 ] 
14:38:33: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:33: [DVTCommonLib]###  R1bCommandAbort called
14:38:33: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x11, False) , Command count = 3142 ] 
14:38:33: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:33: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:35: Host Frequency set to 25000 KHz
14:38:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x06032E10>, 0x0, True) , Command count = 3143 ] 
14:38:35: [GO18_globalSetVolt]### Host voltage value is set.
14:38:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABE10>, 0x0, False) , Command count = 3144 ] 
14:38:35: [GO18_globalSetVolt]### Host voltage value is set.
14:38:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3145 ] 
14:38:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3146 ] 
14:38:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3147 ] 
14:38:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666960>, <py_sfcl.CommandDataDefinition object at 0x06666870>) , Command count = 3148 ] 
14:38:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABFC0>, <py_sfcl.CommandDataDefinition object at 0x066853F0>) , Command count = 3149 ] 
14:38:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:36: [ SetCardRCA(0x1, 0xD555) , Command count = 3150 ] 
14:38:36: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:36: Host Frequency set to 25000 KHz
14:38:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:36: ####CSD Registe 2.0 Values####
14:38:36: CSD_STRUCTURE                                 :0x1
14:38:36: Reserv1                                       :0x0
14:38:36: Time Access 1 TAAC                            :0xe
14:38:36: Time Access 2 NSAC*100                        :0x0
14:38:36: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:36: Card Command Classess CCC                     :0x5b5
14:38:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:36: DSR(driver stage register)  DSR_IMP           :0x0
14:38:36: Reserv2                                       :0x0
14:38:36: Device Size C_SIZE                            :0xedc8
14:38:36: Reserv3                                       :0x0
14:38:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:36: Reserv4                                       :0x0
14:38:36: Write Speed Factor R2W_FACTOR                 :0x2
14:38:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:36: FILE_FORMAT_GRP                               :0x0
14:38:36: COPY flag                                     :0x1
14:38:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:36: File_Format                                   :0x0
14:38:36: CRC                                           :0x0
14:38:36: ####CSD Registe Values####  

14:38:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:36: [GetSCRRegisterEntry] Passed
14:38:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:36: Data_Status_After Erases          : 0
14:38:36: CPRM Security Support             : No Security
14:38:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:36: Spec. Version                     : Version 3.0X
14:38:36: Extended Security Support         : Extended_Security_Not_Supported
14:38:36: Command Support                   : COMMAND_SUPPORT
14:38:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666D80>, <py_sfcl.CommandDataDefinition object at 0x0667ACF0>) , Command count = 3151 ] 
14:38:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A480>, <py_sfcl.CommandDataDefinition object at 0x0667A840>) , Command count = 3152 ] 
14:38:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:36: [ SetBusWidth(0x4) , Command count = 3153 ] 
14:38:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667AD20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3154 ] 
14:38:36: Protected Area Size 0x28000
14:38:36: Bus Width           2
14:38:36: Secure Mode         0
14:38:36: Speed  Class        4
14:38:36: Perf Move           0
14:38:36: Au Size             9
14:38:36: Erase Size          15
14:38:36: Erase Timeout       1
14:38:36: Erase offset        1
14:38:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3155 ] 
14:38:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:36: Host Frequency set to 100000 KHz
14:38:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:36: ####CSD Registe 2.0 Values####
14:38:36: CSD_STRUCTURE                                 :0x1
14:38:36: Reserv1                                       :0x0
14:38:36: Time Access 1 TAAC                            :0xe
14:38:36: Time Access 2 NSAC*100                        :0x0
14:38:36: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:36: Card Command Classess CCC                     :0x5b5
14:38:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:36: DSR(driver stage register)  DSR_IMP           :0x0
14:38:36: Reserv2                                       :0x0
14:38:36: Device Size C_SIZE                            :0xedc8
14:38:36: Reserv3                                       :0x0
14:38:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:36: Reserv4                                       :0x0
14:38:36: Write Speed Factor R2W_FACTOR                 :0x2
14:38:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:36: FILE_FORMAT_GRP                               :0x0
14:38:36: COPY flag                                     :0x1
14:38:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:36: File_Format                                   :0x0
14:38:36: CRC                                           :0x0
14:38:36: ####CSD Registe Values####  

14:38:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A9C0>, <py_sfcl.CommandDataDefinition object at 0x0667A7E0>) , Command count = 3156 ] 
14:38:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666B70>, <py_sfcl.CommandDataDefinition object at 0x066851B0>) , Command count = 3157 ] 
14:38:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:36: [DVTCommonLib]### Erase :Erase API Called
14:38:36: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xE028 with Blockcount:0x2001
14:38:36: [ EraseLba(0xE028, 0x2001) , Command count = 3158 ] 
14:38:36: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xE028 with Blockcount:0x2001 

14:38:36: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 20
14:38:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x10028 to EndLba:0x10030 with Increment Pattern
14:38:36: [ WrLbaNoData(0x10028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3159 ] 
14:38:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x10028 to EndLba:0x10030 with Increment Pattern 

14:38:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A6C0>, <py_sfcl.CommandDataDefinition object at 0x0667AAE0>) , Command count = 3160 ] 
14:38:36: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB270>, <py_sfcl.CommandDataDefinition object at 0x0667A8A0>) , Command count = 3161 ] 
14:38:36: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:36: [DVTCommonLib]###  R1bCommandAbort called
14:38:36: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xB, False) , Command count = 3162 ] 
14:38:36: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:36: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:38: Host Frequency set to 25000 KHz
14:38:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:38: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666660>, 0x0, True) , Command count = 3163 ] 
14:38:38: [GO18_globalSetVolt]### Host voltage value is set.
14:38:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C3F0>, 0x0, False) , Command count = 3164 ] 
14:38:38: [GO18_globalSetVolt]### Host voltage value is set.
14:38:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3165 ] 
14:38:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3166 ] 
14:38:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3167 ] 
14:38:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FDB0>, <py_sfcl.CommandDataDefinition object at 0x0667A7B0>) , Command count = 3168 ] 
14:38:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C390>, <py_sfcl.CommandDataDefinition object at 0x0667A240>) , Command count = 3169 ] 
14:38:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:38: [ SetCardRCA(0x1, 0xD555) , Command count = 3170 ] 
14:38:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:39: Host Frequency set to 25000 KHz
14:38:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:39: ####CSD Registe 2.0 Values####
14:38:39: CSD_STRUCTURE                                 :0x1
14:38:39: Reserv1                                       :0x0
14:38:39: Time Access 1 TAAC                            :0xe
14:38:39: Time Access 2 NSAC*100                        :0x0
14:38:39: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:39: Card Command Classess CCC                     :0x5b5
14:38:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:39: DSR(driver stage register)  DSR_IMP           :0x0
14:38:39: Reserv2                                       :0x0
14:38:39: Device Size C_SIZE                            :0xedc8
14:38:39: Reserv3                                       :0x0
14:38:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:39: Reserv4                                       :0x0
14:38:39: Write Speed Factor R2W_FACTOR                 :0x2
14:38:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:39: FILE_FORMAT_GRP                               :0x0
14:38:39: COPY flag                                     :0x1
14:38:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:39: File_Format                                   :0x0
14:38:39: CRC                                           :0x0
14:38:39: ####CSD Registe Values####  

14:38:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:39: [GetSCRRegisterEntry] Passed
14:38:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:39: Data_Status_After Erases          : 0
14:38:39: CPRM Security Support             : No Security
14:38:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:39: Spec. Version                     : Version 3.0X
14:38:39: Extended Security Support         : Extended_Security_Not_Supported
14:38:39: Command Support                   : COMMAND_SUPPORT
14:38:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066663F0>, <py_sfcl.CommandDataDefinition object at 0x0667A8D0>) , Command count = 3171 ] 
14:38:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A0F0>, <py_sfcl.CommandDataDefinition object at 0x0667AF60>) , Command count = 3172 ] 
14:38:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:39: [ SetBusWidth(0x4) , Command count = 3173 ] 
14:38:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3174 ] 
14:38:39: Protected Area Size 0x28000
14:38:39: Bus Width           2
14:38:39: Secure Mode         0
14:38:39: Speed  Class        4
14:38:39: Perf Move           0
14:38:39: Au Size             9
14:38:39: Erase Size          15
14:38:39: Erase Timeout       1
14:38:39: Erase offset        1
14:38:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3175 ] 
14:38:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:39: Host Frequency set to 100000 KHz
14:38:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:39: ####CSD Registe 2.0 Values####
14:38:39: CSD_STRUCTURE                                 :0x1
14:38:39: Reserv1                                       :0x0
14:38:39: Time Access 1 TAAC                            :0xe
14:38:39: Time Access 2 NSAC*100                        :0x0
14:38:39: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:39: Card Command Classess CCC                     :0x5b5
14:38:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:39: DSR(driver stage register)  DSR_IMP           :0x0
14:38:39: Reserv2                                       :0x0
14:38:39: Device Size C_SIZE                            :0xedc8
14:38:39: Reserv3                                       :0x0
14:38:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:39: Reserv4                                       :0x0
14:38:39: Write Speed Factor R2W_FACTOR                 :0x2
14:38:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:39: FILE_FORMAT_GRP                               :0x0
14:38:39: COPY flag                                     :0x1
14:38:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:39: File_Format                                   :0x0
14:38:39: CRC                                           :0x0
14:38:39: ####CSD Registe Values####  

14:38:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AE10>, <py_sfcl.CommandDataDefinition object at 0x0667A6F0>) , Command count = 3176 ] 
14:38:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066666C0>, <py_sfcl.CommandDataDefinition object at 0x06685C60>) , Command count = 3177 ] 
14:38:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:39: [DVTCommonLib]### Erase :Erase API Called
14:38:39: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x10028 with Blockcount:0x2001
14:38:39: [ EraseLba(0x10028, 0x2001) , Command count = 3178 ] 
14:38:39: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x10028 with Blockcount:0x2001 

14:38:39: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 19
14:38:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x12028 to EndLba:0x12030 with Increment Pattern
14:38:39: [ WrLbaNoData(0x12028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3179 ] 
14:38:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x12028 to EndLba:0x12030 with Increment Pattern 

14:38:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB450>, <py_sfcl.CommandDataDefinition object at 0x0667C2D0>) , Command count = 3180 ] 
14:38:39: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666420>, <py_sfcl.CommandDataDefinition object at 0x06685C60>) , Command count = 3181 ] 
14:38:39: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:39: [DVTCommonLib]###  R1bCommandAbort called
14:38:39: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x21, False) , Command count = 3182 ] 
14:38:39: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:41: Host Frequency set to 25000 KHz
14:38:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB5D0>, 0x0, True) , Command count = 3183 ] 
14:38:41: [GO18_globalSetVolt]### Host voltage value is set.
14:38:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CB70>, 0x0, False) , Command count = 3184 ] 
14:38:41: [GO18_globalSetVolt]### Host voltage value is set.
14:38:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3185 ] 
14:38:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3186 ] 
14:38:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3187 ] 
14:38:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C030>, <py_sfcl.CommandDataDefinition object at 0x0667C1E0>) , Command count = 3188 ] 
14:38:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CB40>, <py_sfcl.CommandDataDefinition object at 0x0667A090>) , Command count = 3189 ] 
14:38:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:41: [ SetCardRCA(0x1, 0xD555) , Command count = 3190 ] 
14:38:41: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:41: Host Frequency set to 25000 KHz
14:38:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:41: ####CSD Registe 2.0 Values####
14:38:41: CSD_STRUCTURE                                 :0x1
14:38:41: Reserv1                                       :0x0
14:38:41: Time Access 1 TAAC                            :0xe
14:38:41: Time Access 2 NSAC*100                        :0x0
14:38:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:41: Card Command Classess CCC                     :0x5b5
14:38:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:41: DSR(driver stage register)  DSR_IMP           :0x0
14:38:41: Reserv2                                       :0x0
14:38:41: Device Size C_SIZE                            :0xedc8
14:38:41: Reserv3                                       :0x0
14:38:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:41: Reserv4                                       :0x0
14:38:41: Write Speed Factor R2W_FACTOR                 :0x2
14:38:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:41: FILE_FORMAT_GRP                               :0x0
14:38:41: COPY flag                                     :0x1
14:38:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:41: File_Format                                   :0x0
14:38:41: CRC                                           :0x0
14:38:41: ####CSD Registe Values####  

14:38:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:41: [GetSCRRegisterEntry] Passed
14:38:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:41: Data_Status_After Erases          : 0
14:38:41: CPRM Security Support             : No Security
14:38:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:41: Spec. Version                     : Version 3.0X
14:38:41: Extended Security Support         : Extended_Security_Not_Supported
14:38:41: Command Support                   : COMMAND_SUPPORT
14:38:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF00>, <py_sfcl.CommandDataDefinition object at 0x0667C060>) , Command count = 3191 ] 
14:38:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AB70>, <py_sfcl.CommandDataDefinition object at 0x0667C3C0>) , Command count = 3192 ] 
14:38:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:41: [ SetBusWidth(0x4) , Command count = 3193 ] 
14:38:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C6C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3194 ] 
14:38:41: Protected Area Size 0x28000
14:38:41: Bus Width           2
14:38:41: Secure Mode         0
14:38:41: Speed  Class        4
14:38:41: Perf Move           0
14:38:41: Au Size             9
14:38:41: Erase Size          15
14:38:41: Erase Timeout       1
14:38:41: Erase offset        1
14:38:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3195 ] 
14:38:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:41: Host Frequency set to 100000 KHz
14:38:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:41: ####CSD Registe 2.0 Values####
14:38:41: CSD_STRUCTURE                                 :0x1
14:38:41: Reserv1                                       :0x0
14:38:41: Time Access 1 TAAC                            :0xe
14:38:41: Time Access 2 NSAC*100                        :0x0
14:38:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:41: Card Command Classess CCC                     :0x5b5
14:38:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:41: DSR(driver stage register)  DSR_IMP           :0x0
14:38:41: Reserv2                                       :0x0
14:38:41: Device Size C_SIZE                            :0xedc8
14:38:41: Reserv3                                       :0x0
14:38:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:41: Reserv4                                       :0x0
14:38:41: Write Speed Factor R2W_FACTOR                 :0x2
14:38:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:41: FILE_FORMAT_GRP                               :0x0
14:38:41: COPY flag                                     :0x1
14:38:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:41: File_Format                                   :0x0
14:38:41: CRC                                           :0x0
14:38:41: ####CSD Registe Values####  

14:38:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABDE0>, <py_sfcl.CommandDataDefinition object at 0x06666090>) , Command count = 3196 ] 
14:38:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066668A0>, <py_sfcl.CommandDataDefinition object at 0x06685BA0>) , Command count = 3197 ] 
14:38:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:41: [DVTCommonLib]### Erase :Erase API Called
14:38:41: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x12028 with Blockcount:0x2001
14:38:42: [ EraseLba(0x12028, 0x2001) , Command count = 3198 ] 
14:38:42: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x12028 with Blockcount:0x2001 

14:38:42: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 18
14:38:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x14028 to EndLba:0x14030 with Increment Pattern
14:38:42: [ WrLbaNoData(0x14028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3199 ] 
14:38:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x14028 to EndLba:0x14030 with Increment Pattern 

14:38:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A4B0>, <py_sfcl.CommandDataDefinition object at 0x0667C510>) , Command count = 3200 ] 
14:38:42: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB630>, <py_sfcl.CommandDataDefinition object at 0x0667CFC0>) , Command count = 3201 ] 
14:38:42: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:42: [DVTCommonLib]###  R1bCommandAbort called
14:38:42: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x17, False) , Command count = 3202 ] 
14:38:42: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:42: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:44: Host Frequency set to 25000 KHz
14:38:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:44: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C150>, 0x0, True) , Command count = 3203 ] 
14:38:44: [GO18_globalSetVolt]### Host voltage value is set.
14:38:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F540>, 0x0, False) , Command count = 3204 ] 
14:38:44: [GO18_globalSetVolt]### Host voltage value is set.
14:38:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3205 ] 
14:38:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3206 ] 
14:38:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3207 ] 
14:38:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C9C0>, <py_sfcl.CommandDataDefinition object at 0x0667CF30>) , Command count = 3208 ] 
14:38:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F2D0>, <py_sfcl.CommandDataDefinition object at 0x0667A660>) , Command count = 3209 ] 
14:38:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:44: [ SetCardRCA(0x1, 0xD555) , Command count = 3210 ] 
14:38:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:44: Host Frequency set to 25000 KHz
14:38:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:44: ####CSD Registe 2.0 Values####
14:38:44: CSD_STRUCTURE                                 :0x1
14:38:44: Reserv1                                       :0x0
14:38:44: Time Access 1 TAAC                            :0xe
14:38:44: Time Access 2 NSAC*100                        :0x0
14:38:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:44: Card Command Classess CCC                     :0x5b5
14:38:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:44: DSR(driver stage register)  DSR_IMP           :0x0
14:38:44: Reserv2                                       :0x0
14:38:44: Device Size C_SIZE                            :0xedc8
14:38:44: Reserv3                                       :0x0
14:38:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:44: Reserv4                                       :0x0
14:38:44: Write Speed Factor R2W_FACTOR                 :0x2
14:38:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:44: FILE_FORMAT_GRP                               :0x0
14:38:44: COPY flag                                     :0x1
14:38:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:44: File_Format                                   :0x0
14:38:44: CRC                                           :0x0
14:38:44: ####CSD Registe Values####  

14:38:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:44: [GetSCRRegisterEntry] Passed
14:38:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:44: Data_Status_After Erases          : 0
14:38:44: CPRM Security Support             : No Security
14:38:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:44: Spec. Version                     : Version 3.0X
14:38:44: Extended Security Support         : Extended_Security_Not_Supported
14:38:44: Command Support                   : COMMAND_SUPPORT
14:38:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB660>, <py_sfcl.CommandDataDefinition object at 0x0667CAB0>) , Command count = 3211 ] 
14:38:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C990>, <py_sfcl.CommandDataDefinition object at 0x0667A3C0>) , Command count = 3212 ] 
14:38:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:44: [ SetBusWidth(0x4) , Command count = 3213 ] 
14:38:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C210>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3214 ] 
14:38:44: Protected Area Size 0x28000
14:38:44: Bus Width           2
14:38:44: Secure Mode         0
14:38:44: Speed  Class        4
14:38:44: Perf Move           0
14:38:44: Au Size             9
14:38:44: Erase Size          15
14:38:44: Erase Timeout       1
14:38:44: Erase offset        1
14:38:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3215 ] 
14:38:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:44: Host Frequency set to 100000 KHz
14:38:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:44: ####CSD Registe 2.0 Values####
14:38:44: CSD_STRUCTURE                                 :0x1
14:38:44: Reserv1                                       :0x0
14:38:44: Time Access 1 TAAC                            :0xe
14:38:44: Time Access 2 NSAC*100                        :0x0
14:38:44: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:44: Card Command Classess CCC                     :0x5b5
14:38:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:44: DSR(driver stage register)  DSR_IMP           :0x0
14:38:44: Reserv2                                       :0x0
14:38:44: Device Size C_SIZE                            :0xedc8
14:38:44: Reserv3                                       :0x0
14:38:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:44: Reserv4                                       :0x0
14:38:44: Write Speed Factor R2W_FACTOR                 :0x2
14:38:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:44: FILE_FORMAT_GRP                               :0x0
14:38:44: COPY flag                                     :0x1
14:38:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:44: File_Format                                   :0x0
14:38:44: CRC                                           :0x0
14:38:44: ####CSD Registe Values####  

14:38:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A810>, <py_sfcl.CommandDataDefinition object at 0x0667C6C0>) , Command count = 3216 ] 
14:38:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CBD0>, <py_sfcl.CommandDataDefinition object at 0x06685C30>) , Command count = 3217 ] 
14:38:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:44: [DVTCommonLib]### Erase :Erase API Called
14:38:44: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x14028 with Blockcount:0x2001
14:38:44: [ EraseLba(0x14028, 0x2001) , Command count = 3218 ] 
14:38:44: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x14028 with Blockcount:0x2001 

14:38:44: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 17
14:38:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x16028 to EndLba:0x16030 with Increment Pattern
14:38:44: [ WrLbaNoData(0x16028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3219 ] 
14:38:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x16028 to EndLba:0x16030 with Increment Pattern 

14:38:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F780>, <py_sfcl.CommandDataDefinition object at 0x0667C8A0>) , Command count = 3220 ] 
14:38:44: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CAE0>, <py_sfcl.CommandDataDefinition object at 0x0667CA20>) , Command count = 3221 ] 
14:38:44: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:44: [DVTCommonLib]###  R1bCommandAbort called
14:38:44: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xD, False) , Command count = 3222 ] 
14:38:44: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:44: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:47: Host Frequency set to 25000 KHz
14:38:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:47: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CB10>, 0x0, True) , Command count = 3223 ] 
14:38:47: [GO18_globalSetVolt]### Host voltage value is set.
14:38:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FAB0>, 0x0, False) , Command count = 3224 ] 
14:38:47: [GO18_globalSetVolt]### Host voltage value is set.
14:38:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3225 ] 
14:38:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3226 ] 
14:38:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3227 ] 
14:38:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F060>, <py_sfcl.CommandDataDefinition object at 0x0667FB10>) , Command count = 3228 ] 
14:38:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F360>, <py_sfcl.CommandDataDefinition object at 0x0667CE40>) , Command count = 3229 ] 
14:38:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:47: [ SetCardRCA(0x1, 0xD555) , Command count = 3230 ] 
14:38:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:47: Host Frequency set to 25000 KHz
14:38:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:47: ####CSD Registe 2.0 Values####
14:38:47: CSD_STRUCTURE                                 :0x1
14:38:47: Reserv1                                       :0x0
14:38:47: Time Access 1 TAAC                            :0xe
14:38:47: Time Access 2 NSAC*100                        :0x0
14:38:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:47: Card Command Classess CCC                     :0x5b5
14:38:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:47: DSR(driver stage register)  DSR_IMP           :0x0
14:38:47: Reserv2                                       :0x0
14:38:47: Device Size C_SIZE                            :0xedc8
14:38:47: Reserv3                                       :0x0
14:38:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:47: Reserv4                                       :0x0
14:38:47: Write Speed Factor R2W_FACTOR                 :0x2
14:38:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:47: FILE_FORMAT_GRP                               :0x0
14:38:47: COPY flag                                     :0x1
14:38:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:47: File_Format                                   :0x0
14:38:47: CRC                                           :0x0
14:38:47: ####CSD Registe Values####  

14:38:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:47: [GetSCRRegisterEntry] Passed
14:38:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:47: Data_Status_After Erases          : 0
14:38:47: CPRM Security Support             : No Security
14:38:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:47: Spec. Version                     : Version 3.0X
14:38:47: Extended Security Support         : Extended_Security_Not_Supported
14:38:47: Command Support                   : COMMAND_SUPPORT
14:38:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AED0>, <py_sfcl.CommandDataDefinition object at 0x0667C5A0>) , Command count = 3231 ] 
14:38:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F6C0>, <py_sfcl.CommandDataDefinition object at 0x0667F270>) , Command count = 3232 ] 
14:38:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:47: [ SetBusWidth(0x4) , Command count = 3233 ] 
14:38:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667CED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3234 ] 
14:38:47: Protected Area Size 0x28000
14:38:47: Bus Width           2
14:38:47: Secure Mode         0
14:38:47: Speed  Class        4
14:38:47: Perf Move           0
14:38:47: Au Size             9
14:38:47: Erase Size          15
14:38:47: Erase Timeout       1
14:38:47: Erase offset        1
14:38:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3235 ] 
14:38:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:47: Host Frequency set to 100000 KHz
14:38:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:47: ####CSD Registe 2.0 Values####
14:38:47: CSD_STRUCTURE                                 :0x1
14:38:47: Reserv1                                       :0x0
14:38:47: Time Access 1 TAAC                            :0xe
14:38:47: Time Access 2 NSAC*100                        :0x0
14:38:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:47: Card Command Classess CCC                     :0x5b5
14:38:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:47: DSR(driver stage register)  DSR_IMP           :0x0
14:38:47: Reserv2                                       :0x0
14:38:47: Device Size C_SIZE                            :0xedc8
14:38:47: Reserv3                                       :0x0
14:38:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:47: Reserv4                                       :0x0
14:38:47: Write Speed Factor R2W_FACTOR                 :0x2
14:38:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:47: FILE_FORMAT_GRP                               :0x0
14:38:47: COPY flag                                     :0x1
14:38:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:47: File_Format                                   :0x0
14:38:47: CRC                                           :0x0
14:38:47: ####CSD Registe Values####  

14:38:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F4B0>, <py_sfcl.CommandDataDefinition object at 0x0667C210>) , Command count = 3236 ] 
14:38:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ADE0>, <py_sfcl.CommandDataDefinition object at 0x06685AE0>) , Command count = 3237 ] 
14:38:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:47: [DVTCommonLib]### Erase :Erase API Called
14:38:47: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x16028 with Blockcount:0x2001
14:38:47: [ EraseLba(0x16028, 0x2001) , Command count = 3238 ] 
14:38:47: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x16028 with Blockcount:0x2001 

14:38:47: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 16
14:38:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x18028 to EndLba:0x18030 with Increment Pattern
14:38:47: [ WrLbaNoData(0x18028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3239 ] 
14:38:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x18028 to EndLba:0x18030 with Increment Pattern 

14:38:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CBA0>, <py_sfcl.CommandDataDefinition object at 0x0667F600>) , Command count = 3240 ] 
14:38:47: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ADB0>, <py_sfcl.CommandDataDefinition object at 0x0667F6F0>) , Command count = 3241 ] 
14:38:47: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:47: [DVTCommonLib]###  R1bCommandAbort called
14:38:47: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x18, False) , Command count = 3242 ] 
14:38:47: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:49: Host Frequency set to 25000 KHz
14:38:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667ABD0>, 0x0, True) , Command count = 3243 ] 
14:38:49: [GO18_globalSetVolt]### Host voltage value is set.
14:38:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683480>, 0x0, False) , Command count = 3244 ] 
14:38:49: [GO18_globalSetVolt]### Host voltage value is set.
14:38:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3245 ] 
14:38:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3246 ] 
14:38:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3247 ] 
14:38:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AEA0>, <py_sfcl.CommandDataDefinition object at 0x0667F900>) , Command count = 3248 ] 
14:38:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066832D0>, <py_sfcl.CommandDataDefinition object at 0x0667C930>) , Command count = 3249 ] 
14:38:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:50: [ SetCardRCA(0x1, 0xD555) , Command count = 3250 ] 
14:38:50: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:50: Host Frequency set to 25000 KHz
14:38:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:50: ####CSD Registe 2.0 Values####
14:38:50: CSD_STRUCTURE                                 :0x1
14:38:50: Reserv1                                       :0x0
14:38:50: Time Access 1 TAAC                            :0xe
14:38:50: Time Access 2 NSAC*100                        :0x0
14:38:50: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:50: Card Command Classess CCC                     :0x5b5
14:38:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:50: DSR(driver stage register)  DSR_IMP           :0x0
14:38:50: Reserv2                                       :0x0
14:38:50: Device Size C_SIZE                            :0xedc8
14:38:50: Reserv3                                       :0x0
14:38:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:50: Reserv4                                       :0x0
14:38:50: Write Speed Factor R2W_FACTOR                 :0x2
14:38:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:50: FILE_FORMAT_GRP                               :0x0
14:38:50: COPY flag                                     :0x1
14:38:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:50: File_Format                                   :0x0
14:38:50: CRC                                           :0x0
14:38:50: ####CSD Registe Values####  

14:38:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:50: [GetSCRRegisterEntry] Passed
14:38:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:50: Data_Status_After Erases          : 0
14:38:50: CPRM Security Support             : No Security
14:38:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:50: Spec. Version                     : Version 3.0X
14:38:50: Extended Security Support         : Extended_Security_Not_Supported
14:38:50: Command Support                   : COMMAND_SUPPORT
14:38:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FCC0>, <py_sfcl.CommandDataDefinition object at 0x0667F5D0>) , Command count = 3251 ] 
14:38:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F690>, <py_sfcl.CommandDataDefinition object at 0x0667C4B0>) , Command count = 3252 ] 
14:38:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:50: [ SetBusWidth(0x4) , Command count = 3253 ] 
14:38:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3254 ] 
14:38:50: Protected Area Size 0x28000
14:38:50: Bus Width           2
14:38:50: Secure Mode         0
14:38:50: Speed  Class        4
14:38:50: Perf Move           0
14:38:50: Au Size             9
14:38:50: Erase Size          15
14:38:50: Erase Timeout       1
14:38:50: Erase offset        1
14:38:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3255 ] 
14:38:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:50: Host Frequency set to 100000 KHz
14:38:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:50: ####CSD Registe 2.0 Values####
14:38:50: CSD_STRUCTURE                                 :0x1
14:38:50: Reserv1                                       :0x0
14:38:50: Time Access 1 TAAC                            :0xe
14:38:50: Time Access 2 NSAC*100                        :0x0
14:38:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:50: Card Command Classess CCC                     :0x5b5
14:38:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:50: DSR(driver stage register)  DSR_IMP           :0x0
14:38:50: Reserv2                                       :0x0
14:38:50: Device Size C_SIZE                            :0xedc8
14:38:50: Reserv3                                       :0x0
14:38:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:50: Reserv4                                       :0x0
14:38:50: Write Speed Factor R2W_FACTOR                 :0x2
14:38:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:50: FILE_FORMAT_GRP                               :0x0
14:38:50: COPY flag                                     :0x1
14:38:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:50: File_Format                                   :0x0
14:38:50: CRC                                           :0x0
14:38:50: ####CSD Registe Values####  

14:38:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683570>, <py_sfcl.CommandDataDefinition object at 0x0667FC00>) , Command count = 3256 ] 
14:38:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AC90>, <py_sfcl.CommandDataDefinition object at 0x06685900>) , Command count = 3257 ] 
14:38:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:50: [DVTCommonLib]### Erase :Erase API Called
14:38:50: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x18028 with Blockcount:0x2001
14:38:50: [ EraseLba(0x18028, 0x2001) , Command count = 3258 ] 
14:38:50: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x18028 with Blockcount:0x2001 

14:38:50: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 15
14:38:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1A028 to EndLba:0x1A030 with Increment Pattern
14:38:50: [ WrLbaNoData(0x1A028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3259 ] 
14:38:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1A028 to EndLba:0x1A030 with Increment Pattern 

14:38:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CE70>, <py_sfcl.CommandDataDefinition object at 0x0667FA80>) , Command count = 3260 ] 
14:38:50: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FA20>, <py_sfcl.CommandDataDefinition object at 0x0667F750>) , Command count = 3261 ] 
14:38:50: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:50: [DVTCommonLib]###  R1bCommandAbort called
14:38:50: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x20, False) , Command count = 3262 ] 
14:38:50: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:50: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:52: Host Frequency set to 25000 KHz
14:38:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:52: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AE40>, 0x0, True) , Command count = 3263 ] 
14:38:52: [GO18_globalSetVolt]### Host voltage value is set.
14:38:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x066839F0>, 0x0, False) , Command count = 3264 ] 
14:38:52: [GO18_globalSetVolt]### Host voltage value is set.
14:38:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3265 ] 
14:38:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3266 ] 
14:38:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3267 ] 
14:38:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683A50>, <py_sfcl.CommandDataDefinition object at 0x0667FD80>) , Command count = 3268 ] 
14:38:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683990>, <py_sfcl.CommandDataDefinition object at 0x0667F930>) , Command count = 3269 ] 
14:38:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:52: [ SetCardRCA(0x1, 0xD555) , Command count = 3270 ] 
14:38:52: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:53: Host Frequency set to 25000 KHz
14:38:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:53: ####CSD Registe 2.0 Values####
14:38:53: CSD_STRUCTURE                                 :0x1
14:38:53: Reserv1                                       :0x0
14:38:53: Time Access 1 TAAC                            :0xe
14:38:53: Time Access 2 NSAC*100                        :0x0
14:38:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:53: Card Command Classess CCC                     :0x5b5
14:38:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:53: DSR(driver stage register)  DSR_IMP           :0x0
14:38:53: Reserv2                                       :0x0
14:38:53: Device Size C_SIZE                            :0xedc8
14:38:53: Reserv3                                       :0x0
14:38:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:53: Reserv4                                       :0x0
14:38:53: Write Speed Factor R2W_FACTOR                 :0x2
14:38:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:53: FILE_FORMAT_GRP                               :0x0
14:38:53: COPY flag                                     :0x1
14:38:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:53: File_Format                                   :0x0
14:38:53: CRC                                           :0x0
14:38:53: ####CSD Registe Values####  

14:38:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:53: [GetSCRRegisterEntry] Passed
14:38:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:53: Data_Status_After Erases          : 0
14:38:53: CPRM Security Support             : No Security
14:38:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:53: Spec. Version                     : Version 3.0X
14:38:53: Extended Security Support         : Extended_Security_Not_Supported
14:38:53: Command Support                   : COMMAND_SUPPORT
14:38:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FDE0>, <py_sfcl.CommandDataDefinition object at 0x0667FEA0>) , Command count = 3271 ] 
14:38:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683240>, <py_sfcl.CommandDataDefinition object at 0x06683390>) , Command count = 3272 ] 
14:38:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:53: [ SetBusWidth(0x4) , Command count = 3273 ] 
14:38:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3274 ] 
14:38:53: Protected Area Size 0x28000
14:38:53: Bus Width           2
14:38:53: Secure Mode         0
14:38:53: Speed  Class        4
14:38:53: Perf Move           0
14:38:53: Au Size             9
14:38:53: Erase Size          15
14:38:53: Erase Timeout       1
14:38:53: Erase offset        1
14:38:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3275 ] 
14:38:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:53: Host Frequency set to 100000 KHz
14:38:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:53: ####CSD Registe 2.0 Values####
14:38:53: CSD_STRUCTURE                                 :0x1
14:38:53: Reserv1                                       :0x0
14:38:53: Time Access 1 TAAC                            :0xe
14:38:53: Time Access 2 NSAC*100                        :0x0
14:38:53: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:53: Card Command Classess CCC                     :0x5b5
14:38:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:53: DSR(driver stage register)  DSR_IMP           :0x0
14:38:53: Reserv2                                       :0x0
14:38:53: Device Size C_SIZE                            :0xedc8
14:38:53: Reserv3                                       :0x0
14:38:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:53: Reserv4                                       :0x0
14:38:53: Write Speed Factor R2W_FACTOR                 :0x2
14:38:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:53: FILE_FORMAT_GRP                               :0x0
14:38:53: COPY flag                                     :0x1
14:38:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:53: File_Format                                   :0x0
14:38:53: CRC                                           :0x0
14:38:53: ####CSD Registe Values####  

14:38:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066833F0>, <py_sfcl.CommandDataDefinition object at 0x0667F3F0>) , Command count = 3276 ] 
14:38:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F240>, <py_sfcl.CommandDataDefinition object at 0x0667C360>) , Command count = 3277 ] 
14:38:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:53: [DVTCommonLib]### Erase :Erase API Called
14:38:53: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1A028 with Blockcount:0x2001
14:38:53: [ EraseLba(0x1A028, 0x2001) , Command count = 3278 ] 
14:38:53: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1A028 with Blockcount:0x2001 

14:38:53: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 14
14:38:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1C028 to EndLba:0x1C030 with Increment Pattern
14:38:53: [ WrLbaNoData(0x1C028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3279 ] 
14:38:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1C028 to EndLba:0x1C030 with Increment Pattern 

14:38:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE70>, <py_sfcl.CommandDataDefinition object at 0x06683540>) , Command count = 3280 ] 
14:38:53: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CD20>, <py_sfcl.CommandDataDefinition object at 0x0667F090>) , Command count = 3281 ] 
14:38:53: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:53: [DVTCommonLib]###  R1bCommandAbort called
14:38:53: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x22, False) , Command count = 3282 ] 
14:38:53: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:53: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:55: Host Frequency set to 25000 KHz
14:38:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683840>, 0x0, True) , Command count = 3283 ] 
14:38:55: [GO18_globalSetVolt]### Host voltage value is set.
14:38:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x01E42840>, 0x0, False) , Command count = 3284 ] 
14:38:55: [GO18_globalSetVolt]### Host voltage value is set.
14:38:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3285 ] 
14:38:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3286 ] 
14:38:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3287 ] 
14:38:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C870>, <py_sfcl.CommandDataDefinition object at 0x06683510>) , Command count = 3288 ] 
14:38:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6F90>, <py_sfcl.CommandDataDefinition object at 0x0667FF60>) , Command count = 3289 ] 
14:38:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:55: [ SetCardRCA(0x1, 0xD555) , Command count = 3290 ] 
14:38:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:55: Host Frequency set to 25000 KHz
14:38:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:55: ####CSD Registe 2.0 Values####
14:38:55: CSD_STRUCTURE                                 :0x1
14:38:55: Reserv1                                       :0x0
14:38:55: Time Access 1 TAAC                            :0xe
14:38:55: Time Access 2 NSAC*100                        :0x0
14:38:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:55: Card Command Classess CCC                     :0x5b5
14:38:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:55: DSR(driver stage register)  DSR_IMP           :0x0
14:38:55: Reserv2                                       :0x0
14:38:55: Device Size C_SIZE                            :0xedc8
14:38:55: Reserv3                                       :0x0
14:38:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:55: Reserv4                                       :0x0
14:38:55: Write Speed Factor R2W_FACTOR                 :0x2
14:38:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:55: FILE_FORMAT_GRP                               :0x0
14:38:55: COPY flag                                     :0x1
14:38:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:55: File_Format                                   :0x0
14:38:55: CRC                                           :0x0
14:38:55: ####CSD Registe Values####  

14:38:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:55: [GetSCRRegisterEntry] Passed
14:38:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:55: Data_Status_After Erases          : 0
14:38:55: CPRM Security Support             : No Security
14:38:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:55: Spec. Version                     : Version 3.0X
14:38:55: Extended Security Support         : Extended_Security_Not_Supported
14:38:55: Command Support                   : COMMAND_SUPPORT
14:38:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683270>, <py_sfcl.CommandDataDefinition object at 0x06683BD0>) , Command count = 3291 ] 
14:38:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066835D0>, <py_sfcl.CommandDataDefinition object at 0x066832A0>) , Command count = 3292 ] 
14:38:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:55: [ SetBusWidth(0x4) , Command count = 3293 ] 
14:38:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3294 ] 
14:38:55: Protected Area Size 0x28000
14:38:55: Bus Width           2
14:38:55: Secure Mode         0
14:38:55: Speed  Class        4
14:38:55: Perf Move           0
14:38:55: Au Size             9
14:38:55: Erase Size          15
14:38:55: Erase Timeout       1
14:38:55: Erase offset        1
14:38:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3295 ] 
14:38:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:55: Host Frequency set to 100000 KHz
14:38:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:55: ####CSD Registe 2.0 Values####
14:38:55: CSD_STRUCTURE                                 :0x1
14:38:55: Reserv1                                       :0x0
14:38:55: Time Access 1 TAAC                            :0xe
14:38:55: Time Access 2 NSAC*100                        :0x0
14:38:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:55: Card Command Classess CCC                     :0x5b5
14:38:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:55: DSR(driver stage register)  DSR_IMP           :0x0
14:38:55: Reserv2                                       :0x0
14:38:55: Device Size C_SIZE                            :0xedc8
14:38:55: Reserv3                                       :0x0
14:38:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:55: Reserv4                                       :0x0
14:38:55: Write Speed Factor R2W_FACTOR                 :0x2
14:38:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:55: FILE_FORMAT_GRP                               :0x0
14:38:55: COPY flag                                     :0x1
14:38:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:55: File_Format                                   :0x0
14:38:55: CRC                                           :0x0
14:38:55: ####CSD Registe Values####  

14:38:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683EA0>, <py_sfcl.CommandDataDefinition object at 0x0667F120>) , Command count = 3296 ] 
14:38:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683B10>, <py_sfcl.CommandDataDefinition object at 0x0667F7B0>) , Command count = 3297 ] 
14:38:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:56: [DVTCommonLib]### Erase :Erase API Called
14:38:56: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1C028 with Blockcount:0x2001
14:38:56: [ EraseLba(0x1C028, 0x2001) , Command count = 3298 ] 
14:38:56: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1C028 with Blockcount:0x2001 

14:38:56: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 13
14:38:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1E028 to EndLba:0x1E030 with Increment Pattern
14:38:56: [ WrLbaNoData(0x1E028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3299 ] 
14:38:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1E028 to EndLba:0x1E030 with Increment Pattern 

14:38:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066839C0>, <py_sfcl.CommandDataDefinition object at 0x06683E40>) , Command count = 3300 ] 
14:38:56: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683960>, <py_sfcl.CommandDataDefinition object at 0x066836F0>) , Command count = 3301 ] 
14:38:56: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:56: [DVTCommonLib]###  R1bCommandAbort called
14:38:56: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x27, False) , Command count = 3302 ] 
14:38:56: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:56: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:58: Host Frequency set to 25000 KHz
14:38:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:58: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683B70>, 0x0, True) , Command count = 3303 ] 
14:38:58: [GO18_globalSetVolt]### Host voltage value is set.
14:38:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683C90>, 0x0, False) , Command count = 3304 ] 
14:38:58: [GO18_globalSetVolt]### Host voltage value is set.
14:38:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3305 ] 
14:38:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3306 ] 
14:38:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3307 ] 
14:38:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F5A0>, <py_sfcl.CommandDataDefinition object at 0x06683E70>) , Command count = 3308 ] 
14:38:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683E10>, <py_sfcl.CommandDataDefinition object at 0x06683D50>) , Command count = 3309 ] 
14:38:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:58: [ SetCardRCA(0x1, 0xD555) , Command count = 3310 ] 
14:38:58: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:58: Host Frequency set to 25000 KHz
14:38:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:58: ####CSD Registe 2.0 Values####
14:38:58: CSD_STRUCTURE                                 :0x1
14:38:58: Reserv1                                       :0x0
14:38:58: Time Access 1 TAAC                            :0xe
14:38:58: Time Access 2 NSAC*100                        :0x0
14:38:58: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:58: Card Command Classess CCC                     :0x5b5
14:38:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:58: DSR(driver stage register)  DSR_IMP           :0x0
14:38:58: Reserv2                                       :0x0
14:38:58: Device Size C_SIZE                            :0xedc8
14:38:58: Reserv3                                       :0x0
14:38:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:58: Reserv4                                       :0x0
14:38:58: Write Speed Factor R2W_FACTOR                 :0x2
14:38:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:58: FILE_FORMAT_GRP                               :0x0
14:38:58: COPY flag                                     :0x1
14:38:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:58: File_Format                                   :0x0
14:38:58: CRC                                           :0x0
14:38:58: ####CSD Registe Values####  

14:38:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:58: [GetSCRRegisterEntry] Passed
14:38:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:58: Data_Status_After Erases          : 0
14:38:58: CPRM Security Support             : No Security
14:38:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:58: Spec. Version                     : Version 3.0X
14:38:58: Extended Security Support         : Extended_Security_Not_Supported
14:38:58: Command Support                   : COMMAND_SUPPORT
14:38:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FD50>, <py_sfcl.CommandDataDefinition object at 0x06683CC0>) , Command count = 3311 ] 
14:38:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05EE6B70>, <py_sfcl.CommandDataDefinition object at 0x0667FED0>) , Command count = 3312 ] 
14:38:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:58: [ SetBusWidth(0x4) , Command count = 3313 ] 
14:38:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3314 ] 
14:38:58: Protected Area Size 0x28000
14:38:58: Bus Width           2
14:38:58: Secure Mode         0
14:38:58: Speed  Class        4
14:38:58: Perf Move           0
14:38:58: Au Size             9
14:38:58: Erase Size          15
14:38:58: Erase Timeout       1
14:38:58: Erase offset        1
14:38:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3315 ] 
14:38:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:58: Host Frequency set to 100000 KHz
14:38:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:58: ####CSD Registe 2.0 Values####
14:38:58: CSD_STRUCTURE                                 :0x1
14:38:58: Reserv1                                       :0x0
14:38:58: Time Access 1 TAAC                            :0xe
14:38:58: Time Access 2 NSAC*100                        :0x0
14:38:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:58: Card Command Classess CCC                     :0x5b5
14:38:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:58: DSR(driver stage register)  DSR_IMP           :0x0
14:38:58: Reserv2                                       :0x0
14:38:58: Device Size C_SIZE                            :0xedc8
14:38:58: Reserv3                                       :0x0
14:38:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:58: Reserv4                                       :0x0
14:38:58: Write Speed Factor R2W_FACTOR                 :0x2
14:38:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:58: FILE_FORMAT_GRP                               :0x0
14:38:58: COPY flag                                     :0x1
14:38:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:58: File_Format                                   :0x0
14:38:58: CRC                                           :0x0
14:38:58: ####CSD Registe Values####  

14:38:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC0480>, <py_sfcl.CommandDataDefinition object at 0x06683DE0>) , Command count = 3316 ] 
14:38:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683DB0>, <py_sfcl.CommandDataDefinition object at 0x066856F0>) , Command count = 3317 ] 
14:38:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:58: [DVTCommonLib]### Erase :Erase API Called
14:38:58: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1E028 with Blockcount:0x2001
14:38:58: [ EraseLba(0x1E028, 0x2001) , Command count = 3318 ] 
14:38:58: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1E028 with Blockcount:0x2001 

14:38:58: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 12
14:38:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x20028 to EndLba:0x20030 with Increment Pattern
14:38:58: [ WrLbaNoData(0x20028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3319 ] 
14:38:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x20028 to EndLba:0x20030 with Increment Pattern 

14:38:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AF90>, <py_sfcl.CommandDataDefinition object at 0x066833C0>) , Command count = 3320 ] 
14:38:58: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:38:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FC60>, <py_sfcl.CommandDataDefinition object at 0x06685330>) , Command count = 3321 ] 
14:38:58: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:38:58: [DVTCommonLib]###  R1bCommandAbort called
14:38:58: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2C, False) , Command count = 3322 ] 
14:38:58: [DVTCommonLib]###  R1bCommandAbort Completed 

14:38:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:00: Host Frequency set to 25000 KHz
14:39:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683060>, 0x0, True) , Command count = 3323 ] 
14:39:01: [GO18_globalSetVolt]### Host voltage value is set.
14:39:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FEDAE0>, 0x0, False) , Command count = 3324 ] 
14:39:01: [GO18_globalSetVolt]### Host voltage value is set.
14:39:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3325 ] 
14:39:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3326 ] 
14:39:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3327 ] 
14:39:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8F00>, <py_sfcl.CommandDataDefinition object at 0x05FE8C60>) , Command count = 3328 ] 
14:39:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602B6C0>, <py_sfcl.CommandDataDefinition object at 0x06685D50>) , Command count = 3329 ] 
14:39:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:01: [ SetCardRCA(0x1, 0xD555) , Command count = 3330 ] 
14:39:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:01: Host Frequency set to 25000 KHz
14:39:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:01: ####CSD Registe 2.0 Values####
14:39:01: CSD_STRUCTURE                                 :0x1
14:39:01: Reserv1                                       :0x0
14:39:01: Time Access 1 TAAC                            :0xe
14:39:01: Time Access 2 NSAC*100                        :0x0
14:39:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:01: Card Command Classess CCC                     :0x5b5
14:39:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:01: DSR(driver stage register)  DSR_IMP           :0x0
14:39:01: Reserv2                                       :0x0
14:39:01: Device Size C_SIZE                            :0xedc8
14:39:01: Reserv3                                       :0x0
14:39:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:01: Reserv4                                       :0x0
14:39:01: Write Speed Factor R2W_FACTOR                 :0x2
14:39:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:01: FILE_FORMAT_GRP                               :0x0
14:39:01: COPY flag                                     :0x1
14:39:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:01: File_Format                                   :0x0
14:39:01: CRC                                           :0x0
14:39:01: ####CSD Registe Values####  

14:39:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:01: [GetSCRRegisterEntry] Passed
14:39:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:01: Data_Status_After Erases          : 0
14:39:01: CPRM Security Support             : No Security
14:39:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:01: Spec. Version                     : Version 3.0X
14:39:01: Extended Security Support         : Extended_Security_Not_Supported
14:39:01: Command Support                   : COMMAND_SUPPORT
14:39:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066831E0>, <py_sfcl.CommandDataDefinition object at 0x06685690>) , Command count = 3331 ] 
14:39:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDADB0>, <py_sfcl.CommandDataDefinition object at 0x06685960>) , Command count = 3332 ] 
14:39:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:01: [ SetBusWidth(0x4) , Command count = 3333 ] 
14:39:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066852D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3334 ] 
14:39:01: Protected Area Size 0x28000
14:39:01: Bus Width           2
14:39:01: Secure Mode         0
14:39:01: Speed  Class        4
14:39:01: Perf Move           0
14:39:01: Au Size             9
14:39:01: Erase Size          15
14:39:01: Erase Timeout       1
14:39:01: Erase offset        1
14:39:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3335 ] 
14:39:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:01: Host Frequency set to 100000 KHz
14:39:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:01: ####CSD Registe 2.0 Values####
14:39:01: CSD_STRUCTURE                                 :0x1
14:39:01: Reserv1                                       :0x0
14:39:01: Time Access 1 TAAC                            :0xe
14:39:01: Time Access 2 NSAC*100                        :0x0
14:39:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:01: Card Command Classess CCC                     :0x5b5
14:39:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:01: DSR(driver stage register)  DSR_IMP           :0x0
14:39:01: Reserv2                                       :0x0
14:39:01: Device Size C_SIZE                            :0xedc8
14:39:01: Reserv3                                       :0x0
14:39:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:01: Reserv4                                       :0x0
14:39:01: Write Speed Factor R2W_FACTOR                 :0x2
14:39:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:01: FILE_FORMAT_GRP                               :0x0
14:39:01: COPY flag                                     :0x1
14:39:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:01: File_Format                                   :0x0
14:39:01: CRC                                           :0x0
14:39:01: ####CSD Registe Values####  

14:39:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BE10>, <py_sfcl.CommandDataDefinition object at 0x0667FF30>) , Command count = 3336 ] 
14:39:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683F00>, <py_sfcl.CommandDataDefinition object at 0x066854B0>) , Command count = 3337 ] 
14:39:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:01: [DVTCommonLib]### Erase :Erase API Called
14:39:01: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x20028 with Blockcount:0x2001
14:39:01: [ EraseLba(0x20028, 0x2001) , Command count = 3338 ] 
14:39:01: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x20028 with Blockcount:0x2001 

14:39:01: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 11
14:39:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x22028 to EndLba:0x22030 with Increment Pattern
14:39:01: [ WrLbaNoData(0x22028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3339 ] 
14:39:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x22028 to EndLba:0x22030 with Increment Pattern 

14:39:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032840>, <py_sfcl.CommandDataDefinition object at 0x06666D50>) , Command count = 3340 ] 
14:39:01: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683420>, <py_sfcl.CommandDataDefinition object at 0x06685A50>) , Command count = 3341 ] 
14:39:01: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:01: [DVTCommonLib]###  R1bCommandAbort called
14:39:01: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2, False) , Command count = 3342 ] 
14:39:01: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:01: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:03: Host Frequency set to 25000 KHz
14:39:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:03: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x066831B0>, 0x0, True) , Command count = 3343 ] 
14:39:03: [GO18_globalSetVolt]### Host voltage value is set.
14:39:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x06032AB0>, 0x0, False) , Command count = 3344 ] 
14:39:03: [GO18_globalSetVolt]### Host voltage value is set.
14:39:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3345 ] 
14:39:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3346 ] 
14:39:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3347 ] 
14:39:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032BA0>, <py_sfcl.CommandDataDefinition object at 0x06666720>) , Command count = 3348 ] 
14:39:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032B40>, <py_sfcl.CommandDataDefinition object at 0x066851E0>) , Command count = 3349 ] 
14:39:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:04: [ SetCardRCA(0x1, 0xD555) , Command count = 3350 ] 
14:39:04: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:04: Host Frequency set to 25000 KHz
14:39:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:04: ####CSD Registe 2.0 Values####
14:39:04: CSD_STRUCTURE                                 :0x1
14:39:04: Reserv1                                       :0x0
14:39:04: Time Access 1 TAAC                            :0xe
14:39:04: Time Access 2 NSAC*100                        :0x0
14:39:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:04: Card Command Classess CCC                     :0x5b5
14:39:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:04: DSR(driver stage register)  DSR_IMP           :0x0
14:39:04: Reserv2                                       :0x0
14:39:04: Device Size C_SIZE                            :0xedc8
14:39:04: Reserv3                                       :0x0
14:39:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:04: Reserv4                                       :0x0
14:39:04: Write Speed Factor R2W_FACTOR                 :0x2
14:39:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:04: FILE_FORMAT_GRP                               :0x0
14:39:04: COPY flag                                     :0x1
14:39:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:04: File_Format                                   :0x0
14:39:04: CRC                                           :0x0
14:39:04: ####CSD Registe Values####  

14:39:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:04: [GetSCRRegisterEntry] Passed
14:39:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:04: Data_Status_After Erases          : 0
14:39:04: CPRM Security Support             : No Security
14:39:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:04: Spec. Version                     : Version 3.0X
14:39:04: Extended Security Support         : Extended_Security_Not_Supported
14:39:04: Command Support                   : COMMAND_SUPPORT
14:39:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683090>, <py_sfcl.CommandDataDefinition object at 0x06666FC0>) , Command count = 3351 ] 
14:39:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572060>, <py_sfcl.CommandDataDefinition object at 0x06666BA0>) , Command count = 3352 ] 
14:39:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:04: [ SetBusWidth(0x4) , Command count = 3353 ] 
14:39:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066666F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3354 ] 
14:39:04: Protected Area Size 0x28000
14:39:04: Bus Width           2
14:39:04: Secure Mode         0
14:39:04: Speed  Class        4
14:39:04: Perf Move           0
14:39:04: Au Size             9
14:39:04: Erase Size          15
14:39:04: Erase Timeout       1
14:39:04: Erase offset        1
14:39:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3355 ] 
14:39:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:04: Host Frequency set to 100000 KHz
14:39:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:04: ####CSD Registe 2.0 Values####
14:39:04: CSD_STRUCTURE                                 :0x1
14:39:04: Reserv1                                       :0x0
14:39:04: Time Access 1 TAAC                            :0xe
14:39:04: Time Access 2 NSAC*100                        :0x0
14:39:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:04: Card Command Classess CCC                     :0x5b5
14:39:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:04: DSR(driver stage register)  DSR_IMP           :0x0
14:39:04: Reserv2                                       :0x0
14:39:04: Device Size C_SIZE                            :0xedc8
14:39:04: Reserv3                                       :0x0
14:39:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:04: Reserv4                                       :0x0
14:39:04: Write Speed Factor R2W_FACTOR                 :0x2
14:39:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:04: FILE_FORMAT_GRP                               :0x0
14:39:04: COPY flag                                     :0x1
14:39:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:04: File_Format                                   :0x0
14:39:04: CRC                                           :0x0
14:39:04: ####CSD Registe Values####  

14:39:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BF90>, <py_sfcl.CommandDataDefinition object at 0x06666570>) , Command count = 3356 ] 
14:39:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683450>, <py_sfcl.CommandDataDefinition object at 0x066852D0>) , Command count = 3357 ] 
14:39:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:04: [DVTCommonLib]### Erase :Erase API Called
14:39:04: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x22028 with Blockcount:0x2001
14:39:04: [ EraseLba(0x22028, 0x2001) , Command count = 3358 ] 
14:39:04: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x22028 with Blockcount:0x2001 

14:39:04: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 10
14:39:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x24028 to EndLba:0x24030 with Increment Pattern
14:39:04: [ WrLbaNoData(0x24028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3359 ] 
14:39:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x24028 to EndLba:0x24030 with Increment Pattern 

14:39:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F030>, <py_sfcl.CommandDataDefinition object at 0x066669C0>) , Command count = 3360 ] 
14:39:04: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683BA0>, <py_sfcl.CommandDataDefinition object at 0x06685480>) , Command count = 3361 ] 
14:39:04: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:04: [DVTCommonLib]###  R1bCommandAbort called
14:39:04: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x10, False) , Command count = 3362 ] 
14:39:04: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:06: Host Frequency set to 25000 KHz
14:39:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB180>, 0x0, True) , Command count = 3363 ] 
14:39:06: [GO18_globalSetVolt]### Host voltage value is set.
14:39:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB240>, 0x0, False) , Command count = 3364 ] 
14:39:06: [GO18_globalSetVolt]### Host voltage value is set.
14:39:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3365 ] 
14:39:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3366 ] 
14:39:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3367 ] 
14:39:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066667E0>, <py_sfcl.CommandDataDefinition object at 0x06666C60>) , Command count = 3368 ] 
14:39:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB480>, <py_sfcl.CommandDataDefinition object at 0x06685480>) , Command count = 3369 ] 
14:39:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:06: [ SetCardRCA(0x1, 0xD555) , Command count = 3370 ] 
14:39:06: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:07: Host Frequency set to 25000 KHz
14:39:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:07: ####CSD Registe 2.0 Values####
14:39:07: CSD_STRUCTURE                                 :0x1
14:39:07: Reserv1                                       :0x0
14:39:07: Time Access 1 TAAC                            :0xe
14:39:07: Time Access 2 NSAC*100                        :0x0
14:39:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:07: Card Command Classess CCC                     :0x5b5
14:39:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:07: DSR(driver stage register)  DSR_IMP           :0x0
14:39:07: Reserv2                                       :0x0
14:39:07: Device Size C_SIZE                            :0xedc8
14:39:07: Reserv3                                       :0x0
14:39:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:07: Reserv4                                       :0x0
14:39:07: Write Speed Factor R2W_FACTOR                 :0x2
14:39:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:07: FILE_FORMAT_GRP                               :0x0
14:39:07: COPY flag                                     :0x1
14:39:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:07: File_Format                                   :0x0
14:39:07: CRC                                           :0x0
14:39:07: ####CSD Registe Values####  

14:39:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:07: [GetSCRRegisterEntry] Passed
14:39:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:07: Data_Status_After Erases          : 0
14:39:07: CPRM Security Support             : No Security
14:39:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:07: Spec. Version                     : Version 3.0X
14:39:07: Extended Security Support         : Extended_Security_Not_Supported
14:39:07: Command Support                   : COMMAND_SUPPORT
14:39:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683930>, <py_sfcl.CommandDataDefinition object at 0x06666840>) , Command count = 3371 ] 
14:39:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BDB0>, <py_sfcl.CommandDataDefinition object at 0x06032B10>) , Command count = 3372 ] 
14:39:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:07: [ SetBusWidth(0x4) , Command count = 3373 ] 
14:39:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066ABF90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3374 ] 
14:39:07: Protected Area Size 0x28000
14:39:07: Bus Width           2
14:39:07: Secure Mode         0
14:39:07: Speed  Class        4
14:39:07: Perf Move           0
14:39:07: Au Size             9
14:39:07: Erase Size          15
14:39:07: Erase Timeout       1
14:39:07: Erase offset        1
14:39:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3375 ] 
14:39:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:07: Host Frequency set to 100000 KHz
14:39:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:07: ####CSD Registe 2.0 Values####
14:39:07: CSD_STRUCTURE                                 :0x1
14:39:07: Reserv1                                       :0x0
14:39:07: Time Access 1 TAAC                            :0xe
14:39:07: Time Access 2 NSAC*100                        :0x0
14:39:07: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:07: Card Command Classess CCC                     :0x5b5
14:39:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:07: DSR(driver stage register)  DSR_IMP           :0x0
14:39:07: Reserv2                                       :0x0
14:39:07: Device Size C_SIZE                            :0xedc8
14:39:07: Reserv3                                       :0x0
14:39:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:07: Reserv4                                       :0x0
14:39:07: Write Speed Factor R2W_FACTOR                 :0x2
14:39:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:07: FILE_FORMAT_GRP                               :0x0
14:39:07: COPY flag                                     :0x1
14:39:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:07: File_Format                                   :0x0
14:39:07: CRC                                           :0x0
14:39:07: ####CSD Registe Values####  

14:39:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BC60>, <py_sfcl.CommandDataDefinition object at 0x06683F30>) , Command count = 3376 ] 
14:39:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683B40>, <py_sfcl.CommandDataDefinition object at 0x06685060>) , Command count = 3377 ] 
14:39:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:07: [DVTCommonLib]### Erase :Erase API Called
14:39:07: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x24028 with Blockcount:0x2001
14:39:07: [ EraseLba(0x24028, 0x2001) , Command count = 3378 ] 
14:39:07: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x24028 with Blockcount:0x2001 

14:39:07: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 9
14:39:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x26028 to EndLba:0x26030 with Increment Pattern
14:39:07: [ WrLbaNoData(0x26028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3379 ] 
14:39:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x26028 to EndLba:0x26030 with Increment Pattern 

14:39:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6F30>, <py_sfcl.CommandDataDefinition object at 0x06666E70>) , Command count = 3380 ] 
14:39:07: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8CC0>, <py_sfcl.CommandDataDefinition object at 0x06685060>) , Command count = 3381 ] 
14:39:07: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:07: [DVTCommonLib]###  R1bCommandAbort called
14:39:07: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x8, False) , Command count = 3382 ] 
14:39:07: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:09: Host Frequency set to 25000 KHz
14:39:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666DE0>, 0x0, True) , Command count = 3383 ] 
14:39:09: [GO18_globalSetVolt]### Host voltage value is set.
14:39:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB2D0>, 0x0, False) , Command count = 3384 ] 
14:39:09: [GO18_globalSetVolt]### Host voltage value is set.
14:39:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3385 ] 
14:39:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3386 ] 
14:39:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3387 ] 
14:39:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666B10>, <py_sfcl.CommandDataDefinition object at 0x066AB5A0>) , Command count = 3388 ] 
14:39:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB3F0>, <py_sfcl.CommandDataDefinition object at 0x06685060>) , Command count = 3389 ] 
14:39:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:09: [ SetCardRCA(0x1, 0xD555) , Command count = 3390 ] 
14:39:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:09: Host Frequency set to 25000 KHz
14:39:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:09: ####CSD Registe 2.0 Values####
14:39:09: CSD_STRUCTURE                                 :0x1
14:39:09: Reserv1                                       :0x0
14:39:09: Time Access 1 TAAC                            :0xe
14:39:09: Time Access 2 NSAC*100                        :0x0
14:39:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:09: Card Command Classess CCC                     :0x5b5
14:39:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:09: DSR(driver stage register)  DSR_IMP           :0x0
14:39:09: Reserv2                                       :0x0
14:39:09: Device Size C_SIZE                            :0xedc8
14:39:09: Reserv3                                       :0x0
14:39:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:09: Reserv4                                       :0x0
14:39:09: Write Speed Factor R2W_FACTOR                 :0x2
14:39:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:09: FILE_FORMAT_GRP                               :0x0
14:39:09: COPY flag                                     :0x1
14:39:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:09: File_Format                                   :0x0
14:39:09: CRC                                           :0x0
14:39:09: ####CSD Registe Values####  

14:39:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:09: [GetSCRRegisterEntry] Passed
14:39:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:09: Data_Status_After Erases          : 0
14:39:09: CPRM Security Support             : No Security
14:39:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:09: Spec. Version                     : Version 3.0X
14:39:09: Extended Security Support         : Extended_Security_Not_Supported
14:39:09: Command Support                   : COMMAND_SUPPORT
14:39:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E5BDB0>, <py_sfcl.CommandDataDefinition object at 0x066662D0>) , Command count = 3391 ] 
14:39:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE40>, <py_sfcl.CommandDataDefinition object at 0x06666990>) , Command count = 3392 ] 
14:39:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:09: [ SetBusWidth(0x4) , Command count = 3393 ] 
14:39:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667AA80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3394 ] 
14:39:09: Protected Area Size 0x28000
14:39:09: Bus Width           2
14:39:09: Secure Mode         0
14:39:09: Speed  Class        4
14:39:09: Perf Move           0
14:39:09: Au Size             9
14:39:09: Erase Size          15
14:39:09: Erase Timeout       1
14:39:09: Erase offset        1
14:39:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3395 ] 
14:39:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:09: Host Frequency set to 100000 KHz
14:39:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:09: ####CSD Registe 2.0 Values####
14:39:09: CSD_STRUCTURE                                 :0x1
14:39:09: Reserv1                                       :0x0
14:39:09: Time Access 1 TAAC                            :0xe
14:39:09: Time Access 2 NSAC*100                        :0x0
14:39:09: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:09: Card Command Classess CCC                     :0x5b5
14:39:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:09: DSR(driver stage register)  DSR_IMP           :0x0
14:39:09: Reserv2                                       :0x0
14:39:09: Device Size C_SIZE                            :0xedc8
14:39:09: Reserv3                                       :0x0
14:39:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:09: Reserv4                                       :0x0
14:39:09: Write Speed Factor R2W_FACTOR                 :0x2
14:39:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:09: FILE_FORMAT_GRP                               :0x0
14:39:09: COPY flag                                     :0x1
14:39:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:09: File_Format                                   :0x0
14:39:09: CRC                                           :0x0
14:39:09: ####CSD Registe Values####  

14:39:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABEA0>, <py_sfcl.CommandDataDefinition object at 0x06032E10>) , Command count = 3396 ] 
14:39:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB420>, <py_sfcl.CommandDataDefinition object at 0x066858D0>) , Command count = 3397 ] 
14:39:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:09: [DVTCommonLib]### Erase :Erase API Called
14:39:09: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x26028 with Blockcount:0x2001
14:39:10: [ EraseLba(0x26028, 0x2001) , Command count = 3398 ] 
14:39:10: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x26028 with Blockcount:0x2001 

14:39:10: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 8
14:39:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x28028 to EndLba:0x28030 with Increment Pattern
14:39:10: [ WrLbaNoData(0x28028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3399 ] 
14:39:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x28028 to EndLba:0x28030 with Increment Pattern 

14:39:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666960>, <py_sfcl.CommandDataDefinition object at 0x06666870>) , Command count = 3400 ] 
14:39:10: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032960>, <py_sfcl.CommandDataDefinition object at 0x066858D0>) , Command count = 3401 ] 
14:39:10: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:10: [DVTCommonLib]###  R1bCommandAbort called
14:39:10: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1, False) , Command count = 3402 ] 
14:39:10: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:12: Host Frequency set to 25000 KHz
14:39:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:12: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666D80>, 0x0, True) , Command count = 3403 ] 
14:39:12: [GO18_globalSetVolt]### Host voltage value is set.
14:39:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AD50>, 0x0, False) , Command count = 3404 ] 
14:39:12: [GO18_globalSetVolt]### Host voltage value is set.
14:39:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3405 ] 
14:39:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3406 ] 
14:39:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3407 ] 
14:39:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A9C0>, <py_sfcl.CommandDataDefinition object at 0x0667A7E0>) , Command count = 3408 ] 
14:39:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666750>, <py_sfcl.CommandDataDefinition object at 0x0667A480>) , Command count = 3409 ] 
14:39:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:12: [ SetCardRCA(0x1, 0xD555) , Command count = 3410 ] 
14:39:12: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:12: Host Frequency set to 25000 KHz
14:39:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:12: ####CSD Registe 2.0 Values####
14:39:12: CSD_STRUCTURE                                 :0x1
14:39:12: Reserv1                                       :0x0
14:39:12: Time Access 1 TAAC                            :0xe
14:39:12: Time Access 2 NSAC*100                        :0x0
14:39:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:12: Card Command Classess CCC                     :0x5b5
14:39:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:12: DSR(driver stage register)  DSR_IMP           :0x0
14:39:12: Reserv2                                       :0x0
14:39:12: Device Size C_SIZE                            :0xedc8
14:39:12: Reserv3                                       :0x0
14:39:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:12: Reserv4                                       :0x0
14:39:12: Write Speed Factor R2W_FACTOR                 :0x2
14:39:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:12: FILE_FORMAT_GRP                               :0x0
14:39:12: COPY flag                                     :0x1
14:39:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:12: File_Format                                   :0x0
14:39:12: CRC                                           :0x0
14:39:12: ####CSD Registe Values####  

14:39:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:12: [GetSCRRegisterEntry] Passed
14:39:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:12: Data_Status_After Erases          : 0
14:39:12: CPRM Security Support             : No Security
14:39:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:12: Spec. Version                     : Version 3.0X
14:39:12: Extended Security Support         : Extended_Security_Not_Supported
14:39:12: Command Support                   : COMMAND_SUPPORT
14:39:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666B70>, <py_sfcl.CommandDataDefinition object at 0x0667AB40>) , Command count = 3411 ] 
14:39:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A6C0>, <py_sfcl.CommandDataDefinition object at 0x0667AAE0>) , Command count = 3412 ] 
14:39:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:12: [ SetBusWidth(0x4) , Command count = 3413 ] 
14:39:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667AE70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3414 ] 
14:39:12: Protected Area Size 0x28000
14:39:12: Bus Width           2
14:39:12: Secure Mode         0
14:39:12: Speed  Class        4
14:39:12: Perf Move           0
14:39:12: Au Size             9
14:39:12: Erase Size          15
14:39:12: Erase Timeout       1
14:39:12: Erase offset        1
14:39:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3415 ] 
14:39:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:12: Host Frequency set to 100000 KHz
14:39:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:12: ####CSD Registe 2.0 Values####
14:39:12: CSD_STRUCTURE                                 :0x1
14:39:12: Reserv1                                       :0x0
14:39:12: Time Access 1 TAAC                            :0xe
14:39:12: Time Access 2 NSAC*100                        :0x0
14:39:12: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:12: Card Command Classess CCC                     :0x5b5
14:39:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:12: DSR(driver stage register)  DSR_IMP           :0x0
14:39:12: Reserv2                                       :0x0
14:39:12: Device Size C_SIZE                            :0xedc8
14:39:12: Reserv3                                       :0x0
14:39:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:12: Reserv4                                       :0x0
14:39:12: Write Speed Factor R2W_FACTOR                 :0x2
14:39:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:12: FILE_FORMAT_GRP                               :0x0
14:39:12: COPY flag                                     :0x1
14:39:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:12: File_Format                                   :0x0
14:39:12: CRC                                           :0x0
14:39:12: ####CSD Registe Values####  

14:39:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A1E0>, <py_sfcl.CommandDataDefinition object at 0x0667AA80>) , Command count = 3416 ] 
14:39:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB3C0>, <py_sfcl.CommandDataDefinition object at 0x06685090>) , Command count = 3417 ] 
14:39:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:12: [DVTCommonLib]### Erase :Erase API Called
14:39:12: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x28028 with Blockcount:0x2001
14:39:12: [ EraseLba(0x28028, 0x2001) , Command count = 3418 ] 
14:39:12: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x28028 with Blockcount:0x2001 

14:39:12: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 7
14:39:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2A028 to EndLba:0x2A030 with Increment Pattern
14:39:12: [ WrLbaNoData(0x2A028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3419 ] 
14:39:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2A028 to EndLba:0x2A030 with Increment Pattern 

14:39:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FDB0>, <py_sfcl.CommandDataDefinition object at 0x0667A7B0>) , Command count = 3420 ] 
14:39:12: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB4B0>, <py_sfcl.CommandDataDefinition object at 0x0667A030>) , Command count = 3421 ] 
14:39:12: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:12: [DVTCommonLib]###  R1bCommandAbort called
14:39:12: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2C, False) , Command count = 3422 ] 
14:39:12: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:12: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:14: Host Frequency set to 25000 KHz
14:39:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:14: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x066663F0>, 0x0, True) , Command count = 3423 ] 
14:39:15: [GO18_globalSetVolt]### Host voltage value is set.
14:39:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683A20>, 0x0, False) , Command count = 3424 ] 
14:39:15: [GO18_globalSetVolt]### Host voltage value is set.
14:39:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3425 ] 
14:39:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3426 ] 
14:39:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3427 ] 
14:39:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AE10>, <py_sfcl.CommandDataDefinition object at 0x0667A6F0>) , Command count = 3428 ] 
14:39:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C450>, <py_sfcl.CommandDataDefinition object at 0x0667A0F0>) , Command count = 3429 ] 
14:39:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:15: [ SetCardRCA(0x1, 0xD555) , Command count = 3430 ] 
14:39:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:15: Host Frequency set to 25000 KHz
14:39:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:15: ####CSD Registe 2.0 Values####
14:39:15: CSD_STRUCTURE                                 :0x1
14:39:15: Reserv1                                       :0x0
14:39:15: Time Access 1 TAAC                            :0xe
14:39:15: Time Access 2 NSAC*100                        :0x0
14:39:15: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:15: Card Command Classess CCC                     :0x5b5
14:39:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:15: DSR(driver stage register)  DSR_IMP           :0x0
14:39:15: Reserv2                                       :0x0
14:39:15: Device Size C_SIZE                            :0xedc8
14:39:15: Reserv3                                       :0x0
14:39:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:15: Reserv4                                       :0x0
14:39:15: Write Speed Factor R2W_FACTOR                 :0x2
14:39:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:15: FILE_FORMAT_GRP                               :0x0
14:39:15: COPY flag                                     :0x1
14:39:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:15: File_Format                                   :0x0
14:39:15: CRC                                           :0x0
14:39:15: ####CSD Registe Values####  

14:39:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:15: [GetSCRRegisterEntry] Passed
14:39:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:15: Data_Status_After Erases          : 0
14:39:15: CPRM Security Support             : No Security
14:39:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:15: Spec. Version                     : Version 3.0X
14:39:15: Extended Security Support         : Extended_Security_Not_Supported
14:39:15: Command Support                   : COMMAND_SUPPORT
14:39:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066666C0>, <py_sfcl.CommandDataDefinition object at 0x0667A0C0>) , Command count = 3431 ] 
14:39:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB450>, <py_sfcl.CommandDataDefinition object at 0x0667C2D0>) , Command count = 3432 ] 
14:39:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:15: [ SetBusWidth(0x4) , Command count = 3433 ] 
14:39:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A870>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3434 ] 
14:39:15: Protected Area Size 0x28000
14:39:15: Bus Width           2
14:39:15: Secure Mode         0
14:39:15: Speed  Class        4
14:39:15: Perf Move           0
14:39:15: Au Size             9
14:39:15: Erase Size          15
14:39:15: Erase Timeout       1
14:39:15: Erase offset        1
14:39:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3435 ] 
14:39:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:15: Host Frequency set to 100000 KHz
14:39:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:15: ####CSD Registe 2.0 Values####
14:39:15: CSD_STRUCTURE                                 :0x1
14:39:15: Reserv1                                       :0x0
14:39:15: Time Access 1 TAAC                            :0xe
14:39:15: Time Access 2 NSAC*100                        :0x0
14:39:15: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:15: Card Command Classess CCC                     :0x5b5
14:39:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:15: DSR(driver stage register)  DSR_IMP           :0x0
14:39:15: Reserv2                                       :0x0
14:39:15: Device Size C_SIZE                            :0xedc8
14:39:15: Reserv3                                       :0x0
14:39:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:15: Reserv4                                       :0x0
14:39:15: Write Speed Factor R2W_FACTOR                 :0x2
14:39:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:15: FILE_FORMAT_GRP                               :0x0
14:39:15: COPY flag                                     :0x1
14:39:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:15: File_Format                                   :0x0
14:39:15: CRC                                           :0x0
14:39:15: ####CSD Registe Values####  

14:39:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F630>, <py_sfcl.CommandDataDefinition object at 0x0667AE70>) , Command count = 3436 ] 
14:39:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666540>, <py_sfcl.CommandDataDefinition object at 0x06685DE0>) , Command count = 3437 ] 
14:39:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:15: [DVTCommonLib]### Erase :Erase API Called
14:39:15: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2A028 with Blockcount:0x2001
14:39:15: [ EraseLba(0x2A028, 0x2001) , Command count = 3438 ] 
14:39:15: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2A028 with Blockcount:0x2001 

14:39:15: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 6
14:39:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2C028 to EndLba:0x2C030 with Increment Pattern
14:39:15: [ WrLbaNoData(0x2C028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3439 ] 
14:39:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2C028 to EndLba:0x2C030 with Increment Pattern 

14:39:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C030>, <py_sfcl.CommandDataDefinition object at 0x0667C1E0>) , Command count = 3440 ] 
14:39:15: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066662A0>, <py_sfcl.CommandDataDefinition object at 0x06685DE0>) , Command count = 3441 ] 
14:39:15: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:15: [DVTCommonLib]###  R1bCommandAbort called
14:39:15: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x5, False) , Command count = 3442 ] 
14:39:15: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:17: Host Frequency set to 25000 KHz
14:39:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:17: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABF00>, 0x0, True) , Command count = 3443 ] 
14:39:17: [GO18_globalSetVolt]### Host voltage value is set.
14:39:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CC90>, 0x0, False) , Command count = 3444 ] 
14:39:17: [GO18_globalSetVolt]### Host voltage value is set.
14:39:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3445 ] 
14:39:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3446 ] 
14:39:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3447 ] 
14:39:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABDE0>, <py_sfcl.CommandDataDefinition object at 0x06666090>) , Command count = 3448 ] 
14:39:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C5D0>, <py_sfcl.CommandDataDefinition object at 0x0667C3C0>) , Command count = 3449 ] 
14:39:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:18: [ SetCardRCA(0x1, 0xD555) , Command count = 3450 ] 
14:39:18: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:18: Host Frequency set to 25000 KHz
14:39:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:18: ####CSD Registe 2.0 Values####
14:39:18: CSD_STRUCTURE                                 :0x1
14:39:18: Reserv1                                       :0x0
14:39:18: Time Access 1 TAAC                            :0xe
14:39:18: Time Access 2 NSAC*100                        :0x0
14:39:18: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:18: Card Command Classess CCC                     :0x5b5
14:39:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:18: DSR(driver stage register)  DSR_IMP           :0x0
14:39:18: Reserv2                                       :0x0
14:39:18: Device Size C_SIZE                            :0xedc8
14:39:18: Reserv3                                       :0x0
14:39:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:18: Reserv4                                       :0x0
14:39:18: Write Speed Factor R2W_FACTOR                 :0x2
14:39:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:18: FILE_FORMAT_GRP                               :0x0
14:39:18: COPY flag                                     :0x1
14:39:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:18: File_Format                                   :0x0
14:39:18: CRC                                           :0x0
14:39:18: ####CSD Registe Values####  

14:39:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:18: [GetSCRRegisterEntry] Passed
14:39:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:18: Data_Status_After Erases          : 0
14:39:18: CPRM Security Support             : No Security
14:39:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:18: Spec. Version                     : Version 3.0X
14:39:18: Extended Security Support         : Extended_Security_Not_Supported
14:39:18: Command Support                   : COMMAND_SUPPORT
14:39:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066668A0>, <py_sfcl.CommandDataDefinition object at 0x0667C1B0>) , Command count = 3451 ] 
14:39:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A4B0>, <py_sfcl.CommandDataDefinition object at 0x0667C510>) , Command count = 3452 ] 
14:39:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:18: [ SetBusWidth(0x4) , Command count = 3453 ] 
14:39:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3454 ] 
14:39:18: Protected Area Size 0x28000
14:39:18: Bus Width           2
14:39:18: Secure Mode         0
14:39:18: Speed  Class        4
14:39:18: Perf Move           0
14:39:18: Au Size             9
14:39:18: Erase Size          15
14:39:18: Erase Timeout       1
14:39:18: Erase offset        1
14:39:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3455 ] 
14:39:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:18: Host Frequency set to 100000 KHz
14:39:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:18: ####CSD Registe 2.0 Values####
14:39:18: CSD_STRUCTURE                                 :0x1
14:39:18: Reserv1                                       :0x0
14:39:18: Time Access 1 TAAC                            :0xe
14:39:18: Time Access 2 NSAC*100                        :0x0
14:39:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:18: Card Command Classess CCC                     :0x5b5
14:39:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:18: DSR(driver stage register)  DSR_IMP           :0x0
14:39:18: Reserv2                                       :0x0
14:39:18: Device Size C_SIZE                            :0xedc8
14:39:18: Reserv3                                       :0x0
14:39:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:18: Reserv4                                       :0x0
14:39:18: Write Speed Factor R2W_FACTOR                 :0x2
14:39:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:18: FILE_FORMAT_GRP                               :0x0
14:39:18: COPY flag                                     :0x1
14:39:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:18: File_Format                                   :0x0
14:39:18: CRC                                           :0x0
14:39:18: ####CSD Registe Values####  

14:39:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C720>, <py_sfcl.CommandDataDefinition object at 0x0667A870>) , Command count = 3456 ] 
14:39:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB360>, <py_sfcl.CommandDataDefinition object at 0x066854E0>) , Command count = 3457 ] 
14:39:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:18: [DVTCommonLib]### Erase :Erase API Called
14:39:18: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2C028 with Blockcount:0x2001
14:39:18: [ EraseLba(0x2C028, 0x2001) , Command count = 3458 ] 
14:39:18: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2C028 with Blockcount:0x2001 

14:39:18: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 5
14:39:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2E028 to EndLba:0x2E030 with Increment Pattern
14:39:18: [ WrLbaNoData(0x2E028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3459 ] 
14:39:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2E028 to EndLba:0x2E030 with Increment Pattern 

14:39:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AFC0>, <py_sfcl.CommandDataDefinition object at 0x0667C9C0>) , Command count = 3460 ] 
14:39:18: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C570>, <py_sfcl.CommandDataDefinition object at 0x0667C690>) , Command count = 3461 ] 
14:39:18: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:18: [DVTCommonLib]###  R1bCommandAbort called
14:39:18: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x22, False) , Command count = 3462 ] 
14:39:18: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:18: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:20: Host Frequency set to 25000 KHz
14:39:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:20: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB660>, 0x0, True) , Command count = 3463 ] 
14:39:20: [GO18_globalSetVolt]### Host voltage value is set.
14:39:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F450>, 0x0, False) , Command count = 3464 ] 
14:39:20: [GO18_globalSetVolt]### Host voltage value is set.
14:39:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3465 ] 
14:39:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3466 ] 
14:39:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3467 ] 
14:39:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C6C0>, <py_sfcl.CommandDataDefinition object at 0x0667C7E0>) , Command count = 3468 ] 
14:39:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F390>, <py_sfcl.CommandDataDefinition object at 0x0667A3C0>) , Command count = 3469 ] 
14:39:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:20: [ SetCardRCA(0x1, 0xD555) , Command count = 3470 ] 
14:39:20: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:21: Host Frequency set to 25000 KHz
14:39:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:21: ####CSD Registe 2.0 Values####
14:39:21: CSD_STRUCTURE                                 :0x1
14:39:21: Reserv1                                       :0x0
14:39:21: Time Access 1 TAAC                            :0xe
14:39:21: Time Access 2 NSAC*100                        :0x0
14:39:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:21: Card Command Classess CCC                     :0x5b5
14:39:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:21: DSR(driver stage register)  DSR_IMP           :0x0
14:39:21: Reserv2                                       :0x0
14:39:21: Device Size C_SIZE                            :0xedc8
14:39:21: Reserv3                                       :0x0
14:39:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:21: Reserv4                                       :0x0
14:39:21: Write Speed Factor R2W_FACTOR                 :0x2
14:39:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:21: FILE_FORMAT_GRP                               :0x0
14:39:21: COPY flag                                     :0x1
14:39:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:21: File_Format                                   :0x0
14:39:21: CRC                                           :0x0
14:39:21: ####CSD Registe Values####  

14:39:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:21: [GetSCRRegisterEntry] Passed
14:39:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:21: Data_Status_After Erases          : 0
14:39:21: CPRM Security Support             : No Security
14:39:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:21: Spec. Version                     : Version 3.0X
14:39:21: Extended Security Support         : Extended_Security_Not_Supported
14:39:21: Command Support                   : COMMAND_SUPPORT
14:39:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CBD0>, <py_sfcl.CommandDataDefinition object at 0x0667C750>) , Command count = 3471 ] 
14:39:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F780>, <py_sfcl.CommandDataDefinition object at 0x0667C8A0>) , Command count = 3472 ] 
14:39:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:21: [ SetBusWidth(0x4) , Command count = 3473 ] 
14:39:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C6F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3474 ] 
14:39:21: Protected Area Size 0x28000
14:39:21: Bus Width           2
14:39:21: Secure Mode         0
14:39:21: Speed  Class        4
14:39:21: Perf Move           0
14:39:21: Au Size             9
14:39:21: Erase Size          15
14:39:21: Erase Timeout       1
14:39:21: Erase offset        1
14:39:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3475 ] 
14:39:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:21: Host Frequency set to 100000 KHz
14:39:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:21: ####CSD Registe 2.0 Values####
14:39:21: CSD_STRUCTURE                                 :0x1
14:39:21: Reserv1                                       :0x0
14:39:21: Time Access 1 TAAC                            :0xe
14:39:21: Time Access 2 NSAC*100                        :0x0
14:39:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:21: Card Command Classess CCC                     :0x5b5
14:39:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:21: DSR(driver stage register)  DSR_IMP           :0x0
14:39:21: Reserv2                                       :0x0
14:39:21: Device Size C_SIZE                            :0xedc8
14:39:21: Reserv3                                       :0x0
14:39:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:21: Reserv4                                       :0x0
14:39:21: Write Speed Factor R2W_FACTOR                 :0x2
14:39:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:21: FILE_FORMAT_GRP                               :0x0
14:39:21: COPY flag                                     :0x1
14:39:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:21: File_Format                                   :0x0
14:39:21: CRC                                           :0x0
14:39:21: ####CSD Registe Values####  

14:39:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066830C0>, <py_sfcl.CommandDataDefinition object at 0x0667CB10>) , Command count = 3476 ] 
14:39:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C420>, <py_sfcl.CommandDataDefinition object at 0x06685C00>) , Command count = 3477 ] 
14:39:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:21: [DVTCommonLib]### Erase :Erase API Called
14:39:21: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2E028 with Blockcount:0x2001
14:39:21: [ EraseLba(0x2E028, 0x2001) , Command count = 3478 ] 
14:39:21: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2E028 with Blockcount:0x2001 

14:39:21: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 4
14:39:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x30028 to EndLba:0x30030 with Increment Pattern
14:39:21: [ WrLbaNoData(0x30028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3479 ] 
14:39:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x30028 to EndLba:0x30030 with Increment Pattern 

14:39:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F060>, <py_sfcl.CommandDataDefinition object at 0x0667FB10>) , Command count = 3480 ] 
14:39:21: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C600>, <py_sfcl.CommandDataDefinition object at 0x0667C960>) , Command count = 3481 ] 
14:39:21: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:21: [DVTCommonLib]###  R1bCommandAbort called
14:39:21: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2A, False) , Command count = 3482 ] 
14:39:21: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:21: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:23: Host Frequency set to 25000 KHz
14:39:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:23: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AED0>, 0x0, True) , Command count = 3483 ] 
14:39:23: [GO18_globalSetVolt]### Host voltage value is set.
14:39:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FBD0>, 0x0, False) , Command count = 3484 ] 
14:39:23: [GO18_globalSetVolt]### Host voltage value is set.
14:39:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3485 ] 
14:39:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3486 ] 
14:39:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3487 ] 
14:39:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F4B0>, <py_sfcl.CommandDataDefinition object at 0x0667F270>) , Command count = 3488 ] 
14:39:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FF00>, <py_sfcl.CommandDataDefinition object at 0x0667C8D0>) , Command count = 3489 ] 
14:39:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:23: [ SetCardRCA(0x1, 0xD555) , Command count = 3490 ] 
14:39:23: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:23: Host Frequency set to 25000 KHz
14:39:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:23: ####CSD Registe 2.0 Values####
14:39:23: CSD_STRUCTURE                                 :0x1
14:39:23: Reserv1                                       :0x0
14:39:23: Time Access 1 TAAC                            :0xe
14:39:23: Time Access 2 NSAC*100                        :0x0
14:39:23: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:23: Card Command Classess CCC                     :0x5b5
14:39:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:23: DSR(driver stage register)  DSR_IMP           :0x0
14:39:23: Reserv2                                       :0x0
14:39:23: Device Size C_SIZE                            :0xedc8
14:39:23: Reserv3                                       :0x0
14:39:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:23: Reserv4                                       :0x0
14:39:23: Write Speed Factor R2W_FACTOR                 :0x2
14:39:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:23: FILE_FORMAT_GRP                               :0x0
14:39:23: COPY flag                                     :0x1
14:39:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:23: File_Format                                   :0x0
14:39:23: CRC                                           :0x0
14:39:23: ####CSD Registe Values####  

14:39:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:23: [GetSCRRegisterEntry] Passed
14:39:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:23: Data_Status_After Erases          : 0
14:39:23: CPRM Security Support             : No Security
14:39:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:23: Spec. Version                     : Version 3.0X
14:39:23: Extended Security Support         : Extended_Security_Not_Supported
14:39:23: Command Support                   : COMMAND_SUPPORT
14:39:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ADE0>, <py_sfcl.CommandDataDefinition object at 0x0667F300>) , Command count = 3491 ] 
14:39:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F600>, <py_sfcl.CommandDataDefinition object at 0x0667CBA0>) , Command count = 3492 ] 
14:39:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:23: [ SetBusWidth(0x4) , Command count = 3493 ] 
14:39:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3494 ] 
14:39:23: Protected Area Size 0x28000
14:39:23: Bus Width           2
14:39:23: Secure Mode         0
14:39:23: Speed  Class        4
14:39:23: Perf Move           0
14:39:23: Au Size             9
14:39:23: Erase Size          15
14:39:23: Erase Timeout       1
14:39:23: Erase offset        1
14:39:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3495 ] 
14:39:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:23: Host Frequency set to 100000 KHz
14:39:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:23: ####CSD Registe 2.0 Values####
14:39:23: CSD_STRUCTURE                                 :0x1
14:39:23: Reserv1                                       :0x0
14:39:23: Time Access 1 TAAC                            :0xe
14:39:23: Time Access 2 NSAC*100                        :0x0
14:39:23: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:23: Card Command Classess CCC                     :0x5b5
14:39:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:23: DSR(driver stage register)  DSR_IMP           :0x0
14:39:23: Reserv2                                       :0x0
14:39:23: Device Size C_SIZE                            :0xedc8
14:39:23: Reserv3                                       :0x0
14:39:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:23: Reserv4                                       :0x0
14:39:23: Write Speed Factor R2W_FACTOR                 :0x2
14:39:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:23: FILE_FORMAT_GRP                               :0x0
14:39:23: COPY flag                                     :0x1
14:39:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:23: File_Format                                   :0x0
14:39:23: CRC                                           :0x0
14:39:23: ####CSD Registe Values####  

14:39:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ABD0>, <py_sfcl.CommandDataDefinition object at 0x0667F660>) , Command count = 3496 ] 
14:39:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AA20>, <py_sfcl.CommandDataDefinition object at 0x066852A0>) , Command count = 3497 ] 
14:39:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:23: [DVTCommonLib]### Erase :Erase API Called
14:39:24: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x30028 with Blockcount:0x2001
14:39:24: [ EraseLba(0x30028, 0x2001) , Command count = 3498 ] 
14:39:24: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x30028 with Blockcount:0x2001 

14:39:24: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 3
14:39:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x32028 to EndLba:0x32030 with Increment Pattern
14:39:24: [ WrLbaNoData(0x32028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3499 ] 
14:39:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x32028 to EndLba:0x32030 with Increment Pattern 

14:39:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AEA0>, <py_sfcl.CommandDataDefinition object at 0x0667CEA0>) , Command count = 3500 ] 
14:39:24: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C120>, <py_sfcl.CommandDataDefinition object at 0x0667F2A0>) , Command count = 3501 ] 
14:39:24: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:24: [DVTCommonLib]###  R1bCommandAbort called
14:39:24: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x25, False) , Command count = 3502 ] 
14:39:24: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:24: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:26: Host Frequency set to 25000 KHz
14:39:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:26: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FCC0>, 0x0, True) , Command count = 3503 ] 
14:39:26: [GO18_globalSetVolt]### Host voltage value is set.
14:39:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683630>, 0x0, False) , Command count = 3504 ] 
14:39:26: [GO18_globalSetVolt]### Host voltage value is set.
14:39:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3505 ] 
14:39:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3506 ] 
14:39:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3507 ] 
14:39:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683570>, <py_sfcl.CommandDataDefinition object at 0x0667FC00>) , Command count = 3508 ] 
14:39:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066836C0>, <py_sfcl.CommandDataDefinition object at 0x0667C4B0>) , Command count = 3509 ] 
14:39:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:26: [ SetCardRCA(0x1, 0xD555) , Command count = 3510 ] 
14:39:26: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:26: Host Frequency set to 25000 KHz
14:39:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:26: ####CSD Registe 2.0 Values####
14:39:26: CSD_STRUCTURE                                 :0x1
14:39:26: Reserv1                                       :0x0
14:39:26: Time Access 1 TAAC                            :0xe
14:39:26: Time Access 2 NSAC*100                        :0x0
14:39:26: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:26: Card Command Classess CCC                     :0x5b5
14:39:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:26: DSR(driver stage register)  DSR_IMP           :0x0
14:39:26: Reserv2                                       :0x0
14:39:26: Device Size C_SIZE                            :0xedc8
14:39:26: Reserv3                                       :0x0
14:39:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:26: Reserv4                                       :0x0
14:39:26: Write Speed Factor R2W_FACTOR                 :0x2
14:39:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:26: FILE_FORMAT_GRP                               :0x0
14:39:26: COPY flag                                     :0x1
14:39:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:26: File_Format                                   :0x0
14:39:26: CRC                                           :0x0
14:39:26: ####CSD Registe Values####  

14:39:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:26: [GetSCRRegisterEntry] Passed
14:39:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:26: Data_Status_After Erases          : 0
14:39:26: CPRM Security Support             : No Security
14:39:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:26: Spec. Version                     : Version 3.0X
14:39:26: Extended Security Support         : Extended_Security_Not_Supported
14:39:26: Command Support                   : COMMAND_SUPPORT
14:39:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AC90>, <py_sfcl.CommandDataDefinition object at 0x0667F510>) , Command count = 3511 ] 
14:39:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FA80>, <py_sfcl.CommandDataDefinition object at 0x0667CE70>) , Command count = 3512 ] 
14:39:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:26: [ SetBusWidth(0x4) , Command count = 3513 ] 
14:39:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667FB40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3514 ] 
14:39:26: Protected Area Size 0x28000
14:39:26: Bus Width           2
14:39:26: Secure Mode         0
14:39:26: Speed  Class        4
14:39:26: Perf Move           0
14:39:26: Au Size             9
14:39:26: Erase Size          15
14:39:26: Erase Timeout       1
14:39:26: Erase offset        1
14:39:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3515 ] 
14:39:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:26: Host Frequency set to 100000 KHz
14:39:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:26: ####CSD Registe 2.0 Values####
14:39:26: CSD_STRUCTURE                                 :0x1
14:39:26: Reserv1                                       :0x0
14:39:26: Time Access 1 TAAC                            :0xe
14:39:26: Time Access 2 NSAC*100                        :0x0
14:39:26: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:26: Card Command Classess CCC                     :0x5b5
14:39:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:26: DSR(driver stage register)  DSR_IMP           :0x0
14:39:26: Reserv2                                       :0x0
14:39:26: Device Size C_SIZE                            :0xedc8
14:39:26: Reserv3                                       :0x0
14:39:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:26: Reserv4                                       :0x0
14:39:26: Write Speed Factor R2W_FACTOR                 :0x2
14:39:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:26: FILE_FORMAT_GRP                               :0x0
14:39:26: COPY flag                                     :0x1
14:39:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:26: File_Format                                   :0x0
14:39:26: CRC                                           :0x0
14:39:26: ####CSD Registe Values####  

14:39:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FE70>, <py_sfcl.CommandDataDefinition object at 0x0667F720>) , Command count = 3516 ] 
14:39:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AF30>, <py_sfcl.CommandDataDefinition object at 0x066855D0>) , Command count = 3517 ] 
14:39:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:26: [DVTCommonLib]### Erase :Erase API Called
14:39:26: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x32028 with Blockcount:0x2001
14:39:26: [ EraseLba(0x32028, 0x2001) , Command count = 3518 ] 
14:39:26: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x32028 with Blockcount:0x2001 

14:39:26: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 2
14:39:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x34028 to EndLba:0x34030 with Increment Pattern
14:39:26: [ WrLbaNoData(0x34028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3519 ] 
14:39:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x34028 to EndLba:0x34030 with Increment Pattern 

14:39:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683A50>, <py_sfcl.CommandDataDefinition object at 0x0667CC00>) , Command count = 3520 ] 
14:39:26: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FA50>, <py_sfcl.CommandDataDefinition object at 0x0667F4E0>) , Command count = 3521 ] 
14:39:26: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:26: [DVTCommonLib]###  R1bCommandAbort called
14:39:26: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xB, False) , Command count = 3522 ] 
14:39:26: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:26: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:28: Host Frequency set to 25000 KHz
14:39:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:28: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FDE0>, 0x0, True) , Command count = 3523 ] 
14:39:28: [GO18_globalSetVolt]### Host voltage value is set.
14:39:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683810>, 0x0, False) , Command count = 3524 ] 
14:39:29: [GO18_globalSetVolt]### Host voltage value is set.
14:39:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3525 ] 
14:39:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3526 ] 
14:39:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3527 ] 
14:39:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066833F0>, <py_sfcl.CommandDataDefinition object at 0x06683390>) , Command count = 3528 ] 
14:39:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D20>, <py_sfcl.CommandDataDefinition object at 0x0667F930>) , Command count = 3529 ] 
14:39:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:29: [ SetCardRCA(0x1, 0xD555) , Command count = 3530 ] 
14:39:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:29: Host Frequency set to 25000 KHz
14:39:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:29: ####CSD Registe 2.0 Values####
14:39:29: CSD_STRUCTURE                                 :0x1
14:39:29: Reserv1                                       :0x0
14:39:29: Time Access 1 TAAC                            :0xe
14:39:29: Time Access 2 NSAC*100                        :0x0
14:39:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:29: Card Command Classess CCC                     :0x5b5
14:39:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:29: DSR(driver stage register)  DSR_IMP           :0x0
14:39:29: Reserv2                                       :0x0
14:39:29: Device Size C_SIZE                            :0xedc8
14:39:29: Reserv3                                       :0x0
14:39:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:29: Reserv4                                       :0x0
14:39:29: Write Speed Factor R2W_FACTOR                 :0x2
14:39:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:29: FILE_FORMAT_GRP                               :0x0
14:39:29: COPY flag                                     :0x1
14:39:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:29: File_Format                                   :0x0
14:39:29: CRC                                           :0x0
14:39:29: ####CSD Registe Values####  

14:39:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:29: [GetSCRRegisterEntry] Passed
14:39:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:29: Data_Status_After Erases          : 0
14:39:29: CPRM Security Support             : No Security
14:39:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:29: Spec. Version                     : Version 3.0X
14:39:29: Extended Security Support         : Extended_Security_Not_Supported
14:39:29: Command Support                   : COMMAND_SUPPORT
14:39:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F240>, <py_sfcl.CommandDataDefinition object at 0x0667FC30>) , Command count = 3531 ] 
14:39:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE70>, <py_sfcl.CommandDataDefinition object at 0x06683540>) , Command count = 3532 ] 
14:39:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:29: [ SetBusWidth(0x4) , Command count = 3533 ] 
14:39:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667FFC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3534 ] 
14:39:29: Protected Area Size 0x28000
14:39:29: Bus Width           2
14:39:29: Secure Mode         0
14:39:29: Speed  Class        4
14:39:29: Perf Move           0
14:39:29: Au Size             9
14:39:29: Erase Size          15
14:39:29: Erase Timeout       1
14:39:29: Erase offset        1
14:39:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3535 ] 
14:39:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:29: Host Frequency set to 100000 KHz
14:39:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:29: ####CSD Registe 2.0 Values####
14:39:29: CSD_STRUCTURE                                 :0x1
14:39:29: Reserv1                                       :0x0
14:39:29: Time Access 1 TAAC                            :0xe
14:39:29: Time Access 2 NSAC*100                        :0x0
14:39:29: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:29: Card Command Classess CCC                     :0x5b5
14:39:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:29: DSR(driver stage register)  DSR_IMP           :0x0
14:39:29: Reserv2                                       :0x0
14:39:29: Device Size C_SIZE                            :0xedc8
14:39:29: Reserv3                                       :0x0
14:39:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:29: Reserv4                                       :0x0
14:39:29: Write Speed Factor R2W_FACTOR                 :0x2
14:39:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:29: FILE_FORMAT_GRP                               :0x0
14:39:29: COPY flag                                     :0x1
14:39:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:29: File_Format                                   :0x0
14:39:29: CRC                                           :0x0
14:39:29: ####CSD Registe Values####  

14:39:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066835A0>, <py_sfcl.CommandDataDefinition object at 0x0667FB40>) , Command count = 3536 ] 
14:39:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F3C0>, <py_sfcl.CommandDataDefinition object at 0x0667CCC0>) , Command count = 3537 ] 
14:39:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:29: [DVTCommonLib]### Erase :Erase API Called
14:39:29: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x34028 with Blockcount:0x2001
14:39:29: [ EraseLba(0x34028, 0x2001) , Command count = 3538 ] 
14:39:29: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x34028 with Blockcount:0x2001 

14:39:29: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 1
14:39:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x36028 to EndLba:0x36030 with Increment Pattern
14:39:29: [ WrLbaNoData(0x36028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3539 ] 
14:39:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x36028 to EndLba:0x36030 with Increment Pattern 

14:39:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C870>, <py_sfcl.CommandDataDefinition object at 0x06683510>) , Command count = 3540 ] 
14:39:29: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CD50>, <py_sfcl.CommandDataDefinition object at 0x0667F090>) , Command count = 3541 ] 
14:39:29: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:29: [DVTCommonLib]###  R1bCommandAbort called
14:39:29: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x11, False) , Command count = 3542 ] 
14:39:29: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:29: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:31: Host Frequency set to 25000 KHz
14:39:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:31: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683270>, 0x0, True) , Command count = 3543 ] 
14:39:31: [GO18_globalSetVolt]### Host voltage value is set.
14:39:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FED1B0>, 0x0, False) , Command count = 3544 ] 
14:39:31: [GO18_globalSetVolt]### Host voltage value is set.
14:39:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3545 ] 
14:39:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3546 ] 
14:39:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3547 ] 
14:39:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683EA0>, <py_sfcl.CommandDataDefinition object at 0x066832A0>) , Command count = 3548 ] 
14:39:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683600>, <py_sfcl.CommandDataDefinition object at 0x0667F810>) , Command count = 3549 ] 
14:39:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:32: [ SetCardRCA(0x1, 0xD555) , Command count = 3550 ] 
14:39:32: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:32: Host Frequency set to 25000 KHz
14:39:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:32: ####CSD Registe 2.0 Values####
14:39:32: CSD_STRUCTURE                                 :0x1
14:39:32: Reserv1                                       :0x0
14:39:32: Time Access 1 TAAC                            :0xe
14:39:32: Time Access 2 NSAC*100                        :0x0
14:39:32: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:32: Card Command Classess CCC                     :0x5b5
14:39:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:32: DSR(driver stage register)  DSR_IMP           :0x0
14:39:32: Reserv2                                       :0x0
14:39:32: Device Size C_SIZE                            :0xedc8
14:39:32: Reserv3                                       :0x0
14:39:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:32: Reserv4                                       :0x0
14:39:32: Write Speed Factor R2W_FACTOR                 :0x2
14:39:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:32: FILE_FORMAT_GRP                               :0x0
14:39:32: COPY flag                                     :0x1
14:39:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:32: File_Format                                   :0x0
14:39:32: CRC                                           :0x0
14:39:32: ####CSD Registe Values####  

14:39:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:32: [GetSCRRegisterEntry] Passed
14:39:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:32: Data_Status_After Erases          : 0
14:39:32: CPRM Security Support             : No Security
14:39:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:32: Spec. Version                     : Version 3.0X
14:39:32: Extended Security Support         : Extended_Security_Not_Supported
14:39:32: Command Support                   : COMMAND_SUPPORT
14:39:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683B10>, <py_sfcl.CommandDataDefinition object at 0x066837E0>) , Command count = 3551 ] 
14:39:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066839C0>, <py_sfcl.CommandDataDefinition object at 0x06683E40>) , Command count = 3552 ] 
14:39:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:32: [ SetBusWidth(0x4) , Command count = 3553 ] 
14:39:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3554 ] 
14:39:32: Protected Area Size 0x28000
14:39:32: Bus Width           2
14:39:32: Secure Mode         0
14:39:32: Speed  Class        4
14:39:32: Perf Move           0
14:39:32: Au Size             9
14:39:32: Erase Size          15
14:39:32: Erase Timeout       1
14:39:32: Erase offset        1
14:39:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3555 ] 
14:39:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:32: Host Frequency set to 100000 KHz
14:39:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:32: ####CSD Registe 2.0 Values####
14:39:32: CSD_STRUCTURE                                 :0x1
14:39:32: Reserv1                                       :0x0
14:39:32: Time Access 1 TAAC                            :0xe
14:39:32: Time Access 2 NSAC*100                        :0x0
14:39:32: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:32: Card Command Classess CCC                     :0x5b5
14:39:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:32: DSR(driver stage register)  DSR_IMP           :0x0
14:39:32: Reserv2                                       :0x0
14:39:32: Device Size C_SIZE                            :0xedc8
14:39:32: Reserv3                                       :0x0
14:39:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:32: Reserv4                                       :0x0
14:39:32: Write Speed Factor R2W_FACTOR                 :0x2
14:39:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:32: FILE_FORMAT_GRP                               :0x0
14:39:32: COPY flag                                     :0x1
14:39:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:32: File_Format                                   :0x0
14:39:32: CRC                                           :0x0
14:39:32: ####CSD Registe Values####  

14:39:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CDB0>, <py_sfcl.CommandDataDefinition object at 0x06683870>) , Command count = 3556 ] 
14:39:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066838A0>, <py_sfcl.CommandDataDefinition object at 0x0667F9F0>) , Command count = 3557 ] 
14:39:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:32: [DVTCommonLib]### Erase :Erase API Called
14:39:32: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x36028 with Blockcount:0x2001
14:39:32: [ EraseLba(0x36028, 0x2001) , Command count = 3558 ] 
14:39:32: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x36028 with Blockcount:0x2001 

14:39:32: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 0
14:39:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x38028 to EndLba:0x38030 with Increment Pattern
14:39:32: [ WrLbaNoData(0x38028, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3559 ] 
14:39:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x38028 to EndLba:0x38030 with Increment Pattern 

14:39:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F5A0>, <py_sfcl.CommandDataDefinition object at 0x06683E70>) , Command count = 3560 ] 
14:39:32: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683120>, <py_sfcl.CommandDataDefinition object at 0x066836F0>) , Command count = 3561 ] 
14:39:32: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:32: [DVTCommonLib]###  R1bCommandAbort called
14:39:32: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xE, False) , Command count = 3562 ] 
14:39:32: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:32: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:34: Host Frequency set to 25000 KHz
14:39:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:34: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FD50>, 0x0, True) , Command count = 3563 ] 
14:39:34: [GO18_globalSetVolt]### Host voltage value is set.
14:39:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683FC0>, 0x0, False) , Command count = 3564 ] 
14:39:34: [GO18_globalSetVolt]### Host voltage value is set.
14:39:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3565 ] 
14:39:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3566 ] 
14:39:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3567 ] 
14:39:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC0480>, <py_sfcl.CommandDataDefinition object at 0x0667FED0>) , Command count = 3568 ] 
14:39:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8C00>, <py_sfcl.CommandDataDefinition object at 0x066834E0>) , Command count = 3569 ] 
14:39:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:34: [ SetCardRCA(0x1, 0xD555) , Command count = 3570 ] 
14:39:34: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:35: Host Frequency set to 25000 KHz
14:39:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:35: ####CSD Registe 2.0 Values####
14:39:35: CSD_STRUCTURE                                 :0x1
14:39:35: Reserv1                                       :0x0
14:39:35: Time Access 1 TAAC                            :0xe
14:39:35: Time Access 2 NSAC*100                        :0x0
14:39:35: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:35: Card Command Classess CCC                     :0x5b5
14:39:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:35: DSR(driver stage register)  DSR_IMP           :0x0
14:39:35: Reserv2                                       :0x0
14:39:35: Device Size C_SIZE                            :0xedc8
14:39:35: Reserv3                                       :0x0
14:39:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:35: Reserv4                                       :0x0
14:39:35: Write Speed Factor R2W_FACTOR                 :0x2
14:39:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:35: FILE_FORMAT_GRP                               :0x0
14:39:35: COPY flag                                     :0x1
14:39:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:35: File_Format                                   :0x0
14:39:35: CRC                                           :0x0
14:39:35: ####CSD Registe Values####  

14:39:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:35: [GetSCRRegisterEntry] Passed
14:39:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:35: Data_Status_After Erases          : 0
14:39:35: CPRM Security Support             : No Security
14:39:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:35: Spec. Version                     : Version 3.0X
14:39:35: Extended Security Support         : Extended_Security_Not_Supported
14:39:35: Command Support                   : COMMAND_SUPPORT
14:39:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683DB0>, <py_sfcl.CommandDataDefinition object at 0x06683780>) , Command count = 3571 ] 
14:39:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AF90>, <py_sfcl.CommandDataDefinition object at 0x066833C0>) , Command count = 3572 ] 
14:39:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:35: [ SetBusWidth(0x4) , Command count = 3573 ] 
14:39:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066856C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3574 ] 
14:39:35: Protected Area Size 0x28000
14:39:35: Bus Width           2
14:39:35: Secure Mode         0
14:39:35: Speed  Class        4
14:39:35: Perf Move           0
14:39:35: Au Size             9
14:39:35: Erase Size          15
14:39:35: Erase Timeout       1
14:39:35: Erase offset        1
14:39:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3575 ] 
14:39:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:35: Host Frequency set to 100000 KHz
14:39:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:35: ####CSD Registe 2.0 Values####
14:39:35: CSD_STRUCTURE                                 :0x1
14:39:35: Reserv1                                       :0x0
14:39:35: Time Access 1 TAAC                            :0xe
14:39:35: Time Access 2 NSAC*100                        :0x0
14:39:35: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:35: Card Command Classess CCC                     :0x5b5
14:39:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:35: DSR(driver stage register)  DSR_IMP           :0x0
14:39:35: Reserv2                                       :0x0
14:39:35: Device Size C_SIZE                            :0xedc8
14:39:35: Reserv3                                       :0x0
14:39:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:35: Reserv4                                       :0x0
14:39:35: Write Speed Factor R2W_FACTOR                 :0x2
14:39:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:35: FILE_FORMAT_GRP                               :0x0
14:39:35: COPY flag                                     :0x1
14:39:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:35: File_Format                                   :0x0
14:39:35: CRC                                           :0x0
14:39:35: ####CSD Registe Values####  

14:39:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6570>, <py_sfcl.CommandDataDefinition object at 0x06683060>) , Command count = 3576 ] 
14:39:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CDE0>, <py_sfcl.CommandDataDefinition object at 0x06685510>) , Command count = 3577 ] 
14:39:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:35: [DVTCommonLib]### Erase :Erase API Called
14:39:35: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x38028 with Blockcount:0x2001
14:39:35: [ EraseLba(0x38028, 0x2001) , Command count = 3578 ] 
14:39:35: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x38028 with Blockcount:0x2001 

14:39:35: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Outer loop Count 1017
14:39:35: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 28
14:39:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x30 to EndLba:0x38 with Increment Pattern
14:39:35: [ WrLbaNoData(0x30, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3579 ] 
14:39:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x30 to EndLba:0x38 with Increment Pattern 

14:39:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8F00>, <py_sfcl.CommandDataDefinition object at 0x05FE8C60>) , Command count = 3580 ] 
14:39:35: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FF90>, <py_sfcl.CommandDataDefinition object at 0x06685330>) , Command count = 3581 ] 
14:39:35: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:35: [DVTCommonLib]###  R1bCommandAbort called
14:39:35: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2F, False) , Command count = 3582 ] 
14:39:35: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:35: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:37: Host Frequency set to 25000 KHz
14:39:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x066831E0>, 0x0, True) , Command count = 3583 ] 
14:39:37: [GO18_globalSetVolt]### Host voltage value is set.
14:39:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FDAC90>, 0x0, False) , Command count = 3584 ] 
14:39:37: [GO18_globalSetVolt]### Host voltage value is set.
14:39:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3585 ] 
14:39:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3586 ] 
14:39:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3587 ] 
14:39:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BE10>, <py_sfcl.CommandDataDefinition object at 0x0667FF30>) , Command count = 3588 ] 
14:39:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060327E0>, <py_sfcl.CommandDataDefinition object at 0x06685540>) , Command count = 3589 ] 
14:39:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:37: [ SetCardRCA(0x1, 0xD555) , Command count = 3590 ] 
14:39:37: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:37: Host Frequency set to 25000 KHz
14:39:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:37: ####CSD Registe 2.0 Values####
14:39:37: CSD_STRUCTURE                                 :0x1
14:39:37: Reserv1                                       :0x0
14:39:37: Time Access 1 TAAC                            :0xe
14:39:37: Time Access 2 NSAC*100                        :0x0
14:39:37: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:37: Card Command Classess CCC                     :0x5b5
14:39:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:37: DSR(driver stage register)  DSR_IMP           :0x0
14:39:37: Reserv2                                       :0x0
14:39:37: Device Size C_SIZE                            :0xedc8
14:39:37: Reserv3                                       :0x0
14:39:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:37: Reserv4                                       :0x0
14:39:37: Write Speed Factor R2W_FACTOR                 :0x2
14:39:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:37: FILE_FORMAT_GRP                               :0x0
14:39:37: COPY flag                                     :0x1
14:39:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:37: File_Format                                   :0x0
14:39:37: CRC                                           :0x0
14:39:37: ####CSD Registe Values####  

14:39:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:37: [GetSCRRegisterEntry] Passed
14:39:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:37: Data_Status_After Erases          : 0
14:39:37: CPRM Security Support             : No Security
14:39:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:37: Spec. Version                     : Version 3.0X
14:39:37: Extended Security Support         : Extended_Security_Not_Supported
14:39:37: Command Support                   : COMMAND_SUPPORT
14:39:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683F00>, <py_sfcl.CommandDataDefinition object at 0x066853F0>) , Command count = 3591 ] 
14:39:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032840>, <py_sfcl.CommandDataDefinition object at 0x06666D50>) , Command count = 3592 ] 
14:39:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:37: [ SetBusWidth(0x4) , Command count = 3593 ] 
14:39:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685C90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3594 ] 
14:39:37: Protected Area Size 0x28000
14:39:37: Bus Width           2
14:39:37: Secure Mode         0
14:39:37: Speed  Class        4
14:39:37: Perf Move           0
14:39:37: Au Size             9
14:39:37: Erase Size          15
14:39:37: Erase Timeout       1
14:39:37: Erase offset        1
14:39:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3595 ] 
14:39:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:37: Host Frequency set to 100000 KHz
14:39:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:37: ####CSD Registe 2.0 Values####
14:39:37: CSD_STRUCTURE                                 :0x1
14:39:37: Reserv1                                       :0x0
14:39:37: Time Access 1 TAAC                            :0xe
14:39:37: Time Access 2 NSAC*100                        :0x0
14:39:37: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:37: Card Command Classess CCC                     :0x5b5
14:39:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:37: DSR(driver stage register)  DSR_IMP           :0x0
14:39:37: Reserv2                                       :0x0
14:39:37: Device Size C_SIZE                            :0xedc8
14:39:37: Reserv3                                       :0x0
14:39:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:37: Reserv4                                       :0x0
14:39:37: Write Speed Factor R2W_FACTOR                 :0x2
14:39:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:37: FILE_FORMAT_GRP                               :0x0
14:39:37: COPY flag                                     :0x1
14:39:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:37: File_Format                                   :0x0
14:39:37: CRC                                           :0x0
14:39:37: ####CSD Registe Values####  

14:39:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032AE0>, <py_sfcl.CommandDataDefinition object at 0x066857B0>) , Command count = 3596 ] 
14:39:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F1B0>, <py_sfcl.CommandDataDefinition object at 0x06685B10>) , Command count = 3597 ] 
14:39:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:37: [DVTCommonLib]### Erase :Erase API Called
14:39:37: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x30 with Blockcount:0x2001
14:39:37: [ EraseLba(0x30, 0x2001) , Command count = 3598 ] 
14:39:37: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x30 with Blockcount:0x2001 

14:39:37: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 27
14:39:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2030 to EndLba:0x2038 with Increment Pattern
14:39:37: [ WrLbaNoData(0x2030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3599 ] 
14:39:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2030 to EndLba:0x2038 with Increment Pattern 

14:39:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032BA0>, <py_sfcl.CommandDataDefinition object at 0x06666720>) , Command count = 3600 ] 
14:39:37: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683750>, <py_sfcl.CommandDataDefinition object at 0x06685A50>) , Command count = 3601 ] 
14:39:37: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:37: [DVTCommonLib]###  R1bCommandAbort called
14:39:38: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x11, False) , Command count = 3602 ] 
14:39:38: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:38: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:40: Host Frequency set to 25000 KHz
14:39:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:40: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683090>, 0x0, True) , Command count = 3603 ] 
14:39:40: [GO18_globalSetVolt]### Host voltage value is set.
14:39:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x06572300>, 0x0, False) , Command count = 3604 ] 
14:39:40: [GO18_globalSetVolt]### Host voltage value is set.
14:39:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3605 ] 
14:39:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3606 ] 
14:39:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3607 ] 
14:39:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BF90>, <py_sfcl.CommandDataDefinition object at 0x06666570>) , Command count = 3608 ] 
14:39:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB210>, <py_sfcl.CommandDataDefinition object at 0x06685990>) , Command count = 3609 ] 
14:39:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:40: [ SetCardRCA(0x1, 0xD555) , Command count = 3610 ] 
14:39:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:40: Host Frequency set to 25000 KHz
14:39:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:40: ####CSD Registe 2.0 Values####
14:39:40: CSD_STRUCTURE                                 :0x1
14:39:40: Reserv1                                       :0x0
14:39:40: Time Access 1 TAAC                            :0xe
14:39:40: Time Access 2 NSAC*100                        :0x0
14:39:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:40: Card Command Classess CCC                     :0x5b5
14:39:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:40: DSR(driver stage register)  DSR_IMP           :0x0
14:39:40: Reserv2                                       :0x0
14:39:40: Device Size C_SIZE                            :0xedc8
14:39:40: Reserv3                                       :0x0
14:39:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:40: Reserv4                                       :0x0
14:39:40: Write Speed Factor R2W_FACTOR                 :0x2
14:39:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:40: FILE_FORMAT_GRP                               :0x0
14:39:40: COPY flag                                     :0x1
14:39:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:40: File_Format                                   :0x0
14:39:40: CRC                                           :0x0
14:39:40: ####CSD Registe Values####  

14:39:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:40: [GetSCRRegisterEntry] Passed
14:39:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:40: Data_Status_After Erases          : 0
14:39:40: CPRM Security Support             : No Security
14:39:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:40: Spec. Version                     : Version 3.0X
14:39:40: Extended Security Support         : Extended_Security_Not_Supported
14:39:40: Command Support                   : COMMAND_SUPPORT
14:39:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683450>, <py_sfcl.CommandDataDefinition object at 0x06685150>) , Command count = 3611 ] 
14:39:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F030>, <py_sfcl.CommandDataDefinition object at 0x066669C0>) , Command count = 3612 ] 
14:39:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:40: [ SetBusWidth(0x4) , Command count = 3613 ] 
14:39:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3614 ] 
14:39:40: Protected Area Size 0x28000
14:39:40: Bus Width           2
14:39:40: Secure Mode         0
14:39:40: Speed  Class        4
14:39:40: Perf Move           0
14:39:40: Au Size             9
14:39:40: Erase Size          15
14:39:40: Erase Timeout       1
14:39:40: Erase offset        1
14:39:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3615 ] 
14:39:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:40: Host Frequency set to 100000 KHz
14:39:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:40: ####CSD Registe 2.0 Values####
14:39:40: CSD_STRUCTURE                                 :0x1
14:39:40: Reserv1                                       :0x0
14:39:40: Time Access 1 TAAC                            :0xe
14:39:40: Time Access 2 NSAC*100                        :0x0
14:39:40: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:40: Card Command Classess CCC                     :0x5b5
14:39:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:40: DSR(driver stage register)  DSR_IMP           :0x0
14:39:40: Reserv2                                       :0x0
14:39:40: Device Size C_SIZE                            :0xedc8
14:39:40: Reserv3                                       :0x0
14:39:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:40: Reserv4                                       :0x0
14:39:40: Write Speed Factor R2W_FACTOR                 :0x2
14:39:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:40: FILE_FORMAT_GRP                               :0x0
14:39:40: COPY flag                                     :0x1
14:39:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:40: File_Format                                   :0x0
14:39:40: CRC                                           :0x0
14:39:40: ####CSD Registe Values####  

14:39:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666390>, <py_sfcl.CommandDataDefinition object at 0x066857E0>) , Command count = 3616 ] 
14:39:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060327B0>, <py_sfcl.CommandDataDefinition object at 0x06685600>) , Command count = 3617 ] 
14:39:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:40: [DVTCommonLib]### Erase :Erase API Called
14:39:40: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2030 with Blockcount:0x2001
14:39:40: [ EraseLba(0x2030, 0x2001) , Command count = 3618 ] 
14:39:40: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2030 with Blockcount:0x2001 

14:39:40: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 26
14:39:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x4030 to EndLba:0x4038 with Increment Pattern
14:39:40: [ WrLbaNoData(0x4030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3619 ] 
14:39:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x4030 to EndLba:0x4038 with Increment Pattern 

14:39:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066667E0>, <py_sfcl.CommandDataDefinition object at 0x06666C60>) , Command count = 3620 ] 
14:39:40: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683ED0>, <py_sfcl.CommandDataDefinition object at 0x06685600>) , Command count = 3621 ] 
14:39:40: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:40: [DVTCommonLib]###  R1bCommandAbort called
14:39:40: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x6, False) , Command count = 3622 ] 
14:39:40: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:40: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:42: Host Frequency set to 25000 KHz
14:39:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:42: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683930>, 0x0, True) , Command count = 3623 ] 
14:39:42: [GO18_globalSetVolt]### Host voltage value is set.
14:39:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB690>, 0x0, False) , Command count = 3624 ] 
14:39:43: [GO18_globalSetVolt]### Host voltage value is set.
14:39:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3625 ] 
14:39:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3626 ] 
14:39:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3627 ] 
14:39:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BC60>, <py_sfcl.CommandDataDefinition object at 0x06683F30>) , Command count = 3628 ] 
14:39:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065721E0>, <py_sfcl.CommandDataDefinition object at 0x06685600>) , Command count = 3629 ] 
14:39:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:43: [ SetCardRCA(0x1, 0xD555) , Command count = 3630 ] 
14:39:43: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:43: Host Frequency set to 25000 KHz
14:39:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:43: ####CSD Registe 2.0 Values####
14:39:43: CSD_STRUCTURE                                 :0x1
14:39:43: Reserv1                                       :0x0
14:39:43: Time Access 1 TAAC                            :0xe
14:39:43: Time Access 2 NSAC*100                        :0x0
14:39:43: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:43: Card Command Classess CCC                     :0x5b5
14:39:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:43: DSR(driver stage register)  DSR_IMP           :0x0
14:39:43: Reserv2                                       :0x0
14:39:43: Device Size C_SIZE                            :0xedc8
14:39:43: Reserv3                                       :0x0
14:39:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:43: Reserv4                                       :0x0
14:39:43: Write Speed Factor R2W_FACTOR                 :0x2
14:39:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:43: FILE_FORMAT_GRP                               :0x0
14:39:43: COPY flag                                     :0x1
14:39:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:43: File_Format                                   :0x0
14:39:43: CRC                                           :0x0
14:39:43: ####CSD Registe Values####  

14:39:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:43: [GetSCRRegisterEntry] Passed
14:39:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:43: Data_Status_After Erases          : 0
14:39:43: CPRM Security Support             : No Security
14:39:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:43: Spec. Version                     : Version 3.0X
14:39:43: Extended Security Support         : Extended_Security_Not_Supported
14:39:43: Command Support                   : COMMAND_SUPPORT
14:39:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683B40>, <py_sfcl.CommandDataDefinition object at 0x066AB1E0>) , Command count = 3631 ] 
14:39:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6F30>, <py_sfcl.CommandDataDefinition object at 0x06666E70>) , Command count = 3632 ] 
14:39:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:43: [ SetBusWidth(0x4) , Command count = 3633 ] 
14:39:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066AB2A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3634 ] 
14:39:43: Protected Area Size 0x28000
14:39:43: Bus Width           2
14:39:43: Secure Mode         0
14:39:43: Speed  Class        4
14:39:43: Perf Move           0
14:39:43: Au Size             9
14:39:43: Erase Size          15
14:39:43: Erase Timeout       1
14:39:43: Erase offset        1
14:39:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3635 ] 
14:39:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:43: Host Frequency set to 100000 KHz
14:39:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:43: ####CSD Registe 2.0 Values####
14:39:43: CSD_STRUCTURE                                 :0x1
14:39:43: Reserv1                                       :0x0
14:39:43: Time Access 1 TAAC                            :0xe
14:39:43: Time Access 2 NSAC*100                        :0x0
14:39:43: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:43: Card Command Classess CCC                     :0x5b5
14:39:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:43: DSR(driver stage register)  DSR_IMP           :0x0
14:39:43: Reserv2                                       :0x0
14:39:43: Device Size C_SIZE                            :0xedc8
14:39:43: Reserv3                                       :0x0
14:39:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:43: Reserv4                                       :0x0
14:39:43: Write Speed Factor R2W_FACTOR                 :0x2
14:39:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:43: FILE_FORMAT_GRP                               :0x0
14:39:43: COPY flag                                     :0x1
14:39:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:43: File_Format                                   :0x0
14:39:43: CRC                                           :0x0
14:39:43: ####CSD Registe Values####  

14:39:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572A20>, <py_sfcl.CommandDataDefinition object at 0x0667A150>) , Command count = 3636 ] 
14:39:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683F90>, <py_sfcl.CommandDataDefinition object at 0x06685840>) , Command count = 3637 ] 
14:39:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:43: [DVTCommonLib]### Erase :Erase API Called
14:39:43: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x4030 with Blockcount:0x2001
14:39:43: [ EraseLba(0x4030, 0x2001) , Command count = 3638 ] 
14:39:43: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x4030 with Blockcount:0x2001 

14:39:43: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 25
14:39:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x6030 to EndLba:0x6038 with Increment Pattern
14:39:43: [ WrLbaNoData(0x6030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3639 ] 
14:39:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x6030 to EndLba:0x6038 with Increment Pattern 

14:39:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666B10>, <py_sfcl.CommandDataDefinition object at 0x066AB5A0>) , Command count = 3640 ] 
14:39:43: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BAB0>, <py_sfcl.CommandDataDefinition object at 0x06685840>) , Command count = 3641 ] 
14:39:43: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:43: [DVTCommonLib]###  R1bCommandAbort called
14:39:43: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x16, False) , Command count = 3642 ] 
14:39:43: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:43: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:45: Host Frequency set to 25000 KHz
14:39:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:45: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x01E5BDB0>, 0x0, True) , Command count = 3643 ] 
14:39:45: [GO18_globalSetVolt]### Host voltage value is set.
14:39:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB9F0>, 0x0, False) , Command count = 3644 ] 
14:39:45: [GO18_globalSetVolt]### Host voltage value is set.
14:39:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3645 ] 
14:39:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3646 ] 
14:39:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3647 ] 
14:39:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABEA0>, <py_sfcl.CommandDataDefinition object at 0x06032E10>) , Command count = 3648 ] 
14:39:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABED0>, <py_sfcl.CommandDataDefinition object at 0x06685840>) , Command count = 3649 ] 
14:39:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:46: [ SetCardRCA(0x1, 0xD555) , Command count = 3650 ] 
14:39:46: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:46: Host Frequency set to 25000 KHz
14:39:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:46: ####CSD Registe 2.0 Values####
14:39:46: CSD_STRUCTURE                                 :0x1
14:39:46: Reserv1                                       :0x0
14:39:46: Time Access 1 TAAC                            :0xe
14:39:46: Time Access 2 NSAC*100                        :0x0
14:39:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:46: Card Command Classess CCC                     :0x5b5
14:39:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:46: DSR(driver stage register)  DSR_IMP           :0x0
14:39:46: Reserv2                                       :0x0
14:39:46: Device Size C_SIZE                            :0xedc8
14:39:46: Reserv3                                       :0x0
14:39:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:46: Reserv4                                       :0x0
14:39:46: Write Speed Factor R2W_FACTOR                 :0x2
14:39:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:46: FILE_FORMAT_GRP                               :0x0
14:39:46: COPY flag                                     :0x1
14:39:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:46: File_Format                                   :0x0
14:39:46: CRC                                           :0x0
14:39:46: ####CSD Registe Values####  

14:39:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:46: [GetSCRRegisterEntry] Passed
14:39:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:46: Data_Status_After Erases          : 0
14:39:46: CPRM Security Support             : No Security
14:39:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:46: Spec. Version                     : Version 3.0X
14:39:46: Extended Security Support         : Extended_Security_Not_Supported
14:39:46: Command Support                   : COMMAND_SUPPORT
14:39:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB420>, <py_sfcl.CommandDataDefinition object at 0x0667A720>) , Command count = 3651 ] 
14:39:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666960>, <py_sfcl.CommandDataDefinition object at 0x06666870>) , Command count = 3652 ] 
14:39:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:46: [ SetBusWidth(0x4) , Command count = 3653 ] 
14:39:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667ACF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3654 ] 
14:39:46: Protected Area Size 0x28000
14:39:46: Bus Width           2
14:39:46: Secure Mode         0
14:39:46: Speed  Class        4
14:39:46: Perf Move           0
14:39:46: Au Size             9
14:39:46: Erase Size          15
14:39:46: Erase Timeout       1
14:39:46: Erase offset        1
14:39:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3655 ] 
14:39:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:46: Host Frequency set to 100000 KHz
14:39:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:46: ####CSD Registe 2.0 Values####
14:39:46: CSD_STRUCTURE                                 :0x1
14:39:46: Reserv1                                       :0x0
14:39:46: Time Access 1 TAAC                            :0xe
14:39:46: Time Access 2 NSAC*100                        :0x0
14:39:46: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:46: Card Command Classess CCC                     :0x5b5
14:39:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:46: DSR(driver stage register)  DSR_IMP           :0x0
14:39:46: Reserv2                                       :0x0
14:39:46: Device Size C_SIZE                            :0xedc8
14:39:46: Reserv3                                       :0x0
14:39:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:46: Reserv4                                       :0x0
14:39:46: Write Speed Factor R2W_FACTOR                 :0x2
14:39:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:46: FILE_FORMAT_GRP                               :0x0
14:39:46: COPY flag                                     :0x1
14:39:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:46: File_Format                                   :0x0
14:39:46: CRC                                           :0x0
14:39:46: ####CSD Registe Values####  

14:39:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666D80>, <py_sfcl.CommandDataDefinition object at 0x0667A2A0>) , Command count = 3656 ] 
14:39:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06685AB0>, <py_sfcl.CommandDataDefinition object at 0x066851E0>) , Command count = 3657 ] 
14:39:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:46: [DVTCommonLib]### Erase :Erase API Called
14:39:46: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x6030 with Blockcount:0x2001
14:39:46: [ EraseLba(0x6030, 0x2001) , Command count = 3658 ] 
14:39:46: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x6030 with Blockcount:0x2001 

14:39:46: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 24
14:39:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x8030 to EndLba:0x8038 with Increment Pattern
14:39:46: [ WrLbaNoData(0x8030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3659 ] 
14:39:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x8030 to EndLba:0x8038 with Increment Pattern 

14:39:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A9C0>, <py_sfcl.CommandDataDefinition object at 0x0667A7E0>) , Command count = 3660 ] 
14:39:46: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032B70>, <py_sfcl.CommandDataDefinition object at 0x066851E0>) , Command count = 3661 ] 
14:39:46: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:46: [DVTCommonLib]###  R1bCommandAbort called
14:39:46: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x6, False) , Command count = 3662 ] 
14:39:46: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:46: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:48: Host Frequency set to 25000 KHz
14:39:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:48: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666B70>, 0x0, True) , Command count = 3663 ] 
14:39:48: [GO18_globalSetVolt]### Host voltage value is set.
14:39:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A900>, 0x0, False) , Command count = 3664 ] 
14:39:48: [GO18_globalSetVolt]### Host voltage value is set.
14:39:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3665 ] 
14:39:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3666 ] 
14:39:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3667 ] 
14:39:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A1E0>, <py_sfcl.CommandDataDefinition object at 0x0667AA80>) , Command count = 3668 ] 
14:39:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A960>, <py_sfcl.CommandDataDefinition object at 0x0667AAE0>) , Command count = 3669 ] 
14:39:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:48: [ SetCardRCA(0x1, 0xD555) , Command count = 3670 ] 
14:39:48: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:48: Host Frequency set to 25000 KHz
14:39:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:48: ####CSD Registe 2.0 Values####
14:39:48: CSD_STRUCTURE                                 :0x1
14:39:48: Reserv1                                       :0x0
14:39:48: Time Access 1 TAAC                            :0xe
14:39:48: Time Access 2 NSAC*100                        :0x0
14:39:48: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:48: Card Command Classess CCC                     :0x5b5
14:39:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:48: DSR(driver stage register)  DSR_IMP           :0x0
14:39:48: Reserv2                                       :0x0
14:39:48: Device Size C_SIZE                            :0xedc8
14:39:48: Reserv3                                       :0x0
14:39:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:48: Reserv4                                       :0x0
14:39:48: Write Speed Factor R2W_FACTOR                 :0x2
14:39:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:48: FILE_FORMAT_GRP                               :0x0
14:39:48: COPY flag                                     :0x1
14:39:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:48: File_Format                                   :0x0
14:39:48: CRC                                           :0x0
14:39:48: ####CSD Registe Values####  

14:39:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:48: [GetSCRRegisterEntry] Passed
14:39:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:48: Data_Status_After Erases          : 0
14:39:48: CPRM Security Support             : No Security
14:39:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:48: Spec. Version                     : Version 3.0X
14:39:48: Extended Security Support         : Extended_Security_Not_Supported
14:39:48: Command Support                   : COMMAND_SUPPORT
14:39:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB3C0>, <py_sfcl.CommandDataDefinition object at 0x0667A690>) , Command count = 3671 ] 
14:39:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FDB0>, <py_sfcl.CommandDataDefinition object at 0x0667A7B0>) , Command count = 3672 ] 
14:39:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:48: [ SetBusWidth(0x4) , Command count = 3673 ] 
14:39:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A8D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3674 ] 
14:39:49: Protected Area Size 0x28000
14:39:49: Bus Width           2
14:39:49: Secure Mode         0
14:39:49: Speed  Class        4
14:39:49: Perf Move           0
14:39:49: Au Size             9
14:39:49: Erase Size          15
14:39:49: Erase Timeout       1
14:39:49: Erase offset        1
14:39:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3675 ] 
14:39:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:49: Host Frequency set to 100000 KHz
14:39:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:49: ####CSD Registe 2.0 Values####
14:39:49: CSD_STRUCTURE                                 :0x1
14:39:49: Reserv1                                       :0x0
14:39:49: Time Access 1 TAAC                            :0xe
14:39:49: Time Access 2 NSAC*100                        :0x0
14:39:49: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:49: Card Command Classess CCC                     :0x5b5
14:39:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:49: DSR(driver stage register)  DSR_IMP           :0x0
14:39:49: Reserv2                                       :0x0
14:39:49: Device Size C_SIZE                            :0xedc8
14:39:49: Reserv3                                       :0x0
14:39:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:49: Reserv4                                       :0x0
14:39:49: Write Speed Factor R2W_FACTOR                 :0x2
14:39:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:49: FILE_FORMAT_GRP                               :0x0
14:39:49: COPY flag                                     :0x1
14:39:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:49: File_Format                                   :0x0
14:39:49: CRC                                           :0x0
14:39:49: ####CSD Registe Values####  

14:39:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AB10>, <py_sfcl.CommandDataDefinition object at 0x0667ACF0>) , Command count = 3676 ] 
14:39:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666120>, <py_sfcl.CommandDataDefinition object at 0x06685480>) , Command count = 3677 ] 
14:39:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:49: [DVTCommonLib]### Erase :Erase API Called
14:39:49: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x8030 with Blockcount:0x2001
14:39:49: [ EraseLba(0x8030, 0x2001) , Command count = 3678 ] 
14:39:49: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x8030 with Blockcount:0x2001 

14:39:49: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 23
14:39:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xA030 to EndLba:0xA038 with Increment Pattern
14:39:49: [ WrLbaNoData(0xA030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3679 ] 
14:39:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xA030 to EndLba:0xA038 with Increment Pattern 

14:39:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AE10>, <py_sfcl.CommandDataDefinition object at 0x0667A6F0>) , Command count = 3680 ] 
14:39:49: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF60>, <py_sfcl.CommandDataDefinition object at 0x0667A240>) , Command count = 3681 ] 
14:39:49: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:49: [DVTCommonLib]###  R1bCommandAbort called
14:39:49: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2A, False) , Command count = 3682 ] 
14:39:49: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:49: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:51: Host Frequency set to 25000 KHz
14:39:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x066666C0>, 0x0, True) , Command count = 3683 ] 
14:39:51: [GO18_globalSetVolt]### Host voltage value is set.
14:39:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C330>, 0x0, False) , Command count = 3684 ] 
14:39:51: [GO18_globalSetVolt]### Host voltage value is set.
14:39:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3685 ] 
14:39:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3686 ] 
14:39:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3687 ] 
14:39:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F630>, <py_sfcl.CommandDataDefinition object at 0x0667C2D0>) , Command count = 3688 ] 
14:39:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C0F0>, <py_sfcl.CommandDataDefinition object at 0x0667AC00>) , Command count = 3689 ] 
14:39:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:51: [ SetCardRCA(0x1, 0xD555) , Command count = 3690 ] 
14:39:51: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:51: Host Frequency set to 25000 KHz
14:39:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:51: ####CSD Registe 2.0 Values####
14:39:51: CSD_STRUCTURE                                 :0x1
14:39:51: Reserv1                                       :0x0
14:39:51: Time Access 1 TAAC                            :0xe
14:39:51: Time Access 2 NSAC*100                        :0x0
14:39:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:51: Card Command Classess CCC                     :0x5b5
14:39:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:51: DSR(driver stage register)  DSR_IMP           :0x0
14:39:51: Reserv2                                       :0x0
14:39:51: Device Size C_SIZE                            :0xedc8
14:39:51: Reserv3                                       :0x0
14:39:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:51: Reserv4                                       :0x0
14:39:51: Write Speed Factor R2W_FACTOR                 :0x2
14:39:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:51: FILE_FORMAT_GRP                               :0x0
14:39:51: COPY flag                                     :0x1
14:39:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:51: File_Format                                   :0x0
14:39:51: CRC                                           :0x0
14:39:51: ####CSD Registe Values####  

14:39:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:51: [GetSCRRegisterEntry] Passed
14:39:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:51: Data_Status_After Erases          : 0
14:39:51: CPRM Security Support             : No Security
14:39:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:51: Spec. Version                     : Version 3.0X
14:39:51: Extended Security Support         : Extended_Security_Not_Supported
14:39:51: Command Support                   : COMMAND_SUPPORT
14:39:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666540>, <py_sfcl.CommandDataDefinition object at 0x0667A750>) , Command count = 3691 ] 
14:39:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C030>, <py_sfcl.CommandDataDefinition object at 0x0667C1E0>) , Command count = 3692 ] 
14:39:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:51: [ SetBusWidth(0x4) , Command count = 3693 ] 
14:39:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C060>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3694 ] 
14:39:51: Protected Area Size 0x28000
14:39:51: Bus Width           2
14:39:51: Secure Mode         0
14:39:51: Speed  Class        4
14:39:51: Perf Move           0
14:39:51: Au Size             9
14:39:51: Erase Size          15
14:39:51: Erase Timeout       1
14:39:51: Erase offset        1
14:39:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3695 ] 
14:39:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:51: Host Frequency set to 100000 KHz
14:39:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:51: ####CSD Registe 2.0 Values####
14:39:51: CSD_STRUCTURE                                 :0x1
14:39:51: Reserv1                                       :0x0
14:39:51: Time Access 1 TAAC                            :0xe
14:39:51: Time Access 2 NSAC*100                        :0x0
14:39:51: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:51: Card Command Classess CCC                     :0x5b5
14:39:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:51: DSR(driver stage register)  DSR_IMP           :0x0
14:39:51: Reserv2                                       :0x0
14:39:51: Device Size C_SIZE                            :0xedc8
14:39:51: Reserv3                                       :0x0
14:39:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:51: Reserv4                                       :0x0
14:39:51: Write Speed Factor R2W_FACTOR                 :0x2
14:39:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:51: FILE_FORMAT_GRP                               :0x0
14:39:51: COPY flag                                     :0x1
14:39:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:51: File_Format                                   :0x0
14:39:51: CRC                                           :0x0
14:39:51: ####CSD Registe Values####  

14:39:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A990>, <py_sfcl.CommandDataDefinition object at 0x066ABF00>) , Command count = 3696 ] 
14:39:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF30>, <py_sfcl.CommandDataDefinition object at 0x06685060>) , Command count = 3697 ] 
14:39:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:51: [DVTCommonLib]### Erase :Erase API Called
14:39:51: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xA030 with Blockcount:0x2001
14:39:51: [ EraseLba(0xA030, 0x2001) , Command count = 3698 ] 
14:39:51: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xA030 with Blockcount:0x2001 

14:39:51: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 22
14:39:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xC030 to EndLba:0xC038 with Increment Pattern
14:39:51: [ WrLbaNoData(0xC030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3699 ] 
14:39:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xC030 to EndLba:0xC038 with Increment Pattern 

14:39:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABDE0>, <py_sfcl.CommandDataDefinition object at 0x06666090>) , Command count = 3700 ] 
14:39:51: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB7B0>, <py_sfcl.CommandDataDefinition object at 0x06685060>) , Command count = 3701 ] 
14:39:51: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:51: [DVTCommonLib]###  R1bCommandAbort called
14:39:52: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x10, False) , Command count = 3702 ] 
14:39:52: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:52: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:54: Host Frequency set to 25000 KHz
14:39:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:54: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x066668A0>, 0x0, True) , Command count = 3703 ] 
14:39:54: [GO18_globalSetVolt]### Host voltage value is set.
14:39:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C240>, 0x0, False) , Command count = 3704 ] 
14:39:54: [GO18_globalSetVolt]### Host voltage value is set.
14:39:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3705 ] 
14:39:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3706 ] 
14:39:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3707 ] 
14:39:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A870>, <py_sfcl.CommandDataDefinition object at 0x0667A450>) , Command count = 3708 ] 
14:39:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C480>, <py_sfcl.CommandDataDefinition object at 0x0667C780>) , Command count = 3709 ] 
14:39:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:54: [ SetCardRCA(0x1, 0xD555) , Command count = 3710 ] 
14:39:54: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:54: Host Frequency set to 25000 KHz
14:39:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:54: ####CSD Registe 2.0 Values####
14:39:54: CSD_STRUCTURE                                 :0x1
14:39:54: Reserv1                                       :0x0
14:39:54: Time Access 1 TAAC                            :0xe
14:39:54: Time Access 2 NSAC*100                        :0x0
14:39:54: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:54: Card Command Classess CCC                     :0x5b5
14:39:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:54: DSR(driver stage register)  DSR_IMP           :0x0
14:39:54: Reserv2                                       :0x0
14:39:54: Device Size C_SIZE                            :0xedc8
14:39:54: Reserv3                                       :0x0
14:39:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:54: Reserv4                                       :0x0
14:39:54: Write Speed Factor R2W_FACTOR                 :0x2
14:39:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:54: FILE_FORMAT_GRP                               :0x0
14:39:54: COPY flag                                     :0x1
14:39:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:54: File_Format                                   :0x0
14:39:54: CRC                                           :0x0
14:39:54: ####CSD Registe Values####  

14:39:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:54: [GetSCRRegisterEntry] Passed
14:39:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:54: Data_Status_After Erases          : 0
14:39:54: CPRM Security Support             : No Security
14:39:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:54: Spec. Version                     : Version 3.0X
14:39:54: Extended Security Support         : Extended_Security_Not_Supported
14:39:54: Command Support                   : COMMAND_SUPPORT
14:39:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB360>, <py_sfcl.CommandDataDefinition object at 0x0667CF30>) , Command count = 3711 ] 
14:39:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AFC0>, <py_sfcl.CommandDataDefinition object at 0x0667C9C0>) , Command count = 3712 ] 
14:39:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:54: [ SetBusWidth(0x4) , Command count = 3713 ] 
14:39:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667CAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3714 ] 
14:39:54: Protected Area Size 0x28000
14:39:54: Bus Width           2
14:39:54: Secure Mode         0
14:39:54: Speed  Class        4
14:39:54: Perf Move           0
14:39:54: Au Size             9
14:39:54: Erase Size          15
14:39:54: Erase Timeout       1
14:39:54: Erase offset        1
14:39:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3715 ] 
14:39:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:54: Host Frequency set to 100000 KHz
14:39:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:54: ####CSD Registe 2.0 Values####
14:39:54: CSD_STRUCTURE                                 :0x1
14:39:54: Reserv1                                       :0x0
14:39:54: Time Access 1 TAAC                            :0xe
14:39:54: Time Access 2 NSAC*100                        :0x0
14:39:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:54: Card Command Classess CCC                     :0x5b5
14:39:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:54: DSR(driver stage register)  DSR_IMP           :0x0
14:39:54: Reserv2                                       :0x0
14:39:54: Device Size C_SIZE                            :0xedc8
14:39:54: Reserv3                                       :0x0
14:39:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:54: Reserv4                                       :0x0
14:39:54: Write Speed Factor R2W_FACTOR                 :0x2
14:39:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:54: FILE_FORMAT_GRP                               :0x0
14:39:54: COPY flag                                     :0x1
14:39:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:54: File_Format                                   :0x0
14:39:54: CRC                                           :0x0
14:39:54: ####CSD Registe Values####  

14:39:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CA80>, <py_sfcl.CommandDataDefinition object at 0x0667C060>) , Command count = 3716 ] 
14:39:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AD20>, <py_sfcl.CommandDataDefinition object at 0x06685870>) , Command count = 3717 ] 
14:39:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:54: [DVTCommonLib]### Erase :Erase API Called
14:39:54: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xC030 with Blockcount:0x2001
14:39:54: [ EraseLba(0xC030, 0x2001) , Command count = 3718 ] 
14:39:54: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xC030 with Blockcount:0x2001 

14:39:54: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 21
14:39:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xE030 to EndLba:0xE038 with Increment Pattern
14:39:54: [ WrLbaNoData(0xE030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3719 ] 
14:39:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xE030 to EndLba:0xE038 with Increment Pattern 

14:39:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C6C0>, <py_sfcl.CommandDataDefinition object at 0x0667C7E0>) , Command count = 3720 ] 
14:39:54: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C7B0>, <py_sfcl.CommandDataDefinition object at 0x0667A810>) , Command count = 3721 ] 
14:39:54: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:54: [DVTCommonLib]###  R1bCommandAbort called
14:39:54: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2D, False) , Command count = 3722 ] 
14:39:54: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:54: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:56: Host Frequency set to 25000 KHz
14:39:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:56: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CBD0>, 0x0, True) , Command count = 3723 ] 
14:39:56: [GO18_globalSetVolt]### Host voltage value is set.
14:39:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F7E0>, 0x0, False) , Command count = 3724 ] 
14:39:56: [GO18_globalSetVolt]### Host voltage value is set.
14:39:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3725 ] 
14:39:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3726 ] 
14:39:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3727 ] 
14:39:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066830C0>, <py_sfcl.CommandDataDefinition object at 0x0667CB10>) , Command count = 3728 ] 
14:39:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F420>, <py_sfcl.CommandDataDefinition object at 0x0667A810>) , Command count = 3729 ] 
14:39:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:57: [ SetCardRCA(0x1, 0xD555) , Command count = 3730 ] 
14:39:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:57: Host Frequency set to 25000 KHz
14:39:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:57: ####CSD Registe 2.0 Values####
14:39:57: CSD_STRUCTURE                                 :0x1
14:39:57: Reserv1                                       :0x0
14:39:57: Time Access 1 TAAC                            :0xe
14:39:57: Time Access 2 NSAC*100                        :0x0
14:39:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:57: Card Command Classess CCC                     :0x5b5
14:39:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:57: DSR(driver stage register)  DSR_IMP           :0x0
14:39:57: Reserv2                                       :0x0
14:39:57: Device Size C_SIZE                            :0xedc8
14:39:57: Reserv3                                       :0x0
14:39:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:57: Reserv4                                       :0x0
14:39:57: Write Speed Factor R2W_FACTOR                 :0x2
14:39:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:57: FILE_FORMAT_GRP                               :0x0
14:39:57: COPY flag                                     :0x1
14:39:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:57: File_Format                                   :0x0
14:39:57: CRC                                           :0x0
14:39:57: ####CSD Registe Values####  

14:39:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:57: [GetSCRRegisterEntry] Passed
14:39:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:57: Data_Status_After Erases          : 0
14:39:57: CPRM Security Support             : No Security
14:39:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:57: Spec. Version                     : Version 3.0X
14:39:57: Extended Security Support         : Extended_Security_Not_Supported
14:39:57: Command Support                   : COMMAND_SUPPORT
14:39:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C420>, <py_sfcl.CommandDataDefinition object at 0x0667C900>) , Command count = 3731 ] 
14:39:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F060>, <py_sfcl.CommandDataDefinition object at 0x0667FB10>) , Command count = 3732 ] 
14:39:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:57: [ SetBusWidth(0x4) , Command count = 3733 ] 
14:39:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C5A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3734 ] 
14:39:57: Protected Area Size 0x28000
14:39:57: Bus Width           2
14:39:57: Secure Mode         0
14:39:57: Speed  Class        4
14:39:57: Perf Move           0
14:39:57: Au Size             9
14:39:57: Erase Size          15
14:39:57: Erase Timeout       1
14:39:57: Erase offset        1
14:39:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3735 ] 
14:39:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:57: Host Frequency set to 100000 KHz
14:39:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:57: ####CSD Registe 2.0 Values####
14:39:57: CSD_STRUCTURE                                 :0x1
14:39:57: Reserv1                                       :0x0
14:39:57: Time Access 1 TAAC                            :0xe
14:39:57: Time Access 2 NSAC*100                        :0x0
14:39:57: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:57: Card Command Classess CCC                     :0x5b5
14:39:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:57: DSR(driver stage register)  DSR_IMP           :0x0
14:39:57: Reserv2                                       :0x0
14:39:57: Device Size C_SIZE                            :0xedc8
14:39:57: Reserv3                                       :0x0
14:39:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:57: Reserv4                                       :0x0
14:39:57: Write Speed Factor R2W_FACTOR                 :0x2
14:39:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:57: FILE_FORMAT_GRP                               :0x0
14:39:57: COPY flag                                     :0x1
14:39:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:57: File_Format                                   :0x0
14:39:57: CRC                                           :0x0
14:39:57: ####CSD Registe Values####  

14:39:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F180>, <py_sfcl.CommandDataDefinition object at 0x0667CAB0>) , Command count = 3736 ] 
14:39:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AF00>, <py_sfcl.CommandDataDefinition object at 0x06685780>) , Command count = 3737 ] 
14:39:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:57: [DVTCommonLib]### Erase :Erase API Called
14:39:57: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xE030 with Blockcount:0x2001
14:39:57: [ EraseLba(0xE030, 0x2001) , Command count = 3738 ] 
14:39:57: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xE030 with Blockcount:0x2001 

14:39:57: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 20
14:39:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x10030 to EndLba:0x10038 with Increment Pattern
14:39:57: [ WrLbaNoData(0x10030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3739 ] 
14:39:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x10030 to EndLba:0x10038 with Increment Pattern 

14:39:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F4B0>, <py_sfcl.CommandDataDefinition object at 0x0667F270>) , Command count = 3740 ] 
14:39:57: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:39:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C840>, <py_sfcl.CommandDataDefinition object at 0x0667C210>) , Command count = 3741 ] 
14:39:57: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:39:57: [DVTCommonLib]###  R1bCommandAbort called
14:39:57: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x24, False) , Command count = 3742 ] 
14:39:57: [DVTCommonLib]###  R1bCommandAbort Completed 

14:39:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:59: Host Frequency set to 25000 KHz
14:39:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667ADE0>, 0x0, True) , Command count = 3743 ] 
14:39:59: [GO18_globalSetVolt]### Host voltage value is set.
14:39:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FE40>, 0x0, False) , Command count = 3744 ] 
14:39:59: [GO18_globalSetVolt]### Host voltage value is set.
14:39:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3745 ] 
14:39:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3746 ] 
14:39:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3747 ] 
14:39:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ABD0>, <py_sfcl.CommandDataDefinition object at 0x0667F660>) , Command count = 3748 ] 
14:40:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F840>, <py_sfcl.CommandDataDefinition object at 0x0667CBA0>) , Command count = 3749 ] 
14:40:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:00: [ SetCardRCA(0x1, 0xD555) , Command count = 3750 ] 
14:40:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:00: Host Frequency set to 25000 KHz
14:40:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:00: ####CSD Registe 2.0 Values####
14:40:00: CSD_STRUCTURE                                 :0x1
14:40:00: Reserv1                                       :0x0
14:40:00: Time Access 1 TAAC                            :0xe
14:40:00: Time Access 2 NSAC*100                        :0x0
14:40:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:00: Card Command Classess CCC                     :0x5b5
14:40:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:00: DSR(driver stage register)  DSR_IMP           :0x0
14:40:00: Reserv2                                       :0x0
14:40:00: Device Size C_SIZE                            :0xedc8
14:40:00: Reserv3                                       :0x0
14:40:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:00: Reserv4                                       :0x0
14:40:00: Write Speed Factor R2W_FACTOR                 :0x2
14:40:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:00: FILE_FORMAT_GRP                               :0x0
14:40:00: COPY flag                                     :0x1
14:40:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:00: File_Format                                   :0x0
14:40:00: CRC                                           :0x0
14:40:00: ####CSD Registe Values####  

14:40:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:00: [GetSCRRegisterEntry] Passed
14:40:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:00: Data_Status_After Erases          : 0
14:40:00: CPRM Security Support             : No Security
14:40:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:00: Spec. Version                     : Version 3.0X
14:40:00: Extended Security Support         : Extended_Security_Not_Supported
14:40:00: Command Support                   : COMMAND_SUPPORT
14:40:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AA20>, <py_sfcl.CommandDataDefinition object at 0x0667F900>) , Command count = 3751 ] 
14:40:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AEA0>, <py_sfcl.CommandDataDefinition object at 0x0667CEA0>) , Command count = 3752 ] 
14:40:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:00: [ SetBusWidth(0x4) , Command count = 3753 ] 
14:40:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F5D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3754 ] 
14:40:00: Protected Area Size 0x28000
14:40:00: Bus Width           2
14:40:00: Secure Mode         0
14:40:00: Speed  Class        4
14:40:00: Perf Move           0
14:40:00: Au Size             9
14:40:00: Erase Size          15
14:40:00: Erase Timeout       1
14:40:00: Erase offset        1
14:40:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3755 ] 
14:40:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:00: Host Frequency set to 100000 KHz
14:40:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:00: ####CSD Registe 2.0 Values####
14:40:00: CSD_STRUCTURE                                 :0x1
14:40:00: Reserv1                                       :0x0
14:40:00: Time Access 1 TAAC                            :0xe
14:40:00: Time Access 2 NSAC*100                        :0x0
14:40:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:00: Card Command Classess CCC                     :0x5b5
14:40:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:00: DSR(driver stage register)  DSR_IMP           :0x0
14:40:00: Reserv2                                       :0x0
14:40:00: Device Size C_SIZE                            :0xedc8
14:40:00: Reserv3                                       :0x0
14:40:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:00: Reserv4                                       :0x0
14:40:00: Write Speed Factor R2W_FACTOR                 :0x2
14:40:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:00: FILE_FORMAT_GRP                               :0x0
14:40:00: COPY flag                                     :0x1
14:40:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:00: File_Format                                   :0x0
14:40:00: CRC                                           :0x0
14:40:00: ####CSD Registe Values####  

14:40:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F9C0>, <py_sfcl.CommandDataDefinition object at 0x0667C5A0>) , Command count = 3756 ] 
14:40:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A930>, <py_sfcl.CommandDataDefinition object at 0x06685120>) , Command count = 3757 ] 
14:40:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:00: [DVTCommonLib]### Erase :Erase API Called
14:40:00: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x10030 with Blockcount:0x2001
14:40:00: [ EraseLba(0x10030, 0x2001) , Command count = 3758 ] 
14:40:00: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x10030 with Blockcount:0x2001 

14:40:00: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 19
14:40:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x12030 to EndLba:0x12038 with Increment Pattern
14:40:00: [ WrLbaNoData(0x12030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3759 ] 
14:40:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x12030 to EndLba:0x12038 with Increment Pattern 

14:40:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683570>, <py_sfcl.CommandDataDefinition object at 0x0667FC00>) , Command count = 3760 ] 
14:40:00: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ACC0>, <py_sfcl.CommandDataDefinition object at 0x0667C120>) , Command count = 3761 ] 
14:40:00: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:00: [DVTCommonLib]###  R1bCommandAbort called
14:40:00: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x25, False) , Command count = 3762 ] 
14:40:00: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:02: Host Frequency set to 25000 KHz
14:40:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:02: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AC90>, 0x0, True) , Command count = 3763 ] 
14:40:02: [GO18_globalSetVolt]### Host voltage value is set.
14:40:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683180>, 0x0, False) , Command count = 3764 ] 
14:40:02: [GO18_globalSetVolt]### Host voltage value is set.
14:40:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3765 ] 
14:40:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3766 ] 
14:40:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3767 ] 
14:40:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FE70>, <py_sfcl.CommandDataDefinition object at 0x0667F720>) , Command count = 3768 ] 
14:40:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683360>, <py_sfcl.CommandDataDefinition object at 0x0667CE70>) , Command count = 3769 ] 
14:40:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:02: [ SetCardRCA(0x1, 0xD555) , Command count = 3770 ] 
14:40:02: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:02: Host Frequency set to 25000 KHz
14:40:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:02: ####CSD Registe 2.0 Values####
14:40:02: CSD_STRUCTURE                                 :0x1
14:40:02: Reserv1                                       :0x0
14:40:02: Time Access 1 TAAC                            :0xe
14:40:02: Time Access 2 NSAC*100                        :0x0
14:40:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:02: Card Command Classess CCC                     :0x5b5
14:40:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:02: DSR(driver stage register)  DSR_IMP           :0x0
14:40:02: Reserv2                                       :0x0
14:40:02: Device Size C_SIZE                            :0xedc8
14:40:02: Reserv3                                       :0x0
14:40:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:02: Reserv4                                       :0x0
14:40:02: Write Speed Factor R2W_FACTOR                 :0x2
14:40:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:02: FILE_FORMAT_GRP                               :0x0
14:40:02: COPY flag                                     :0x1
14:40:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:02: File_Format                                   :0x0
14:40:02: CRC                                           :0x0
14:40:02: ####CSD Registe Values####  

14:40:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:02: [GetSCRRegisterEntry] Passed
14:40:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:02: Data_Status_After Erases          : 0
14:40:02: CPRM Security Support             : No Security
14:40:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:02: Spec. Version                     : Version 3.0X
14:40:02: Extended Security Support         : Extended_Security_Not_Supported
14:40:02: Command Support                   : COMMAND_SUPPORT
14:40:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AF30>, <py_sfcl.CommandDataDefinition object at 0x0667FD80>) , Command count = 3771 ] 
14:40:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683A50>, <py_sfcl.CommandDataDefinition object at 0x0667CC00>) , Command count = 3772 ] 
14:40:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:03: [ SetBusWidth(0x4) , Command count = 3773 ] 
14:40:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667FEA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3774 ] 
14:40:03: Protected Area Size 0x28000
14:40:03: Bus Width           2
14:40:03: Secure Mode         0
14:40:03: Speed  Class        4
14:40:03: Perf Move           0
14:40:03: Au Size             9
14:40:03: Erase Size          15
14:40:03: Erase Timeout       1
14:40:03: Erase offset        1
14:40:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3775 ] 
14:40:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:03: Host Frequency set to 100000 KHz
14:40:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:03: ####CSD Registe 2.0 Values####
14:40:03: CSD_STRUCTURE                                 :0x1
14:40:03: Reserv1                                       :0x0
14:40:03: Time Access 1 TAAC                            :0xe
14:40:03: Time Access 2 NSAC*100                        :0x0
14:40:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:03: Card Command Classess CCC                     :0x5b5
14:40:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:03: DSR(driver stage register)  DSR_IMP           :0x0
14:40:03: Reserv2                                       :0x0
14:40:03: Device Size C_SIZE                            :0xedc8
14:40:03: Reserv3                                       :0x0
14:40:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:03: Reserv4                                       :0x0
14:40:03: Write Speed Factor R2W_FACTOR                 :0x2
14:40:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:03: FILE_FORMAT_GRP                               :0x0
14:40:03: COPY flag                                     :0x1
14:40:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:03: File_Format                                   :0x0
14:40:03: CRC                                           :0x0
14:40:03: ####CSD Registe Values####  

14:40:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FC90>, <py_sfcl.CommandDataDefinition object at 0x0667FDE0>) , Command count = 3776 ] 
14:40:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A9F0>, <py_sfcl.CommandDataDefinition object at 0x06685C30>) , Command count = 3777 ] 
14:40:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:03: [DVTCommonLib]### Erase :Erase API Called
14:40:03: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x12030 with Blockcount:0x2001
14:40:03: [ EraseLba(0x12030, 0x2001) , Command count = 3778 ] 
14:40:03: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x12030 with Blockcount:0x2001 

14:40:03: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 18
14:40:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x14030 to EndLba:0x14038 with Increment Pattern
14:40:03: [ WrLbaNoData(0x14030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3779 ] 
14:40:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x14030 to EndLba:0x14038 with Increment Pattern 

14:40:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066833F0>, <py_sfcl.CommandDataDefinition object at 0x06683390>) , Command count = 3780 ] 
14:40:03: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F870>, <py_sfcl.CommandDataDefinition object at 0x0667F3F0>) , Command count = 3781 ] 
14:40:03: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:03: [DVTCommonLib]###  R1bCommandAbort called
14:40:03: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x14, False) , Command count = 3782 ] 
14:40:03: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:05: Host Frequency set to 25000 KHz
14:40:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F240>, 0x0, True) , Command count = 3783 ] 
14:40:05: [GO18_globalSetVolt]### Host voltage value is set.
14:40:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB570>, 0x0, False) , Command count = 3784 ] 
14:40:05: [GO18_globalSetVolt]### Host voltage value is set.
14:40:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3785 ] 
14:40:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3786 ] 
14:40:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3787 ] 
14:40:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066835A0>, <py_sfcl.CommandDataDefinition object at 0x06683540>) , Command count = 3788 ] 
14:40:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D80>, <py_sfcl.CommandDataDefinition object at 0x0667F8D0>) , Command count = 3789 ] 
14:40:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:05: [ SetCardRCA(0x1, 0xD555) , Command count = 3790 ] 
14:40:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:05: Host Frequency set to 25000 KHz
14:40:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:05: ####CSD Registe 2.0 Values####
14:40:05: CSD_STRUCTURE                                 :0x1
14:40:05: Reserv1                                       :0x0
14:40:05: Time Access 1 TAAC                            :0xe
14:40:05: Time Access 2 NSAC*100                        :0x0
14:40:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:05: Card Command Classess CCC                     :0x5b5
14:40:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:05: DSR(driver stage register)  DSR_IMP           :0x0
14:40:05: Reserv2                                       :0x0
14:40:05: Device Size C_SIZE                            :0xedc8
14:40:05: Reserv3                                       :0x0
14:40:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:05: Reserv4                                       :0x0
14:40:05: Write Speed Factor R2W_FACTOR                 :0x2
14:40:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:05: FILE_FORMAT_GRP                               :0x0
14:40:05: COPY flag                                     :0x1
14:40:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:05: File_Format                                   :0x0
14:40:05: CRC                                           :0x0
14:40:05: ####CSD Registe Values####  

14:40:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:05: [GetSCRRegisterEntry] Passed
14:40:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:05: Data_Status_After Erases          : 0
14:40:05: CPRM Security Support             : No Security
14:40:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:05: Spec. Version                     : Version 3.0X
14:40:05: Extended Security Support         : Extended_Security_Not_Supported
14:40:05: Command Support                   : COMMAND_SUPPORT
14:40:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F3C0>, <py_sfcl.CommandDataDefinition object at 0x0667FAE0>) , Command count = 3791 ] 
14:40:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683510>, <py_sfcl.CommandDataDefinition object at 0x0667FE10>) , Command count = 3792 ] 
14:40:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:05: [ SetBusWidth(0x4) , Command count = 3793 ] 
14:40:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683BD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3794 ] 
14:40:05: Protected Area Size 0x28000
14:40:05: Bus Width           2
14:40:05: Secure Mode         0
14:40:05: Speed  Class        4
14:40:05: Perf Move           0
14:40:05: Au Size             9
14:40:05: Erase Size          15
14:40:05: Erase Timeout       1
14:40:05: Erase offset        1
14:40:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3795 ] 
14:40:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:05: Host Frequency set to 100000 KHz
14:40:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:05: ####CSD Registe 2.0 Values####
14:40:05: CSD_STRUCTURE                                 :0x1
14:40:05: Reserv1                                       :0x0
14:40:05: Time Access 1 TAAC                            :0xe
14:40:05: Time Access 2 NSAC*100                        :0x0
14:40:05: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:05: Card Command Classess CCC                     :0x5b5
14:40:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:05: DSR(driver stage register)  DSR_IMP           :0x0
14:40:05: Reserv2                                       :0x0
14:40:05: Device Size C_SIZE                            :0xedc8
14:40:05: Reserv3                                       :0x0
14:40:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:05: Reserv4                                       :0x0
14:40:05: Write Speed Factor R2W_FACTOR                 :0x2
14:40:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:05: FILE_FORMAT_GRP                               :0x0
14:40:05: COPY flag                                     :0x1
14:40:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:05: File_Format                                   :0x0
14:40:05: CRC                                           :0x0
14:40:05: ####CSD Registe Values####  

14:40:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683900>, <py_sfcl.CommandDataDefinition object at 0x06683270>) , Command count = 3796 ] 
14:40:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F570>, <py_sfcl.CommandDataDefinition object at 0x0667CF00>) , Command count = 3797 ] 
14:40:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:05: [DVTCommonLib]### Erase :Erase API Called
14:40:05: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x14030 with Blockcount:0x2001
14:40:05: [ EraseLba(0x14030, 0x2001) , Command count = 3798 ] 
14:40:05: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x14030 with Blockcount:0x2001 

14:40:05: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 17
14:40:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x16030 to EndLba:0x16038 with Increment Pattern
14:40:05: [ WrLbaNoData(0x16030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3799 ] 
14:40:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x16030 to EndLba:0x16038 with Increment Pattern 

14:40:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683EA0>, <py_sfcl.CommandDataDefinition object at 0x066832A0>) , Command count = 3800 ] 
14:40:05: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CC30>, <py_sfcl.CommandDataDefinition object at 0x0667F090>) , Command count = 3801 ] 
14:40:05: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:05: [DVTCommonLib]###  R1bCommandAbort called
14:40:06: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x9, False) , Command count = 3802 ] 
14:40:06: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:08: Host Frequency set to 25000 KHz
14:40:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:08: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683B10>, 0x0, True) , Command count = 3803 ] 
14:40:08: [GO18_globalSetVolt]### Host voltage value is set.
14:40:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FC6360>, 0x0, False) , Command count = 3804 ] 
14:40:08: [GO18_globalSetVolt]### Host voltage value is set.
14:40:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3805 ] 
14:40:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3806 ] 
14:40:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:08: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3807 ] 
14:40:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CDB0>, <py_sfcl.CommandDataDefinition object at 0x06683870>) , Command count = 3808 ] 
14:40:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683C30>, <py_sfcl.CommandDataDefinition object at 0x0667FFC0>) , Command count = 3809 ] 
14:40:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:08: [ SetCardRCA(0x1, 0xD555) , Command count = 3810 ] 
14:40:08: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:08: Host Frequency set to 25000 KHz
14:40:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:08: ####CSD Registe 2.0 Values####
14:40:08: CSD_STRUCTURE                                 :0x1
14:40:08: Reserv1                                       :0x0
14:40:08: Time Access 1 TAAC                            :0xe
14:40:08: Time Access 2 NSAC*100                        :0x0
14:40:08: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:08: Card Command Classess CCC                     :0x5b5
14:40:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:08: DSR(driver stage register)  DSR_IMP           :0x0
14:40:08: Reserv2                                       :0x0
14:40:08: Device Size C_SIZE                            :0xedc8
14:40:08: Reserv3                                       :0x0
14:40:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:08: Reserv4                                       :0x0
14:40:08: Write Speed Factor R2W_FACTOR                 :0x2
14:40:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:08: FILE_FORMAT_GRP                               :0x0
14:40:08: COPY flag                                     :0x1
14:40:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:08: File_Format                                   :0x0
14:40:08: CRC                                           :0x0
14:40:08: ####CSD Registe Values####  

14:40:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:08: [GetSCRRegisterEntry] Passed
14:40:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:08: Data_Status_After Erases          : 0
14:40:08: CPRM Security Support             : No Security
14:40:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:08: Spec. Version                     : Version 3.0X
14:40:08: Extended Security Support         : Extended_Security_Not_Supported
14:40:08: Command Support                   : COMMAND_SUPPORT
14:40:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066838A0>, <py_sfcl.CommandDataDefinition object at 0x06683690>) , Command count = 3811 ] 
14:40:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683E70>, <py_sfcl.CommandDataDefinition object at 0x06683A80>) , Command count = 3812 ] 
14:40:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:08: [ SetBusWidth(0x4) , Command count = 3813 ] 
14:40:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683CC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3814 ] 
14:40:08: Protected Area Size 0x28000
14:40:08: Bus Width           2
14:40:08: Secure Mode         0
14:40:08: Speed  Class        4
14:40:08: Perf Move           0
14:40:08: Au Size             9
14:40:08: Erase Size          15
14:40:08: Erase Timeout       1
14:40:08: Erase offset        1
14:40:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3815 ] 
14:40:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:08: Host Frequency set to 100000 KHz
14:40:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:08: ####CSD Registe 2.0 Values####
14:40:08: CSD_STRUCTURE                                 :0x1
14:40:08: Reserv1                                       :0x0
14:40:08: Time Access 1 TAAC                            :0xe
14:40:08: Time Access 2 NSAC*100                        :0x0
14:40:08: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:08: Card Command Classess CCC                     :0x5b5
14:40:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:08: DSR(driver stage register)  DSR_IMP           :0x0
14:40:08: Reserv2                                       :0x0
14:40:08: Device Size C_SIZE                            :0xedc8
14:40:08: Reserv3                                       :0x0
14:40:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:08: Reserv4                                       :0x0
14:40:08: Write Speed Factor R2W_FACTOR                 :0x2
14:40:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:08: FILE_FORMAT_GRP                               :0x0
14:40:08: COPY flag                                     :0x1
14:40:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:08: File_Format                                   :0x0
14:40:08: CRC                                           :0x0
14:40:08: ####CSD Registe Values####  

14:40:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D50>, <py_sfcl.CommandDataDefinition object at 0x0667FEA0>) , Command count = 3816 ] 
14:40:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683AE0>, <py_sfcl.CommandDataDefinition object at 0x0667F7B0>) , Command count = 3817 ] 
14:40:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:08: [DVTCommonLib]### Erase :Erase API Called
14:40:08: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x16030 with Blockcount:0x2001
14:40:08: [ EraseLba(0x16030, 0x2001) , Command count = 3818 ] 
14:40:08: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x16030 with Blockcount:0x2001 

14:40:08: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 16
14:40:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x18030 to EndLba:0x18038 with Increment Pattern
14:40:08: [ WrLbaNoData(0x18030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3819 ] 
14:40:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x18030 to EndLba:0x18038 with Increment Pattern 

14:40:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC0480>, <py_sfcl.CommandDataDefinition object at 0x0667FED0>) , Command count = 3820 ] 
14:40:08: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066837B0>, <py_sfcl.CommandDataDefinition object at 0x066836F0>) , Command count = 3821 ] 
14:40:08: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:08: [DVTCommonLib]###  R1bCommandAbort called
14:40:08: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1B, False) , Command count = 3822 ] 
14:40:08: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:10: Host Frequency set to 25000 KHz
14:40:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683DB0>, 0x0, True) , Command count = 3823 ] 
14:40:10: [GO18_globalSetVolt]### Host voltage value is set.
14:40:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FE8FC0>, 0x0, False) , Command count = 3824 ] 
14:40:10: [GO18_globalSetVolt]### Host voltage value is set.
14:40:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3825 ] 
14:40:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3826 ] 
14:40:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3827 ] 
14:40:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6570>, <py_sfcl.CommandDataDefinition object at 0x06683060>) , Command count = 3828 ] 
14:40:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8990>, <py_sfcl.CommandDataDefinition object at 0x06685D80>) , Command count = 3829 ] 
14:40:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:11: [ SetCardRCA(0x1, 0xD555) , Command count = 3830 ] 
14:40:11: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:11: Host Frequency set to 25000 KHz
14:40:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:11: ####CSD Registe 2.0 Values####
14:40:11: CSD_STRUCTURE                                 :0x1
14:40:11: Reserv1                                       :0x0
14:40:11: Time Access 1 TAAC                            :0xe
14:40:11: Time Access 2 NSAC*100                        :0x0
14:40:11: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:11: Card Command Classess CCC                     :0x5b5
14:40:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:11: DSR(driver stage register)  DSR_IMP           :0x0
14:40:11: Reserv2                                       :0x0
14:40:11: Device Size C_SIZE                            :0xedc8
14:40:11: Reserv3                                       :0x0
14:40:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:11: Reserv4                                       :0x0
14:40:11: Write Speed Factor R2W_FACTOR                 :0x2
14:40:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:11: FILE_FORMAT_GRP                               :0x0
14:40:11: COPY flag                                     :0x1
14:40:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:11: File_Format                                   :0x0
14:40:11: CRC                                           :0x0
14:40:11: ####CSD Registe Values####  

14:40:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:11: [GetSCRRegisterEntry] Passed
14:40:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:11: Data_Status_After Erases          : 0
14:40:11: CPRM Security Support             : No Security
14:40:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:11: Spec. Version                     : Version 3.0X
14:40:11: Extended Security Support         : Extended_Security_Not_Supported
14:40:11: Command Support                   : COMMAND_SUPPORT
14:40:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CDE0>, <py_sfcl.CommandDataDefinition object at 0x066851B0>) , Command count = 3831 ] 
14:40:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8F00>, <py_sfcl.CommandDataDefinition object at 0x05FE8C60>) , Command count = 3832 ] 
14:40:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:11: [ SetBusWidth(0x4) , Command count = 3833 ] 
14:40:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685D20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3834 ] 
14:40:11: Protected Area Size 0x28000
14:40:11: Bus Width           2
14:40:11: Secure Mode         0
14:40:11: Speed  Class        4
14:40:11: Perf Move           0
14:40:11: Au Size             9
14:40:11: Erase Size          15
14:40:11: Erase Timeout       1
14:40:11: Erase offset        1
14:40:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3835 ] 
14:40:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:11: Host Frequency set to 100000 KHz
14:40:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:11: ####CSD Registe 2.0 Values####
14:40:11: CSD_STRUCTURE                                 :0x1
14:40:11: Reserv1                                       :0x0
14:40:11: Time Access 1 TAAC                            :0xe
14:40:11: Time Access 2 NSAC*100                        :0x0
14:40:11: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:11: Card Command Classess CCC                     :0x5b5
14:40:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:11: DSR(driver stage register)  DSR_IMP           :0x0
14:40:11: Reserv2                                       :0x0
14:40:11: Device Size C_SIZE                            :0xedc8
14:40:11: Reserv3                                       :0x0
14:40:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:11: Reserv4                                       :0x0
14:40:11: Write Speed Factor R2W_FACTOR                 :0x2
14:40:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:11: FILE_FORMAT_GRP                               :0x0
14:40:11: COPY flag                                     :0x1
14:40:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:11: File_Format                                   :0x0
14:40:11: CRC                                           :0x0
14:40:11: ####CSD Registe Values####  

14:40:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC01E0>, <py_sfcl.CommandDataDefinition object at 0x066831E0>) , Command count = 3836 ] 
14:40:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066834B0>, <py_sfcl.CommandDataDefinition object at 0x06685690>) , Command count = 3837 ] 
14:40:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:11: [DVTCommonLib]### Erase :Erase API Called
14:40:11: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x18030 with Blockcount:0x2001
14:40:11: [ EraseLba(0x18030, 0x2001) , Command count = 3838 ] 
14:40:11: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x18030 with Blockcount:0x2001 

14:40:11: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 15
14:40:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1A030 to EndLba:0x1A038 with Increment Pattern
14:40:11: [ WrLbaNoData(0x1A030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3839 ] 
14:40:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1A030 to EndLba:0x1A038 with Increment Pattern 

14:40:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BE10>, <py_sfcl.CommandDataDefinition object at 0x0667FF30>) , Command count = 3840 ] 
14:40:11: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FB70>, <py_sfcl.CommandDataDefinition object at 0x06685330>) , Command count = 3841 ] 
14:40:11: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:11: [DVTCommonLib]###  R1bCommandAbort called
14:40:11: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xA, False) , Command count = 3842 ] 
14:40:11: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:13: Host Frequency set to 25000 KHz
14:40:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683F00>, 0x0, True) , Command count = 3843 ] 
14:40:13: [GO18_globalSetVolt]### Host voltage value is set.
14:40:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x060329F0>, 0x0, False) , Command count = 3844 ] 
14:40:13: [GO18_globalSetVolt]### Host voltage value is set.
14:40:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3845 ] 
14:40:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3846 ] 
14:40:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3847 ] 
14:40:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032AE0>, <py_sfcl.CommandDataDefinition object at 0x06666D50>) , Command count = 3848 ] 
14:40:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC0690>, <py_sfcl.CommandDataDefinition object at 0x06685960>) , Command count = 3849 ] 
14:40:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:14: [ SetCardRCA(0x1, 0xD555) , Command count = 3850 ] 
14:40:14: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:14: Host Frequency set to 25000 KHz
14:40:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:14: ####CSD Registe 2.0 Values####
14:40:14: CSD_STRUCTURE                                 :0x1
14:40:14: Reserv1                                       :0x0
14:40:14: Time Access 1 TAAC                            :0xe
14:40:14: Time Access 2 NSAC*100                        :0x0
14:40:14: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:14: Card Command Classess CCC                     :0x5b5
14:40:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:14: DSR(driver stage register)  DSR_IMP           :0x0
14:40:14: Reserv2                                       :0x0
14:40:14: Device Size C_SIZE                            :0xedc8
14:40:14: Reserv3                                       :0x0
14:40:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:14: Reserv4                                       :0x0
14:40:14: Write Speed Factor R2W_FACTOR                 :0x2
14:40:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:14: FILE_FORMAT_GRP                               :0x0
14:40:14: COPY flag                                     :0x1
14:40:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:14: File_Format                                   :0x0
14:40:14: CRC                                           :0x0
14:40:14: ####CSD Registe Values####  

14:40:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:14: [GetSCRRegisterEntry] Passed
14:40:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:14: Data_Status_After Erases          : 0
14:40:14: CPRM Security Support             : No Security
14:40:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:14: Spec. Version                     : Version 3.0X
14:40:14: Extended Security Support         : Extended_Security_Not_Supported
14:40:14: Command Support                   : COMMAND_SUPPORT
14:40:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F1B0>, <py_sfcl.CommandDataDefinition object at 0x06685CC0>) , Command count = 3851 ] 
14:40:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032BA0>, <py_sfcl.CommandDataDefinition object at 0x06666720>) , Command count = 3852 ] 
14:40:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:14: [ SetBusWidth(0x4) , Command count = 3853 ] 
14:40:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06666FC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3854 ] 
14:40:14: Protected Area Size 0x28000
14:40:14: Bus Width           2
14:40:14: Secure Mode         0
14:40:14: Speed  Class        4
14:40:14: Perf Move           0
14:40:14: Au Size             9
14:40:14: Erase Size          15
14:40:14: Erase Timeout       1
14:40:14: Erase offset        1
14:40:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3855 ] 
14:40:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:14: Host Frequency set to 100000 KHz
14:40:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:14: ####CSD Registe 2.0 Values####
14:40:14: CSD_STRUCTURE                                 :0x1
14:40:14: Reserv1                                       :0x0
14:40:14: Time Access 1 TAAC                            :0xe
14:40:14: Time Access 2 NSAC*100                        :0x0
14:40:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:14: Card Command Classess CCC                     :0x5b5
14:40:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:14: DSR(driver stage register)  DSR_IMP           :0x0
14:40:14: Reserv2                                       :0x0
14:40:14: Device Size C_SIZE                            :0xedc8
14:40:14: Reserv3                                       :0x0
14:40:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:14: Reserv4                                       :0x0
14:40:14: Write Speed Factor R2W_FACTOR                 :0x2
14:40:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:14: FILE_FORMAT_GRP                               :0x0
14:40:14: COPY flag                                     :0x1
14:40:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:14: File_Format                                   :0x0
14:40:14: CRC                                           :0x0
14:40:14: ####CSD Registe Values####  

14:40:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDAE40>, <py_sfcl.CommandDataDefinition object at 0x06666B40>) , Command count = 3856 ] 
14:40:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683660>, <py_sfcl.CommandDataDefinition object at 0x06685D20>) , Command count = 3857 ] 
14:40:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:14: [DVTCommonLib]### Erase :Erase API Called
14:40:14: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1A030 with Blockcount:0x2001
14:40:14: [ EraseLba(0x1A030, 0x2001) , Command count = 3858 ] 
14:40:14: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1A030 with Blockcount:0x2001 

14:40:14: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 14
14:40:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1C030 to EndLba:0x1C038 with Increment Pattern
14:40:14: [ WrLbaNoData(0x1C030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3859 ] 
14:40:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1C030 to EndLba:0x1C038 with Increment Pattern 

14:40:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BF90>, <py_sfcl.CommandDataDefinition object at 0x06666570>) , Command count = 3860 ] 
14:40:14: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683330>, <py_sfcl.CommandDataDefinition object at 0x066850C0>) , Command count = 3861 ] 
14:40:14: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:14: [DVTCommonLib]###  R1bCommandAbort called
14:40:14: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x11, False) , Command count = 3862 ] 
14:40:14: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:14: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:16: Host Frequency set to 25000 KHz
14:40:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:16: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683450>, 0x0, True) , Command count = 3863 ] 
14:40:16: [GO18_globalSetVolt]### Host voltage value is set.
14:40:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x0665BED0>, 0x0, False) , Command count = 3864 ] 
14:40:16: [GO18_globalSetVolt]### Host voltage value is set.
14:40:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3865 ] 
14:40:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3866 ] 
14:40:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3867 ] 
14:40:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666390>, <py_sfcl.CommandDataDefinition object at 0x066669C0>) , Command count = 3868 ] 
14:40:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666630>, <py_sfcl.CommandDataDefinition object at 0x06685270>) , Command count = 3869 ] 
14:40:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:16: [ SetCardRCA(0x1, 0xD555) , Command count = 3870 ] 
14:40:16: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:16: Host Frequency set to 25000 KHz
14:40:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:16: ####CSD Registe 2.0 Values####
14:40:16: CSD_STRUCTURE                                 :0x1
14:40:16: Reserv1                                       :0x0
14:40:16: Time Access 1 TAAC                            :0xe
14:40:16: Time Access 2 NSAC*100                        :0x0
14:40:16: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:16: Card Command Classess CCC                     :0x5b5
14:40:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:16: DSR(driver stage register)  DSR_IMP           :0x0
14:40:16: Reserv2                                       :0x0
14:40:16: Device Size C_SIZE                            :0xedc8
14:40:16: Reserv3                                       :0x0
14:40:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:16: Reserv4                                       :0x0
14:40:16: Write Speed Factor R2W_FACTOR                 :0x2
14:40:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:16: FILE_FORMAT_GRP                               :0x0
14:40:16: COPY flag                                     :0x1
14:40:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:16: File_Format                                   :0x0
14:40:16: CRC                                           :0x0
14:40:16: ####CSD Registe Values####  

14:40:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:16: [GetSCRRegisterEntry] Passed
14:40:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:16: Data_Status_After Erases          : 0
14:40:16: CPRM Security Support             : No Security
14:40:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:16: Spec. Version                     : Version 3.0X
14:40:16: Extended Security Support         : Extended_Security_Not_Supported
14:40:16: Command Support                   : COMMAND_SUPPORT
14:40:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060327B0>, <py_sfcl.CommandDataDefinition object at 0x06666E10>) , Command count = 3871 ] 
14:40:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066667E0>, <py_sfcl.CommandDataDefinition object at 0x06666C60>) , Command count = 3872 ] 
14:40:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:17: [ SetBusWidth(0x4) , Command count = 3873 ] 
14:40:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06666840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3874 ] 
14:40:17: Protected Area Size 0x28000
14:40:17: Bus Width           2
14:40:17: Secure Mode         0
14:40:17: Speed  Class        4
14:40:17: Perf Move           0
14:40:17: Au Size             9
14:40:17: Erase Size          15
14:40:17: Erase Timeout       1
14:40:17: Erase offset        1
14:40:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3875 ] 
14:40:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:17: Host Frequency set to 100000 KHz
14:40:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:17: ####CSD Registe 2.0 Values####
14:40:17: CSD_STRUCTURE                                 :0x1
14:40:17: Reserv1                                       :0x0
14:40:17: Time Access 1 TAAC                            :0xe
14:40:17: Time Access 2 NSAC*100                        :0x0
14:40:17: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:17: Card Command Classess CCC                     :0x5b5
14:40:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:17: DSR(driver stage register)  DSR_IMP           :0x0
14:40:17: Reserv2                                       :0x0
14:40:17: Device Size C_SIZE                            :0xedc8
14:40:17: Reserv3                                       :0x0
14:40:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:17: Reserv4                                       :0x0
14:40:17: Write Speed Factor R2W_FACTOR                 :0x2
14:40:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:17: FILE_FORMAT_GRP                               :0x0
14:40:17: COPY flag                                     :0x1
14:40:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:17: File_Format                                   :0x0
14:40:17: CRC                                           :0x0
14:40:17: ####CSD Registe Values####  

14:40:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065724B0>, <py_sfcl.CommandDataDefinition object at 0x06683930>) , Command count = 3876 ] 
14:40:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683720>, <py_sfcl.CommandDataDefinition object at 0x06685CF0>) , Command count = 3877 ] 
14:40:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:17: [DVTCommonLib]### Erase :Erase API Called
14:40:17: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1C030 with Blockcount:0x2001
14:40:17: [ EraseLba(0x1C030, 0x2001) , Command count = 3878 ] 
14:40:17: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1C030 with Blockcount:0x2001 

14:40:17: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 13
14:40:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1E030 to EndLba:0x1E038 with Increment Pattern
14:40:17: [ WrLbaNoData(0x1E030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3879 ] 
14:40:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1E030 to EndLba:0x1E038 with Increment Pattern 

14:40:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BC60>, <py_sfcl.CommandDataDefinition object at 0x06683F30>) , Command count = 3880 ] 
14:40:17: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683AB0>, <py_sfcl.CommandDataDefinition object at 0x06685CF0>) , Command count = 3881 ] 
14:40:17: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:17: [DVTCommonLib]###  R1bCommandAbort called
14:40:17: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1B, False) , Command count = 3882 ] 
14:40:17: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:17: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:19: Host Frequency set to 25000 KHz
14:40:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:19: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683B40>, 0x0, True) , Command count = 3883 ] 
14:40:19: [GO18_globalSetVolt]### Host voltage value is set.
14:40:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x06572330>, 0x0, False) , Command count = 3884 ] 
14:40:19: [GO18_globalSetVolt]### Host voltage value is set.
14:40:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3885 ] 
14:40:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3886 ] 
14:40:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3887 ] 
14:40:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572A20>, <py_sfcl.CommandDataDefinition object at 0x0667A150>) , Command count = 3888 ] 
14:40:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB600>, <py_sfcl.CommandDataDefinition object at 0x06685930>) , Command count = 3889 ] 
14:40:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:19: [ SetCardRCA(0x1, 0xD555) , Command count = 3890 ] 
14:40:19: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:19: Host Frequency set to 25000 KHz
14:40:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:19: ####CSD Registe 2.0 Values####
14:40:19: CSD_STRUCTURE                                 :0x1
14:40:19: Reserv1                                       :0x0
14:40:19: Time Access 1 TAAC                            :0xe
14:40:19: Time Access 2 NSAC*100                        :0x0
14:40:19: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:19: Card Command Classess CCC                     :0x5b5
14:40:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:19: DSR(driver stage register)  DSR_IMP           :0x0
14:40:19: Reserv2                                       :0x0
14:40:19: Device Size C_SIZE                            :0xedc8
14:40:19: Reserv3                                       :0x0
14:40:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:19: Reserv4                                       :0x0
14:40:19: Write Speed Factor R2W_FACTOR                 :0x2
14:40:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:19: FILE_FORMAT_GRP                               :0x0
14:40:19: COPY flag                                     :0x1
14:40:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:19: File_Format                                   :0x0
14:40:19: CRC                                           :0x0
14:40:19: ####CSD Registe Values####  

14:40:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:19: [GetSCRRegisterEntry] Passed
14:40:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:19: Data_Status_After Erases          : 0
14:40:19: CPRM Security Support             : No Security
14:40:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:20: Spec. Version                     : Version 3.0X
14:40:20: Extended Security Support         : Extended_Security_Not_Supported
14:40:20: Command Support                   : COMMAND_SUPPORT
14:40:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683F90>, <py_sfcl.CommandDataDefinition object at 0x066AB300>) , Command count = 3891 ] 
14:40:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666B10>, <py_sfcl.CommandDataDefinition object at 0x066AB5A0>) , Command count = 3892 ] 
14:40:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:20: [ SetBusWidth(0x4) , Command count = 3893 ] 
14:40:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066662D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3894 ] 
14:40:20: Protected Area Size 0x28000
14:40:20: Bus Width           2
14:40:20: Secure Mode         0
14:40:20: Speed  Class        4
14:40:20: Perf Move           0
14:40:20: Au Size             9
14:40:20: Erase Size          15
14:40:20: Erase Timeout       1
14:40:20: Erase offset        1
14:40:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3895 ] 
14:40:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:20: Host Frequency set to 100000 KHz
14:40:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:20: ####CSD Registe 2.0 Values####
14:40:20: CSD_STRUCTURE                                 :0x1
14:40:20: Reserv1                                       :0x0
14:40:20: Time Access 1 TAAC                            :0xe
14:40:20: Time Access 2 NSAC*100                        :0x0
14:40:20: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:20: Card Command Classess CCC                     :0x5b5
14:40:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:20: DSR(driver stage register)  DSR_IMP           :0x0
14:40:20: Reserv2                                       :0x0
14:40:20: Device Size C_SIZE                            :0xedc8
14:40:20: Reserv3                                       :0x0
14:40:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:20: Reserv4                                       :0x0
14:40:20: Write Speed Factor R2W_FACTOR                 :0x2
14:40:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:20: FILE_FORMAT_GRP                               :0x0
14:40:20: COPY flag                                     :0x1
14:40:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:20: File_Format                                   :0x0
14:40:20: CRC                                           :0x0
14:40:20: ####CSD Registe Values####  

14:40:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066664E0>, <py_sfcl.CommandDataDefinition object at 0x01E5BDB0>) , Command count = 3896 ] 
14:40:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683030>, <py_sfcl.CommandDataDefinition object at 0x06685540>) , Command count = 3897 ] 
14:40:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:20: [DVTCommonLib]### Erase :Erase API Called
14:40:20: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1E030 with Blockcount:0x2001
14:40:20: [ EraseLba(0x1E030, 0x2001) , Command count = 3898 ] 
14:40:20: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1E030 with Blockcount:0x2001 

14:40:20: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 12
14:40:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x20030 to EndLba:0x20038 with Increment Pattern
14:40:20: [ WrLbaNoData(0x20030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3899 ] 
14:40:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x20030 to EndLba:0x20038 with Increment Pattern 

14:40:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABEA0>, <py_sfcl.CommandDataDefinition object at 0x06032E10>) , Command count = 3900 ] 
14:40:20: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8F90>, <py_sfcl.CommandDataDefinition object at 0x06685540>) , Command count = 3901 ] 
14:40:20: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:20: [DVTCommonLib]###  R1bCommandAbort called
14:40:20: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x10, False) , Command count = 3902 ] 
14:40:20: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:20: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:22: Host Frequency set to 25000 KHz
14:40:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:22: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB420>, 0x0, True) , Command count = 3903 ] 
14:40:22: [GO18_globalSetVolt]### Host voltage value is set.
14:40:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABFC0>, 0x0, False) , Command count = 3904 ] 
14:40:22: [GO18_globalSetVolt]### Host voltage value is set.
14:40:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3905 ] 
14:40:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3906 ] 
14:40:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3907 ] 
14:40:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666D80>, <py_sfcl.CommandDataDefinition object at 0x06666870>) , Command count = 3908 ] 
14:40:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CF90>, <py_sfcl.CommandDataDefinition object at 0x06685540>) , Command count = 3909 ] 
14:40:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:22: [ SetCardRCA(0x1, 0xD555) , Command count = 3910 ] 
14:40:23: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:23: Host Frequency set to 25000 KHz
14:40:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:23: ####CSD Registe 2.0 Values####
14:40:23: CSD_STRUCTURE                                 :0x1
14:40:23: Reserv1                                       :0x0
14:40:23: Time Access 1 TAAC                            :0xe
14:40:23: Time Access 2 NSAC*100                        :0x0
14:40:23: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:23: Card Command Classess CCC                     :0x5b5
14:40:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:23: DSR(driver stage register)  DSR_IMP           :0x0
14:40:23: Reserv2                                       :0x0
14:40:23: Device Size C_SIZE                            :0xedc8
14:40:23: Reserv3                                       :0x0
14:40:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:23: Reserv4                                       :0x0
14:40:23: Write Speed Factor R2W_FACTOR                 :0x2
14:40:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:23: FILE_FORMAT_GRP                               :0x0
14:40:23: COPY flag                                     :0x1
14:40:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:23: File_Format                                   :0x0
14:40:23: CRC                                           :0x0
14:40:23: ####CSD Registe Values####  

14:40:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:23: [GetSCRRegisterEntry] Passed
14:40:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:23: Data_Status_After Erases          : 0
14:40:23: CPRM Security Support             : No Security
14:40:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:23: Spec. Version                     : Version 3.0X
14:40:23: Extended Security Support         : Extended_Security_Not_Supported
14:40:23: Command Support                   : COMMAND_SUPPORT
14:40:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A840>, <py_sfcl.CommandDataDefinition object at 0x0667A060>) , Command count = 3911 ] 
14:40:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A9C0>, <py_sfcl.CommandDataDefinition object at 0x0667A7E0>) , Command count = 3912 ] 
14:40:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:23: [ SetBusWidth(0x4) , Command count = 3913 ] 
14:40:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667AB40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3914 ] 
14:40:23: Protected Area Size 0x28000
14:40:23: Bus Width           2
14:40:23: Secure Mode         0
14:40:23: Speed  Class        4
14:40:23: Perf Move           0
14:40:23: Au Size             9
14:40:23: Erase Size          15
14:40:23: Erase Timeout       1
14:40:23: Erase offset        1
14:40:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3915 ] 
14:40:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:23: Host Frequency set to 100000 KHz
14:40:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:23: ####CSD Registe 2.0 Values####
14:40:23: CSD_STRUCTURE                                 :0x1
14:40:23: Reserv1                                       :0x0
14:40:23: Time Access 1 TAAC                            :0xe
14:40:23: Time Access 2 NSAC*100                        :0x0
14:40:23: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:23: Card Command Classess CCC                     :0x5b5
14:40:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:23: DSR(driver stage register)  DSR_IMP           :0x0
14:40:23: Reserv2                                       :0x0
14:40:23: Device Size C_SIZE                            :0xedc8
14:40:23: Reserv3                                       :0x0
14:40:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:23: Reserv4                                       :0x0
14:40:23: Write Speed Factor R2W_FACTOR                 :0x2
14:40:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:23: FILE_FORMAT_GRP                               :0x0
14:40:23: COPY flag                                     :0x1
14:40:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:23: File_Format                                   :0x0
14:40:23: CRC                                           :0x0
14:40:23: ####CSD Registe Values####  

14:40:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABDB0>, <py_sfcl.CommandDataDefinition object at 0x06666B70>) , Command count = 3916 ] 
14:40:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066666F0>, <py_sfcl.CommandDataDefinition object at 0x06685990>) , Command count = 3917 ] 
14:40:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:23: [DVTCommonLib]### Erase :Erase API Called
14:40:23: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x20030 with Blockcount:0x2001
14:40:23: [ EraseLba(0x20030, 0x2001) , Command count = 3918 ] 
14:40:23: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x20030 with Blockcount:0x2001 

14:40:23: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 11
14:40:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x22030 to EndLba:0x22038 with Increment Pattern
14:40:23: [ WrLbaNoData(0x22030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3919 ] 
14:40:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x22030 to EndLba:0x22038 with Increment Pattern 

14:40:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A1E0>, <py_sfcl.CommandDataDefinition object at 0x0667AA80>) , Command count = 3920 ] 
14:40:23: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032810>, <py_sfcl.CommandDataDefinition object at 0x06685990>) , Command count = 3921 ] 
14:40:23: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:23: [DVTCommonLib]###  R1bCommandAbort called
14:40:23: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2, False) , Command count = 3922 ] 
14:40:23: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:23: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:25: Host Frequency set to 25000 KHz
14:40:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB3C0>, 0x0, True) , Command count = 3923 ] 
14:40:25: [GO18_globalSetVolt]### Host voltage value is set.
14:40:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C390>, 0x0, False) , Command count = 3924 ] 
14:40:25: [GO18_globalSetVolt]### Host voltage value is set.
14:40:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3925 ] 
14:40:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3926 ] 
14:40:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3927 ] 
14:40:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FDB0>, <py_sfcl.CommandDataDefinition object at 0x0667AB10>) , Command count = 3928 ] 
14:40:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AD80>, <py_sfcl.CommandDataDefinition object at 0x0667A4E0>) , Command count = 3929 ] 
14:40:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:25: [ SetCardRCA(0x1, 0xD555) , Command count = 3930 ] 
14:40:25: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:25: Host Frequency set to 25000 KHz
14:40:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:25: ####CSD Registe 2.0 Values####
14:40:25: CSD_STRUCTURE                                 :0x1
14:40:25: Reserv1                                       :0x0
14:40:25: Time Access 1 TAAC                            :0xe
14:40:25: Time Access 2 NSAC*100                        :0x0
14:40:25: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:25: Card Command Classess CCC                     :0x5b5
14:40:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:25: DSR(driver stage register)  DSR_IMP           :0x0
14:40:25: Reserv2                                       :0x0
14:40:25: Device Size C_SIZE                            :0xedc8
14:40:25: Reserv3                                       :0x0
14:40:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:25: Reserv4                                       :0x0
14:40:25: Write Speed Factor R2W_FACTOR                 :0x2
14:40:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:25: FILE_FORMAT_GRP                               :0x0
14:40:25: COPY flag                                     :0x1
14:40:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:25: File_Format                                   :0x0
14:40:25: CRC                                           :0x0
14:40:25: ####CSD Registe Values####  

14:40:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:25: [GetSCRRegisterEntry] Passed
14:40:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:25: Data_Status_After Erases          : 0
14:40:25: CPRM Security Support             : No Security
14:40:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:25: Spec. Version                     : Version 3.0X
14:40:25: Extended Security Support         : Extended_Security_Not_Supported
14:40:25: Command Support                   : COMMAND_SUPPORT
14:40:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666120>, <py_sfcl.CommandDataDefinition object at 0x0667AF60>) , Command count = 3931 ] 
14:40:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AE10>, <py_sfcl.CommandDataDefinition object at 0x0667A6F0>) , Command count = 3932 ] 
14:40:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:25: [ SetBusWidth(0x4) , Command count = 3933 ] 
14:40:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A0C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3934 ] 
14:40:25: Protected Area Size 0x28000
14:40:25: Bus Width           2
14:40:25: Secure Mode         0
14:40:25: Speed  Class        4
14:40:25: Perf Move           0
14:40:25: Au Size             9
14:40:25: Erase Size          15
14:40:25: Erase Timeout       1
14:40:25: Erase offset        1
14:40:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3935 ] 
14:40:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:26: Host Frequency set to 100000 KHz
14:40:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:26: ####CSD Registe 2.0 Values####
14:40:26: CSD_STRUCTURE                                 :0x1
14:40:26: Reserv1                                       :0x0
14:40:26: Time Access 1 TAAC                            :0xe
14:40:26: Time Access 2 NSAC*100                        :0x0
14:40:26: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:26: Card Command Classess CCC                     :0x5b5
14:40:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:26: DSR(driver stage register)  DSR_IMP           :0x0
14:40:26: Reserv2                                       :0x0
14:40:26: Device Size C_SIZE                            :0xedc8
14:40:26: Reserv3                                       :0x0
14:40:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:26: Reserv4                                       :0x0
14:40:26: Write Speed Factor R2W_FACTOR                 :0x2
14:40:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:26: FILE_FORMAT_GRP                               :0x0
14:40:26: COPY flag                                     :0x1
14:40:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:26: File_Format                                   :0x0
14:40:26: CRC                                           :0x0
14:40:26: ####CSD Registe Values####  

14:40:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE10>, <py_sfcl.CommandDataDefinition object at 0x0667AB40>) , Command count = 3936 ] 
14:40:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF90>, <py_sfcl.CommandDataDefinition object at 0x066859C0>) , Command count = 3937 ] 
14:40:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:26: [DVTCommonLib]### Erase :Erase API Called
14:40:26: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x22030 with Blockcount:0x2001
14:40:26: [ EraseLba(0x22030, 0x2001) , Command count = 3938 ] 
14:40:26: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x22030 with Blockcount:0x2001 

14:40:26: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 10
14:40:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x24030 to EndLba:0x24038 with Increment Pattern
14:40:26: [ WrLbaNoData(0x24030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3939 ] 
14:40:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x24030 to EndLba:0x24038 with Increment Pattern 

14:40:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F630>, <py_sfcl.CommandDataDefinition object at 0x0667C2D0>) , Command count = 3940 ] 
14:40:26: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB270>, <py_sfcl.CommandDataDefinition object at 0x0667AE70>) , Command count = 3941 ] 
14:40:26: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:26: [DVTCommonLib]###  R1bCommandAbort called
14:40:26: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x11, False) , Command count = 3942 ] 
14:40:26: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:26: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:28: Host Frequency set to 25000 KHz
14:40:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:28: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666540>, 0x0, True) , Command count = 3943 ] 
14:40:28: [GO18_globalSetVolt]### Host voltage value is set.
14:40:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A090>, 0x0, False) , Command count = 3944 ] 
14:40:28: [GO18_globalSetVolt]### Host voltage value is set.
14:40:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3945 ] 
14:40:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3946 ] 
14:40:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3947 ] 
14:40:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF00>, <py_sfcl.CommandDataDefinition object at 0x0667C1E0>) , Command count = 3948 ] 
14:40:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AB70>, <py_sfcl.CommandDataDefinition object at 0x0667A990>) , Command count = 3949 ] 
14:40:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:28: [ SetCardRCA(0x1, 0xD555) , Command count = 3950 ] 
14:40:28: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:28: Host Frequency set to 25000 KHz
14:40:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:28: ####CSD Registe 2.0 Values####
14:40:28: CSD_STRUCTURE                                 :0x1
14:40:28: Reserv1                                       :0x0
14:40:28: Time Access 1 TAAC                            :0xe
14:40:28: Time Access 2 NSAC*100                        :0x0
14:40:28: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:28: Card Command Classess CCC                     :0x5b5
14:40:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:28: DSR(driver stage register)  DSR_IMP           :0x0
14:40:28: Reserv2                                       :0x0
14:40:28: Device Size C_SIZE                            :0xedc8
14:40:28: Reserv3                                       :0x0
14:40:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:28: Reserv4                                       :0x0
14:40:28: Write Speed Factor R2W_FACTOR                 :0x2
14:40:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:28: FILE_FORMAT_GRP                               :0x0
14:40:28: COPY flag                                     :0x1
14:40:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:28: File_Format                                   :0x0
14:40:28: CRC                                           :0x0
14:40:28: ####CSD Registe Values####  

14:40:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:28: [GetSCRRegisterEntry] Passed
14:40:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:28: Data_Status_After Erases          : 0
14:40:28: CPRM Security Support             : No Security
14:40:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:28: Spec. Version                     : Version 3.0X
14:40:28: Extended Security Support         : Extended_Security_Not_Supported
14:40:28: Command Support                   : COMMAND_SUPPORT
14:40:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF30>, <py_sfcl.CommandDataDefinition object at 0x0667C270>) , Command count = 3951 ] 
14:40:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABDE0>, <py_sfcl.CommandDataDefinition object at 0x06666090>) , Command count = 3952 ] 
14:40:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:28: [ SetBusWidth(0x4) , Command count = 3953 ] 
14:40:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C1B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3954 ] 
14:40:28: Protected Area Size 0x28000
14:40:28: Bus Width           2
14:40:28: Secure Mode         0
14:40:28: Speed  Class        4
14:40:28: Perf Move           0
14:40:28: Au Size             9
14:40:28: Erase Size          15
14:40:28: Erase Timeout       1
14:40:28: Erase offset        1
14:40:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3955 ] 
14:40:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:28: Host Frequency set to 100000 KHz
14:40:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:28: ####CSD Registe 2.0 Values####
14:40:28: CSD_STRUCTURE                                 :0x1
14:40:28: Reserv1                                       :0x0
14:40:28: Time Access 1 TAAC                            :0xe
14:40:28: Time Access 2 NSAC*100                        :0x0
14:40:28: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:28: Card Command Classess CCC                     :0x5b5
14:40:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:28: DSR(driver stage register)  DSR_IMP           :0x0
14:40:28: Reserv2                                       :0x0
14:40:28: Device Size C_SIZE                            :0xedc8
14:40:28: Reserv3                                       :0x0
14:40:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:28: Reserv4                                       :0x0
14:40:28: Write Speed Factor R2W_FACTOR                 :0x2
14:40:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:28: FILE_FORMAT_GRP                               :0x0
14:40:28: COPY flag                                     :0x1
14:40:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:28: File_Format                                   :0x0
14:40:28: CRC                                           :0x0
14:40:28: ####CSD Registe Values####  

14:40:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066668A0>, <py_sfcl.CommandDataDefinition object at 0x0667C3F0>) , Command count = 3956 ] 
14:40:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666660>, <py_sfcl.CommandDataDefinition object at 0x06685B70>) , Command count = 3957 ] 
14:40:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:28: [DVTCommonLib]### Erase :Erase API Called
14:40:28: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x24030 with Blockcount:0x2001
14:40:28: [ EraseLba(0x24030, 0x2001) , Command count = 3958 ] 
14:40:28: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x24030 with Blockcount:0x2001 

14:40:28: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 9
14:40:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x26030 to EndLba:0x26038 with Increment Pattern
14:40:28: [ WrLbaNoData(0x26030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3959 ] 
14:40:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x26030 to EndLba:0x26038 with Increment Pattern 

14:40:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A870>, <py_sfcl.CommandDataDefinition object at 0x0667A450>) , Command count = 3960 ] 
14:40:28: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666420>, <py_sfcl.CommandDataDefinition object at 0x06685B70>) , Command count = 3961 ] 
14:40:28: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:28: [DVTCommonLib]###  R1bCommandAbort called
14:40:28: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x28, False) , Command count = 3962 ] 
14:40:28: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:28: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:31: Host Frequency set to 25000 KHz
14:40:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:31: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB360>, 0x0, True) , Command count = 3963 ] 
14:40:31: [GO18_globalSetVolt]### Host voltage value is set.
14:40:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F2D0>, 0x0, False) , Command count = 3964 ] 
14:40:31: [GO18_globalSetVolt]### Host voltage value is set.
14:40:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3965 ] 
14:40:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3966 ] 
14:40:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3967 ] 
14:40:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CA80>, <py_sfcl.CommandDataDefinition object at 0x0667C060>) , Command count = 3968 ] 
14:40:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C990>, <py_sfcl.CommandDataDefinition object at 0x0667C9C0>) , Command count = 3969 ] 
14:40:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:31: [ SetCardRCA(0x1, 0xD555) , Command count = 3970 ] 
14:40:31: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:31: Host Frequency set to 25000 KHz
14:40:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:31: ####CSD Registe 2.0 Values####
14:40:31: CSD_STRUCTURE                                 :0x1
14:40:31: Reserv1                                       :0x0
14:40:31: Time Access 1 TAAC                            :0xe
14:40:31: Time Access 2 NSAC*100                        :0x0
14:40:31: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:31: Card Command Classess CCC                     :0x5b5
14:40:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:31: DSR(driver stage register)  DSR_IMP           :0x0
14:40:31: Reserv2                                       :0x0
14:40:31: Device Size C_SIZE                            :0xedc8
14:40:31: Reserv3                                       :0x0
14:40:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:31: Reserv4                                       :0x0
14:40:31: Write Speed Factor R2W_FACTOR                 :0x2
14:40:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:31: FILE_FORMAT_GRP                               :0x0
14:40:31: COPY flag                                     :0x1
14:40:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:31: File_Format                                   :0x0
14:40:31: CRC                                           :0x0
14:40:31: ####CSD Registe Values####  

14:40:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:31: [GetSCRRegisterEntry] Passed
14:40:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:31: Data_Status_After Erases          : 0
14:40:31: CPRM Security Support             : No Security
14:40:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:31: Spec. Version                     : Version 3.0X
14:40:31: Extended Security Support         : Extended_Security_Not_Supported
14:40:31: Command Support                   : COMMAND_SUPPORT
14:40:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C690>, <py_sfcl.CommandDataDefinition object at 0x0667AD20>) , Command count = 3971 ] 
14:40:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C6C0>, <py_sfcl.CommandDataDefinition object at 0x0667C7E0>) , Command count = 3972 ] 
14:40:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:31: [ SetBusWidth(0x4) , Command count = 3973 ] 
14:40:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3974 ] 
14:40:31: Protected Area Size 0x28000
14:40:31: Bus Width           2
14:40:31: Secure Mode         0
14:40:31: Speed  Class        4
14:40:31: Perf Move           0
14:40:31: Au Size             9
14:40:31: Erase Size          15
14:40:31: Erase Timeout       1
14:40:31: Erase offset        1
14:40:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3975 ] 
14:40:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:31: Host Frequency set to 100000 KHz
14:40:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:31: ####CSD Registe 2.0 Values####
14:40:31: CSD_STRUCTURE                                 :0x1
14:40:31: Reserv1                                       :0x0
14:40:31: Time Access 1 TAAC                            :0xe
14:40:31: Time Access 2 NSAC*100                        :0x0
14:40:31: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:31: Card Command Classess CCC                     :0x5b5
14:40:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:31: DSR(driver stage register)  DSR_IMP           :0x0
14:40:31: Reserv2                                       :0x0
14:40:31: Device Size C_SIZE                            :0xedc8
14:40:31: Reserv3                                       :0x0
14:40:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:31: Reserv4                                       :0x0
14:40:31: Write Speed Factor R2W_FACTOR                 :0x2
14:40:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:31: FILE_FORMAT_GRP                               :0x0
14:40:31: COPY flag                                     :0x1
14:40:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:31: File_Format                                   :0x0
14:40:31: CRC                                           :0x0
14:40:31: ####CSD Registe Values####  

14:40:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CB70>, <py_sfcl.CommandDataDefinition object at 0x0667CBD0>) , Command count = 3976 ] 
14:40:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB5D0>, <py_sfcl.CommandDataDefinition object at 0x06685600>) , Command count = 3977 ] 
14:40:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:31: [DVTCommonLib]### Erase :Erase API Called
14:40:31: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x26030 with Blockcount:0x2001
14:40:31: [ EraseLba(0x26030, 0x2001) , Command count = 3978 ] 
14:40:31: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x26030 with Blockcount:0x2001 

14:40:31: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 8
14:40:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x28030 to EndLba:0x28038 with Increment Pattern
14:40:31: [ WrLbaNoData(0x28030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3979 ] 
14:40:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x28030 to EndLba:0x28038 with Increment Pattern 

14:40:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066830C0>, <py_sfcl.CommandDataDefinition object at 0x0667A660>) , Command count = 3980 ] 
14:40:31: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB630>, <py_sfcl.CommandDataDefinition object at 0x0667CD80>) , Command count = 3981 ] 
14:40:31: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:31: [DVTCommonLib]###  R1bCommandAbort called
14:40:31: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x3, False) , Command count = 3982 ] 
14:40:31: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:31: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:33: Host Frequency set to 25000 KHz
14:40:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C420>, 0x0, True) , Command count = 3983 ] 
14:40:33: [GO18_globalSetVolt]### Host voltage value is set.
14:40:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F360>, 0x0, False) , Command count = 3984 ] 
14:40:33: [GO18_globalSetVolt]### Host voltage value is set.
14:40:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3985 ] 
14:40:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3986 ] 
14:40:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3987 ] 
14:40:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F180>, <py_sfcl.CommandDataDefinition object at 0x0667FB10>) , Command count = 3988 ] 
14:40:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F6C0>, <py_sfcl.CommandDataDefinition object at 0x0667CC60>) , Command count = 3989 ] 
14:40:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:34: [ SetCardRCA(0x1, 0xD555) , Command count = 3990 ] 
14:40:34: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:34: Host Frequency set to 25000 KHz
14:40:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:34: ####CSD Registe 2.0 Values####
14:40:34: CSD_STRUCTURE                                 :0x1
14:40:34: Reserv1                                       :0x0
14:40:34: Time Access 1 TAAC                            :0xe
14:40:34: Time Access 2 NSAC*100                        :0x0
14:40:34: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:34: Card Command Classess CCC                     :0x5b5
14:40:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:34: DSR(driver stage register)  DSR_IMP           :0x0
14:40:34: Reserv2                                       :0x0
14:40:34: Device Size C_SIZE                            :0xedc8
14:40:34: Reserv3                                       :0x0
14:40:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:34: Reserv4                                       :0x0
14:40:34: Write Speed Factor R2W_FACTOR                 :0x2
14:40:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:34: FILE_FORMAT_GRP                               :0x0
14:40:34: COPY flag                                     :0x1
14:40:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:34: File_Format                                   :0x0
14:40:34: CRC                                           :0x0
14:40:34: ####CSD Registe Values####  

14:40:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:34: [GetSCRRegisterEntry] Passed
14:40:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:34: Data_Status_After Erases          : 0
14:40:34: CPRM Security Support             : No Security
14:40:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:34: Spec. Version                     : Version 3.0X
14:40:34: Extended Security Support         : Extended_Security_Not_Supported
14:40:34: Command Support                   : COMMAND_SUPPORT
14:40:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CE40>, <py_sfcl.CommandDataDefinition object at 0x0667C960>) , Command count = 3991 ] 
14:40:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F4B0>, <py_sfcl.CommandDataDefinition object at 0x0667F270>) , Command count = 3992 ] 
14:40:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:34: [ SetBusWidth(0x4) , Command count = 3993 ] 
14:40:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3994 ] 
14:40:34: Protected Area Size 0x28000
14:40:34: Bus Width           2
14:40:34: Secure Mode         0
14:40:34: Speed  Class        4
14:40:34: Perf Move           0
14:40:34: Au Size             9
14:40:34: Erase Size          15
14:40:34: Erase Timeout       1
14:40:34: Erase offset        1
14:40:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3995 ] 
14:40:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:34: Host Frequency set to 100000 KHz
14:40:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:34: ####CSD Registe 2.0 Values####
14:40:34: CSD_STRUCTURE                                 :0x1
14:40:34: Reserv1                                       :0x0
14:40:34: Time Access 1 TAAC                            :0xe
14:40:34: Time Access 2 NSAC*100                        :0x0
14:40:34: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:34: Card Command Classess CCC                     :0x5b5
14:40:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:34: DSR(driver stage register)  DSR_IMP           :0x0
14:40:34: Reserv2                                       :0x0
14:40:34: Device Size C_SIZE                            :0xedc8
14:40:34: Reserv3                                       :0x0
14:40:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:34: Reserv4                                       :0x0
14:40:34: Write Speed Factor R2W_FACTOR                 :0x2
14:40:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:34: FILE_FORMAT_GRP                               :0x0
14:40:34: COPY flag                                     :0x1
14:40:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:34: File_Format                                   :0x0
14:40:34: CRC                                           :0x0
14:40:34: ####CSD Registe Values####  

14:40:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ADE0>, <py_sfcl.CommandDataDefinition object at 0x0667F540>) , Command count = 3996 ] 
14:40:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C150>, <py_sfcl.CommandDataDefinition object at 0x06685C60>) , Command count = 3997 ] 
14:40:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:34: [DVTCommonLib]### Erase :Erase API Called
14:40:34: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x28030 with Blockcount:0x2001
14:40:34: [ EraseLba(0x28030, 0x2001) , Command count = 3998 ] 
14:40:34: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x28030 with Blockcount:0x2001 

14:40:34: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 7
14:40:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2A030 to EndLba:0x2A038 with Increment Pattern
14:40:34: [ WrLbaNoData(0x2A030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 3999 ] 
14:40:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2A030 to EndLba:0x2A038 with Increment Pattern 

14:40:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ABD0>, <py_sfcl.CommandDataDefinition object at 0x0667F660>) , Command count = 4000 ] 
14:40:34: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CAE0>, <py_sfcl.CommandDataDefinition object at 0x0667C210>) , Command count = 4001 ] 
14:40:34: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:34: [DVTCommonLib]###  R1bCommandAbort called
14:40:34: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xC, False) , Command count = 4002 ] 
14:40:34: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:34: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:36: Host Frequency set to 25000 KHz
14:40:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:36: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AA20>, 0x0, True) , Command count = 4003 ] 
14:40:36: [GO18_globalSetVolt]### Host voltage value is set.
14:40:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x066832D0>, 0x0, False) , Command count = 4004 ] 
14:40:36: [GO18_globalSetVolt]### Host voltage value is set.
14:40:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4005 ] 
14:40:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4006 ] 
14:40:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4007 ] 
14:40:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F9C0>, <py_sfcl.CommandDataDefinition object at 0x0667C5A0>) , Command count = 4008 ] 
14:40:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F690>, <py_sfcl.CommandDataDefinition object at 0x0667C8D0>) , Command count = 4009 ] 
14:40:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:36: [ SetCardRCA(0x1, 0xD555) , Command count = 4010 ] 
14:40:37: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:37: Host Frequency set to 25000 KHz
14:40:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:37: ####CSD Registe 2.0 Values####
14:40:37: CSD_STRUCTURE                                 :0x1
14:40:37: Reserv1                                       :0x0
14:40:37: Time Access 1 TAAC                            :0xe
14:40:37: Time Access 2 NSAC*100                        :0x0
14:40:37: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:37: Card Command Classess CCC                     :0x5b5
14:40:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:37: DSR(driver stage register)  DSR_IMP           :0x0
14:40:37: Reserv2                                       :0x0
14:40:37: Device Size C_SIZE                            :0xedc8
14:40:37: Reserv3                                       :0x0
14:40:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:37: Reserv4                                       :0x0
14:40:37: Write Speed Factor R2W_FACTOR                 :0x2
14:40:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:37: FILE_FORMAT_GRP                               :0x0
14:40:37: COPY flag                                     :0x1
14:40:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:37: File_Format                                   :0x0
14:40:37: CRC                                           :0x0
14:40:37: ####CSD Registe Values####  

14:40:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:37: [GetSCRRegisterEntry] Passed
14:40:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:37: Data_Status_After Erases          : 0
14:40:37: CPRM Security Support             : No Security
14:40:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:37: Spec. Version                     : Version 3.0X
14:40:37: Extended Security Support         : Extended_Security_Not_Supported
14:40:37: Command Support                   : COMMAND_SUPPORT
14:40:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A930>, <py_sfcl.CommandDataDefinition object at 0x0667C930>) , Command count = 4011 ] 
14:40:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683570>, <py_sfcl.CommandDataDefinition object at 0x0667FC00>) , Command count = 4012 ] 
14:40:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:37: [ SetBusWidth(0x4) , Command count = 4013 ] 
14:40:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4014 ] 
14:40:37: Protected Area Size 0x28000
14:40:37: Bus Width           2
14:40:37: Secure Mode         0
14:40:37: Speed  Class        4
14:40:37: Perf Move           0
14:40:37: Au Size             9
14:40:37: Erase Size          15
14:40:37: Erase Timeout       1
14:40:37: Erase offset        1
14:40:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4015 ] 
14:40:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:37: Host Frequency set to 100000 KHz
14:40:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:37: ####CSD Registe 2.0 Values####
14:40:37: CSD_STRUCTURE                                 :0x1
14:40:37: Reserv1                                       :0x0
14:40:37: Time Access 1 TAAC                            :0xe
14:40:37: Time Access 2 NSAC*100                        :0x0
14:40:37: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:37: Card Command Classess CCC                     :0x5b5
14:40:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:37: DSR(driver stage register)  DSR_IMP           :0x0
14:40:37: Reserv2                                       :0x0
14:40:37: Device Size C_SIZE                            :0xedc8
14:40:37: Reserv3                                       :0x0
14:40:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:37: Reserv4                                       :0x0
14:40:37: Write Speed Factor R2W_FACTOR                 :0x2
14:40:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:37: FILE_FORMAT_GRP                               :0x0
14:40:37: COPY flag                                     :0x1
14:40:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:37: File_Format                                   :0x0
14:40:37: CRC                                           :0x0
14:40:37: ####CSD Registe Values####  

14:40:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FAB0>, <py_sfcl.CommandDataDefinition object at 0x0667F300>) , Command count = 4016 ] 
14:40:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CF60>, <py_sfcl.CommandDataDefinition object at 0x06685A80>) , Command count = 4017 ] 
14:40:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:37: [DVTCommonLib]### Erase :Erase API Called
14:40:37: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2A030 with Blockcount:0x2001
14:40:37: [ EraseLba(0x2A030, 0x2001) , Command count = 4018 ] 
14:40:37: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2A030 with Blockcount:0x2001 

14:40:37: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 6
14:40:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2C030 to EndLba:0x2C038 with Increment Pattern
14:40:37: [ WrLbaNoData(0x2C030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4019 ] 
14:40:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2C030 to EndLba:0x2C038 with Increment Pattern 

14:40:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FE70>, <py_sfcl.CommandDataDefinition object at 0x0667F720>) , Command count = 4020 ] 
14:40:37: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ADB0>, <py_sfcl.CommandDataDefinition object at 0x0667C120>) , Command count = 4021 ] 
14:40:37: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:37: [DVTCommonLib]###  R1bCommandAbort called
14:40:37: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x3, False) , Command count = 4022 ] 
14:40:37: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:37: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:39: Host Frequency set to 25000 KHz
14:40:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:39: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AF30>, 0x0, True) , Command count = 4023 ] 
14:40:39: [GO18_globalSetVolt]### Host voltage value is set.
14:40:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683990>, 0x0, False) , Command count = 4024 ] 
14:40:39: [GO18_globalSetVolt]### Host voltage value is set.
14:40:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4025 ] 
14:40:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4026 ] 
14:40:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4027 ] 
14:40:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FC90>, <py_sfcl.CommandDataDefinition object at 0x0667FDE0>) , Command count = 4028 ] 
14:40:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683240>, <py_sfcl.CommandDataDefinition object at 0x0667CC00>) , Command count = 4029 ] 
14:40:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:39: [ SetCardRCA(0x1, 0xD555) , Command count = 4030 ] 
14:40:39: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:39: Host Frequency set to 25000 KHz
14:40:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:39: ####CSD Registe 2.0 Values####
14:40:39: CSD_STRUCTURE                                 :0x1
14:40:39: Reserv1                                       :0x0
14:40:39: Time Access 1 TAAC                            :0xe
14:40:39: Time Access 2 NSAC*100                        :0x0
14:40:39: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:39: Card Command Classess CCC                     :0x5b5
14:40:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:39: DSR(driver stage register)  DSR_IMP           :0x0
14:40:39: Reserv2                                       :0x0
14:40:39: Device Size C_SIZE                            :0xedc8
14:40:39: Reserv3                                       :0x0
14:40:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:39: Reserv4                                       :0x0
14:40:39: Write Speed Factor R2W_FACTOR                 :0x2
14:40:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:39: FILE_FORMAT_GRP                               :0x0
14:40:39: COPY flag                                     :0x1
14:40:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:39: File_Format                                   :0x0
14:40:39: CRC                                           :0x0
14:40:39: ####CSD Registe Values####  

14:40:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:39: [GetSCRRegisterEntry] Passed
14:40:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:39: Data_Status_After Erases          : 0
14:40:39: CPRM Security Support             : No Security
14:40:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:39: Spec. Version                     : Version 3.0X
14:40:39: Extended Security Support         : Extended_Security_Not_Supported
14:40:39: Command Support                   : COMMAND_SUPPORT
14:40:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A9F0>, <py_sfcl.CommandDataDefinition object at 0x0667F4E0>) , Command count = 4031 ] 
14:40:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066833F0>, <py_sfcl.CommandDataDefinition object at 0x06683390>) , Command count = 4032 ] 
14:40:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:39: [ SetBusWidth(0x4) , Command count = 4033 ] 
14:40:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667FC30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4034 ] 
14:40:39: Protected Area Size 0x28000
14:40:39: Bus Width           2
14:40:39: Secure Mode         0
14:40:39: Speed  Class        4
14:40:39: Perf Move           0
14:40:39: Au Size             9
14:40:39: Erase Size          15
14:40:39: Erase Timeout       1
14:40:39: Erase offset        1
14:40:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4035 ] 
14:40:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:40: Host Frequency set to 100000 KHz
14:40:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:40: ####CSD Registe 2.0 Values####
14:40:40: CSD_STRUCTURE                                 :0x1
14:40:40: Reserv1                                       :0x0
14:40:40: Time Access 1 TAAC                            :0xe
14:40:40: Time Access 2 NSAC*100                        :0x0
14:40:40: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:40: Card Command Classess CCC                     :0x5b5
14:40:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:40: DSR(driver stage register)  DSR_IMP           :0x0
14:40:40: Reserv2                                       :0x0
14:40:40: Device Size C_SIZE                            :0xedc8
14:40:40: Reserv3                                       :0x0
14:40:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:40: Reserv4                                       :0x0
14:40:40: Write Speed Factor R2W_FACTOR                 :0x2
14:40:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:40: FILE_FORMAT_GRP                               :0x0
14:40:40: COPY flag                                     :0x1
14:40:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:40: File_Format                                   :0x0
14:40:40: CRC                                           :0x0
14:40:40: ####CSD Registe Values####  

14:40:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683480>, <py_sfcl.CommandDataDefinition object at 0x0667F240>) , Command count = 4036 ] 
14:40:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F930>, <py_sfcl.CommandDataDefinition object at 0x06685C00>) , Command count = 4037 ] 
14:40:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:40: [DVTCommonLib]### Erase :Erase API Called
14:40:40: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2C030 with Blockcount:0x2001
14:40:40: [ EraseLba(0x2C030, 0x2001) , Command count = 4038 ] 
14:40:40: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2C030 with Blockcount:0x2001 

14:40:40: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 5
14:40:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2E030 to EndLba:0x2E038 with Increment Pattern
14:40:40: [ WrLbaNoData(0x2E030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4039 ] 
14:40:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2E030 to EndLba:0x2E038 with Increment Pattern 

14:40:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066835A0>, <py_sfcl.CommandDataDefinition object at 0x06683540>) , Command count = 4040 ] 
14:40:40: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FA20>, <py_sfcl.CommandDataDefinition object at 0x0667FB40>) , Command count = 4041 ] 
14:40:40: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:40: [DVTCommonLib]###  R1bCommandAbort called
14:40:40: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xB, False) , Command count = 4042 ] 
14:40:40: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:40: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:42: Host Frequency set to 25000 KHz
14:40:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:42: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F3C0>, 0x0, True) , Command count = 4043 ] 
14:40:42: [GO18_globalSetVolt]### Host voltage value is set.
14:40:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FC6F90>, 0x0, False) , Command count = 4044 ] 
14:40:42: [GO18_globalSetVolt]### Host voltage value is set.
14:40:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4045 ] 
14:40:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4046 ] 
14:40:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4047 ] 
14:40:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683900>, <py_sfcl.CommandDataDefinition object at 0x06683270>) , Command count = 4048 ] 
14:40:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066835D0>, <py_sfcl.CommandDataDefinition object at 0x06683CF0>) , Command count = 4049 ] 
14:40:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:42: [ SetCardRCA(0x1, 0xD555) , Command count = 4050 ] 
14:40:42: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:42: Host Frequency set to 25000 KHz
14:40:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:42: ####CSD Registe 2.0 Values####
14:40:42: CSD_STRUCTURE                                 :0x1
14:40:42: Reserv1                                       :0x0
14:40:42: Time Access 1 TAAC                            :0xe
14:40:42: Time Access 2 NSAC*100                        :0x0
14:40:42: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:42: Card Command Classess CCC                     :0x5b5
14:40:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:42: DSR(driver stage register)  DSR_IMP           :0x0
14:40:42: Reserv2                                       :0x0
14:40:42: Device Size C_SIZE                            :0xedc8
14:40:42: Reserv3                                       :0x0
14:40:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:42: Reserv4                                       :0x0
14:40:42: Write Speed Factor R2W_FACTOR                 :0x2
14:40:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:42: FILE_FORMAT_GRP                               :0x0
14:40:42: COPY flag                                     :0x1
14:40:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:42: File_Format                                   :0x0
14:40:42: CRC                                           :0x0
14:40:42: ####CSD Registe Values####  

14:40:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:42: [GetSCRRegisterEntry] Passed
14:40:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:42: Data_Status_After Erases          : 0
14:40:42: CPRM Security Support             : No Security
14:40:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:42: Spec. Version                     : Version 3.0X
14:40:42: Extended Security Support         : Extended_Security_Not_Supported
14:40:42: Command Support                   : COMMAND_SUPPORT
14:40:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F570>, <py_sfcl.CommandDataDefinition object at 0x0667FF60>) , Command count = 4051 ] 
14:40:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683EA0>, <py_sfcl.CommandDataDefinition object at 0x066832A0>) , Command count = 4052 ] 
14:40:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:42: [ SetBusWidth(0x4) , Command count = 4053 ] 
14:40:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066837E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4054 ] 
14:40:42: Protected Area Size 0x28000
14:40:42: Bus Width           2
14:40:42: Secure Mode         0
14:40:42: Speed  Class        4
14:40:42: Perf Move           0
14:40:42: Au Size             9
14:40:42: Erase Size          15
14:40:42: Erase Timeout       1
14:40:42: Erase offset        1
14:40:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4055 ] 
14:40:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:42: Host Frequency set to 100000 KHz
14:40:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:42: ####CSD Registe 2.0 Values####
14:40:42: CSD_STRUCTURE                                 :0x1
14:40:42: Reserv1                                       :0x0
14:40:42: Time Access 1 TAAC                            :0xe
14:40:42: Time Access 2 NSAC*100                        :0x0
14:40:42: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:42: Card Command Classess CCC                     :0x5b5
14:40:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:42: DSR(driver stage register)  DSR_IMP           :0x0
14:40:42: Reserv2                                       :0x0
14:40:42: Device Size C_SIZE                            :0xedc8
14:40:42: Reserv3                                       :0x0
14:40:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:42: Reserv4                                       :0x0
14:40:42: Write Speed Factor R2W_FACTOR                 :0x2
14:40:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:42: FILE_FORMAT_GRP                               :0x0
14:40:42: COPY flag                                     :0x1
14:40:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:42: File_Format                                   :0x0
14:40:42: CRC                                           :0x0
14:40:42: ####CSD Registe Values####  

14:40:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066839F0>, <py_sfcl.CommandDataDefinition object at 0x06683B10>) , Command count = 4056 ] 
14:40:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AE40>, <py_sfcl.CommandDataDefinition object at 0x0667CCC0>) , Command count = 4057 ] 
14:40:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:42: [DVTCommonLib]### Erase :Erase API Called
14:40:42: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2E030 with Blockcount:0x2001
14:40:42: [ EraseLba(0x2E030, 0x2001) , Command count = 4058 ] 
14:40:42: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2E030 with Blockcount:0x2001 

14:40:42: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 4
14:40:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x30030 to EndLba:0x30038 with Increment Pattern
14:40:42: [ WrLbaNoData(0x30030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4059 ] 
14:40:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x30030 to EndLba:0x30038 with Increment Pattern 

14:40:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CDB0>, <py_sfcl.CommandDataDefinition object at 0x06683870>) , Command count = 4060 ] 
14:40:42: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CD20>, <py_sfcl.CommandDataDefinition object at 0x0667F870>) , Command count = 4061 ] 
14:40:42: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:42: [DVTCommonLib]###  R1bCommandAbort called
14:40:43: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x10, False) , Command count = 4062 ] 
14:40:43: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:43: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:45: Host Frequency set to 25000 KHz
14:40:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:45: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x066838A0>, 0x0, True) , Command count = 4063 ] 
14:40:45: [GO18_globalSetVolt]### Host voltage value is set.
14:40:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683E10>, 0x0, False) , Command count = 4064 ] 
14:40:45: [GO18_globalSetVolt]### Host voltage value is set.
14:40:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4065 ] 
14:40:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4066 ] 
14:40:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4067 ] 
14:40:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D50>, <py_sfcl.CommandDataDefinition object at 0x06683A80>) , Command count = 4068 ] 
14:40:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05EE6B70>, <py_sfcl.CommandDataDefinition object at 0x0667FD50>) , Command count = 4069 ] 
14:40:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:45: [ SetCardRCA(0x1, 0xD555) , Command count = 4070 ] 
14:40:45: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:45: Host Frequency set to 25000 KHz
14:40:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:45: ####CSD Registe 2.0 Values####
14:40:45: CSD_STRUCTURE                                 :0x1
14:40:45: Reserv1                                       :0x0
14:40:45: Time Access 1 TAAC                            :0xe
14:40:45: Time Access 2 NSAC*100                        :0x0
14:40:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:45: Card Command Classess CCC                     :0x5b5
14:40:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:45: DSR(driver stage register)  DSR_IMP           :0x0
14:40:45: Reserv2                                       :0x0
14:40:45: Device Size C_SIZE                            :0xedc8
14:40:45: Reserv3                                       :0x0
14:40:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:45: Reserv4                                       :0x0
14:40:45: Write Speed Factor R2W_FACTOR                 :0x2
14:40:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:45: FILE_FORMAT_GRP                               :0x0
14:40:45: COPY flag                                     :0x1
14:40:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:45: File_Format                                   :0x0
14:40:45: CRC                                           :0x0
14:40:45: ####CSD Registe Values####  

14:40:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:45: [GetSCRRegisterEntry] Passed
14:40:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:45: Data_Status_After Erases          : 0
14:40:45: CPRM Security Support             : No Security
14:40:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:45: Spec. Version                     : Version 3.0X
14:40:45: Extended Security Support         : Extended_Security_Not_Supported
14:40:45: Command Support                   : COMMAND_SUPPORT
14:40:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683AE0>, <py_sfcl.CommandDataDefinition object at 0x066830F0>) , Command count = 4071 ] 
14:40:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC0480>, <py_sfcl.CommandDataDefinition object at 0x06683DE0>) , Command count = 4072 ] 
14:40:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:45: [ SetBusWidth(0x4) , Command count = 4073 ] 
14:40:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4074 ] 
14:40:45: Protected Area Size 0x28000
14:40:45: Bus Width           2
14:40:45: Secure Mode         0
14:40:45: Speed  Class        4
14:40:45: Perf Move           0
14:40:45: Au Size             9
14:40:45: Erase Size          15
14:40:45: Erase Timeout       1
14:40:45: Erase offset        1
14:40:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4075 ] 
14:40:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:45: Host Frequency set to 100000 KHz
14:40:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:45: ####CSD Registe 2.0 Values####
14:40:45: CSD_STRUCTURE                                 :0x1
14:40:45: Reserv1                                       :0x0
14:40:45: Time Access 1 TAAC                            :0xe
14:40:45: Time Access 2 NSAC*100                        :0x0
14:40:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:45: Card Command Classess CCC                     :0x5b5
14:40:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:45: DSR(driver stage register)  DSR_IMP           :0x0
14:40:45: Reserv2                                       :0x0
14:40:45: Device Size C_SIZE                            :0xedc8
14:40:45: Reserv3                                       :0x0
14:40:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:45: Reserv4                                       :0x0
14:40:45: Write Speed Factor R2W_FACTOR                 :0x2
14:40:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:45: FILE_FORMAT_GRP                               :0x0
14:40:45: COPY flag                                     :0x1
14:40:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:45: File_Format                                   :0x0
14:40:45: CRC                                           :0x0
14:40:45: ####CSD Registe Values####  

14:40:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E42840>, <py_sfcl.CommandDataDefinition object at 0x066834E0>) , Command count = 4076 ] 
14:40:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683840>, <py_sfcl.CommandDataDefinition object at 0x0667F9F0>) , Command count = 4077 ] 
14:40:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:45: [DVTCommonLib]### Erase :Erase API Called
14:40:45: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x30030 with Blockcount:0x2001
14:40:45: [ EraseLba(0x30030, 0x2001) , Command count = 4078 ] 
14:40:45: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x30030 with Blockcount:0x2001 

14:40:45: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 3
14:40:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x32030 to EndLba:0x32038 with Increment Pattern
14:40:45: [ WrLbaNoData(0x32030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4079 ] 
14:40:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x32030 to EndLba:0x32038 with Increment Pattern 

14:40:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6570>, <py_sfcl.CommandDataDefinition object at 0x06683060>) , Command count = 4080 ] 
14:40:45: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683960>, <py_sfcl.CommandDataDefinition object at 0x066833C0>) , Command count = 4081 ] 
14:40:45: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:45: [DVTCommonLib]###  R1bCommandAbort called
14:40:45: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x26, False) , Command count = 4082 ] 
14:40:45: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:45: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:47: Host Frequency set to 25000 KHz
14:40:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:47: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CDE0>, 0x0, True) , Command count = 4083 ] 
14:40:47: [GO18_globalSetVolt]### Host voltage value is set.
14:40:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x0602B6C0>, 0x0, False) , Command count = 4084 ] 
14:40:47: [GO18_globalSetVolt]### Host voltage value is set.
14:40:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4085 ] 
14:40:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4086 ] 
14:40:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4087 ] 
14:40:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC01E0>, <py_sfcl.CommandDataDefinition object at 0x066831E0>) , Command count = 4088 ] 
14:40:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDADB0>, <py_sfcl.CommandDataDefinition object at 0x06685BA0>) , Command count = 4089 ] 
14:40:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:48: [ SetCardRCA(0x1, 0xD555) , Command count = 4090 ] 
14:40:48: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:48: Host Frequency set to 25000 KHz
14:40:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:48: ####CSD Registe 2.0 Values####
14:40:48: CSD_STRUCTURE                                 :0x1
14:40:48: Reserv1                                       :0x0
14:40:48: Time Access 1 TAAC                            :0xe
14:40:48: Time Access 2 NSAC*100                        :0x0
14:40:48: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:48: Card Command Classess CCC                     :0x5b5
14:40:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:48: DSR(driver stage register)  DSR_IMP           :0x0
14:40:48: Reserv2                                       :0x0
14:40:48: Device Size C_SIZE                            :0xedc8
14:40:48: Reserv3                                       :0x0
14:40:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:48: Reserv4                                       :0x0
14:40:48: Write Speed Factor R2W_FACTOR                 :0x2
14:40:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:48: FILE_FORMAT_GRP                               :0x0
14:40:48: COPY flag                                     :0x1
14:40:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:48: File_Format                                   :0x0
14:40:48: CRC                                           :0x0
14:40:48: ####CSD Registe Values####  

14:40:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:48: [GetSCRRegisterEntry] Passed
14:40:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:48: Data_Status_After Erases          : 0
14:40:48: CPRM Security Support             : No Security
14:40:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:48: Spec. Version                     : Version 3.0X
14:40:48: Extended Security Support         : Extended_Security_Not_Supported
14:40:48: Command Support                   : COMMAND_SUPPORT
14:40:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066834B0>, <py_sfcl.CommandDataDefinition object at 0x06685750>) , Command count = 4091 ] 
14:40:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BE10>, <py_sfcl.CommandDataDefinition object at 0x0667FF30>) , Command count = 4092 ] 
14:40:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:48: [ SetBusWidth(0x4) , Command count = 4093 ] 
14:40:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4094 ] 
14:40:48: Protected Area Size 0x28000
14:40:48: Bus Width           2
14:40:48: Secure Mode         0
14:40:48: Speed  Class        4
14:40:48: Perf Move           0
14:40:48: Au Size             9
14:40:48: Erase Size          15
14:40:48: Erase Timeout       1
14:40:48: Erase offset        1
14:40:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4095 ] 
14:40:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:48: Host Frequency set to 100000 KHz
14:40:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:48: ####CSD Registe 2.0 Values####
14:40:48: CSD_STRUCTURE                                 :0x1
14:40:48: Reserv1                                       :0x0
14:40:48: Time Access 1 TAAC                            :0xe
14:40:48: Time Access 2 NSAC*100                        :0x0
14:40:48: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:48: Card Command Classess CCC                     :0x5b5
14:40:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:48: DSR(driver stage register)  DSR_IMP           :0x0
14:40:48: Reserv2                                       :0x0
14:40:48: Device Size C_SIZE                            :0xedc8
14:40:48: Reserv3                                       :0x0
14:40:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:48: Reserv4                                       :0x0
14:40:48: Write Speed Factor R2W_FACTOR                 :0x2
14:40:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:48: FILE_FORMAT_GRP                               :0x0
14:40:48: COPY flag                                     :0x1
14:40:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:48: File_Format                                   :0x0
14:40:48: CRC                                           :0x0
14:40:48: ####CSD Registe Values####  

14:40:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683C90>, <py_sfcl.CommandDataDefinition object at 0x06683F00>) , Command count = 4096 ] 
14:40:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683B70>, <py_sfcl.CommandDataDefinition object at 0x066853F0>) , Command count = 4097 ] 
14:40:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:48: [DVTCommonLib]### Erase :Erase API Called
14:40:48: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x32030 with Blockcount:0x2001
14:40:48: [ EraseLba(0x32030, 0x2001) , Command count = 4098 ] 
14:40:48: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x32030 with Blockcount:0x2001 

14:40:48: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 2
14:40:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x34030 to EndLba:0x34038 with Increment Pattern
14:40:48: [ WrLbaNoData(0x34030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4099 ] 
14:40:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x34030 to EndLba:0x34038 with Increment Pattern 

14:40:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032AE0>, <py_sfcl.CommandDataDefinition object at 0x06666D50>) , Command count = 4100 ] 
14:40:48: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FC60>, <py_sfcl.CommandDataDefinition object at 0x06685330>) , Command count = 4101 ] 
14:40:48: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:48: [DVTCommonLib]###  R1bCommandAbort called
14:40:48: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1, False) , Command count = 4102 ] 
14:40:48: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:50: Host Frequency set to 25000 KHz
14:40:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F1B0>, 0x0, True) , Command count = 4103 ] 
14:40:50: [GO18_globalSetVolt]### Host voltage value is set.
14:40:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x06032B40>, 0x0, False) , Command count = 4104 ] 
14:40:50: [GO18_globalSetVolt]### Host voltage value is set.
14:40:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4105 ] 
14:40:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4106 ] 
14:40:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4107 ] 
14:40:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDAE40>, <py_sfcl.CommandDataDefinition object at 0x06666B40>) , Command count = 4108 ] 
14:40:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572060>, <py_sfcl.CommandDataDefinition object at 0x06685660>) , Command count = 4109 ] 
14:40:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:50: [ SetCardRCA(0x1, 0xD555) , Command count = 4110 ] 
14:40:51: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:51: Host Frequency set to 25000 KHz
14:40:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:51: ####CSD Registe 2.0 Values####
14:40:51: CSD_STRUCTURE                                 :0x1
14:40:51: Reserv1                                       :0x0
14:40:51: Time Access 1 TAAC                            :0xe
14:40:51: Time Access 2 NSAC*100                        :0x0
14:40:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:51: Card Command Classess CCC                     :0x5b5
14:40:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:51: DSR(driver stage register)  DSR_IMP           :0x0
14:40:51: Reserv2                                       :0x0
14:40:51: Device Size C_SIZE                            :0xedc8
14:40:51: Reserv3                                       :0x0
14:40:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:51: Reserv4                                       :0x0
14:40:51: Write Speed Factor R2W_FACTOR                 :0x2
14:40:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:51: FILE_FORMAT_GRP                               :0x0
14:40:51: COPY flag                                     :0x1
14:40:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:51: File_Format                                   :0x0
14:40:51: CRC                                           :0x0
14:40:51: ####CSD Registe Values####  

14:40:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:51: [GetSCRRegisterEntry] Passed
14:40:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:51: Data_Status_After Erases          : 0
14:40:51: CPRM Security Support             : No Security
14:40:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:51: Spec. Version                     : Version 3.0X
14:40:51: Extended Security Support         : Extended_Security_Not_Supported
14:40:51: Command Support                   : COMMAND_SUPPORT
14:40:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683660>, <py_sfcl.CommandDataDefinition object at 0x06666BA0>) , Command count = 4111 ] 
14:40:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BF90>, <py_sfcl.CommandDataDefinition object at 0x06666570>) , Command count = 4112 ] 
14:40:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:51: [ SetBusWidth(0x4) , Command count = 4113 ] 
14:40:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4114 ] 
14:40:51: Protected Area Size 0x28000
14:40:51: Bus Width           2
14:40:51: Secure Mode         0
14:40:51: Speed  Class        4
14:40:51: Perf Move           0
14:40:51: Au Size             9
14:40:51: Erase Size          15
14:40:51: Erase Timeout       1
14:40:51: Erase offset        1
14:40:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4115 ] 
14:40:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:51: Host Frequency set to 100000 KHz
14:40:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:51: ####CSD Registe 2.0 Values####
14:40:51: CSD_STRUCTURE                                 :0x1
14:40:51: Reserv1                                       :0x0
14:40:51: Time Access 1 TAAC                            :0xe
14:40:51: Time Access 2 NSAC*100                        :0x0
14:40:51: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:51: Card Command Classess CCC                     :0x5b5
14:40:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:51: DSR(driver stage register)  DSR_IMP           :0x0
14:40:51: Reserv2                                       :0x0
14:40:51: Device Size C_SIZE                            :0xedc8
14:40:51: Reserv3                                       :0x0
14:40:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:51: Reserv4                                       :0x0
14:40:51: Write Speed Factor R2W_FACTOR                 :0x2
14:40:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:51: FILE_FORMAT_GRP                               :0x0
14:40:51: COPY flag                                     :0x1
14:40:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:51: File_Format                                   :0x0
14:40:51: CRC                                           :0x0
14:40:51: ####CSD Registe Values####  

14:40:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEDAE0>, <py_sfcl.CommandDataDefinition object at 0x06685900>) , Command count = 4116 ] 
14:40:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683300>, <py_sfcl.CommandDataDefinition object at 0x06685150>) , Command count = 4117 ] 
14:40:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:51: [DVTCommonLib]### Erase :Erase API Called
14:40:51: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x34030 with Blockcount:0x2001
14:40:51: [ EraseLba(0x34030, 0x2001) , Command count = 4118 ] 
14:40:51: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x34030 with Blockcount:0x2001 

14:40:51: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 1
14:40:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x36030 to EndLba:0x36038 with Increment Pattern
14:40:51: [ WrLbaNoData(0x36030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4119 ] 
14:40:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x36030 to EndLba:0x36038 with Increment Pattern 

14:40:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666390>, <py_sfcl.CommandDataDefinition object at 0x066669C0>) , Command count = 4120 ] 
14:40:51: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683420>, <py_sfcl.CommandDataDefinition object at 0x066850C0>) , Command count = 4121 ] 
14:40:51: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:51: [DVTCommonLib]###  R1bCommandAbort called
14:40:51: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x16, False) , Command count = 4122 ] 
14:40:51: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:53: Host Frequency set to 25000 KHz
14:40:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:53: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x060327B0>, 0x0, True) , Command count = 4123 ] 
14:40:53: [GO18_globalSetVolt]### Host voltage value is set.
14:40:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB480>, 0x0, False) , Command count = 4124 ] 
14:40:53: [GO18_globalSetVolt]### Host voltage value is set.
14:40:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4125 ] 
14:40:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4126 ] 
14:40:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4127 ] 
14:40:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065724B0>, <py_sfcl.CommandDataDefinition object at 0x06683930>) , Command count = 4128 ] 
14:40:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BDB0>, <py_sfcl.CommandDataDefinition object at 0x066850C0>) , Command count = 4129 ] 
14:40:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:53: [ SetCardRCA(0x1, 0xD555) , Command count = 4130 ] 
14:40:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:53: Host Frequency set to 25000 KHz
14:40:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:53: ####CSD Registe 2.0 Values####
14:40:53: CSD_STRUCTURE                                 :0x1
14:40:53: Reserv1                                       :0x0
14:40:53: Time Access 1 TAAC                            :0xe
14:40:53: Time Access 2 NSAC*100                        :0x0
14:40:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:53: Card Command Classess CCC                     :0x5b5
14:40:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:53: DSR(driver stage register)  DSR_IMP           :0x0
14:40:53: Reserv2                                       :0x0
14:40:53: Device Size C_SIZE                            :0xedc8
14:40:53: Reserv3                                       :0x0
14:40:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:53: Reserv4                                       :0x0
14:40:53: Write Speed Factor R2W_FACTOR                 :0x2
14:40:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:53: FILE_FORMAT_GRP                               :0x0
14:40:53: COPY flag                                     :0x1
14:40:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:53: File_Format                                   :0x0
14:40:53: CRC                                           :0x0
14:40:53: ####CSD Registe Values####  

14:40:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:53: [GetSCRRegisterEntry] Passed
14:40:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:53: Data_Status_After Erases          : 0
14:40:53: CPRM Security Support             : No Security
14:40:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:53: Spec. Version                     : Version 3.0X
14:40:53: Extended Security Support         : Extended_Security_Not_Supported
14:40:53: Command Support                   : COMMAND_SUPPORT
14:40:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683720>, <py_sfcl.CommandDataDefinition object at 0x06032B10>) , Command count = 4131 ] 
14:40:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BC60>, <py_sfcl.CommandDataDefinition object at 0x06683F30>) , Command count = 4132 ] 
14:40:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:53: [ SetBusWidth(0x4) , Command count = 4133 ] 
14:40:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066AB1E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4134 ] 
14:40:53: Protected Area Size 0x28000
14:40:53: Bus Width           2
14:40:53: Secure Mode         0
14:40:53: Speed  Class        4
14:40:53: Perf Move           0
14:40:53: Au Size             9
14:40:53: Erase Size          15
14:40:53: Erase Timeout       1
14:40:53: Erase offset        1
14:40:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4135 ] 
14:40:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:54: Host Frequency set to 100000 KHz
14:40:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:54: ####CSD Registe 2.0 Values####
14:40:54: CSD_STRUCTURE                                 :0x1
14:40:54: Reserv1                                       :0x0
14:40:54: Time Access 1 TAAC                            :0xe
14:40:54: Time Access 2 NSAC*100                        :0x0
14:40:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:54: Card Command Classess CCC                     :0x5b5
14:40:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:54: DSR(driver stage register)  DSR_IMP           :0x0
14:40:54: Reserv2                                       :0x0
14:40:54: Device Size C_SIZE                            :0xedc8
14:40:54: Reserv3                                       :0x0
14:40:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:54: Reserv4                                       :0x0
14:40:54: Write Speed Factor R2W_FACTOR                 :0x2
14:40:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:54: FILE_FORMAT_GRP                               :0x0
14:40:54: COPY flag                                     :0x1
14:40:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:54: File_Format                                   :0x0
14:40:54: CRC                                           :0x0
14:40:54: ####CSD Registe Values####  

14:40:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032AB0>, <py_sfcl.CommandDataDefinition object at 0x0667A3F0>) , Command count = 4136 ] 
14:40:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066831B0>, <py_sfcl.CommandDataDefinition object at 0x06685180>) , Command count = 4137 ] 
14:40:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:54: [DVTCommonLib]### Erase :Erase API Called
14:40:54: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x36030 with Blockcount:0x2001
14:40:54: [ EraseLba(0x36030, 0x2001) , Command count = 4138 ] 
14:40:54: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x36030 with Blockcount:0x2001 

14:40:54: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 0
14:40:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x38030 to EndLba:0x38038 with Increment Pattern
14:40:54: [ WrLbaNoData(0x38030, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4139 ] 
14:40:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x38030 to EndLba:0x38038 with Increment Pattern 

14:40:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572A20>, <py_sfcl.CommandDataDefinition object at 0x0667A150>) , Command count = 4140 ] 
14:40:54: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683BA0>, <py_sfcl.CommandDataDefinition object at 0x06685D50>) , Command count = 4141 ] 
14:40:54: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:54: [DVTCommonLib]###  R1bCommandAbort called
14:40:54: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x5, False) , Command count = 4142 ] 
14:40:54: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:54: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:56: Host Frequency set to 25000 KHz
14:40:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:56: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683F90>, 0x0, True) , Command count = 4143 ] 
14:40:56: [GO18_globalSetVolt]### Host voltage value is set.
14:40:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB3F0>, 0x0, False) , Command count = 4144 ] 
14:40:56: [GO18_globalSetVolt]### Host voltage value is set.
14:40:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4145 ] 
14:40:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4146 ] 
14:40:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4147 ] 
14:40:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E5BDB0>, <py_sfcl.CommandDataDefinition object at 0x0667A120>) , Command count = 4148 ] 
14:40:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE40>, <py_sfcl.CommandDataDefinition object at 0x06666B10>) , Command count = 4149 ] 
14:40:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:56: [ SetCardRCA(0x1, 0xD555) , Command count = 4150 ] 
14:40:56: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:56: Host Frequency set to 25000 KHz
14:40:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:56: ####CSD Registe 2.0 Values####
14:40:56: CSD_STRUCTURE                                 :0x1
14:40:56: Reserv1                                       :0x0
14:40:56: Time Access 1 TAAC                            :0xe
14:40:56: Time Access 2 NSAC*100                        :0x0
14:40:56: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:56: Card Command Classess CCC                     :0x5b5
14:40:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:56: DSR(driver stage register)  DSR_IMP           :0x0
14:40:56: Reserv2                                       :0x0
14:40:56: Device Size C_SIZE                            :0xedc8
14:40:56: Reserv3                                       :0x0
14:40:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:56: Reserv4                                       :0x0
14:40:56: Write Speed Factor R2W_FACTOR                 :0x2
14:40:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:56: FILE_FORMAT_GRP                               :0x0
14:40:56: COPY flag                                     :0x1
14:40:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:56: File_Format                                   :0x0
14:40:56: CRC                                           :0x0
14:40:56: ####CSD Registe Values####  

14:40:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:56: [GetSCRRegisterEntry] Passed
14:40:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:56: Data_Status_After Erases          : 0
14:40:56: CPRM Security Support             : No Security
14:40:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:56: Spec. Version                     : Version 3.0X
14:40:56: Extended Security Support         : Extended_Security_Not_Supported
14:40:56: Command Support                   : COMMAND_SUPPORT
14:40:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683030>, <py_sfcl.CommandDataDefinition object at 0x06666990>) , Command count = 4151 ] 
14:40:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABEA0>, <py_sfcl.CommandDataDefinition object at 0x06032E10>) , Command count = 4152 ] 
14:40:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:56: [ SetBusWidth(0x4) , Command count = 4153 ] 
14:40:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4154 ] 
14:40:56: Protected Area Size 0x28000
14:40:56: Bus Width           2
14:40:56: Secure Mode         0
14:40:56: Speed  Class        4
14:40:56: Perf Move           0
14:40:56: Au Size             9
14:40:56: Erase Size          15
14:40:56: Erase Timeout       1
14:40:56: Erase offset        1
14:40:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4155 ] 
14:40:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:56: Host Frequency set to 100000 KHz
14:40:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:56: ####CSD Registe 2.0 Values####
14:40:56: CSD_STRUCTURE                                 :0x1
14:40:56: Reserv1                                       :0x0
14:40:56: Time Access 1 TAAC                            :0xe
14:40:56: Time Access 2 NSAC*100                        :0x0
14:40:56: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:56: Card Command Classess CCC                     :0x5b5
14:40:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:56: DSR(driver stage register)  DSR_IMP           :0x0
14:40:56: Reserv2                                       :0x0
14:40:56: Device Size C_SIZE                            :0xedc8
14:40:56: Reserv3                                       :0x0
14:40:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:56: Reserv4                                       :0x0
14:40:56: Write Speed Factor R2W_FACTOR                 :0x2
14:40:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:56: FILE_FORMAT_GRP                               :0x0
14:40:56: COPY flag                                     :0x1
14:40:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:56: File_Format                                   :0x0
14:40:56: CRC                                           :0x0
14:40:56: ####CSD Registe Values####  

14:40:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB240>, <py_sfcl.CommandDataDefinition object at 0x066AB420>) , Command count = 4156 ] 
14:40:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB180>, <py_sfcl.CommandDataDefinition object at 0x06685BD0>) , Command count = 4157 ] 
14:40:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:56: [DVTCommonLib]### Erase :Erase API Called
14:40:56: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x38030 with Blockcount:0x2001
14:40:56: [ EraseLba(0x38030, 0x2001) , Command count = 4158 ] 
14:40:56: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x38030 with Blockcount:0x2001 

14:40:56: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Outer loop Count 1016
14:40:56: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 28
14:40:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x38 to EndLba:0x40 with Increment Pattern
14:40:56: [ WrLbaNoData(0x38, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4159 ] 
14:40:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x38 to EndLba:0x40 with Increment Pattern 

14:40:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666D80>, <py_sfcl.CommandDataDefinition object at 0x06666870>) , Command count = 4160 ] 
14:40:56: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8CC0>, <py_sfcl.CommandDataDefinition object at 0x06685BD0>) , Command count = 4161 ] 
14:40:56: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:56: [DVTCommonLib]###  R1bCommandAbort called
14:40:57: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x15, False) , Command count = 4162 ] 
14:40:57: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:59: Host Frequency set to 25000 KHz
14:40:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A840>, 0x0, True) , Command count = 4163 ] 
14:40:59: [GO18_globalSetVolt]### Host voltage value is set.
14:40:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666750>, 0x0, False) , Command count = 4164 ] 
14:40:59: [GO18_globalSetVolt]### Host voltage value is set.
14:40:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4165 ] 
14:40:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4166 ] 
14:40:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4167 ] 
14:40:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABDB0>, <py_sfcl.CommandDataDefinition object at 0x06666B70>) , Command count = 4168 ] 
14:40:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A5A0>, <py_sfcl.CommandDataDefinition object at 0x06685BD0>) , Command count = 4169 ] 
14:40:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:59: [ SetCardRCA(0x1, 0xD555) , Command count = 4170 ] 
14:40:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:59: Host Frequency set to 25000 KHz
14:40:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:59: ####CSD Registe 2.0 Values####
14:40:59: CSD_STRUCTURE                                 :0x1
14:40:59: Reserv1                                       :0x0
14:40:59: Time Access 1 TAAC                            :0xe
14:40:59: Time Access 2 NSAC*100                        :0x0
14:40:59: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:59: Card Command Classess CCC                     :0x5b5
14:40:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:59: DSR(driver stage register)  DSR_IMP           :0x0
14:40:59: Reserv2                                       :0x0
14:40:59: Device Size C_SIZE                            :0xedc8
14:40:59: Reserv3                                       :0x0
14:40:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:59: Reserv4                                       :0x0
14:40:59: Write Speed Factor R2W_FACTOR                 :0x2
14:40:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:59: FILE_FORMAT_GRP                               :0x0
14:40:59: COPY flag                                     :0x1
14:40:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:59: File_Format                                   :0x0
14:40:59: CRC                                           :0x0
14:40:59: ####CSD Registe Values####  

14:40:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:59: [GetSCRRegisterEntry] Passed
14:40:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:59: Data_Status_After Erases          : 0
14:40:59: CPRM Security Support             : No Security
14:40:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:59: Spec. Version                     : Version 3.0X
14:40:59: Extended Security Support         : Extended_Security_Not_Supported
14:40:59: Command Support                   : COMMAND_SUPPORT
14:40:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066666F0>, <py_sfcl.CommandDataDefinition object at 0x0667ABA0>) , Command count = 4171 ] 
14:40:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A1E0>, <py_sfcl.CommandDataDefinition object at 0x0667AA80>) , Command count = 4172 ] 
14:40:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:59: [ SetBusWidth(0x4) , Command count = 4173 ] 
14:40:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4174 ] 
14:40:59: Protected Area Size 0x28000
14:40:59: Bus Width           2
14:40:59: Secure Mode         0
14:40:59: Speed  Class        4
14:40:59: Perf Move           0
14:40:59: Au Size             9
14:40:59: Erase Size          15
14:40:59: Erase Timeout       1
14:40:59: Erase offset        1
14:40:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4175 ] 
14:40:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:59: Host Frequency set to 100000 KHz
14:40:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:59: ####CSD Registe 2.0 Values####
14:40:59: CSD_STRUCTURE                                 :0x1
14:40:59: Reserv1                                       :0x0
14:40:59: Time Access 1 TAAC                            :0xe
14:40:59: Time Access 2 NSAC*100                        :0x0
14:40:59: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:59: Card Command Classess CCC                     :0x5b5
14:40:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:59: DSR(driver stage register)  DSR_IMP           :0x0
14:40:59: Reserv2                                       :0x0
14:40:59: Device Size C_SIZE                            :0xedc8
14:40:59: Reserv3                                       :0x0
14:40:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:59: Reserv4                                       :0x0
14:40:59: Write Speed Factor R2W_FACTOR                 :0x2
14:40:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:59: FILE_FORMAT_GRP                               :0x0
14:40:59: COPY flag                                     :0x1
14:40:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:59: File_Format                                   :0x0
14:40:59: CRC                                           :0x0
14:40:59: ####CSD Registe Values####  

14:40:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB2D0>, <py_sfcl.CommandDataDefinition object at 0x0667A720>) , Command count = 4176 ] 
14:40:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666DE0>, <py_sfcl.CommandDataDefinition object at 0x066856F0>) , Command count = 4177 ] 
14:40:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:59: [DVTCommonLib]### Erase :Erase API Called
14:40:59: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x38 with Blockcount:0x2001
14:40:59: [ EraseLba(0x38, 0x2001) , Command count = 4178 ] 
14:40:59: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x38 with Blockcount:0x2001 

14:40:59: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 27
14:40:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2038 to EndLba:0x2040 with Increment Pattern
14:40:59: [ WrLbaNoData(0x2038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4179 ] 
14:40:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2038 to EndLba:0x2040 with Increment Pattern 

14:40:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FDB0>, <py_sfcl.CommandDataDefinition object at 0x0667AB10>) , Command count = 4180 ] 
14:40:59: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:40:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032960>, <py_sfcl.CommandDataDefinition object at 0x0667A7B0>) , Command count = 4181 ] 
14:40:59: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:40:59: [DVTCommonLib]###  R1bCommandAbort called
14:40:59: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xC, False) , Command count = 4182 ] 
14:40:59: [DVTCommonLib]###  R1bCommandAbort Completed 

14:40:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:01: Host Frequency set to 25000 KHz
14:41:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666120>, 0x0, True) , Command count = 4183 ] 
14:41:01: [GO18_globalSetVolt]### Host voltage value is set.
14:41:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C450>, 0x0, False) , Command count = 4184 ] 
14:41:01: [GO18_globalSetVolt]### Host voltage value is set.
14:41:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4185 ] 
14:41:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4186 ] 
14:41:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4187 ] 
14:41:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE10>, <py_sfcl.CommandDataDefinition object at 0x0667AB40>) , Command count = 4188 ] 
14:41:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB450>, <py_sfcl.CommandDataDefinition object at 0x0667AE10>) , Command count = 4189 ] 
14:41:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:02: [ SetCardRCA(0x1, 0xD555) , Command count = 4190 ] 
14:41:02: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:02: Host Frequency set to 25000 KHz
14:41:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:02: ####CSD Registe 2.0 Values####
14:41:02: CSD_STRUCTURE                                 :0x1
14:41:02: Reserv1                                       :0x0
14:41:02: Time Access 1 TAAC                            :0xe
14:41:02: Time Access 2 NSAC*100                        :0x0
14:41:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:02: Card Command Classess CCC                     :0x5b5
14:41:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:02: DSR(driver stage register)  DSR_IMP           :0x0
14:41:02: Reserv2                                       :0x0
14:41:02: Device Size C_SIZE                            :0xedc8
14:41:02: Reserv3                                       :0x0
14:41:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:02: Reserv4                                       :0x0
14:41:02: Write Speed Factor R2W_FACTOR                 :0x2
14:41:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:02: FILE_FORMAT_GRP                               :0x0
14:41:02: COPY flag                                     :0x1
14:41:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:02: File_Format                                   :0x0
14:41:02: CRC                                           :0x0
14:41:02: ####CSD Registe Values####  

14:41:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:02: [GetSCRRegisterEntry] Passed
14:41:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:02: Data_Status_After Erases          : 0
14:41:02: CPRM Security Support             : No Security
14:41:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:02: Spec. Version                     : Version 3.0X
14:41:02: Extended Security Support         : Extended_Security_Not_Supported
14:41:02: Command Support                   : COMMAND_SUPPORT
14:41:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF90>, <py_sfcl.CommandDataDefinition object at 0x0667A0F0>) , Command count = 4191 ] 
14:41:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F630>, <py_sfcl.CommandDataDefinition object at 0x0667C2D0>) , Command count = 4192 ] 
14:41:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:02: [ SetBusWidth(0x4) , Command count = 4193 ] 
14:41:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4194 ] 
14:41:02: Protected Area Size 0x28000
14:41:02: Bus Width           2
14:41:02: Secure Mode         0
14:41:02: Speed  Class        4
14:41:02: Perf Move           0
14:41:02: Au Size             9
14:41:02: Erase Size          15
14:41:02: Erase Timeout       1
14:41:02: Erase offset        1
14:41:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4195 ] 
14:41:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:02: Host Frequency set to 100000 KHz
14:41:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:02: ####CSD Registe 2.0 Values####
14:41:02: CSD_STRUCTURE                                 :0x1
14:41:02: Reserv1                                       :0x0
14:41:02: Time Access 1 TAAC                            :0xe
14:41:02: Time Access 2 NSAC*100                        :0x0
14:41:02: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:02: Card Command Classess CCC                     :0x5b5
14:41:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:02: DSR(driver stage register)  DSR_IMP           :0x0
14:41:02: Reserv2                                       :0x0
14:41:02: Device Size C_SIZE                            :0xedc8
14:41:02: Reserv3                                       :0x0
14:41:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:02: Reserv4                                       :0x0
14:41:02: Write Speed Factor R2W_FACTOR                 :0x2
14:41:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:02: FILE_FORMAT_GRP                               :0x0
14:41:02: COPY flag                                     :0x1
14:41:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:02: File_Format                                   :0x0
14:41:02: CRC                                           :0x0
14:41:02: ####CSD Registe Values####  

14:41:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A630>, <py_sfcl.CommandDataDefinition object at 0x0667A690>) , Command count = 4196 ] 
14:41:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB2A0>, <py_sfcl.CommandDataDefinition object at 0x06685630>) , Command count = 4197 ] 
14:41:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:02: [DVTCommonLib]### Erase :Erase API Called
14:41:02: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2038 with Blockcount:0x2001
14:41:02: [ EraseLba(0x2038, 0x2001) , Command count = 4198 ] 
14:41:02: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2038 with Blockcount:0x2001 

14:41:02: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 26
14:41:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x4038 to EndLba:0x4040 with Increment Pattern
14:41:02: [ WrLbaNoData(0x4038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4199 ] 
14:41:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x4038 to EndLba:0x4040 with Increment Pattern 

14:41:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF00>, <py_sfcl.CommandDataDefinition object at 0x0667C1E0>) , Command count = 4200 ] 
14:41:02: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB4B0>, <py_sfcl.CommandDataDefinition object at 0x0667AE70>) , Command count = 4201 ] 
14:41:02: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:02: [DVTCommonLib]###  R1bCommandAbort called
14:41:02: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x22, False) , Command count = 4202 ] 
14:41:02: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:02: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:04: Host Frequency set to 25000 KHz
14:41:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:04: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABF30>, 0x0, True) , Command count = 4203 ] 
14:41:04: [GO18_globalSetVolt]### Host voltage value is set.
14:41:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C5D0>, 0x0, False) , Command count = 4204 ] 
14:41:04: [GO18_globalSetVolt]### Host voltage value is set.
14:41:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4205 ] 
14:41:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4206 ] 
14:41:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4207 ] 
14:41:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066668A0>, <py_sfcl.CommandDataDefinition object at 0x06666090>) , Command count = 4208 ] 
14:41:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A4B0>, <py_sfcl.CommandDataDefinition object at 0x0667AE70>) , Command count = 4209 ] 
14:41:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:04: [ SetCardRCA(0x1, 0xD555) , Command count = 4210 ] 
14:41:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:05: Host Frequency set to 25000 KHz
14:41:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:05: ####CSD Registe 2.0 Values####
14:41:05: CSD_STRUCTURE                                 :0x1
14:41:05: Reserv1                                       :0x0
14:41:05: Time Access 1 TAAC                            :0xe
14:41:05: Time Access 2 NSAC*100                        :0x0
14:41:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:05: Card Command Classess CCC                     :0x5b5
14:41:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:05: DSR(driver stage register)  DSR_IMP           :0x0
14:41:05: Reserv2                                       :0x0
14:41:05: Device Size C_SIZE                            :0xedc8
14:41:05: Reserv3                                       :0x0
14:41:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:05: Reserv4                                       :0x0
14:41:05: Write Speed Factor R2W_FACTOR                 :0x2
14:41:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:05: FILE_FORMAT_GRP                               :0x0
14:41:05: COPY flag                                     :0x1
14:41:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:05: File_Format                                   :0x0
14:41:05: CRC                                           :0x0
14:41:05: ####CSD Registe Values####  

14:41:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:05: [GetSCRRegisterEntry] Passed
14:41:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:05: Data_Status_After Erases          : 0
14:41:05: CPRM Security Support             : No Security
14:41:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:05: Spec. Version                     : Version 3.0X
14:41:05: Extended Security Support         : Extended_Security_Not_Supported
14:41:05: Command Support                   : COMMAND_SUPPORT
14:41:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666660>, <py_sfcl.CommandDataDefinition object at 0x0667C720>) , Command count = 4211 ] 
14:41:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A870>, <py_sfcl.CommandDataDefinition object at 0x0667A450>) , Command count = 4212 ] 
14:41:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:05: [ SetBusWidth(0x4) , Command count = 4213 ] 
14:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4214 ] 
14:41:05: Protected Area Size 0x28000
14:41:05: Bus Width           2
14:41:05: Secure Mode         0
14:41:05: Speed  Class        4
14:41:05: Perf Move           0
14:41:05: Au Size             9
14:41:05: Erase Size          15
14:41:05: Erase Timeout       1
14:41:05: Erase offset        1
14:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4215 ] 
14:41:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:05: Host Frequency set to 100000 KHz
14:41:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:05: ####CSD Registe 2.0 Values####
14:41:05: CSD_STRUCTURE                                 :0x1
14:41:05: Reserv1                                       :0x0
14:41:05: Time Access 1 TAAC                            :0xe
14:41:05: Time Access 2 NSAC*100                        :0x0
14:41:05: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:05: Card Command Classess CCC                     :0x5b5
14:41:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:05: DSR(driver stage register)  DSR_IMP           :0x0
14:41:05: Reserv2                                       :0x0
14:41:05: Device Size C_SIZE                            :0xedc8
14:41:05: Reserv3                                       :0x0
14:41:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:05: Reserv4                                       :0x0
14:41:05: Write Speed Factor R2W_FACTOR                 :0x2
14:41:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:05: FILE_FORMAT_GRP                               :0x0
14:41:05: COPY flag                                     :0x1
14:41:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:05: File_Format                                   :0x0
14:41:05: CRC                                           :0x0
14:41:05: ####CSD Registe Values####  

14:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683A20>, <py_sfcl.CommandDataDefinition object at 0x066AB360>) , Command count = 4216 ] 
14:41:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066663F0>, <py_sfcl.CommandDataDefinition object at 0x06685540>) , Command count = 4217 ] 
14:41:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:05: [DVTCommonLib]### Erase :Erase API Called
14:41:05: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x4038 with Blockcount:0x2001
14:41:05: [ EraseLba(0x4038, 0x2001) , Command count = 4218 ] 
14:41:05: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x4038 with Blockcount:0x2001 

14:41:05: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 25
14:41:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x6038 to EndLba:0x6040 with Increment Pattern
14:41:05: [ WrLbaNoData(0x6038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4219 ] 
14:41:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x6038 to EndLba:0x6040 with Increment Pattern 

14:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CA80>, <py_sfcl.CommandDataDefinition object at 0x0667C060>) , Command count = 4220 ] 
14:41:05: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066662A0>, <py_sfcl.CommandDataDefinition object at 0x06685540>) , Command count = 4221 ] 
14:41:05: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:05: [DVTCommonLib]###  R1bCommandAbort called
14:41:05: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x26, False) , Command count = 4222 ] 
14:41:05: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:05: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:07: Host Frequency set to 25000 KHz
14:41:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:07: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C690>, 0x0, True) , Command count = 4223 ] 
14:41:07: [GO18_globalSetVolt]### Host voltage value is set.
14:41:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F390>, 0x0, False) , Command count = 4224 ] 
14:41:07: [GO18_globalSetVolt]### Host voltage value is set.
14:41:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4225 ] 
14:41:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4226 ] 
14:41:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4227 ] 
14:41:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CB70>, <py_sfcl.CommandDataDefinition object at 0x0667CBD0>) , Command count = 4228 ] 
14:41:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F780>, <py_sfcl.CommandDataDefinition object at 0x0667C7E0>) , Command count = 4229 ] 
14:41:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:07: [ SetCardRCA(0x1, 0xD555) , Command count = 4230 ] 
14:41:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:07: Host Frequency set to 25000 KHz
14:41:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:07: ####CSD Registe 2.0 Values####
14:41:07: CSD_STRUCTURE                                 :0x1
14:41:07: Reserv1                                       :0x0
14:41:07: Time Access 1 TAAC                            :0xe
14:41:07: Time Access 2 NSAC*100                        :0x0
14:41:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:07: Card Command Classess CCC                     :0x5b5
14:41:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:07: DSR(driver stage register)  DSR_IMP           :0x0
14:41:07: Reserv2                                       :0x0
14:41:07: Device Size C_SIZE                            :0xedc8
14:41:07: Reserv3                                       :0x0
14:41:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:07: Reserv4                                       :0x0
14:41:07: Write Speed Factor R2W_FACTOR                 :0x2
14:41:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:07: FILE_FORMAT_GRP                               :0x0
14:41:07: COPY flag                                     :0x1
14:41:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:07: File_Format                                   :0x0
14:41:07: CRC                                           :0x0
14:41:07: ####CSD Registe Values####  

14:41:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:07: [GetSCRRegisterEntry] Passed
14:41:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:07: Data_Status_After Erases          : 0
14:41:07: CPRM Security Support             : No Security
14:41:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:07: Spec. Version                     : Version 3.0X
14:41:07: Extended Security Support         : Extended_Security_Not_Supported
14:41:07: Command Support                   : COMMAND_SUPPORT
14:41:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB5D0>, <py_sfcl.CommandDataDefinition object at 0x0667CB10>) , Command count = 4231 ] 
14:41:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066830C0>, <py_sfcl.CommandDataDefinition object at 0x0667A660>) , Command count = 4232 ] 
14:41:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:07: [ SetBusWidth(0x4) , Command count = 4233 ] 
14:41:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C900>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4234 ] 
14:41:07: Protected Area Size 0x28000
14:41:07: Bus Width           2
14:41:07: Secure Mode         0
14:41:07: Speed  Class        4
14:41:07: Perf Move           0
14:41:07: Au Size             9
14:41:07: Erase Size          15
14:41:07: Erase Timeout       1
14:41:07: Erase offset        1
14:41:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4235 ] 
14:41:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:08: Host Frequency set to 100000 KHz
14:41:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:08: ####CSD Registe 2.0 Values####
14:41:08: CSD_STRUCTURE                                 :0x1
14:41:08: Reserv1                                       :0x0
14:41:08: Time Access 1 TAAC                            :0xe
14:41:08: Time Access 2 NSAC*100                        :0x0
14:41:08: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:08: Card Command Classess CCC                     :0x5b5
14:41:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:08: DSR(driver stage register)  DSR_IMP           :0x0
14:41:08: Reserv2                                       :0x0
14:41:08: Device Size C_SIZE                            :0xedc8
14:41:08: Reserv3                                       :0x0
14:41:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:08: Reserv4                                       :0x0
14:41:08: Write Speed Factor R2W_FACTOR                 :0x2
14:41:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:08: FILE_FORMAT_GRP                               :0x0
14:41:08: COPY flag                                     :0x1
14:41:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:08: File_Format                                   :0x0
14:41:08: CRC                                           :0x0
14:41:08: ####CSD Registe Values####  

14:41:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CC90>, <py_sfcl.CommandDataDefinition object at 0x0667C420>) , Command count = 4236 ] 
14:41:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A8D0>, <py_sfcl.CommandDataDefinition object at 0x06685840>) , Command count = 4237 ] 
14:41:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:08: [DVTCommonLib]### Erase :Erase API Called
14:41:08: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x6038 with Blockcount:0x2001
14:41:08: [ EraseLba(0x6038, 0x2001) , Command count = 4238 ] 
14:41:08: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x6038 with Blockcount:0x2001 

14:41:08: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 24
14:41:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x8038 to EndLba:0x8040 with Increment Pattern
14:41:08: [ WrLbaNoData(0x8038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4239 ] 
14:41:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x8038 to EndLba:0x8040 with Increment Pattern 

14:41:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F180>, <py_sfcl.CommandDataDefinition object at 0x0667FB10>) , Command count = 4240 ] 
14:41:08: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C570>, <py_sfcl.CommandDataDefinition object at 0x0667CAB0>) , Command count = 4241 ] 
14:41:08: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:08: [DVTCommonLib]###  R1bCommandAbort called
14:41:08: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2E, False) , Command count = 4242 ] 
14:41:08: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:10: Host Frequency set to 25000 KHz
14:41:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CE40>, 0x0, True) , Command count = 4243 ] 
14:41:10: [GO18_globalSetVolt]### Host voltage value is set.
14:41:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FF00>, 0x0, False) , Command count = 4244 ] 
14:41:10: [GO18_globalSetVolt]### Host voltage value is set.
14:41:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4245 ] 
14:41:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4246 ] 
14:41:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4247 ] 
14:41:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F540>, <py_sfcl.CommandDataDefinition object at 0x0667F270>) , Command count = 4248 ] 
14:41:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F600>, <py_sfcl.CommandDataDefinition object at 0x0667ADE0>) , Command count = 4249 ] 
14:41:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:10: [ SetCardRCA(0x1, 0xD555) , Command count = 4250 ] 
14:41:10: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:10: Host Frequency set to 25000 KHz
14:41:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:10: ####CSD Registe 2.0 Values####
14:41:10: CSD_STRUCTURE                                 :0x1
14:41:10: Reserv1                                       :0x0
14:41:10: Time Access 1 TAAC                            :0xe
14:41:10: Time Access 2 NSAC*100                        :0x0
14:41:10: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:10: Card Command Classess CCC                     :0x5b5
14:41:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:10: DSR(driver stage register)  DSR_IMP           :0x0
14:41:10: Reserv2                                       :0x0
14:41:10: Device Size C_SIZE                            :0xedc8
14:41:10: Reserv3                                       :0x0
14:41:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:10: Reserv4                                       :0x0
14:41:10: Write Speed Factor R2W_FACTOR                 :0x2
14:41:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:10: FILE_FORMAT_GRP                               :0x0
14:41:10: COPY flag                                     :0x1
14:41:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:10: File_Format                                   :0x0
14:41:10: CRC                                           :0x0
14:41:10: ####CSD Registe Values####  

14:41:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:10: [GetSCRRegisterEntry] Passed
14:41:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:10: Data_Status_After Erases          : 0
14:41:10: CPRM Security Support             : No Security
14:41:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:10: Spec. Version                     : Version 3.0X
14:41:10: Extended Security Support         : Extended_Security_Not_Supported
14:41:10: Command Support                   : COMMAND_SUPPORT
14:41:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C150>, <py_sfcl.CommandDataDefinition object at 0x0667C180>) , Command count = 4251 ] 
14:41:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F660>, <py_sfcl.CommandDataDefinition object at 0x0667ABD0>) , Command count = 4252 ] 
14:41:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:10: [ SetBusWidth(0x4) , Command count = 4253 ] 
14:41:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F900>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4254 ] 
14:41:10: Protected Area Size 0x28000
14:41:10: Bus Width           2
14:41:10: Secure Mode         0
14:41:10: Speed  Class        4
14:41:10: Perf Move           0
14:41:10: Au Size             9
14:41:10: Erase Size          15
14:41:10: Erase Timeout       1
14:41:10: Erase offset        1
14:41:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4255 ] 
14:41:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:10: Host Frequency set to 100000 KHz
14:41:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:10: ####CSD Registe 2.0 Values####
14:41:10: CSD_STRUCTURE                                 :0x1
14:41:10: Reserv1                                       :0x0
14:41:10: Time Access 1 TAAC                            :0xe
14:41:10: Time Access 2 NSAC*100                        :0x0
14:41:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:10: Card Command Classess CCC                     :0x5b5
14:41:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:10: DSR(driver stage register)  DSR_IMP           :0x0
14:41:10: Reserv2                                       :0x0
14:41:10: Device Size C_SIZE                            :0xedc8
14:41:10: Reserv3                                       :0x0
14:41:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:10: Reserv4                                       :0x0
14:41:10: Write Speed Factor R2W_FACTOR                 :0x2
14:41:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:10: FILE_FORMAT_GRP                               :0x0
14:41:10: COPY flag                                     :0x1
14:41:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:10: File_Format                                   :0x0
14:41:10: CRC                                           :0x0
14:41:10: ####CSD Registe Values####  

14:41:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AA20>, <py_sfcl.CommandDataDefinition object at 0x0667F450>) , Command count = 4256 ] 
14:41:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB660>, <py_sfcl.CommandDataDefinition object at 0x06685DE0>) , Command count = 4257 ] 
14:41:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:10: [DVTCommonLib]### Erase :Erase API Called
14:41:10: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x8038 with Blockcount:0x2001
14:41:10: [ EraseLba(0x8038, 0x2001) , Command count = 4258 ] 
14:41:10: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x8038 with Blockcount:0x2001 

14:41:10: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 23
14:41:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xA038 to EndLba:0xA040 with Increment Pattern
14:41:10: [ WrLbaNoData(0xA038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4259 ] 
14:41:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xA038 to EndLba:0xA040 with Increment Pattern 

14:41:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F9C0>, <py_sfcl.CommandDataDefinition object at 0x0667C5A0>) , Command count = 4260 ] 
14:41:10: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F8A0>, <py_sfcl.CommandDataDefinition object at 0x0667C660>) , Command count = 4261 ] 
14:41:10: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:10: [DVTCommonLib]###  R1bCommandAbort called
14:41:11: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2D, False) , Command count = 4262 ] 
14:41:11: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:13: Host Frequency set to 25000 KHz
14:41:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A930>, 0x0, True) , Command count = 4263 ] 
14:41:13: [GO18_globalSetVolt]### Host voltage value is set.
14:41:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x066836C0>, 0x0, False) , Command count = 4264 ] 
14:41:13: [GO18_globalSetVolt]### Host voltage value is set.
14:41:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4265 ] 
14:41:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4266 ] 
14:41:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4267 ] 
14:41:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FAB0>, <py_sfcl.CommandDataDefinition object at 0x0667F300>) , Command count = 4268 ] 
14:41:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FA80>, <py_sfcl.CommandDataDefinition object at 0x0667C660>) , Command count = 4269 ] 
14:41:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:13: [ SetCardRCA(0x1, 0xD555) , Command count = 4270 ] 
14:41:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:13: Host Frequency set to 25000 KHz
14:41:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:13: ####CSD Registe 2.0 Values####
14:41:13: CSD_STRUCTURE                                 :0x1
14:41:13: Reserv1                                       :0x0
14:41:13: Time Access 1 TAAC                            :0xe
14:41:13: Time Access 2 NSAC*100                        :0x0
14:41:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:13: Card Command Classess CCC                     :0x5b5
14:41:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:13: DSR(driver stage register)  DSR_IMP           :0x0
14:41:13: Reserv2                                       :0x0
14:41:13: Device Size C_SIZE                            :0xedc8
14:41:13: Reserv3                                       :0x0
14:41:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:13: Reserv4                                       :0x0
14:41:13: Write Speed Factor R2W_FACTOR                 :0x2
14:41:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:13: FILE_FORMAT_GRP                               :0x0
14:41:13: COPY flag                                     :0x1
14:41:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:13: File_Format                                   :0x0
14:41:13: CRC                                           :0x0
14:41:13: ####CSD Registe Values####  

14:41:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:13: [GetSCRRegisterEntry] Passed
14:41:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:13: Data_Status_After Erases          : 0
14:41:13: CPRM Security Support             : No Security
14:41:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:13: Spec. Version                     : Version 3.0X
14:41:13: Extended Security Support         : Extended_Security_Not_Supported
14:41:13: Command Support                   : COMMAND_SUPPORT
14:41:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FBA0>, <py_sfcl.CommandDataDefinition object at 0x0667CF60>) , Command count = 4271 ] 
14:41:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FE70>, <py_sfcl.CommandDataDefinition object at 0x0667F720>) , Command count = 4272 ] 
14:41:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:13: [ SetBusWidth(0x4) , Command count = 4273 ] 
14:41:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667FD80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4274 ] 
14:41:13: Protected Area Size 0x28000
14:41:13: Bus Width           2
14:41:13: Secure Mode         0
14:41:13: Speed  Class        4
14:41:13: Perf Move           0
14:41:13: Au Size             9
14:41:13: Erase Size          15
14:41:13: Erase Timeout       1
14:41:13: Erase offset        1
14:41:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4275 ] 
14:41:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:13: Host Frequency set to 100000 KHz
14:41:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:13: ####CSD Registe 2.0 Values####
14:41:13: CSD_STRUCTURE                                 :0x1
14:41:13: Reserv1                                       :0x0
14:41:13: Time Access 1 TAAC                            :0xe
14:41:13: Time Access 2 NSAC*100                        :0x0
14:41:13: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:13: Card Command Classess CCC                     :0x5b5
14:41:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:13: DSR(driver stage register)  DSR_IMP           :0x0
14:41:13: Reserv2                                       :0x0
14:41:13: Device Size C_SIZE                            :0xedc8
14:41:13: Reserv3                                       :0x0
14:41:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:13: Reserv4                                       :0x0
14:41:13: Write Speed Factor R2W_FACTOR                 :0x2
14:41:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:13: FILE_FORMAT_GRP                               :0x0
14:41:13: COPY flag                                     :0x1
14:41:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:13: File_Format                                   :0x0
14:41:13: CRC                                           :0x0
14:41:13: ####CSD Registe Values####  

14:41:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FBD0>, <py_sfcl.CommandDataDefinition object at 0x0667F900>) , Command count = 4276 ] 
14:41:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066850F0>, <py_sfcl.CommandDataDefinition object at 0x06685A80>) , Command count = 4277 ] 
14:41:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:13: [DVTCommonLib]### Erase :Erase API Called
14:41:13: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xA038 with Blockcount:0x2001
14:41:13: [ EraseLba(0xA038, 0x2001) , Command count = 4278 ] 
14:41:13: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xA038 with Blockcount:0x2001 

14:41:13: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 22
14:41:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xC038 to EndLba:0xC040 with Increment Pattern
14:41:13: [ WrLbaNoData(0xC038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4279 ] 
14:41:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xC038 to EndLba:0xC040 with Increment Pattern 

14:41:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FC90>, <py_sfcl.CommandDataDefinition object at 0x0667FDE0>) , Command count = 4280 ] 
14:41:13: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F2A0>, <py_sfcl.CommandDataDefinition object at 0x066850F0>) , Command count = 4281 ] 
14:41:13: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:13: [DVTCommonLib]###  R1bCommandAbort called
14:41:13: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1, False) , Command count = 4282 ] 
14:41:13: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:15: Host Frequency set to 25000 KHz
14:41:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A9F0>, 0x0, True) , Command count = 4283 ] 
14:41:15: [GO18_globalSetVolt]### Host voltage value is set.
14:41:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683D20>, 0x0, False) , Command count = 4284 ] 
14:41:15: [GO18_globalSetVolt]### Host voltage value is set.
14:41:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4285 ] 
14:41:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4286 ] 
14:41:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4287 ] 
14:41:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683480>, <py_sfcl.CommandDataDefinition object at 0x06683390>) , Command count = 4288 ] 
14:41:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE70>, <py_sfcl.CommandDataDefinition object at 0x0667CC00>) , Command count = 4289 ] 
14:41:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:16: [ SetCardRCA(0x1, 0xD555) , Command count = 4290 ] 
14:41:16: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:16: Host Frequency set to 25000 KHz
14:41:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:16: ####CSD Registe 2.0 Values####
14:41:16: CSD_STRUCTURE                                 :0x1
14:41:16: Reserv1                                       :0x0
14:41:16: Time Access 1 TAAC                            :0xe
14:41:16: Time Access 2 NSAC*100                        :0x0
14:41:16: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:16: Card Command Classess CCC                     :0x5b5
14:41:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:16: DSR(driver stage register)  DSR_IMP           :0x0
14:41:16: Reserv2                                       :0x0
14:41:16: Device Size C_SIZE                            :0xedc8
14:41:16: Reserv3                                       :0x0
14:41:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:16: Reserv4                                       :0x0
14:41:16: Write Speed Factor R2W_FACTOR                 :0x2
14:41:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:16: FILE_FORMAT_GRP                               :0x0
14:41:16: COPY flag                                     :0x1
14:41:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:16: File_Format                                   :0x0
14:41:16: CRC                                           :0x0
14:41:16: ####CSD Registe Values####  

14:41:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:16: [GetSCRRegisterEntry] Passed
14:41:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:16: Data_Status_After Erases          : 0
14:41:16: CPRM Security Support             : No Security
14:41:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:16: Spec. Version                     : Version 3.0X
14:41:16: Extended Security Support         : Extended_Security_Not_Supported
14:41:16: Command Support                   : COMMAND_SUPPORT
14:41:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F930>, <py_sfcl.CommandDataDefinition object at 0x0667F3F0>) , Command count = 4291 ] 
14:41:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066835A0>, <py_sfcl.CommandDataDefinition object at 0x06683540>) , Command count = 4292 ] 
14:41:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:16: [ SetBusWidth(0x4) , Command count = 4293 ] 
14:41:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667FAE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4294 ] 
14:41:16: Protected Area Size 0x28000
14:41:16: Bus Width           2
14:41:16: Secure Mode         0
14:41:16: Speed  Class        4
14:41:16: Perf Move           0
14:41:16: Au Size             9
14:41:16: Erase Size          15
14:41:16: Erase Timeout       1
14:41:16: Erase offset        1
14:41:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4295 ] 
14:41:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:16: Host Frequency set to 100000 KHz
14:41:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:16: ####CSD Registe 2.0 Values####
14:41:16: CSD_STRUCTURE                                 :0x1
14:41:16: Reserv1                                       :0x0
14:41:16: Time Access 1 TAAC                            :0xe
14:41:16: Time Access 2 NSAC*100                        :0x0
14:41:16: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:16: Card Command Classess CCC                     :0x5b5
14:41:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:16: DSR(driver stage register)  DSR_IMP           :0x0
14:41:16: Reserv2                                       :0x0
14:41:16: Device Size C_SIZE                            :0xedc8
14:41:16: Reserv3                                       :0x0
14:41:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:16: Reserv4                                       :0x0
14:41:16: Write Speed Factor R2W_FACTOR                 :0x2
14:41:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:16: FILE_FORMAT_GRP                               :0x0
14:41:16: COPY flag                                     :0x1
14:41:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:16: File_Format                                   :0x0
14:41:16: CRC                                           :0x0
14:41:16: ####CSD Registe Values####  

14:41:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683630>, <py_sfcl.CommandDataDefinition object at 0x0667F3C0>) , Command count = 4296 ] 
14:41:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FCC0>, <py_sfcl.CommandDataDefinition object at 0x06685A20>) , Command count = 4297 ] 
14:41:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:16: [DVTCommonLib]### Erase :Erase API Called
14:41:16: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xC038 with Blockcount:0x2001
14:41:16: [ EraseLba(0xC038, 0x2001) , Command count = 4298 ] 
14:41:16: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xC038 with Blockcount:0x2001 

14:41:16: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 21
14:41:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xE038 to EndLba:0xE040 with Increment Pattern
14:41:16: [ WrLbaNoData(0xE038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4299 ] 
14:41:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xE038 to EndLba:0xE040 with Increment Pattern 

14:41:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C870>, <py_sfcl.CommandDataDefinition object at 0x0667FB40>) , Command count = 4300 ] 
14:41:16: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FA50>, <py_sfcl.CommandDataDefinition object at 0x06683510>) , Command count = 4301 ] 
14:41:16: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:16: [DVTCommonLib]###  R1bCommandAbort called
14:41:16: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x9, False) , Command count = 4302 ] 
14:41:16: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:18: Host Frequency set to 25000 KHz
14:41:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:18: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F570>, 0x0, True) , Command count = 4303 ] 
14:41:18: [GO18_globalSetVolt]### Host voltage value is set.
14:41:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683600>, 0x0, False) , Command count = 4304 ] 
14:41:18: [GO18_globalSetVolt]### Host voltage value is set.
14:41:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4305 ] 
14:41:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4306 ] 
14:41:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4307 ] 
14:41:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066839F0>, <py_sfcl.CommandDataDefinition object at 0x06683B10>) , Command count = 4308 ] 
14:41:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066839C0>, <py_sfcl.CommandDataDefinition object at 0x06683EA0>) , Command count = 4309 ] 
14:41:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:18: [ SetCardRCA(0x1, 0xD555) , Command count = 4310 ] 
14:41:19: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:19: Host Frequency set to 25000 KHz
14:41:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:19: ####CSD Registe 2.0 Values####
14:41:19: CSD_STRUCTURE                                 :0x1
14:41:19: Reserv1                                       :0x0
14:41:19: Time Access 1 TAAC                            :0xe
14:41:19: Time Access 2 NSAC*100                        :0x0
14:41:19: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:19: Card Command Classess CCC                     :0x5b5
14:41:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:19: DSR(driver stage register)  DSR_IMP           :0x0
14:41:19: Reserv2                                       :0x0
14:41:19: Device Size C_SIZE                            :0xedc8
14:41:19: Reserv3                                       :0x0
14:41:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:19: Reserv4                                       :0x0
14:41:19: Write Speed Factor R2W_FACTOR                 :0x2
14:41:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:19: FILE_FORMAT_GRP                               :0x0
14:41:19: COPY flag                                     :0x1
14:41:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:19: File_Format                                   :0x0
14:41:19: CRC                                           :0x0
14:41:19: ####CSD Registe Values####  

14:41:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:19: [GetSCRRegisterEntry] Passed
14:41:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:19: Data_Status_After Erases          : 0
14:41:19: CPRM Security Support             : No Security
14:41:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:19: Spec. Version                     : Version 3.0X
14:41:19: Extended Security Support         : Extended_Security_Not_Supported
14:41:19: Command Support                   : COMMAND_SUPPORT
14:41:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AE40>, <py_sfcl.CommandDataDefinition object at 0x0667F810>) , Command count = 4311 ] 
14:41:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683870>, <py_sfcl.CommandDataDefinition object at 0x0667F090>) , Command count = 4312 ] 
14:41:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:19: [ SetBusWidth(0x4) , Command count = 4313 ] 
14:41:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06683690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4314 ] 
14:41:19: Protected Area Size 0x28000
14:41:19: Bus Width           2
14:41:19: Secure Mode         0
14:41:19: Speed  Class        4
14:41:19: Perf Move           0
14:41:19: Au Size             9
14:41:19: Erase Size          15
14:41:19: Erase Timeout       1
14:41:19: Erase offset        1
14:41:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4315 ] 
14:41:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:19: Host Frequency set to 100000 KHz
14:41:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:19: ####CSD Registe 2.0 Values####
14:41:19: CSD_STRUCTURE                                 :0x1
14:41:19: Reserv1                                       :0x0
14:41:19: Time Access 1 TAAC                            :0xe
14:41:19: Time Access 2 NSAC*100                        :0x0
14:41:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:19: Card Command Classess CCC                     :0x5b5
14:41:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:19: DSR(driver stage register)  DSR_IMP           :0x0
14:41:19: Reserv2                                       :0x0
14:41:19: Device Size C_SIZE                            :0xedc8
14:41:19: Reserv3                                       :0x0
14:41:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:19: Reserv4                                       :0x0
14:41:19: Write Speed Factor R2W_FACTOR                 :0x2
14:41:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:19: FILE_FORMAT_GRP                               :0x0
14:41:19: COPY flag                                     :0x1
14:41:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:19: File_Format                                   :0x0
14:41:19: CRC                                           :0x0
14:41:19: ####CSD Registe Values####  

14:41:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683810>, <py_sfcl.CommandDataDefinition object at 0x0667FAE0>) , Command count = 4316 ] 
14:41:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F5D0>, <py_sfcl.CommandDataDefinition object at 0x0667C360>) , Command count = 4317 ] 
14:41:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:19: [DVTCommonLib]### Erase :Erase API Called
14:41:19: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0xE038 with Blockcount:0x2001
14:41:19: [ EraseLba(0xE038, 0x2001) , Command count = 4318 ] 
14:41:19: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0xE038 with Blockcount:0x2001 

14:41:19: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 20
14:41:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x10038 to EndLba:0x10040 with Increment Pattern
14:41:19: [ WrLbaNoData(0x10038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4319 ] 
14:41:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x10038 to EndLba:0x10040 with Increment Pattern 

14:41:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D50>, <py_sfcl.CommandDataDefinition object at 0x06683A80>) , Command count = 4320 ] 
14:41:19: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CD50>, <py_sfcl.CommandDataDefinition object at 0x0667F870>) , Command count = 4321 ] 
14:41:19: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:19: [DVTCommonLib]###  R1bCommandAbort called
14:41:19: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2E, False) , Command count = 4322 ] 
14:41:19: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:21: Host Frequency set to 25000 KHz
14:41:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683AE0>, 0x0, True) , Command count = 4323 ] 
14:41:21: [GO18_globalSetVolt]### Host voltage value is set.
14:41:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FE8C00>, 0x0, False) , Command count = 4324 ] 
14:41:21: [GO18_globalSetVolt]### Host voltage value is set.
14:41:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4325 ] 
14:41:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4326 ] 
14:41:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4327 ] 
14:41:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E42840>, <py_sfcl.CommandDataDefinition object at 0x066834E0>) , Command count = 4328 ] 
14:41:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AF90>, <py_sfcl.CommandDataDefinition object at 0x0667FC30>) , Command count = 4329 ] 
14:41:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:21: [ SetCardRCA(0x1, 0xD555) , Command count = 4330 ] 
14:41:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:21: Host Frequency set to 25000 KHz
14:41:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:21: ####CSD Registe 2.0 Values####
14:41:21: CSD_STRUCTURE                                 :0x1
14:41:21: Reserv1                                       :0x0
14:41:21: Time Access 1 TAAC                            :0xe
14:41:21: Time Access 2 NSAC*100                        :0x0
14:41:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:21: Card Command Classess CCC                     :0x5b5
14:41:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:21: DSR(driver stage register)  DSR_IMP           :0x0
14:41:21: Reserv2                                       :0x0
14:41:21: Device Size C_SIZE                            :0xedc8
14:41:21: Reserv3                                       :0x0
14:41:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:21: Reserv4                                       :0x0
14:41:21: Write Speed Factor R2W_FACTOR                 :0x2
14:41:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:21: FILE_FORMAT_GRP                               :0x0
14:41:21: COPY flag                                     :0x1
14:41:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:21: File_Format                                   :0x0
14:41:21: CRC                                           :0x0
14:41:21: ####CSD Registe Values####  

14:41:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:21: [GetSCRRegisterEntry] Passed
14:41:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:21: Data_Status_After Erases          : 0
14:41:21: CPRM Security Support             : No Security
14:41:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:21: Spec. Version                     : Version 3.0X
14:41:21: Extended Security Support         : Extended_Security_Not_Supported
14:41:21: Command Support                   : COMMAND_SUPPORT
14:41:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683840>, <py_sfcl.CommandDataDefinition object at 0x066836F0>) , Command count = 4331 ] 
14:41:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6570>, <py_sfcl.CommandDataDefinition object at 0x06683060>) , Command count = 4332 ] 
14:41:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:21: [ SetBusWidth(0x4) , Command count = 4333 ] 
14:41:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F7B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4334 ] 
14:41:21: Protected Area Size 0x28000
14:41:21: Bus Width           2
14:41:21: Secure Mode         0
14:41:21: Speed  Class        4
14:41:21: Perf Move           0
14:41:21: Au Size             9
14:41:21: Erase Size          15
14:41:21: Erase Timeout       1
14:41:21: Erase offset        1
14:41:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4335 ] 
14:41:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:22: Host Frequency set to 100000 KHz
14:41:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:22: ####CSD Registe 2.0 Values####
14:41:22: CSD_STRUCTURE                                 :0x1
14:41:22: Reserv1                                       :0x0
14:41:22: Time Access 1 TAAC                            :0xe
14:41:22: Time Access 2 NSAC*100                        :0x0
14:41:22: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:22: Card Command Classess CCC                     :0x5b5
14:41:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:22: DSR(driver stage register)  DSR_IMP           :0x0
14:41:22: Reserv2                                       :0x0
14:41:22: Device Size C_SIZE                            :0xedc8
14:41:22: Reserv3                                       :0x0
14:41:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:22: Reserv4                                       :0x0
14:41:22: Write Speed Factor R2W_FACTOR                 :0x2
14:41:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:22: FILE_FORMAT_GRP                               :0x0
14:41:22: COPY flag                                     :0x1
14:41:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:22: File_Format                                   :0x0
14:41:22: CRC                                           :0x0
14:41:22: ####CSD Registe Values####  

14:41:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FED1B0>, <py_sfcl.CommandDataDefinition object at 0x0667CDE0>) , Command count = 4336 ] 
14:41:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683210>, <py_sfcl.CommandDataDefinition object at 0x066851B0>) , Command count = 4337 ] 
14:41:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:22: [DVTCommonLib]### Erase :Erase API Called
14:41:22: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x10038 with Blockcount:0x2001
14:41:22: [ EraseLba(0x10038, 0x2001) , Command count = 4338 ] 
14:41:22: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x10038 with Blockcount:0x2001 

14:41:22: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 19
14:41:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x12038 to EndLba:0x12040 with Increment Pattern
14:41:22: [ WrLbaNoData(0x12038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4339 ] 
14:41:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x12038 to EndLba:0x12040 with Increment Pattern 

14:41:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC01E0>, <py_sfcl.CommandDataDefinition object at 0x066831E0>) , Command count = 4340 ] 
14:41:22: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683120>, <py_sfcl.CommandDataDefinition object at 0x066851B0>) , Command count = 4341 ] 
14:41:22: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:22: [DVTCommonLib]###  R1bCommandAbort called
14:41:22: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xC, False) , Command count = 4342 ] 
14:41:22: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:24: Host Frequency set to 25000 KHz
14:41:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:24: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x066834B0>, 0x0, True) , Command count = 4343 ] 
14:41:24: [GO18_globalSetVolt]### Host voltage value is set.
14:41:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x060327E0>, 0x0, False) , Command count = 4344 ] 
14:41:24: [GO18_globalSetVolt]### Host voltage value is set.
14:41:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4345 ] 
14:41:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4346 ] 
14:41:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4347 ] 
14:41:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683C90>, <py_sfcl.CommandDataDefinition object at 0x06683F00>) , Command count = 4348 ] 
14:41:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032840>, <py_sfcl.CommandDataDefinition object at 0x06685210>) , Command count = 4349 ] 
14:41:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:24: [ SetCardRCA(0x1, 0xD555) , Command count = 4350 ] 
14:41:24: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:24: Host Frequency set to 25000 KHz
14:41:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:24: ####CSD Registe 2.0 Values####
14:41:24: CSD_STRUCTURE                                 :0x1
14:41:24: Reserv1                                       :0x0
14:41:24: Time Access 1 TAAC                            :0xe
14:41:24: Time Access 2 NSAC*100                        :0x0
14:41:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:24: Card Command Classess CCC                     :0x5b5
14:41:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:24: DSR(driver stage register)  DSR_IMP           :0x0
14:41:24: Reserv2                                       :0x0
14:41:24: Device Size C_SIZE                            :0xedc8
14:41:24: Reserv3                                       :0x0
14:41:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:24: Reserv4                                       :0x0
14:41:24: Write Speed Factor R2W_FACTOR                 :0x2
14:41:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:24: FILE_FORMAT_GRP                               :0x0
14:41:24: COPY flag                                     :0x1
14:41:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:24: File_Format                                   :0x0
14:41:24: CRC                                           :0x0
14:41:24: ####CSD Registe Values####  

14:41:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:24: [GetSCRRegisterEntry] Passed
14:41:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:24: Data_Status_After Erases          : 0
14:41:24: CPRM Security Support             : No Security
14:41:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:24: Spec. Version                     : Version 3.0X
14:41:24: Extended Security Support         : Extended_Security_Not_Supported
14:41:24: Command Support                   : COMMAND_SUPPORT
14:41:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683B70>, <py_sfcl.CommandDataDefinition object at 0x06685120>) , Command count = 4351 ] 
14:41:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032AE0>, <py_sfcl.CommandDataDefinition object at 0x06666D50>) , Command count = 4352 ] 
14:41:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:24: [ SetBusWidth(0x4) , Command count = 4353 ] 
14:41:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4354 ] 
14:41:24: Protected Area Size 0x28000
14:41:24: Bus Width           2
14:41:24: Secure Mode         0
14:41:24: Speed  Class        4
14:41:24: Perf Move           0
14:41:24: Au Size             9
14:41:24: Erase Size          15
14:41:24: Erase Timeout       1
14:41:24: Erase offset        1
14:41:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4355 ] 
14:41:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:24: Host Frequency set to 100000 KHz
14:41:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:24: ####CSD Registe 2.0 Values####
14:41:24: CSD_STRUCTURE                                 :0x1
14:41:24: Reserv1                                       :0x0
14:41:24: Time Access 1 TAAC                            :0xe
14:41:24: Time Access 2 NSAC*100                        :0x0
14:41:24: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:24: Card Command Classess CCC                     :0x5b5
14:41:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:24: DSR(driver stage register)  DSR_IMP           :0x0
14:41:24: Reserv2                                       :0x0
14:41:24: Device Size C_SIZE                            :0xedc8
14:41:24: Reserv3                                       :0x0
14:41:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:24: Reserv4                                       :0x0
14:41:24: Write Speed Factor R2W_FACTOR                 :0x2
14:41:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:24: FILE_FORMAT_GRP                               :0x0
14:41:24: COPY flag                                     :0x1
14:41:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:24: File_Format                                   :0x0
14:41:24: CRC                                           :0x0
14:41:24: ####CSD Registe Values####  

14:41:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683FC0>, <py_sfcl.CommandDataDefinition object at 0x0667F1B0>) , Command count = 4356 ] 
14:41:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683BD0>, <py_sfcl.CommandDataDefinition object at 0x06685CC0>) , Command count = 4357 ] 
14:41:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:24: [DVTCommonLib]### Erase :Erase API Called
14:41:24: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x12038 with Blockcount:0x2001
14:41:24: [ EraseLba(0x12038, 0x2001) , Command count = 4358 ] 
14:41:24: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x12038 with Blockcount:0x2001 

14:41:24: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 18
14:41:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x14038 to EndLba:0x14040 with Increment Pattern
14:41:24: [ WrLbaNoData(0x14038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4359 ] 
14:41:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x14038 to EndLba:0x14040 with Increment Pattern 

14:41:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDAE40>, <py_sfcl.CommandDataDefinition object at 0x06666B40>) , Command count = 4360 ] 
14:41:24: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FF90>, <py_sfcl.CommandDataDefinition object at 0x06685300>) , Command count = 4361 ] 
14:41:24: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:24: [DVTCommonLib]###  R1bCommandAbort called
14:41:25: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1D, False) , Command count = 4362 ] 
14:41:25: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:25: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:27: Host Frequency set to 25000 KHz
14:41:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683660>, 0x0, True) , Command count = 4363 ] 
14:41:27: [GO18_globalSetVolt]### Host voltage value is set.
14:41:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB210>, 0x0, False) , Command count = 4364 ] 
14:41:27: [GO18_globalSetVolt]### Host voltage value is set.
14:41:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4365 ] 
14:41:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4366 ] 
14:41:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4367 ] 
14:41:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEDAE0>, <py_sfcl.CommandDataDefinition object at 0x06666570>) , Command count = 4368 ] 
14:41:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F030>, <py_sfcl.CommandDataDefinition object at 0x06685B40>) , Command count = 4369 ] 
14:41:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:27: [ SetCardRCA(0x1, 0xD555) , Command count = 4370 ] 
14:41:27: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:27: Host Frequency set to 25000 KHz
14:41:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:27: ####CSD Registe 2.0 Values####
14:41:27: CSD_STRUCTURE                                 :0x1
14:41:27: Reserv1                                       :0x0
14:41:27: Time Access 1 TAAC                            :0xe
14:41:27: Time Access 2 NSAC*100                        :0x0
14:41:27: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:27: Card Command Classess CCC                     :0x5b5
14:41:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:27: DSR(driver stage register)  DSR_IMP           :0x0
14:41:27: Reserv2                                       :0x0
14:41:27: Device Size C_SIZE                            :0xedc8
14:41:27: Reserv3                                       :0x0
14:41:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:27: Reserv4                                       :0x0
14:41:27: Write Speed Factor R2W_FACTOR                 :0x2
14:41:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:27: FILE_FORMAT_GRP                               :0x0
14:41:27: COPY flag                                     :0x1
14:41:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:27: File_Format                                   :0x0
14:41:27: CRC                                           :0x0
14:41:27: ####CSD Registe Values####  

14:41:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:27: [GetSCRRegisterEntry] Passed
14:41:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:27: Data_Status_After Erases          : 0
14:41:27: CPRM Security Support             : No Security
14:41:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:27: Spec. Version                     : Version 3.0X
14:41:27: Extended Security Support         : Extended_Security_Not_Supported
14:41:27: Command Support                   : COMMAND_SUPPORT
14:41:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683300>, <py_sfcl.CommandDataDefinition object at 0x066850F0>) , Command count = 4371 ] 
14:41:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666390>, <py_sfcl.CommandDataDefinition object at 0x066669C0>) , Command count = 4372 ] 
14:41:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:27: [ SetBusWidth(0x4) , Command count = 4373 ] 
14:41:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06666E10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4374 ] 
14:41:27: Protected Area Size 0x28000
14:41:27: Bus Width           2
14:41:27: Secure Mode         0
14:41:27: Speed  Class        4
14:41:27: Perf Move           0
14:41:27: Au Size             9
14:41:27: Erase Size          15
14:41:27: Erase Timeout       1
14:41:27: Erase offset        1
14:41:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4375 ] 
14:41:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:27: Host Frequency set to 100000 KHz
14:41:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:27: ####CSD Registe 2.0 Values####
14:41:27: CSD_STRUCTURE                                 :0x1
14:41:27: Reserv1                                       :0x0
14:41:27: Time Access 1 TAAC                            :0xe
14:41:27: Time Access 2 NSAC*100                        :0x0
14:41:27: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:27: Card Command Classess CCC                     :0x5b5
14:41:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:27: DSR(driver stage register)  DSR_IMP           :0x0
14:41:27: Reserv2                                       :0x0
14:41:27: Device Size C_SIZE                            :0xedc8
14:41:27: Reserv3                                       :0x0
14:41:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:27: Reserv4                                       :0x0
14:41:27: Write Speed Factor R2W_FACTOR                 :0x2
14:41:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:27: FILE_FORMAT_GRP                               :0x0
14:41:27: COPY flag                                     :0x1
14:41:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:27: File_Format                                   :0x0
14:41:27: CRC                                           :0x0
14:41:27: ####CSD Registe Values####  

14:41:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDAC90>, <py_sfcl.CommandDataDefinition object at 0x06666A80>) , Command count = 4376 ] 
14:41:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683CC0>, <py_sfcl.CommandDataDefinition object at 0x06685240>) , Command count = 4377 ] 
14:41:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:27: [DVTCommonLib]### Erase :Erase API Called
14:41:27: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x14038 with Blockcount:0x2001
14:41:27: [ EraseLba(0x14038, 0x2001) , Command count = 4378 ] 
14:41:27: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x14038 with Blockcount:0x2001 

14:41:27: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 17
14:41:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x16038 to EndLba:0x16040 with Increment Pattern
14:41:27: [ WrLbaNoData(0x16038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4379 ] 
14:41:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x16038 to EndLba:0x16040 with Increment Pattern 

14:41:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065724B0>, <py_sfcl.CommandDataDefinition object at 0x06683930>) , Command count = 4380 ] 
14:41:27: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683750>, <py_sfcl.CommandDataDefinition object at 0x06685240>) , Command count = 4381 ] 
14:41:27: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:27: [DVTCommonLib]###  R1bCommandAbort called
14:41:27: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2F, False) , Command count = 4382 ] 
14:41:27: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:29: Host Frequency set to 25000 KHz
14:41:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683720>, 0x0, True) , Command count = 4383 ] 
14:41:29: [GO18_globalSetVolt]### Host voltage value is set.
14:41:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x065721E0>, 0x0, False) , Command count = 4384 ] 
14:41:29: [GO18_globalSetVolt]### Host voltage value is set.
14:41:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4385 ] 
14:41:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4386 ] 
14:41:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4387 ] 
14:41:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032AB0>, <py_sfcl.CommandDataDefinition object at 0x0667A3F0>) , Command count = 4388 ] 
14:41:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6F30>, <py_sfcl.CommandDataDefinition object at 0x06685510>) , Command count = 4389 ] 
14:41:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:30: [ SetCardRCA(0x1, 0xD555) , Command count = 4390 ] 
14:41:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:30: Host Frequency set to 25000 KHz
14:41:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:30: ####CSD Registe 2.0 Values####
14:41:30: CSD_STRUCTURE                                 :0x1
14:41:30: Reserv1                                       :0x0
14:41:30: Time Access 1 TAAC                            :0xe
14:41:30: Time Access 2 NSAC*100                        :0x0
14:41:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:30: Card Command Classess CCC                     :0x5b5
14:41:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:30: DSR(driver stage register)  DSR_IMP           :0x0
14:41:30: Reserv2                                       :0x0
14:41:30: Device Size C_SIZE                            :0xedc8
14:41:30: Reserv3                                       :0x0
14:41:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:30: Reserv4                                       :0x0
14:41:30: Write Speed Factor R2W_FACTOR                 :0x2
14:41:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:30: FILE_FORMAT_GRP                               :0x0
14:41:30: COPY flag                                     :0x1
14:41:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:30: File_Format                                   :0x0
14:41:30: CRC                                           :0x0
14:41:30: ####CSD Registe Values####  

14:41:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:30: [GetSCRRegisterEntry] Passed
14:41:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:30: Data_Status_After Erases          : 0
14:41:30: CPRM Security Support             : No Security
14:41:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:30: Spec. Version                     : Version 3.0X
14:41:30: Extended Security Support         : Extended_Security_Not_Supported
14:41:30: Command Support                   : COMMAND_SUPPORT
14:41:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066831B0>, <py_sfcl.CommandDataDefinition object at 0x06666E70>) , Command count = 4391 ] 
14:41:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572A20>, <py_sfcl.CommandDataDefinition object at 0x0667A150>) , Command count = 4392 ] 
14:41:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:30: [ SetBusWidth(0x4) , Command count = 4393 ] 
14:41:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066AB300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4394 ] 
14:41:30: Protected Area Size 0x28000
14:41:30: Bus Width           2
14:41:30: Secure Mode         0
14:41:30: Speed  Class        4
14:41:30: Perf Move           0
14:41:30: Au Size             9
14:41:30: Erase Size          15
14:41:30: Erase Timeout       1
14:41:30: Erase offset        1
14:41:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4395 ] 
14:41:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:30: Host Frequency set to 100000 KHz
14:41:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:30: ####CSD Registe 2.0 Values####
14:41:30: CSD_STRUCTURE                                 :0x1
14:41:30: Reserv1                                       :0x0
14:41:30: Time Access 1 TAAC                            :0xe
14:41:30: Time Access 2 NSAC*100                        :0x0
14:41:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:30: Card Command Classess CCC                     :0x5b5
14:41:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:30: DSR(driver stage register)  DSR_IMP           :0x0
14:41:30: Reserv2                                       :0x0
14:41:30: Device Size C_SIZE                            :0xedc8
14:41:30: Reserv3                                       :0x0
14:41:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:30: Reserv4                                       :0x0
14:41:30: Write Speed Factor R2W_FACTOR                 :0x2
14:41:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:30: FILE_FORMAT_GRP                               :0x0
14:41:30: COPY flag                                     :0x1
14:41:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:30: File_Format                                   :0x0
14:41:30: CRC                                           :0x0
14:41:30: ####CSD Registe Values####  

14:41:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572300>, <py_sfcl.CommandDataDefinition object at 0x06683F90>) , Command count = 4396 ] 
14:41:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06685BA0>, <py_sfcl.CommandDataDefinition object at 0x06685690>) , Command count = 4397 ] 
14:41:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:30: [DVTCommonLib]### Erase :Erase API Called
14:41:30: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x16038 with Blockcount:0x2001
14:41:30: [ EraseLba(0x16038, 0x2001) , Command count = 4398 ] 
14:41:30: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x16038 with Blockcount:0x2001 

14:41:30: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 16
14:41:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x18038 to EndLba:0x18040 with Increment Pattern
14:41:30: [ WrLbaNoData(0x18038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4399 ] 
14:41:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x18038 to EndLba:0x18040 with Increment Pattern 

14:41:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E5BDB0>, <py_sfcl.CommandDataDefinition object at 0x0667A120>) , Command count = 4400 ] 
14:41:30: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683ED0>, <py_sfcl.CommandDataDefinition object at 0x06685690>) , Command count = 4401 ] 
14:41:30: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:30: [DVTCommonLib]###  R1bCommandAbort called
14:41:30: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1F, False) , Command count = 4402 ] 
14:41:30: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:32: Host Frequency set to 25000 KHz
14:41:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:32: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683030>, 0x0, True) , Command count = 4403 ] 
14:41:32: [GO18_globalSetVolt]### Host voltage value is set.
14:41:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABED0>, 0x0, False) , Command count = 4404 ] 
14:41:32: [GO18_globalSetVolt]### Host voltage value is set.
14:41:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4405 ] 
14:41:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4406 ] 
14:41:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4407 ] 
14:41:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB240>, <py_sfcl.CommandDataDefinition object at 0x066AB420>) , Command count = 4408 ] 
14:41:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666960>, <py_sfcl.CommandDataDefinition object at 0x0667A300>) , Command count = 4409 ] 
14:41:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:32: [ SetCardRCA(0x1, 0xD555) , Command count = 4410 ] 
14:41:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:33: Host Frequency set to 25000 KHz
14:41:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:33: ####CSD Registe 2.0 Values####
14:41:33: CSD_STRUCTURE                                 :0x1
14:41:33: Reserv1                                       :0x0
14:41:33: Time Access 1 TAAC                            :0xe
14:41:33: Time Access 2 NSAC*100                        :0x0
14:41:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:33: Card Command Classess CCC                     :0x5b5
14:41:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:33: DSR(driver stage register)  DSR_IMP           :0x0
14:41:33: Reserv2                                       :0x0
14:41:33: Device Size C_SIZE                            :0xedc8
14:41:33: Reserv3                                       :0x0
14:41:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:33: Reserv4                                       :0x0
14:41:33: Write Speed Factor R2W_FACTOR                 :0x2
14:41:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:33: FILE_FORMAT_GRP                               :0x0
14:41:33: COPY flag                                     :0x1
14:41:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:33: File_Format                                   :0x0
14:41:33: CRC                                           :0x0
14:41:33: ####CSD Registe Values####  

14:41:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:33: [GetSCRRegisterEntry] Passed
14:41:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:33: Data_Status_After Erases          : 0
14:41:33: CPRM Security Support             : No Security
14:41:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:33: Spec. Version                     : Version 3.0X
14:41:33: Extended Security Support         : Extended_Security_Not_Supported
14:41:33: Command Support                   : COMMAND_SUPPORT
14:41:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB180>, <py_sfcl.CommandDataDefinition object at 0x0667A2A0>) , Command count = 4411 ] 
14:41:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666D80>, <py_sfcl.CommandDataDefinition object at 0x06666870>) , Command count = 4412 ] 
14:41:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:33: [ SetBusWidth(0x4) , Command count = 4413 ] 
14:41:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A060>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4414 ] 
14:41:33: Protected Area Size 0x28000
14:41:33: Bus Width           2
14:41:33: Secure Mode         0
14:41:33: Speed  Class        4
14:41:33: Perf Move           0
14:41:33: Au Size             9
14:41:33: Erase Size          15
14:41:33: Erase Timeout       1
14:41:33: Erase offset        1
14:41:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4415 ] 
14:41:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:33: Host Frequency set to 100000 KHz
14:41:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:33: ####CSD Registe 2.0 Values####
14:41:33: CSD_STRUCTURE                                 :0x1
14:41:33: Reserv1                                       :0x0
14:41:33: Time Access 1 TAAC                            :0xe
14:41:33: Time Access 2 NSAC*100                        :0x0
14:41:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:33: Card Command Classess CCC                     :0x5b5
14:41:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:33: DSR(driver stage register)  DSR_IMP           :0x0
14:41:33: Reserv2                                       :0x0
14:41:33: Device Size C_SIZE                            :0xedc8
14:41:33: Reserv3                                       :0x0
14:41:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:33: Reserv4                                       :0x0
14:41:33: Write Speed Factor R2W_FACTOR                 :0x2
14:41:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:33: FILE_FORMAT_GRP                               :0x0
14:41:33: COPY flag                                     :0x1
14:41:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:33: File_Format                                   :0x0
14:41:33: CRC                                           :0x0
14:41:33: ####CSD Registe Values####  

14:41:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB690>, <py_sfcl.CommandDataDefinition object at 0x0667A840>) , Command count = 4416 ] 
14:41:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666FC0>, <py_sfcl.CommandDataDefinition object at 0x06685E10>) , Command count = 4417 ] 
14:41:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:33: [DVTCommonLib]### Erase :Erase API Called
14:41:33: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x18038 with Blockcount:0x2001
14:41:33: [ EraseLba(0x18038, 0x2001) , Command count = 4418 ] 
14:41:33: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x18038 with Blockcount:0x2001 

14:41:33: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 15
14:41:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1A038 to EndLba:0x1A040 with Increment Pattern
14:41:33: [ WrLbaNoData(0x1A038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4419 ] 
14:41:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1A038 to EndLba:0x1A040 with Increment Pattern 

14:41:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABDB0>, <py_sfcl.CommandDataDefinition object at 0x06666B70>) , Command count = 4420 ] 
14:41:33: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0602BAB0>, <py_sfcl.CommandDataDefinition object at 0x06685E10>) , Command count = 4421 ] 
14:41:33: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:33: [DVTCommonLib]###  R1bCommandAbort called
14:41:33: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2C, False) , Command count = 4422 ] 
14:41:33: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:33: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:35: Host Frequency set to 25000 KHz
14:41:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x066666F0>, 0x0, True) , Command count = 4423 ] 
14:41:35: [GO18_globalSetVolt]### Host voltage value is set.
14:41:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667A960>, 0x0, False) , Command count = 4424 ] 
14:41:35: [GO18_globalSetVolt]### Host voltage value is set.
14:41:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4425 ] 
14:41:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4426 ] 
14:41:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4427 ] 
14:41:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB2D0>, <py_sfcl.CommandDataDefinition object at 0x0667A720>) , Command count = 4428 ] 
14:41:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032A80>, <py_sfcl.CommandDataDefinition object at 0x06685E10>) , Command count = 4429 ] 
14:41:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:35: [ SetCardRCA(0x1, 0xD555) , Command count = 4430 ] 
14:41:35: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:35: Host Frequency set to 25000 KHz
14:41:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:35: ####CSD Registe 2.0 Values####
14:41:35: CSD_STRUCTURE                                 :0x1
14:41:35: Reserv1                                       :0x0
14:41:35: Time Access 1 TAAC                            :0xe
14:41:35: Time Access 2 NSAC*100                        :0x0
14:41:35: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:35: Card Command Classess CCC                     :0x5b5
14:41:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:35: DSR(driver stage register)  DSR_IMP           :0x0
14:41:35: Reserv2                                       :0x0
14:41:35: Device Size C_SIZE                            :0xedc8
14:41:35: Reserv3                                       :0x0
14:41:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:35: Reserv4                                       :0x0
14:41:35: Write Speed Factor R2W_FACTOR                 :0x2
14:41:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:35: FILE_FORMAT_GRP                               :0x0
14:41:35: COPY flag                                     :0x1
14:41:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:35: File_Format                                   :0x0
14:41:35: CRC                                           :0x0
14:41:35: ####CSD Registe Values####  

14:41:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:35: [GetSCRRegisterEntry] Passed
14:41:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:35: Data_Status_After Erases          : 0
14:41:35: CPRM Security Support             : No Security
14:41:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:35: Spec. Version                     : Version 3.0X
14:41:35: Extended Security Support         : Extended_Security_Not_Supported
14:41:35: Command Support                   : COMMAND_SUPPORT
14:41:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666DE0>, <py_sfcl.CommandDataDefinition object at 0x0667A8A0>) , Command count = 4431 ] 
14:41:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FDB0>, <py_sfcl.CommandDataDefinition object at 0x0667AB10>) , Command count = 4432 ] 
14:41:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:35: [ SetBusWidth(0x4) , Command count = 4433 ] 
14:41:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667AF60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4434 ] 
14:41:35: Protected Area Size 0x28000
14:41:35: Bus Width           2
14:41:35: Secure Mode         0
14:41:35: Speed  Class        4
14:41:35: Perf Move           0
14:41:35: Au Size             9
14:41:35: Erase Size          15
14:41:35: Erase Timeout       1
14:41:35: Erase offset        1
14:41:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4435 ] 
14:41:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:36: Host Frequency set to 100000 KHz
14:41:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:36: ####CSD Registe 2.0 Values####
14:41:36: CSD_STRUCTURE                                 :0x1
14:41:36: Reserv1                                       :0x0
14:41:36: Time Access 1 TAAC                            :0xe
14:41:36: Time Access 2 NSAC*100                        :0x0
14:41:36: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:36: Card Command Classess CCC                     :0x5b5
14:41:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:36: DSR(driver stage register)  DSR_IMP           :0x0
14:41:36: Reserv2                                       :0x0
14:41:36: Device Size C_SIZE                            :0xedc8
14:41:36: Reserv3                                       :0x0
14:41:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:36: Reserv4                                       :0x0
14:41:36: Write Speed Factor R2W_FACTOR                 :0x2
14:41:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:36: FILE_FORMAT_GRP                               :0x0
14:41:36: COPY flag                                     :0x1
14:41:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:36: File_Format                                   :0x0
14:41:36: CRC                                           :0x0
14:41:36: ####CSD Registe Values####  

14:41:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB9F0>, <py_sfcl.CommandDataDefinition object at 0x0667A060>) , Command count = 4436 ] 
14:41:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666840>, <py_sfcl.CommandDataDefinition object at 0x066850C0>) , Command count = 4437 ] 
14:41:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:36: [DVTCommonLib]### Erase :Erase API Called
14:41:36: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1A038 with Blockcount:0x2001
14:41:36: [ EraseLba(0x1A038, 0x2001) , Command count = 4438 ] 
14:41:36: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1A038 with Blockcount:0x2001 

14:41:36: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 14
14:41:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1C038 to EndLba:0x1C040 with Increment Pattern
14:41:36: [ WrLbaNoData(0x1C038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4439 ] 
14:41:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1C038 to EndLba:0x1C040 with Increment Pattern 

14:41:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE10>, <py_sfcl.CommandDataDefinition object at 0x0667AB40>) , Command count = 4440 ] 
14:41:36: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032B70>, <py_sfcl.CommandDataDefinition object at 0x0667A030>) , Command count = 4441 ] 
14:41:36: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:36: [DVTCommonLib]###  R1bCommandAbort called
14:41:36: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x15, False) , Command count = 4442 ] 
14:41:36: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:36: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:38: Host Frequency set to 25000 KHz
14:41:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:38: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x066ABF90>, 0x0, True) , Command count = 4443 ] 
14:41:38: [GO18_globalSetVolt]### Host voltage value is set.
14:41:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C0F0>, 0x0, False) , Command count = 4444 ] 
14:41:38: [GO18_globalSetVolt]### Host voltage value is set.
14:41:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4445 ] 
14:41:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4446 ] 
14:41:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4447 ] 
14:41:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C2D0>, <py_sfcl.CommandDataDefinition object at 0x0667A630>) , Command count = 4448 ] 
14:41:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C030>, <py_sfcl.CommandDataDefinition object at 0x0667A360>) , Command count = 4449 ] 
14:41:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:38: [ SetCardRCA(0x1, 0xD555) , Command count = 4450 ] 
14:41:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:38: Host Frequency set to 25000 KHz
14:41:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:38: ####CSD Registe 2.0 Values####
14:41:38: CSD_STRUCTURE                                 :0x1
14:41:38: Reserv1                                       :0x0
14:41:38: Time Access 1 TAAC                            :0xe
14:41:38: Time Access 2 NSAC*100                        :0x0
14:41:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:38: Card Command Classess CCC                     :0x5b5
14:41:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:38: DSR(driver stage register)  DSR_IMP           :0x0
14:41:38: Reserv2                                       :0x0
14:41:38: Device Size C_SIZE                            :0xedc8
14:41:38: Reserv3                                       :0x0
14:41:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:38: Reserv4                                       :0x0
14:41:38: Write Speed Factor R2W_FACTOR                 :0x2
14:41:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:38: FILE_FORMAT_GRP                               :0x0
14:41:38: COPY flag                                     :0x1
14:41:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:38: File_Format                                   :0x0
14:41:38: CRC                                           :0x0
14:41:38: ####CSD Registe Values####  

14:41:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:38: [GetSCRRegisterEntry] Passed
14:41:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:38: Data_Status_After Erases          : 0
14:41:38: CPRM Security Support             : No Security
14:41:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:38: Spec. Version                     : Version 3.0X
14:41:38: Extended Security Support         : Extended_Security_Not_Supported
14:41:38: Command Support                   : COMMAND_SUPPORT
14:41:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB2A0>, <py_sfcl.CommandDataDefinition object at 0x0667CB40>) , Command count = 4451 ] 
14:41:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF00>, <py_sfcl.CommandDataDefinition object at 0x0667C1E0>) , Command count = 4452 ] 
14:41:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:38: [ SetBusWidth(0x4) , Command count = 4453 ] 
14:41:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C270>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4454 ] 
14:41:38: Protected Area Size 0x28000
14:41:38: Bus Width           2
14:41:38: Secure Mode         0
14:41:38: Speed  Class        4
14:41:38: Perf Move           0
14:41:38: Au Size             9
14:41:38: Erase Size          15
14:41:38: Erase Timeout       1
14:41:38: Erase offset        1
14:41:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4455 ] 
14:41:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:38: Host Frequency set to 100000 KHz
14:41:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:38: ####CSD Registe 2.0 Values####
14:41:38: CSD_STRUCTURE                                 :0x1
14:41:38: Reserv1                                       :0x0
14:41:38: Time Access 1 TAAC                            :0xe
14:41:38: Time Access 2 NSAC*100                        :0x0
14:41:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:38: Card Command Classess CCC                     :0x5b5
14:41:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:38: DSR(driver stage register)  DSR_IMP           :0x0
14:41:38: Reserv2                                       :0x0
14:41:38: Device Size C_SIZE                            :0xedc8
14:41:38: Reserv3                                       :0x0
14:41:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:38: Reserv4                                       :0x0
14:41:38: Write Speed Factor R2W_FACTOR                 :0x2
14:41:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:38: FILE_FORMAT_GRP                               :0x0
14:41:38: COPY flag                                     :0x1
14:41:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:38: File_Format                                   :0x0
14:41:38: CRC                                           :0x0
14:41:38: ####CSD Registe Values####  

14:41:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A540>, <py_sfcl.CommandDataDefinition object at 0x0667AF60>) , Command count = 4456 ] 
14:41:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066662D0>, <py_sfcl.CommandDataDefinition object at 0x06685270>) , Command count = 4457 ] 
14:41:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:38: [DVTCommonLib]### Erase :Erase API Called
14:41:38: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1C038 with Blockcount:0x2001
14:41:38: [ EraseLba(0x1C038, 0x2001) , Command count = 4458 ] 
14:41:38: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1C038 with Blockcount:0x2001 

14:41:38: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 13
14:41:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1E038 to EndLba:0x1E040 with Increment Pattern
14:41:38: [ WrLbaNoData(0x1E038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4459 ] 
14:41:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1E038 to EndLba:0x1E040 with Increment Pattern 

14:41:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066668A0>, <py_sfcl.CommandDataDefinition object at 0x06666090>) , Command count = 4460 ] 
14:41:38: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABF60>, <py_sfcl.CommandDataDefinition object at 0x0667C3C0>) , Command count = 4461 ] 
14:41:38: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:38: [DVTCommonLib]###  R1bCommandAbort called
14:41:39: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1B, False) , Command count = 4462 ] 
14:41:39: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:41: Host Frequency set to 25000 KHz
14:41:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666660>, 0x0, True) , Command count = 4463 ] 
14:41:41: [GO18_globalSetVolt]### Host voltage value is set.
14:41:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C480>, 0x0, False) , Command count = 4464 ] 
14:41:41: [GO18_globalSetVolt]### Host voltage value is set.
14:41:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4465 ] 
14:41:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4466 ] 
14:41:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4467 ] 
14:41:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683A20>, <py_sfcl.CommandDataDefinition object at 0x066AB360>) , Command count = 4468 ] 
14:41:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AFC0>, <py_sfcl.CommandDataDefinition object at 0x0667A4B0>) , Command count = 4469 ] 
14:41:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:41: [ SetCardRCA(0x1, 0xD555) , Command count = 4470 ] 
14:41:41: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:41: Host Frequency set to 25000 KHz
14:41:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:41: ####CSD Registe 2.0 Values####
14:41:41: CSD_STRUCTURE                                 :0x1
14:41:41: Reserv1                                       :0x0
14:41:41: Time Access 1 TAAC                            :0xe
14:41:41: Time Access 2 NSAC*100                        :0x0
14:41:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:41: Card Command Classess CCC                     :0x5b5
14:41:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:41: DSR(driver stage register)  DSR_IMP           :0x0
14:41:41: Reserv2                                       :0x0
14:41:41: Device Size C_SIZE                            :0xedc8
14:41:41: Reserv3                                       :0x0
14:41:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:41: Reserv4                                       :0x0
14:41:41: Write Speed Factor R2W_FACTOR                 :0x2
14:41:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:41: FILE_FORMAT_GRP                               :0x0
14:41:41: COPY flag                                     :0x1
14:41:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:41: File_Format                                   :0x0
14:41:41: CRC                                           :0x0
14:41:41: ####CSD Registe Values####  

14:41:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:41: [GetSCRRegisterEntry] Passed
14:41:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:41: Data_Status_After Erases          : 0
14:41:41: CPRM Security Support             : No Security
14:41:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:41: Spec. Version                     : Version 3.0X
14:41:41: Extended Security Support         : Extended_Security_Not_Supported
14:41:41: Command Support                   : COMMAND_SUPPORT
14:41:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066663F0>, <py_sfcl.CommandDataDefinition object at 0x0667C540>) , Command count = 4471 ] 
14:41:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CA80>, <py_sfcl.CommandDataDefinition object at 0x0667C060>) , Command count = 4472 ] 
14:41:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:41: [ SetBusWidth(0x4) , Command count = 4473 ] 
14:41:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C9C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4474 ] 
14:41:41: Protected Area Size 0x28000
14:41:41: Bus Width           2
14:41:41: Secure Mode         0
14:41:41: Speed  Class        4
14:41:41: Perf Move           0
14:41:41: Au Size             9
14:41:41: Erase Size          15
14:41:41: Erase Timeout       1
14:41:41: Erase offset        1
14:41:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4475 ] 
14:41:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:41: Host Frequency set to 100000 KHz
14:41:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:41: ####CSD Registe 2.0 Values####
14:41:41: CSD_STRUCTURE                                 :0x1
14:41:41: Reserv1                                       :0x0
14:41:41: Time Access 1 TAAC                            :0xe
14:41:41: Time Access 2 NSAC*100                        :0x0
14:41:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:41: Card Command Classess CCC                     :0x5b5
14:41:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:41: DSR(driver stage register)  DSR_IMP           :0x0
14:41:41: Reserv2                                       :0x0
14:41:41: Device Size C_SIZE                            :0xedc8
14:41:41: Reserv3                                       :0x0
14:41:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:41: Reserv4                                       :0x0
14:41:41: Write Speed Factor R2W_FACTOR                 :0x2
14:41:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:41: FILE_FORMAT_GRP                               :0x0
14:41:41: COPY flag                                     :0x1
14:41:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:41: File_Format                                   :0x0
14:41:41: CRC                                           :0x0
14:41:41: ####CSD Registe Values####  

14:41:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C330>, <py_sfcl.CommandDataDefinition object at 0x0667C690>) , Command count = 4476 ] 
14:41:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066666C0>, <py_sfcl.CommandDataDefinition object at 0x066851E0>) , Command count = 4477 ] 
14:41:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:41: [DVTCommonLib]### Erase :Erase API Called
14:41:41: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x1E038 with Blockcount:0x2001
14:41:41: [ EraseLba(0x1E038, 0x2001) , Command count = 4478 ] 
14:41:41: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x1E038 with Blockcount:0x2001 

14:41:41: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 12
14:41:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x20038 to EndLba:0x20040 with Increment Pattern
14:41:41: [ WrLbaNoData(0x20038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4479 ] 
14:41:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x20038 to EndLba:0x20040 with Increment Pattern 

14:41:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CB70>, <py_sfcl.CommandDataDefinition object at 0x0667CBD0>) , Command count = 4480 ] 
14:41:41: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB7B0>, <py_sfcl.CommandDataDefinition object at 0x066851E0>) , Command count = 4481 ] 
14:41:41: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:41: [DVTCommonLib]###  R1bCommandAbort called
14:41:41: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x23, False) , Command count = 4482 ] 
14:41:41: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:43: Host Frequency set to 25000 KHz
14:41:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB5D0>, 0x0, True) , Command count = 4483 ] 
14:41:43: [GO18_globalSetVolt]### Host voltage value is set.
14:41:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F420>, 0x0, False) , Command count = 4484 ] 
14:41:43: [GO18_globalSetVolt]### Host voltage value is set.
14:41:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4485 ] 
14:41:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4486 ] 
14:41:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4487 ] 
14:41:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A660>, <py_sfcl.CommandDataDefinition object at 0x0667CC90>) , Command count = 4488 ] 
14:41:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F060>, <py_sfcl.CommandDataDefinition object at 0x0667C8A0>) , Command count = 4489 ] 
14:41:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:44: [ SetCardRCA(0x1, 0xD555) , Command count = 4490 ] 
14:41:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:44: Host Frequency set to 25000 KHz
14:41:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:44: ####CSD Registe 2.0 Values####
14:41:44: CSD_STRUCTURE                                 :0x1
14:41:44: Reserv1                                       :0x0
14:41:44: Time Access 1 TAAC                            :0xe
14:41:44: Time Access 2 NSAC*100                        :0x0
14:41:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:44: Card Command Classess CCC                     :0x5b5
14:41:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:44: DSR(driver stage register)  DSR_IMP           :0x0
14:41:44: Reserv2                                       :0x0
14:41:44: Device Size C_SIZE                            :0xedc8
14:41:44: Reserv3                                       :0x0
14:41:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:44: Reserv4                                       :0x0
14:41:44: Write Speed Factor R2W_FACTOR                 :0x2
14:41:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:44: FILE_FORMAT_GRP                               :0x0
14:41:44: COPY flag                                     :0x1
14:41:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:44: File_Format                                   :0x0
14:41:44: CRC                                           :0x0
14:41:44: ####CSD Registe Values####  

14:41:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:44: [GetSCRRegisterEntry] Passed
14:41:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:44: Data_Status_After Erases          : 0
14:41:44: CPRM Security Support             : No Security
14:41:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:44: Spec. Version                     : Version 3.0X
14:41:44: Extended Security Support         : Extended_Security_Not_Supported
14:41:44: Command Support                   : COMMAND_SUPPORT
14:41:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A8D0>, <py_sfcl.CommandDataDefinition object at 0x0667A420>) , Command count = 4491 ] 
14:41:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F180>, <py_sfcl.CommandDataDefinition object at 0x0667FB10>) , Command count = 4492 ] 
14:41:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:44: [ SetBusWidth(0x4) , Command count = 4493 ] 
14:41:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4494 ] 
14:41:44: Protected Area Size 0x28000
14:41:44: Bus Width           2
14:41:44: Secure Mode         0
14:41:44: Speed  Class        4
14:41:44: Perf Move           0
14:41:44: Au Size             9
14:41:44: Erase Size          15
14:41:44: Erase Timeout       1
14:41:44: Erase offset        1
14:41:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4495 ] 
14:41:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:44: Host Frequency set to 100000 KHz
14:41:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:44: ####CSD Registe 2.0 Values####
14:41:44: CSD_STRUCTURE                                 :0x1
14:41:44: Reserv1                                       :0x0
14:41:44: Time Access 1 TAAC                            :0xe
14:41:44: Time Access 2 NSAC*100                        :0x0
14:41:44: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:44: Card Command Classess CCC                     :0x5b5
14:41:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:44: DSR(driver stage register)  DSR_IMP           :0x0
14:41:44: Reserv2                                       :0x0
14:41:44: Device Size C_SIZE                            :0xedc8
14:41:44: Reserv3                                       :0x0
14:41:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:44: Reserv4                                       :0x0
14:41:44: Write Speed Factor R2W_FACTOR                 :0x2
14:41:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:44: FILE_FORMAT_GRP                               :0x0
14:41:44: COPY flag                                     :0x1
14:41:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:44: File_Format                                   :0x0
14:41:44: CRC                                           :0x0
14:41:44: ####CSD Registe Values####  

14:41:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C240>, <py_sfcl.CommandDataDefinition object at 0x0667CE40>) , Command count = 4496 ] 
14:41:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A0C0>, <py_sfcl.CommandDataDefinition object at 0x06685B10>) , Command count = 4497 ] 
14:41:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:44: [DVTCommonLib]### Erase :Erase API Called
14:41:44: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x20038 with Blockcount:0x2001
14:41:44: [ EraseLba(0x20038, 0x2001) , Command count = 4498 ] 
14:41:44: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x20038 with Blockcount:0x2001 

14:41:44: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 11
14:41:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x22038 to EndLba:0x22040 with Increment Pattern
14:41:44: [ WrLbaNoData(0x22038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4499 ] 
14:41:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x22038 to EndLba:0x22040 with Increment Pattern 

14:41:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A3C0>, <py_sfcl.CommandDataDefinition object at 0x0667CAB0>) , Command count = 4500 ] 
14:41:44: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C7B0>, <py_sfcl.CommandDataDefinition object at 0x0667F150>) , Command count = 4501 ] 
14:41:44: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:44: [DVTCommonLib]###  R1bCommandAbort called
14:41:44: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x30, False) , Command count = 4502 ] 
14:41:44: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:44: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:46: Host Frequency set to 25000 KHz
14:41:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:46: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667C150>, 0x0, True) , Command count = 4503 ] 
14:41:46: [GO18_globalSetVolt]### Host voltage value is set.
14:41:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F840>, 0x0, False) , Command count = 4504 ] 
14:41:46: [GO18_globalSetVolt]### Host voltage value is set.
14:41:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4505 ] 
14:41:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4506 ] 
14:41:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4507 ] 
14:41:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F450>, <py_sfcl.CommandDataDefinition object at 0x0667F6F0>) , Command count = 4508 ] 
14:41:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AEA0>, <py_sfcl.CommandDataDefinition object at 0x0667ABD0>) , Command count = 4509 ] 
14:41:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:46: [ SetCardRCA(0x1, 0xD555) , Command count = 4510 ] 
14:41:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:47: Host Frequency set to 25000 KHz
14:41:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:47: ####CSD Registe 2.0 Values####
14:41:47: CSD_STRUCTURE                                 :0x1
14:41:47: Reserv1                                       :0x0
14:41:47: Time Access 1 TAAC                            :0xe
14:41:47: Time Access 2 NSAC*100                        :0x0
14:41:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:47: Card Command Classess CCC                     :0x5b5
14:41:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:47: DSR(driver stage register)  DSR_IMP           :0x0
14:41:47: Reserv2                                       :0x0
14:41:47: Device Size C_SIZE                            :0xedc8
14:41:47: Reserv3                                       :0x0
14:41:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:47: Reserv4                                       :0x0
14:41:47: Write Speed Factor R2W_FACTOR                 :0x2
14:41:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:47: FILE_FORMAT_GRP                               :0x0
14:41:47: COPY flag                                     :0x1
14:41:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:47: File_Format                                   :0x0
14:41:47: CRC                                           :0x0
14:41:47: ####CSD Registe Values####  

14:41:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:47: [GetSCRRegisterEntry] Passed
14:41:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:47: Data_Status_After Erases          : 0
14:41:47: CPRM Security Support             : No Security
14:41:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:47: Spec. Version                     : Version 3.0X
14:41:47: Extended Security Support         : Extended_Security_Not_Supported
14:41:47: Command Support                   : COMMAND_SUPPORT
14:41:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB660>, <py_sfcl.CommandDataDefinition object at 0x0667CEA0>) , Command count = 4511 ] 
14:41:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F9C0>, <py_sfcl.CommandDataDefinition object at 0x0667C5A0>) , Command count = 4512 ] 
14:41:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:47: [ SetBusWidth(0x4) , Command count = 4513 ] 
14:41:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667C930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4514 ] 
14:41:47: Protected Area Size 0x28000
14:41:47: Bus Width           2
14:41:47: Secure Mode         0
14:41:47: Speed  Class        4
14:41:47: Perf Move           0
14:41:47: Au Size             9
14:41:47: Erase Size          15
14:41:47: Erase Timeout       1
14:41:47: Erase offset        1
14:41:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4515 ] 
14:41:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:47: Host Frequency set to 100000 KHz
14:41:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:47: ####CSD Registe 2.0 Values####
14:41:47: CSD_STRUCTURE                                 :0x1
14:41:47: Reserv1                                       :0x0
14:41:47: Time Access 1 TAAC                            :0xe
14:41:47: Time Access 2 NSAC*100                        :0x0
14:41:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:47: Card Command Classess CCC                     :0x5b5
14:41:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:47: DSR(driver stage register)  DSR_IMP           :0x0
14:41:47: Reserv2                                       :0x0
14:41:47: Device Size C_SIZE                            :0xedc8
14:41:47: Reserv3                                       :0x0
14:41:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:47: Reserv4                                       :0x0
14:41:47: Write Speed Factor R2W_FACTOR                 :0x2
14:41:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:47: FILE_FORMAT_GRP                               :0x0
14:41:47: COPY flag                                     :0x1
14:41:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:47: File_Format                                   :0x0
14:41:47: CRC                                           :0x0
14:41:47: ####CSD Registe Values####  

14:41:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F7E0>, <py_sfcl.CommandDataDefinition object at 0x0667C960>) , Command count = 4516 ] 
14:41:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C1B0>, <py_sfcl.CommandDataDefinition object at 0x06685060>) , Command count = 4517 ] 
14:41:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:47: [DVTCommonLib]### Erase :Erase API Called
14:41:47: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x22038 with Blockcount:0x2001
14:41:47: [ EraseLba(0x22038, 0x2001) , Command count = 4518 ] 
14:41:47: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x22038 with Blockcount:0x2001 

14:41:47: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 10
14:41:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x24038 to EndLba:0x24040 with Increment Pattern
14:41:47: [ WrLbaNoData(0x24038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4519 ] 
14:41:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x24038 to EndLba:0x24040 with Increment Pattern 

14:41:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CBA0>, <py_sfcl.CommandDataDefinition object at 0x0667FAB0>) , Command count = 4520 ] 
14:41:47: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F480>, <py_sfcl.CommandDataDefinition object at 0x0667F1E0>) , Command count = 4521 ] 
14:41:47: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:47: [DVTCommonLib]###  R1bCommandAbort called
14:41:47: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x6, False) , Command count = 4522 ] 
14:41:47: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:49: Host Frequency set to 25000 KHz
14:41:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667FBA0>, 0x0, True) , Command count = 4523 ] 
14:41:49: [GO18_globalSetVolt]### Host voltage value is set.
14:41:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683360>, 0x0, False) , Command count = 4524 ] 
14:41:49: [GO18_globalSetVolt]### Host voltage value is set.
14:41:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4525 ] 
14:41:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4526 ] 
14:41:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4527 ] 
14:41:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FBD0>, <py_sfcl.CommandDataDefinition object at 0x0667F900>) , Command count = 4528 ] 
14:41:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683A50>, <py_sfcl.CommandDataDefinition object at 0x0667F750>) , Command count = 4529 ] 
14:41:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:49: [ SetCardRCA(0x1, 0xD555) , Command count = 4530 ] 
14:41:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:49: Host Frequency set to 25000 KHz
14:41:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:49: ####CSD Registe 2.0 Values####
14:41:49: CSD_STRUCTURE                                 :0x1
14:41:49: Reserv1                                       :0x0
14:41:49: Time Access 1 TAAC                            :0xe
14:41:49: Time Access 2 NSAC*100                        :0x0
14:41:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:49: Card Command Classess CCC                     :0x5b5
14:41:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:49: DSR(driver stage register)  DSR_IMP           :0x0
14:41:49: Reserv2                                       :0x0
14:41:49: Device Size C_SIZE                            :0xedc8
14:41:49: Reserv3                                       :0x0
14:41:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:49: Reserv4                                       :0x0
14:41:49: Write Speed Factor R2W_FACTOR                 :0x2
14:41:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:49: FILE_FORMAT_GRP                               :0x0
14:41:49: COPY flag                                     :0x1
14:41:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:49: File_Format                                   :0x0
14:41:49: CRC                                           :0x0
14:41:49: ####CSD Registe Values####  

14:41:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:49: [GetSCRRegisterEntry] Passed
14:41:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:49: Data_Status_After Erases          : 0
14:41:49: CPRM Security Support             : No Security
14:41:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:49: Spec. Version                     : Version 3.0X
14:41:49: Extended Security Support         : Extended_Security_Not_Supported
14:41:49: Command Support                   : COMMAND_SUPPORT
14:41:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C4B0>, <py_sfcl.CommandDataDefinition object at 0x0667CAE0>) , Command count = 4531 ] 
14:41:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FC90>, <py_sfcl.CommandDataDefinition object at 0x0667FDE0>) , Command count = 4532 ] 
14:41:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:49: [ SetBusWidth(0x4) , Command count = 4533 ] 
14:41:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F4E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4534 ] 
14:41:49: Protected Area Size 0x28000
14:41:49: Bus Width           2
14:41:49: Secure Mode         0
14:41:49: Speed  Class        4
14:41:49: Perf Move           0
14:41:49: Au Size             9
14:41:49: Erase Size          15
14:41:49: Erase Timeout       1
14:41:49: Erase offset        1
14:41:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4535 ] 
14:41:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:50: Host Frequency set to 100000 KHz
14:41:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:50: ####CSD Registe 2.0 Values####
14:41:50: CSD_STRUCTURE                                 :0x1
14:41:50: Reserv1                                       :0x0
14:41:50: Time Access 1 TAAC                            :0xe
14:41:50: Time Access 2 NSAC*100                        :0x0
14:41:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:50: Card Command Classess CCC                     :0x5b5
14:41:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:50: DSR(driver stage register)  DSR_IMP           :0x0
14:41:50: Reserv2                                       :0x0
14:41:50: Device Size C_SIZE                            :0xedc8
14:41:50: Reserv3                                       :0x0
14:41:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:50: Reserv4                                       :0x0
14:41:50: Write Speed Factor R2W_FACTOR                 :0x2
14:41:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:50: FILE_FORMAT_GRP                               :0x0
14:41:50: COPY flag                                     :0x1
14:41:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:50: File_Format                                   :0x0
14:41:50: CRC                                           :0x0
14:41:50: ####CSD Registe Values####  

14:41:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FE40>, <py_sfcl.CommandDataDefinition object at 0x0667C930>) , Command count = 4536 ] 
14:41:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C8D0>, <py_sfcl.CommandDataDefinition object at 0x066855A0>) , Command count = 4537 ] 
14:41:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:50: [DVTCommonLib]### Erase :Erase API Called
14:41:50: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x24038 with Blockcount:0x2001
14:41:50: [ EraseLba(0x24038, 0x2001) , Command count = 4538 ] 
14:41:50: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x24038 with Blockcount:0x2001 

14:41:50: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 9
14:41:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x26038 to EndLba:0x26040 with Increment Pattern
14:41:50: [ WrLbaNoData(0x26038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4539 ] 
14:41:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x26038 to EndLba:0x26040 with Increment Pattern 

14:41:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683480>, <py_sfcl.CommandDataDefinition object at 0x06683390>) , Command count = 4540 ] 
14:41:50: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667ACC0>, <py_sfcl.CommandDataDefinition object at 0x0667F960>) , Command count = 4541 ] 
14:41:50: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:50: [DVTCommonLib]###  R1bCommandAbort called
14:41:50: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x8, False) , Command count = 4542 ] 
14:41:50: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:50: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:52: Host Frequency set to 25000 KHz
14:41:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:52: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667F930>, 0x0, True) , Command count = 4543 ] 
14:41:52: [GO18_globalSetVolt]### Host voltage value is set.
14:41:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683D80>, 0x0, False) , Command count = 4544 ] 
14:41:52: [GO18_globalSetVolt]### Host voltage value is set.
14:41:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4545 ] 
14:41:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4546 ] 
14:41:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4547 ] 
14:41:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683630>, <py_sfcl.CommandDataDefinition object at 0x06683540>) , Command count = 4548 ] 
14:41:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FE10>, <py_sfcl.CommandDataDefinition object at 0x0667F8D0>) , Command count = 4549 ] 
14:41:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:52: [ SetCardRCA(0x1, 0xD555) , Command count = 4550 ] 
14:41:52: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:52: Host Frequency set to 25000 KHz
14:41:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:52: ####CSD Registe 2.0 Values####
14:41:52: CSD_STRUCTURE                                 :0x1
14:41:52: Reserv1                                       :0x0
14:41:52: Time Access 1 TAAC                            :0xe
14:41:52: Time Access 2 NSAC*100                        :0x0
14:41:52: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:52: Card Command Classess CCC                     :0x5b5
14:41:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:52: DSR(driver stage register)  DSR_IMP           :0x0
14:41:52: Reserv2                                       :0x0
14:41:52: Device Size C_SIZE                            :0xedc8
14:41:52: Reserv3                                       :0x0
14:41:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:52: Reserv4                                       :0x0
14:41:52: Write Speed Factor R2W_FACTOR                 :0x2
14:41:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:52: FILE_FORMAT_GRP                               :0x0
14:41:52: COPY flag                                     :0x1
14:41:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:52: File_Format                                   :0x0
14:41:52: CRC                                           :0x0
14:41:52: ####CSD Registe Values####  

14:41:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:52: [GetSCRRegisterEntry] Passed
14:41:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:52: Data_Status_After Erases          : 0
14:41:52: CPRM Security Support             : No Security
14:41:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:52: Spec. Version                     : Version 3.0X
14:41:52: Extended Security Support         : Extended_Security_Not_Supported
14:41:52: Command Support                   : COMMAND_SUPPORT
14:41:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FCC0>, <py_sfcl.CommandDataDefinition object at 0x06683900>) , Command count = 4551 ] 
14:41:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FB40>, <py_sfcl.CommandDataDefinition object at 0x0667C870>) , Command count = 4552 ] 
14:41:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:52: [ SetBusWidth(0x4) , Command count = 4553 ] 
14:41:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667F120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4554 ] 
14:41:52: Protected Area Size 0x28000
14:41:52: Bus Width           2
14:41:52: Secure Mode         0
14:41:52: Speed  Class        4
14:41:52: Perf Move           0
14:41:52: Au Size             9
14:41:52: Erase Size          15
14:41:52: Erase Timeout       1
14:41:52: Erase offset        1
14:41:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4555 ] 
14:41:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:52: Host Frequency set to 100000 KHz
14:41:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:52: ####CSD Registe 2.0 Values####
14:41:52: CSD_STRUCTURE                                 :0x1
14:41:52: Reserv1                                       :0x0
14:41:52: Time Access 1 TAAC                            :0xe
14:41:52: Time Access 2 NSAC*100                        :0x0
14:41:52: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:52: Card Command Classess CCC                     :0x5b5
14:41:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:52: DSR(driver stage register)  DSR_IMP           :0x0
14:41:52: Reserv2                                       :0x0
14:41:52: Device Size C_SIZE                            :0xedc8
14:41:52: Reserv3                                       :0x0
14:41:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:52: Reserv4                                       :0x0
14:41:52: Write Speed Factor R2W_FACTOR                 :0x2
14:41:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:52: FILE_FORMAT_GRP                               :0x0
14:41:52: COPY flag                                     :0x1
14:41:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:52: File_Format                                   :0x0
14:41:52: CRC                                           :0x0
14:41:52: ####CSD Registe Values####  

14:41:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F570>, <py_sfcl.CommandDataDefinition object at 0x06683180>) , Command count = 4556 ] 
14:41:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667AC90>, <py_sfcl.CommandDataDefinition object at 0x06685C60>) , Command count = 4557 ] 
14:41:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:52: [DVTCommonLib]### Erase :Erase API Called
14:41:52: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x26038 with Blockcount:0x2001
14:41:52: [ EraseLba(0x26038, 0x2001) , Command count = 4558 ] 
14:41:52: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x26038 with Blockcount:0x2001 

14:41:52: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 8
14:41:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x28038 to EndLba:0x28040 with Increment Pattern
14:41:52: [ WrLbaNoData(0x28038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4559 ] 
14:41:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x28038 to EndLba:0x28040 with Increment Pattern 

14:41:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066839F0>, <py_sfcl.CommandDataDefinition object at 0x06683B10>) , Command count = 4560 ] 
14:41:52: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683E40>, <py_sfcl.CommandDataDefinition object at 0x06683CF0>) , Command count = 4561 ] 
14:41:52: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:52: [DVTCommonLib]###  R1bCommandAbort called
14:41:52: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x5, False) , Command count = 4562 ] 
14:41:52: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:52: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:55: Host Frequency set to 25000 KHz
14:41:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AE40>, 0x0, True) , Command count = 4563 ] 
14:41:55: [GO18_globalSetVolt]### Host voltage value is set.
14:41:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683C30>, 0x0, False) , Command count = 4564 ] 
14:41:55: [GO18_globalSetVolt]### Host voltage value is set.
14:41:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4565 ] 
14:41:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4566 ] 
14:41:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4567 ] 
14:41:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683810>, <py_sfcl.CommandDataDefinition object at 0x0667FAE0>) , Command count = 4568 ] 
14:41:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683E70>, <py_sfcl.CommandDataDefinition object at 0x0667F5A0>) , Command count = 4569 ] 
14:41:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:55: [ SetCardRCA(0x1, 0xD555) , Command count = 4570 ] 
14:41:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:55: Host Frequency set to 25000 KHz
14:41:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:55: ####CSD Registe 2.0 Values####
14:41:55: CSD_STRUCTURE                                 :0x1
14:41:55: Reserv1                                       :0x0
14:41:55: Time Access 1 TAAC                            :0xe
14:41:55: Time Access 2 NSAC*100                        :0x0
14:41:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:55: Card Command Classess CCC                     :0x5b5
14:41:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:55: DSR(driver stage register)  DSR_IMP           :0x0
14:41:55: Reserv2                                       :0x0
14:41:55: Device Size C_SIZE                            :0xedc8
14:41:55: Reserv3                                       :0x0
14:41:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:55: Reserv4                                       :0x0
14:41:55: Write Speed Factor R2W_FACTOR                 :0x2
14:41:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:55: FILE_FORMAT_GRP                               :0x0
14:41:55: COPY flag                                     :0x1
14:41:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:55: File_Format                                   :0x0
14:41:55: CRC                                           :0x0
14:41:55: ####CSD Registe Values####  

14:41:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:55: [GetSCRRegisterEntry] Passed
14:41:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:55: Data_Status_After Erases          : 0
14:41:55: CPRM Security Support             : No Security
14:41:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:55: Spec. Version                     : Version 3.0X
14:41:55: Extended Security Support         : Extended_Security_Not_Supported
14:41:55: Command Support                   : COMMAND_SUPPORT
14:41:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F5D0>, <py_sfcl.CommandDataDefinition object at 0x0667FFC0>) , Command count = 4571 ] 
14:41:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683D50>, <py_sfcl.CommandDataDefinition object at 0x06683A80>) , Command count = 4572 ] 
14:41:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:55: [ SetBusWidth(0x4) , Command count = 4573 ] 
14:41:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066830F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4574 ] 
14:41:55: Protected Area Size 0x28000
14:41:55: Bus Width           2
14:41:55: Secure Mode         0
14:41:55: Speed  Class        4
14:41:55: Perf Move           0
14:41:55: Au Size             9
14:41:55: Erase Size          15
14:41:55: Erase Timeout       1
14:41:55: Erase offset        1
14:41:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4575 ] 
14:41:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:55: Host Frequency set to 100000 KHz
14:41:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:55: ####CSD Registe 2.0 Values####
14:41:55: CSD_STRUCTURE                                 :0x1
14:41:55: Reserv1                                       :0x0
14:41:55: Time Access 1 TAAC                            :0xe
14:41:55: Time Access 2 NSAC*100                        :0x0
14:41:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:55: Card Command Classess CCC                     :0x5b5
14:41:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:55: DSR(driver stage register)  DSR_IMP           :0x0
14:41:55: Reserv2                                       :0x0
14:41:55: Device Size C_SIZE                            :0xedc8
14:41:55: Reserv3                                       :0x0
14:41:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:55: Reserv4                                       :0x0
14:41:55: Write Speed Factor R2W_FACTOR                 :0x2
14:41:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:55: FILE_FORMAT_GRP                               :0x0
14:41:55: COPY flag                                     :0x1
14:41:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:55: File_Format                                   :0x0
14:41:55: CRC                                           :0x0
14:41:55: ####CSD Registe Values####  

14:41:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB570>, <py_sfcl.CommandDataDefinition object at 0x0667F120>) , Command count = 4576 ] 
14:41:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667F510>, <py_sfcl.CommandDataDefinition object at 0x0667CCC0>) , Command count = 4577 ] 
14:41:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:55: [DVTCommonLib]### Erase :Erase API Called
14:41:55: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x28038 with Blockcount:0x2001
14:41:55: [ EraseLba(0x28038, 0x2001) , Command count = 4578 ] 
14:41:55: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x28038 with Blockcount:0x2001 

14:41:55: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 7
14:41:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2A038 to EndLba:0x2A040 with Increment Pattern
14:41:55: [ WrLbaNoData(0x2A038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4579 ] 
14:41:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2A038 to EndLba:0x2A040 with Increment Pattern 

14:41:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E42840>, <py_sfcl.CommandDataDefinition object at 0x066834E0>) , Command count = 4580 ] 
14:41:55: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667CC30>, <py_sfcl.CommandDataDefinition object at 0x0667FA50>) , Command count = 4581 ] 
14:41:55: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:55: [DVTCommonLib]###  R1bCommandAbort called
14:41:55: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x17, False) , Command count = 4582 ] 
14:41:55: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:57: Host Frequency set to 25000 KHz
14:41:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683840>, 0x0, True) , Command count = 4583 ] 
14:41:57: [GO18_globalSetVolt]### Host voltage value is set.
14:41:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FE8990>, 0x0, False) , Command count = 4584 ] 
14:41:57: [GO18_globalSetVolt]### Host voltage value is set.
14:41:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4585 ] 
14:41:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4586 ] 
14:41:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4587 ] 
14:41:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FED1B0>, <py_sfcl.CommandDataDefinition object at 0x0667CDE0>) , Command count = 4588 ] 
14:41:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8F00>, <py_sfcl.CommandDataDefinition object at 0x0667F9F0>) , Command count = 4589 ] 
14:41:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:58: [ SetCardRCA(0x1, 0xD555) , Command count = 4590 ] 
14:41:58: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:58: Host Frequency set to 25000 KHz
14:41:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:58: ####CSD Registe 2.0 Values####
14:41:58: CSD_STRUCTURE                                 :0x1
14:41:58: Reserv1                                       :0x0
14:41:58: Time Access 1 TAAC                            :0xe
14:41:58: Time Access 2 NSAC*100                        :0x0
14:41:58: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:58: Card Command Classess CCC                     :0x5b5
14:41:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:58: DSR(driver stage register)  DSR_IMP           :0x0
14:41:58: Reserv2                                       :0x0
14:41:58: Device Size C_SIZE                            :0xedc8
14:41:58: Reserv3                                       :0x0
14:41:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:58: Reserv4                                       :0x0
14:41:58: Write Speed Factor R2W_FACTOR                 :0x2
14:41:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:58: FILE_FORMAT_GRP                               :0x0
14:41:58: COPY flag                                     :0x1
14:41:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:58: File_Format                                   :0x0
14:41:58: CRC                                           :0x0
14:41:58: ####CSD Registe Values####  

14:41:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:58: [GetSCRRegisterEntry] Passed
14:41:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:58: Data_Status_After Erases          : 0
14:41:58: CPRM Security Support             : No Security
14:41:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:58: Spec. Version                     : Version 3.0X
14:41:58: Extended Security Support         : Extended_Security_Not_Supported
14:41:58: Command Support                   : COMMAND_SUPPORT
14:41:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683210>, <py_sfcl.CommandDataDefinition object at 0x066833C0>) , Command count = 4591 ] 
14:41:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC01E0>, <py_sfcl.CommandDataDefinition object at 0x066831E0>) , Command count = 4592 ] 
14:41:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:58: [ SetBusWidth(0x4) , Command count = 4593 ] 
14:41:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06685AB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4594 ] 
14:41:58: Protected Area Size 0x28000
14:41:58: Bus Width           2
14:41:58: Secure Mode         0
14:41:58: Speed  Class        4
14:41:58: Perf Move           0
14:41:58: Au Size             9
14:41:58: Erase Size          15
14:41:58: Erase Timeout       1
14:41:58: Erase offset        1
14:41:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4595 ] 
14:41:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:58: Host Frequency set to 100000 KHz
14:41:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:58: ####CSD Registe 2.0 Values####
14:41:58: CSD_STRUCTURE                                 :0x1
14:41:58: Reserv1                                       :0x0
14:41:58: Time Access 1 TAAC                            :0xe
14:41:58: Time Access 2 NSAC*100                        :0x0
14:41:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:58: Card Command Classess CCC                     :0x5b5
14:41:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:58: DSR(driver stage register)  DSR_IMP           :0x0
14:41:58: Reserv2                                       :0x0
14:41:58: Device Size C_SIZE                            :0xedc8
14:41:58: Reserv3                                       :0x0
14:41:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:58: Reserv4                                       :0x0
14:41:58: Write Speed Factor R2W_FACTOR                 :0x2
14:41:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:58: FILE_FORMAT_GRP                               :0x0
14:41:58: COPY flag                                     :0x1
14:41:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:58: File_Format                                   :0x0
14:41:58: CRC                                           :0x0
14:41:58: ####CSD Registe Values####  

14:41:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC6360>, <py_sfcl.CommandDataDefinition object at 0x066834B0>) , Command count = 4596 ] 
14:41:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683DB0>, <py_sfcl.CommandDataDefinition object at 0x06685750>) , Command count = 4597 ] 
14:41:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:58: [DVTCommonLib]### Erase :Erase API Called
14:41:58: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2A038 with Blockcount:0x2001
14:41:58: [ EraseLba(0x2A038, 0x2001) , Command count = 4598 ] 
14:41:58: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2A038 with Blockcount:0x2001 

14:41:58: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 6
14:41:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2C038 to EndLba:0x2C040 with Increment Pattern
14:41:58: [ WrLbaNoData(0x2C038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4599 ] 
14:41:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2C038 to EndLba:0x2C040 with Increment Pattern 

14:41:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683C90>, <py_sfcl.CommandDataDefinition object at 0x06683F00>) , Command count = 4600 ] 
14:41:58: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:41:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066837B0>, <py_sfcl.CommandDataDefinition object at 0x06685AE0>) , Command count = 4601 ] 
14:41:58: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:41:58: [DVTCommonLib]###  R1bCommandAbort called
14:41:58: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x2B, False) , Command count = 4602 ] 
14:41:58: [DVTCommonLib]###  R1bCommandAbort Completed 

14:41:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:00: Host Frequency set to 25000 KHz
14:42:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683B70>, 0x0, True) , Command count = 4603 ] 
14:42:00: [GO18_globalSetVolt]### Host voltage value is set.
14:42:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x05FC0690>, 0x0, False) , Command count = 4604 ] 
14:42:00: [GO18_globalSetVolt]### Host voltage value is set.
14:42:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4605 ] 
14:42:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4606 ] 
14:42:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4607 ] 
14:42:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683FC0>, <py_sfcl.CommandDataDefinition object at 0x0667F1B0>) , Command count = 4608 ] 
14:42:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032BA0>, <py_sfcl.CommandDataDefinition object at 0x06685DB0>) , Command count = 4609 ] 
14:42:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:00: [ SetCardRCA(0x1, 0xD555) , Command count = 4610 ] 
14:42:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:01: Host Frequency set to 25000 KHz
14:42:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:01: ####CSD Registe 2.0 Values####
14:42:01: CSD_STRUCTURE                                 :0x1
14:42:01: Reserv1                                       :0x0
14:42:01: Time Access 1 TAAC                            :0xe
14:42:01: Time Access 2 NSAC*100                        :0x0
14:42:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:01: Card Command Classess CCC                     :0x5b5
14:42:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:01: DSR(driver stage register)  DSR_IMP           :0x0
14:42:01: Reserv2                                       :0x0
14:42:01: Device Size C_SIZE                            :0xedc8
14:42:01: Reserv3                                       :0x0
14:42:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:01: Reserv4                                       :0x0
14:42:01: Write Speed Factor R2W_FACTOR                 :0x2
14:42:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:01: FILE_FORMAT_GRP                               :0x0
14:42:01: COPY flag                                     :0x1
14:42:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:01: File_Format                                   :0x0
14:42:01: CRC                                           :0x0
14:42:01: ####CSD Registe Values####  

14:42:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:01: [GetSCRRegisterEntry] Passed
14:42:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:01: Data_Status_After Erases          : 0
14:42:01: CPRM Security Support             : No Security
14:42:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:01: Spec. Version                     : Version 3.0X
14:42:01: Extended Security Support         : Extended_Security_Not_Supported
14:42:01: Command Support                   : COMMAND_SUPPORT
14:42:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683BD0>, <py_sfcl.CommandDataDefinition object at 0x06666720>) , Command count = 4611 ] 
14:42:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDAE40>, <py_sfcl.CommandDataDefinition object at 0x06666B40>) , Command count = 4612 ] 
14:42:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:01: [ SetBusWidth(0x4) , Command count = 4613 ] 
14:42:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06666BA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4614 ] 
14:42:01: Protected Area Size 0x28000
14:42:01: Bus Width           2
14:42:01: Secure Mode         0
14:42:01: Speed  Class        4
14:42:01: Perf Move           0
14:42:01: Au Size             9
14:42:01: Erase Size          15
14:42:01: Erase Timeout       1
14:42:01: Erase offset        1
14:42:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4615 ] 
14:42:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:01: Host Frequency set to 100000 KHz
14:42:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:01: ####CSD Registe 2.0 Values####
14:42:01: CSD_STRUCTURE                                 :0x1
14:42:01: Reserv1                                       :0x0
14:42:01: Time Access 1 TAAC                            :0xe
14:42:01: Time Access 2 NSAC*100                        :0x0
14:42:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:01: Card Command Classess CCC                     :0x5b5
14:42:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:01: DSR(driver stage register)  DSR_IMP           :0x0
14:42:01: Reserv2                                       :0x0
14:42:01: Device Size C_SIZE                            :0xedc8
14:42:01: Reserv3                                       :0x0
14:42:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:01: Reserv4                                       :0x0
14:42:01: Write Speed Factor R2W_FACTOR                 :0x2
14:42:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:01: FILE_FORMAT_GRP                               :0x0
14:42:01: COPY flag                                     :0x1
14:42:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:01: File_Format                                   :0x0
14:42:01: CRC                                           :0x0
14:42:01: ####CSD Registe Values####  

14:42:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8FC0>, <py_sfcl.CommandDataDefinition object at 0x06685870>) , Command count = 4616 ] 
14:42:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066837E0>, <py_sfcl.CommandDataDefinition object at 0x06685960>) , Command count = 4617 ] 
14:42:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:01: [DVTCommonLib]### Erase :Erase API Called
14:42:01: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2C038 with Blockcount:0x2001
14:42:01: [ EraseLba(0x2C038, 0x2001) , Command count = 4618 ] 
14:42:01: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2C038 with Blockcount:0x2001 

14:42:01: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 5
14:42:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2E038 to EndLba:0x2E040 with Increment Pattern
14:42:01: [ WrLbaNoData(0x2E038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4619 ] 
14:42:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2E038 to EndLba:0x2E040 with Increment Pattern 

14:42:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEDAE0>, <py_sfcl.CommandDataDefinition object at 0x06666570>) , Command count = 4620 ] 
14:42:01: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:42:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667FB70>, <py_sfcl.CommandDataDefinition object at 0x06685300>) , Command count = 4621 ] 
14:42:01: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:42:01: [DVTCommonLib]###  R1bCommandAbort called
14:42:01: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x8, False) , Command count = 4622 ] 
14:42:01: [DVTCommonLib]###  R1bCommandAbort Completed 

14:42:01: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:03: Host Frequency set to 25000 KHz
14:42:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:03: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x06683300>, 0x0, True) , Command count = 4623 ] 
14:42:03: [GO18_globalSetVolt]### Host voltage value is set.
14:42:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666630>, 0x0, False) , Command count = 4624 ] 
14:42:03: [GO18_globalSetVolt]### Host voltage value is set.
14:42:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4625 ] 
14:42:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4626 ] 
14:42:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4627 ] 
14:42:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDAC90>, <py_sfcl.CommandDataDefinition object at 0x06666A80>) , Command count = 4628 ] 
14:42:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066667E0>, <py_sfcl.CommandDataDefinition object at 0x06685A50>) , Command count = 4629 ] 
14:42:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:03: [ SetCardRCA(0x1, 0xD555) , Command count = 4630 ] 
14:42:03: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:03: Host Frequency set to 25000 KHz
14:42:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:03: ####CSD Registe 2.0 Values####
14:42:03: CSD_STRUCTURE                                 :0x1
14:42:03: Reserv1                                       :0x0
14:42:03: Time Access 1 TAAC                            :0xe
14:42:03: Time Access 2 NSAC*100                        :0x0
14:42:03: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:03: Card Command Classess CCC                     :0x5b5
14:42:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:03: DSR(driver stage register)  DSR_IMP           :0x0
14:42:03: Reserv2                                       :0x0
14:42:03: Device Size C_SIZE                            :0xedc8
14:42:03: Reserv3                                       :0x0
14:42:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:03: Reserv4                                       :0x0
14:42:03: Write Speed Factor R2W_FACTOR                 :0x2
14:42:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:03: FILE_FORMAT_GRP                               :0x0
14:42:03: COPY flag                                     :0x1
14:42:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:03: File_Format                                   :0x0
14:42:03: CRC                                           :0x0
14:42:03: ####CSD Registe Values####  

14:42:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:03: [GetSCRRegisterEntry] Passed
14:42:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:03: Data_Status_After Erases          : 0
14:42:03: CPRM Security Support             : No Security
14:42:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:03: Spec. Version                     : Version 3.0X
14:42:03: Extended Security Support         : Extended_Security_Not_Supported
14:42:03: Command Support                   : COMMAND_SUPPORT
14:42:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683CC0>, <py_sfcl.CommandDataDefinition object at 0x06666C60>) , Command count = 4631 ] 
14:42:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065724B0>, <py_sfcl.CommandDataDefinition object at 0x06683930>) , Command count = 4632 ] 
14:42:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:03: [ SetBusWidth(0x4) , Command count = 4633 ] 
14:42:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06032B10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4634 ] 
14:42:03: Protected Area Size 0x28000
14:42:03: Bus Width           2
14:42:03: Secure Mode         0
14:42:03: Speed  Class        4
14:42:03: Perf Move           0
14:42:03: Au Size             9
14:42:03: Erase Size          15
14:42:03: Erase Timeout       1
14:42:03: Erase offset        1
14:42:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4635 ] 
14:42:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:04: Host Frequency set to 100000 KHz
14:42:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:04: ####CSD Registe 2.0 Values####
14:42:04: CSD_STRUCTURE                                 :0x1
14:42:04: Reserv1                                       :0x0
14:42:04: Time Access 1 TAAC                            :0xe
14:42:04: Time Access 2 NSAC*100                        :0x0
14:42:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:04: Card Command Classess CCC                     :0x5b5
14:42:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:04: DSR(driver stage register)  DSR_IMP           :0x0
14:42:04: Reserv2                                       :0x0
14:42:04: Device Size C_SIZE                            :0xedc8
14:42:04: Reserv3                                       :0x0
14:42:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:04: Reserv4                                       :0x0
14:42:04: Write Speed Factor R2W_FACTOR                 :0x2
14:42:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:04: FILE_FORMAT_GRP                               :0x0
14:42:04: COPY flag                                     :0x1
14:42:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:04: File_Format                                   :0x0
14:42:04: CRC                                           :0x0
14:42:04: ####CSD Registe Values####  

14:42:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060329F0>, <py_sfcl.CommandDataDefinition object at 0x06683720>) , Command count = 4636 ] 
14:42:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683780>, <py_sfcl.CommandDataDefinition object at 0x066854E0>) , Command count = 4637 ] 
14:42:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:04: [DVTCommonLib]### Erase :Erase API Called
14:42:04: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x2E038 with Blockcount:0x2001
14:42:04: [ EraseLba(0x2E038, 0x2001) , Command count = 4638 ] 
14:42:04: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x2E038 with Blockcount:0x2001 

14:42:04: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 4
14:42:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x30038 to EndLba:0x30040 with Increment Pattern
14:42:04: [ WrLbaNoData(0x30038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4639 ] 
14:42:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x30038 to EndLba:0x30040 with Increment Pattern 

14:42:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032AB0>, <py_sfcl.CommandDataDefinition object at 0x0667A3F0>) , Command count = 4640 ] 
14:42:04: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:42:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683330>, <py_sfcl.CommandDataDefinition object at 0x06685D80>) , Command count = 4641 ] 
14:42:04: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:42:04: [DVTCommonLib]###  R1bCommandAbort called
14:42:04: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x1E, False) , Command count = 4642 ] 
14:42:04: [DVTCommonLib]###  R1bCommandAbort Completed 

14:42:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:06: Host Frequency set to 25000 KHz
14:42:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x066831B0>, 0x0, True) , Command count = 4643 ] 
14:42:06: [GO18_globalSetVolt]### Host voltage value is set.
14:42:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB600>, 0x0, False) , Command count = 4644 ] 
14:42:06: [GO18_globalSetVolt]### Host voltage value is set.
14:42:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4645 ] 
14:42:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4646 ] 
14:42:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4647 ] 
14:42:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572300>, <py_sfcl.CommandDataDefinition object at 0x06683F90>) , Command count = 4648 ] 
14:42:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB5A0>, <py_sfcl.CommandDataDefinition object at 0x06685D80>) , Command count = 4649 ] 
14:42:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:06: [ SetCardRCA(0x1, 0xD555) , Command count = 4650 ] 
14:42:06: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:06: Host Frequency set to 25000 KHz
14:42:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:06: ####CSD Registe 2.0 Values####
14:42:06: CSD_STRUCTURE                                 :0x1
14:42:06: Reserv1                                       :0x0
14:42:06: Time Access 1 TAAC                            :0xe
14:42:06: Time Access 2 NSAC*100                        :0x0
14:42:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:06: Card Command Classess CCC                     :0x5b5
14:42:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:06: DSR(driver stage register)  DSR_IMP           :0x0
14:42:06: Reserv2                                       :0x0
14:42:06: Device Size C_SIZE                            :0xedc8
14:42:06: Reserv3                                       :0x0
14:42:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:06: Reserv4                                       :0x0
14:42:06: Write Speed Factor R2W_FACTOR                 :0x2
14:42:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:06: FILE_FORMAT_GRP                               :0x0
14:42:06: COPY flag                                     :0x1
14:42:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:06: File_Format                                   :0x0
14:42:06: CRC                                           :0x0
14:42:06: ####CSD Registe Values####  

14:42:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:06: [GetSCRRegisterEntry] Passed
14:42:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:06: Data_Status_After Erases          : 0
14:42:06: CPRM Security Support             : No Security
14:42:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:06: Spec. Version                     : Version 3.0X
14:42:06: Extended Security Support         : Extended_Security_Not_Supported
14:42:06: Command Support                   : COMMAND_SUPPORT
14:42:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683C60>, <py_sfcl.CommandDataDefinition object at 0x066664E0>) , Command count = 4651 ] 
14:42:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01E5BDB0>, <py_sfcl.CommandDataDefinition object at 0x0667A120>) , Command count = 4652 ] 
14:42:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:06: [ SetBusWidth(0x4) , Command count = 4653 ] 
14:42:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06666990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4654 ] 
14:42:06: Protected Area Size 0x28000
14:42:06: Bus Width           2
14:42:06: Secure Mode         0
14:42:06: Speed  Class        4
14:42:06: Perf Move           0
14:42:06: Au Size             9
14:42:06: Erase Size          15
14:42:06: Erase Timeout       1
14:42:06: Erase offset        1
14:42:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4655 ] 
14:42:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:06: Host Frequency set to 100000 KHz
14:42:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:06: ####CSD Registe 2.0 Values####
14:42:06: CSD_STRUCTURE                                 :0x1
14:42:06: Reserv1                                       :0x0
14:42:06: Time Access 1 TAAC                            :0xe
14:42:06: Time Access 2 NSAC*100                        :0x0
14:42:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:06: Card Command Classess CCC                     :0x5b5
14:42:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:06: DSR(driver stage register)  DSR_IMP           :0x0
14:42:06: Reserv2                                       :0x0
14:42:06: Device Size C_SIZE                            :0xedc8
14:42:06: Reserv3                                       :0x0
14:42:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:06: Reserv4                                       :0x0
14:42:06: Write Speed Factor R2W_FACTOR                 :0x2
14:42:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:06: FILE_FORMAT_GRP                               :0x0
14:42:06: COPY flag                                     :0x1
14:42:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:06: File_Format                                   :0x0
14:42:06: CRC                                           :0x0
14:42:06: ####CSD Registe Values####  

14:42:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0665BED0>, <py_sfcl.CommandDataDefinition object at 0x06666BA0>) , Command count = 4656 ] 
14:42:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683450>, <py_sfcl.CommandDataDefinition object at 0x06685210>) , Command count = 4657 ] 
14:42:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:06: [DVTCommonLib]### Erase :Erase API Called
14:42:06: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x30038 with Blockcount:0x2001
14:42:06: [ EraseLba(0x30038, 0x2001) , Command count = 4658 ] 
14:42:06: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x30038 with Blockcount:0x2001 

14:42:06: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 3
14:42:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x32038 to EndLba:0x32040 with Increment Pattern
14:42:06: [ WrLbaNoData(0x32038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4659 ] 
14:42:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x32038 to EndLba:0x32040 with Increment Pattern 

14:42:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB240>, <py_sfcl.CommandDataDefinition object at 0x066AB420>) , Command count = 4660 ] 
14:42:06: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:42:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683AB0>, <py_sfcl.CommandDataDefinition object at 0x06685210>) , Command count = 4661 ] 
14:42:06: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:42:06: [DVTCommonLib]###  R1bCommandAbort called
14:42:06: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x28, False) , Command count = 4662 ] 
14:42:06: [DVTCommonLib]###  R1bCommandAbort Completed 

14:42:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:09: Host Frequency set to 25000 KHz
14:42:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x066AB180>, 0x0, True) , Command count = 4663 ] 
14:42:09: [GO18_globalSetVolt]### Host voltage value is set.
14:42:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667CF90>, 0x0, False) , Command count = 4664 ] 
14:42:09: [GO18_globalSetVolt]### Host voltage value is set.
14:42:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4665 ] 
14:42:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4666 ] 
14:42:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4667 ] 
14:42:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB690>, <py_sfcl.CommandDataDefinition object at 0x06666870>) , Command count = 4668 ] 
14:42:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A9C0>, <py_sfcl.CommandDataDefinition object at 0x06685210>) , Command count = 4669 ] 
14:42:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:09: [ SetCardRCA(0x1, 0xD555) , Command count = 4670 ] 
14:42:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:09: Host Frequency set to 25000 KHz
14:42:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:09: ####CSD Registe 2.0 Values####
14:42:09: CSD_STRUCTURE                                 :0x1
14:42:09: Reserv1                                       :0x0
14:42:09: Time Access 1 TAAC                            :0xe
14:42:09: Time Access 2 NSAC*100                        :0x0
14:42:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:09: Card Command Classess CCC                     :0x5b5
14:42:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:09: DSR(driver stage register)  DSR_IMP           :0x0
14:42:09: Reserv2                                       :0x0
14:42:09: Device Size C_SIZE                            :0xedc8
14:42:09: Reserv3                                       :0x0
14:42:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:09: Reserv4                                       :0x0
14:42:09: Write Speed Factor R2W_FACTOR                 :0x2
14:42:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:09: FILE_FORMAT_GRP                               :0x0
14:42:09: COPY flag                                     :0x1
14:42:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:09: File_Format                                   :0x0
14:42:09: CRC                                           :0x0
14:42:09: ####CSD Registe Values####  

14:42:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:09: [GetSCRRegisterEntry] Passed
14:42:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:09: Data_Status_After Erases          : 0
14:42:09: CPRM Security Support             : No Security
14:42:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:09: Spec. Version                     : Version 3.0X
14:42:09: Extended Security Support         : Extended_Security_Not_Supported
14:42:09: Command Support                   : COMMAND_SUPPORT
14:42:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666FC0>, <py_sfcl.CommandDataDefinition object at 0x0667A7E0>) , Command count = 4671 ] 
14:42:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABDB0>, <py_sfcl.CommandDataDefinition object at 0x06666B70>) , Command count = 4672 ] 
14:42:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:09: [ SetBusWidth(0x4) , Command count = 4673 ] 
14:42:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667ABA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4674 ] 
14:42:09: Protected Area Size 0x28000
14:42:09: Bus Width           2
14:42:09: Secure Mode         0
14:42:09: Speed  Class        4
14:42:09: Perf Move           0
14:42:09: Au Size             9
14:42:09: Erase Size          15
14:42:09: Erase Timeout       1
14:42:09: Erase offset        1
14:42:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4675 ] 
14:42:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:09: Host Frequency set to 100000 KHz
14:42:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:09: ####CSD Registe 2.0 Values####
14:42:09: CSD_STRUCTURE                                 :0x1
14:42:09: Reserv1                                       :0x0
14:42:09: Time Access 1 TAAC                            :0xe
14:42:09: Time Access 2 NSAC*100                        :0x0
14:42:09: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:09: Card Command Classess CCC                     :0x5b5
14:42:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:09: DSR(driver stage register)  DSR_IMP           :0x0
14:42:09: Reserv2                                       :0x0
14:42:09: Device Size C_SIZE                            :0xedc8
14:42:09: Reserv3                                       :0x0
14:42:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:09: Reserv4                                       :0x0
14:42:09: Write Speed Factor R2W_FACTOR                 :0x2
14:42:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:09: FILE_FORMAT_GRP                               :0x0
14:42:09: COPY flag                                     :0x1
14:42:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:09: File_Format                                   :0x0
14:42:09: CRC                                           :0x0
14:42:09: ####CSD Registe Values####  

14:42:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06572330>, <py_sfcl.CommandDataDefinition object at 0x066666F0>) , Command count = 4676 ] 
14:42:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06683B40>, <py_sfcl.CommandDataDefinition object at 0x06685B40>) , Command count = 4677 ] 
14:42:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:09: [DVTCommonLib]### Erase :Erase API Called
14:42:09: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x32038 with Blockcount:0x2001
14:42:09: [ EraseLba(0x32038, 0x2001) , Command count = 4678 ] 
14:42:09: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x32038 with Blockcount:0x2001 

14:42:09: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 2
14:42:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x34038 to EndLba:0x34040 with Increment Pattern
14:42:09: [ WrLbaNoData(0x34038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4679 ] 
14:42:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x34038 to EndLba:0x34040 with Increment Pattern 

14:42:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB2D0>, <py_sfcl.CommandDataDefinition object at 0x0667A720>) , Command count = 4680 ] 
14:42:09: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:42:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE8F90>, <py_sfcl.CommandDataDefinition object at 0x06685B40>) , Command count = 4681 ] 
14:42:09: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:42:09: [DVTCommonLib]###  R1bCommandAbort called
14:42:09: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0xA, False) , Command count = 4682 ] 
14:42:09: [DVTCommonLib]###  R1bCommandAbort Completed 

14:42:09: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:11: Host Frequency set to 25000 KHz
14:42:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:11: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x06666DE0>, 0x0, True) , Command count = 4683 ] 
14:42:11: [GO18_globalSetVolt]### Host voltage value is set.
14:42:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x0667AD80>, 0x0, False) , Command count = 4684 ] 
14:42:11: [GO18_globalSetVolt]### Host voltage value is set.
14:42:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4685 ] 
14:42:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4686 ] 
14:42:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4687 ] 
14:42:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB9F0>, <py_sfcl.CommandDataDefinition object at 0x0667A060>) , Command count = 4688 ] 
14:42:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667A570>, <py_sfcl.CommandDataDefinition object at 0x06685B40>) , Command count = 4689 ] 
14:42:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:12: [ SetCardRCA(0x1, 0xD555) , Command count = 4690 ] 
14:42:12: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:12: Host Frequency set to 25000 KHz
14:42:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:12: ####CSD Registe 2.0 Values####
14:42:12: CSD_STRUCTURE                                 :0x1
14:42:12: Reserv1                                       :0x0
14:42:12: Time Access 1 TAAC                            :0xe
14:42:12: Time Access 2 NSAC*100                        :0x0
14:42:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:12: Card Command Classess CCC                     :0x5b5
14:42:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:12: DSR(driver stage register)  DSR_IMP           :0x0
14:42:12: Reserv2                                       :0x0
14:42:12: Device Size C_SIZE                            :0xedc8
14:42:12: Reserv3                                       :0x0
14:42:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:12: Reserv4                                       :0x0
14:42:12: Write Speed Factor R2W_FACTOR                 :0x2
14:42:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:12: FILE_FORMAT_GRP                               :0x0
14:42:12: COPY flag                                     :0x1
14:42:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:12: File_Format                                   :0x0
14:42:12: CRC                                           :0x0
14:42:12: ####CSD Registe Values####  

14:42:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:12: [GetSCRRegisterEntry] Passed
14:42:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:12: Data_Status_After Erases          : 0
14:42:12: CPRM Security Support             : No Security
14:42:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:12: Spec. Version                     : Version 3.0X
14:42:12: Extended Security Support         : Extended_Security_Not_Supported
14:42:12: Command Support                   : COMMAND_SUPPORT
14:42:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06666840>, <py_sfcl.CommandDataDefinition object at 0x0667A6F0>) , Command count = 4691 ] 
14:42:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABE10>, <py_sfcl.CommandDataDefinition object at 0x0667AB40>) , Command count = 4692 ] 
14:42:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:12: [ SetBusWidth(0x4) , Command count = 4693 ] 
14:42:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0667A0F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4694 ] 
14:42:12: Protected Area Size 0x28000
14:42:12: Bus Width           2
14:42:12: Secure Mode         0
14:42:12: Speed  Class        4
14:42:12: Perf Move           0
14:42:12: Au Size             9
14:42:12: Erase Size          15
14:42:12: Erase Timeout       1
14:42:12: Erase offset        1
14:42:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4695 ] 
14:42:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:12: Host Frequency set to 100000 KHz
14:42:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:12: ####CSD Registe 2.0 Values####
14:42:12: CSD_STRUCTURE                                 :0x1
14:42:12: Reserv1                                       :0x0
14:42:12: Time Access 1 TAAC                            :0xe
14:42:12: Time Access 2 NSAC*100                        :0x0
14:42:12: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:12: Card Command Classess CCC                     :0x5b5
14:42:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:12: DSR(driver stage register)  DSR_IMP           :0x0
14:42:12: Reserv2                                       :0x0
14:42:12: Device Size C_SIZE                            :0xedc8
14:42:12: Reserv3                                       :0x0
14:42:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:12: Reserv4                                       :0x0
14:42:12: Write Speed Factor R2W_FACTOR                 :0x2
14:42:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:12: FILE_FORMAT_GRP                               :0x0
14:42:12: COPY flag                                     :0x1
14:42:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:12: File_Format                                   :0x0
14:42:12: CRC                                           :0x0
14:42:12: ####CSD Registe Values####  

14:42:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066ABFC0>, <py_sfcl.CommandDataDefinition object at 0x0667ABA0>) , Command count = 4696 ] 
14:42:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AB1E0>, <py_sfcl.CommandDataDefinition object at 0x06685510>) , Command count = 4697 ] 
14:42:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:12: [DVTCommonLib]### Erase :Erase API Called
14:42:12: [DVTCommonLib]### Erase :CTF Erase API called to erase from StartLba:0x34038 with Blockcount:0x2001
14:42:12: [ EraseLba(0x34038, 0x2001) , Command count = 4698 ] 
14:42:12: [DVTCommonLib]### Erase :Completed CTF Erase API from StartLba:0x34038 with Blockcount:0x2001 

14:42:12: STPTRNSABRTST07_DVT_ST_2_7_During_Data_CRC16_Jump[INFO] ### Inner loop Count 1
14:42:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x36038 to EndLba:0x36040 with Increment Pattern
14:42:12: [ WrLbaNoData(0x36038, 0x8, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4699 ] 
14:42:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x36038 to EndLba:0x36040 with Increment Pattern 

14:42:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0667C2D0>, <py_sfcl.CommandDataDefinition object at 0x0667A630>) , Command count = 4700 ] 
14:42:12: CMD32[ ERASE_WR_BLOCK_START_ADDRESS ] Passed with R1 type response:[32, 0, 0, 9, 0, 29]
14:42:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06032810>, <py_sfcl.CommandDataDefinition object at 0x0667A690>) , Command count = 4701 ] 
14:42:12: CMD33[ ERASE_BLOCK_END_ADDRESS ] Passed with R1 type response:[33, 0, 0, 9, 0, 16]
14:42:12: [DVTCommonLib]###  R1bCommandAbort called
14:42:12: [ R1bCommandAbort(0x26, 0x0, 0xFA, py_sfcl.ER1bAbortType.R1B_ABORT_TYPE_POWER_LOSS, py_sfcl.EEnancedOpTimeUnits.MILI_SECOND, 0x0, 0x0, py_sfcl.TYPE_RESP.R1, True, 0x17, False) , Command count = 4702 ] 
14:42:12: [DVTCommonLib]###  R1bCommandAbort Completed 

14:42:12: [GO4_globalInitCard]### Switch to Specify Card Type
