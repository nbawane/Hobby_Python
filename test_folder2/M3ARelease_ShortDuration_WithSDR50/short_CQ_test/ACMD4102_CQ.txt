18:11:11: Sata Disconnector Board found in COM1.
18:11:15: ***************************************************** 

18:11:15: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   * 

18:11:15: *                                                   * 

18:11:15: *  Compatibility with this version is not verified! * 

18:11:15: ***************************************************** 

18:11:18: [ DeviceSetupCompletion() , Command count = 7 ] 
18:11:18: Testname Mapping: ScriptName=[ACMD4102_CallAllACMD41_SPI] -> TestId=[ACMD4102]
18:11:18: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 8 ] 
18:11:18: [ GetPhysicalChipsInfo() , Command count = 9 ] 
18:11:18: [ GetFileSize(0xEA) , Command count = 10 ] 
18:11:18: [ ReadFile(<0xA00/0x200, Arb>, 0xEA, 0x1) , Command count = 11 ] 
18:11:18: [ GetFileSize(0x16) , Command count = 12 ] 
18:11:18: [ GetCardStatus() , Command count = 13 ] 
18:11:18: [ GetFileSize(0x18) , Command count = 14 ] 
18:11:18: [ ReadFile(<0x1000/0x200, Arb>, 0x18, 0x8) , Command count = 15 ] 
18:11:18: [ GetFileSize(0x15) , Command count = 16 ] 
18:11:18: [ ReadFile(<0x1000/0x200, Arb>, 0x15, 0x1) , Command count = 17 ] 
18:11:20: Can not find revision of File 21 in file 'config.xml' or card is in the ROM mode
18:11:20: [ GetFileSize(0xE) , Command count = 18 ] 
18:11:20: [ ReadFile(<0x1000/0x200, Arb>, 0xE, 0x1) , Command count = 19 ] 
18:11:20: [ GetFileSize(0x1E) , Command count = 20 ] 
18:11:20: [ GetCardStatus() , Command count = 21 ] 
18:11:20: [ GetFileSize(0x21) , Command count = 22 ] 
18:11:20: [ GetCardStatus() , Command count = 23 ] 
18:11:20: [ GetFileSize(0x33) , Command count = 24 ] 
18:11:20: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x33, 0x1) , Command count = 25 ] 
18:11:20: [ GetFileSize(0x1F) , Command count = 26 ] 
18:11:20: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x1F, 0x1) , Command count = 27 ] 
18:11:20: [ GetFileSize(0x2A) , Command count = 28 ] 
18:11:20: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x2A, 0x1) , Command count = 29 ] 
18:11:20: [ ReadCfgConf(<0x1000/0x200, Spc, pat:0x0>, 0x1) , Command count = 30 ] 
18:11:20: [ ReadFirmwareParameter(<0x1000/0x200, Spc, pat:0x0>, 0x2) , Command count = 31 ] 
18:11:20: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_BE) , Command count = 32 ] 
18:11:20: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_PRODUCT) , Command count = 33 ] 
18:11:20: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_FE_SD) , Command count = 34 ] 
18:11:20: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, 0x0) , Command count = 35 ] 
18:11:20: [ GetFileSize(0x33) , Command count = 36 ] 
18:11:21: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 37 ] 
18:11:21: [ GetFileSize(0x33) , Command count = 38 ] 
18:11:21: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 39 ] 
18:11:21: [ GetIpVersionInfo() , Command count = 40 ] 
18:11:21: [ GetPhysicalChipsInfo() , Command count = 41 ] 
18:11:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0653B480>, <0x200/0x200, Arb>) , Command count = 42 ] 
18:11:21: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 43 ] 

<<<<<<<<<<<<<<<         TEST HEADER          >>>>>>>>>>>>>>>

Application                :  TestRunner.py
Application version        :  SD_DVT_CQ_Spec 6.0.0
Application folder         :  C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT
Command line               :  --protocol=sd --sdtestid=ACMD4102 --dbconnection=none --adapter=SD05412_9ADT --sdConfiguration=SDR50 --projectconfig=C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB --paramsfile=C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB\Colibri_SD_HC_I059_SDR104_Prem_C10_U1.txt --logfilename=C:\Results\ACMD4102_CQ.txt --CQ=1
Protocol                   :  sd
Serial number (CInfo)      :  sdin1091
Adapter                    :  SDR Tester (S#: SD05412_9ADT): (Slot#:0)
Adapter serial number      :  SD05412_9ADT
Adapter type               :  USD
Capacity                   :  32G
Firmware revision          :  6RB C030
Flashware revision         :  6RB C030
IP Version Info            :  '' 01.04.00... ID 0x20
                           :  '' 00.01.00... ID 0x10
Memory ID                  :  453CA9A27A510B140000000000000000
Controller                 :  81
Trim settings              :  <Unavailable>
Model revision             :  <Unavailable>
Stream name                :  <Unavailable>
FE IP                      :  1
Romware revision           :  RRBZ1152
Architecture               :  Gen 6
Model                      :  SanDisk   COLIBRI
Memory type                :  Unknown Device Type-2LC x 1
ASIC id                    :  81
Controller type            :  Unknown Controller   UMC-J
Driver version (actual)    :  10.0.0.1 (0x a.0.0.1)
Driver version (released)  :  7.1.4.3 (0x 7.1.4.3)
Date and time              :  2016-11-28 18:11:21
Host name                  :  SDDVT_Test2
Host IP address            :  10.65.153.121
Operating system           :  Microsoft Windows [Version 6.1.7601] Service Pack 1
SanDisk Python version     :  1.17.5rc3
CTF/PySFCL build number    :  1.3.217491.217491
PySFCL version             :  1.3.217491
CTF version                :  1.3
Python version             :  2.4.2
Project Name(Validation)   :  <None>


<<<<<<<<<<<<<<<      SFCL CONFIGURATION      >>>>>>>>>>>>>>>

[SD enumeration]
cmdtiming=0
useRelay=0
autocompare=0
relayPolarity=1
relaySleep=500
measureCmdLatency=1
logicalChunkSize=0
diagDisabled=0
diagCmdTimeout=800
useVddf=on
nethostloglevel=
nethostautoCompare=on
CmdManShowProgress=off
nethostsendtimeout=240000
nethostreceivetimeout=240000
countOfRetryCmdIfCrc=3
enableOORPatch=
lbaForSctpCommands=0x100
subProtocol=0
doDle=0
diagnosticChunkSize=128
logmsgformat=timeMessage
logtimeformat=time
relaySlot=0
unloadDll=on
hardTimeoutUnloadDll=on
minDuration=7200
remoteDevice=
skipProduction=0
ishighspeedmode=0
highfreqinhz=500
modeldelaytimeindiagnostic=0
cqDataTransferPollingShortInterval=1000
cqDataStatusPollingLongInterval=1800000
sataPort0ToRelaySlot=0
sataPort1ToRelaySlot=0
sataPort2ToRelaySlot=0
sataPort3ToRelaySlot=0
relayToComportMapping=1
sdbToComportMapping=1
sataAdapterPort0=0
sataAdapterPort1=0
sataAdapterPort2=0
sataAdapterPort3=0
sataPort0ToMubIndx=1
sataPort1ToMubIndx=1
sataPort2ToMubIndx=1
sataPort3ToMubIndx=1

[Common]
enableChunkTraces=off
enablePythonTraceback=1
sctpPhaseDelay=0
printcommandcount=on
debugfilepath=
initXMLPath=\\regression.lab.sandisk.com\shared\configurations
delayBeforePwrCycle=0
delayAfterPwrCycle=0
reportCountStatistics=1
reportPackage=0
sfclConfig=Common

<<<<<<<<<<<<<<<          CARD INFO           >>>>>>>>>>>>>>>

Number Of LBAs  :  0x3b72400
Card Is Locked  :  No
Secure Area     :  0x28000
Card Secure     :  No
WP map          :

<<<<<<<<<<<<<<<           CID INFO           >>>>>>>>>>>>>>>

Manufacturer Id  :  0x3
Card/BGA         :  0
Application Id   :  0x5344
ProductName      :  AGGCD
ProductRev       :  0x80
SerialNumber     :  0x23482900
Reserved         :  0x23482900
Year             :  2000
Month            :  11
CRC Check Sum    :  0x5
Not Used         :

<<<<<<<<<<<<<<<           CSD INFO           >>>>>>>>>>>>>>>

CSD Structure                     :  0x1
reserv. 1                         :  0x0
TAAC                              :  0xe
NSAC*100                          :  0x0
data transfer rate                :  0x32
card command classes CCC          :  0x5b5
max. read data Blk. length        :  0x9
partial blocks for read allowed   :  0x0
write block misalignment          :  0x0
read block misalignment           :  0x0
DSR implemented                   :  0x0
reserved 2                        :  0x0
device size                       :  0xedc8
Reserv3                           :  0x0
SD Erase Blk Len En               :  0x1
SD Sec Size                       :  0x7f
write protect group size          :  0x0
write protect group enable        :  0x0
Reserv4                           :  0x0
write speed factor                :  0x2
max. write data blk. length       :  0x9
partial blocks for write allowed  :  0x0
File Format Group                 :  0x0
copy flag(OTP)                    :  0x1
permanent write protection        :  0x0
temporary write protection        :  0x0
File Format                       :  0x0
CRC                               :  0x0
<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

<<<<<<<<<<<<<<<    COMMAND LINE ARGUMENTS    >>>>>>>>>>>>>>>


Processed command-line options:
   --protocol                                       : sd
   --adapterspecifier                               : ain:-1,desc:SD05412_9ADT
   --extcmdset                                      : FBCC
   --sdtestid                                       : ACMD4102
   --sdconfiguration                                : SDR50
   --cyclecount                                     : 1
   --testduration                                   : 20h
   --writereadpercent                               : 100
   --paramsfile                                     : 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB\Colibri_SD_HC_I059_SDR104_Prem_C10_U1.txt'
   --randomseed                                     : 20683952186
   --projectconfig                                  : C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB
   --logfiledir                                     : C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\DvtTestLogs
   --hostlog                                        : 0
   --cq                                             : 1
   --dbconnection                                   : 'none'
   --temperature                                    : 25
   --voltage                                        : 0.00
   --logfilename                                    : 'C:\Results\ACMD4102_CQ.txt'
   --logtostdout                                    : Y
   --overwriteexistinglogfile                       : Y
   --logrotationspecifier                           : NoRotation
   --loglevel                                       : <4, INFO>
   --testcomment                                    : None
   --dbproject                                      : CTFW_QA
   --mdfwprojectid                                  : None
   --mdconfigid                                     : None
   --mdtestid                                       : None
   --valid                                          : True
   --waitTime                                       : None
   --jitter                                         : F
   --testlimits                                     : <None>-<None>
   --LabID                                          : None
   --DutID                                          : None
   --LaunchId                                       : None
   --TestQueueId                                    : None
   --xfermode                                       : <N>
   --networkperiod                                  : <N>
   --networkpath                                    : <N>
   --dumpfile                                       : 
   --printcommandcount                              : N
   --debugfilepath                                  : <N>
   --chpfilename                                    : <N>
   --enablecmdhistory                               : Y
   --cmdhistextfilename                             : <N>
   --cmdhistcsvfilename                             : <N>
   --histdisplaysizes                               : 0,250
   --stoponcommands                                 : <N>
   --notifyemailid                                  : <N>
   --spyoncommands                                  : <N>
   --notifyoncommands                               : <N>
   --CmdManShowProgress                             : 'off'
   --enablePowerCycle                               : '1'
   --measureCmdLatency                              : '1'
   --useVddf                                        : 'on'
   --gvi                                            : 'off'
   --gviOnFly                                       : 'off'
   --gviEncryption                                  : '0'
   --remoteDevice                                   : ''
   --skipProduction                                 : '0'
   --forceMultipleMode                              : 'off'
   --countOfRetryCmdIfCrc                           : '3'
   --enableOORPatch                                 : 'on'
   --connectonly                                    : 'off'
   --nethostautocompare                             : 'on'
   --nethostpowercycle                              : '0'
   --nethostloglevel                                : '3'
   --nethostlogconsole                              : '0'
   --nethostsanitychecks                            : '0'
   --nethostsendtimeout                             : '240000'
   --nethostreceivetimeout                          : '240000'
   --subProtocol                                    : '0'
   --useVccq                                        : '3.3'
   --maxprotocoloverhead                            : '0'
   --maxprotocoltimingmode                          : '0'
   --isHighSpeedMode                                : '0'
   --highFreqInHz                                   : '500'
   --doDle                                          : '0'
   --lbaForSctpCommands                             : '0x100'
   --cmdfilename                                    : ''
   --cmdtofilewrites                                : '0'
   --cmdtiming                                      : '0'
   --cmdtocsv                                       : '0'
   --logicalChunkSize                               : '0'
   --diagnosticChunkSize                            : '128'
   --readChunkSize                                  : '0'
   --writeChunkSize                                 : '0'
   --useRelay                                       : '0'
   --sataPort0ToRelaySlot                           : '0'
   --sataPort1ToRelaySlot                           : '0'
   --sataPort2ToRelaySlot                           : '0'
   --sataPort3ToRelaySlot                           : '0'
   --relayToComportMapping                          : '1'
   --useSDB                                         : '0'
   --sdbToComportMapping                            : '1'
   --sataAdapterPort0                               : '0'
   --sataAdapterPort1                               : '0'
   --sataAdapterPort2                               : '0'
   --sataAdapterPort3                               : '0'
   --relayPolarity                                  : '1'
   --relaySleep                                     : '500'
   --diagCmdTimeout                                 : '800'
   --diagDisabled                                   : '0'
   --hardTimeout                                    : '30000'
   --commandscriptfolder                            : ''
   --commandscriptstart                             : '0'
   --logmsgformat                                   : 'timeMessage'
   --logtimeformat                                  : 'time'
   --relaySlot                                      : '0'
   --atbuRelaySlot                                  : '3'
   --diskCacheStore                                 : ''
   --stopOnStart                                    : '0'
   --notifyserver                                   : ''
   --notifyretry                                    : '2'
   --notifytimeout                                  : '60'
   --failonnotifytimeout                            : '0'
   --revertactions                                  : ''
   --timechangedetection                            : '0'
   --timechangecondition                            : '600'
   --timechangecheckinterval                        : '1000'
   --inputmonitor                                   : '1'
   --logtimeprecision                               : '2'
   --nonSndkDevEnumeration                          : '0'
   --modelini                                       : 'C:\Program Files\SanDisk\CTF\Dlls\model.ini'
   --sfclini                                        : 'C:\Program Files\SanDisk\CTF\Dlls\sfcl.ini'
   --relayForceDownload                             : 'off'
   --powercycleoninit                               : 'off'
   --stopBgOperationOnFail                          : 'off'
   --autocompare                                    : '0'
   --autocompareRandomseed                          : '12345678'
   --modeldelaytimeindiagnostic                     : '0'
   --ForceDownloadMechanism                         : '0'
   --EnableUARTDebugLog                             : '0'
   --UARTBaudRate                                   : '230400'
   --SerialUARTToCom                                : '0'
   --UARTDebugFilePath                              : ''
   --sataPort0ToMubIndx                             : '1'
   --sataPort1ToMubIndx                             : '1'
   --sataPort2ToMubIndx                             : '1'
   --sataPort3ToMubIndx                             : '1'
   --fclStep                                        : '0'
   --fclCollectReads                                : '0'
   --fclCollectWrites                               : '0'
   --fclCollectErases                               : '0'
   --fclCollectAOMReads                             : '0'
   --fclAomBase                                     : '10'
   --aomStep                                        : '0'
   --aomMapFile                                     : '0'
   --fclAomSaveFilesStep                            : '1000'
   --gfa                                            : '0'
   --atbuSoftwareLocation                           : ''
   --atbuMemoryName                                 : ''
   --atbuProfilesLocation                           : ''
   --atbuThresholdValue                             : '0'
   --atbuTransitionTime                             : '0'
   --atbuDcCompensation                             : ''


<<<<<<<<<<<<<<< RUNNING TEST: ACMD4102_CallAllACMD41_SPI >>>>>>>>>>>>>>>



18:11:21: MaxLba of the card: 0x3B72400 
18:11:23: ###### Running ACMD4102_CallAllACMD41_SPI Call All.
18:11:23: [ACMD4102_CallAllACMD41_SPI.py]##########CALL : ACMD4103_DVT_SD3_00_3_1_1_10_ACMD41_SDXC_SPIMode_SuccessfulScenarios ##########
18:11:29: FPGA Image Downloaded Is:C:\Program Files\SanDisk\CTF\FPGA\SD_CQ_SDR2_2-20-00-0002.bin
18:11:29: [GO7_globalPreTestingSettings]### Default Initialization Start
18:11:29: [DVTCommonLib]###  SwitchHostVoltageRegion called
18:11:30: [ SwitchHostVoltageRegion(False) , Command count = 44 ] 
18:11:30: [DVTCommonLib]###  SwitchHostVoltageRegion Completed 

18:11:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 45 ] 
18:11:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 46 ] 
18:11:32: [ CardInit() , Command count = 47 ] 
18:11:32: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 48 ] 

<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

18:11:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:11:32: ####CSD Registe 2.0 Values####
18:11:32: CSD_STRUCTURE                                 :0x1
18:11:32: Reserv1                                       :0x0
18:11:32: Time Access 1 TAAC                            :0xe
18:11:32: Time Access 2 NSAC*100                        :0x0
18:11:32: Data Transfer Rate TRAN_SPEED                 :0x32
18:11:32: Card Command Classess CCC                     :0x5b5
18:11:32: Max Read Data Block Length  READ_BL_LEN       :0x9
18:11:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:11:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:11:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:11:32: DSR(driver stage register)  DSR_IMP           :0x0
18:11:32: Reserv2                                       :0x0
18:11:32: Device Size C_SIZE                            :0xedc8
18:11:32: Reserv3                                       :0x0
18:11:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:11:32: Erase Sector Size SECTOR_SIZE                 :0x7f
18:11:32: Write Protect Group Size WP_GRP_SIZE          :0x0
18:11:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:11:32: Reserv4                                       :0x0
18:11:32: Write Speed Factor R2W_FACTOR                 :0x2
18:11:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:11:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:11:32: FILE_FORMAT_GRP                               :0x0
18:11:32: COPY flag                                     :0x1
18:11:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:11:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:11:32: File_Format                                   :0x0
18:11:32: CRC                                           :0x0
18:11:32: ####CSD Registe Values####  

18:11:32: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:11:32: ProductSerialNumber = 0x23482900
18:11:32: CardMaximumLBA      = 0x3b72400
18:11:32: CardCapacity        = 32G
18:11:32: Is card secure      = 0
18:11:32: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:11:32: [GO7_globalPreTestingSettings]### Default Initialization Completed 


18:11:32: [GO4_globalInitCard]### Switch to Specify Card Type
18:11:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:11:34: Host Frequency set to 25000 KHz
18:11:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:11:34: [GO18_globalSetVolt]### Set Host Voltage value.
18:11:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:11:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x0662C300>, 0x0, True) , Command count = 49 ] 
18:11:34: [GO18_globalSetVolt]### Host voltage value is set.
18:11:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:11:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x0662C840>, 0x0, False) , Command count = 50 ] 
18:11:34: [GO18_globalSetVolt]### Host voltage value is set.
18:11:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 51 ] 
18:11:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 52 ] 
18:11:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:11:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:11:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 53 ] 
18:11:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:11:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:11:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662C4B0>, <py_sfcl.CommandDataDefinition object at 0x0662CC60>) , Command count = 54 ] 
18:11:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:11:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662CEA0>, <py_sfcl.CommandDataDefinition object at 0x0662CCC0>) , Command count = 55 ] 
18:11:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:11:34: [ SetCardRCA(0x1, 0xD555) , Command count = 56 ] 
18:11:35: [DVTCommonLib]### Identification :Idenfication of card completed 

18:11:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:11:35: Host Frequency set to 25000 KHz
18:11:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:11:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:11:35: ####CSD Registe 2.0 Values####
18:11:35: CSD_STRUCTURE                                 :0x1
18:11:35: Reserv1                                       :0x0
18:11:35: Time Access 1 TAAC                            :0xe
18:11:35: Time Access 2 NSAC*100                        :0x0
18:11:35: Data Transfer Rate TRAN_SPEED                 :0x32
18:11:35: Card Command Classess CCC                     :0x5b5
18:11:35: Max Read Data Block Length  READ_BL_LEN       :0x9
18:11:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:11:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:11:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:11:35: DSR(driver stage register)  DSR_IMP           :0x0
18:11:35: Reserv2                                       :0x0
18:11:35: Device Size C_SIZE                            :0xedc8
18:11:35: Reserv3                                       :0x0
18:11:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:11:35: Erase Sector Size SECTOR_SIZE                 :0x7f
18:11:35: Write Protect Group Size WP_GRP_SIZE          :0x0
18:11:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:11:35: Reserv4                                       :0x0
18:11:35: Write Speed Factor R2W_FACTOR                 :0x2
18:11:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:11:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:11:35: FILE_FORMAT_GRP                               :0x0
18:11:35: COPY flag                                     :0x1
18:11:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:11:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:11:35: File_Format                                   :0x0
18:11:35: CRC                                           :0x0
18:11:35: ####CSD Registe Values####  

18:11:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:35: [GetSCRRegisterEntry] Passed
18:11:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:35: Data_Status_After Erases          : 0
18:11:35: CPRM Security Support             : No Security
18:11:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:35: Spec. Version                     : Version 3.0X
18:11:35: Extended Security Support         : Extended_Security_Not_Supported
18:11:35: Command Support                   : COMMAND_SUPPORT
18:11:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662C450>, <py_sfcl.CommandDataDefinition object at 0x0662CB70>) , Command count = 57 ] 
18:11:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:11:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662C9C0>, <py_sfcl.CommandDataDefinition object at 0x0662CE40>) , Command count = 58 ] 
18:11:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:11:35: [ SetBusWidth(0x4) , Command count = 59 ] 
18:11:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0662C960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 60 ] 
18:11:35: Protected Area Size 0x28000
18:11:35: Bus Width           2
18:11:35: Secure Mode         0
18:11:35: Speed  Class        4
18:11:35: Perf Move           0
18:11:35: Au Size             9
18:11:35: Erase Size          15
18:11:35: Erase Timeout       1
18:11:35: Erase offset        1
18:11:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:11:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:11:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 61 ] 
18:11:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:11:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:11:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:11:35: Host Frequency set to 100000 KHz
18:11:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:11:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:11:35: ####CSD Registe 2.0 Values####
18:11:35: CSD_STRUCTURE                                 :0x1
18:11:35: Reserv1                                       :0x0
18:11:35: Time Access 1 TAAC                            :0xe
18:11:35: Time Access 2 NSAC*100                        :0x0
18:11:35: Data Transfer Rate TRAN_SPEED                 :0xb
18:11:35: Card Command Classess CCC                     :0x5b5
18:11:35: Max Read Data Block Length  READ_BL_LEN       :0x9
18:11:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:11:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:11:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:11:35: DSR(driver stage register)  DSR_IMP           :0x0
18:11:35: Reserv2                                       :0x0
18:11:35: Device Size C_SIZE                            :0xedc8
18:11:35: Reserv3                                       :0x0
18:11:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:11:35: Erase Sector Size SECTOR_SIZE                 :0x7f
18:11:35: Write Protect Group Size WP_GRP_SIZE          :0x0
18:11:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:11:35: Reserv4                                       :0x0
18:11:35: Write Speed Factor R2W_FACTOR                 :0x2
18:11:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:11:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:11:35: FILE_FORMAT_GRP                               :0x0
18:11:35: COPY flag                                     :0x1
18:11:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:11:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:11:35: File_Format                                   :0x0
18:11:35: CRC                                           :0x0
18:11:35: ####CSD Registe Values####  

18:11:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662C4E0>, <py_sfcl.CommandDataDefinition object at 0x0662CC00>) , Command count = 62 ] 
18:11:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:11:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06639030>, <py_sfcl.CommandDataDefinition object at 0x06639060>) , Command count = 63 ] 
18:11:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:11:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066390F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 64 ] 
18:11:35: Protected Area Size 0x28000
18:11:35: Bus Width           2
18:11:35: Secure Mode         0
18:11:35: Speed  Class        4
18:11:35: Perf Move           0
18:11:35: Au Size             9
18:11:35: Erase Size          15
18:11:35: Erase Timeout       1
18:11:35: Erase offset        1
18:11:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:11:35: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: Call to Set_Freq_Volt_Timeout routine. 

18:11:35: globalLSHostFreq: 25000
18:11:35: Host Frequency set to 25 KHz

18:11:35: Set Volt: 3.30
18:11:35: globalVDDFMaxCurrent : 100, PowerSupply: VDDF
18:11:35: [DVTCommonLib]### setVolt[INFO] :maxVoltage=3300 V, maxCurrent=100, A2DRate=A2D_62_5_HZ Hz, PowerSupplier=True
18:11:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x066A0F00>, <None>, True) , Command count = 65 ] 
18:11:35: [DVTCommonLib]### setVolt[INFO] :Voltage is set

18:11:35: Set Volt: 3300
18:11:35: globalVDDHMaxCurrent : 300, PowerSupply: VDDH
18:11:35: [DVTCommonLib]### setVolt[INFO] :maxVoltage=3300 V, maxCurrent=300, A2DRate=A2D_62_5_HZ Hz, PowerSupplier=False
18:11:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x066A0F00>, <None>, False) , Command count = 66 ] 
18:11:35: [DVTCommonLib]### setVolt[INFO] :Voltage is set

18:11:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 67 ] 
18:11:35: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: Populate the local variables. 

18:11:35: SendOCR: 1107263488
18:11:35: ExpectOCR: 3254747136
18:11:35: SendFirstOCR: 1107263488
18:11:35: SendNextOCR: 1107263488
18:11:35: SingleCommand: 0
18:11:35: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: SingleCommandTestType: 1 = ReverseXpcS18r, 2 = ReverseXPC, 3 = ReverseS18R, 4 = ReverseHCS, 5 = RandomXpcS18r 
18:11:35: SingleCommandTestType: 1
18:11:35: Identification: 1
18:11:35: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: ProtocolMode: 1 = SD OK, 2 = SD Error, 3 = SPI OK, 4 = SPI Error 
18:11:35: ProtocolMode: 1
18:11:35: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: VerifyType:   1 = Utility_Successful_Verify.st3, 2 = Utility_Failure_Verify.st3, 3 = Utility_Successful_Verify_MaxVoltage.st3 
18:11:35: VerifyType: 0
18:11:35: SendCMD0: 1
18:11:35: SendCMD8: 1
18:11:35: SendCMD58: 1
18:11:35: SetPower: 1
18:11:35: HcsXpcS18r000: 16744448
18:11:35: HcsXpcS18r001: 33521664
18:11:35: HcsXpcS18r010: 285179904
18:11:35: HcsXpcS18r011: 301957120
18:11:35: HcsXpcS18r100: 1090486272
18:11:35: HcsXpcS18r101: 1107263488
18:11:35: HcsXpcS18r110: 1358921728
18:11:35: HcsXpcS18r111: 1375698944
18:11:35: ReadyCcs18a000: 16744448
18:11:35: ReadyCcs18a001: 33521664
18:11:35: ReadyCcs18a010: 1090486272
18:11:35: ReadyCcs18a011: 1107263488
18:11:35: ReadyCcs18a100: 2164228096
18:11:35: ReadyCcs18a101: 2181005312
18:11:35: ReadyCcs18a110: 3237969920
18:11:35: ReadyCcs18a111: 3254747136
18:11:35: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: Exit from LoadLocalVariables Routine. 

18:11:35: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : 3.1.1.10.1 
18:11:35: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : Power On ->CMD0-> CMD8->CMD58->ACMD41->CMD58 
18:11:35: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : HSC=1 S18R=Y XPC=Z  Successful Scenario
18:11:37: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:37: [ EnableACMD41() , Command count = 68 ] 
18:11:37: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:37: [DVTCommonLib]### Reset the card with OCR value : 0x40FF8000
18:11:37: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x40FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 69 ] 
18:11:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:37: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:37: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 70 ] 
18:11:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:38: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 71 ] 
18:11:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:38: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:38: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 72 ] 
18:11:38: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:40: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:40: [ EnableACMD41() , Command count = 73 ] 
18:11:40: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:40: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 74 ] 
18:11:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:40: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:40: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 75 ] 
18:11:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:40: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 76 ] 
18:11:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:40: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:40: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 77 ] 
18:11:40: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:42: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:42: [ EnableACMD41() , Command count = 78 ] 
18:11:42: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:42: [DVTCommonLib]### Reset the card with OCR value : 0x50FF8000
18:11:43: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x50FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 79 ] 
18:11:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:43: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:43: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 80 ] 
18:11:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:43: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 81 ] 
18:11:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:43: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 82 ] 
18:11:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:43: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : 3.1.1.10.2 
18:11:43: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : CMD0-> CMD8->CMD58->ACMD41->CMD58 
18:11:43: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : HSC=1 S18R=Y XPC=Z  Successful Scenario
18:11:43: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:43: [ EnableACMD41() , Command count = 83 ] 
18:11:43: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:43: [DVTCommonLib]### Reset the card with OCR value : 0x40FF8000
18:11:43: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x40FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 84 ] 
18:11:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:43: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:43: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 85 ] 
18:11:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:43: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 86 ] 
18:11:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:44: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 87 ] 
18:11:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:44: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:44: [ EnableACMD41() , Command count = 88 ] 
18:11:44: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:44: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 89 ] 
18:11:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:44: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:44: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 90 ] 
18:11:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:44: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 91 ] 
18:11:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:44: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 92 ] 
18:11:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:44: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:44: [ EnableACMD41() , Command count = 93 ] 
18:11:44: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:44: [DVTCommonLib]### Reset the card with OCR value : 0x50FF8000
18:11:44: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x50FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 94 ] 
18:11:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:44: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:44: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 95 ] 
18:11:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:45: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 96 ] 
18:11:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:45: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 97 ] 
18:11:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:45: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : 3.1.1.10.1 
18:11:45: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : Power On ->CMD0-> CMD8->CMD58->ACMD41->CMD58 
18:11:45: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : HSC=1 S18R=Y XPC=Z  Successful Scenario
18:11:45: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:45: [ EnableACMD41() , Command count = 98 ] 
18:11:45: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:45: [DVTCommonLib]### Reset the card with OCR value : 0x40FF8000
18:11:45: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x40FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 99 ] 
18:11:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:45: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:45: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 100 ] 
18:11:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:45: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 101 ] 
18:11:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:45: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 102 ] 
18:11:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:45: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:45: [ EnableACMD41() , Command count = 103 ] 
18:11:45: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:45: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 104 ] 
18:11:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:45: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:45: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 105 ] 
18:11:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:46: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 106 ] 
18:11:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:46: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 107 ] 
18:11:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:46: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:46: [ EnableACMD41() , Command count = 108 ] 
18:11:46: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:46: [DVTCommonLib]### Reset the card with OCR value : 0x50FF8000
18:11:46: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x50FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 109 ] 
18:11:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:46: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 110 ] 
18:11:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:46: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 111 ] 
18:11:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:46: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 112 ] 
18:11:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:46: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : 3.1.1.10.2 
18:11:46: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : CMD0-> CMD8->CMD58->ACMD41->CMD58 
18:11:46: ### ACMD41_SDXC_SPIMode_SuccessfulScenarios [Info] : HSC=1 S18R=Y XPC=Z  Successful Scenario
18:11:46: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:46: [ EnableACMD41() , Command count = 113 ] 
18:11:46: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:46: [DVTCommonLib]### Reset the card with OCR value : 0x40FF8000
18:11:46: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x40FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 114 ] 
18:11:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:47: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 115 ] 
18:11:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:47: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 116 ] 
18:11:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:47: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 117 ] 
18:11:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:47: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:47: [ EnableACMD41() , Command count = 118 ] 
18:11:47: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:47: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 119 ] 
18:11:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:47: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 120 ] 
18:11:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:47: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 121 ] 
18:11:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:47: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 122 ] 
18:11:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:47: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:47: [ EnableACMD41() , Command count = 123 ] 
18:11:47: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:47: [DVTCommonLib]### Reset the card with OCR value : 0x50FF8000
18:11:47: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x50FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 124 ] 
18:11:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:48: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 125 ] 
18:11:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:48: [ WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0) , Command count = 126 ] 
18:11:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:48: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x0 to EndLba:0x1 with Zero's Pattern
18:11:48: [ RdLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, True, False, False, False, 0x0, False, 0x0, True) , Command count = 127 ] 
18:11:48: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x0 to EndLba:0x1 with Zero's Pattern 

18:11:48: [ACMD4102_CallAllACMD41_SPI.py]##########CALL : ACMD4104_DVT_SD3_00_3_1_1_11_ACMD41_SDXC_SPIMode_FailScenarios ##########
18:11:48: [GO4_globalInitCard]### Switch to Specify Card Type
18:11:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:11:50: Host Frequency set to 25000 KHz
18:11:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:11:50: [GO18_globalSetVolt]### Set Host Voltage value.
18:11:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:11:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x06639A50>, 0x0, True) , Command count = 128 ] 
18:11:50: [GO18_globalSetVolt]### Host voltage value is set.
18:11:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:11:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x066398A0>, 0x0, False) , Command count = 129 ] 
18:11:50: [GO18_globalSetVolt]### Host voltage value is set.
18:11:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 130 ] 
18:11:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:11:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 131 ] 
18:11:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:11:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:11:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 132 ] 
18:11:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:11:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:11:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663F0F0>, <py_sfcl.CommandDataDefinition object at 0x0663F060>) , Command count = 133 ] 
18:11:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:11:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663F120>, <py_sfcl.CommandDataDefinition object at 0x0663F150>) , Command count = 134 ] 
18:11:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:11:50: [ SetCardRCA(0x1, 0xD555) , Command count = 135 ] 
18:11:50: [DVTCommonLib]### Identification :Idenfication of card completed 

18:11:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:11:50: Host Frequency set to 25000 KHz
18:11:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:11:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:11:50: ####CSD Registe 2.0 Values####
18:11:50: CSD_STRUCTURE                                 :0x1
18:11:50: Reserv1                                       :0x0
18:11:50: Time Access 1 TAAC                            :0xe
18:11:50: Time Access 2 NSAC*100                        :0x0
18:11:50: Data Transfer Rate TRAN_SPEED                 :0x32
18:11:50: Card Command Classess CCC                     :0x5b5
18:11:50: Max Read Data Block Length  READ_BL_LEN       :0x9
18:11:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:11:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:11:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:11:50: DSR(driver stage register)  DSR_IMP           :0x0
18:11:50: Reserv2                                       :0x0
18:11:50: Device Size C_SIZE                            :0xedc8
18:11:50: Reserv3                                       :0x0
18:11:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:11:50: Erase Sector Size SECTOR_SIZE                 :0x7f
18:11:50: Write Protect Group Size WP_GRP_SIZE          :0x0
18:11:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:11:50: Reserv4                                       :0x0
18:11:50: Write Speed Factor R2W_FACTOR                 :0x2
18:11:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:11:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:11:50: FILE_FORMAT_GRP                               :0x0
18:11:50: COPY flag                                     :0x1
18:11:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:11:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:11:50: File_Format                                   :0x0
18:11:50: CRC                                           :0x0
18:11:50: ####CSD Registe Values####  

18:11:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:11:50: [GetSCRRegisterEntry] Passed
18:11:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:11:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:11:50: Data_Status_After Erases          : 0
18:11:50: CPRM Security Support             : No Security
18:11:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:11:50: Spec. Version                     : Version 3.0X
18:11:50: Extended Security Support         : Extended_Security_Not_Supported
18:11:50: Command Support                   : COMMAND_SUPPORT
18:11:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:11:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663F3C0>, <py_sfcl.CommandDataDefinition object at 0x0663F1E0>) , Command count = 136 ] 
18:11:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:11:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663F240>, <py_sfcl.CommandDataDefinition object at 0x0663F270>) , Command count = 137 ] 
18:11:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:11:50: [ SetBusWidth(0x4) , Command count = 138 ] 
18:11:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:11:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0663F330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 139 ] 
18:11:50: Protected Area Size 0x28000
18:11:50: Bus Width           2
18:11:50: Secure Mode         0
18:11:50: Speed  Class        4
18:11:50: Perf Move           0
18:11:50: Au Size             9
18:11:50: Erase Size          15
18:11:50: Erase Timeout       1
18:11:50: Erase offset        1
18:11:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:11:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:11:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:11:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 140 ] 
18:11:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:11:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:11:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:11:51: Host Frequency set to 100000 KHz
18:11:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:11:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:11:51: ####CSD Registe 2.0 Values####
18:11:51: CSD_STRUCTURE                                 :0x1
18:11:51: Reserv1                                       :0x0
18:11:51: Time Access 1 TAAC                            :0xe
18:11:51: Time Access 2 NSAC*100                        :0x0
18:11:51: Data Transfer Rate TRAN_SPEED                 :0xb
18:11:51: Card Command Classess CCC                     :0x5b5
18:11:51: Max Read Data Block Length  READ_BL_LEN       :0x9
18:11:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:11:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:11:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:11:51: DSR(driver stage register)  DSR_IMP           :0x0
18:11:51: Reserv2                                       :0x0
18:11:51: Device Size C_SIZE                            :0xedc8
18:11:51: Reserv3                                       :0x0
18:11:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:11:51: Erase Sector Size SECTOR_SIZE                 :0x7f
18:11:51: Write Protect Group Size WP_GRP_SIZE          :0x0
18:11:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:11:51: Reserv4                                       :0x0
18:11:51: Write Speed Factor R2W_FACTOR                 :0x2
18:11:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:11:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:11:51: FILE_FORMAT_GRP                               :0x0
18:11:51: COPY flag                                     :0x1
18:11:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:11:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:11:51: File_Format                                   :0x0
18:11:51: CRC                                           :0x0
18:11:51: ####CSD Registe Values####  

18:11:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663F600>, <py_sfcl.CommandDataDefinition object at 0x0663F420>) , Command count = 141 ] 
18:11:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:11:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663F480>, <py_sfcl.CommandDataDefinition object at 0x0663F4B0>) , Command count = 142 ] 
18:11:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:11:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:11:51: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: Call to Set_Freq_Volt_Timeout routine. 

18:11:51: globalLSHostFreq: 25000
18:11:51: Host Frequency set to 25 KHz

18:11:51: Set Volt: 3.30
18:11:51: globalVDDFMaxCurrent : 100, PowerSupply: VDDF
18:11:51: [DVTCommonLib]### setVolt[INFO] :maxVoltage=3300 V, maxCurrent=100, A2DRate=A2D_62_5_HZ Hz, PowerSupplier=True
18:11:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x0663F510>, <None>, True) , Command count = 143 ] 
18:11:51: [DVTCommonLib]### setVolt[INFO] :Voltage is set

18:11:51: Set Volt: 3300
18:11:51: globalVDDHMaxCurrent : 300, PowerSupply: VDDH
18:11:51: [DVTCommonLib]### setVolt[INFO] :maxVoltage=3300 V, maxCurrent=300, A2DRate=A2D_62_5_HZ Hz, PowerSupplier=False
18:11:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x0663F510>, <None>, False) , Command count = 144 ] 
18:11:51: [DVTCommonLib]### setVolt[INFO] :Voltage is set

18:11:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 145 ] 
18:11:51: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: Populate the local variables. 

18:11:51: SendOCR: 1107263488
18:11:51: ExpectOCR: 3254747136
18:11:51: SendFirstOCR: 1107263488
18:11:51: SendNextOCR: 1107263488
18:11:51: SingleCommand: 0
18:11:51: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: SingleCommandTestType: 1 = ReverseXpcS18r, 2 = ReverseXPC, 3 = ReverseS18R, 4 = ReverseHCS, 5 = RandomXpcS18r 
18:11:51: SingleCommandTestType: 1
18:11:51: Identification: 1
18:11:51: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: ProtocolMode: 1 = SD OK, 2 = SD Error, 3 = SPI OK, 4 = SPI Error 
18:11:51: ProtocolMode: 1
18:11:51: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: VerifyType:   1 = Utility_Successful_Verify.st3, 2 = Utility_Failure_Verify.st3, 3 = Utility_Successful_Verify_MaxVoltage.st3 
18:11:51: VerifyType: 0
18:11:51: SendCMD0: 1
18:11:51: SendCMD8: 1
18:11:51: SendCMD58: 1
18:11:51: SetPower: 1
18:11:51: HcsXpcS18r000: 16744448
18:11:51: HcsXpcS18r001: 33521664
18:11:51: HcsXpcS18r010: 285179904
18:11:51: HcsXpcS18r011: 301957120
18:11:51: HcsXpcS18r100: 1090486272
18:11:51: HcsXpcS18r101: 1107263488
18:11:51: HcsXpcS18r110: 1358921728
18:11:51: HcsXpcS18r111: 1375698944
18:11:51: ReadyCcs18a000: 16744448
18:11:51: ReadyCcs18a001: 33521664
18:11:51: ReadyCcs18a010: 1090486272
18:11:51: ReadyCcs18a011: 1107263488
18:11:51: ReadyCcs18a100: 2164228096
18:11:51: ReadyCcs18a101: 2181005312
18:11:51: ReadyCcs18a110: 3237969920
18:11:51: ReadyCcs18a111: 3254747136
18:11:51: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: Exit from LoadLocalVariables Routine. 

18:11:53: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:53: [ EnableACMD41() , Command count = 146 ] 
18:11:53: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:53: [DVTCommonLib]### Reset the card with OCR value : 0xFF8000
18:11:53: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0xFF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 147 ] 
18:11:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:53: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:53: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:11:53: OCR : 1107263488
18:11:53: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:11:53: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 148 ] 
18:11:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:53: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:53: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:11:55: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:55: [ EnableACMD41() , Command count = 149 ] 
18:11:55: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:55: [DVTCommonLib]### Reset the card with OCR value : 0x1FF8000
18:11:55: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x1FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 150 ] 
18:11:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:55: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:55: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:11:55: OCR : 1107263488
18:11:55: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:11:56: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 151 ] 
18:11:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:56: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:56: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:11:58: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:58: [ EnableACMD41() , Command count = 152 ] 
18:11:58: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:58: [DVTCommonLib]### Reset the card with OCR value : 0x10FF8000
18:11:58: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x10FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 153 ] 
18:11:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:58: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:58: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:11:58: OCR : 1107263488
18:11:58: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:11:58: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 154 ] 
18:11:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:58: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:58: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:11:58: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:58: [ EnableACMD41() , Command count = 155 ] 
18:11:58: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:58: [DVTCommonLib]### Reset the card with OCR value : 0xFF8000
18:11:58: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0xFF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 156 ] 
18:11:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:58: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:58: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:11:58: OCR : 1107263488
18:11:58: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:11:58: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 157 ] 
18:11:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:58: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:58: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:11:58: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:58: [ EnableACMD41() , Command count = 158 ] 
18:11:58: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:58: [DVTCommonLib]### Reset the card with OCR value : 0x1FF8000
18:11:59: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x1FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 159 ] 
18:11:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:59: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:59: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:11:59: OCR : 1107263488
18:11:59: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:11:59: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 160 ] 
18:11:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:59: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:59: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:11:59: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:59: [ EnableACMD41() , Command count = 161 ] 
18:11:59: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:59: [DVTCommonLib]### Reset the card with OCR value : 0x10FF8000
18:11:59: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x10FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 162 ] 
18:11:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:59: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:59: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:11:59: OCR : 1107263488
18:11:59: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:11:59: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 163 ] 
18:11:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:59: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:59: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:11:59: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:59: [ EnableACMD41() , Command count = 164 ] 
18:11:59: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:59: [DVTCommonLib]### Reset the card with OCR value : 0xFF8000
18:11:59: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0xFF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 165 ] 
18:11:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:59: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:59: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:11:59: OCR : 1107263488
18:11:59: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:11:59: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 166 ] 
18:11:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:11:59: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:11:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:11:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:11:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:11:59: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:11:59: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:11:59: [ EnableACMD41() , Command count = 167 ] 
18:11:59: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:11:59: [DVTCommonLib]### Reset the card with OCR value : 0x1FF8000
18:12:00: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x1FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 168 ] 
18:12:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:12:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:12:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:00: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:12:00: OCR : 1107263488
18:12:00: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:12:00: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 169 ] 
18:12:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:12:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:12:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:00: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:12:00: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:12:00: [ EnableACMD41() , Command count = 170 ] 
18:12:00: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:12:00: [DVTCommonLib]### Reset the card with OCR value : 0x10FF8000
18:12:00: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x10FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 171 ] 
18:12:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:12:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:12:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:00: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:12:00: OCR : 1107263488
18:12:00: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:12:00: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 172 ] 
18:12:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:12:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:12:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:00: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:12:00: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:12:00: [ EnableACMD41() , Command count = 173 ] 
18:12:00: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:12:00: [DVTCommonLib]### Reset the card with OCR value : 0xFF8000
18:12:00: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0xFF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 174 ] 
18:12:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:12:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:12:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:00: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:12:00: OCR : 1107263488
18:12:00: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:12:00: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 175 ] 
18:12:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:12:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:12:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:00: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:12:00: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:12:00: [ EnableACMD41() , Command count = 176 ] 
18:12:00: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:12:00: [DVTCommonLib]### Reset the card with OCR value : 0x1FF8000
18:12:01: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x1FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 177 ] 
18:12:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:12:01: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:12:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:01: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:12:01: OCR : 1107263488
18:12:01: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:12:01: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 178 ] 
18:12:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:12:01: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:12:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:01: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:12:01: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:12:01: [ EnableACMD41() , Command count = 179 ] 
18:12:01: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:12:01: [DVTCommonLib]### Reset the card with OCR value : 0x10FF8000
18:12:01: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x10FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 180 ] 
18:12:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:12:01: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:12:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:01: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:12:01: OCR : 1107263488
18:12:01: [DVTCommonLib]### Reset the card with OCR value : 0x0
18:12:01: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x0, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 181 ] 
18:12:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:12:01: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:12:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:01: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:12:01: [ACMD4102_CallAllACMD41_SPI.py]##########CALL : ACMD4106_DVT_SD3_00_3_1_1_13_ACMD41_SDandSPI_CombinedScenarios ##########
18:12:01: [GO4_globalInitCard]### Switch to Specify Card Type
18:12:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:12:03: Host Frequency set to 25000 KHz
18:12:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:12:03: [GO18_globalSetVolt]### Set Host Voltage value.
18:12:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:12:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x0663FC00>, 0x0, True) , Command count = 182 ] 
18:12:03: [GO18_globalSetVolt]### Host voltage value is set.
18:12:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:12:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x0663F9F0>, 0x0, False) , Command count = 183 ] 
18:12:03: [GO18_globalSetVolt]### Host voltage value is set.
18:12:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 184 ] 
18:12:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 185 ] 
18:12:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:12:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 186 ] 
18:12:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:12:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663FAE0>, <py_sfcl.CommandDataDefinition object at 0x0663FD50>) , Command count = 187 ] 
18:12:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663FEA0>, <py_sfcl.CommandDataDefinition object at 0x0663F7B0>) , Command count = 188 ] 
18:12:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
18:12:03: [ SetCardRCA(0x1, 0xD555) , Command count = 189 ] 
18:12:03: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:12:04: Host Frequency set to 25000 KHz
18:12:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:12:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:12:04: ####CSD Registe 2.0 Values####
18:12:04: CSD_STRUCTURE                                 :0x1
18:12:04: Reserv1                                       :0x0
18:12:04: Time Access 1 TAAC                            :0xe
18:12:04: Time Access 2 NSAC*100                        :0x0
18:12:04: Data Transfer Rate TRAN_SPEED                 :0x32
18:12:04: Card Command Classess CCC                     :0x5b5
18:12:04: Max Read Data Block Length  READ_BL_LEN       :0x9
18:12:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:12:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:12:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:12:04: DSR(driver stage register)  DSR_IMP           :0x0
18:12:04: Reserv2                                       :0x0
18:12:04: Device Size C_SIZE                            :0xedc8
18:12:04: Reserv3                                       :0x0
18:12:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:12:04: Erase Sector Size SECTOR_SIZE                 :0x7f
18:12:04: Write Protect Group Size WP_GRP_SIZE          :0x0
18:12:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:12:04: Reserv4                                       :0x0
18:12:04: Write Speed Factor R2W_FACTOR                 :0x2
18:12:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:12:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:12:04: FILE_FORMAT_GRP                               :0x0
18:12:04: COPY flag                                     :0x1
18:12:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:12:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:12:04: File_Format                                   :0x0
18:12:04: CRC                                           :0x0
18:12:04: ####CSD Registe Values####  

18:12:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:04: [GetSCRRegisterEntry] Passed
18:12:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:04: Data_Status_After Erases          : 0
18:12:04: CPRM Security Support             : No Security
18:12:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:04: Spec. Version                     : Version 3.0X
18:12:04: Extended Security Support         : Extended_Security_Not_Supported
18:12:04: Command Support                   : COMMAND_SUPPORT
18:12:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663FB40>, <py_sfcl.CommandDataDefinition object at 0x0663FFC0>) , Command count = 190 ] 
18:12:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:12:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06649030>, <py_sfcl.CommandDataDefinition object at 0x06649060>) , Command count = 191 ] 
18:12:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:12:04: [ SetBusWidth(0x4) , Command count = 192 ] 
18:12:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06649120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 193 ] 
18:12:04: Protected Area Size 0x28000
18:12:04: Bus Width           2
18:12:04: Secure Mode         0
18:12:04: Speed  Class        4
18:12:04: Perf Move           0
18:12:04: Au Size             9
18:12:04: Erase Size          15
18:12:04: Erase Timeout       1
18:12:04: Erase offset        1
18:12:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:12:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:12:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 194 ] 
18:12:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:12:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:12:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:12:04: Host Frequency set to 100000 KHz
18:12:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:12:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:12:04: ####CSD Registe 2.0 Values####
18:12:04: CSD_STRUCTURE                                 :0x1
18:12:04: Reserv1                                       :0x0
18:12:04: Time Access 1 TAAC                            :0xe
18:12:04: Time Access 2 NSAC*100                        :0x0
18:12:04: Data Transfer Rate TRAN_SPEED                 :0xb
18:12:04: Card Command Classess CCC                     :0x5b5
18:12:04: Max Read Data Block Length  READ_BL_LEN       :0x9
18:12:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:12:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:12:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:12:04: DSR(driver stage register)  DSR_IMP           :0x0
18:12:04: Reserv2                                       :0x0
18:12:04: Device Size C_SIZE                            :0xedc8
18:12:04: Reserv3                                       :0x0
18:12:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:12:04: Erase Sector Size SECTOR_SIZE                 :0x7f
18:12:04: Write Protect Group Size WP_GRP_SIZE          :0x0
18:12:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:12:04: Reserv4                                       :0x0
18:12:04: Write Speed Factor R2W_FACTOR                 :0x2
18:12:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:12:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:12:04: FILE_FORMAT_GRP                               :0x0
18:12:04: COPY flag                                     :0x1
18:12:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:12:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:12:04: File_Format                                   :0x0
18:12:04: CRC                                           :0x0
18:12:04: ####CSD Registe Values####  

18:12:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066493C0>, <py_sfcl.CommandDataDefinition object at 0x066491E0>) , Command count = 195 ] 
18:12:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:12:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06649240>, <py_sfcl.CommandDataDefinition object at 0x06649270>) , Command count = 196 ] 
18:12:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:12:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:12:04: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: Call to Set_Freq_Volt_Timeout routine. 

18:12:04: globalLSHostFreq: 25000
18:12:04: Host Frequency set to 25 KHz

18:12:04: Set Volt: 3.30
18:12:04: globalVDDFMaxCurrent : 100, PowerSupply: VDDF
18:12:04: [DVTCommonLib]### setVolt[INFO] :maxVoltage=3300 V, maxCurrent=100, A2DRate=A2D_62_5_HZ Hz, PowerSupplier=True
18:12:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x066492D0>, <None>, True) , Command count = 197 ] 
18:12:04: [DVTCommonLib]### setVolt[INFO] :Voltage is set

18:12:04: Set Volt: 3300
18:12:04: globalVDDHMaxCurrent : 300, PowerSupply: VDDH
18:12:04: [DVTCommonLib]### setVolt[INFO] :maxVoltage=3300 V, maxCurrent=300, A2DRate=A2D_62_5_HZ Hz, PowerSupplier=False
18:12:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x066492D0>, <None>, False) , Command count = 198 ] 
18:12:04: [DVTCommonLib]### setVolt[INFO] :Voltage is set

18:12:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 199 ] 
18:12:04: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: Populate the local variables. 

18:12:04: SendOCR: 1107263488
18:12:04: ExpectOCR: 3254747136
18:12:04: SendFirstOCR: 1107263488
18:12:04: SendNextOCR: 1107263488
18:12:04: SingleCommand: 0
18:12:04: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: SingleCommandTestType: 1 = ReverseXpcS18r, 2 = ReverseXPC, 3 = ReverseS18R, 4 = ReverseHCS, 5 = RandomXpcS18r 
18:12:04: SingleCommandTestType: 1
18:12:04: Identification: 1
18:12:04: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: ProtocolMode: 1 = SD OK, 2 = SD Error, 3 = SPI OK, 4 = SPI Error 
18:12:04: ProtocolMode: 1
18:12:04: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: VerifyType:   1 = Utility_Successful_Verify.st3, 2 = Utility_Failure_Verify.st3, 3 = Utility_Successful_Verify_MaxVoltage.st3 
18:12:04: VerifyType: 0
18:12:04: SendCMD0: 1
18:12:04: SendCMD8: 1
18:12:04: SendCMD58: 1
18:12:04: SetPower: 1
18:12:04: HcsXpcS18r000: 16744448
18:12:04: HcsXpcS18r001: 33521664
18:12:04: HcsXpcS18r010: 285179904
18:12:04: HcsXpcS18r011: 301957120
18:12:04: HcsXpcS18r100: 1090486272
18:12:04: HcsXpcS18r101: 1107263488
18:12:04: HcsXpcS18r110: 1358921728
18:12:04: HcsXpcS18r111: 1375698944
18:12:04: ReadyCcs18a000: 16744448
18:12:04: ReadyCcs18a001: 33521664
18:12:04: ReadyCcs18a010: 1090486272
18:12:04: ReadyCcs18a011: 1107263488
18:12:04: ReadyCcs18a100: 2164228096
18:12:04: ReadyCcs18a101: 2181005312
18:12:04: ReadyCcs18a110: 3237969920
18:12:04: ReadyCcs18a111: 3254747136
18:12:04: ##ACMD4120_Utility_LoadLocal_Variables[INFO]: Exit from LoadLocalVariables Routine. 

18:12:04: ##ACMD4119_Utility_LoadCMD20_Variables[INFO]: ReadType: 1 = ReadAll 
18:12:04: ##ACMD4119_Utility_LoadCMD20_Variables[INFO]: RU Sequence = 1, RU after RU, AU after RU, RuSequence = 0, Jump to random free AU
18:12:04: ##ACMD4119_Utility_LoadCMD20_Variables[INFO]: ExpectSequence: 1 = In Sequence, 2 = Out of sequence 
18:12:04: Call API GetFatAddr() to get fat addresses 
18:12:04: [ GetFileSize(0x2A) , Command count = 200 ] 
18:12:04: [ ReadFile(<0x200/0x200, Spc, pat:0xCE>, 0x2A, 0x1) , Command count = 201 ] 
18:12:04: FAT Start Address 8192: 8192
18:12:04: FAT Block Count 8192: 16384
18:12:04: FAT User Area First LBA 16384 : 24576
18:12:04: RU SIZE : 0
18:12:04: FAT Bitmap Start Address: 0
18:12:04: FAT Bitmap Block Count: 0
18:12:04: ###AUSizeCalculation[INFO]: Call GetSDStatus API to get AU Size value

18:12:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06649C30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 202 ] 
18:12:04: Protected Area Size 0x28000
18:12:04: Bus Width           2
18:12:04: Secure Mode         0
18:12:04: Speed  Class        4
18:12:04: Perf Move           0
18:12:04: Au Size             9
18:12:04: Erase Size          15
18:12:04: Erase Timeout       1
18:12:04: Erase offset        1
18:12:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:04: Au Size             9
18:12:04: AU : 8192
18:12:04: ##ACMD4119_Utility_LoadCMD20_Variables[INFO]: Call GlobalSecureFormat API.

18:12:04: [ CardSetTimeOut(0xC350, 0xC350, 0xC350) , Command count = 203 ] 
18:12:06: Power is Off
18:12:06: Power is On
18:12:06: Setting voltage to: 3
18:12:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x06649870>, <0x5000/0x200, Arb>, True) , Command count = 204 ] 
18:12:06: ######################################################################################################################################################
18:12:06: Resetting the card and passing init sequence again
18:12:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 205 ] 
18:12:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06649780>, <py_sfcl.CommandDataDefinition object at 0x06649D80>) , Command count = 206 ] 
18:12:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06649510>, <py_sfcl.CommandDataDefinition object at 0x06649750>) , Command count = 207 ] 
18:12:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
18:12:06: [ SetCardRCA(0x1, 0xD555) , Command count = 208 ] 
18:12:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06649A80>, <py_sfcl.CommandDataDefinition object at 0x06649960>) , Command count = 209 ] 
18:12:07: CMD9[ SEND_CSD ] Passed with R2 type response:[63, 64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64]
18:12:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06649A20>, <py_sfcl.CommandDataDefinition object at 0x06649810>) , Command count = 210 ] 
18:12:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:12:07: [GlobalSecureFormat] ############ M-CONF values #########
18:12:07: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 211 ] 

<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

18:12:07: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1, True) , Command count = 212 ] 
18:12:07: [GlobalSecureFormat] Buffer manipulate to get controller_ID
18:12:07: [GlobalSecureFormat] Card Info
18:12:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
18:12:07: ProductSerialNumber = 0x23482900
18:12:07: CardMaximumLBA      = 0x3b72400
18:12:07: CardCapacity        = 32G
18:12:07: Is card secure      = 0
18:12:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

18:12:07: [GlobalSecureFormat] Identify drive
18:12:07: [DVTCommonLib]### GetIdentifyDrive :###****Identify Drive****###
18:12:07: Model Number                     = SanDisk   COLIBRI                       
18:12:07: Serial number                    = 12345678
18:12:07: Max Lba                          = 0x3b9afff
18:12:07: Card Capacity                    = 32G
18:12:07: FW revision                      = 6RB C030
18:12:07: Internal Flashware Revision      = 6RB C030
18:12:07: Romware Revision                 = RRBZ1152
18:12:07: Device count                     = 0
18:12:07: Device Type                      = 69
18:12:07: Cell type                        = 0
18:12:07: Device Configuration             = 0
18:12:07: Memory type                      = 17664
18:12:07: Memory type string               = 256Mb-2LC x 0
18:12:07: Asic Id                          = 81
18:12:07: Asic Vendor                      = 4
18:12:07: Asic Revision                    = 0
18:12:07: Controller Type                  = 20740
18:12:07: Controller Type string           = Unknown Controller   UMC-J
18:12:07: Header Uncorrectable Error count = 0
18:12:07: Header 1 Bit Correction Counter  = 0
18:12:07: Header 2 Bit Correction Counter  = 0
18:12:07: Header 3 Bit Correction Counter  = 0
18:12:07: Header ECC Corrections           = Header correction counters (1-3)
18:12:07: Data ECC Corrections             = Data correction counters (1-10)
18:12:07: Data Uncorrectable error count   = 0
18:12:07: Data 1 Bit Correction Count      = 0
18:12:07: Data 2 Bit Correction Count      = 0
18:12:07: Data 3 Bit Correction Count      = 0
18:12:07: Data 4 Bit Correction Count      = 0
18:12:07: Data 5 Bit Correction Count      = 0
18:12:07: Data 6 Bit Correction Count      = 0
18:12:07: Data 7 Bit Correction Count      = 0
18:12:07: Data 8 Bit Correction Count      = 0
18:12:07: Data 9 Bit Correction Count      = 0
18:12:07: Data 10 Bit Correction Count     = 0
18:12:07: [DVTCommonLib]### GetIdentifyDrive :###**** Identify Drive****###
18:12:07: [GlobalSecureFormat] Write production file
18:12:07: [GlobalSecureFormat] Write Hidden System file
18:12:07: [GlobalSecureFormat] Indicate Secure format process
18:12:07: [GlobalSecureFormat] Write all 16 MKB files
18:12:07:  Writing MKB file [0]
18:12:07:  Writing MKB file [1]
18:12:07:  Writing MKB file [2]
18:12:07:  Writing MKB file [3]
18:12:07:  Writing MKB file [4]
18:12:07:  Writing MKB file [5]
18:12:07:  Writing MKB file [6]
18:12:07:  Writing MKB file [7]
18:12:07:  Writing MKB file [8]
18:12:07:  Writing MKB file [9]
18:12:07:  Writing MKB file [10]
18:12:07:  Writing MKB file [11]
18:12:07:  Writing MKB file [12]
18:12:08:  Writing MKB file [13]
18:12:08:  Writing MKB file [14]
18:12:08:  Writing MKB file [15]
18:12:08: [GlobalSecureFormat] SET Timout values
18:12:08: [ CardSetTimeOut(0xBB8, 0xBB8, 0xBB8) , Command count = 213 ] 
18:12:08: [GO4_globalInitCard]### Switch to Specify Card Type
18:12:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:12:10: Host Frequency set to 25000 KHz
18:12:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:12:10: [GO18_globalSetVolt]### Set Host Voltage value.
18:12:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
18:12:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x06649BD0>, 0x0, True) , Command count = 214 ] 
18:12:10: [GO18_globalSetVolt]### Host voltage value is set.
18:12:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
18:12:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x06649390>, 0x0, False) , Command count = 215 ] 
18:12:10: [GO18_globalSetVolt]### Host voltage value is set.
18:12:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 216 ] 
18:12:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
18:12:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 217 ] 
18:12:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:12:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 218 ] 
18:12:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:12:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06649480>, <py_sfcl.CommandDataDefinition object at 0x066494B0>) , Command count = 219 ] 
18:12:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06649C60>, <py_sfcl.CommandDataDefinition object at 0x066494E0>) , Command count = 220 ] 
18:12:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 207, 32, 5, 0, 3]
18:12:10: [ SetCardRCA(0x1, 0xCF20) , Command count = 221 ] 
18:12:10: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
18:12:10: Host Frequency set to 25000 KHz
18:12:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
18:12:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:12:10: ####CSD Registe 2.0 Values####
18:12:10: CSD_STRUCTURE                                 :0x1
18:12:10: Reserv1                                       :0x0
18:12:10: Time Access 1 TAAC                            :0xe
18:12:10: Time Access 2 NSAC*100                        :0x0
18:12:10: Data Transfer Rate TRAN_SPEED                 :0x32
18:12:10: Card Command Classess CCC                     :0x5b5
18:12:10: Max Read Data Block Length  READ_BL_LEN       :0x9
18:12:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:12:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:12:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:12:10: DSR(driver stage register)  DSR_IMP           :0x0
18:12:10: Reserv2                                       :0x0
18:12:10: Device Size C_SIZE                            :0xedc8
18:12:10: Reserv3                                       :0x0
18:12:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:12:10: Erase Sector Size SECTOR_SIZE                 :0x7f
18:12:10: Write Protect Group Size WP_GRP_SIZE          :0x0
18:12:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:12:10: Reserv4                                       :0x0
18:12:10: Write Speed Factor R2W_FACTOR                 :0x2
18:12:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:12:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:12:10: FILE_FORMAT_GRP                               :0x0
18:12:10: COPY flag                                     :0x1
18:12:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:12:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:12:10: File_Format                                   :0x0
18:12:10: CRC                                           :0x0
18:12:10: ####CSD Registe Values####  

18:12:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
18:12:10: [GetSCRRegisterEntry] Passed
18:12:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
18:12:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
18:12:10: Data_Status_After Erases          : 0
18:12:10: CPRM Security Support             : SECURITY VERSION 2.00
18:12:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
18:12:10: Spec. Version                     : Version 3.0X
18:12:10: Extended Security Support         : Extended_Security_Not_Supported
18:12:10: Command Support                   : COMMAND_SUPPORT
18:12:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

18:12:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06649D50>, <py_sfcl.CommandDataDefinition object at 0x06649B10>) , Command count = 222 ] 
18:12:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
18:12:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06649DE0>, <py_sfcl.CommandDataDefinition object at 0x066497E0>) , Command count = 223 ] 
18:12:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
18:12:10: [ SetBusWidth(0x4) , Command count = 224 ] 
18:12:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06649AB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 225 ] 
18:12:10: Protected Area Size 0x28000
18:12:10: Bus Width           2
18:12:10: Secure Mode         0
18:12:10: Speed  Class        4
18:12:10: Perf Move           0
18:12:10: Au Size             9
18:12:10: Erase Size          15
18:12:10: Erase Timeout       1
18:12:10: Erase offset        1
18:12:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
18:12:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:12:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 226 ] 
18:12:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
18:12:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:12:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
18:12:10: Host Frequency set to 100000 KHz
18:12:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
18:12:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:12:10: ####CSD Registe 2.0 Values####
18:12:10: CSD_STRUCTURE                                 :0x1
18:12:10: Reserv1                                       :0x0
18:12:10: Time Access 1 TAAC                            :0xe
18:12:10: Time Access 2 NSAC*100                        :0x0
18:12:10: Data Transfer Rate TRAN_SPEED                 :0xb
18:12:10: Card Command Classess CCC                     :0x5b5
18:12:10: Max Read Data Block Length  READ_BL_LEN       :0x9
18:12:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:12:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:12:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:12:10: DSR(driver stage register)  DSR_IMP           :0x0
18:12:10: Reserv2                                       :0x0
18:12:10: Device Size C_SIZE                            :0xedc8
18:12:10: Reserv3                                       :0x0
18:12:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:12:10: Erase Sector Size SECTOR_SIZE                 :0x7f
18:12:10: Write Protect Group Size WP_GRP_SIZE          :0x0
18:12:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:12:10: Reserv4                                       :0x0
18:12:10: Write Speed Factor R2W_FACTOR                 :0x2
18:12:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:12:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:12:10: FILE_FORMAT_GRP                               :0x0
18:12:10: COPY flag                                     :0x1
18:12:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:12:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:12:10: File_Format                                   :0x0
18:12:10: CRC                                           :0x0
18:12:10: ####CSD Registe Values####  

18:12:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06649930>, <py_sfcl.CommandDataDefinition object at 0x06649900>) , Command count = 227 ] 
18:12:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
18:12:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06652180>, <py_sfcl.CommandDataDefinition object at 0x06652030>) , Command count = 228 ] 
18:12:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:12:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


18:12:10:  [INFO]: CMD0 -> CMD8 -> CMD58 -> ACMD41 -> Error 
18:12:10:  [INFO]: CMD0 -> CMD8 -> ACMD41 (XPC=1)  ->Verify -> CMD20 
18:12:10:  [INFO]: CMD0 -> CMD8 -> CMD58 -> ACMD41 -> CMD58 ->Verify 
18:12:12: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API Called 
18:12:12: [ EnableACMD41() , Command count = 229 ] 
18:12:12: [DVTCommonLib]### enableACMD41[INFO] :EnableACMD41 API completed

18:12:12: [DVTCommonLib]### Reset the card with OCR value : 0xFF8000
18:12:13: [ CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0xFF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 230 ] 
18:12:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
18:12:13: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:12:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:13: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
18:12:15: [DVTCommonLib]### Reset the card with OCR value : 0x51FF8000
18:12:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x51FF8000, 0x1, 0x1, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x0, 0x1, 0xAA, 0x0) , Command count = 231 ] 
18:12:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
18:12:15: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
18:12:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
18:12:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
18:12:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
18:12:15: localVariables['ReadyCcs18a111'] = 3254747136
18:12:15: ###### Running ACMD4129_Utility_UHS_Reset [Info] : GET CARD CAPACITY 
18:12:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
18:12:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 232 ] 
18:12:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
18:12:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
18:12:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06652AE0>, <py_sfcl.CommandDataDefinition object at 0x06652810>) , Command count = 233 ] 
18:12:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
18:12:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06652DE0>, <py_sfcl.CommandDataDefinition object at 0x06652CC0>) , Command count = 234 ] 
18:12:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 207, 32, 5, 0, 3]
18:12:15: [ SetCardRCA(0x1, 0xCF20) , Command count = 235 ] 
18:12:15: [DVTCommonLib]### Identification :Idenfication of card completed 

18:12:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06652C00>, <py_sfcl.CommandDataDefinition object at 0x066528D0>) , Command count = 236 ] 
18:12:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
18:12:15: [DVTCommonLib]### SetBusWidth :Set the Bus width to 4 

18:12:15: [ SetBusWidth(0x4) , Command count = 237 ] 
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:12:15: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 238 ] 
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:100', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:12:15: ### ACMD4129_Utility_UHS_Reset [INFO] : Supported[1] index, Response Value : 0x801F
18:12:15: ### ACMD4129_Utility_UHS_Reset [INFO] : Supported[2] index, Response Value : 0xC001
18:12:15: ### ACMD4129_Utility_UHS_Reset [INFO] : Supported[3] index, Response Value : 0x800F
18:12:15: ### ACMD4129_Utility_UHS_Reset [INFO] : Supported[4] index, Response Value : 0x800F
18:12:15: ### ACMD4129_Utility_UHS_Reset [INFO] : Supported[5] index, Response Value : 0x8001
18:12:15: ### ACMD4129_Utility_UHS_Reset [INFO] : Supported[6] index, Response Value : 0x8001
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported Value Compare
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported Value Compare 

18:12:15: VS_Flag========================1
18:12:15: supported========================[32799, 49153, 32783, 32783, 32769, 32769]
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:12:15: [ CardSwitchCmd(False, [0x2, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 239 ] 
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Powerconsumption Value Compare
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] :[MATCH TO VALUE option] Power Consumption value matched to value(in mA) passed:250 and response value(in mA): 250
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Powerconsumption Value Compare 

18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported Value Compare
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported[1] index,Matched with response Compare value :0x801F and Response Value : 0x801F
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported[2] index,Matched with response Compare value :0xC001 and Response Value : 0xC001
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported[3] index,Matched with response Compare value :0x800F and Response Value : 0x800F
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported[4] index,Matched with response Compare value :0x800F and Response Value : 0x800F
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported[5] index,Matched with response Compare value :0x8001 and Response Value : 0x8001
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported[6] index,Matched with response Compare value :0x8001 and Response Value : 0x8001
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported Value Compare 

18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched Value Compare
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched[1] index,Matched with response Compare value :0x2 and Response Value : 0x2
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched[2] index,Matched with response Compare value :0x0 and Response Value : 0x0
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched[3] index,Matched with response Compare value :0x0 and Response Value : 0x0
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched[4] index,Matched with response Compare value :0x0 and Response Value : 0x0
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched[5] index,Matched with response Compare value :0x0 and Response Value : 0x0
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched[6] index,Matched with response Compare value :0x0 and Response Value : 0x0
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched Value Compare
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:12:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 240 ] 
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:200 mA', 'SDR50 SWITCHED', '200mA SWITCHED']
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Powerconsumption Value Compare
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] :[MATCH TO VALUE option] Power Consumption value matched to value(in mA) passed:200 and response value(in mA): 200
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Powerconsumption Value Compare 

18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported Value Compare
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported[1] index,Matched with response Compare value :0x801F and Response Value : 0x801F
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported[2] index,Matched with response Compare value :0xC001 and Response Value : 0xC001
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported[3] index,Matched with response Compare value :0x800F and Response Value : 0x800F
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported[4] index,Matched with response Compare value :0x800F and Response Value : 0x800F
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported[5] index,Matched with response Compare value :0x8001 and Response Value : 0x8001
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported[6] index,Matched with response Compare value :0x8001 and Response Value : 0x8001
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported Value Compare 

18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched Value Compare
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched[1] index,Matched with response Compare value :0x2 and Response Value : 0x2
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched[2] index,Matched with response Compare value :0x0 and Response Value : 0x0
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched[3] index,Matched with response Compare value :0x0 and Response Value : 0x0
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched[4] index,Matched with response Compare value :0x0 and Response Value : 0x0
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched[5] index,Matched with response Compare value :0x0 and Response Value : 0x0
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched[6] index,Matched with response Compare value :0x0 and Response Value : 0x0
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched Value Compare
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:12:15: Host Frequency set to 100000 KHz

18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
18:12:15: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 241 ] 
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Powerconsumption Value Compare
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] :[MATCH TO VALUE option] Power Consumption value matched to value(in mA) passed:250 and response value(in mA): 250
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Powerconsumption Value Compare 

18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported Value Compare
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported[1] index,Matched with response Compare value :0x801F and Response Value : 0x801F
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported[2] index,Matched with response Compare value :0xC001 and Response Value : 0xC001
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported[3] index,Matched with response Compare value :0x800F and Response Value : 0x800F
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported[4] index,Matched with response Compare value :0x800F and Response Value : 0x800F
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported[5] index,Matched with response Compare value :0x8001 and Response Value : 0x8001
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported[6] index,Matched with response Compare value :0x8001 and Response Value : 0x8001
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Supported Value Compare 

18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched Value Compare
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched[1] index,Matched with response Compare value :0x2 and Response Value : 0x2
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched[2] index,Matched with response Compare value :0x0 and Response Value : 0x0
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched[3] index,Matched with response Compare value :0x0 and Response Value : 0x0
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched[4] index,Matched with response Compare value :0x0 and Response Value : 0x0
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched[5] index,Matched with response Compare value :0x0 and Response Value : 0x0
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched[6] index,Matched with response Compare value :0x0 and Response Value : 0x0
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO] : Switched Value Compare
18:12:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

18:12:15: [DVTCommonLib]###  SEND_TUNING_PATTERN called
18:12:15: [ SendTuningPattern_CMD19(0x2, 0x96, <0x200/0x200, Spc, pat:0x0>) , Command count = 242 ] 
18:12:15: [DVTCommonLib]###  SEND_TUNING_PATTERN Completed 

18:12:15: [DVTCommonLib]### setVolt[INFO] :maxVoltage=3300 V, maxCurrent=400, A2DRate=A2D_62_5_HZ Hz, PowerSupplier=True
18:12:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06652390>, <None>, True) , Command count = 243 ] 
18:12:15: [DVTCommonLib]### setVolt[INFO] :Voltage is set

18:12:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
18:12:15: ####CSD Registe 2.0 Values####
18:12:15: CSD_STRUCTURE                                 :0x1
18:12:15: Reserv1                                       :0x0
18:12:15: Time Access 1 TAAC                            :0xe
18:12:15: Time Access 2 NSAC*100                        :0x0
18:12:15: Data Transfer Rate TRAN_SPEED                 :0xb
18:12:15: Card Command Classess CCC                     :0x5b5
18:12:15: Max Read Data Block Length  READ_BL_LEN       :0x9
18:12:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
18:12:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
18:12:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
18:12:15: DSR(driver stage register)  DSR_IMP           :0x0
18:12:15: Reserv2                                       :0x0
18:12:15: Device Size C_SIZE                            :0xedc8
18:12:15: Reserv3                                       :0x0
18:12:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
18:12:15: Erase Sector Size SECTOR_SIZE                 :0x7f
18:12:15: Write Protect Group Size WP_GRP_SIZE          :0x0
18:12:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
18:12:15: Reserv4                                       :0x0
18:12:15: Write Speed Factor R2W_FACTOR                 :0x2
18:12:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
18:12:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
18:12:15: FILE_FORMAT_GRP                               :0x0
18:12:15: COPY flag                                     :0x1
18:12:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
18:12:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
18:12:15: File_Format                                   :0x0
18:12:15: CRC                                           :0x0
18:12:15: ####CSD Registe Values####  

18:12:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
18:12:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06652BD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 244 ] 
18:12:15: Protected Area Size 0x28000
18:12:15: Bus Width           2
18:12:15: Secure Mode         0
18:12:15: Speed  Class        4
18:12:15: Perf Move           0
18:12:15: Au Size             9
18:12:15: Erase Size          15
18:12:15: Erase Timeout       1
18:12:15: Erase offset        1
18:12:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

18:12:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x100 with Increment Pattern
18:12:15: [ WrLbaNoData(0x0, 0x100, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 245 ] 
18:12:15: [ GetCardStatus() , Command count = 246 ] 
18:12:15: [DVTCommonLib]### WriteWithFPGAPattern[ERROR] :MultipleWrite Failed from StartLba:0x0 to EndLba:0x100 with Increment Pattern
18:12:15: [DVTCommonLib]### Exception_Details :Exception raised!!!, Error Number is 65 and Error Message is 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x41L (65) executing command 'WrLbaNoData'
   Description : Card didn't switch to the expected mode as requested
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(0x0, 0x100, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0)')
   Extended error information:
      Status         : 0xC00
      Is busy?       : Yes


2016-11-28 18:12:15: 


<<<<<<<<<<<<<<<       PYTHON TRACEBACK       >>>>>>>>>>>>>>>

   File "C:\Program Files\SanDisk\CTF\Libs\General\AppDriver.py", line 269, in _DoRunApp
     returnData = appMainFunction( *functionArgs, **functionKwArgs )
   File "C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\TestRunner.py", line 122, in Main
     testProcedureObj.RunTestProcedure(randomObj)
   File "C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver3_00\ACMD41_SDXC_Package\ACMD4102_CallAllACMD41_SPI.py", line 94, in RunTestProcedure
     self.__ACMD4102_CallAllACMD41_SPIObj.Run(randomObj)
   File "C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver3_00\ACMD41_SDXC_Package\ACMD4102_CallAllACMD41_SPI.py", line 68, in Run
     self.__SDandSPI_CombinedScenarios.Run(randomObj)
   File "C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver3_00\ACMD41_SDXC_Package\ACMD4106_DVT_SD3_00_3_1_1_13_ACMD41_SDandSPI_CombinedScenarios.py", line 98, in Run
     ResetUtil.Reset(self.__testSpace, self.__optionValues).Run(randomObj, globalProjectConfVar, localVariables)
   File "C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver3_00\ACMD41_SDXC_Package\ACMD4122_Utility_Reset.py", line 325, in Run
     SuccessVerifyMaxVoltage.SuccessVerifyMaxVoltage(self.__testSpace, self.__optionValues).Run(randomObj)
   File "C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver3_00\ACMD41_SDXC_Package\ACMD4128_Utility_Successful_Verify_MaxVoltage.py", line 56, in Run
     self.__DVTobj.WriteWithFPGAPattern(StartLba=startBlk, blockCount=blkCount, pattern=2)
   File "C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Common\DvtCommonLib.py", line 1341, in WriteWithFPGAPattern
     self.Exception_Details(exc)
   File "C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Common\DvtCommonLib.py", line 1336, in WriteWithFPGAPattern
     self.__card.WriteLbaNoData(StartLba,blockCount,ptrnType=pattern_to_write,sectorTag=False)  #pysfcl pattern
   File "C:\Program Files\SanDisk\CTF\Libs\CardFramework\_SdCard.py", line 361, in WriteLbaNoData
     SdCard.WrLbaNoData( self, lba, count, patternBuf, ptrnType, perfomance, sectorTag, usePreDefBlkCount, reliableWrite,  contextId,  useCustomCmd23Argument, ulCustomCmd23Argument )
   File "CardMetaClassFuncDef", line 2, in WrLbaNoData
   File "C:\Program Files\SanDisk\CTF\Libs\CardFramework\CardCommand.py", line 1172, in __call__
     return self.__doCall( *args, **kwargs )
   File "C:\Program Files\SanDisk\CTF\Libs\CardFramework\CardCommand.py", line 1126, in call
     return self._ExtendedExecute( testspace, testspace.GetCard( ), history, function, *args, **kwargs )
   File "C:\Program Files\SanDisk\CTF\Libs\CardFramework\CardCommand.py", line 1063, in _ExtendedExecute
     errorMapper.CheckAndRaise( errorCode )
   File "C:\Program Files\SanDisk\CTF\Libs\CardFramework\ErrorMapper.py", line 429, in CheckAndRaise
     self.__DoRaiseOrDumpError( errorObj )
   File "C:\Program Files\SanDisk\CTF\Libs\CardFramework\ErrorMapper.py", line 392, in __DoRaiseOrDumpError
     raise error



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  



<<<<<<<<<<<<<<<        ERROR SUMMARY         >>>>>>>>>>>>>>>


 Command Failed
    WrLbaNoData
          Card didn't switch to the expected mode as requested. Card reports busy.




<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 CardCommandError:                                  
 card access failed on protocol=sd: 
    Error 0x41L (65) executing command 'WrLbaNoData'
    Description : Card didn't switch to the expected mode as requested
    Error Layer : UNKNOWN
    SW Error Location : UNKNOWN - UNKNOWN : 0
    Arguments: ('(0x0, 0x100, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0)')
    Extended error information:
       Status         : 0xC00
       Is busy?       : Yes



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  


<<<<<<<<<<<<<<<       COMMAND HISTORY        >>>>>>>>>>>>>>>

The command history may not capture all of the commands going
to the card so use this information with caution. This is not meant
to be a replacement for a logic or protocol analyzer.

Last 20 commands before error:
     # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   227 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06649DE0>, <py       59.406         3.5   read=  0, write=  0                 0       
   228 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06649930>, <py       59.410         3.5   read=  0, write=  0                 0       
   229 EnableACMD41()                                                               61.475         1.6   read=  0, write=  0                 'Obj'   
   230 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, FF8000, 1, T, <200/200, 0>, 0,        61.477       245.8   read=  0, write=  0                 C0FF8000
   231 CardReset(py_sfcl.CARD_MODE.SD, 51FF8000, 1, 1, <200/200, 0>, 0, 0, 1,       63.752       212.0   read=  0, write=  0                 C1FF8000
   232 SwitchVolt_CMD11(T, 0, 5)                                                    63.966         8.8   read=  0, write=  0                 0       
   233 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06652180>, <py       63.975         4.4   read=  0, write=  0                 0       
   234 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06652AE0>, <py       63.980         3.9   read=  0, write=  0                 0       
   235 SetCardRCA(1, CF20)                                                          63.984         1.7   read=  0, write=  0                 'Obj'   
   236 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06652DE0>, <py       64.068         3.6   read=  0, write=  0                 0       
   237 SetBusWidth(4)                                                               64.072         3.9   read=  0, write=  0                 0       
   238 CardSwitchCmd(F, [F,F,F,F,F,F], <40/200, 0>, 40)                             64.076         7.7   read=  0, write=  0                 0       
   239 CardSwitchCmd(F, [2,F,F,F,F,F], <40/200, 0>, 40)                             64.087         6.7   read=  0, write=  0                 0       
   240 CardSwitchCmd(T, [2,F,F,F,F,F], <40/200, 0>, 40)                             64.097         8.8   read=  0, write=  0                 0       
   241 CardSwitchCmd(F, [F,F,F,F,F,F], <40/200, 0>, 40)                             64.255         6.8   read=  0, write=  0                 0       
   242 SendTuningPattern_CMD19(2, 96, <200/200, 0>)                                 64.266         5.5   read=  0, write=  0                 0       
   243 SetVolt(<py_sfcl.SDVoltage object at 0x06649390>, <N>, T)                    64.272        18.3   read=  0, write=  0                 0       
   244 CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06649F00>, <200/20       64.300         8.1   read=  0, write=  0                 0       
   245 WrLbaNoData(0, 100, <400/200, Arb>, py_sfcl.Pattern.INCREMENTAL, T, F,       64.310         7.0   read=  0, write=  0                 41      
   246 GetCardStatus()                                                              64.317         3.4   read=  0, write=  0                 'List'  

     # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   -----------------------------------------------------------------------------------------------------------------------------------------------
   20 commands.  Total time 00:01:04


Start LBA: 0xffffffff Transferred block amount: 0xffffffff

Latency data
--------------------------------------------------
Time Interval  Reset        Read         Write        
  0 -   8 :    0            103          47           
  8 -  13 :    0            0            0            
 13 -  17 :    0            0            1            
 17 -  21 :    0            0            0            
 21 -  26 :    0            0            0            
 26 -  30 :    0            0            0            
 30 -  34 :    0            0            0            
 34 -  39 :    0            0            0            
 39 -  43 :    0            0            0            
 43 -  48 :    0            0            0            
 48 -  52 :    0            0            0            
 52 -  56 :    0            0            0            
 56 -  61 :    0            0            0            
 61 -  65 :    0            0            0            
 65 -  69 :    0            0            0            
 69 -  74 :    0            0            0            
 74 -  78 :    0            0            0            
 78 -  82 :    0            0            0            
 82 -  87 :    0            0            0            
 87 -  91 :    0            0            0            
 91 -  96 :    0            0            0            
 96 - 100 :    0            0            0            
100 - 104 :    0            0            0            
104 - 109 :    0            0            0            
109 - 113 :    0            0            0            
113 - 117 :    0            0            0            
117 - 122 :    0            0            0            
122 - 126 :    0            0            0            
126 - 131 :    0            0            0            
131 - 135 :    0            0            0            
135 - 139 :    0            0            0            
139 - 144 :    0            0            0            
144 - 148 :    0            0            0            
148 - 152 :    0            0            0            
152 - 157 :    0            0            0            
157 - 161 :    0            0            0            
161 - 165 :    0            0            0            
165 - 170 :    0            0            0            
170 - 174 :    0            0            0            
174 - 179 :    0            0            0            
179 - 183 :    0            0            0            
183 - 187 :    0            0            0            
187 - 192 :    0            0            0            
192 - 196 :    0            0            0            
196 - 200 :    0            0            0            
200 - 205 :    0            0            0            
205 - 209 :    0            0            0            
209 - 214 :    0            0            0            
214 - 218 :    0            0            0            
--------------------------------------------------


List of commands that took the most time to execute:
----------------------------------------------------
     # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

    44 SwitchHostVoltageRegion(False)                                                   NA  297.431057   NA                                  0       
   150 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x1FF8000, 0x1, True, <0x200/0x           NA  264.851329   NA                                  3237969920
   147 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0xFF8000, 0x1, True, <0x200/0x2           NA  264.592947   NA                                  3237969920
   153 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x10FF8000, 0x1, True, <0x200/0           NA  264.493638   NA                                  3237969920
    79 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x50FF8000, 0x1, True, <0x200/0           NA  261.968675   NA                                  3237969920
    69 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x40FF8000, 0x1, True, <0x200/0           NA  260.318167   NA                                  3237969920
    74 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0x41FF8000, 0x1, True, <0x200/0           NA  250.488165   NA                                  3237969920
   230 CardReset(py_sfcl.CARD_MODE.SD_IN_SPI, 0xFF8000, 0x1, True, <0x200/0x2           NA  245.821887   NA                                  3237969920
   231 CardReset(py_sfcl.CARD_MODE.SD, 0x51FF8000, 0x1, 0x1, <0x200/0x200, Sp           NA  212.032953   NA                                  3254747136
   217 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  211.859390   NA                                  3254747136
   131 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  210.090859   NA                                  3254747136
   205 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x           NA  210.065806   NA                                  3254747136
   185 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  209.988231   NA                                  3254747136
    52 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  206.068425   NA                                  3254747136
    46 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x           NA  195.096530   NA                                  3254747136
    85 WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, Tr           NA  182.211216   NA                                  0       
   100 WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, Tr           NA  182.197029   NA                                  0       
    70 WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, Tr           NA  182.194011   NA                                  0       
   115 WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, Tr           NA  182.126397   NA                                  0       
   105 WrLbaNoData(0x0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ZERO, Tr           NA  181.892766   NA                                  0       

     # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

Last resetup command number: 245


<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  

CardCommandError error at 00:01:04.


<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 CardCommandError:                                  
 card access failed on protocol=sd: 
    Error 0x41L (65) executing command 'WrLbaNoData'
    Description : Card didn't switch to the expected mode as requested
    Error Layer : UNKNOWN
    SW Error Location : UNKNOWN - UNKNOWN : 0
    Arguments: ('(0x0, 0x100, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0)')
    Extended error information:
       Status         : 0xC00
       Is busy?       : Yes



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




   #######    ##     ####  ####    
    ##   #   ####     ##    ##     
    ## #    ##  ##    ##    ##     
    ####    ##  ##    ##    ##     
    ## #    ######    ##    ##     
    ##      ##  ##    ##    ##  ## 
   ####     ##  ##   ####  ####### 
                                   

 

