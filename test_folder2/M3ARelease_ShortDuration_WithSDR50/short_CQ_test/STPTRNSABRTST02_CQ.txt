14:17:47: Sata Disconnector Board found in COM1.
14:17:51: ***************************************************** 

14:17:51: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   * 

14:17:51: *                                                   * 

14:17:51: *  Compatibility with this version is not verified! * 

14:17:51: ***************************************************** 

14:17:54: [ DeviceSetupCompletion() , Command count = 7 ] 
14:17:54: Testname Mapping: ScriptName=[STPTRNSABRTST02_2_Call_All_CMD0] -> TestId=[STPTRNSABRTST02]
14:17:54: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 8 ] 
14:17:54: [ GetPhysicalChipsInfo() , Command count = 9 ] 
14:17:54: [ GetFileSize(0xEA) , Command count = 10 ] 
14:17:54: [ ReadFile(<0xA00/0x200, Arb>, 0xEA, 0x1) , Command count = 11 ] 
14:17:54: [ GetFileSize(0x16) , Command count = 12 ] 
14:17:54: [ GetCardStatus() , Command count = 13 ] 
14:17:54: [ GetFileSize(0x18) , Command count = 14 ] 
14:17:54: [ ReadFile(<0x1000/0x200, Arb>, 0x18, 0x8) , Command count = 15 ] 
14:17:54: [ GetFileSize(0x15) , Command count = 16 ] 
14:17:54: [ ReadFile(<0x1000/0x200, Arb>, 0x15, 0x1) , Command count = 17 ] 
14:17:57: Can not find revision of File 21 in file 'config.xml' or card is in the ROM mode
14:17:57: [ GetFileSize(0xE) , Command count = 18 ] 
14:17:57: [ ReadFile(<0x1000/0x200, Arb>, 0xE, 0x1) , Command count = 19 ] 
14:17:57: [ GetFileSize(0x1E) , Command count = 20 ] 
14:17:57: [ GetCardStatus() , Command count = 21 ] 
14:17:57: [ GetFileSize(0x21) , Command count = 22 ] 
14:17:57: [ GetCardStatus() , Command count = 23 ] 
14:17:57: [ GetFileSize(0x33) , Command count = 24 ] 
14:17:57: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x33, 0x1) , Command count = 25 ] 
14:17:57: [ GetFileSize(0x1F) , Command count = 26 ] 
14:17:57: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x1F, 0x1) , Command count = 27 ] 
14:17:57: [ GetFileSize(0x2A) , Command count = 28 ] 
14:17:57: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x2A, 0x1) , Command count = 29 ] 
14:17:57: [ ReadCfgConf(<0x1000/0x200, Spc, pat:0x0>, 0x1) , Command count = 30 ] 
14:17:57: [ ReadFirmwareParameter(<0x1000/0x200, Spc, pat:0x0>, 0x2) , Command count = 31 ] 
14:17:57: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_BE) , Command count = 32 ] 
14:17:57: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_PRODUCT) , Command count = 33 ] 
14:17:57: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_FE_SD) , Command count = 34 ] 
14:17:57: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, 0x0) , Command count = 35 ] 
14:17:57: [ GetFileSize(0x33) , Command count = 36 ] 
14:17:57: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 37 ] 
14:17:57: [ GetFileSize(0x33) , Command count = 38 ] 
14:17:57: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 39 ] 
14:17:57: [ GetIpVersionInfo() , Command count = 40 ] 
14:17:57: [ GetPhysicalChipsInfo() , Command count = 41 ] 
14:17:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062E1210>, <0x200/0x200, Arb>) , Command count = 42 ] 
14:17:57: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 43 ] 

<<<<<<<<<<<<<<<         TEST HEADER          >>>>>>>>>>>>>>>

Application                :  TestRunner.py
Application version        :  SD_DVT_CQ_Spec 6.0.0
Application folder         :  C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT
Command line               :  --protocol=sd --sdtestid=STPTRNSABRTST02 --dbconnection=none --adapter=SD05412_9ADT --sdConfiguration=SDR50 --projectconfig=C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB --paramsfile=C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB\Colibri_SD_HC_I059_SDR104_Prem_C10_U1.txt --logfilename=C:\Results\STPTRNSABRTST02_CQ.txt --CQ=1
Protocol                   :  sd
Serial number (CInfo)      :  sdin1091
Adapter                    :  SDR Tester (S#: SD05412_9ADT): (Slot#:0)
Adapter serial number      :  SD05412_9ADT
Adapter type               :  USD
Capacity                   :  32G
Firmware revision          :  6RB C030
Flashware revision         :  6RB C030
IP Version Info            :  '' 01.04.00... ID 0x20
                           :  '' 00.01.00... ID 0x10
Memory ID                  :  453CA9A27A510B140000000000000000
Controller                 :  81
Trim settings              :  <Unavailable>
Model revision             :  <Unavailable>
Stream name                :  <Unavailable>
FE IP                      :  1
Romware revision           :  RRBZ1152
Architecture               :  Gen 6
Model                      :  SanDisk   COLIBRI
Memory type                :  Unknown Device Type-2LC x 1
ASIC id                    :  81
Controller type            :  Unknown Controller   UMC-J
Driver version (actual)    :  10.0.0.1 (0x a.0.0.1)
Driver version (released)  :  7.1.4.3 (0x 7.1.4.3)
Date and time              :  2016-11-28 14:17:57
Host name                  :  SDDVT_Test2
Host IP address            :  10.65.153.121
Operating system           :  Microsoft Windows [Version 6.1.7601] Service Pack 1
SanDisk Python version     :  1.17.5rc3
CTF/PySFCL build number    :  1.3.217491.217491
PySFCL version             :  1.3.217491
CTF version                :  1.3
Python version             :  2.4.2
Project Name(Validation)   :  <None>


<<<<<<<<<<<<<<<      SFCL CONFIGURATION      >>>>>>>>>>>>>>>

[SD enumeration]
cmdtiming=0
useRelay=0
autocompare=0
relayPolarity=1
relaySleep=500
measureCmdLatency=1
logicalChunkSize=0
diagDisabled=0
diagCmdTimeout=800
useVddf=on
nethostloglevel=
nethostautoCompare=on
CmdManShowProgress=off
nethostsendtimeout=240000
nethostreceivetimeout=240000
countOfRetryCmdIfCrc=3
enableOORPatch=
lbaForSctpCommands=0x100
subProtocol=0
doDle=0
diagnosticChunkSize=128
logmsgformat=timeMessage
logtimeformat=time
relaySlot=0
unloadDll=on
hardTimeoutUnloadDll=on
minDuration=7200
remoteDevice=
skipProduction=0
ishighspeedmode=0
highfreqinhz=500
modeldelaytimeindiagnostic=0
cqDataTransferPollingShortInterval=1000
cqDataStatusPollingLongInterval=1800000
sataPort0ToRelaySlot=0
sataPort1ToRelaySlot=0
sataPort2ToRelaySlot=0
sataPort3ToRelaySlot=0
relayToComportMapping=1
sdbToComportMapping=1
sataAdapterPort0=0
sataAdapterPort1=0
sataAdapterPort2=0
sataAdapterPort3=0
sataPort0ToMubIndx=1
sataPort1ToMubIndx=1
sataPort2ToMubIndx=1
sataPort3ToMubIndx=1

[Common]
enableChunkTraces=off
enablePythonTraceback=1
sctpPhaseDelay=0
printcommandcount=on
debugfilepath=
initXMLPath=\\regression.lab.sandisk.com\shared\configurations
delayBeforePwrCycle=0
delayAfterPwrCycle=0
reportCountStatistics=1
reportPackage=0
sfclConfig=Common

<<<<<<<<<<<<<<<          CARD INFO           >>>>>>>>>>>>>>>

Number Of LBAs  :  0x3b72400
Card Is Locked  :  No
Secure Area     :  0x28000
Card Secure     :  No
WP map          :

<<<<<<<<<<<<<<<           CID INFO           >>>>>>>>>>>>>>>

Manufacturer Id  :  0x3
Card/BGA         :  0
Application Id   :  0x5344
ProductName      :  AGGCD
ProductRev       :  0x80
SerialNumber     :  0x23482900
Reserved         :  0x23482900
Year             :  2000
Month            :  11
CRC Check Sum    :  0x5
Not Used         :

<<<<<<<<<<<<<<<           CSD INFO           >>>>>>>>>>>>>>>

CSD Structure                     :  0x1
reserv. 1                         :  0x0
TAAC                              :  0xe
NSAC*100                          :  0x0
data transfer rate                :  0x32
card command classes CCC          :  0x5b5
max. read data Blk. length        :  0x9
partial blocks for read allowed   :  0x0
write block misalignment          :  0x0
read block misalignment           :  0x0
DSR implemented                   :  0x0
reserved 2                        :  0x0
device size                       :  0xedc8
Reserv3                           :  0x0
SD Erase Blk Len En               :  0x1
SD Sec Size                       :  0x7f
write protect group size          :  0x0
write protect group enable        :  0x0
Reserv4                           :  0x0
write speed factor                :  0x2
max. write data blk. length       :  0x9
partial blocks for write allowed  :  0x0
File Format Group                 :  0x0
copy flag(OTP)                    :  0x1
permanent write protection        :  0x0
temporary write protection        :  0x0
File Format                       :  0x0
CRC                               :  0x0
<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

<<<<<<<<<<<<<<<    COMMAND LINE ARGUMENTS    >>>>>>>>>>>>>>>


Processed command-line options:
   --protocol                                       : sd
   --adapterspecifier                               : ain:-1,desc:SD05412_9ADT
   --extcmdset                                      : FBCC
   --sdtestid                                       : STPTRNSABRTST02
   --sdconfiguration                                : SDR50
   --cyclecount                                     : 1
   --testduration                                   : 20h
   --writereadpercent                               : 100
   --paramsfile                                     : 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB\Colibri_SD_HC_I059_SDR104_Prem_C10_U1.txt'
   --randomseed                                     : 22543516271
   --projectconfig                                  : C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB
   --logfiledir                                     : C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\DvtTestLogs
   --hostlog                                        : 0
   --cq                                             : 1
   --dbconnection                                   : 'none'
   --temperature                                    : 25
   --voltage                                        : 0.00
   --logfilename                                    : 'C:\Results\STPTRNSABRTST02_CQ.txt'
   --logtostdout                                    : Y
   --overwriteexistinglogfile                       : Y
   --logrotationspecifier                           : NoRotation
   --loglevel                                       : <4, INFO>
   --testcomment                                    : None
   --dbproject                                      : CTFW_QA
   --mdfwprojectid                                  : None
   --mdconfigid                                     : None
   --mdtestid                                       : None
   --valid                                          : True
   --waitTime                                       : None
   --jitter                                         : F
   --testlimits                                     : <None>-<None>
   --LabID                                          : None
   --DutID                                          : None
   --LaunchId                                       : None
   --TestQueueId                                    : None
   --xfermode                                       : <N>
   --networkperiod                                  : <N>
   --networkpath                                    : <N>
   --dumpfile                                       : 
   --printcommandcount                              : N
   --debugfilepath                                  : <N>
   --chpfilename                                    : <N>
   --enablecmdhistory                               : Y
   --cmdhistextfilename                             : <N>
   --cmdhistcsvfilename                             : <N>
   --histdisplaysizes                               : 0,250
   --stoponcommands                                 : <N>
   --notifyemailid                                  : <N>
   --spyoncommands                                  : <N>
   --notifyoncommands                               : <N>
   --CmdManShowProgress                             : 'off'
   --enablePowerCycle                               : '1'
   --measureCmdLatency                              : '1'
   --useVddf                                        : 'on'
   --gvi                                            : 'off'
   --gviOnFly                                       : 'off'
   --gviEncryption                                  : '0'
   --remoteDevice                                   : ''
   --skipProduction                                 : '0'
   --forceMultipleMode                              : 'off'
   --countOfRetryCmdIfCrc                           : '3'
   --enableOORPatch                                 : 'on'
   --connectonly                                    : 'off'
   --nethostautocompare                             : 'on'
   --nethostpowercycle                              : '0'
   --nethostloglevel                                : '3'
   --nethostlogconsole                              : '0'
   --nethostsanitychecks                            : '0'
   --nethostsendtimeout                             : '240000'
   --nethostreceivetimeout                          : '240000'
   --subProtocol                                    : '0'
   --useVccq                                        : '3.3'
   --maxprotocoloverhead                            : '0'
   --maxprotocoltimingmode                          : '0'
   --isHighSpeedMode                                : '0'
   --highFreqInHz                                   : '500'
   --doDle                                          : '0'
   --lbaForSctpCommands                             : '0x100'
   --cmdfilename                                    : ''
   --cmdtofilewrites                                : '0'
   --cmdtiming                                      : '0'
   --cmdtocsv                                       : '0'
   --logicalChunkSize                               : '0'
   --diagnosticChunkSize                            : '128'
   --readChunkSize                                  : '0'
   --writeChunkSize                                 : '0'
   --useRelay                                       : '0'
   --sataPort0ToRelaySlot                           : '0'
   --sataPort1ToRelaySlot                           : '0'
   --sataPort2ToRelaySlot                           : '0'
   --sataPort3ToRelaySlot                           : '0'
   --relayToComportMapping                          : '1'
   --useSDB                                         : '0'
   --sdbToComportMapping                            : '1'
   --sataAdapterPort0                               : '0'
   --sataAdapterPort1                               : '0'
   --sataAdapterPort2                               : '0'
   --sataAdapterPort3                               : '0'
   --relayPolarity                                  : '1'
   --relaySleep                                     : '500'
   --diagCmdTimeout                                 : '800'
   --diagDisabled                                   : '0'
   --hardTimeout                                    : '30000'
   --commandscriptfolder                            : ''
   --commandscriptstart                             : '0'
   --logmsgformat                                   : 'timeMessage'
   --logtimeformat                                  : 'time'
   --relaySlot                                      : '0'
   --atbuRelaySlot                                  : '3'
   --diskCacheStore                                 : ''
   --stopOnStart                                    : '0'
   --notifyserver                                   : ''
   --notifyretry                                    : '2'
   --notifytimeout                                  : '60'
   --failonnotifytimeout                            : '0'
   --revertactions                                  : ''
   --timechangedetection                            : '0'
   --timechangecondition                            : '600'
   --timechangecheckinterval                        : '1000'
   --inputmonitor                                   : '1'
   --logtimeprecision                               : '2'
   --nonSndkDevEnumeration                          : '0'
   --modelini                                       : 'C:\Program Files\SanDisk\CTF\Dlls\model.ini'
   --sfclini                                        : 'C:\Program Files\SanDisk\CTF\Dlls\sfcl.ini'
   --relayForceDownload                             : 'off'
   --powercycleoninit                               : 'off'
   --stopBgOperationOnFail                          : 'off'
   --autocompare                                    : '0'
   --autocompareRandomseed                          : '12345678'
   --modeldelaytimeindiagnostic                     : '0'
   --ForceDownloadMechanism                         : '0'
   --EnableUARTDebugLog                             : '0'
   --UARTBaudRate                                   : '230400'
   --SerialUARTToCom                                : '0'
   --UARTDebugFilePath                              : ''
   --sataPort0ToMubIndx                             : '1'
   --sataPort1ToMubIndx                             : '1'
   --sataPort2ToMubIndx                             : '1'
   --sataPort3ToMubIndx                             : '1'
   --fclStep                                        : '0'
   --fclCollectReads                                : '0'
   --fclCollectWrites                               : '0'
   --fclCollectErases                               : '0'
   --fclCollectAOMReads                             : '0'
   --fclAomBase                                     : '10'
   --aomStep                                        : '0'
   --aomMapFile                                     : '0'
   --fclAomSaveFilesStep                            : '1000'
   --gfa                                            : '0'
   --atbuSoftwareLocation                           : ''
   --atbuMemoryName                                 : ''
   --atbuProfilesLocation                           : ''
   --atbuThresholdValue                             : '0'
   --atbuTransitionTime                             : '0'
   --atbuDcCompensation                             : ''


<<<<<<<<<<<<<<< RUNNING TEST: STPTRNSABRTST02_2_Call_All_CMD0 >>>>>>>>>>>>>>>



14:17:57: ###### Running call_All_CMD0_2 scripts  ######
14:18:04: FPGA Image Downloaded Is:C:\Program Files\SanDisk\CTF\FPGA\SD_CQ_SDR2_2-20-00-0002.bin
14:18:04: MaxLba of the card: 0x3B72400 
14:18:06: [GO7_globalPreTestingSettings]### Default Initialization Start
14:18:06: [DVTCommonLib]###  SwitchHostVoltageRegion called
14:18:06: [ SwitchHostVoltageRegion(False) , Command count = 44 ] 
14:18:06: [DVTCommonLib]###  SwitchHostVoltageRegion Completed 

14:18:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 45 ] 
14:18:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 46 ] 
14:18:08: [ CardInit() , Command count = 47 ] 
14:18:08: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 48 ] 

<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

14:18:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:18:08: ####CSD Registe 2.0 Values####
14:18:08: CSD_STRUCTURE                                 :0x1
14:18:08: Reserv1                                       :0x0
14:18:08: Time Access 1 TAAC                            :0xe
14:18:08: Time Access 2 NSAC*100                        :0x0
14:18:08: Data Transfer Rate TRAN_SPEED                 :0x32
14:18:08: Card Command Classess CCC                     :0x5b5
14:18:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:18:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:18:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:18:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:18:08: DSR(driver stage register)  DSR_IMP           :0x0
14:18:08: Reserv2                                       :0x0
14:18:08: Device Size C_SIZE                            :0xedc8
14:18:08: Reserv3                                       :0x0
14:18:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:18:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:18:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:18:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:18:08: Reserv4                                       :0x0
14:18:08: Write Speed Factor R2W_FACTOR                 :0x2
14:18:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:18:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:18:08: FILE_FORMAT_GRP                               :0x0
14:18:08: COPY flag                                     :0x1
14:18:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:18:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:18:08: File_Format                                   :0x0
14:18:08: CRC                                           :0x0
14:18:08: ####CSD Registe Values####  

14:18:08: [DVTCommonLib]### CardInfo :###****CARD INFO****
14:18:08: ProductSerialNumber = 0x23482900
14:18:08: CardMaximumLBA      = 0x3b72400
14:18:08: CardCapacity        = 32G
14:18:08: Is card secure      = 0
14:18:08: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

14:18:08: [GO7_globalPreTestingSettings]### Default Initialization Completed 


14:18:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:18:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:18:10: Host Frequency set to 25000 KHz
14:18:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:18:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:18:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:18:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x06414750>, 0x0, True) , Command count = 49 ] 
14:18:10: [GO18_globalSetVolt]### Host voltage value is set.
14:18:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:18:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x06414960>, 0x0, False) , Command count = 50 ] 
14:18:10: [GO18_globalSetVolt]### Host voltage value is set.
14:18:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 51 ] 
14:18:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:18:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 52 ] 
14:18:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:18:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:18:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:18:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:18:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:18:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 53 ] 
14:18:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:18:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414870>, <py_sfcl.CommandDataDefinition object at 0x06414900>) , Command count = 54 ] 
14:18:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414810>, <py_sfcl.CommandDataDefinition object at 0x06414600>) , Command count = 55 ] 
14:18:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:18:11: [ SetCardRCA(0x1, 0xD555) , Command count = 56 ] 
14:18:11: [DVTCommonLib]### Identification :Idenfication of card completed 

14:18:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:18:11: Host Frequency set to 25000 KHz
14:18:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:18:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:18:11: ####CSD Registe 2.0 Values####
14:18:11: CSD_STRUCTURE                                 :0x1
14:18:11: Reserv1                                       :0x0
14:18:11: Time Access 1 TAAC                            :0xe
14:18:11: Time Access 2 NSAC*100                        :0x0
14:18:11: Data Transfer Rate TRAN_SPEED                 :0x32
14:18:11: Card Command Classess CCC                     :0x5b5
14:18:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:18:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:18:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:18:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:18:11: DSR(driver stage register)  DSR_IMP           :0x0
14:18:11: Reserv2                                       :0x0
14:18:11: Device Size C_SIZE                            :0xedc8
14:18:11: Reserv3                                       :0x0
14:18:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:18:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:18:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:18:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:18:11: Reserv4                                       :0x0
14:18:11: Write Speed Factor R2W_FACTOR                 :0x2
14:18:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:18:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:18:11: FILE_FORMAT_GRP                               :0x0
14:18:11: COPY flag                                     :0x1
14:18:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:18:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:18:11: File_Format                                   :0x0
14:18:11: CRC                                           :0x0
14:18:11: ####CSD Registe Values####  

14:18:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:18:11: [GetSCRRegisterEntry] Passed
14:18:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:18:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:18:11: Data_Status_After Erases          : 0
14:18:11: CPRM Security Support             : No Security
14:18:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:18:11: Spec. Version                     : Version 3.0X
14:18:11: Extended Security Support         : Extended_Security_Not_Supported
14:18:11: Command Support                   : COMMAND_SUPPORT
14:18:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414DE0>, <py_sfcl.CommandDataDefinition object at 0x06414AB0>) , Command count = 57 ] 
14:18:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064142A0>, <py_sfcl.CommandDataDefinition object at 0x06414450>) , Command count = 58 ] 
14:18:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:18:11: [ SetBusWidth(0x4) , Command count = 59 ] 
14:18:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:18:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06414F30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 60 ] 
14:18:11: Protected Area Size 0x28000
14:18:11: Bus Width           2
14:18:11: Secure Mode         0
14:18:11: Speed  Class        4
14:18:11: Perf Move           0
14:18:11: Au Size             9
14:18:11: Erase Size          15
14:18:11: Erase Timeout       1
14:18:11: Erase offset        1
14:18:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:18:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:18:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:18:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 61 ] 
14:18:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:18:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:18:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:18:11: Host Frequency set to 100000 KHz
14:18:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:18:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:18:11: ####CSD Registe 2.0 Values####
14:18:11: CSD_STRUCTURE                                 :0x1
14:18:11: Reserv1                                       :0x0
14:18:11: Time Access 1 TAAC                            :0xe
14:18:11: Time Access 2 NSAC*100                        :0x0
14:18:11: Data Transfer Rate TRAN_SPEED                 :0xb
14:18:11: Card Command Classess CCC                     :0x5b5
14:18:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:18:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:18:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:18:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:18:11: DSR(driver stage register)  DSR_IMP           :0x0
14:18:11: Reserv2                                       :0x0
14:18:11: Device Size C_SIZE                            :0xedc8
14:18:11: Reserv3                                       :0x0
14:18:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:18:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:18:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:18:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:18:11: Reserv4                                       :0x0
14:18:11: Write Speed Factor R2W_FACTOR                 :0x2
14:18:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:18:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:18:11: FILE_FORMAT_GRP                               :0x0
14:18:11: COPY flag                                     :0x1
14:18:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:18:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:18:11: File_Format                                   :0x0
14:18:11: CRC                                           :0x0
14:18:11: ####CSD Registe Values####  

14:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414DB0>, <py_sfcl.CommandDataDefinition object at 0x06414AE0>) , Command count = 62 ] 
14:18:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:18:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414A80>, <py_sfcl.CommandDataDefinition object at 0x064149F0>) , Command count = 63 ] 
14:18:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:18:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:18:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06414630>, <0x200/0x200, Spc, pat:0x0>) , Command count = 64 ] 
14:18:11: Protected Area Size 0x28000
14:18:11: Bus Width           2
14:18:11: Secure Mode         0
14:18:11: Speed  Class        4
14:18:11: Perf Move           0
14:18:11: Au Size             9
14:18:11: Erase Size          15
14:18:11: Erase Timeout       1
14:18:11: Erase offset        1
14:18:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:18:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:18:11: ########################################
14:18:11: Stated Running script STPTRNSABRTST62_util_LOAD_VARS 
14:18:11: ########################################
14:18:11: Failed Running script <module 'STPTRNSABRTST62_util_LOAD_VARS' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST62_util_LOAD_VARS.pyc'> with error 'module' object has no attribute 'TestProcedure' 
14:18:11: ########################################
14:18:11: ########################################
14:18:11: Stated Running script STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump 
14:18:11: ########################################
14:18:11: ###### Running STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump Test ###### 

14:18:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:18:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:18:13: Host Frequency set to 25000 KHz
14:18:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:18:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:18:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:18:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x064517B0>, 0x0, True) , Command count = 65 ] 
14:18:13: [GO18_globalSetVolt]### Host voltage value is set.
14:18:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:18:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451A20>, 0x0, False) , Command count = 66 ] 
14:18:13: [GO18_globalSetVolt]### Host voltage value is set.
14:18:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 67 ] 
14:18:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:18:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 68 ] 
14:18:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:18:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:18:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:18:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:18:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:18:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 69 ] 
14:18:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:18:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:18:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451540>, <py_sfcl.CommandDataDefinition object at 0x06451EA0>) , Command count = 70 ] 
14:18:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:18:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451870>, <py_sfcl.CommandDataDefinition object at 0x06451750>) , Command count = 71 ] 
14:18:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:18:13: [ SetCardRCA(0x1, 0xD555) , Command count = 72 ] 
14:18:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:18:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:18:14: Host Frequency set to 25000 KHz
14:18:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:18:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:18:14: ####CSD Registe 2.0 Values####
14:18:14: CSD_STRUCTURE                                 :0x1
14:18:14: Reserv1                                       :0x0
14:18:14: Time Access 1 TAAC                            :0xe
14:18:14: Time Access 2 NSAC*100                        :0x0
14:18:14: Data Transfer Rate TRAN_SPEED                 :0x32
14:18:14: Card Command Classess CCC                     :0x5b5
14:18:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:18:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:18:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:18:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:18:14: DSR(driver stage register)  DSR_IMP           :0x0
14:18:14: Reserv2                                       :0x0
14:18:14: Device Size C_SIZE                            :0xedc8
14:18:14: Reserv3                                       :0x0
14:18:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:18:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:18:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:18:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:18:14: Reserv4                                       :0x0
14:18:14: Write Speed Factor R2W_FACTOR                 :0x2
14:18:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:18:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:18:14: FILE_FORMAT_GRP                               :0x0
14:18:14: COPY flag                                     :0x1
14:18:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:18:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:18:14: File_Format                                   :0x0
14:18:14: CRC                                           :0x0
14:18:14: ####CSD Registe Values####  

14:18:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:18:14: [GetSCRRegisterEntry] Passed
14:18:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:18:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:18:14: Data_Status_After Erases          : 0
14:18:14: CPRM Security Support             : No Security
14:18:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:18:14: Spec. Version                     : Version 3.0X
14:18:14: Extended Security Support         : Extended_Security_Not_Supported
14:18:14: Command Support                   : COMMAND_SUPPORT
14:18:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:18:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1A80>, <py_sfcl.CommandDataDefinition object at 0x06451900>) , Command count = 73 ] 
14:18:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:18:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451ED0>, <py_sfcl.CommandDataDefinition object at 0x06451780>) , Command count = 74 ] 
14:18:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:18:14: [ SetBusWidth(0x4) , Command count = 75 ] 
14:18:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:18:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x064517E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 76 ] 
14:18:14: Protected Area Size 0x28000
14:18:14: Bus Width           2
14:18:14: Secure Mode         0
14:18:14: Speed  Class        4
14:18:14: Perf Move           0
14:18:14: Au Size             9
14:18:14: Erase Size          15
14:18:14: Erase Timeout       1
14:18:14: Erase offset        1
14:18:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:18:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:18:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:18:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 77 ] 
14:18:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:18:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:18:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:18:14: Host Frequency set to 100000 KHz
14:18:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:18:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:18:14: ####CSD Registe 2.0 Values####
14:18:14: CSD_STRUCTURE                                 :0x1
14:18:14: Reserv1                                       :0x0
14:18:14: Time Access 1 TAAC                            :0xe
14:18:14: Time Access 2 NSAC*100                        :0x0
14:18:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:18:14: Card Command Classess CCC                     :0x5b5
14:18:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:18:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:18:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:18:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:18:14: DSR(driver stage register)  DSR_IMP           :0x0
14:18:14: Reserv2                                       :0x0
14:18:14: Device Size C_SIZE                            :0xedc8
14:18:14: Reserv3                                       :0x0
14:18:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:18:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:18:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:18:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:18:14: Reserv4                                       :0x0
14:18:14: Write Speed Factor R2W_FACTOR                 :0x2
14:18:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:18:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:18:14: FILE_FORMAT_GRP                               :0x0
14:18:14: COPY flag                                     :0x1
14:18:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:18:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:18:14: File_Format                                   :0x0
14:18:14: CRC                                           :0x0
14:18:14: ####CSD Registe Values####  

14:18:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451BD0>, <py_sfcl.CommandDataDefinition object at 0x064515D0>) , Command count = 78 ] 
14:18:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:18:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451FC0>, <py_sfcl.CommandDataDefinition object at 0x064519C0>) , Command count = 79 ] 
14:18:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:18:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:18:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x3A000 with One's Pattern
14:18:16: [ WrLbaNoData(0x0, 0x3A000, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 80 ] 
14:18:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x3A000 with One's Pattern 

14:18:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Outer loop Count 1024
14:18:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Inner loop Count 29
14:18:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Read Stop Transmission called
14:18:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451E10>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064514B0>, <py_sfcl.PySEnhancedCmdData object at 0x06451960>, <None>, <py_sfcl.Command23 object at 0x064512D0>) , Command count = 81 ] 
14:18:27: [ GetCardStatus() , Command count = 82 ] 
14:18:27: Failed Running script <module 'STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump.py'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0xEAL (234) executing command 'EnhancedCommand'
   Description : WATCHDOG_TIMEOUT_PATERN_GEN
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.PySReadWriteParams object at 0x06451E10>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064514B0>, <py_sfcl.PySEnhancedCmdData object at 0x06451960>, <None>, <py_sfcl.Command23 object at 0x064512D0>)')
   Extended error information:
      Status         : 0xB00
      Is busy?       : No
 
14:18:27: ########################################
14:18:27: ########################################
14:18:27: Stated Running script STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap 
14:18:27: ########################################
14:18:27: ###### Running STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap Test ###### 

14:18:27: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### Called STPTRNSABRTST62_util_LOAD_VARS for global values
14:18:27: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### Completed importing global values from STPTRNSABRTST62_util_LOAD_VARS

14:18:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:18:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:18:29: Host Frequency set to 25000 KHz
14:18:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:18:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:18:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:18:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x064516C0>, 0x0, True) , Command count = 83 ] 
14:18:29: [GO18_globalSetVolt]### Host voltage value is set.
14:18:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:18:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451F60>, 0x0, False) , Command count = 84 ] 
14:18:29: [GO18_globalSetVolt]### Host voltage value is set.
14:18:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 85 ] 
14:18:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:18:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 86 ] 
14:18:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:18:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:18:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:18:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:18:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:18:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 87 ] 
14:18:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:18:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:18:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F120>, <py_sfcl.CommandDataDefinition object at 0x0641F090>) , Command count = 88 ] 
14:18:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:18:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F150>, <py_sfcl.CommandDataDefinition object at 0x0641F180>) , Command count = 89 ] 
14:18:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:18:29: [ SetCardRCA(0x1, 0xD555) , Command count = 90 ] 
14:18:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:18:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:18:29: Host Frequency set to 25000 KHz
14:18:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:18:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:18:29: ####CSD Registe 2.0 Values####
14:18:29: CSD_STRUCTURE                                 :0x1
14:18:29: Reserv1                                       :0x0
14:18:29: Time Access 1 TAAC                            :0xe
14:18:29: Time Access 2 NSAC*100                        :0x0
14:18:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:18:29: Card Command Classess CCC                     :0x5b5
14:18:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:18:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:18:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:18:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:18:29: DSR(driver stage register)  DSR_IMP           :0x0
14:18:29: Reserv2                                       :0x0
14:18:29: Device Size C_SIZE                            :0xedc8
14:18:29: Reserv3                                       :0x0
14:18:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:18:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:18:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:18:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:18:29: Reserv4                                       :0x0
14:18:29: Write Speed Factor R2W_FACTOR                 :0x2
14:18:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:18:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:18:29: FILE_FORMAT_GRP                               :0x0
14:18:29: COPY flag                                     :0x1
14:18:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:18:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:18:29: File_Format                                   :0x0
14:18:29: CRC                                           :0x0
14:18:29: ####CSD Registe Values####  

14:18:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:18:29: [GetSCRRegisterEntry] Passed
14:18:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:18:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:18:29: Data_Status_After Erases          : 0
14:18:29: CPRM Security Support             : No Security
14:18:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:18:29: Spec. Version                     : Version 3.0X
14:18:29: Extended Security Support         : Extended_Security_Not_Supported
14:18:29: Command Support                   : COMMAND_SUPPORT
14:18:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:18:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F3F0>, <py_sfcl.CommandDataDefinition object at 0x0641F210>) , Command count = 91 ] 
14:18:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:18:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F270>, <py_sfcl.CommandDataDefinition object at 0x0641F2A0>) , Command count = 92 ] 
14:18:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:18:29: [ SetBusWidth(0x4) , Command count = 93 ] 
14:18:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:18:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0641F360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 94 ] 
14:18:29: Protected Area Size 0x28000
14:18:29: Bus Width           2
14:18:29: Secure Mode         0
14:18:29: Speed  Class        4
14:18:29: Perf Move           0
14:18:29: Au Size             9
14:18:29: Erase Size          15
14:18:29: Erase Timeout       1
14:18:29: Erase offset        1
14:18:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:18:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:18:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:18:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 95 ] 
14:18:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:18:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:18:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:18:30: Host Frequency set to 100000 KHz
14:18:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:18:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:18:30: ####CSD Registe 2.0 Values####
14:18:30: CSD_STRUCTURE                                 :0x1
14:18:30: Reserv1                                       :0x0
14:18:30: Time Access 1 TAAC                            :0xe
14:18:30: Time Access 2 NSAC*100                        :0x0
14:18:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:18:30: Card Command Classess CCC                     :0x5b5
14:18:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:18:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:18:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:18:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:18:30: DSR(driver stage register)  DSR_IMP           :0x0
14:18:30: Reserv2                                       :0x0
14:18:30: Device Size C_SIZE                            :0xedc8
14:18:30: Reserv3                                       :0x0
14:18:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:18:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:18:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:18:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:18:30: Reserv4                                       :0x0
14:18:30: Write Speed Factor R2W_FACTOR                 :0x2
14:18:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:18:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:18:30: FILE_FORMAT_GRP                               :0x0
14:18:30: COPY flag                                     :0x1
14:18:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:18:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:18:30: File_Format                                   :0x0
14:18:30: CRC                                           :0x0
14:18:30: ####CSD Registe Values####  

14:18:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F660>, <py_sfcl.CommandDataDefinition object at 0x0641F480>) , Command count = 96 ] 
14:18:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:18:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F4E0>, <py_sfcl.CommandDataDefinition object at 0x0641F510>) , Command count = 97 ] 
14:18:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:18:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:18:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x3A000 with One's Pattern
14:18:32: [ WrLbaNoData(0x0, 0x3A000, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 98 ] 
14:18:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x3A000 with One's Pattern 

14:18:32: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:18:32: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:18:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F5A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F5D0>, <py_sfcl.PySEnhancedCmdData object at 0x0641F600>, <None>, <py_sfcl.Command23 object at 0x0641F690>) , Command count = 99 ] 
14:18:42: [ GetCardStatus() , Command count = 100 ] 
14:18:42: Failed Running script <module 'STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap.py'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x25L (37) executing command 'EnhancedCommand'
   Description : Time out waiting for host response
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.PySReadWriteParams object at 0x0641F5A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F5D0>, <py_sfcl.PySEnhancedCmdData object at 0x0641F600>, <None>, <py_sfcl.Command23 object at 0x0641F690>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No
 
14:18:42: ########################################
14:18:42: ########################################
14:18:42: Stated Running script STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump 
14:18:42: ########################################
14:18:42: ###### Running STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_JumpTest ###### 

14:18:42: [GO4_globalInitCard]### Switch to Specify Card Type
14:18:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:18:44: Host Frequency set to 25000 KHz
14:18:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:18:44: [GO18_globalSetVolt]### Set Host Voltage value.
14:18:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:18:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB10>, 0x0, True) , Command count = 101 ] 
14:18:44: [GO18_globalSetVolt]### Host voltage value is set.
14:18:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:18:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FA80>, 0x0, False) , Command count = 102 ] 
14:18:44: [GO18_globalSetVolt]### Host voltage value is set.
14:18:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 103 ] 
14:18:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:18:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 104 ] 
14:18:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:18:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:18:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:18:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:18:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:18:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 105 ] 
14:18:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:18:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:18:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FC00>, <py_sfcl.CommandDataDefinition object at 0x0641FFC0>) , Command count = 106 ] 
14:18:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:18:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FCC0>, <py_sfcl.CommandDataDefinition object at 0x0641FD80>) , Command count = 107 ] 
14:18:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:18:45: [ SetCardRCA(0x1, 0xD555) , Command count = 108 ] 
14:18:45: [DVTCommonLib]### Identification :Idenfication of card completed 

14:18:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:18:45: Host Frequency set to 25000 KHz
14:18:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:18:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:18:45: ####CSD Registe 2.0 Values####
14:18:45: CSD_STRUCTURE                                 :0x1
14:18:45: Reserv1                                       :0x0
14:18:45: Time Access 1 TAAC                            :0xe
14:18:45: Time Access 2 NSAC*100                        :0x0
14:18:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:18:45: Card Command Classess CCC                     :0x5b5
14:18:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:18:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:18:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:18:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:18:45: DSR(driver stage register)  DSR_IMP           :0x0
14:18:45: Reserv2                                       :0x0
14:18:45: Device Size C_SIZE                            :0xedc8
14:18:45: Reserv3                                       :0x0
14:18:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:18:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:18:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:18:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:18:45: Reserv4                                       :0x0
14:18:45: Write Speed Factor R2W_FACTOR                 :0x2
14:18:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:18:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:18:45: FILE_FORMAT_GRP                               :0x0
14:18:45: COPY flag                                     :0x1
14:18:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:18:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:18:45: File_Format                                   :0x0
14:18:45: CRC                                           :0x0
14:18:45: ####CSD Registe Values####  

14:18:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:18:45: [GetSCRRegisterEntry] Passed
14:18:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:18:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:18:45: Data_Status_After Erases          : 0
14:18:45: CPRM Security Support             : No Security
14:18:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:18:45: Spec. Version                     : Version 3.0X
14:18:45: Extended Security Support         : Extended_Security_Not_Supported
14:18:45: Command Support                   : COMMAND_SUPPORT
14:18:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:18:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FB70>, <py_sfcl.CommandDataDefinition object at 0x0641FCF0>) , Command count = 109 ] 
14:18:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:18:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FF30>, <py_sfcl.CommandDataDefinition object at 0x0641FDE0>) , Command count = 110 ] 
14:18:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:18:45: [ SetBusWidth(0x4) , Command count = 111 ] 
14:18:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:18:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0641FEA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 112 ] 
14:18:45: Protected Area Size 0x28000
14:18:45: Bus Width           2
14:18:45: Secure Mode         0
14:18:45: Speed  Class        4
14:18:45: Perf Move           0
14:18:45: Au Size             9
14:18:45: Erase Size          15
14:18:45: Erase Timeout       1
14:18:45: Erase offset        1
14:18:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:18:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:18:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:18:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 113 ] 
14:18:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:18:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:18:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:18:45: Host Frequency set to 100000 KHz
14:18:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:18:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:18:45: ####CSD Registe 2.0 Values####
14:18:45: CSD_STRUCTURE                                 :0x1
14:18:45: Reserv1                                       :0x0
14:18:45: Time Access 1 TAAC                            :0xe
14:18:45: Time Access 2 NSAC*100                        :0x0
14:18:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:18:45: Card Command Classess CCC                     :0x5b5
14:18:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:18:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:18:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:18:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:18:45: DSR(driver stage register)  DSR_IMP           :0x0
14:18:45: Reserv2                                       :0x0
14:18:45: Device Size C_SIZE                            :0xedc8
14:18:45: Reserv3                                       :0x0
14:18:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:18:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:18:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:18:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:18:45: Reserv4                                       :0x0
14:18:45: Write Speed Factor R2W_FACTOR                 :0x2
14:18:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:18:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:18:45: FILE_FORMAT_GRP                               :0x0
14:18:45: COPY flag                                     :0x1
14:18:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:18:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:18:45: File_Format                                   :0x0
14:18:45: CRC                                           :0x0
14:18:45: ####CSD Registe Values####  

14:18:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FF90>, <py_sfcl.CommandDataDefinition object at 0x0641FF00>) , Command count = 114 ] 
14:18:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:18:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467180>, <py_sfcl.CommandDataDefinition object at 0x06467030>) , Command count = 115 ] 
14:18:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:18:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:18:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x3A000 with One's Pattern
14:18:48: [ WrLbaNoData(0x0, 0x3A000, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 116 ] 
14:18:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x3A000 with One's Pattern 

14:18:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Outer loop Count 1024
14:18:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 29
14:18:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:18:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064670C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064670F0>, <py_sfcl.PySEnhancedCmdData object at 0x06467120>, <None>, <py_sfcl.Command23 object at 0x064671B0>) , Command count = 117 ] 
14:18:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:18:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:18:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064672D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467300>, <py_sfcl.PySEnhancedCmdData object at 0x06467330>, <None>, <py_sfcl.Command23 object at 0x06467150>) , Command count = 118 ] 
14:18:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:18:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:18:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:18:50: Host Frequency set to 25000 KHz
14:18:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:18:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:18:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:18:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x064675A0>, 0x0, True) , Command count = 119 ] 
14:18:50: [GO18_globalSetVolt]### Host voltage value is set.
14:18:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:18:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x064673F0>, 0x0, False) , Command count = 120 ] 
14:18:50: [GO18_globalSetVolt]### Host voltage value is set.
14:18:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 121 ] 
14:18:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:18:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 122 ] 
14:18:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:18:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:18:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:18:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:18:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:18:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 123 ] 
14:18:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:18:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467540>, <py_sfcl.CommandDataDefinition object at 0x064674E0>) , Command count = 124 ] 
14:18:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467570>, <py_sfcl.CommandDataDefinition object at 0x064675D0>) , Command count = 125 ] 
14:18:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:18:50: [ SetCardRCA(0x1, 0xD555) , Command count = 126 ] 
14:18:50: [DVTCommonLib]### Identification :Idenfication of card completed 

14:18:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:18:50: Host Frequency set to 25000 KHz
14:18:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:18:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:18:50: ####CSD Registe 2.0 Values####
14:18:50: CSD_STRUCTURE                                 :0x1
14:18:50: Reserv1                                       :0x0
14:18:50: Time Access 1 TAAC                            :0xe
14:18:50: Time Access 2 NSAC*100                        :0x0
14:18:50: Data Transfer Rate TRAN_SPEED                 :0x32
14:18:50: Card Command Classess CCC                     :0x5b5
14:18:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:18:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:18:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:18:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:18:50: DSR(driver stage register)  DSR_IMP           :0x0
14:18:50: Reserv2                                       :0x0
14:18:50: Device Size C_SIZE                            :0xedc8
14:18:50: Reserv3                                       :0x0
14:18:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:18:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:18:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:18:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:18:50: Reserv4                                       :0x0
14:18:50: Write Speed Factor R2W_FACTOR                 :0x2
14:18:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:18:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:18:50: FILE_FORMAT_GRP                               :0x0
14:18:50: COPY flag                                     :0x1
14:18:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:18:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:18:50: File_Format                                   :0x0
14:18:50: CRC                                           :0x0
14:18:50: ####CSD Registe Values####  

14:18:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:18:50: [GetSCRRegisterEntry] Passed
14:18:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:18:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:18:50: Data_Status_After Erases          : 0
14:18:50: CPRM Security Support             : No Security
14:18:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:18:50: Spec. Version                     : Version 3.0X
14:18:50: Extended Security Support         : Extended_Security_Not_Supported
14:18:50: Command Support                   : COMMAND_SUPPORT
14:18:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467840>, <py_sfcl.CommandDataDefinition object at 0x06467660>) , Command count = 127 ] 
14:18:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064676C0>, <py_sfcl.CommandDataDefinition object at 0x064676F0>) , Command count = 128 ] 
14:18:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:18:50: [ SetBusWidth(0x4) , Command count = 129 ] 
14:18:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:18:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x064677B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 130 ] 
14:18:50: Protected Area Size 0x28000
14:18:50: Bus Width           2
14:18:50: Secure Mode         0
14:18:50: Speed  Class        4
14:18:50: Perf Move           0
14:18:50: Au Size             9
14:18:50: Erase Size          15
14:18:50: Erase Timeout       1
14:18:50: Erase offset        1
14:18:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:18:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:18:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:18:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 131 ] 
14:18:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:18:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:18:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:18:50: Host Frequency set to 100000 KHz
14:18:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:18:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:18:50: ####CSD Registe 2.0 Values####
14:18:50: CSD_STRUCTURE                                 :0x1
14:18:50: Reserv1                                       :0x0
14:18:50: Time Access 1 TAAC                            :0xe
14:18:50: Time Access 2 NSAC*100                        :0x0
14:18:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:18:50: Card Command Classess CCC                     :0x5b5
14:18:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:18:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:18:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:18:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:18:50: DSR(driver stage register)  DSR_IMP           :0x0
14:18:50: Reserv2                                       :0x0
14:18:50: Device Size C_SIZE                            :0xedc8
14:18:50: Reserv3                                       :0x0
14:18:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:18:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:18:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:18:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:18:50: Reserv4                                       :0x0
14:18:50: Write Speed Factor R2W_FACTOR                 :0x2
14:18:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:18:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:18:50: FILE_FORMAT_GRP                               :0x0
14:18:50: COPY flag                                     :0x1
14:18:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:18:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:18:50: File_Format                                   :0x0
14:18:50: CRC                                           :0x0
14:18:50: ####CSD Registe Values####  

14:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467A50>, <py_sfcl.CommandDataDefinition object at 0x06467870>) , Command count = 132 ] 
14:18:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:18:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064678D0>, <py_sfcl.CommandDataDefinition object at 0x06467900>) , Command count = 133 ] 
14:18:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:18:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:18:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:18:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467990>, <py_sfcl.PySEnhancedCmdData object at 0x064679C0>, <None>, <py_sfcl.Command23 object at 0x06467360>) , Command count = 134 ] 
14:18:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:18:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 28
14:18:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:18:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06467AE0>, <None>, <py_sfcl.Command23 object at 0x064679F0>) , Command count = 135 ] 
14:18:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:18:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:18:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467B70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467BA0>, <py_sfcl.PySEnhancedCmdData object at 0x06467BD0>, <None>, <py_sfcl.Command23 object at 0x06467B10>) , Command count = 136 ] 
14:18:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:18:50: [GO4_globalInitCard]### Switch to Specify Card Type
14:18:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:18:53: Host Frequency set to 25000 KHz
14:18:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:18:53: [GO18_globalSetVolt]### Set Host Voltage value.
14:18:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:18:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467E40>, 0x0, True) , Command count = 137 ] 
14:18:53: [GO18_globalSetVolt]### Host voltage value is set.
14:18:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:18:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467C90>, 0x0, False) , Command count = 138 ] 
14:18:53: [GO18_globalSetVolt]### Host voltage value is set.
14:18:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 139 ] 
14:18:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:18:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 140 ] 
14:18:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:18:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:18:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:18:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:18:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:18:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 141 ] 
14:18:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:18:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467DE0>, <py_sfcl.CommandDataDefinition object at 0x06467D80>) , Command count = 142 ] 
14:18:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467E10>, <py_sfcl.CommandDataDefinition object at 0x06467E70>) , Command count = 143 ] 
14:18:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:18:53: [ SetCardRCA(0x1, 0xD555) , Command count = 144 ] 
14:18:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:18:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:18:53: Host Frequency set to 25000 KHz
14:18:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:18:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:18:53: ####CSD Registe 2.0 Values####
14:18:53: CSD_STRUCTURE                                 :0x1
14:18:53: Reserv1                                       :0x0
14:18:53: Time Access 1 TAAC                            :0xe
14:18:53: Time Access 2 NSAC*100                        :0x0
14:18:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:18:53: Card Command Classess CCC                     :0x5b5
14:18:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:18:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:18:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:18:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:18:53: DSR(driver stage register)  DSR_IMP           :0x0
14:18:53: Reserv2                                       :0x0
14:18:53: Device Size C_SIZE                            :0xedc8
14:18:53: Reserv3                                       :0x0
14:18:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:18:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:18:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:18:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:18:53: Reserv4                                       :0x0
14:18:53: Write Speed Factor R2W_FACTOR                 :0x2
14:18:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:18:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:18:53: FILE_FORMAT_GRP                               :0x0
14:18:53: COPY flag                                     :0x1
14:18:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:18:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:18:53: File_Format                                   :0x0
14:18:53: CRC                                           :0x0
14:18:53: ####CSD Registe Values####  

14:18:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:18:53: [GetSCRRegisterEntry] Passed
14:18:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:18:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:18:53: Data_Status_After Erases          : 0
14:18:53: CPRM Security Support             : No Security
14:18:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:18:53: Spec. Version                     : Version 3.0X
14:18:53: Extended Security Support         : Extended_Security_Not_Supported
14:18:53: Command Support                   : COMMAND_SUPPORT
14:18:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467F00>, <py_sfcl.CommandDataDefinition object at 0x06467F30>) , Command count = 145 ] 
14:18:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467F90>, <py_sfcl.CommandDataDefinition object at 0x06467FC0>) , Command count = 146 ] 
14:18:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:18:53: [ SetBusWidth(0x4) , Command count = 147 ] 
14:18:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:18:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x064210C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 148 ] 
14:18:53: Protected Area Size 0x28000
14:18:53: Bus Width           2
14:18:53: Secure Mode         0
14:18:53: Speed  Class        4
14:18:53: Perf Move           0
14:18:53: Au Size             9
14:18:53: Erase Size          15
14:18:53: Erase Timeout       1
14:18:53: Erase offset        1
14:18:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:18:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:18:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:18:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 149 ] 
14:18:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:18:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:18:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:18:53: Host Frequency set to 100000 KHz
14:18:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:18:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:18:53: ####CSD Registe 2.0 Values####
14:18:53: CSD_STRUCTURE                                 :0x1
14:18:53: Reserv1                                       :0x0
14:18:53: Time Access 1 TAAC                            :0xe
14:18:53: Time Access 2 NSAC*100                        :0x0
14:18:53: Data Transfer Rate TRAN_SPEED                 :0xb
14:18:53: Card Command Classess CCC                     :0x5b5
14:18:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:18:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:18:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:18:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:18:53: DSR(driver stage register)  DSR_IMP           :0x0
14:18:53: Reserv2                                       :0x0
14:18:53: Device Size C_SIZE                            :0xedc8
14:18:53: Reserv3                                       :0x0
14:18:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:18:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:18:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:18:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:18:53: Reserv4                                       :0x0
14:18:53: Write Speed Factor R2W_FACTOR                 :0x2
14:18:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:18:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:18:53: FILE_FORMAT_GRP                               :0x0
14:18:53: COPY flag                                     :0x1
14:18:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:18:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:18:53: File_Format                                   :0x0
14:18:53: CRC                                           :0x0
14:18:53: ####CSD Registe Values####  

14:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421330>, <py_sfcl.CommandDataDefinition object at 0x06421150>) , Command count = 150 ] 
14:18:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064211B0>, <py_sfcl.CommandDataDefinition object at 0x064211E0>) , Command count = 151 ] 
14:18:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:18:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:18:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:18:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421240>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421270>, <py_sfcl.PySEnhancedCmdData object at 0x064212A0>, <None>, <py_sfcl.Command23 object at 0x06467C00>) , Command count = 152 ] 
14:18:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:18:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 27
14:18:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:18:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421360>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421390>, <py_sfcl.PySEnhancedCmdData object at 0x064213C0>, <None>, <py_sfcl.Command23 object at 0x064212D0>) , Command count = 153 ] 
14:18:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:18:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:18:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421450>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421480>, <py_sfcl.PySEnhancedCmdData object at 0x064214B0>, <None>, <py_sfcl.Command23 object at 0x064213F0>) , Command count = 154 ] 
14:18:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:18:53: [GO4_globalInitCard]### Switch to Specify Card Type
14:18:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:18:55: Host Frequency set to 25000 KHz
14:18:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:18:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:18:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:18:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421720>, 0x0, True) , Command count = 155 ] 
14:18:55: [GO18_globalSetVolt]### Host voltage value is set.
14:18:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:18:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421570>, 0x0, False) , Command count = 156 ] 
14:18:55: [GO18_globalSetVolt]### Host voltage value is set.
14:18:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 157 ] 
14:18:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:18:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 158 ] 
14:18:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:18:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:18:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:18:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:18:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:18:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 159 ] 
14:18:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:18:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:18:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216C0>, <py_sfcl.CommandDataDefinition object at 0x06421660>) , Command count = 160 ] 
14:18:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:18:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216F0>, <py_sfcl.CommandDataDefinition object at 0x06421750>) , Command count = 161 ] 
14:18:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:18:56: [ SetCardRCA(0x1, 0xD555) , Command count = 162 ] 
14:18:56: [DVTCommonLib]### Identification :Idenfication of card completed 

14:18:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:18:56: Host Frequency set to 25000 KHz
14:18:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:18:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:18:56: ####CSD Registe 2.0 Values####
14:18:56: CSD_STRUCTURE                                 :0x1
14:18:56: Reserv1                                       :0x0
14:18:56: Time Access 1 TAAC                            :0xe
14:18:56: Time Access 2 NSAC*100                        :0x0
14:18:56: Data Transfer Rate TRAN_SPEED                 :0x32
14:18:56: Card Command Classess CCC                     :0x5b5
14:18:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:18:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:18:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:18:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:18:56: DSR(driver stage register)  DSR_IMP           :0x0
14:18:56: Reserv2                                       :0x0
14:18:56: Device Size C_SIZE                            :0xedc8
14:18:56: Reserv3                                       :0x0
14:18:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:18:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:18:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:18:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:18:56: Reserv4                                       :0x0
14:18:56: Write Speed Factor R2W_FACTOR                 :0x2
14:18:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:18:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:18:56: FILE_FORMAT_GRP                               :0x0
14:18:56: COPY flag                                     :0x1
14:18:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:18:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:18:56: File_Format                                   :0x0
14:18:56: CRC                                           :0x0
14:18:56: ####CSD Registe Values####  

14:18:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:18:56: [GetSCRRegisterEntry] Passed
14:18:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:18:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:18:56: Data_Status_After Erases          : 0
14:18:56: CPRM Security Support             : No Security
14:18:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:18:56: Spec. Version                     : Version 3.0X
14:18:56: Extended Security Support         : Extended_Security_Not_Supported
14:18:56: Command Support                   : COMMAND_SUPPORT
14:18:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:18:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064219C0>, <py_sfcl.CommandDataDefinition object at 0x064217E0>) , Command count = 163 ] 
14:18:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:18:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421840>, <py_sfcl.CommandDataDefinition object at 0x06421870>) , Command count = 164 ] 
14:18:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:18:56: [ SetBusWidth(0x4) , Command count = 165 ] 
14:18:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:18:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06421930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 166 ] 
14:18:56: Protected Area Size 0x28000
14:18:56: Bus Width           2
14:18:56: Secure Mode         0
14:18:56: Speed  Class        4
14:18:56: Perf Move           0
14:18:56: Au Size             9
14:18:56: Erase Size          15
14:18:56: Erase Timeout       1
14:18:56: Erase offset        1
14:18:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:18:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:18:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:18:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 167 ] 
14:18:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:18:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:18:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:18:56: Host Frequency set to 100000 KHz
14:18:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:18:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:18:56: ####CSD Registe 2.0 Values####
14:18:56: CSD_STRUCTURE                                 :0x1
14:18:56: Reserv1                                       :0x0
14:18:56: Time Access 1 TAAC                            :0xe
14:18:56: Time Access 2 NSAC*100                        :0x0
14:18:56: Data Transfer Rate TRAN_SPEED                 :0xb
14:18:56: Card Command Classess CCC                     :0x5b5
14:18:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:18:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:18:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:18:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:18:56: DSR(driver stage register)  DSR_IMP           :0x0
14:18:56: Reserv2                                       :0x0
14:18:56: Device Size C_SIZE                            :0xedc8
14:18:56: Reserv3                                       :0x0
14:18:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:18:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:18:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:18:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:18:56: Reserv4                                       :0x0
14:18:56: Write Speed Factor R2W_FACTOR                 :0x2
14:18:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:18:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:18:56: FILE_FORMAT_GRP                               :0x0
14:18:56: COPY flag                                     :0x1
14:18:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:18:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:18:56: File_Format                                   :0x0
14:18:56: CRC                                           :0x0
14:18:56: ####CSD Registe Values####  

14:18:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421BD0>, <py_sfcl.CommandDataDefinition object at 0x064219F0>) , Command count = 168 ] 
14:18:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:18:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421A50>, <py_sfcl.CommandDataDefinition object at 0x06421A80>) , Command count = 169 ] 
14:18:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:18:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:18:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:18:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421B10>, <py_sfcl.PySEnhancedCmdData object at 0x06421B40>, <None>, <py_sfcl.Command23 object at 0x064214E0>) , Command count = 170 ] 
14:18:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:18:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 26
14:18:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:18:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421C30>, <py_sfcl.PySEnhancedCmdData object at 0x06421C60>, <None>, <py_sfcl.Command23 object at 0x06421B70>) , Command count = 171 ] 
14:18:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:18:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:18:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421CF0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421D20>, <py_sfcl.PySEnhancedCmdData object at 0x06421D50>, <None>, <py_sfcl.Command23 object at 0x06421C90>) , Command count = 172 ] 
14:18:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:18:56: [GO4_globalInitCard]### Switch to Specify Card Type
14:18:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:18:58: Host Frequency set to 25000 KHz
14:18:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:18:58: [GO18_globalSetVolt]### Set Host Voltage value.
14:18:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:18:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421FC0>, 0x0, True) , Command count = 173 ] 
14:18:58: [GO18_globalSetVolt]### Host voltage value is set.
14:18:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:18:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421E10>, 0x0, False) , Command count = 174 ] 
14:18:58: [GO18_globalSetVolt]### Host voltage value is set.
14:18:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 175 ] 
14:18:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:18:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 176 ] 
14:18:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:18:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:18:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:18:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:18:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:18:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 177 ] 
14:18:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:18:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:18:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421F60>, <py_sfcl.CommandDataDefinition object at 0x06421F00>) , Command count = 178 ] 
14:18:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:18:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421F90>, <py_sfcl.CommandDataDefinition object at 0x0642A030>) , Command count = 179 ] 
14:18:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:18:58: [ SetCardRCA(0x1, 0xD555) , Command count = 180 ] 
14:18:58: [DVTCommonLib]### Identification :Idenfication of card completed 

14:18:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:18:59: Host Frequency set to 25000 KHz
14:18:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:18:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:18:59: ####CSD Registe 2.0 Values####
14:18:59: CSD_STRUCTURE                                 :0x1
14:18:59: Reserv1                                       :0x0
14:18:59: Time Access 1 TAAC                            :0xe
14:18:59: Time Access 2 NSAC*100                        :0x0
14:18:59: Data Transfer Rate TRAN_SPEED                 :0x32
14:18:59: Card Command Classess CCC                     :0x5b5
14:18:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:18:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:18:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:18:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:18:59: DSR(driver stage register)  DSR_IMP           :0x0
14:18:59: Reserv2                                       :0x0
14:18:59: Device Size C_SIZE                            :0xedc8
14:18:59: Reserv3                                       :0x0
14:18:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:18:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:18:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:18:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:18:59: Reserv4                                       :0x0
14:18:59: Write Speed Factor R2W_FACTOR                 :0x2
14:18:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:18:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:18:59: FILE_FORMAT_GRP                               :0x0
14:18:59: COPY flag                                     :0x1
14:18:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:18:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:18:59: File_Format                                   :0x0
14:18:59: CRC                                           :0x0
14:18:59: ####CSD Registe Values####  

14:18:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:18:59: [GetSCRRegisterEntry] Passed
14:18:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:18:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:18:59: Data_Status_After Erases          : 0
14:18:59: CPRM Security Support             : No Security
14:18:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:18:59: Spec. Version                     : Version 3.0X
14:18:59: Extended Security Support         : Extended_Security_Not_Supported
14:18:59: Command Support                   : COMMAND_SUPPORT
14:18:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:18:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A2A0>, <py_sfcl.CommandDataDefinition object at 0x0642A0C0>) , Command count = 181 ] 
14:18:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:18:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A120>, <py_sfcl.CommandDataDefinition object at 0x0642A150>) , Command count = 182 ] 
14:18:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:18:59: [ SetBusWidth(0x4) , Command count = 183 ] 
14:18:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:18:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642A210>, <0x200/0x200, Spc, pat:0x0>) , Command count = 184 ] 
14:18:59: Protected Area Size 0x28000
14:18:59: Bus Width           2
14:18:59: Secure Mode         0
14:18:59: Speed  Class        4
14:18:59: Perf Move           0
14:18:59: Au Size             9
14:18:59: Erase Size          15
14:18:59: Erase Timeout       1
14:18:59: Erase offset        1
14:18:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:18:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:18:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:18:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 185 ] 
14:18:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:18:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:18:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:18:59: Host Frequency set to 100000 KHz
14:18:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:18:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:18:59: ####CSD Registe 2.0 Values####
14:18:59: CSD_STRUCTURE                                 :0x1
14:18:59: Reserv1                                       :0x0
14:18:59: Time Access 1 TAAC                            :0xe
14:18:59: Time Access 2 NSAC*100                        :0x0
14:18:59: Data Transfer Rate TRAN_SPEED                 :0xb
14:18:59: Card Command Classess CCC                     :0x5b5
14:18:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:18:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:18:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:18:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:18:59: DSR(driver stage register)  DSR_IMP           :0x0
14:18:59: Reserv2                                       :0x0
14:18:59: Device Size C_SIZE                            :0xedc8
14:18:59: Reserv3                                       :0x0
14:18:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:18:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:18:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:18:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:18:59: Reserv4                                       :0x0
14:18:59: Write Speed Factor R2W_FACTOR                 :0x2
14:18:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:18:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:18:59: FILE_FORMAT_GRP                               :0x0
14:18:59: COPY flag                                     :0x1
14:18:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:18:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:18:59: File_Format                                   :0x0
14:18:59: CRC                                           :0x0
14:18:59: ####CSD Registe Values####  

14:18:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A4B0>, <py_sfcl.CommandDataDefinition object at 0x0642A2D0>) , Command count = 186 ] 
14:18:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:18:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A330>, <py_sfcl.CommandDataDefinition object at 0x0642A360>) , Command count = 187 ] 
14:18:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:18:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:18:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:18:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A3C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A3F0>, <py_sfcl.PySEnhancedCmdData object at 0x0642A420>, <None>, <py_sfcl.Command23 object at 0x06421D80>) , Command count = 188 ] 
14:18:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:18:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 25
14:18:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:18:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A510>, <py_sfcl.PySEnhancedCmdData object at 0x0642A540>, <None>, <py_sfcl.Command23 object at 0x0642A450>) , Command count = 189 ] 
14:18:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:18:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:18:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A5D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A600>, <py_sfcl.PySEnhancedCmdData object at 0x0642A630>, <None>, <py_sfcl.Command23 object at 0x0642A570>) , Command count = 190 ] 
14:18:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:18:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:01: Host Frequency set to 25000 KHz
14:19:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A8A0>, 0x0, True) , Command count = 191 ] 
14:19:01: [GO18_globalSetVolt]### Host voltage value is set.
14:19:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A6F0>, 0x0, False) , Command count = 192 ] 
14:19:01: [GO18_globalSetVolt]### Host voltage value is set.
14:19:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 193 ] 
14:19:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 194 ] 
14:19:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 195 ] 
14:19:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A840>, <py_sfcl.CommandDataDefinition object at 0x0642A7E0>) , Command count = 196 ] 
14:19:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A870>, <py_sfcl.CommandDataDefinition object at 0x0642A8D0>) , Command count = 197 ] 
14:19:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:01: [ SetCardRCA(0x1, 0xD555) , Command count = 198 ] 
14:19:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:01: Host Frequency set to 25000 KHz
14:19:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:01: ####CSD Registe 2.0 Values####
14:19:01: CSD_STRUCTURE                                 :0x1
14:19:01: Reserv1                                       :0x0
14:19:01: Time Access 1 TAAC                            :0xe
14:19:01: Time Access 2 NSAC*100                        :0x0
14:19:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:01: Card Command Classess CCC                     :0x5b5
14:19:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:01: DSR(driver stage register)  DSR_IMP           :0x0
14:19:01: Reserv2                                       :0x0
14:19:01: Device Size C_SIZE                            :0xedc8
14:19:01: Reserv3                                       :0x0
14:19:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:01: Reserv4                                       :0x0
14:19:01: Write Speed Factor R2W_FACTOR                 :0x2
14:19:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:01: FILE_FORMAT_GRP                               :0x0
14:19:01: COPY flag                                     :0x1
14:19:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:01: File_Format                                   :0x0
14:19:01: CRC                                           :0x0
14:19:01: ####CSD Registe Values####  

14:19:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:01: [GetSCRRegisterEntry] Passed
14:19:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:01: Data_Status_After Erases          : 0
14:19:01: CPRM Security Support             : No Security
14:19:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:01: Spec. Version                     : Version 3.0X
14:19:01: Extended Security Support         : Extended_Security_Not_Supported
14:19:01: Command Support                   : COMMAND_SUPPORT
14:19:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AB40>, <py_sfcl.CommandDataDefinition object at 0x0642A960>) , Command count = 199 ] 
14:19:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A9C0>, <py_sfcl.CommandDataDefinition object at 0x0642A9F0>) , Command count = 200 ] 
14:19:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:01: [ SetBusWidth(0x4) , Command count = 201 ] 
14:19:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642AAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 202 ] 
14:19:01: Protected Area Size 0x28000
14:19:01: Bus Width           2
14:19:01: Secure Mode         0
14:19:01: Speed  Class        4
14:19:01: Perf Move           0
14:19:01: Au Size             9
14:19:01: Erase Size          15
14:19:01: Erase Timeout       1
14:19:01: Erase offset        1
14:19:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 203 ] 
14:19:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:01: Host Frequency set to 100000 KHz
14:19:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:01: ####CSD Registe 2.0 Values####
14:19:01: CSD_STRUCTURE                                 :0x1
14:19:01: Reserv1                                       :0x0
14:19:01: Time Access 1 TAAC                            :0xe
14:19:01: Time Access 2 NSAC*100                        :0x0
14:19:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:01: Card Command Classess CCC                     :0x5b5
14:19:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:01: DSR(driver stage register)  DSR_IMP           :0x0
14:19:01: Reserv2                                       :0x0
14:19:01: Device Size C_SIZE                            :0xedc8
14:19:01: Reserv3                                       :0x0
14:19:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:01: Reserv4                                       :0x0
14:19:01: Write Speed Factor R2W_FACTOR                 :0x2
14:19:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:01: FILE_FORMAT_GRP                               :0x0
14:19:01: COPY flag                                     :0x1
14:19:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:01: File_Format                                   :0x0
14:19:01: CRC                                           :0x0
14:19:01: ####CSD Registe Values####  

14:19:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AD50>, <py_sfcl.CommandDataDefinition object at 0x0642AB70>) , Command count = 204 ] 
14:19:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ABD0>, <py_sfcl.CommandDataDefinition object at 0x0642AC00>) , Command count = 205 ] 
14:19:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AC60>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC90>, <py_sfcl.PySEnhancedCmdData object at 0x0642ACC0>, <None>, <py_sfcl.Command23 object at 0x0642A660>) , Command count = 206 ] 
14:19:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 24
14:19:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642ADB0>, <py_sfcl.PySEnhancedCmdData object at 0x0642ADE0>, <None>, <py_sfcl.Command23 object at 0x0642ACF0>) , Command count = 207 ] 
14:19:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AE70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AEA0>, <py_sfcl.PySEnhancedCmdData object at 0x0642AED0>, <None>, <py_sfcl.Command23 object at 0x0642AE10>) , Command count = 208 ] 
14:19:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:02: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:04: Host Frequency set to 25000 KHz
14:19:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:04: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642AF60>, 0x0, True) , Command count = 209 ] 
14:19:04: [GO18_globalSetVolt]### Host voltage value is set.
14:19:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642AFC0>, 0x0, False) , Command count = 210 ] 
14:19:04: [GO18_globalSetVolt]### Host voltage value is set.
14:19:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 211 ] 
14:19:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 212 ] 
14:19:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 213 ] 
14:19:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E150>, <py_sfcl.CommandDataDefinition object at 0x0642E0F0>) , Command count = 214 ] 
14:19:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E180>, <py_sfcl.CommandDataDefinition object at 0x0642E1B0>) , Command count = 215 ] 
14:19:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:04: [ SetCardRCA(0x1, 0xD555) , Command count = 216 ] 
14:19:04: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:04: Host Frequency set to 25000 KHz
14:19:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:04: ####CSD Registe 2.0 Values####
14:19:04: CSD_STRUCTURE                                 :0x1
14:19:04: Reserv1                                       :0x0
14:19:04: Time Access 1 TAAC                            :0xe
14:19:04: Time Access 2 NSAC*100                        :0x0
14:19:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:04: Card Command Classess CCC                     :0x5b5
14:19:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:04: DSR(driver stage register)  DSR_IMP           :0x0
14:19:04: Reserv2                                       :0x0
14:19:04: Device Size C_SIZE                            :0xedc8
14:19:04: Reserv3                                       :0x0
14:19:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:04: Reserv4                                       :0x0
14:19:04: Write Speed Factor R2W_FACTOR                 :0x2
14:19:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:04: FILE_FORMAT_GRP                               :0x0
14:19:04: COPY flag                                     :0x1
14:19:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:04: File_Format                                   :0x0
14:19:04: CRC                                           :0x0
14:19:04: ####CSD Registe Values####  

14:19:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:04: [GetSCRRegisterEntry] Passed
14:19:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:04: Data_Status_After Erases          : 0
14:19:04: CPRM Security Support             : No Security
14:19:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:04: Spec. Version                     : Version 3.0X
14:19:04: Extended Security Support         : Extended_Security_Not_Supported
14:19:04: Command Support                   : COMMAND_SUPPORT
14:19:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E420>, <py_sfcl.CommandDataDefinition object at 0x0642E240>) , Command count = 217 ] 
14:19:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E2A0>, <py_sfcl.CommandDataDefinition object at 0x0642E2D0>) , Command count = 218 ] 
14:19:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:04: [ SetBusWidth(0x4) , Command count = 219 ] 
14:19:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642E390>, <0x200/0x200, Spc, pat:0x0>) , Command count = 220 ] 
14:19:04: Protected Area Size 0x28000
14:19:04: Bus Width           2
14:19:04: Secure Mode         0
14:19:04: Speed  Class        4
14:19:04: Perf Move           0
14:19:04: Au Size             9
14:19:04: Erase Size          15
14:19:04: Erase Timeout       1
14:19:04: Erase offset        1
14:19:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 221 ] 
14:19:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:04: Host Frequency set to 100000 KHz
14:19:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:04: ####CSD Registe 2.0 Values####
14:19:04: CSD_STRUCTURE                                 :0x1
14:19:04: Reserv1                                       :0x0
14:19:04: Time Access 1 TAAC                            :0xe
14:19:04: Time Access 2 NSAC*100                        :0x0
14:19:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:04: Card Command Classess CCC                     :0x5b5
14:19:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:04: DSR(driver stage register)  DSR_IMP           :0x0
14:19:04: Reserv2                                       :0x0
14:19:04: Device Size C_SIZE                            :0xedc8
14:19:04: Reserv3                                       :0x0
14:19:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:04: Reserv4                                       :0x0
14:19:04: Write Speed Factor R2W_FACTOR                 :0x2
14:19:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:04: FILE_FORMAT_GRP                               :0x0
14:19:04: COPY flag                                     :0x1
14:19:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:04: File_Format                                   :0x0
14:19:04: CRC                                           :0x0
14:19:04: ####CSD Registe Values####  

14:19:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E630>, <py_sfcl.CommandDataDefinition object at 0x0642E450>) , Command count = 222 ] 
14:19:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E4B0>, <py_sfcl.CommandDataDefinition object at 0x0642E4E0>) , Command count = 223 ] 
14:19:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E540>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E570>, <py_sfcl.PySEnhancedCmdData object at 0x0642E5A0>, <None>, <py_sfcl.Command23 object at 0x0642AF00>) , Command count = 224 ] 
14:19:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 23
14:19:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E690>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6C0>, <None>, <py_sfcl.Command23 object at 0x0642E5D0>) , Command count = 225 ] 
14:19:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E780>, <py_sfcl.PySEnhancedCmdData object at 0x0642E7B0>, <None>, <py_sfcl.Command23 object at 0x0642E6F0>) , Command count = 226 ] 
14:19:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:06: Host Frequency set to 25000 KHz
14:19:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EA20>, 0x0, True) , Command count = 227 ] 
14:19:06: [GO18_globalSetVolt]### Host voltage value is set.
14:19:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E870>, 0x0, False) , Command count = 228 ] 
14:19:06: [GO18_globalSetVolt]### Host voltage value is set.
14:19:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 229 ] 
14:19:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 230 ] 
14:19:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 231 ] 
14:19:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E9C0>, <py_sfcl.CommandDataDefinition object at 0x0642E960>) , Command count = 232 ] 
14:19:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E9F0>, <py_sfcl.CommandDataDefinition object at 0x0642EA50>) , Command count = 233 ] 
14:19:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:07: [ SetCardRCA(0x1, 0xD555) , Command count = 234 ] 
14:19:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:07: Host Frequency set to 25000 KHz
14:19:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:07: ####CSD Registe 2.0 Values####
14:19:07: CSD_STRUCTURE                                 :0x1
14:19:07: Reserv1                                       :0x0
14:19:07: Time Access 1 TAAC                            :0xe
14:19:07: Time Access 2 NSAC*100                        :0x0
14:19:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:07: Card Command Classess CCC                     :0x5b5
14:19:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:07: DSR(driver stage register)  DSR_IMP           :0x0
14:19:07: Reserv2                                       :0x0
14:19:07: Device Size C_SIZE                            :0xedc8
14:19:07: Reserv3                                       :0x0
14:19:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:07: Reserv4                                       :0x0
14:19:07: Write Speed Factor R2W_FACTOR                 :0x2
14:19:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:07: FILE_FORMAT_GRP                               :0x0
14:19:07: COPY flag                                     :0x1
14:19:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:07: File_Format                                   :0x0
14:19:07: CRC                                           :0x0
14:19:07: ####CSD Registe Values####  

14:19:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:07: [GetSCRRegisterEntry] Passed
14:19:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:07: Data_Status_After Erases          : 0
14:19:07: CPRM Security Support             : No Security
14:19:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:07: Spec. Version                     : Version 3.0X
14:19:07: Extended Security Support         : Extended_Security_Not_Supported
14:19:07: Command Support                   : COMMAND_SUPPORT
14:19:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ECC0>, <py_sfcl.CommandDataDefinition object at 0x0642EAE0>) , Command count = 235 ] 
14:19:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EB40>, <py_sfcl.CommandDataDefinition object at 0x0642EB70>) , Command count = 236 ] 
14:19:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:07: [ SetBusWidth(0x4) , Command count = 237 ] 
14:19:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642EC30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 238 ] 
14:19:07: Protected Area Size 0x28000
14:19:07: Bus Width           2
14:19:07: Secure Mode         0
14:19:07: Speed  Class        4
14:19:07: Perf Move           0
14:19:07: Au Size             9
14:19:07: Erase Size          15
14:19:07: Erase Timeout       1
14:19:07: Erase offset        1
14:19:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 239 ] 
14:19:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:07: Host Frequency set to 100000 KHz
14:19:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:07: ####CSD Registe 2.0 Values####
14:19:07: CSD_STRUCTURE                                 :0x1
14:19:07: Reserv1                                       :0x0
14:19:07: Time Access 1 TAAC                            :0xe
14:19:07: Time Access 2 NSAC*100                        :0x0
14:19:07: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:07: Card Command Classess CCC                     :0x5b5
14:19:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:07: DSR(driver stage register)  DSR_IMP           :0x0
14:19:07: Reserv2                                       :0x0
14:19:07: Device Size C_SIZE                            :0xedc8
14:19:07: Reserv3                                       :0x0
14:19:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:07: Reserv4                                       :0x0
14:19:07: Write Speed Factor R2W_FACTOR                 :0x2
14:19:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:07: FILE_FORMAT_GRP                               :0x0
14:19:07: COPY flag                                     :0x1
14:19:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:07: File_Format                                   :0x0
14:19:07: CRC                                           :0x0
14:19:07: ####CSD Registe Values####  

14:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EED0>, <py_sfcl.CommandDataDefinition object at 0x0642ECF0>) , Command count = 240 ] 
14:19:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ED50>, <py_sfcl.CommandDataDefinition object at 0x0642ED80>) , Command count = 241 ] 
14:19:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642EDE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EE10>, <py_sfcl.PySEnhancedCmdData object at 0x0642EE40>, <None>, <py_sfcl.Command23 object at 0x0642E7E0>) , Command count = 242 ] 
14:19:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 22
14:19:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642EF00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF30>, <py_sfcl.PySEnhancedCmdData object at 0x0642EF60>, <None>, <py_sfcl.Command23 object at 0x0642EE70>) , Command count = 243 ] 
14:19:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431060>, <py_sfcl.PySEnhancedCmdData object at 0x06431090>, <None>, <py_sfcl.Command23 object at 0x0642EF90>) , Command count = 244 ] 
14:19:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:09: Host Frequency set to 25000 KHz
14:19:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431300>, 0x0, True) , Command count = 245 ] 
14:19:09: [GO18_globalSetVolt]### Host voltage value is set.
14:19:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431150>, 0x0, False) , Command count = 246 ] 
14:19:09: [GO18_globalSetVolt]### Host voltage value is set.
14:19:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 247 ] 
14:19:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 248 ] 
14:19:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 249 ] 
14:19:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312A0>, <py_sfcl.CommandDataDefinition object at 0x06431240>) , Command count = 250 ] 
14:19:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312D0>, <py_sfcl.CommandDataDefinition object at 0x06431330>) , Command count = 251 ] 
14:19:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:09: [ SetCardRCA(0x1, 0xD555) , Command count = 252 ] 
14:19:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:10: Host Frequency set to 25000 KHz
14:19:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:10: ####CSD Registe 2.0 Values####
14:19:10: CSD_STRUCTURE                                 :0x1
14:19:10: Reserv1                                       :0x0
14:19:10: Time Access 1 TAAC                            :0xe
14:19:10: Time Access 2 NSAC*100                        :0x0
14:19:10: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:10: Card Command Classess CCC                     :0x5b5
14:19:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:10: DSR(driver stage register)  DSR_IMP           :0x0
14:19:10: Reserv2                                       :0x0
14:19:10: Device Size C_SIZE                            :0xedc8
14:19:10: Reserv3                                       :0x0
14:19:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:10: Reserv4                                       :0x0
14:19:10: Write Speed Factor R2W_FACTOR                 :0x2
14:19:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:10: FILE_FORMAT_GRP                               :0x0
14:19:10: COPY flag                                     :0x1
14:19:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:10: File_Format                                   :0x0
14:19:10: CRC                                           :0x0
14:19:10: ####CSD Registe Values####  

14:19:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:10: [GetSCRRegisterEntry] Passed
14:19:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:10: Data_Status_After Erases          : 0
14:19:10: CPRM Security Support             : No Security
14:19:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:10: Spec. Version                     : Version 3.0X
14:19:10: Extended Security Support         : Extended_Security_Not_Supported
14:19:10: Command Support                   : COMMAND_SUPPORT
14:19:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431570>, <py_sfcl.CommandDataDefinition object at 0x06431390>) , Command count = 253 ] 
14:19:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D7E1E0>, <py_sfcl.CommandDataDefinition object at 0x064313F0>) , Command count = 254 ] 
14:19:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:10: [ SetBusWidth(0x4) , Command count = 255 ] 
14:19:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05D85F90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 256 ] 
14:19:10: Protected Area Size 0x28000
14:19:10: Bus Width           2
14:19:10: Secure Mode         0
14:19:10: Speed  Class        4
14:19:10: Perf Move           0
14:19:10: Au Size             9
14:19:10: Erase Size          15
14:19:10: Erase Timeout       1
14:19:10: Erase offset        1
14:19:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 257 ] 
14:19:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:10: Host Frequency set to 100000 KHz
14:19:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:10: ####CSD Registe 2.0 Values####
14:19:10: CSD_STRUCTURE                                 :0x1
14:19:10: Reserv1                                       :0x0
14:19:10: Time Access 1 TAAC                            :0xe
14:19:10: Time Access 2 NSAC*100                        :0x0
14:19:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:10: Card Command Classess CCC                     :0x5b5
14:19:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:10: DSR(driver stage register)  DSR_IMP           :0x0
14:19:10: Reserv2                                       :0x0
14:19:10: Device Size C_SIZE                            :0xedc8
14:19:10: Reserv3                                       :0x0
14:19:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:10: Reserv4                                       :0x0
14:19:10: Write Speed Factor R2W_FACTOR                 :0x2
14:19:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:10: FILE_FORMAT_GRP                               :0x0
14:19:10: COPY flag                                     :0x1
14:19:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:10: File_Format                                   :0x0
14:19:10: CRC                                           :0x0
14:19:10: ####CSD Registe Values####  

14:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7BD0>, <py_sfcl.CommandDataDefinition object at 0x06431660>) , Command count = 258 ] 
14:19:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F60>, <py_sfcl.CommandDataDefinition object at 0x064314B0>) , Command count = 259 ] 
14:19:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431510>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431540>, <py_sfcl.PySEnhancedCmdData object at 0x064315A0>, <None>, <py_sfcl.Command23 object at 0x064310C0>) , Command count = 260 ] 
14:19:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 21
14:19:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7C30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431630>, <py_sfcl.PySEnhancedCmdData object at 0x06431690>, <None>, <py_sfcl.Command23 object at 0x064315D0>) , Command count = 261 ] 
14:19:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7C60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431720>, <py_sfcl.PySEnhancedCmdData object at 0x06431750>, <None>, <py_sfcl.Command23 object at 0x064316C0>) , Command count = 262 ] 
14:19:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:12: Host Frequency set to 25000 KHz
14:19:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:12: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAD180>, 0x0, True) , Command count = 263 ] 
14:19:12: [GO18_globalSetVolt]### Host voltage value is set.
14:19:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DADAB0>, 0x0, False) , Command count = 264 ] 
14:19:12: [GO18_globalSetVolt]### Host voltage value is set.
14:19:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 265 ] 
14:19:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 266 ] 
14:19:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 267 ] 
14:19:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F90>, <py_sfcl.CommandDataDefinition object at 0x05DA7960>) , Command count = 268 ] 
14:19:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADCC0>, <py_sfcl.CommandDataDefinition object at 0x06431810>) , Command count = 269 ] 
14:19:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:12: [ SetCardRCA(0x1, 0xD555) , Command count = 270 ] 
14:19:12: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:12: Host Frequency set to 25000 KHz
14:19:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:12: ####CSD Registe 2.0 Values####
14:19:12: CSD_STRUCTURE                                 :0x1
14:19:12: Reserv1                                       :0x0
14:19:12: Time Access 1 TAAC                            :0xe
14:19:12: Time Access 2 NSAC*100                        :0x0
14:19:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:12: Card Command Classess CCC                     :0x5b5
14:19:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:12: DSR(driver stage register)  DSR_IMP           :0x0
14:19:12: Reserv2                                       :0x0
14:19:12: Device Size C_SIZE                            :0xedc8
14:19:12: Reserv3                                       :0x0
14:19:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:12: Reserv4                                       :0x0
14:19:12: Write Speed Factor R2W_FACTOR                 :0x2
14:19:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:12: FILE_FORMAT_GRP                               :0x0
14:19:12: COPY flag                                     :0x1
14:19:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:12: File_Format                                   :0x0
14:19:12: CRC                                           :0x0
14:19:12: ####CSD Registe Values####  

14:19:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:12: [GetSCRRegisterEntry] Passed
14:19:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:12: Data_Status_After Erases          : 0
14:19:12: CPRM Security Support             : No Security
14:19:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:12: Spec. Version                     : Version 3.0X
14:19:12: Extended Security Support         : Extended_Security_Not_Supported
14:19:12: Command Support                   : COMMAND_SUPPORT
14:19:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8A80>, <py_sfcl.CommandDataDefinition object at 0x06431A80>) , Command count = 271 ] 
14:19:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8C30>, <py_sfcl.CommandDataDefinition object at 0x064318D0>) , Command count = 272 ] 
14:19:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:12: [ SetBusWidth(0x4) , Command count = 273 ] 
14:19:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06431930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 274 ] 
14:19:12: Protected Area Size 0x28000
14:19:12: Bus Width           2
14:19:12: Secure Mode         0
14:19:12: Speed  Class        4
14:19:12: Perf Move           0
14:19:12: Au Size             9
14:19:12: Erase Size          15
14:19:12: Erase Timeout       1
14:19:12: Erase offset        1
14:19:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 275 ] 
14:19:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:12: Host Frequency set to 100000 KHz
14:19:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:12: ####CSD Registe 2.0 Values####
14:19:12: CSD_STRUCTURE                                 :0x1
14:19:12: Reserv1                                       :0x0
14:19:12: Time Access 1 TAAC                            :0xe
14:19:12: Time Access 2 NSAC*100                        :0x0
14:19:12: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:12: Card Command Classess CCC                     :0x5b5
14:19:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:12: DSR(driver stage register)  DSR_IMP           :0x0
14:19:12: Reserv2                                       :0x0
14:19:12: Device Size C_SIZE                            :0xedc8
14:19:12: Reserv3                                       :0x0
14:19:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:12: Reserv4                                       :0x0
14:19:12: Write Speed Factor R2W_FACTOR                 :0x2
14:19:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:12: FILE_FORMAT_GRP                               :0x0
14:19:12: COPY flag                                     :0x1
14:19:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:12: File_Format                                   :0x0
14:19:12: CRC                                           :0x0
14:19:12: ####CSD Registe Values####  

14:19:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D91180>, <py_sfcl.CommandDataDefinition object at 0x06431BA0>) , Command count = 276 ] 
14:19:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEF7B0>, <py_sfcl.CommandDataDefinition object at 0x064319F0>) , Command count = 277 ] 
14:19:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF7E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431A50>, <py_sfcl.PySEnhancedCmdData object at 0x06431AB0>, <None>, <py_sfcl.Command23 object at 0x06431780>) , Command count = 278 ] 
14:19:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 20
14:19:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF810>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431B40>, <py_sfcl.PySEnhancedCmdData object at 0x06431B70>, <None>, <py_sfcl.Command23 object at 0x06431AE0>) , Command count = 279 ] 
14:19:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF840>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431C30>, <py_sfcl.PySEnhancedCmdData object at 0x06431C60>, <None>, <py_sfcl.Command23 object at 0x06431BD0>) , Command count = 280 ] 
14:19:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:15: Host Frequency set to 25000 KHz
14:19:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF960>, 0x0, True) , Command count = 281 ] 
14:19:15: [GO18_globalSetVolt]### Host voltage value is set.
14:19:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF9F0>, 0x0, False) , Command count = 282 ] 
14:19:15: [GO18_globalSetVolt]### Host voltage value is set.
14:19:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 283 ] 
14:19:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 284 ] 
14:19:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 285 ] 
14:19:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB10>, <py_sfcl.CommandDataDefinition object at 0x06431D20>) , Command count = 286 ] 
14:19:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D7EAE0>, <py_sfcl.CommandDataDefinition object at 0x06431D50>) , Command count = 287 ] 
14:19:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:15: [ SetCardRCA(0x1, 0xD555) , Command count = 288 ] 
14:19:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:15: Host Frequency set to 25000 KHz
14:19:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:15: ####CSD Registe 2.0 Values####
14:19:15: CSD_STRUCTURE                                 :0x1
14:19:15: Reserv1                                       :0x0
14:19:15: Time Access 1 TAAC                            :0xe
14:19:15: Time Access 2 NSAC*100                        :0x0
14:19:15: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:15: Card Command Classess CCC                     :0x5b5
14:19:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:15: DSR(driver stage register)  DSR_IMP           :0x0
14:19:15: Reserv2                                       :0x0
14:19:15: Device Size C_SIZE                            :0xedc8
14:19:15: Reserv3                                       :0x0
14:19:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:15: Reserv4                                       :0x0
14:19:15: Write Speed Factor R2W_FACTOR                 :0x2
14:19:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:15: FILE_FORMAT_GRP                               :0x0
14:19:15: COPY flag                                     :0x1
14:19:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:15: File_Format                                   :0x0
14:19:15: CRC                                           :0x0
14:19:15: ####CSD Registe Values####  

14:19:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:15: [GetSCRRegisterEntry] Passed
14:19:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:15: Data_Status_After Erases          : 0
14:19:15: CPRM Security Support             : No Security
14:19:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:15: Spec. Version                     : Version 3.0X
14:19:15: Extended Security Support         : Extended_Security_Not_Supported
14:19:15: Command Support                   : COMMAND_SUPPORT
14:19:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB40>, <py_sfcl.CommandDataDefinition object at 0x06431FC0>) , Command count = 289 ] 
14:19:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB70>, <py_sfcl.CommandDataDefinition object at 0x06431E10>) , Command count = 290 ] 
14:19:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:15: [ SetBusWidth(0x4) , Command count = 291 ] 
14:19:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06431E70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 292 ] 
14:19:15: Protected Area Size 0x28000
14:19:15: Bus Width           2
14:19:15: Secure Mode         0
14:19:15: Speed  Class        4
14:19:15: Perf Move           0
14:19:15: Au Size             9
14:19:15: Erase Size          15
14:19:15: Erase Timeout       1
14:19:15: Erase offset        1
14:19:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 293 ] 
14:19:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:15: Host Frequency set to 100000 KHz
14:19:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:15: ####CSD Registe 2.0 Values####
14:19:15: CSD_STRUCTURE                                 :0x1
14:19:15: Reserv1                                       :0x0
14:19:15: Time Access 1 TAAC                            :0xe
14:19:15: Time Access 2 NSAC*100                        :0x0
14:19:15: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:15: Card Command Classess CCC                     :0x5b5
14:19:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:15: DSR(driver stage register)  DSR_IMP           :0x0
14:19:15: Reserv2                                       :0x0
14:19:15: Device Size C_SIZE                            :0xedc8
14:19:15: Reserv3                                       :0x0
14:19:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:15: Reserv4                                       :0x0
14:19:15: Write Speed Factor R2W_FACTOR                 :0x2
14:19:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:15: FILE_FORMAT_GRP                               :0x0
14:19:15: COPY flag                                     :0x1
14:19:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:15: File_Format                                   :0x0
14:19:15: CRC                                           :0x0
14:19:15: ####CSD Registe Values####  

14:19:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E14B0>, <py_sfcl.CommandDataDefinition object at 0x06431930>) , Command count = 294 ] 
14:19:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x063FFEA0>, <py_sfcl.CommandDataDefinition object at 0x06431F30>) , Command count = 295 ] 
14:19:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F90>, <py_sfcl.PySEnhancedCmdData object at 0x0645B030>, <None>, <py_sfcl.Command23 object at 0x06431C90>) , Command count = 296 ] 
14:19:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 19
14:19:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645B0C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B0F0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B120>, <None>, <py_sfcl.Command23 object at 0x0645B060>) , Command count = 297 ] 
14:19:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414060>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B1B0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B1E0>, <None>, <py_sfcl.Command23 object at 0x0645B150>) , Command count = 298 ] 
14:19:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:17: Host Frequency set to 25000 KHz
14:19:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:17: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x064140F0>, 0x0, True) , Command count = 299 ] 
14:19:17: [GO18_globalSetVolt]### Host voltage value is set.
14:19:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06414D20>, 0x0, False) , Command count = 300 ] 
14:19:17: [GO18_globalSetVolt]### Host voltage value is set.
14:19:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 301 ] 
14:19:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 302 ] 
14:19:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 303 ] 
14:19:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414690>, <py_sfcl.CommandDataDefinition object at 0x06414B40>) , Command count = 304 ] 
14:19:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064148A0>, <py_sfcl.CommandDataDefinition object at 0x064146C0>) , Command count = 305 ] 
14:19:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:18: [ SetCardRCA(0x1, 0xD555) , Command count = 306 ] 
14:19:18: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:18: Host Frequency set to 25000 KHz
14:19:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:18: ####CSD Registe 2.0 Values####
14:19:18: CSD_STRUCTURE                                 :0x1
14:19:18: Reserv1                                       :0x0
14:19:18: Time Access 1 TAAC                            :0xe
14:19:18: Time Access 2 NSAC*100                        :0x0
14:19:18: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:18: Card Command Classess CCC                     :0x5b5
14:19:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:18: DSR(driver stage register)  DSR_IMP           :0x0
14:19:18: Reserv2                                       :0x0
14:19:18: Device Size C_SIZE                            :0xedc8
14:19:18: Reserv3                                       :0x0
14:19:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:18: Reserv4                                       :0x0
14:19:18: Write Speed Factor R2W_FACTOR                 :0x2
14:19:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:18: FILE_FORMAT_GRP                               :0x0
14:19:18: COPY flag                                     :0x1
14:19:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:18: File_Format                                   :0x0
14:19:18: CRC                                           :0x0
14:19:18: ####CSD Registe Values####  

14:19:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:18: [GetSCRRegisterEntry] Passed
14:19:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:18: Data_Status_After Erases          : 0
14:19:18: CPRM Security Support             : No Security
14:19:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:18: Spec. Version                     : Version 3.0X
14:19:18: Extended Security Support         : Extended_Security_Not_Supported
14:19:18: Command Support                   : COMMAND_SUPPORT
14:19:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414360>, <py_sfcl.CommandDataDefinition object at 0x06414900>) , Command count = 307 ] 
14:19:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414810>, <py_sfcl.CommandDataDefinition object at 0x06414600>) , Command count = 308 ] 
14:19:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:18: [ SetBusWidth(0x4) , Command count = 309 ] 
14:19:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06414AB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 310 ] 
14:19:18: Protected Area Size 0x28000
14:19:18: Bus Width           2
14:19:18: Secure Mode         0
14:19:18: Speed  Class        4
14:19:18: Perf Move           0
14:19:18: Au Size             9
14:19:18: Erase Size          15
14:19:18: Erase Timeout       1
14:19:18: Erase offset        1
14:19:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 311 ] 
14:19:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:18: Host Frequency set to 100000 KHz
14:19:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:18: ####CSD Registe 2.0 Values####
14:19:18: CSD_STRUCTURE                                 :0x1
14:19:18: Reserv1                                       :0x0
14:19:18: Time Access 1 TAAC                            :0xe
14:19:18: Time Access 2 NSAC*100                        :0x0
14:19:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:18: Card Command Classess CCC                     :0x5b5
14:19:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:18: DSR(driver stage register)  DSR_IMP           :0x0
14:19:18: Reserv2                                       :0x0
14:19:18: Device Size C_SIZE                            :0xedc8
14:19:18: Reserv3                                       :0x0
14:19:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:18: Reserv4                                       :0x0
14:19:18: Write Speed Factor R2W_FACTOR                 :0x2
14:19:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:18: FILE_FORMAT_GRP                               :0x0
14:19:18: COPY flag                                     :0x1
14:19:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:18: File_Format                                   :0x0
14:19:18: CRC                                           :0x0
14:19:18: ####CSD Registe Values####  

14:19:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E11E0>, <py_sfcl.CommandDataDefinition object at 0x064143C0>) , Command count = 312 ] 
14:19:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064142A0>, <py_sfcl.CommandDataDefinition object at 0x06414450>) , Command count = 313 ] 
14:19:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414DB0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414AE0>, <py_sfcl.PySEnhancedCmdData object at 0x06414A50>, <None>, <py_sfcl.Command23 object at 0x0645B210>) , Command count = 314 ] 
14:19:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 18
14:19:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414FC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414300>, <py_sfcl.PySEnhancedCmdData object at 0x0645B270>, <None>, <py_sfcl.Command23 object at 0x0645B3C0>) , Command count = 315 ] 
14:19:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451F00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06451D20>, <py_sfcl.PySEnhancedCmdData object at 0x0645B330>, <None>, <py_sfcl.Command23 object at 0x0645B2D0>) , Command count = 316 ] 
14:19:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:18: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:20: Host Frequency set to 25000 KHz
14:19:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:20: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x064517B0>, 0x0, True) , Command count = 317 ] 
14:19:20: [GO18_globalSetVolt]### Host voltage value is set.
14:19:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451DE0>, 0x0, False) , Command count = 318 ] 
14:19:20: [GO18_globalSetVolt]### Host voltage value is set.
14:19:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 319 ] 
14:19:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 320 ] 
14:19:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 321 ] 
14:19:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451540>, <py_sfcl.CommandDataDefinition object at 0x06451EA0>) , Command count = 322 ] 
14:19:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064519F0>, <py_sfcl.CommandDataDefinition object at 0x064149F0>) , Command count = 323 ] 
14:19:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:20: [ SetCardRCA(0x1, 0xD555) , Command count = 324 ] 
14:19:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:21: Host Frequency set to 25000 KHz
14:19:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:21: ####CSD Registe 2.0 Values####
14:19:21: CSD_STRUCTURE                                 :0x1
14:19:21: Reserv1                                       :0x0
14:19:21: Time Access 1 TAAC                            :0xe
14:19:21: Time Access 2 NSAC*100                        :0x0
14:19:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:21: Card Command Classess CCC                     :0x5b5
14:19:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:21: DSR(driver stage register)  DSR_IMP           :0x0
14:19:21: Reserv2                                       :0x0
14:19:21: Device Size C_SIZE                            :0xedc8
14:19:21: Reserv3                                       :0x0
14:19:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:21: Reserv4                                       :0x0
14:19:21: Write Speed Factor R2W_FACTOR                 :0x2
14:19:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:21: FILE_FORMAT_GRP                               :0x0
14:19:21: COPY flag                                     :0x1
14:19:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:21: File_Format                                   :0x0
14:19:21: CRC                                           :0x0
14:19:21: ####CSD Registe Values####  

14:19:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:21: [GetSCRRegisterEntry] Passed
14:19:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:21: Data_Status_After Erases          : 0
14:19:21: CPRM Security Support             : No Security
14:19:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:21: Spec. Version                     : Version 3.0X
14:19:21: Extended Security Support         : Extended_Security_Not_Supported
14:19:21: Command Support                   : COMMAND_SUPPORT
14:19:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1A80>, <py_sfcl.CommandDataDefinition object at 0x06451900>) , Command count = 325 ] 
14:19:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451390>, <py_sfcl.CommandDataDefinition object at 0x064518A0>) , Command count = 326 ] 
14:19:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:21: [ SetBusWidth(0x4) , Command count = 327 ] 
14:19:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06414D80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 328 ] 
14:19:21: Protected Area Size 0x28000
14:19:21: Bus Width           2
14:19:21: Secure Mode         0
14:19:21: Speed  Class        4
14:19:21: Perf Move           0
14:19:21: Au Size             9
14:19:21: Erase Size          15
14:19:21: Erase Timeout       1
14:19:21: Erase offset        1
14:19:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 329 ] 
14:19:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:21: Host Frequency set to 100000 KHz
14:19:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:21: ####CSD Registe 2.0 Values####
14:19:21: CSD_STRUCTURE                                 :0x1
14:19:21: Reserv1                                       :0x0
14:19:21: Time Access 1 TAAC                            :0xe
14:19:21: Time Access 2 NSAC*100                        :0x0
14:19:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:21: Card Command Classess CCC                     :0x5b5
14:19:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:21: DSR(driver stage register)  DSR_IMP           :0x0
14:19:21: Reserv2                                       :0x0
14:19:21: Device Size C_SIZE                            :0xedc8
14:19:21: Reserv3                                       :0x0
14:19:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:21: Reserv4                                       :0x0
14:19:21: Write Speed Factor R2W_FACTOR                 :0x2
14:19:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:21: FILE_FORMAT_GRP                               :0x0
14:19:21: COPY flag                                     :0x1
14:19:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:21: File_Format                                   :0x0
14:19:21: CRC                                           :0x0
14:19:21: ####CSD Registe Values####  

14:19:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451BD0>, <py_sfcl.CommandDataDefinition object at 0x064515D0>) , Command count = 330 ] 
14:19:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451ED0>, <py_sfcl.CommandDataDefinition object at 0x06451780>) , Command count = 331 ] 
14:19:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645B510>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B540>, <py_sfcl.PySEnhancedCmdData object at 0x0645B4B0>, <None>, <py_sfcl.Command23 object at 0x0645B360>) , Command count = 332 ] 
14:19:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 17
14:19:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B570>, <py_sfcl.PySEnhancedCmdData object at 0x0645B5A0>, <None>, <py_sfcl.Command23 object at 0x0645B450>) , Command count = 333 ] 
14:19:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451810>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06451E40>, <py_sfcl.PySEnhancedCmdData object at 0x0645B660>, <None>, <py_sfcl.Command23 object at 0x0645B600>) , Command count = 334 ] 
14:19:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:21: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:23: Host Frequency set to 25000 KHz
14:19:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:23: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x064516C0>, 0x0, True) , Command count = 335 ] 
14:19:23: [GO18_globalSetVolt]### Host voltage value is set.
14:19:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641F030>, 0x0, False) , Command count = 336 ] 
14:19:23: [GO18_globalSetVolt]### Host voltage value is set.
14:19:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 337 ] 
14:19:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 338 ] 
14:19:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 339 ] 
14:19:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064519C0>, <py_sfcl.CommandDataDefinition object at 0x0641F120>) , Command count = 340 ] 
14:19:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F1E0>, <py_sfcl.CommandDataDefinition object at 0x0641F1B0>) , Command count = 341 ] 
14:19:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:23: [ SetCardRCA(0x1, 0xD555) , Command count = 342 ] 
14:19:23: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:23: Host Frequency set to 25000 KHz
14:19:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:23: ####CSD Registe 2.0 Values####
14:19:23: CSD_STRUCTURE                                 :0x1
14:19:23: Reserv1                                       :0x0
14:19:23: Time Access 1 TAAC                            :0xe
14:19:23: Time Access 2 NSAC*100                        :0x0
14:19:23: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:23: Card Command Classess CCC                     :0x5b5
14:19:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:23: DSR(driver stage register)  DSR_IMP           :0x0
14:19:23: Reserv2                                       :0x0
14:19:23: Device Size C_SIZE                            :0xedc8
14:19:23: Reserv3                                       :0x0
14:19:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:23: Reserv4                                       :0x0
14:19:23: Write Speed Factor R2W_FACTOR                 :0x2
14:19:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:23: FILE_FORMAT_GRP                               :0x0
14:19:23: COPY flag                                     :0x1
14:19:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:23: File_Format                                   :0x0
14:19:23: CRC                                           :0x0
14:19:23: ####CSD Registe Values####  

14:19:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:23: [GetSCRRegisterEntry] Passed
14:19:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:23: Data_Status_After Erases          : 0
14:19:23: CPRM Security Support             : No Security
14:19:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:23: Spec. Version                     : Version 3.0X
14:19:23: Extended Security Support         : Extended_Security_Not_Supported
14:19:23: Command Support                   : COMMAND_SUPPORT
14:19:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F3F0>, <py_sfcl.CommandDataDefinition object at 0x0641F210>) , Command count = 343 ] 
14:19:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F300>, <py_sfcl.CommandDataDefinition object at 0x0641F180>) , Command count = 344 ] 
14:19:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:23: [ SetBusWidth(0x4) , Command count = 345 ] 
14:19:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0641F390>, <0x200/0x200, Spc, pat:0x0>) , Command count = 346 ] 
14:19:23: Protected Area Size 0x28000
14:19:23: Bus Width           2
14:19:23: Secure Mode         0
14:19:23: Speed  Class        4
14:19:23: Perf Move           0
14:19:23: Au Size             9
14:19:23: Erase Size          15
14:19:23: Erase Timeout       1
14:19:23: Erase offset        1
14:19:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 347 ] 
14:19:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:23: Host Frequency set to 100000 KHz
14:19:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:23: ####CSD Registe 2.0 Values####
14:19:23: CSD_STRUCTURE                                 :0x1
14:19:23: Reserv1                                       :0x0
14:19:23: Time Access 1 TAAC                            :0xe
14:19:23: Time Access 2 NSAC*100                        :0x0
14:19:23: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:23: Card Command Classess CCC                     :0x5b5
14:19:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:23: DSR(driver stage register)  DSR_IMP           :0x0
14:19:23: Reserv2                                       :0x0
14:19:23: Device Size C_SIZE                            :0xedc8
14:19:23: Reserv3                                       :0x0
14:19:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:23: Reserv4                                       :0x0
14:19:23: Write Speed Factor R2W_FACTOR                 :0x2
14:19:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:23: FILE_FORMAT_GRP                               :0x0
14:19:23: COPY flag                                     :0x1
14:19:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:23: File_Format                                   :0x0
14:19:23: CRC                                           :0x0
14:19:23: ####CSD Registe Values####  

14:19:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F660>, <py_sfcl.CommandDataDefinition object at 0x0641F480>) , Command count = 348 ] 
14:19:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F270>, <py_sfcl.CommandDataDefinition object at 0x0641F2A0>) , Command count = 349 ] 
14:19:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645B7E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B750>, <py_sfcl.PySEnhancedCmdData object at 0x0645B6F0>, <None>, <py_sfcl.Command23 object at 0x0645B690>) , Command count = 350 ] 
14:19:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 16
14:19:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B840>, <py_sfcl.PySEnhancedCmdData object at 0x0645B8A0>, <None>, <py_sfcl.Command23 object at 0x0645B780>) , Command count = 351 ] 
14:19:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451F60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641FAB0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B930>, <None>, <py_sfcl.Command23 object at 0x0645B8D0>) , Command count = 352 ] 
14:19:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:24: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:26: Host Frequency set to 25000 KHz
14:19:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:26: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB10>, 0x0, True) , Command count = 353 ] 
14:19:26: [GO18_globalSetVolt]### Host voltage value is set.
14:19:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB40>, 0x0, False) , Command count = 354 ] 
14:19:26: [GO18_globalSetVolt]### Host voltage value is set.
14:19:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 355 ] 
14:19:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 356 ] 
14:19:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 357 ] 
14:19:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FC00>, <py_sfcl.CommandDataDefinition object at 0x0641FFC0>) , Command count = 358 ] 
14:19:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FC90>, <py_sfcl.CommandDataDefinition object at 0x0641F510>) , Command count = 359 ] 
14:19:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:26: [ SetCardRCA(0x1, 0xD555) , Command count = 360 ] 
14:19:26: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:26: Host Frequency set to 25000 KHz
14:19:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:26: ####CSD Registe 2.0 Values####
14:19:26: CSD_STRUCTURE                                 :0x1
14:19:26: Reserv1                                       :0x0
14:19:26: Time Access 1 TAAC                            :0xe
14:19:26: Time Access 2 NSAC*100                        :0x0
14:19:26: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:26: Card Command Classess CCC                     :0x5b5
14:19:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:26: DSR(driver stage register)  DSR_IMP           :0x0
14:19:26: Reserv2                                       :0x0
14:19:26: Device Size C_SIZE                            :0xedc8
14:19:26: Reserv3                                       :0x0
14:19:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:26: Reserv4                                       :0x0
14:19:26: Write Speed Factor R2W_FACTOR                 :0x2
14:19:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:26: FILE_FORMAT_GRP                               :0x0
14:19:26: COPY flag                                     :0x1
14:19:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:26: File_Format                                   :0x0
14:19:26: CRC                                           :0x0
14:19:26: ####CSD Registe Values####  

14:19:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:26: [GetSCRRegisterEntry] Passed
14:19:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:26: Data_Status_After Erases          : 0
14:19:26: CPRM Security Support             : No Security
14:19:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:26: Spec. Version                     : Version 3.0X
14:19:26: Extended Security Support         : Extended_Security_Not_Supported
14:19:26: Command Support                   : COMMAND_SUPPORT
14:19:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FB70>, <py_sfcl.CommandDataDefinition object at 0x0641FCF0>) , Command count = 361 ] 
14:19:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FF60>, <py_sfcl.CommandDataDefinition object at 0x0641FD80>) , Command count = 362 ] 
14:19:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:26: [ SetBusWidth(0x4) , Command count = 363 ] 
14:19:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0641FDB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 364 ] 
14:19:26: Protected Area Size 0x28000
14:19:26: Bus Width           2
14:19:26: Secure Mode         0
14:19:26: Speed  Class        4
14:19:26: Perf Move           0
14:19:26: Au Size             9
14:19:26: Erase Size          15
14:19:26: Erase Timeout       1
14:19:26: Erase offset        1
14:19:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 365 ] 
14:19:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:26: Host Frequency set to 100000 KHz
14:19:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:26: ####CSD Registe 2.0 Values####
14:19:26: CSD_STRUCTURE                                 :0x1
14:19:26: Reserv1                                       :0x0
14:19:26: Time Access 1 TAAC                            :0xe
14:19:26: Time Access 2 NSAC*100                        :0x0
14:19:26: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:26: Card Command Classess CCC                     :0x5b5
14:19:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:26: DSR(driver stage register)  DSR_IMP           :0x0
14:19:26: Reserv2                                       :0x0
14:19:26: Device Size C_SIZE                            :0xedc8
14:19:26: Reserv3                                       :0x0
14:19:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:26: Reserv4                                       :0x0
14:19:26: Write Speed Factor R2W_FACTOR                 :0x2
14:19:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:26: FILE_FORMAT_GRP                               :0x0
14:19:26: COPY flag                                     :0x1
14:19:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:26: File_Format                                   :0x0
14:19:26: CRC                                           :0x0
14:19:26: ####CSD Registe Values####  

14:19:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467060>, <py_sfcl.CommandDataDefinition object at 0x0641FF90>) , Command count = 366 ] 
14:19:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FF30>, <py_sfcl.CommandDataDefinition object at 0x0641FDE0>) , Command count = 367 ] 
14:19:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064671E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467210>, <py_sfcl.PySEnhancedCmdData object at 0x06467240>, <None>, <py_sfcl.Command23 object at 0x064672A0>) , Command count = 368 ] 
14:19:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 15
14:19:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064670C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064670F0>, <py_sfcl.PySEnhancedCmdData object at 0x06467120>, <None>, <py_sfcl.Command23 object at 0x06467270>) , Command count = 369 ] 
14:19:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641FA80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064673C0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BAB0>, <None>, <py_sfcl.Command23 object at 0x064671B0>) , Command count = 370 ] 
14:19:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:26: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:28: Host Frequency set to 25000 KHz
14:19:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:28: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x064675A0>, 0x0, True) , Command count = 371 ] 
14:19:28: [GO18_globalSetVolt]### Host voltage value is set.
14:19:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467480>, 0x0, False) , Command count = 372 ] 
14:19:28: [GO18_globalSetVolt]### Host voltage value is set.
14:19:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 373 ] 
14:19:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 374 ] 
14:19:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 375 ] 
14:19:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467540>, <py_sfcl.CommandDataDefinition object at 0x064674E0>) , Command count = 376 ] 
14:19:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467630>, <py_sfcl.CommandDataDefinition object at 0x06467030>) , Command count = 377 ] 
14:19:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:29: [ SetCardRCA(0x1, 0xD555) , Command count = 378 ] 
14:19:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:29: Host Frequency set to 25000 KHz
14:19:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:29: ####CSD Registe 2.0 Values####
14:19:29: CSD_STRUCTURE                                 :0x1
14:19:29: Reserv1                                       :0x0
14:19:29: Time Access 1 TAAC                            :0xe
14:19:29: Time Access 2 NSAC*100                        :0x0
14:19:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:29: Card Command Classess CCC                     :0x5b5
14:19:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:29: DSR(driver stage register)  DSR_IMP           :0x0
14:19:29: Reserv2                                       :0x0
14:19:29: Device Size C_SIZE                            :0xedc8
14:19:29: Reserv3                                       :0x0
14:19:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:29: Reserv4                                       :0x0
14:19:29: Write Speed Factor R2W_FACTOR                 :0x2
14:19:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:29: FILE_FORMAT_GRP                               :0x0
14:19:29: COPY flag                                     :0x1
14:19:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:29: File_Format                                   :0x0
14:19:29: CRC                                           :0x0
14:19:29: ####CSD Registe Values####  

14:19:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:29: [GetSCRRegisterEntry] Passed
14:19:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:29: Data_Status_After Erases          : 0
14:19:29: CPRM Security Support             : No Security
14:19:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:29: Spec. Version                     : Version 3.0X
14:19:29: Extended Security Support         : Extended_Security_Not_Supported
14:19:29: Command Support                   : COMMAND_SUPPORT
14:19:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467840>, <py_sfcl.CommandDataDefinition object at 0x06467660>) , Command count = 379 ] 
14:19:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467750>, <py_sfcl.CommandDataDefinition object at 0x064675D0>) , Command count = 380 ] 
14:19:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:29: [ SetBusWidth(0x4) , Command count = 381 ] 
14:19:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x064677E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 382 ] 
14:19:29: Protected Area Size 0x28000
14:19:29: Bus Width           2
14:19:29: Secure Mode         0
14:19:29: Speed  Class        4
14:19:29: Perf Move           0
14:19:29: Au Size             9
14:19:29: Erase Size          15
14:19:29: Erase Timeout       1
14:19:29: Erase offset        1
14:19:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 383 ] 
14:19:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:29: Host Frequency set to 100000 KHz
14:19:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:29: ####CSD Registe 2.0 Values####
14:19:29: CSD_STRUCTURE                                 :0x1
14:19:29: Reserv1                                       :0x0
14:19:29: Time Access 1 TAAC                            :0xe
14:19:29: Time Access 2 NSAC*100                        :0x0
14:19:29: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:29: Card Command Classess CCC                     :0x5b5
14:19:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:29: DSR(driver stage register)  DSR_IMP           :0x0
14:19:29: Reserv2                                       :0x0
14:19:29: Device Size C_SIZE                            :0xedc8
14:19:29: Reserv3                                       :0x0
14:19:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:29: Reserv4                                       :0x0
14:19:29: Write Speed Factor R2W_FACTOR                 :0x2
14:19:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:29: FILE_FORMAT_GRP                               :0x0
14:19:29: COPY flag                                     :0x1
14:19:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:29: File_Format                                   :0x0
14:19:29: CRC                                           :0x0
14:19:29: ####CSD Registe Values####  

14:19:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467A50>, <py_sfcl.CommandDataDefinition object at 0x06467870>) , Command count = 384 ] 
14:19:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064672D0>, <py_sfcl.CommandDataDefinition object at 0x06467300>) , Command count = 385 ] 
14:19:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467990>, <py_sfcl.PySEnhancedCmdData object at 0x064679C0>, <None>, <py_sfcl.Command23 object at 0x06467B40>) , Command count = 386 ] 
14:19:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 14
14:19:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06467AE0>, <None>, <py_sfcl.Command23 object at 0x06467360>) , Command count = 387 ] 
14:19:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064673F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467C60>, <py_sfcl.PySEnhancedCmdData object at 0x064676C0>, <None>, <py_sfcl.Command23 object at 0x064679F0>) , Command count = 388 ] 
14:19:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:29: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:31: Host Frequency set to 25000 KHz
14:19:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:31: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467E40>, 0x0, True) , Command count = 389 ] 
14:19:31: [GO18_globalSetVolt]### Host voltage value is set.
14:19:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467D20>, 0x0, False) , Command count = 390 ] 
14:19:31: [GO18_globalSetVolt]### Host voltage value is set.
14:19:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 391 ] 
14:19:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 392 ] 
14:19:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 393 ] 
14:19:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467DE0>, <py_sfcl.CommandDataDefinition object at 0x06467D80>) , Command count = 394 ] 
14:19:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467ED0>, <py_sfcl.CommandDataDefinition object at 0x06467900>) , Command count = 395 ] 
14:19:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:31: [ SetCardRCA(0x1, 0xD555) , Command count = 396 ] 
14:19:32: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:32: Host Frequency set to 25000 KHz
14:19:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:32: ####CSD Registe 2.0 Values####
14:19:32: CSD_STRUCTURE                                 :0x1
14:19:32: Reserv1                                       :0x0
14:19:32: Time Access 1 TAAC                            :0xe
14:19:32: Time Access 2 NSAC*100                        :0x0
14:19:32: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:32: Card Command Classess CCC                     :0x5b5
14:19:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:32: DSR(driver stage register)  DSR_IMP           :0x0
14:19:32: Reserv2                                       :0x0
14:19:32: Device Size C_SIZE                            :0xedc8
14:19:32: Reserv3                                       :0x0
14:19:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:32: Reserv4                                       :0x0
14:19:32: Write Speed Factor R2W_FACTOR                 :0x2
14:19:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:32: FILE_FORMAT_GRP                               :0x0
14:19:32: COPY flag                                     :0x1
14:19:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:32: File_Format                                   :0x0
14:19:32: CRC                                           :0x0
14:19:32: ####CSD Registe Values####  

14:19:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:32: [GetSCRRegisterEntry] Passed
14:19:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:32: Data_Status_After Erases          : 0
14:19:32: CPRM Security Support             : No Security
14:19:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:32: Spec. Version                     : Version 3.0X
14:19:32: Extended Security Support         : Extended_Security_Not_Supported
14:19:32: Command Support                   : COMMAND_SUPPORT
14:19:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421030>, <py_sfcl.CommandDataDefinition object at 0x06467F00>) , Command count = 397 ] 
14:19:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421060>, <py_sfcl.CommandDataDefinition object at 0x06467E70>) , Command count = 398 ] 
14:19:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:32: [ SetBusWidth(0x4) , Command count = 399 ] 
14:19:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x064210F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 400 ] 
14:19:32: Protected Area Size 0x28000
14:19:32: Bus Width           2
14:19:32: Secure Mode         0
14:19:32: Speed  Class        4
14:19:32: Perf Move           0
14:19:32: Au Size             9
14:19:32: Erase Size          15
14:19:32: Erase Timeout       1
14:19:32: Erase offset        1
14:19:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 401 ] 
14:19:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:32: Host Frequency set to 100000 KHz
14:19:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:32: ####CSD Registe 2.0 Values####
14:19:32: CSD_STRUCTURE                                 :0x1
14:19:32: Reserv1                                       :0x0
14:19:32: Time Access 1 TAAC                            :0xe
14:19:32: Time Access 2 NSAC*100                        :0x0
14:19:32: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:32: Card Command Classess CCC                     :0x5b5
14:19:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:32: DSR(driver stage register)  DSR_IMP           :0x0
14:19:32: Reserv2                                       :0x0
14:19:32: Device Size C_SIZE                            :0xedc8
14:19:32: Reserv3                                       :0x0
14:19:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:32: Reserv4                                       :0x0
14:19:32: Write Speed Factor R2W_FACTOR                 :0x2
14:19:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:32: FILE_FORMAT_GRP                               :0x0
14:19:32: COPY flag                                     :0x1
14:19:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:32: File_Format                                   :0x0
14:19:32: CRC                                           :0x0
14:19:32: ####CSD Registe Values####  

14:19:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467F90>, <py_sfcl.CommandDataDefinition object at 0x06467FC0>) , Command count = 402 ] 
14:19:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467B70>, <py_sfcl.CommandDataDefinition object at 0x06467BA0>) , Command count = 403 ] 
14:19:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467B10>, <py_sfcl.PySEnhancedCmdData object at 0x06421240>, <None>, <py_sfcl.Command23 object at 0x064676F0>) , Command count = 404 ] 
14:19:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 13
14:19:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421360>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421390>, <py_sfcl.PySEnhancedCmdData object at 0x064213C0>, <None>, <py_sfcl.Command23 object at 0x06421270>) , Command count = 405 ] 
14:19:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467C90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421540>, <py_sfcl.PySEnhancedCmdData object at 0x06421420>, <None>, <py_sfcl.Command23 object at 0x064212D0>) , Command count = 406 ] 
14:19:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:32: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:34: Host Frequency set to 25000 KHz
14:19:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:34: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421720>, 0x0, True) , Command count = 407 ] 
14:19:34: [GO18_globalSetVolt]### Host voltage value is set.
14:19:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421600>, 0x0, False) , Command count = 408 ] 
14:19:34: [GO18_globalSetVolt]### Host voltage value is set.
14:19:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 409 ] 
14:19:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 410 ] 
14:19:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 411 ] 
14:19:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216C0>, <py_sfcl.CommandDataDefinition object at 0x06421660>) , Command count = 412 ] 
14:19:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064217B0>, <py_sfcl.CommandDataDefinition object at 0x064211E0>) , Command count = 413 ] 
14:19:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:34: [ SetCardRCA(0x1, 0xD555) , Command count = 414 ] 
14:19:34: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:34: Host Frequency set to 25000 KHz
14:19:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:34: ####CSD Registe 2.0 Values####
14:19:34: CSD_STRUCTURE                                 :0x1
14:19:34: Reserv1                                       :0x0
14:19:34: Time Access 1 TAAC                            :0xe
14:19:34: Time Access 2 NSAC*100                        :0x0
14:19:34: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:34: Card Command Classess CCC                     :0x5b5
14:19:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:34: DSR(driver stage register)  DSR_IMP           :0x0
14:19:34: Reserv2                                       :0x0
14:19:34: Device Size C_SIZE                            :0xedc8
14:19:34: Reserv3                                       :0x0
14:19:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:34: Reserv4                                       :0x0
14:19:34: Write Speed Factor R2W_FACTOR                 :0x2
14:19:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:34: FILE_FORMAT_GRP                               :0x0
14:19:34: COPY flag                                     :0x1
14:19:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:34: File_Format                                   :0x0
14:19:34: CRC                                           :0x0
14:19:34: ####CSD Registe Values####  

14:19:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:34: [GetSCRRegisterEntry] Passed
14:19:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:34: Data_Status_After Erases          : 0
14:19:34: CPRM Security Support             : No Security
14:19:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:34: Spec. Version                     : Version 3.0X
14:19:34: Extended Security Support         : Extended_Security_Not_Supported
14:19:34: Command Support                   : COMMAND_SUPPORT
14:19:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064219C0>, <py_sfcl.CommandDataDefinition object at 0x064217E0>) , Command count = 415 ] 
14:19:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064218D0>, <py_sfcl.CommandDataDefinition object at 0x06421750>) , Command count = 416 ] 
14:19:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:34: [ SetBusWidth(0x4) , Command count = 417 ] 
14:19:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06421960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 418 ] 
14:19:34: Protected Area Size 0x28000
14:19:34: Bus Width           2
14:19:34: Secure Mode         0
14:19:34: Speed  Class        4
14:19:34: Perf Move           0
14:19:34: Au Size             9
14:19:34: Erase Size          15
14:19:34: Erase Timeout       1
14:19:34: Erase offset        1
14:19:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 419 ] 
14:19:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:35: Host Frequency set to 100000 KHz
14:19:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:35: ####CSD Registe 2.0 Values####
14:19:35: CSD_STRUCTURE                                 :0x1
14:19:35: Reserv1                                       :0x0
14:19:35: Time Access 1 TAAC                            :0xe
14:19:35: Time Access 2 NSAC*100                        :0x0
14:19:35: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:35: Card Command Classess CCC                     :0x5b5
14:19:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:35: DSR(driver stage register)  DSR_IMP           :0x0
14:19:35: Reserv2                                       :0x0
14:19:35: Device Size C_SIZE                            :0xedc8
14:19:35: Reserv3                                       :0x0
14:19:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:35: Reserv4                                       :0x0
14:19:35: Write Speed Factor R2W_FACTOR                 :0x2
14:19:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:35: FILE_FORMAT_GRP                               :0x0
14:19:35: COPY flag                                     :0x1
14:19:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:35: File_Format                                   :0x0
14:19:35: CRC                                           :0x0
14:19:35: ####CSD Registe Values####  

14:19:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421BD0>, <py_sfcl.CommandDataDefinition object at 0x064219F0>) , Command count = 420 ] 
14:19:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421450>, <py_sfcl.CommandDataDefinition object at 0x06421480>) , Command count = 421 ] 
14:19:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421B10>, <py_sfcl.PySEnhancedCmdData object at 0x06421B40>, <None>, <py_sfcl.Command23 object at 0x06421300>) , Command count = 422 ] 
14:19:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 12
14:19:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421C30>, <py_sfcl.PySEnhancedCmdData object at 0x06421C60>, <None>, <py_sfcl.Command23 object at 0x064214E0>) , Command count = 423 ] 
14:19:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421570>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421DE0>, <py_sfcl.PySEnhancedCmdData object at 0x064213F0>, <None>, <py_sfcl.Command23 object at 0x06421B70>) , Command count = 424 ] 
14:19:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:35: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:37: Host Frequency set to 25000 KHz
14:19:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421FC0>, 0x0, True) , Command count = 425 ] 
14:19:37: [GO18_globalSetVolt]### Host voltage value is set.
14:19:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421EA0>, 0x0, False) , Command count = 426 ] 
14:19:37: [GO18_globalSetVolt]### Host voltage value is set.
14:19:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 427 ] 
14:19:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 428 ] 
14:19:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 429 ] 
14:19:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A060>, <py_sfcl.CommandDataDefinition object at 0x06421F60>) , Command count = 430 ] 
14:19:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A090>, <py_sfcl.CommandDataDefinition object at 0x06421A80>) , Command count = 431 ] 
14:19:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:37: [ SetCardRCA(0x1, 0xD555) , Command count = 432 ] 
14:19:37: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:37: Host Frequency set to 25000 KHz
14:19:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:37: ####CSD Registe 2.0 Values####
14:19:37: CSD_STRUCTURE                                 :0x1
14:19:37: Reserv1                                       :0x0
14:19:37: Time Access 1 TAAC                            :0xe
14:19:37: Time Access 2 NSAC*100                        :0x0
14:19:37: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:37: Card Command Classess CCC                     :0x5b5
14:19:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:37: DSR(driver stage register)  DSR_IMP           :0x0
14:19:37: Reserv2                                       :0x0
14:19:37: Device Size C_SIZE                            :0xedc8
14:19:37: Reserv3                                       :0x0
14:19:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:37: Reserv4                                       :0x0
14:19:37: Write Speed Factor R2W_FACTOR                 :0x2
14:19:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:37: FILE_FORMAT_GRP                               :0x0
14:19:37: COPY flag                                     :0x1
14:19:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:37: File_Format                                   :0x0
14:19:37: CRC                                           :0x0
14:19:37: ####CSD Registe Values####  

14:19:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:37: [GetSCRRegisterEntry] Passed
14:19:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:37: Data_Status_After Erases          : 0
14:19:37: CPRM Security Support             : No Security
14:19:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:37: Spec. Version                     : Version 3.0X
14:19:37: Extended Security Support         : Extended_Security_Not_Supported
14:19:37: Command Support                   : COMMAND_SUPPORT
14:19:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A2A0>, <py_sfcl.CommandDataDefinition object at 0x0642A0C0>) , Command count = 433 ] 
14:19:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A1B0>, <py_sfcl.CommandDataDefinition object at 0x06421A80>) , Command count = 434 ] 
14:19:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:37: [ SetBusWidth(0x4) , Command count = 435 ] 
14:19:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06421900>, <0x200/0x200, Spc, pat:0x0>) , Command count = 436 ] 
14:19:37: Protected Area Size 0x28000
14:19:37: Bus Width           2
14:19:37: Secure Mode         0
14:19:37: Speed  Class        4
14:19:37: Perf Move           0
14:19:37: Au Size             9
14:19:37: Erase Size          15
14:19:37: Erase Timeout       1
14:19:37: Erase offset        1
14:19:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 437 ] 
14:19:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:37: Host Frequency set to 100000 KHz
14:19:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:37: ####CSD Registe 2.0 Values####
14:19:37: CSD_STRUCTURE                                 :0x1
14:19:37: Reserv1                                       :0x0
14:19:37: Time Access 1 TAAC                            :0xe
14:19:37: Time Access 2 NSAC*100                        :0x0
14:19:37: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:37: Card Command Classess CCC                     :0x5b5
14:19:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:37: DSR(driver stage register)  DSR_IMP           :0x0
14:19:37: Reserv2                                       :0x0
14:19:37: Device Size C_SIZE                            :0xedc8
14:19:37: Reserv3                                       :0x0
14:19:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:37: Reserv4                                       :0x0
14:19:37: Write Speed Factor R2W_FACTOR                 :0x2
14:19:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:37: FILE_FORMAT_GRP                               :0x0
14:19:37: COPY flag                                     :0x1
14:19:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:37: File_Format                                   :0x0
14:19:37: CRC                                           :0x0
14:19:37: ####CSD Registe Values####  

14:19:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A4B0>, <py_sfcl.CommandDataDefinition object at 0x0642A2D0>) , Command count = 438 ] 
14:19:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421CF0>, <py_sfcl.CommandDataDefinition object at 0x06421D20>) , Command count = 439 ] 
14:19:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421D80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A3C0>, <py_sfcl.PySEnhancedCmdData object at 0x0642A3F0>, <None>, <py_sfcl.Command23 object at 0x06421BA0>) , Command count = 440 ] 
14:19:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 11
14:19:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A510>, <py_sfcl.PySEnhancedCmdData object at 0x0642A540>, <None>, <py_sfcl.Command23 object at 0x0642A420>) , Command count = 441 ] 
14:19:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421E10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A6C0>, <py_sfcl.PySEnhancedCmdData object at 0x0642A2D0>, <None>, <py_sfcl.Command23 object at 0x0642A450>) , Command count = 442 ] 
14:19:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:37: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:40: Host Frequency set to 25000 KHz
14:19:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:40: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A8A0>, 0x0, True) , Command count = 443 ] 
14:19:40: [GO18_globalSetVolt]### Host voltage value is set.
14:19:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A780>, 0x0, False) , Command count = 444 ] 
14:19:40: [GO18_globalSetVolt]### Host voltage value is set.
14:19:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 445 ] 
14:19:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 446 ] 
14:19:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 447 ] 
14:19:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A840>, <py_sfcl.CommandDataDefinition object at 0x0642A7E0>) , Command count = 448 ] 
14:19:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A930>, <py_sfcl.CommandDataDefinition object at 0x0642A360>) , Command count = 449 ] 
14:19:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:40: [ SetCardRCA(0x1, 0xD555) , Command count = 450 ] 
14:19:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:40: Host Frequency set to 25000 KHz
14:19:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:40: ####CSD Registe 2.0 Values####
14:19:40: CSD_STRUCTURE                                 :0x1
14:19:40: Reserv1                                       :0x0
14:19:40: Time Access 1 TAAC                            :0xe
14:19:40: Time Access 2 NSAC*100                        :0x0
14:19:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:40: Card Command Classess CCC                     :0x5b5
14:19:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:40: DSR(driver stage register)  DSR_IMP           :0x0
14:19:40: Reserv2                                       :0x0
14:19:40: Device Size C_SIZE                            :0xedc8
14:19:40: Reserv3                                       :0x0
14:19:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:40: Reserv4                                       :0x0
14:19:40: Write Speed Factor R2W_FACTOR                 :0x2
14:19:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:40: FILE_FORMAT_GRP                               :0x0
14:19:40: COPY flag                                     :0x1
14:19:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:40: File_Format                                   :0x0
14:19:40: CRC                                           :0x0
14:19:40: ####CSD Registe Values####  

14:19:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:40: [GetSCRRegisterEntry] Passed
14:19:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:40: Data_Status_After Erases          : 0
14:19:40: CPRM Security Support             : No Security
14:19:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:40: Spec. Version                     : Version 3.0X
14:19:40: Extended Security Support         : Extended_Security_Not_Supported
14:19:40: Command Support                   : COMMAND_SUPPORT
14:19:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AB40>, <py_sfcl.CommandDataDefinition object at 0x0642A960>) , Command count = 451 ] 
14:19:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AA50>, <py_sfcl.CommandDataDefinition object at 0x0642A8D0>) , Command count = 452 ] 
14:19:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:40: [ SetBusWidth(0x4) , Command count = 453 ] 
14:19:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642AAE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 454 ] 
14:19:40: Protected Area Size 0x28000
14:19:40: Bus Width           2
14:19:40: Secure Mode         0
14:19:40: Speed  Class        4
14:19:40: Perf Move           0
14:19:40: Au Size             9
14:19:40: Erase Size          15
14:19:40: Erase Timeout       1
14:19:40: Erase offset        1
14:19:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 455 ] 
14:19:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:40: Host Frequency set to 100000 KHz
14:19:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:40: ####CSD Registe 2.0 Values####
14:19:40: CSD_STRUCTURE                                 :0x1
14:19:40: Reserv1                                       :0x0
14:19:40: Time Access 1 TAAC                            :0xe
14:19:40: Time Access 2 NSAC*100                        :0x0
14:19:40: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:40: Card Command Classess CCC                     :0x5b5
14:19:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:40: DSR(driver stage register)  DSR_IMP           :0x0
14:19:40: Reserv2                                       :0x0
14:19:40: Device Size C_SIZE                            :0xedc8
14:19:40: Reserv3                                       :0x0
14:19:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:40: Reserv4                                       :0x0
14:19:40: Write Speed Factor R2W_FACTOR                 :0x2
14:19:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:40: FILE_FORMAT_GRP                               :0x0
14:19:40: COPY flag                                     :0x1
14:19:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:40: File_Format                                   :0x0
14:19:40: CRC                                           :0x0
14:19:40: ####CSD Registe Values####  

14:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AD50>, <py_sfcl.CommandDataDefinition object at 0x0642AB70>) , Command count = 456 ] 
14:19:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A5D0>, <py_sfcl.CommandDataDefinition object at 0x0642A600>) , Command count = 457 ] 
14:19:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AC60>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC90>, <py_sfcl.PySEnhancedCmdData object at 0x0642ACC0>, <None>, <py_sfcl.Command23 object at 0x0642A480>) , Command count = 458 ] 
14:19:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 10
14:19:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642ADB0>, <py_sfcl.PySEnhancedCmdData object at 0x0642ADE0>, <None>, <py_sfcl.Command23 object at 0x0642A660>) , Command count = 459 ] 
14:19:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A6F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AF90>, <py_sfcl.PySEnhancedCmdData object at 0x0642A570>, <None>, <py_sfcl.Command23 object at 0x0642ACF0>) , Command count = 460 ] 
14:19:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:40: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:42: Host Frequency set to 25000 KHz
14:19:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:42: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E030>, 0x0, True) , Command count = 461 ] 
14:19:42: [GO18_globalSetVolt]### Host voltage value is set.
14:19:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E090>, 0x0, False) , Command count = 462 ] 
14:19:42: [GO18_globalSetVolt]### Host voltage value is set.
14:19:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 463 ] 
14:19:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 464 ] 
14:19:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 465 ] 
14:19:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E150>, <py_sfcl.CommandDataDefinition object at 0x0642E0F0>) , Command count = 466 ] 
14:19:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E210>, <py_sfcl.CommandDataDefinition object at 0x0642AC00>) , Command count = 467 ] 
14:19:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:43: [ SetCardRCA(0x1, 0xD555) , Command count = 468 ] 
14:19:43: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:43: Host Frequency set to 25000 KHz
14:19:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:43: ####CSD Registe 2.0 Values####
14:19:43: CSD_STRUCTURE                                 :0x1
14:19:43: Reserv1                                       :0x0
14:19:43: Time Access 1 TAAC                            :0xe
14:19:43: Time Access 2 NSAC*100                        :0x0
14:19:43: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:43: Card Command Classess CCC                     :0x5b5
14:19:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:43: DSR(driver stage register)  DSR_IMP           :0x0
14:19:43: Reserv2                                       :0x0
14:19:43: Device Size C_SIZE                            :0xedc8
14:19:43: Reserv3                                       :0x0
14:19:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:43: Reserv4                                       :0x0
14:19:43: Write Speed Factor R2W_FACTOR                 :0x2
14:19:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:43: FILE_FORMAT_GRP                               :0x0
14:19:43: COPY flag                                     :0x1
14:19:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:43: File_Format                                   :0x0
14:19:43: CRC                                           :0x0
14:19:43: ####CSD Registe Values####  

14:19:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:43: [GetSCRRegisterEntry] Passed
14:19:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:43: Data_Status_After Erases          : 0
14:19:43: CPRM Security Support             : No Security
14:19:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:43: Spec. Version                     : Version 3.0X
14:19:43: Extended Security Support         : Extended_Security_Not_Supported
14:19:43: Command Support                   : COMMAND_SUPPORT
14:19:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E420>, <py_sfcl.CommandDataDefinition object at 0x0642E240>) , Command count = 469 ] 
14:19:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E330>, <py_sfcl.CommandDataDefinition object at 0x0642E270>) , Command count = 470 ] 
14:19:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:43: [ SetBusWidth(0x4) , Command count = 471 ] 
14:19:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642AA80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 472 ] 
14:19:43: Protected Area Size 0x28000
14:19:43: Bus Width           2
14:19:43: Secure Mode         0
14:19:43: Speed  Class        4
14:19:43: Perf Move           0
14:19:43: Au Size             9
14:19:43: Erase Size          15
14:19:43: Erase Timeout       1
14:19:43: Erase offset        1
14:19:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 473 ] 
14:19:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:43: Host Frequency set to 100000 KHz
14:19:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:43: ####CSD Registe 2.0 Values####
14:19:43: CSD_STRUCTURE                                 :0x1
14:19:43: Reserv1                                       :0x0
14:19:43: Time Access 1 TAAC                            :0xe
14:19:43: Time Access 2 NSAC*100                        :0x0
14:19:43: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:43: Card Command Classess CCC                     :0x5b5
14:19:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:43: DSR(driver stage register)  DSR_IMP           :0x0
14:19:43: Reserv2                                       :0x0
14:19:43: Device Size C_SIZE                            :0xedc8
14:19:43: Reserv3                                       :0x0
14:19:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:43: Reserv4                                       :0x0
14:19:43: Write Speed Factor R2W_FACTOR                 :0x2
14:19:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:43: FILE_FORMAT_GRP                               :0x0
14:19:43: COPY flag                                     :0x1
14:19:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:43: File_Format                                   :0x0
14:19:43: CRC                                           :0x0
14:19:43: ####CSD Registe Values####  

14:19:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E630>, <py_sfcl.CommandDataDefinition object at 0x0642E450>) , Command count = 474 ] 
14:19:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AE70>, <py_sfcl.CommandDataDefinition object at 0x0642AEA0>) , Command count = 475 ] 
14:19:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AF00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E540>, <py_sfcl.PySEnhancedCmdData object at 0x0642E570>, <None>, <py_sfcl.Command23 object at 0x0642AD20>) , Command count = 476 ] 
14:19:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 9
14:19:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E690>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6C0>, <None>, <py_sfcl.Command23 object at 0x0642E5A0>) , Command count = 477 ] 
14:19:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AFC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E840>, <py_sfcl.PySEnhancedCmdData object at 0x0642E450>, <None>, <py_sfcl.Command23 object at 0x0642E5D0>) , Command count = 478 ] 
14:19:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:43: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:45: Host Frequency set to 25000 KHz
14:19:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:45: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EA20>, 0x0, True) , Command count = 479 ] 
14:19:45: [GO18_globalSetVolt]### Host voltage value is set.
14:19:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E900>, 0x0, False) , Command count = 480 ] 
14:19:45: [GO18_globalSetVolt]### Host voltage value is set.
14:19:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 481 ] 
14:19:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 482 ] 
14:19:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 483 ] 
14:19:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E9C0>, <py_sfcl.CommandDataDefinition object at 0x0642E960>) , Command count = 484 ] 
14:19:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EAB0>, <py_sfcl.CommandDataDefinition object at 0x0642E480>) , Command count = 485 ] 
14:19:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:45: [ SetCardRCA(0x1, 0xD555) , Command count = 486 ] 
14:19:45: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:45: Host Frequency set to 25000 KHz
14:19:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:45: ####CSD Registe 2.0 Values####
14:19:45: CSD_STRUCTURE                                 :0x1
14:19:45: Reserv1                                       :0x0
14:19:45: Time Access 1 TAAC                            :0xe
14:19:45: Time Access 2 NSAC*100                        :0x0
14:19:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:45: Card Command Classess CCC                     :0x5b5
14:19:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:45: DSR(driver stage register)  DSR_IMP           :0x0
14:19:45: Reserv2                                       :0x0
14:19:45: Device Size C_SIZE                            :0xedc8
14:19:45: Reserv3                                       :0x0
14:19:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:45: Reserv4                                       :0x0
14:19:45: Write Speed Factor R2W_FACTOR                 :0x2
14:19:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:45: FILE_FORMAT_GRP                               :0x0
14:19:45: COPY flag                                     :0x1
14:19:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:45: File_Format                                   :0x0
14:19:45: CRC                                           :0x0
14:19:45: ####CSD Registe Values####  

14:19:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:45: [GetSCRRegisterEntry] Passed
14:19:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:45: Data_Status_After Erases          : 0
14:19:45: CPRM Security Support             : No Security
14:19:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:45: Spec. Version                     : Version 3.0X
14:19:45: Extended Security Support         : Extended_Security_Not_Supported
14:19:45: Command Support                   : COMMAND_SUPPORT
14:19:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ECC0>, <py_sfcl.CommandDataDefinition object at 0x0642EAE0>) , Command count = 487 ] 
14:19:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EBD0>, <py_sfcl.CommandDataDefinition object at 0x0642EA50>) , Command count = 488 ] 
14:19:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:45: [ SetBusWidth(0x4) , Command count = 489 ] 
14:19:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642EC60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 490 ] 
14:19:46: Protected Area Size 0x28000
14:19:46: Bus Width           2
14:19:46: Secure Mode         0
14:19:46: Speed  Class        4
14:19:46: Perf Move           0
14:19:46: Au Size             9
14:19:46: Erase Size          15
14:19:46: Erase Timeout       1
14:19:46: Erase offset        1
14:19:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 491 ] 
14:19:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:46: Host Frequency set to 100000 KHz
14:19:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:46: ####CSD Registe 2.0 Values####
14:19:46: CSD_STRUCTURE                                 :0x1
14:19:46: Reserv1                                       :0x0
14:19:46: Time Access 1 TAAC                            :0xe
14:19:46: Time Access 2 NSAC*100                        :0x0
14:19:46: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:46: Card Command Classess CCC                     :0x5b5
14:19:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:46: DSR(driver stage register)  DSR_IMP           :0x0
14:19:46: Reserv2                                       :0x0
14:19:46: Device Size C_SIZE                            :0xedc8
14:19:46: Reserv3                                       :0x0
14:19:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:46: Reserv4                                       :0x0
14:19:46: Write Speed Factor R2W_FACTOR                 :0x2
14:19:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:46: FILE_FORMAT_GRP                               :0x0
14:19:46: COPY flag                                     :0x1
14:19:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:46: File_Format                                   :0x0
14:19:46: CRC                                           :0x0
14:19:46: ####CSD Registe Values####  

14:19:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EED0>, <py_sfcl.CommandDataDefinition object at 0x0642ECF0>) , Command count = 492 ] 
14:19:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E750>, <py_sfcl.CommandDataDefinition object at 0x0642E780>) , Command count = 493 ] 
14:19:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642EDE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EE10>, <py_sfcl.PySEnhancedCmdData object at 0x0642EE40>, <None>, <py_sfcl.Command23 object at 0x0642E600>) , Command count = 494 ] 
14:19:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 8
14:19:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064310F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642EF30>, <None>, <py_sfcl.Command23 object at 0x0642E7E0>) , Command count = 495 ] 
14:19:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431120>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E870>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6F0>, <None>, <py_sfcl.Command23 object at 0x0642EF60>) , Command count = 496 ] 
14:19:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:46: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:48: Host Frequency set to 25000 KHz
14:19:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:48: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431300>, 0x0, True) , Command count = 497 ] 
14:19:48: [GO18_globalSetVolt]### Host voltage value is set.
14:19:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x064311E0>, 0x0, False) , Command count = 498 ] 
14:19:48: [GO18_globalSetVolt]### Host voltage value is set.
14:19:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 499 ] 
14:19:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 500 ] 
14:19:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 501 ] 
14:19:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ED80>, <py_sfcl.CommandDataDefinition object at 0x064312A0>) , Command count = 502 ] 
14:19:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C40B70>, <py_sfcl.CommandDataDefinition object at 0x06431360>) , Command count = 503 ] 
14:19:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:48: [ SetCardRCA(0x1, 0xD555) , Command count = 504 ] 
14:19:48: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:48: Host Frequency set to 25000 KHz
14:19:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:48: ####CSD Registe 2.0 Values####
14:19:48: CSD_STRUCTURE                                 :0x1
14:19:48: Reserv1                                       :0x0
14:19:48: Time Access 1 TAAC                            :0xe
14:19:48: Time Access 2 NSAC*100                        :0x0
14:19:48: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:48: Card Command Classess CCC                     :0x5b5
14:19:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:48: DSR(driver stage register)  DSR_IMP           :0x0
14:19:48: Reserv2                                       :0x0
14:19:48: Device Size C_SIZE                            :0xedc8
14:19:48: Reserv3                                       :0x0
14:19:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:48: Reserv4                                       :0x0
14:19:48: Write Speed Factor R2W_FACTOR                 :0x2
14:19:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:48: FILE_FORMAT_GRP                               :0x0
14:19:48: COPY flag                                     :0x1
14:19:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:48: File_Format                                   :0x0
14:19:48: CRC                                           :0x0
14:19:48: ####CSD Registe Values####  

14:19:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:48: [GetSCRRegisterEntry] Passed
14:19:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:48: Data_Status_After Erases          : 0
14:19:48: CPRM Security Support             : No Security
14:19:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:48: Spec. Version                     : Version 3.0X
14:19:48: Extended Security Support         : Extended_Security_Not_Supported
14:19:48: Command Support                   : COMMAND_SUPPORT
14:19:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431570>, <py_sfcl.CommandDataDefinition object at 0x06431390>) , Command count = 505 ] 
14:19:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D85F30>, <py_sfcl.CommandDataDefinition object at 0x06431330>) , Command count = 506 ] 
14:19:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:48: [ SetBusWidth(0x4) , Command count = 507 ] 
14:19:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06431450>, <0x200/0x200, Spc, pat:0x0>) , Command count = 508 ] 
14:19:48: Protected Area Size 0x28000
14:19:48: Bus Width           2
14:19:48: Secure Mode         0
14:19:48: Speed  Class        4
14:19:48: Perf Move           0
14:19:48: Au Size             9
14:19:48: Erase Size          15
14:19:48: Erase Timeout       1
14:19:48: Erase offset        1
14:19:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 509 ] 
14:19:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:48: Host Frequency set to 100000 KHz
14:19:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:48: ####CSD Registe 2.0 Values####
14:19:48: CSD_STRUCTURE                                 :0x1
14:19:48: Reserv1                                       :0x0
14:19:48: Time Access 1 TAAC                            :0xe
14:19:48: Time Access 2 NSAC*100                        :0x0
14:19:48: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:48: Card Command Classess CCC                     :0x5b5
14:19:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:48: DSR(driver stage register)  DSR_IMP           :0x0
14:19:48: Reserv2                                       :0x0
14:19:48: Device Size C_SIZE                            :0xedc8
14:19:48: Reserv3                                       :0x0
14:19:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:48: Reserv4                                       :0x0
14:19:48: Write Speed Factor R2W_FACTOR                 :0x2
14:19:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:48: FILE_FORMAT_GRP                               :0x0
14:19:48: COPY flag                                     :0x1
14:19:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:48: File_Format                                   :0x0
14:19:48: CRC                                           :0x0
14:19:48: ####CSD Registe Values####  

14:19:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7BD0>, <py_sfcl.CommandDataDefinition object at 0x05D7E1E0>) , Command count = 510 ] 
14:19:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EF90>, <py_sfcl.CommandDataDefinition object at 0x06431030>) , Command count = 511 ] 
14:19:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431510>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431540>, <py_sfcl.PySEnhancedCmdData object at 0x064315A0>, <None>, <py_sfcl.Command23 object at 0x0642EEA0>) , Command count = 512 ] 
14:19:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 7
14:19:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7C30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431630>, <py_sfcl.PySEnhancedCmdData object at 0x06431690>, <None>, <py_sfcl.Command23 object at 0x064310C0>) , Command count = 513 ] 
14:19:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431150>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431990>, <py_sfcl.PySEnhancedCmdData object at 0x06431090>, <None>, <py_sfcl.Command23 object at 0x064315D0>) , Command count = 514 ] 
14:19:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:51: Host Frequency set to 25000 KHz
14:19:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAD180>, 0x0, True) , Command count = 515 ] 
14:19:51: [GO18_globalSetVolt]### Host voltage value is set.
14:19:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x01D7FDB0>, 0x0, False) , Command count = 516 ] 
14:19:51: [GO18_globalSetVolt]### Host voltage value is set.
14:19:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 517 ] 
14:19:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 518 ] 
14:19:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 519 ] 
14:19:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F90>, <py_sfcl.CommandDataDefinition object at 0x05DA7960>) , Command count = 520 ] 
14:19:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADD50>, <py_sfcl.CommandDataDefinition object at 0x06431870>) , Command count = 521 ] 
14:19:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:51: [ SetCardRCA(0x1, 0xD555) , Command count = 522 ] 
14:19:51: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:51: Host Frequency set to 25000 KHz
14:19:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:51: ####CSD Registe 2.0 Values####
14:19:51: CSD_STRUCTURE                                 :0x1
14:19:51: Reserv1                                       :0x0
14:19:51: Time Access 1 TAAC                            :0xe
14:19:51: Time Access 2 NSAC*100                        :0x0
14:19:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:51: Card Command Classess CCC                     :0x5b5
14:19:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:51: DSR(driver stage register)  DSR_IMP           :0x0
14:19:51: Reserv2                                       :0x0
14:19:51: Device Size C_SIZE                            :0xedc8
14:19:51: Reserv3                                       :0x0
14:19:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:51: Reserv4                                       :0x0
14:19:51: Write Speed Factor R2W_FACTOR                 :0x2
14:19:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:51: FILE_FORMAT_GRP                               :0x0
14:19:51: COPY flag                                     :0x1
14:19:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:51: File_Format                                   :0x0
14:19:51: CRC                                           :0x0
14:19:51: ####CSD Registe Values####  

14:19:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:51: [GetSCRRegisterEntry] Passed
14:19:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:51: Data_Status_After Erases          : 0
14:19:51: CPRM Security Support             : No Security
14:19:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:51: Spec. Version                     : Version 3.0X
14:19:51: Extended Security Support         : Extended_Security_Not_Supported
14:19:51: Command Support                   : COMMAND_SUPPORT
14:19:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8A80>, <py_sfcl.CommandDataDefinition object at 0x06431A80>) , Command count = 523 ] 
14:19:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D91210>, <py_sfcl.CommandDataDefinition object at 0x06431810>) , Command count = 524 ] 
14:19:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:51: [ SetBusWidth(0x4) , Command count = 525 ] 
14:19:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06431960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 526 ] 
14:19:51: Protected Area Size 0x28000
14:19:51: Bus Width           2
14:19:51: Secure Mode         0
14:19:51: Speed  Class        4
14:19:51: Perf Move           0
14:19:51: Au Size             9
14:19:51: Erase Size          15
14:19:51: Erase Timeout       1
14:19:51: Erase offset        1
14:19:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 527 ] 
14:19:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:51: Host Frequency set to 100000 KHz
14:19:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:51: ####CSD Registe 2.0 Values####
14:19:51: CSD_STRUCTURE                                 :0x1
14:19:51: Reserv1                                       :0x0
14:19:51: Time Access 1 TAAC                            :0xe
14:19:51: Time Access 2 NSAC*100                        :0x0
14:19:51: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:51: Card Command Classess CCC                     :0x5b5
14:19:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:51: DSR(driver stage register)  DSR_IMP           :0x0
14:19:51: Reserv2                                       :0x0
14:19:51: Device Size C_SIZE                            :0xedc8
14:19:51: Reserv3                                       :0x0
14:19:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:51: Reserv4                                       :0x0
14:19:51: Write Speed Factor R2W_FACTOR                 :0x2
14:19:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:51: FILE_FORMAT_GRP                               :0x0
14:19:51: COPY flag                                     :0x1
14:19:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:51: File_Format                                   :0x0
14:19:51: CRC                                           :0x0
14:19:51: ####CSD Registe Values####  

14:19:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D91180>, <py_sfcl.CommandDataDefinition object at 0x06431BA0>) , Command count = 528 ] 
14:19:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7C60>, <py_sfcl.CommandDataDefinition object at 0x06431720>) , Command count = 529 ] 
14:19:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF7E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431A50>, <py_sfcl.PySEnhancedCmdData object at 0x06431AB0>, <None>, <py_sfcl.Command23 object at 0x06431600>) , Command count = 530 ] 
14:19:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 6
14:19:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF810>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431B40>, <py_sfcl.PySEnhancedCmdData object at 0x06431B70>, <None>, <py_sfcl.Command23 object at 0x06431780>) , Command count = 531 ] 
14:19:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DADAB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431EA0>, <py_sfcl.PySEnhancedCmdData object at 0x064316C0>, <None>, <py_sfcl.Command23 object at 0x06431AE0>) , Command count = 532 ] 
14:19:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:53: Host Frequency set to 25000 KHz
14:19:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:53: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF960>, 0x0, True) , Command count = 533 ] 
14:19:53: [GO18_globalSetVolt]### Host voltage value is set.
14:19:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEFA80>, 0x0, False) , Command count = 534 ] 
14:19:53: [GO18_globalSetVolt]### Host voltage value is set.
14:19:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 535 ] 
14:19:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 536 ] 
14:19:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 537 ] 
14:19:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB10>, <py_sfcl.CommandDataDefinition object at 0x06431D20>) , Command count = 538 ] 
14:19:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFBA0>, <py_sfcl.CommandDataDefinition object at 0x06431D80>) , Command count = 539 ] 
14:19:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:54: [ SetCardRCA(0x1, 0xD555) , Command count = 540 ] 
14:19:54: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:54: Host Frequency set to 25000 KHz
14:19:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:54: ####CSD Registe 2.0 Values####
14:19:54: CSD_STRUCTURE                                 :0x1
14:19:54: Reserv1                                       :0x0
14:19:54: Time Access 1 TAAC                            :0xe
14:19:54: Time Access 2 NSAC*100                        :0x0
14:19:54: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:54: Card Command Classess CCC                     :0x5b5
14:19:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:54: DSR(driver stage register)  DSR_IMP           :0x0
14:19:54: Reserv2                                       :0x0
14:19:54: Device Size C_SIZE                            :0xedc8
14:19:54: Reserv3                                       :0x0
14:19:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:54: Reserv4                                       :0x0
14:19:54: Write Speed Factor R2W_FACTOR                 :0x2
14:19:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:54: FILE_FORMAT_GRP                               :0x0
14:19:54: COPY flag                                     :0x1
14:19:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:54: File_Format                                   :0x0
14:19:54: CRC                                           :0x0
14:19:54: ####CSD Registe Values####  

14:19:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:54: [GetSCRRegisterEntry] Passed
14:19:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:54: Data_Status_After Erases          : 0
14:19:54: CPRM Security Support             : No Security
14:19:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:54: Spec. Version                     : Version 3.0X
14:19:54: Extended Security Support         : Extended_Security_Not_Supported
14:19:54: Command Support                   : COMMAND_SUPPORT
14:19:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB40>, <py_sfcl.CommandDataDefinition object at 0x06431FC0>) , Command count = 541 ] 
14:19:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFE10>, <py_sfcl.CommandDataDefinition object at 0x06431D50>) , Command count = 542 ] 
14:19:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:54: [ SetBusWidth(0x4) , Command count = 543 ] 
14:19:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06431ED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 544 ] 
14:19:54: Protected Area Size 0x28000
14:19:54: Bus Width           2
14:19:54: Secure Mode         0
14:19:54: Speed  Class        4
14:19:54: Perf Move           0
14:19:54: Au Size             9
14:19:54: Erase Size          15
14:19:54: Erase Timeout       1
14:19:54: Erase offset        1
14:19:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 545 ] 
14:19:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:54: Host Frequency set to 100000 KHz
14:19:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:54: ####CSD Registe 2.0 Values####
14:19:54: CSD_STRUCTURE                                 :0x1
14:19:54: Reserv1                                       :0x0
14:19:54: Time Access 1 TAAC                            :0xe
14:19:54: Time Access 2 NSAC*100                        :0x0
14:19:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:54: Card Command Classess CCC                     :0x5b5
14:19:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:54: DSR(driver stage register)  DSR_IMP           :0x0
14:19:54: Reserv2                                       :0x0
14:19:54: Device Size C_SIZE                            :0xedc8
14:19:54: Reserv3                                       :0x0
14:19:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:54: Reserv4                                       :0x0
14:19:54: Write Speed Factor R2W_FACTOR                 :0x2
14:19:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:54: FILE_FORMAT_GRP                               :0x0
14:19:54: COPY flag                                     :0x1
14:19:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:54: File_Format                                   :0x0
14:19:54: CRC                                           :0x0
14:19:54: ####CSD Registe Values####  

14:19:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E14B0>, <py_sfcl.CommandDataDefinition object at 0x06431930>) , Command count = 546 ] 
14:19:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEF840>, <py_sfcl.CommandDataDefinition object at 0x06431C30>) , Command count = 547 ] 
14:19:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F90>, <py_sfcl.PySEnhancedCmdData object at 0x06431C90>, <None>, <py_sfcl.Command23 object at 0x06431B10>) , Command count = 548 ] 
14:19:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 5
14:19:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431E10>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F00>, <py_sfcl.PySEnhancedCmdData object at 0x0645B0C0>, <None>, <py_sfcl.Command23 object at 0x06431BD0>) , Command count = 549 ] 
14:19:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF9F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B420>, <py_sfcl.PySEnhancedCmdData object at 0x0645B060>, <None>, <py_sfcl.Command23 object at 0x0645B0F0>) , Command count = 550 ] 
14:19:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:54: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:56: Host Frequency set to 25000 KHz
14:19:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:56: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x064140F0>, 0x0, True) , Command count = 551 ] 
14:19:56: [GO18_globalSetVolt]### Host voltage value is set.
14:19:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x06414750>, 0x0, False) , Command count = 552 ] 
14:19:56: [GO18_globalSetVolt]### Host voltage value is set.
14:19:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 553 ] 
14:19:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 554 ] 
14:19:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 555 ] 
14:19:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414690>, <py_sfcl.CommandDataDefinition object at 0x06414B40>) , Command count = 556 ] 
14:19:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414870>, <py_sfcl.CommandDataDefinition object at 0x06431F30>) , Command count = 557 ] 
14:19:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:56: [ SetCardRCA(0x1, 0xD555) , Command count = 558 ] 
14:19:56: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:56: Host Frequency set to 25000 KHz
14:19:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:56: ####CSD Registe 2.0 Values####
14:19:56: CSD_STRUCTURE                                 :0x1
14:19:56: Reserv1                                       :0x0
14:19:56: Time Access 1 TAAC                            :0xe
14:19:56: Time Access 2 NSAC*100                        :0x0
14:19:56: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:56: Card Command Classess CCC                     :0x5b5
14:19:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:56: DSR(driver stage register)  DSR_IMP           :0x0
14:19:56: Reserv2                                       :0x0
14:19:56: Device Size C_SIZE                            :0xedc8
14:19:56: Reserv3                                       :0x0
14:19:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:56: Reserv4                                       :0x0
14:19:56: Write Speed Factor R2W_FACTOR                 :0x2
14:19:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:56: FILE_FORMAT_GRP                               :0x0
14:19:56: COPY flag                                     :0x1
14:19:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:56: File_Format                                   :0x0
14:19:56: CRC                                           :0x0
14:19:56: ####CSD Registe Values####  

14:19:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:56: [GetSCRRegisterEntry] Passed
14:19:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:56: Data_Status_After Erases          : 0
14:19:56: CPRM Security Support             : No Security
14:19:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:56: Spec. Version                     : Version 3.0X
14:19:56: Extended Security Support         : Extended_Security_Not_Supported
14:19:56: Command Support                   : COMMAND_SUPPORT
14:19:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414360>, <py_sfcl.CommandDataDefinition object at 0x06414900>) , Command count = 559 ] 
14:19:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414DE0>, <py_sfcl.CommandDataDefinition object at 0x064146C0>) , Command count = 560 ] 
14:19:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:56: [ SetBusWidth(0x4) , Command count = 561 ] 
14:19:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06414570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 562 ] 
14:19:57: Protected Area Size 0x28000
14:19:57: Bus Width           2
14:19:57: Secure Mode         0
14:19:57: Speed  Class        4
14:19:57: Perf Move           0
14:19:57: Au Size             9
14:19:57: Erase Size          15
14:19:57: Erase Timeout       1
14:19:57: Erase offset        1
14:19:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 563 ] 
14:19:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:57: Host Frequency set to 100000 KHz
14:19:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:57: ####CSD Registe 2.0 Values####
14:19:57: CSD_STRUCTURE                                 :0x1
14:19:57: Reserv1                                       :0x0
14:19:57: Time Access 1 TAAC                            :0xe
14:19:57: Time Access 2 NSAC*100                        :0x0
14:19:57: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:57: Card Command Classess CCC                     :0x5b5
14:19:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:57: DSR(driver stage register)  DSR_IMP           :0x0
14:19:57: Reserv2                                       :0x0
14:19:57: Device Size C_SIZE                            :0xedc8
14:19:57: Reserv3                                       :0x0
14:19:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:57: Reserv4                                       :0x0
14:19:57: Write Speed Factor R2W_FACTOR                 :0x2
14:19:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:57: FILE_FORMAT_GRP                               :0x0
14:19:57: COPY flag                                     :0x1
14:19:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:57: File_Format                                   :0x0
14:19:57: CRC                                           :0x0
14:19:57: ####CSD Registe Values####  

14:19:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E11E0>, <py_sfcl.CommandDataDefinition object at 0x064143C0>) , Command count = 564 ] 
14:19:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414060>, <py_sfcl.CommandDataDefinition object at 0x06414810>) , Command count = 565 ] 
14:19:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414DB0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414AE0>, <py_sfcl.PySEnhancedCmdData object at 0x06414A50>, <None>, <py_sfcl.Command23 object at 0x0645B240>) , Command count = 566 ] 
14:19:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 4
14:19:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414FC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414300>, <py_sfcl.PySEnhancedCmdData object at 0x0645B270>, <None>, <py_sfcl.Command23 object at 0x06414990>) , Command count = 567 ] 
14:19:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414D20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06451BA0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B300>, <None>, <py_sfcl.Command23 object at 0x0645B3C0>) , Command count = 568 ] 
14:19:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:19:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:59: Host Frequency set to 25000 KHz
14:19:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:19:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:19:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x064517B0>, 0x0, True) , Command count = 569 ] 
14:19:59: [GO18_globalSetVolt]### Host voltage value is set.
14:19:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:19:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645B480>, 0x0, False) , Command count = 570 ] 
14:19:59: [GO18_globalSetVolt]### Host voltage value is set.
14:19:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 571 ] 
14:19:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:19:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 572 ] 
14:19:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:19:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:19:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:19:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:19:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:19:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 573 ] 
14:19:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:19:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:19:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451540>, <py_sfcl.CommandDataDefinition object at 0x06451EA0>) , Command count = 574 ] 
14:19:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:19:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451870>, <py_sfcl.CommandDataDefinition object at 0x06414CF0>) , Command count = 575 ] 
14:19:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:19:59: [ SetCardRCA(0x1, 0xD555) , Command count = 576 ] 
14:19:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:19:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:19:59: Host Frequency set to 25000 KHz
14:19:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:19:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:59: ####CSD Registe 2.0 Values####
14:19:59: CSD_STRUCTURE                                 :0x1
14:19:59: Reserv1                                       :0x0
14:19:59: Time Access 1 TAAC                            :0xe
14:19:59: Time Access 2 NSAC*100                        :0x0
14:19:59: Data Transfer Rate TRAN_SPEED                 :0x32
14:19:59: Card Command Classess CCC                     :0x5b5
14:19:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:59: DSR(driver stage register)  DSR_IMP           :0x0
14:19:59: Reserv2                                       :0x0
14:19:59: Device Size C_SIZE                            :0xedc8
14:19:59: Reserv3                                       :0x0
14:19:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:59: Reserv4                                       :0x0
14:19:59: Write Speed Factor R2W_FACTOR                 :0x2
14:19:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:59: FILE_FORMAT_GRP                               :0x0
14:19:59: COPY flag                                     :0x1
14:19:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:59: File_Format                                   :0x0
14:19:59: CRC                                           :0x0
14:19:59: ####CSD Registe Values####  

14:19:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:19:59: [GetSCRRegisterEntry] Passed
14:19:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:19:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:19:59: Data_Status_After Erases          : 0
14:19:59: CPRM Security Support             : No Security
14:19:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:19:59: Spec. Version                     : Version 3.0X
14:19:59: Extended Security Support         : Extended_Security_Not_Supported
14:19:59: Command Support                   : COMMAND_SUPPORT
14:19:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:19:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1A80>, <py_sfcl.CommandDataDefinition object at 0x06451900>) , Command count = 577 ] 
14:19:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:19:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414630>, <py_sfcl.CommandDataDefinition object at 0x06414CF0>) , Command count = 578 ] 
14:19:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:19:59: [ SetBusWidth(0x4) , Command count = 579 ] 
14:19:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:19:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06414A80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 580 ] 
14:19:59: Protected Area Size 0x28000
14:19:59: Bus Width           2
14:19:59: Secure Mode         0
14:19:59: Speed  Class        4
14:19:59: Perf Move           0
14:19:59: Au Size             9
14:19:59: Erase Size          15
14:19:59: Erase Timeout       1
14:19:59: Erase offset        1
14:19:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:19:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:19:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:19:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 581 ] 
14:19:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:19:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:19:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:19:59: Host Frequency set to 100000 KHz
14:19:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:19:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:19:59: ####CSD Registe 2.0 Values####
14:19:59: CSD_STRUCTURE                                 :0x1
14:19:59: Reserv1                                       :0x0
14:19:59: Time Access 1 TAAC                            :0xe
14:19:59: Time Access 2 NSAC*100                        :0x0
14:19:59: Data Transfer Rate TRAN_SPEED                 :0xb
14:19:59: Card Command Classess CCC                     :0x5b5
14:19:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:19:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:19:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:19:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:19:59: DSR(driver stage register)  DSR_IMP           :0x0
14:19:59: Reserv2                                       :0x0
14:19:59: Device Size C_SIZE                            :0xedc8
14:19:59: Reserv3                                       :0x0
14:19:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:19:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:19:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:19:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:19:59: Reserv4                                       :0x0
14:19:59: Write Speed Factor R2W_FACTOR                 :0x2
14:19:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:19:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:19:59: FILE_FORMAT_GRP                               :0x0
14:19:59: COPY flag                                     :0x1
14:19:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:19:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:19:59: File_Format                                   :0x0
14:19:59: CRC                                           :0x0
14:19:59: ####CSD Registe Values####  

14:19:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451BD0>, <py_sfcl.CommandDataDefinition object at 0x064515D0>) , Command count = 582 ] 
14:19:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:19:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451F00>, <py_sfcl.CommandDataDefinition object at 0x06451D20>) , Command count = 583 ] 
14:19:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:19:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:19:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064518A0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064515A0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B510>, <None>, <py_sfcl.Command23 object at 0x0645B1B0>) , Command count = 584 ] 
14:19:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 3
14:19:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:19:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B570>, <py_sfcl.PySEnhancedCmdData object at 0x0645B5A0>, <None>, <py_sfcl.Command23 object at 0x0645B540>) , Command count = 585 ] 
14:19:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:19:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:19:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451DE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06451600>, <py_sfcl.PySEnhancedCmdData object at 0x0645B360>, <None>, <py_sfcl.Command23 object at 0x0645B450>) , Command count = 586 ] 
14:19:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:19:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:02: Host Frequency set to 25000 KHz
14:20:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:02: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x064516C0>, 0x0, True) , Command count = 587 ] 
14:20:02: [GO18_globalSetVolt]### Host voltage value is set.
14:20:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645B720>, 0x0, False) , Command count = 588 ] 
14:20:02: [GO18_globalSetVolt]### Host voltage value is set.
14:20:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 589 ] 
14:20:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 590 ] 
14:20:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 591 ] 
14:20:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064519C0>, <py_sfcl.CommandDataDefinition object at 0x06451780>) , Command count = 592 ] 
14:20:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F150>, <py_sfcl.CommandDataDefinition object at 0x0641F0C0>) , Command count = 593 ] 
14:20:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:02: [ SetCardRCA(0x1, 0xD555) , Command count = 594 ] 
14:20:02: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:02: Host Frequency set to 25000 KHz
14:20:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:02: ####CSD Registe 2.0 Values####
14:20:02: CSD_STRUCTURE                                 :0x1
14:20:02: Reserv1                                       :0x0
14:20:02: Time Access 1 TAAC                            :0xe
14:20:02: Time Access 2 NSAC*100                        :0x0
14:20:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:02: Card Command Classess CCC                     :0x5b5
14:20:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:02: DSR(driver stage register)  DSR_IMP           :0x0
14:20:02: Reserv2                                       :0x0
14:20:02: Device Size C_SIZE                            :0xedc8
14:20:02: Reserv3                                       :0x0
14:20:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:02: Reserv4                                       :0x0
14:20:02: Write Speed Factor R2W_FACTOR                 :0x2
14:20:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:02: FILE_FORMAT_GRP                               :0x0
14:20:02: COPY flag                                     :0x1
14:20:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:02: File_Format                                   :0x0
14:20:02: CRC                                           :0x0
14:20:02: ####CSD Registe Values####  

14:20:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:02: [GetSCRRegisterEntry] Passed
14:20:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:02: Data_Status_After Erases          : 0
14:20:02: CPRM Security Support             : No Security
14:20:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:02: Spec. Version                     : Version 3.0X
14:20:02: Extended Security Support         : Extended_Security_Not_Supported
14:20:02: Command Support                   : COMMAND_SUPPORT
14:20:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F3F0>, <py_sfcl.CommandDataDefinition object at 0x0641F210>) , Command count = 595 ] 
14:20:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451630>, <py_sfcl.CommandDataDefinition object at 0x0641F1B0>) , Command count = 596 ] 
14:20:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:02: [ SetBusWidth(0x4) , Command count = 597 ] 
14:20:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 598 ] 
14:20:02: Protected Area Size 0x28000
14:20:02: Bus Width           2
14:20:02: Secure Mode         0
14:20:02: Speed  Class        4
14:20:02: Perf Move           0
14:20:02: Au Size             9
14:20:02: Erase Size          15
14:20:02: Erase Timeout       1
14:20:02: Erase offset        1
14:20:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 599 ] 
14:20:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:02: Host Frequency set to 100000 KHz
14:20:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:02: ####CSD Registe 2.0 Values####
14:20:02: CSD_STRUCTURE                                 :0x1
14:20:02: Reserv1                                       :0x0
14:20:02: Time Access 1 TAAC                            :0xe
14:20:02: Time Access 2 NSAC*100                        :0x0
14:20:02: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:02: Card Command Classess CCC                     :0x5b5
14:20:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:02: DSR(driver stage register)  DSR_IMP           :0x0
14:20:02: Reserv2                                       :0x0
14:20:02: Device Size C_SIZE                            :0xedc8
14:20:02: Reserv3                                       :0x0
14:20:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:02: Reserv4                                       :0x0
14:20:02: Write Speed Factor R2W_FACTOR                 :0x2
14:20:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:02: FILE_FORMAT_GRP                               :0x0
14:20:02: COPY flag                                     :0x1
14:20:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:02: File_Format                                   :0x0
14:20:02: CRC                                           :0x0
14:20:02: ####CSD Registe Values####  

14:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F660>, <py_sfcl.CommandDataDefinition object at 0x0641F480>) , Command count = 600 ] 
14:20:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451810>, <py_sfcl.CommandDataDefinition object at 0x06451E40>) , Command count = 601 ] 
14:20:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F180>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F540>, <py_sfcl.PySEnhancedCmdData object at 0x0645B7E0>, <None>, <py_sfcl.Command23 object at 0x0645B630>) , Command count = 602 ] 
14:20:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 2
14:20:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B840>, <py_sfcl.PySEnhancedCmdData object at 0x0645B8A0>, <None>, <py_sfcl.Command23 object at 0x0645B750>) , Command count = 603 ] 
14:20:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641FAE0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B690>, <None>, <py_sfcl.Command23 object at 0x0645B780>) , Command count = 604 ] 
14:20:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:02: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:04: Host Frequency set to 25000 KHz
14:20:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:04: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB10>, 0x0, True) , Command count = 605 ] 
14:20:04: [GO18_globalSetVolt]### Host voltage value is set.
14:20:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645B9F0>, 0x0, False) , Command count = 606 ] 
14:20:04: [GO18_globalSetVolt]### Host voltage value is set.
14:20:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 607 ] 
14:20:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 608 ] 
14:20:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 609 ] 
14:20:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FC00>, <py_sfcl.CommandDataDefinition object at 0x0641FFC0>) , Command count = 610 ] 
14:20:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FCC0>, <py_sfcl.CommandDataDefinition object at 0x0641F2A0>) , Command count = 611 ] 
14:20:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:05: [ SetCardRCA(0x1, 0xD555) , Command count = 612 ] 
14:20:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:05: Host Frequency set to 25000 KHz
14:20:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:05: ####CSD Registe 2.0 Values####
14:20:05: CSD_STRUCTURE                                 :0x1
14:20:05: Reserv1                                       :0x0
14:20:05: Time Access 1 TAAC                            :0xe
14:20:05: Time Access 2 NSAC*100                        :0x0
14:20:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:05: Card Command Classess CCC                     :0x5b5
14:20:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:05: DSR(driver stage register)  DSR_IMP           :0x0
14:20:05: Reserv2                                       :0x0
14:20:05: Device Size C_SIZE                            :0xedc8
14:20:05: Reserv3                                       :0x0
14:20:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:05: Reserv4                                       :0x0
14:20:05: Write Speed Factor R2W_FACTOR                 :0x2
14:20:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:05: FILE_FORMAT_GRP                               :0x0
14:20:05: COPY flag                                     :0x1
14:20:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:05: File_Format                                   :0x0
14:20:05: CRC                                           :0x0
14:20:05: ####CSD Registe Values####  

14:20:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:05: [GetSCRRegisterEntry] Passed
14:20:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:05: Data_Status_After Erases          : 0
14:20:05: CPRM Security Support             : No Security
14:20:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:05: Spec. Version                     : Version 3.0X
14:20:05: Extended Security Support         : Extended_Security_Not_Supported
14:20:05: Command Support                   : COMMAND_SUPPORT
14:20:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FB70>, <py_sfcl.CommandDataDefinition object at 0x0641FCF0>) , Command count = 613 ] 
14:20:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F330>, <py_sfcl.CommandDataDefinition object at 0x0641F510>) , Command count = 614 ] 
14:20:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:05: [ SetBusWidth(0x4) , Command count = 615 ] 
14:20:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BAE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 616 ] 
14:20:05: Protected Area Size 0x28000
14:20:05: Bus Width           2
14:20:05: Secure Mode         0
14:20:05: Speed  Class        4
14:20:05: Perf Move           0
14:20:05: Au Size             9
14:20:05: Erase Size          15
14:20:05: Erase Timeout       1
14:20:05: Erase offset        1
14:20:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 617 ] 
14:20:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:05: Host Frequency set to 100000 KHz
14:20:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:05: ####CSD Registe 2.0 Values####
14:20:05: CSD_STRUCTURE                                 :0x1
14:20:05: Reserv1                                       :0x0
14:20:05: Time Access 1 TAAC                            :0xe
14:20:05: Time Access 2 NSAC*100                        :0x0
14:20:05: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:05: Card Command Classess CCC                     :0x5b5
14:20:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:05: DSR(driver stage register)  DSR_IMP           :0x0
14:20:05: Reserv2                                       :0x0
14:20:05: Device Size C_SIZE                            :0xedc8
14:20:05: Reserv3                                       :0x0
14:20:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:05: Reserv4                                       :0x0
14:20:05: Write Speed Factor R2W_FACTOR                 :0x2
14:20:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:05: FILE_FORMAT_GRP                               :0x0
14:20:05: COPY flag                                     :0x1
14:20:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:05: File_Format                                   :0x0
14:20:05: CRC                                           :0x0
14:20:05: ####CSD Registe Values####  

14:20:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467060>, <py_sfcl.CommandDataDefinition object at 0x0641FF90>) , Command count = 618 ] 
14:20:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451F60>, <py_sfcl.CommandDataDefinition object at 0x0641FAB0>) , Command count = 619 ] 
14:20:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064671E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467210>, <py_sfcl.PySEnhancedCmdData object at 0x06467240>, <None>, <py_sfcl.Command23 object at 0x06467390>) , Command count = 620 ] 
14:20:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 1
14:20:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064670C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064670F0>, <py_sfcl.PySEnhancedCmdData object at 0x06467120>, <None>, <py_sfcl.Command23 object at 0x064672A0>) , Command count = 621 ] 
14:20:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641FB40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467420>, <py_sfcl.PySEnhancedCmdData object at 0x0645B900>, <None>, <py_sfcl.Command23 object at 0x06467270>) , Command count = 622 ] 
14:20:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:05: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:07: Host Frequency set to 25000 KHz
14:20:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:07: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x064675A0>, 0x0, True) , Command count = 623 ] 
14:20:07: [GO18_globalSetVolt]### Host voltage value is set.
14:20:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645BA80>, 0x0, False) , Command count = 624 ] 
14:20:07: [GO18_globalSetVolt]### Host voltage value is set.
14:20:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 625 ] 
14:20:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 626 ] 
14:20:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 627 ] 
14:20:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467540>, <py_sfcl.CommandDataDefinition object at 0x064674E0>) , Command count = 628 ] 
14:20:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467570>, <py_sfcl.CommandDataDefinition object at 0x0641FDE0>) , Command count = 629 ] 
14:20:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:07: [ SetCardRCA(0x1, 0xD555) , Command count = 630 ] 
14:20:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:07: Host Frequency set to 25000 KHz
14:20:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:07: ####CSD Registe 2.0 Values####
14:20:07: CSD_STRUCTURE                                 :0x1
14:20:07: Reserv1                                       :0x0
14:20:07: Time Access 1 TAAC                            :0xe
14:20:07: Time Access 2 NSAC*100                        :0x0
14:20:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:07: Card Command Classess CCC                     :0x5b5
14:20:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:07: DSR(driver stage register)  DSR_IMP           :0x0
14:20:07: Reserv2                                       :0x0
14:20:07: Device Size C_SIZE                            :0xedc8
14:20:07: Reserv3                                       :0x0
14:20:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:07: Reserv4                                       :0x0
14:20:07: Write Speed Factor R2W_FACTOR                 :0x2
14:20:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:07: FILE_FORMAT_GRP                               :0x0
14:20:07: COPY flag                                     :0x1
14:20:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:07: File_Format                                   :0x0
14:20:07: CRC                                           :0x0
14:20:07: ####CSD Registe Values####  

14:20:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:07: [GetSCRRegisterEntry] Passed
14:20:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:07: Data_Status_After Erases          : 0
14:20:07: CPRM Security Support             : No Security
14:20:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:07: Spec. Version                     : Version 3.0X
14:20:07: Extended Security Support         : Extended_Security_Not_Supported
14:20:07: Command Support                   : COMMAND_SUPPORT
14:20:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467840>, <py_sfcl.CommandDataDefinition object at 0x06467660>) , Command count = 631 ] 
14:20:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467720>, <py_sfcl.CommandDataDefinition object at 0x0641FE70>) , Command count = 632 ] 
14:20:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:08: [ SetBusWidth(0x4) , Command count = 633 ] 
14:20:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0641FF30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 634 ] 
14:20:08: Protected Area Size 0x28000
14:20:08: Bus Width           2
14:20:08: Secure Mode         0
14:20:08: Speed  Class        4
14:20:08: Perf Move           0
14:20:08: Au Size             9
14:20:08: Erase Size          15
14:20:08: Erase Timeout       1
14:20:08: Erase offset        1
14:20:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 635 ] 
14:20:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:08: Host Frequency set to 100000 KHz
14:20:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:08: ####CSD Registe 2.0 Values####
14:20:08: CSD_STRUCTURE                                 :0x1
14:20:08: Reserv1                                       :0x0
14:20:08: Time Access 1 TAAC                            :0xe
14:20:08: Time Access 2 NSAC*100                        :0x0
14:20:08: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:08: Card Command Classess CCC                     :0x5b5
14:20:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:08: DSR(driver stage register)  DSR_IMP           :0x0
14:20:08: Reserv2                                       :0x0
14:20:08: Device Size C_SIZE                            :0xedc8
14:20:08: Reserv3                                       :0x0
14:20:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:08: Reserv4                                       :0x0
14:20:08: Write Speed Factor R2W_FACTOR                 :0x2
14:20:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:08: FILE_FORMAT_GRP                               :0x0
14:20:08: COPY flag                                     :0x1
14:20:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:08: File_Format                                   :0x0
14:20:08: CRC                                           :0x0
14:20:08: ####CSD Registe Values####  

14:20:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467A50>, <py_sfcl.CommandDataDefinition object at 0x06467870>) , Command count = 636 ] 
14:20:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FA80>, <py_sfcl.CommandDataDefinition object at 0x064673C0>) , Command count = 637 ] 
14:20:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467990>, <py_sfcl.PySEnhancedCmdData object at 0x064679C0>, <None>, <py_sfcl.Command23 object at 0x06467C30>) , Command count = 638 ] 
14:20:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Outer loop Count 1023
14:20:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 29
14:20:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06467AE0>, <None>, <py_sfcl.Command23 object at 0x06467B40>) , Command count = 639 ] 
14:20:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467480>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467CC0>, <py_sfcl.PySEnhancedCmdData object at 0x064675D0>, <None>, <py_sfcl.Command23 object at 0x06467360>) , Command count = 640 ] 
14:20:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:10: Host Frequency set to 25000 KHz
14:20:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467E40>, 0x0, True) , Command count = 641 ] 
14:20:10: [GO18_globalSetVolt]### Host voltage value is set.
14:20:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645BA20>, 0x0, False) , Command count = 642 ] 
14:20:10: [GO18_globalSetVolt]### Host voltage value is set.
14:20:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 643 ] 
14:20:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 644 ] 
14:20:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 645 ] 
14:20:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467DE0>, <py_sfcl.CommandDataDefinition object at 0x06467D80>) , Command count = 646 ] 
14:20:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467E10>, <py_sfcl.CommandDataDefinition object at 0x06467EA0>) , Command count = 647 ] 
14:20:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:10: [ SetCardRCA(0x1, 0xD555) , Command count = 648 ] 
14:20:10: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:10: Host Frequency set to 25000 KHz
14:20:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:10: ####CSD Registe 2.0 Values####
14:20:10: CSD_STRUCTURE                                 :0x1
14:20:10: Reserv1                                       :0x0
14:20:10: Time Access 1 TAAC                            :0xe
14:20:10: Time Access 2 NSAC*100                        :0x0
14:20:10: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:10: Card Command Classess CCC                     :0x5b5
14:20:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:10: DSR(driver stage register)  DSR_IMP           :0x0
14:20:10: Reserv2                                       :0x0
14:20:10: Device Size C_SIZE                            :0xedc8
14:20:10: Reserv3                                       :0x0
14:20:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:10: Reserv4                                       :0x0
14:20:10: Write Speed Factor R2W_FACTOR                 :0x2
14:20:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:10: FILE_FORMAT_GRP                               :0x0
14:20:10: COPY flag                                     :0x1
14:20:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:10: File_Format                                   :0x0
14:20:10: CRC                                           :0x0
14:20:10: ####CSD Registe Values####  

14:20:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:10: [GetSCRRegisterEntry] Passed
14:20:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:10: Data_Status_After Erases          : 0
14:20:10: CPRM Security Support             : No Security
14:20:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:10: Spec. Version                     : Version 3.0X
14:20:10: Extended Security Support         : Extended_Security_Not_Supported
14:20:10: Command Support                   : COMMAND_SUPPORT
14:20:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421030>, <py_sfcl.CommandDataDefinition object at 0x06467F00>) , Command count = 649 ] 
14:20:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467780>, <py_sfcl.CommandDataDefinition object at 0x06467900>) , Command count = 650 ] 
14:20:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:10: [ SetBusWidth(0x4) , Command count = 651 ] 
14:20:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x064672D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 652 ] 
14:20:10: Protected Area Size 0x28000
14:20:10: Bus Width           2
14:20:10: Secure Mode         0
14:20:10: Speed  Class        4
14:20:10: Perf Move           0
14:20:10: Au Size             9
14:20:10: Erase Size          15
14:20:10: Erase Timeout       1
14:20:10: Erase offset        1
14:20:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 653 ] 
14:20:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:10: Host Frequency set to 100000 KHz
14:20:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:10: ####CSD Registe 2.0 Values####
14:20:10: CSD_STRUCTURE                                 :0x1
14:20:10: Reserv1                                       :0x0
14:20:10: Time Access 1 TAAC                            :0xe
14:20:10: Time Access 2 NSAC*100                        :0x0
14:20:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:10: Card Command Classess CCC                     :0x5b5
14:20:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:10: DSR(driver stage register)  DSR_IMP           :0x0
14:20:10: Reserv2                                       :0x0
14:20:10: Device Size C_SIZE                            :0xedc8
14:20:10: Reserv3                                       :0x0
14:20:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:10: Reserv4                                       :0x0
14:20:10: Write Speed Factor R2W_FACTOR                 :0x2
14:20:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:10: FILE_FORMAT_GRP                               :0x0
14:20:10: COPY flag                                     :0x1
14:20:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:10: File_Format                                   :0x0
14:20:10: CRC                                           :0x0
14:20:10: ####CSD Registe Values####  

14:20:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467F90>, <py_sfcl.CommandDataDefinition object at 0x06467FC0>) , Command count = 654 ] 
14:20:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064673F0>, <py_sfcl.CommandDataDefinition object at 0x06467C60>) , Command count = 655 ] 
14:20:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467B10>, <py_sfcl.PySEnhancedCmdData object at 0x064676F0>, <None>, <py_sfcl.Command23 object at 0x06467930>) , Command count = 656 ] 
14:20:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 28
14:20:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421360>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421390>, <py_sfcl.PySEnhancedCmdData object at 0x064213C0>, <None>, <py_sfcl.Command23 object at 0x064679F0>) , Command count = 657 ] 
14:20:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467D20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064215A0>, <py_sfcl.PySEnhancedCmdData object at 0x06421240>, <None>, <py_sfcl.Command23 object at 0x06421270>) , Command count = 658 ] 
14:20:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:13: Host Frequency set to 25000 KHz
14:20:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421720>, 0x0, True) , Command count = 659 ] 
14:20:13: [GO18_globalSetVolt]### Host voltage value is set.
14:20:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421180>, 0x0, False) , Command count = 660 ] 
14:20:13: [GO18_globalSetVolt]### Host voltage value is set.
14:20:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 661 ] 
14:20:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 662 ] 
14:20:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 663 ] 
14:20:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216C0>, <py_sfcl.CommandDataDefinition object at 0x06421660>) , Command count = 664 ] 
14:20:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216F0>, <py_sfcl.CommandDataDefinition object at 0x06467C60>) , Command count = 665 ] 
14:20:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:13: [ SetCardRCA(0x1, 0xD555) , Command count = 666 ] 
14:20:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:13: Host Frequency set to 25000 KHz
14:20:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:13: ####CSD Registe 2.0 Values####
14:20:13: CSD_STRUCTURE                                 :0x1
14:20:13: Reserv1                                       :0x0
14:20:13: Time Access 1 TAAC                            :0xe
14:20:13: Time Access 2 NSAC*100                        :0x0
14:20:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:13: Card Command Classess CCC                     :0x5b5
14:20:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:13: DSR(driver stage register)  DSR_IMP           :0x0
14:20:13: Reserv2                                       :0x0
14:20:13: Device Size C_SIZE                            :0xedc8
14:20:13: Reserv3                                       :0x0
14:20:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:13: Reserv4                                       :0x0
14:20:13: Write Speed Factor R2W_FACTOR                 :0x2
14:20:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:13: FILE_FORMAT_GRP                               :0x0
14:20:13: COPY flag                                     :0x1
14:20:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:13: File_Format                                   :0x0
14:20:13: CRC                                           :0x0
14:20:13: ####CSD Registe Values####  

14:20:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:13: [GetSCRRegisterEntry] Passed
14:20:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:13: Data_Status_After Erases          : 0
14:20:13: CPRM Security Support             : No Security
14:20:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:13: Spec. Version                     : Version 3.0X
14:20:13: Extended Security Support         : Extended_Security_Not_Supported
14:20:13: Command Support                   : COMMAND_SUPPORT
14:20:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064219C0>, <py_sfcl.CommandDataDefinition object at 0x064217E0>) , Command count = 667 ] 
14:20:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421090>, <py_sfcl.CommandDataDefinition object at 0x064218A0>) , Command count = 668 ] 
14:20:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:13: [ SetBusWidth(0x4) , Command count = 669 ] 
14:20:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06467B70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 670 ] 
14:20:13: Protected Area Size 0x28000
14:20:13: Bus Width           2
14:20:13: Secure Mode         0
14:20:13: Speed  Class        4
14:20:13: Perf Move           0
14:20:13: Au Size             9
14:20:13: Erase Size          15
14:20:13: Erase Timeout       1
14:20:13: Erase offset        1
14:20:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 671 ] 
14:20:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:13: Host Frequency set to 100000 KHz
14:20:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:13: ####CSD Registe 2.0 Values####
14:20:13: CSD_STRUCTURE                                 :0x1
14:20:13: Reserv1                                       :0x0
14:20:13: Time Access 1 TAAC                            :0xe
14:20:13: Time Access 2 NSAC*100                        :0x0
14:20:13: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:13: Card Command Classess CCC                     :0x5b5
14:20:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:13: DSR(driver stage register)  DSR_IMP           :0x0
14:20:13: Reserv2                                       :0x0
14:20:13: Device Size C_SIZE                            :0xedc8
14:20:13: Reserv3                                       :0x0
14:20:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:13: Reserv4                                       :0x0
14:20:13: Write Speed Factor R2W_FACTOR                 :0x2
14:20:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:13: FILE_FORMAT_GRP                               :0x0
14:20:13: COPY flag                                     :0x1
14:20:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:13: File_Format                                   :0x0
14:20:13: CRC                                           :0x0
14:20:13: ####CSD Registe Values####  

14:20:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421BD0>, <py_sfcl.CommandDataDefinition object at 0x064219F0>) , Command count = 672 ] 
14:20:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467C90>, <py_sfcl.CommandDataDefinition object at 0x06421540>) , Command count = 673 ] 
14:20:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421B10>, <py_sfcl.PySEnhancedCmdData object at 0x06421B40>, <None>, <py_sfcl.Command23 object at 0x06421510>) , Command count = 674 ] 
14:20:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 27
14:20:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421C30>, <py_sfcl.PySEnhancedCmdData object at 0x06421C60>, <None>, <py_sfcl.Command23 object at 0x06421300>) , Command count = 675 ] 
14:20:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421600>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421E40>, <py_sfcl.PySEnhancedCmdData object at 0x064212D0>, <None>, <py_sfcl.Command23 object at 0x064214E0>) , Command count = 676 ] 
14:20:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:15: Host Frequency set to 25000 KHz
14:20:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421FC0>, 0x0, True) , Command count = 677 ] 
14:20:15: [GO18_globalSetVolt]### Host voltage value is set.
14:20:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421A20>, 0x0, False) , Command count = 678 ] 
14:20:15: [GO18_globalSetVolt]### Host voltage value is set.
14:20:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 679 ] 
14:20:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 680 ] 
14:20:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 681 ] 
14:20:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A060>, <py_sfcl.CommandDataDefinition object at 0x06421F60>) , Command count = 682 ] 
14:20:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A030>, <py_sfcl.CommandDataDefinition object at 0x06421480>) , Command count = 683 ] 
14:20:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:16: [ SetCardRCA(0x1, 0xD555) , Command count = 684 ] 
14:20:16: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:16: Host Frequency set to 25000 KHz
14:20:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:16: ####CSD Registe 2.0 Values####
14:20:16: CSD_STRUCTURE                                 :0x1
14:20:16: Reserv1                                       :0x0
14:20:16: Time Access 1 TAAC                            :0xe
14:20:16: Time Access 2 NSAC*100                        :0x0
14:20:16: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:16: Card Command Classess CCC                     :0x5b5
14:20:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:16: DSR(driver stage register)  DSR_IMP           :0x0
14:20:16: Reserv2                                       :0x0
14:20:16: Device Size C_SIZE                            :0xedc8
14:20:16: Reserv3                                       :0x0
14:20:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:16: Reserv4                                       :0x0
14:20:16: Write Speed Factor R2W_FACTOR                 :0x2
14:20:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:16: FILE_FORMAT_GRP                               :0x0
14:20:16: COPY flag                                     :0x1
14:20:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:16: File_Format                                   :0x0
14:20:16: CRC                                           :0x0
14:20:16: ####CSD Registe Values####  

14:20:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:16: [GetSCRRegisterEntry] Passed
14:20:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:16: Data_Status_After Erases          : 0
14:20:16: CPRM Security Support             : No Security
14:20:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:16: Spec. Version                     : Version 3.0X
14:20:16: Extended Security Support         : Extended_Security_Not_Supported
14:20:16: Command Support                   : COMMAND_SUPPORT
14:20:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A2A0>, <py_sfcl.CommandDataDefinition object at 0x0642A0C0>) , Command count = 685 ] 
14:20:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A240>, <py_sfcl.CommandDataDefinition object at 0x06421480>) , Command count = 686 ] 
14:20:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:16: [ SetBusWidth(0x4) , Command count = 687 ] 
14:20:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06421A50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 688 ] 
14:20:16: Protected Area Size 0x28000
14:20:16: Bus Width           2
14:20:16: Secure Mode         0
14:20:16: Speed  Class        4
14:20:16: Perf Move           0
14:20:16: Au Size             9
14:20:16: Erase Size          15
14:20:16: Erase Timeout       1
14:20:16: Erase offset        1
14:20:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 689 ] 
14:20:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:16: Host Frequency set to 100000 KHz
14:20:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:16: ####CSD Registe 2.0 Values####
14:20:16: CSD_STRUCTURE                                 :0x1
14:20:16: Reserv1                                       :0x0
14:20:16: Time Access 1 TAAC                            :0xe
14:20:16: Time Access 2 NSAC*100                        :0x0
14:20:16: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:16: Card Command Classess CCC                     :0x5b5
14:20:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:16: DSR(driver stage register)  DSR_IMP           :0x0
14:20:16: Reserv2                                       :0x0
14:20:16: Device Size C_SIZE                            :0xedc8
14:20:16: Reserv3                                       :0x0
14:20:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:16: Reserv4                                       :0x0
14:20:16: Write Speed Factor R2W_FACTOR                 :0x2
14:20:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:16: FILE_FORMAT_GRP                               :0x0
14:20:16: COPY flag                                     :0x1
14:20:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:16: File_Format                                   :0x0
14:20:16: CRC                                           :0x0
14:20:16: ####CSD Registe Values####  

14:20:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421D50>, <py_sfcl.CommandDataDefinition object at 0x06421C90>) , Command count = 690 ] 
14:20:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421570>, <py_sfcl.CommandDataDefinition object at 0x06421DE0>) , Command count = 691 ] 
14:20:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421D80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421BA0>, <py_sfcl.PySEnhancedCmdData object at 0x06421B70>, <None>, <py_sfcl.Command23 object at 0x06421CC0>) , Command count = 692 ] 
14:20:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 26
14:20:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A510>, <py_sfcl.PySEnhancedCmdData object at 0x0642A540>, <None>, <py_sfcl.Command23 object at 0x0642A3C0>) , Command count = 693 ] 
14:20:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421EA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A720>, <py_sfcl.PySEnhancedCmdData object at 0x0642A690>, <None>, <py_sfcl.Command23 object at 0x0642A420>) , Command count = 694 ] 
14:20:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:18: Host Frequency set to 25000 KHz
14:20:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:18: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A8A0>, 0x0, True) , Command count = 695 ] 
14:20:18: [GO18_globalSetVolt]### Host voltage value is set.
14:20:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421E70>, 0x0, False) , Command count = 696 ] 
14:20:18: [GO18_globalSetVolt]### Host voltage value is set.
14:20:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 697 ] 
14:20:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 698 ] 
14:20:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 699 ] 
14:20:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421D20>, <py_sfcl.CommandDataDefinition object at 0x0642A840>) , Command count = 700 ] 
14:20:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A870>, <py_sfcl.CommandDataDefinition object at 0x0642A810>) , Command count = 701 ] 
14:20:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:18: [ SetCardRCA(0x1, 0xD555) , Command count = 702 ] 
14:20:18: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:19: Host Frequency set to 25000 KHz
14:20:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:19: ####CSD Registe 2.0 Values####
14:20:19: CSD_STRUCTURE                                 :0x1
14:20:19: Reserv1                                       :0x0
14:20:19: Time Access 1 TAAC                            :0xe
14:20:19: Time Access 2 NSAC*100                        :0x0
14:20:19: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:19: Card Command Classess CCC                     :0x5b5
14:20:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:19: DSR(driver stage register)  DSR_IMP           :0x0
14:20:19: Reserv2                                       :0x0
14:20:19: Device Size C_SIZE                            :0xedc8
14:20:19: Reserv3                                       :0x0
14:20:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:19: Reserv4                                       :0x0
14:20:19: Write Speed Factor R2W_FACTOR                 :0x2
14:20:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:19: FILE_FORMAT_GRP                               :0x0
14:20:19: COPY flag                                     :0x1
14:20:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:19: File_Format                                   :0x0
14:20:19: CRC                                           :0x0
14:20:19: ####CSD Registe Values####  

14:20:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:19: [GetSCRRegisterEntry] Passed
14:20:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:19: Data_Status_After Erases          : 0
14:20:19: CPRM Security Support             : No Security
14:20:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:19: Spec. Version                     : Version 3.0X
14:20:19: Extended Security Support         : Extended_Security_Not_Supported
14:20:19: Command Support                   : COMMAND_SUPPORT
14:20:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AB40>, <py_sfcl.CommandDataDefinition object at 0x0642A960>) , Command count = 703 ] 
14:20:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A1E0>, <py_sfcl.CommandDataDefinition object at 0x0642A360>) , Command count = 704 ] 
14:20:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:19: [ SetBusWidth(0x4) , Command count = 705 ] 
14:20:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642A330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 706 ] 
14:20:19: Protected Area Size 0x28000
14:20:19: Bus Width           2
14:20:19: Secure Mode         0
14:20:19: Speed  Class        4
14:20:19: Perf Move           0
14:20:19: Au Size             9
14:20:19: Erase Size          15
14:20:19: Erase Timeout       1
14:20:19: Erase offset        1
14:20:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 707 ] 
14:20:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:19: Host Frequency set to 100000 KHz
14:20:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:19: ####CSD Registe 2.0 Values####
14:20:19: CSD_STRUCTURE                                 :0x1
14:20:19: Reserv1                                       :0x0
14:20:19: Time Access 1 TAAC                            :0xe
14:20:19: Time Access 2 NSAC*100                        :0x0
14:20:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:19: Card Command Classess CCC                     :0x5b5
14:20:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:19: DSR(driver stage register)  DSR_IMP           :0x0
14:20:19: Reserv2                                       :0x0
14:20:19: Device Size C_SIZE                            :0xedc8
14:20:19: Reserv3                                       :0x0
14:20:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:19: Reserv4                                       :0x0
14:20:19: Write Speed Factor R2W_FACTOR                 :0x2
14:20:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:19: FILE_FORMAT_GRP                               :0x0
14:20:19: COPY flag                                     :0x1
14:20:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:19: File_Format                                   :0x0
14:20:19: CRC                                           :0x0
14:20:19: ####CSD Registe Values####  

14:20:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AD50>, <py_sfcl.CommandDataDefinition object at 0x0642AB70>) , Command count = 708 ] 
14:20:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421E10>, <py_sfcl.CommandDataDefinition object at 0x0642A6C0>) , Command count = 709 ] 
14:20:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AC60>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC90>, <py_sfcl.PySEnhancedCmdData object at 0x0642ACC0>, <None>, <py_sfcl.Command23 object at 0x0642A5A0>) , Command count = 710 ] 
14:20:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 25
14:20:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642ADB0>, <py_sfcl.PySEnhancedCmdData object at 0x0642ADE0>, <None>, <py_sfcl.Command23 object at 0x0642A480>) , Command count = 711 ] 
14:20:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A780>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AF60>, <py_sfcl.PySEnhancedCmdData object at 0x0642A450>, <None>, <py_sfcl.Command23 object at 0x0642A660>) , Command count = 712 ] 
14:20:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:21: Host Frequency set to 25000 KHz
14:20:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E030>, 0x0, True) , Command count = 713 ] 
14:20:21: [GO18_globalSetVolt]### Host voltage value is set.
14:20:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642ABA0>, 0x0, False) , Command count = 714 ] 
14:20:21: [GO18_globalSetVolt]### Host voltage value is set.
14:20:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 715 ] 
14:20:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 716 ] 
14:20:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 717 ] 
14:20:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E150>, <py_sfcl.CommandDataDefinition object at 0x0642E0F0>) , Command count = 718 ] 
14:20:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E180>, <py_sfcl.CommandDataDefinition object at 0x0642A5D0>) , Command count = 719 ] 
14:20:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:21: [ SetCardRCA(0x1, 0xD555) , Command count = 720 ] 
14:20:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:21: Host Frequency set to 25000 KHz
14:20:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:21: ####CSD Registe 2.0 Values####
14:20:21: CSD_STRUCTURE                                 :0x1
14:20:21: Reserv1                                       :0x0
14:20:21: Time Access 1 TAAC                            :0xe
14:20:21: Time Access 2 NSAC*100                        :0x0
14:20:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:21: Card Command Classess CCC                     :0x5b5
14:20:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:21: DSR(driver stage register)  DSR_IMP           :0x0
14:20:21: Reserv2                                       :0x0
14:20:21: Device Size C_SIZE                            :0xedc8
14:20:21: Reserv3                                       :0x0
14:20:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:21: Reserv4                                       :0x0
14:20:21: Write Speed Factor R2W_FACTOR                 :0x2
14:20:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:21: FILE_FORMAT_GRP                               :0x0
14:20:21: COPY flag                                     :0x1
14:20:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:21: File_Format                                   :0x0
14:20:21: CRC                                           :0x0
14:20:21: ####CSD Registe Values####  

14:20:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:21: [GetSCRRegisterEntry] Passed
14:20:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:21: Data_Status_After Erases          : 0
14:20:21: CPRM Security Support             : No Security
14:20:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:21: Spec. Version                     : Version 3.0X
14:20:21: Extended Security Support         : Extended_Security_Not_Supported
14:20:21: Command Support                   : COMMAND_SUPPORT
14:20:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AC00>, <py_sfcl.CommandDataDefinition object at 0x0642E420>) , Command count = 721 ] 
14:20:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E3C0>, <py_sfcl.CommandDataDefinition object at 0x0642E300>) , Command count = 722 ] 
14:20:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:21: [ SetBusWidth(0x4) , Command count = 723 ] 
14:20:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642ABD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 724 ] 
14:20:21: Protected Area Size 0x28000
14:20:21: Bus Width           2
14:20:21: Secure Mode         0
14:20:21: Speed  Class        4
14:20:21: Perf Move           0
14:20:21: Au Size             9
14:20:21: Erase Size          15
14:20:21: Erase Timeout       1
14:20:21: Erase offset        1
14:20:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 725 ] 
14:20:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:21: Host Frequency set to 100000 KHz
14:20:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:21: ####CSD Registe 2.0 Values####
14:20:21: CSD_STRUCTURE                                 :0x1
14:20:21: Reserv1                                       :0x0
14:20:21: Time Access 1 TAAC                            :0xe
14:20:21: Time Access 2 NSAC*100                        :0x0
14:20:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:21: Card Command Classess CCC                     :0x5b5
14:20:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:21: DSR(driver stage register)  DSR_IMP           :0x0
14:20:21: Reserv2                                       :0x0
14:20:21: Device Size C_SIZE                            :0xedc8
14:20:21: Reserv3                                       :0x0
14:20:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:21: Reserv4                                       :0x0
14:20:21: Write Speed Factor R2W_FACTOR                 :0x2
14:20:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:21: FILE_FORMAT_GRP                               :0x0
14:20:21: COPY flag                                     :0x1
14:20:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:21: File_Format                                   :0x0
14:20:21: CRC                                           :0x0
14:20:21: ####CSD Registe Values####  

14:20:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AED0>, <py_sfcl.CommandDataDefinition object at 0x0642AE10>) , Command count = 726 ] 
14:20:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A6F0>, <py_sfcl.CommandDataDefinition object at 0x0642AF90>) , Command count = 727 ] 
14:20:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AF00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AD20>, <py_sfcl.PySEnhancedCmdData object at 0x0642ACF0>, <None>, <py_sfcl.Command23 object at 0x0642AE40>) , Command count = 728 ] 
14:20:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 24
14:20:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E690>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6C0>, <None>, <py_sfcl.Command23 object at 0x0642E540>) , Command count = 729 ] 
14:20:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E090>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E8A0>, <py_sfcl.PySEnhancedCmdData object at 0x0642E810>, <None>, <py_sfcl.Command23 object at 0x0642E5A0>) , Command count = 730 ] 
14:20:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:21: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:24: Host Frequency set to 25000 KHz
14:20:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:24: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EA20>, 0x0, True) , Command count = 731 ] 
14:20:24: [GO18_globalSetVolt]### Host voltage value is set.
14:20:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E060>, 0x0, False) , Command count = 732 ] 
14:20:24: [GO18_globalSetVolt]### Host voltage value is set.
14:20:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 733 ] 
14:20:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 734 ] 
14:20:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 735 ] 
14:20:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AE70>, <py_sfcl.CommandDataDefinition object at 0x0642AEA0>) , Command count = 736 ] 
14:20:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E9F0>, <py_sfcl.CommandDataDefinition object at 0x0642E960>) , Command count = 737 ] 
14:20:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:24: [ SetCardRCA(0x1, 0xD555) , Command count = 738 ] 
14:20:24: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:24: Host Frequency set to 25000 KHz
14:20:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:24: ####CSD Registe 2.0 Values####
14:20:24: CSD_STRUCTURE                                 :0x1
14:20:24: Reserv1                                       :0x0
14:20:24: Time Access 1 TAAC                            :0xe
14:20:24: Time Access 2 NSAC*100                        :0x0
14:20:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:24: Card Command Classess CCC                     :0x5b5
14:20:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:24: DSR(driver stage register)  DSR_IMP           :0x0
14:20:24: Reserv2                                       :0x0
14:20:24: Device Size C_SIZE                            :0xedc8
14:20:24: Reserv3                                       :0x0
14:20:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:24: Reserv4                                       :0x0
14:20:24: Write Speed Factor R2W_FACTOR                 :0x2
14:20:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:24: FILE_FORMAT_GRP                               :0x0
14:20:24: COPY flag                                     :0x1
14:20:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:24: File_Format                                   :0x0
14:20:24: CRC                                           :0x0
14:20:24: ####CSD Registe Values####  

14:20:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:24: [GetSCRRegisterEntry] Passed
14:20:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:24: Data_Status_After Erases          : 0
14:20:24: CPRM Security Support             : No Security
14:20:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:24: Spec. Version                     : Version 3.0X
14:20:24: Extended Security Support         : Extended_Security_Not_Supported
14:20:24: Command Support                   : COMMAND_SUPPORT
14:20:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ECC0>, <py_sfcl.CommandDataDefinition object at 0x0642EAE0>) , Command count = 739 ] 
14:20:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E360>, <py_sfcl.CommandDataDefinition object at 0x0642E480>) , Command count = 740 ] 
14:20:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:24: [ SetBusWidth(0x4) , Command count = 741 ] 
14:20:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642E4E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 742 ] 
14:20:24: Protected Area Size 0x28000
14:20:24: Bus Width           2
14:20:24: Secure Mode         0
14:20:24: Speed  Class        4
14:20:24: Perf Move           0
14:20:24: Au Size             9
14:20:24: Erase Size          15
14:20:24: Erase Timeout       1
14:20:24: Erase offset        1
14:20:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 743 ] 
14:20:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:24: Host Frequency set to 100000 KHz
14:20:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:24: ####CSD Registe 2.0 Values####
14:20:24: CSD_STRUCTURE                                 :0x1
14:20:24: Reserv1                                       :0x0
14:20:24: Time Access 1 TAAC                            :0xe
14:20:24: Time Access 2 NSAC*100                        :0x0
14:20:24: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:24: Card Command Classess CCC                     :0x5b5
14:20:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:24: DSR(driver stage register)  DSR_IMP           :0x0
14:20:24: Reserv2                                       :0x0
14:20:24: Device Size C_SIZE                            :0xedc8
14:20:24: Reserv3                                       :0x0
14:20:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:24: Reserv4                                       :0x0
14:20:24: Write Speed Factor R2W_FACTOR                 :0x2
14:20:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:24: FILE_FORMAT_GRP                               :0x0
14:20:24: COPY flag                                     :0x1
14:20:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:24: File_Format                                   :0x0
14:20:24: CRC                                           :0x0
14:20:24: ####CSD Registe Values####  

14:20:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EED0>, <py_sfcl.CommandDataDefinition object at 0x0642ECF0>) , Command count = 744 ] 
14:20:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AFC0>, <py_sfcl.CommandDataDefinition object at 0x0642E840>) , Command count = 745 ] 
14:20:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642EDE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EE10>, <py_sfcl.PySEnhancedCmdData object at 0x0642EE40>, <None>, <py_sfcl.Command23 object at 0x0642E720>) , Command count = 746 ] 
14:20:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 23
14:20:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064310F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642EF30>, <None>, <py_sfcl.Command23 object at 0x0642E600>) , Command count = 747 ] 
14:20:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431180>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E900>, <py_sfcl.PySEnhancedCmdData object at 0x0642E5D0>, <None>, <py_sfcl.Command23 object at 0x0642E7E0>) , Command count = 748 ] 
14:20:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:24: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:26: Host Frequency set to 25000 KHz
14:20:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:26: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431300>, 0x0, True) , Command count = 749 ] 
14:20:26: [GO18_globalSetVolt]### Host voltage value is set.
14:20:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642ED20>, 0x0, False) , Command count = 750 ] 
14:20:26: [GO18_globalSetVolt]### Host voltage value is set.
14:20:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 751 ] 
14:20:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 752 ] 
14:20:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 753 ] 
14:20:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312A0>, <py_sfcl.CommandDataDefinition object at 0x06431270>) , Command count = 754 ] 
14:20:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312D0>, <py_sfcl.CommandDataDefinition object at 0x0642ED80>) , Command count = 755 ] 
14:20:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:27: [ SetCardRCA(0x1, 0xD555) , Command count = 756 ] 
14:20:27: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:27: Host Frequency set to 25000 KHz
14:20:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:27: ####CSD Registe 2.0 Values####
14:20:27: CSD_STRUCTURE                                 :0x1
14:20:27: Reserv1                                       :0x0
14:20:27: Time Access 1 TAAC                            :0xe
14:20:27: Time Access 2 NSAC*100                        :0x0
14:20:27: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:27: Card Command Classess CCC                     :0x5b5
14:20:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:27: DSR(driver stage register)  DSR_IMP           :0x0
14:20:27: Reserv2                                       :0x0
14:20:27: Device Size C_SIZE                            :0xedc8
14:20:27: Reserv3                                       :0x0
14:20:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:27: Reserv4                                       :0x0
14:20:27: Write Speed Factor R2W_FACTOR                 :0x2
14:20:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:27: FILE_FORMAT_GRP                               :0x0
14:20:27: COPY flag                                     :0x1
14:20:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:27: File_Format                                   :0x0
14:20:27: CRC                                           :0x0
14:20:27: ####CSD Registe Values####  

14:20:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:27: [GetSCRRegisterEntry] Passed
14:20:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:27: Data_Status_After Erases          : 0
14:20:27: CPRM Security Support             : No Security
14:20:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:27: Spec. Version                     : Version 3.0X
14:20:27: Extended Security Support         : Extended_Security_Not_Supported
14:20:27: Command Support                   : COMMAND_SUPPORT
14:20:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431570>, <py_sfcl.CommandDataDefinition object at 0x06431390>) , Command count = 757 ] 
14:20:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431420>, <py_sfcl.CommandDataDefinition object at 0x0642EC00>) , Command count = 758 ] 
14:20:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:27: [ SetBusWidth(0x4) , Command count = 759 ] 
14:20:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642E780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 760 ] 
14:20:27: Protected Area Size 0x28000
14:20:27: Bus Width           2
14:20:27: Secure Mode         0
14:20:27: Speed  Class        4
14:20:27: Perf Move           0
14:20:27: Au Size             9
14:20:27: Erase Size          15
14:20:27: Erase Timeout       1
14:20:27: Erase offset        1
14:20:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 761 ] 
14:20:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:27: Host Frequency set to 100000 KHz
14:20:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:27: ####CSD Registe 2.0 Values####
14:20:27: CSD_STRUCTURE                                 :0x1
14:20:27: Reserv1                                       :0x0
14:20:27: Time Access 1 TAAC                            :0xe
14:20:27: Time Access 2 NSAC*100                        :0x0
14:20:27: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:27: Card Command Classess CCC                     :0x5b5
14:20:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:27: DSR(driver stage register)  DSR_IMP           :0x0
14:20:27: Reserv2                                       :0x0
14:20:27: Device Size C_SIZE                            :0xedc8
14:20:27: Reserv3                                       :0x0
14:20:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:27: Reserv4                                       :0x0
14:20:27: Write Speed Factor R2W_FACTOR                 :0x2
14:20:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:27: FILE_FORMAT_GRP                               :0x0
14:20:27: COPY flag                                     :0x1
14:20:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:27: File_Format                                   :0x0
14:20:27: CRC                                           :0x0
14:20:27: ####CSD Registe Values####  

14:20:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7BD0>, <py_sfcl.CommandDataDefinition object at 0x05D7E1E0>) , Command count = 762 ] 
14:20:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431120>, <py_sfcl.CommandDataDefinition object at 0x064316F0>) , Command count = 763 ] 
14:20:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431510>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431540>, <py_sfcl.PySEnhancedCmdData object at 0x064315A0>, <None>, <py_sfcl.Command23 object at 0x0642EFC0>) , Command count = 764 ] 
14:20:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 22
14:20:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7C30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431630>, <py_sfcl.PySEnhancedCmdData object at 0x06431690>, <None>, <py_sfcl.Command23 object at 0x064317B0>) , Command count = 765 ] 
14:20:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064311E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064317E0>, <py_sfcl.PySEnhancedCmdData object at 0x0642E870>, <None>, <py_sfcl.Command23 object at 0x064310C0>) , Command count = 766 ] 
14:20:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:29: Host Frequency set to 25000 KHz
14:20:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAD180>, 0x0, True) , Command count = 767 ] 
14:20:29: [GO18_globalSetVolt]### Host voltage value is set.
14:20:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x064311B0>, 0x0, False) , Command count = 768 ] 
14:20:29: [GO18_globalSetVolt]### Host voltage value is set.
14:20:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 769 ] 
14:20:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 770 ] 
14:20:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 771 ] 
14:20:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F90>, <py_sfcl.CommandDataDefinition object at 0x05DA7960>) , Command count = 772 ] 
14:20:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADCC0>, <py_sfcl.CommandDataDefinition object at 0x06431030>) , Command count = 773 ] 
14:20:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:29: [ SetCardRCA(0x1, 0xD555) , Command count = 774 ] 
14:20:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:30: Host Frequency set to 25000 KHz
14:20:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:30: ####CSD Registe 2.0 Values####
14:20:30: CSD_STRUCTURE                                 :0x1
14:20:30: Reserv1                                       :0x0
14:20:30: Time Access 1 TAAC                            :0xe
14:20:30: Time Access 2 NSAC*100                        :0x0
14:20:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:30: Card Command Classess CCC                     :0x5b5
14:20:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:30: DSR(driver stage register)  DSR_IMP           :0x0
14:20:30: Reserv2                                       :0x0
14:20:30: Device Size C_SIZE                            :0xedc8
14:20:30: Reserv3                                       :0x0
14:20:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:30: Reserv4                                       :0x0
14:20:30: Write Speed Factor R2W_FACTOR                 :0x2
14:20:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:30: FILE_FORMAT_GRP                               :0x0
14:20:30: COPY flag                                     :0x1
14:20:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:30: File_Format                                   :0x0
14:20:30: CRC                                           :0x0
14:20:30: ####CSD Registe Values####  

14:20:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:30: [GetSCRRegisterEntry] Passed
14:20:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:30: Data_Status_After Erases          : 0
14:20:30: CPRM Security Support             : No Security
14:20:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:30: Spec. Version                     : Version 3.0X
14:20:30: Extended Security Support         : Extended_Security_Not_Supported
14:20:30: Command Support                   : COMMAND_SUPPORT
14:20:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8A80>, <py_sfcl.CommandDataDefinition object at 0x06431A80>) , Command count = 775 ] 
14:20:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D7E2A0>, <py_sfcl.CommandDataDefinition object at 0x06431870>) , Command count = 776 ] 
14:20:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:30: [ SetBusWidth(0x4) , Command count = 777 ] 
14:20:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642EC60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 778 ] 
14:20:30: Protected Area Size 0x28000
14:20:30: Bus Width           2
14:20:30: Secure Mode         0
14:20:30: Speed  Class        4
14:20:30: Perf Move           0
14:20:30: Au Size             9
14:20:30: Erase Size          15
14:20:30: Erase Timeout       1
14:20:30: Erase offset        1
14:20:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 779 ] 
14:20:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:30: Host Frequency set to 100000 KHz
14:20:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:30: ####CSD Registe 2.0 Values####
14:20:30: CSD_STRUCTURE                                 :0x1
14:20:30: Reserv1                                       :0x0
14:20:30: Time Access 1 TAAC                            :0xe
14:20:30: Time Access 2 NSAC*100                        :0x0
14:20:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:30: Card Command Classess CCC                     :0x5b5
14:20:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:30: DSR(driver stage register)  DSR_IMP           :0x0
14:20:30: Reserv2                                       :0x0
14:20:30: Device Size C_SIZE                            :0xedc8
14:20:30: Reserv3                                       :0x0
14:20:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:30: Reserv4                                       :0x0
14:20:30: Write Speed Factor R2W_FACTOR                 :0x2
14:20:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:30: FILE_FORMAT_GRP                               :0x0
14:20:30: COPY flag                                     :0x1
14:20:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:30: File_Format                                   :0x0
14:20:30: CRC                                           :0x0
14:20:30: ####CSD Registe Values####  

14:20:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D91180>, <py_sfcl.CommandDataDefinition object at 0x05D91210>) , Command count = 780 ] 
14:20:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431150>, <py_sfcl.CommandDataDefinition object at 0x06431990>) , Command count = 781 ] 
14:20:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF7E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431A50>, <py_sfcl.PySEnhancedCmdData object at 0x06431AB0>, <None>, <py_sfcl.Command23 object at 0x0642E6F0>) , Command count = 782 ] 
14:20:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 21
14:20:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF810>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431B40>, <py_sfcl.PySEnhancedCmdData object at 0x06431B70>, <None>, <py_sfcl.Command23 object at 0x06431600>) , Command count = 783 ] 
14:20:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x01D7FDB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431CF0>, <py_sfcl.PySEnhancedCmdData object at 0x064315D0>, <None>, <py_sfcl.Command23 object at 0x06431780>) , Command count = 784 ] 
14:20:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:32: Host Frequency set to 25000 KHz
14:20:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:32: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF960>, 0x0, True) , Command count = 785 ] 
14:20:32: [GO18_globalSetVolt]### Host voltage value is set.
14:20:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x064319C0>, 0x0, False) , Command count = 786 ] 
14:20:32: [GO18_globalSetVolt]### Host voltage value is set.
14:20:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 787 ] 
14:20:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 788 ] 
14:20:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 789 ] 
14:20:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB10>, <py_sfcl.CommandDataDefinition object at 0x05DA7C60>) , Command count = 790 ] 
14:20:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D7EAE0>, <py_sfcl.CommandDataDefinition object at 0x06431480>) , Command count = 791 ] 
14:20:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:32: [ SetCardRCA(0x1, 0xD555) , Command count = 792 ] 
14:20:32: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:32: Host Frequency set to 25000 KHz
14:20:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:32: ####CSD Registe 2.0 Values####
14:20:32: CSD_STRUCTURE                                 :0x1
14:20:32: Reserv1                                       :0x0
14:20:32: Time Access 1 TAAC                            :0xe
14:20:32: Time Access 2 NSAC*100                        :0x0
14:20:32: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:32: Card Command Classess CCC                     :0x5b5
14:20:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:32: DSR(driver stage register)  DSR_IMP           :0x0
14:20:32: Reserv2                                       :0x0
14:20:32: Device Size C_SIZE                            :0xedc8
14:20:32: Reserv3                                       :0x0
14:20:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:32: Reserv4                                       :0x0
14:20:32: Write Speed Factor R2W_FACTOR                 :0x2
14:20:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:32: FILE_FORMAT_GRP                               :0x0
14:20:32: COPY flag                                     :0x1
14:20:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:32: File_Format                                   :0x0
14:20:32: CRC                                           :0x0
14:20:32: ####CSD Registe Values####  

14:20:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:32: [GetSCRRegisterEntry] Passed
14:20:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:32: Data_Status_After Erases          : 0
14:20:32: CPRM Security Support             : No Security
14:20:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:32: Spec. Version                     : Version 3.0X
14:20:32: Extended Security Support         : Extended_Security_Not_Supported
14:20:32: Command Support                   : COMMAND_SUPPORT
14:20:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB40>, <py_sfcl.CommandDataDefinition object at 0x06431FC0>) , Command count = 793 ] 
14:20:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8690>, <py_sfcl.CommandDataDefinition object at 0x06431D80>) , Command count = 794 ] 
14:20:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:32: [ SetBusWidth(0x4) , Command count = 795 ] 
14:20:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x064319F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 796 ] 
14:20:32: Protected Area Size 0x28000
14:20:32: Bus Width           2
14:20:32: Secure Mode         0
14:20:32: Speed  Class        4
14:20:32: Perf Move           0
14:20:32: Au Size             9
14:20:32: Erase Size          15
14:20:32: Erase Timeout       1
14:20:32: Erase offset        1
14:20:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 797 ] 
14:20:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:32: Host Frequency set to 100000 KHz
14:20:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:32: ####CSD Registe 2.0 Values####
14:20:32: CSD_STRUCTURE                                 :0x1
14:20:32: Reserv1                                       :0x0
14:20:32: Time Access 1 TAAC                            :0xe
14:20:32: Time Access 2 NSAC*100                        :0x0
14:20:32: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:32: Card Command Classess CCC                     :0x5b5
14:20:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:32: DSR(driver stage register)  DSR_IMP           :0x0
14:20:32: Reserv2                                       :0x0
14:20:32: Device Size C_SIZE                            :0xedc8
14:20:32: Reserv3                                       :0x0
14:20:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:32: Reserv4                                       :0x0
14:20:32: Write Speed Factor R2W_FACTOR                 :0x2
14:20:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:32: FILE_FORMAT_GRP                               :0x0
14:20:32: COPY flag                                     :0x1
14:20:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:32: File_Format                                   :0x0
14:20:32: CRC                                           :0x0
14:20:32: ####CSD Registe Values####  

14:20:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E14B0>, <py_sfcl.CommandDataDefinition object at 0x05DEFE10>) , Command count = 798 ] 
14:20:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADAB0>, <py_sfcl.CommandDataDefinition object at 0x06431EA0>) , Command count = 799 ] 
14:20:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F90>, <py_sfcl.PySEnhancedCmdData object at 0x06431C90>, <None>, <py_sfcl.Command23 object at 0x06431C00>) , Command count = 800 ] 
14:20:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 20
14:20:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431E10>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F00>, <py_sfcl.PySEnhancedCmdData object at 0x06431BD0>, <None>, <py_sfcl.Command23 object at 0x06431B10>) , Command count = 801 ] 
14:20:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEFA80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414C60>, <py_sfcl.PySEnhancedCmdData object at 0x06431D50>, <None>, <py_sfcl.Command23 object at 0x06431960>) , Command count = 802 ] 
14:20:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:32: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:35: Host Frequency set to 25000 KHz
14:20:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x064140F0>, 0x0, True) , Command count = 803 ] 
14:20:35: [GO18_globalSetVolt]### Host voltage value is set.
14:20:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEFAB0>, 0x0, False) , Command count = 804 ] 
14:20:35: [GO18_globalSetVolt]### Host voltage value is set.
14:20:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 805 ] 
14:20:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 806 ] 
14:20:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 807 ] 
14:20:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414690>, <py_sfcl.CommandDataDefinition object at 0x06414B40>) , Command count = 808 ] 
14:20:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064148A0>, <py_sfcl.CommandDataDefinition object at 0x06431C30>) , Command count = 809 ] 
14:20:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:35: [ SetCardRCA(0x1, 0xD555) , Command count = 810 ] 
14:20:35: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:35: Host Frequency set to 25000 KHz
14:20:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:35: ####CSD Registe 2.0 Values####
14:20:35: CSD_STRUCTURE                                 :0x1
14:20:35: Reserv1                                       :0x0
14:20:35: Time Access 1 TAAC                            :0xe
14:20:35: Time Access 2 NSAC*100                        :0x0
14:20:35: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:35: Card Command Classess CCC                     :0x5b5
14:20:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:35: DSR(driver stage register)  DSR_IMP           :0x0
14:20:35: Reserv2                                       :0x0
14:20:35: Device Size C_SIZE                            :0xedc8
14:20:35: Reserv3                                       :0x0
14:20:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:35: Reserv4                                       :0x0
14:20:35: Write Speed Factor R2W_FACTOR                 :0x2
14:20:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:35: FILE_FORMAT_GRP                               :0x0
14:20:35: COPY flag                                     :0x1
14:20:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:35: File_Format                                   :0x0
14:20:35: CRC                                           :0x0
14:20:35: ####CSD Registe Values####  

14:20:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:35: [GetSCRRegisterEntry] Passed
14:20:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:35: Data_Status_After Erases          : 0
14:20:35: CPRM Security Support             : No Security
14:20:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:35: Spec. Version                     : Version 3.0X
14:20:35: Extended Security Support         : Extended_Security_Not_Supported
14:20:35: Command Support                   : COMMAND_SUPPORT
14:20:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414360>, <py_sfcl.CommandDataDefinition object at 0x06414900>) , Command count = 811 ] 
14:20:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1060>, <py_sfcl.CommandDataDefinition object at 0x06414870>) , Command count = 812 ] 
14:20:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:35: [ SetBusWidth(0x4) , Command count = 813 ] 
14:20:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BCC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 814 ] 
14:20:35: Protected Area Size 0x28000
14:20:35: Bus Width           2
14:20:35: Secure Mode         0
14:20:35: Speed  Class        4
14:20:35: Perf Move           0
14:20:35: Au Size             9
14:20:35: Erase Size          15
14:20:35: Erase Timeout       1
14:20:35: Erase offset        1
14:20:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 815 ] 
14:20:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:35: Host Frequency set to 100000 KHz
14:20:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:35: ####CSD Registe 2.0 Values####
14:20:35: CSD_STRUCTURE                                 :0x1
14:20:35: Reserv1                                       :0x0
14:20:35: Time Access 1 TAAC                            :0xe
14:20:35: Time Access 2 NSAC*100                        :0x0
14:20:35: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:35: Card Command Classess CCC                     :0x5b5
14:20:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:35: DSR(driver stage register)  DSR_IMP           :0x0
14:20:35: Reserv2                                       :0x0
14:20:35: Device Size C_SIZE                            :0xedc8
14:20:35: Reserv3                                       :0x0
14:20:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:35: Reserv4                                       :0x0
14:20:35: Write Speed Factor R2W_FACTOR                 :0x2
14:20:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:35: FILE_FORMAT_GRP                               :0x0
14:20:35: COPY flag                                     :0x1
14:20:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:35: File_Format                                   :0x0
14:20:35: CRC                                           :0x0
14:20:35: ####CSD Registe Values####  

14:20:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E11E0>, <py_sfcl.CommandDataDefinition object at 0x064143C0>) , Command count = 816 ] 
14:20:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEF9F0>, <py_sfcl.CommandDataDefinition object at 0x06414DE0>) , Command count = 817 ] 
14:20:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414DB0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414AE0>, <py_sfcl.PySEnhancedCmdData object at 0x06414A50>, <None>, <py_sfcl.Command23 object at 0x06431F60>) , Command count = 818 ] 
14:20:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 19
14:20:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414FC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414300>, <py_sfcl.PySEnhancedCmdData object at 0x06414990>, <None>, <py_sfcl.Command23 object at 0x064142D0>) , Command count = 819 ] 
14:20:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BB70>, <py_sfcl.PySEnhancedCmdData object at 0x0645B390>, <None>, <py_sfcl.Command23 object at 0x0645B270>) , Command count = 820 ] 
14:20:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:35: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:37: Host Frequency set to 25000 KHz
14:20:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x064517B0>, 0x0, True) , Command count = 821 ] 
14:20:37: [GO18_globalSetVolt]### Host voltage value is set.
14:20:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x06414BD0>, 0x0, False) , Command count = 822 ] 
14:20:37: [GO18_globalSetVolt]### Host voltage value is set.
14:20:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 823 ] 
14:20:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 824 ] 
14:20:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 825 ] 
14:20:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451540>, <py_sfcl.CommandDataDefinition object at 0x06451EA0>) , Command count = 826 ] 
14:20:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064519F0>, <py_sfcl.CommandDataDefinition object at 0x064142A0>) , Command count = 827 ] 
14:20:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:38: [ SetCardRCA(0x1, 0xD555) , Command count = 828 ] 
14:20:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:38: Host Frequency set to 25000 KHz
14:20:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:38: ####CSD Registe 2.0 Values####
14:20:38: CSD_STRUCTURE                                 :0x1
14:20:38: Reserv1                                       :0x0
14:20:38: Time Access 1 TAAC                            :0xe
14:20:38: Time Access 2 NSAC*100                        :0x0
14:20:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:38: Card Command Classess CCC                     :0x5b5
14:20:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:38: DSR(driver stage register)  DSR_IMP           :0x0
14:20:38: Reserv2                                       :0x0
14:20:38: Device Size C_SIZE                            :0xedc8
14:20:38: Reserv3                                       :0x0
14:20:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:38: Reserv4                                       :0x0
14:20:38: Write Speed Factor R2W_FACTOR                 :0x2
14:20:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:38: FILE_FORMAT_GRP                               :0x0
14:20:38: COPY flag                                     :0x1
14:20:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:38: File_Format                                   :0x0
14:20:38: CRC                                           :0x0
14:20:38: ####CSD Registe Values####  

14:20:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:38: [GetSCRRegisterEntry] Passed
14:20:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:38: Data_Status_After Erases          : 0
14:20:38: CPRM Security Support             : No Security
14:20:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:38: Spec. Version                     : Version 3.0X
14:20:38: Extended Security Support         : Extended_Security_Not_Supported
14:20:38: Command Support                   : COMMAND_SUPPORT
14:20:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1A80>, <py_sfcl.CommandDataDefinition object at 0x06451900>) , Command count = 829 ] 
14:20:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414480>, <py_sfcl.CommandDataDefinition object at 0x064142A0>) , Command count = 830 ] 
14:20:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:38: [ SetBusWidth(0x4) , Command count = 831 ] 
14:20:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06414450>, <0x200/0x200, Spc, pat:0x0>) , Command count = 832 ] 
14:20:38: Protected Area Size 0x28000
14:20:38: Bus Width           2
14:20:38: Secure Mode         0
14:20:38: Speed  Class        4
14:20:38: Perf Move           0
14:20:38: Au Size             9
14:20:38: Erase Size          15
14:20:38: Erase Timeout       1
14:20:38: Erase offset        1
14:20:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 833 ] 
14:20:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:38: Host Frequency set to 100000 KHz
14:20:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:38: ####CSD Registe 2.0 Values####
14:20:38: CSD_STRUCTURE                                 :0x1
14:20:38: Reserv1                                       :0x0
14:20:38: Time Access 1 TAAC                            :0xe
14:20:38: Time Access 2 NSAC*100                        :0x0
14:20:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:38: Card Command Classess CCC                     :0x5b5
14:20:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:38: DSR(driver stage register)  DSR_IMP           :0x0
14:20:38: Reserv2                                       :0x0
14:20:38: Device Size C_SIZE                            :0xedc8
14:20:38: Reserv3                                       :0x0
14:20:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:38: Reserv4                                       :0x0
14:20:38: Write Speed Factor R2W_FACTOR                 :0x2
14:20:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:38: FILE_FORMAT_GRP                               :0x0
14:20:38: COPY flag                                     :0x1
14:20:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:38: File_Format                                   :0x0
14:20:38: CRC                                           :0x0
14:20:38: ####CSD Registe Values####  

14:20:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414CF0>, <py_sfcl.CommandDataDefinition object at 0x06451BD0>) , Command count = 834 ] 
14:20:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414D20>, <py_sfcl.CommandDataDefinition object at 0x06451BA0>) , Command count = 835 ] 
14:20:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064518A0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064515A0>, <py_sfcl.PySEnhancedCmdData object at 0x06451B10>, <None>, <py_sfcl.Command23 object at 0x0645B420>) , Command count = 836 ] 
14:20:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 18
14:20:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B570>, <py_sfcl.PySEnhancedCmdData object at 0x0645B5A0>, <None>, <py_sfcl.Command23 object at 0x0645B510>) , Command count = 837 ] 
14:20:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645B480>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BD20>, <py_sfcl.PySEnhancedCmdData object at 0x0645B6C0>, <None>, <py_sfcl.Command23 object at 0x0645B540>) , Command count = 838 ] 
14:20:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:38: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:40: Host Frequency set to 25000 KHz
14:20:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:40: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x064516C0>, 0x0, True) , Command count = 839 ] 
14:20:40: [GO18_globalSetVolt]### Host voltage value is set.
14:20:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645B4E0>, 0x0, False) , Command count = 840 ] 
14:20:40: [GO18_globalSetVolt]### Host voltage value is set.
14:20:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 841 ] 
14:20:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 842 ] 
14:20:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 843 ] 
14:20:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064519C0>, <py_sfcl.CommandDataDefinition object at 0x06451780>) , Command count = 844 ] 
14:20:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F1E0>, <py_sfcl.CommandDataDefinition object at 0x0641F090>) , Command count = 845 ] 
14:20:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:40: [ SetCardRCA(0x1, 0xD555) , Command count = 846 ] 
14:20:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:41: Host Frequency set to 25000 KHz
14:20:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:41: ####CSD Registe 2.0 Values####
14:20:41: CSD_STRUCTURE                                 :0x1
14:20:41: Reserv1                                       :0x0
14:20:41: Time Access 1 TAAC                            :0xe
14:20:41: Time Access 2 NSAC*100                        :0x0
14:20:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:41: Card Command Classess CCC                     :0x5b5
14:20:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:41: DSR(driver stage register)  DSR_IMP           :0x0
14:20:41: Reserv2                                       :0x0
14:20:41: Device Size C_SIZE                            :0xedc8
14:20:41: Reserv3                                       :0x0
14:20:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:41: Reserv4                                       :0x0
14:20:41: Write Speed Factor R2W_FACTOR                 :0x2
14:20:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:41: FILE_FORMAT_GRP                               :0x0
14:20:41: COPY flag                                     :0x1
14:20:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:41: File_Format                                   :0x0
14:20:41: CRC                                           :0x0
14:20:41: ####CSD Registe Values####  

14:20:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:41: [GetSCRRegisterEntry] Passed
14:20:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:41: Data_Status_After Erases          : 0
14:20:41: CPRM Security Support             : No Security
14:20:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:41: Spec. Version                     : Version 3.0X
14:20:41: Extended Security Support         : Extended_Security_Not_Supported
14:20:41: Command Support                   : COMMAND_SUPPORT
14:20:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F3F0>, <py_sfcl.CommandDataDefinition object at 0x0641F210>) , Command count = 847 ] 
14:20:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451570>, <py_sfcl.CommandDataDefinition object at 0x0641F0C0>) , Command count = 848 ] 
14:20:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:41: [ SetBusWidth(0x4) , Command count = 849 ] 
14:20:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BBD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 850 ] 
14:20:41: Protected Area Size 0x28000
14:20:41: Bus Width           2
14:20:41: Secure Mode         0
14:20:41: Speed  Class        4
14:20:41: Perf Move           0
14:20:41: Au Size             9
14:20:41: Erase Size          15
14:20:41: Erase Timeout       1
14:20:41: Erase offset        1
14:20:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 851 ] 
14:20:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:41: Host Frequency set to 100000 KHz
14:20:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:41: ####CSD Registe 2.0 Values####
14:20:41: CSD_STRUCTURE                                 :0x1
14:20:41: Reserv1                                       :0x0
14:20:41: Time Access 1 TAAC                            :0xe
14:20:41: Time Access 2 NSAC*100                        :0x0
14:20:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:41: Card Command Classess CCC                     :0x5b5
14:20:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:41: DSR(driver stage register)  DSR_IMP           :0x0
14:20:41: Reserv2                                       :0x0
14:20:41: Device Size C_SIZE                            :0xedc8
14:20:41: Reserv3                                       :0x0
14:20:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:41: Reserv4                                       :0x0
14:20:41: Write Speed Factor R2W_FACTOR                 :0x2
14:20:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:41: FILE_FORMAT_GRP                               :0x0
14:20:41: COPY flag                                     :0x1
14:20:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:41: File_Format                                   :0x0
14:20:41: CRC                                           :0x0
14:20:41: ####CSD Registe Values####  

14:20:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451630>, <py_sfcl.CommandDataDefinition object at 0x0641F660>) , Command count = 852 ] 
14:20:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451DE0>, <py_sfcl.CommandDataDefinition object at 0x06451600>) , Command count = 853 ] 
14:20:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F180>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F540>, <py_sfcl.PySEnhancedCmdData object at 0x0641F1B0>, <None>, <py_sfcl.Command23 object at 0x0645B300>) , Command count = 854 ] 
14:20:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 17
14:20:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B840>, <py_sfcl.PySEnhancedCmdData object at 0x0645B8A0>, <None>, <py_sfcl.Command23 object at 0x0641F4B0>) , Command count = 855 ] 
14:20:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645B720>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BCF0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B630>, <None>, <py_sfcl.Command23 object at 0x0645B750>) , Command count = 856 ] 
14:20:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:43: Host Frequency set to 25000 KHz
14:20:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB10>, 0x0, True) , Command count = 857 ] 
14:20:43: [GO18_globalSetVolt]### Host voltage value is set.
14:20:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645B7B0>, 0x0, False) , Command count = 858 ] 
14:20:43: [GO18_globalSetVolt]### Host voltage value is set.
14:20:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 859 ] 
14:20:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 860 ] 
14:20:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 861 ] 
14:20:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451E40>, <py_sfcl.CommandDataDefinition object at 0x0641FC00>) , Command count = 862 ] 
14:20:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FC90>, <py_sfcl.CommandDataDefinition object at 0x0641FC60>) , Command count = 863 ] 
14:20:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:43: [ SetCardRCA(0x1, 0xD555) , Command count = 864 ] 
14:20:43: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:43: Host Frequency set to 25000 KHz
14:20:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:43: ####CSD Registe 2.0 Values####
14:20:43: CSD_STRUCTURE                                 :0x1
14:20:43: Reserv1                                       :0x0
14:20:43: Time Access 1 TAAC                            :0xe
14:20:43: Time Access 2 NSAC*100                        :0x0
14:20:43: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:43: Card Command Classess CCC                     :0x5b5
14:20:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:43: DSR(driver stage register)  DSR_IMP           :0x0
14:20:43: Reserv2                                       :0x0
14:20:43: Device Size C_SIZE                            :0xedc8
14:20:43: Reserv3                                       :0x0
14:20:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:43: Reserv4                                       :0x0
14:20:43: Write Speed Factor R2W_FACTOR                 :0x2
14:20:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:43: FILE_FORMAT_GRP                               :0x0
14:20:43: COPY flag                                     :0x1
14:20:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:43: File_Format                                   :0x0
14:20:43: CRC                                           :0x0
14:20:43: ####CSD Registe Values####  

14:20:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:43: [GetSCRRegisterEntry] Passed
14:20:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:43: Data_Status_After Erases          : 0
14:20:43: CPRM Security Support             : No Security
14:20:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:43: Spec. Version                     : Version 3.0X
14:20:43: Extended Security Support         : Extended_Security_Not_Supported
14:20:43: Command Support                   : COMMAND_SUPPORT
14:20:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FB70>, <py_sfcl.CommandDataDefinition object at 0x0641FCF0>) , Command count = 865 ] 
14:20:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F450>, <py_sfcl.CommandDataDefinition object at 0x0641F2A0>) , Command count = 866 ] 
14:20:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:43: [ SetBusWidth(0x4) , Command count = 867 ] 
14:20:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B3F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 868 ] 
14:20:43: Protected Area Size 0x28000
14:20:43: Bus Width           2
14:20:43: Secure Mode         0
14:20:43: Speed  Class        4
14:20:43: Perf Move           0
14:20:43: Au Size             9
14:20:43: Erase Size          15
14:20:43: Erase Timeout       1
14:20:43: Erase offset        1
14:20:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 869 ] 
14:20:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:43: Host Frequency set to 100000 KHz
14:20:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:43: ####CSD Registe 2.0 Values####
14:20:43: CSD_STRUCTURE                                 :0x1
14:20:43: Reserv1                                       :0x0
14:20:43: Time Access 1 TAAC                            :0xe
14:20:43: Time Access 2 NSAC*100                        :0x0
14:20:43: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:43: Card Command Classess CCC                     :0x5b5
14:20:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:43: DSR(driver stage register)  DSR_IMP           :0x0
14:20:43: Reserv2                                       :0x0
14:20:43: Device Size C_SIZE                            :0xedc8
14:20:43: Reserv3                                       :0x0
14:20:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:43: Reserv4                                       :0x0
14:20:43: Write Speed Factor R2W_FACTOR                 :0x2
14:20:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:43: FILE_FORMAT_GRP                               :0x0
14:20:43: COPY flag                                     :0x1
14:20:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:43: File_Format                                   :0x0
14:20:43: CRC                                           :0x0
14:20:43: ####CSD Registe Values####  

14:20:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467060>, <py_sfcl.CommandDataDefinition object at 0x0641FF90>) , Command count = 870 ] 
14:20:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F030>, <py_sfcl.CommandDataDefinition object at 0x0641FAE0>) , Command count = 871 ] 
14:20:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064671E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467210>, <py_sfcl.PySEnhancedCmdData object at 0x06467240>, <None>, <py_sfcl.Command23 object at 0x0641F510>) , Command count = 872 ] 
14:20:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 16
14:20:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064670C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064670F0>, <py_sfcl.PySEnhancedCmdData object at 0x06467120>, <None>, <py_sfcl.Command23 object at 0x06467390>) , Command count = 873 ] 
14:20:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645B9F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BD50>, <py_sfcl.PySEnhancedCmdData object at 0x0645B990>, <None>, <py_sfcl.Command23 object at 0x064672A0>) , Command count = 874 ] 
14:20:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:44: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:46: Host Frequency set to 25000 KHz
14:20:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:46: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x064675A0>, 0x0, True) , Command count = 875 ] 
14:20:46: [GO18_globalSetVolt]### Host voltage value is set.
14:20:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645B180>, 0x0, False) , Command count = 876 ] 
14:20:46: [GO18_globalSetVolt]### Host voltage value is set.
14:20:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 877 ] 
14:20:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 878 ] 
14:20:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 879 ] 
14:20:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467540>, <py_sfcl.CommandDataDefinition object at 0x064674E0>) , Command count = 880 ] 
14:20:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467630>, <py_sfcl.CommandDataDefinition object at 0x0641F0F0>) , Command count = 881 ] 
14:20:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:46: [ SetCardRCA(0x1, 0xD555) , Command count = 882 ] 
14:20:46: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:46: Host Frequency set to 25000 KHz
14:20:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:46: ####CSD Registe 2.0 Values####
14:20:46: CSD_STRUCTURE                                 :0x1
14:20:46: Reserv1                                       :0x0
14:20:46: Time Access 1 TAAC                            :0xe
14:20:46: Time Access 2 NSAC*100                        :0x0
14:20:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:46: Card Command Classess CCC                     :0x5b5
14:20:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:46: DSR(driver stage register)  DSR_IMP           :0x0
14:20:46: Reserv2                                       :0x0
14:20:46: Device Size C_SIZE                            :0xedc8
14:20:46: Reserv3                                       :0x0
14:20:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:46: Reserv4                                       :0x0
14:20:46: Write Speed Factor R2W_FACTOR                 :0x2
14:20:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:46: FILE_FORMAT_GRP                               :0x0
14:20:46: COPY flag                                     :0x1
14:20:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:46: File_Format                                   :0x0
14:20:46: CRC                                           :0x0
14:20:46: ####CSD Registe Values####  

14:20:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:46: [GetSCRRegisterEntry] Passed
14:20:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:46: Data_Status_After Erases          : 0
14:20:46: CPRM Security Support             : No Security
14:20:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:46: Spec. Version                     : Version 3.0X
14:20:46: Extended Security Support         : Extended_Security_Not_Supported
14:20:46: Command Support                   : COMMAND_SUPPORT
14:20:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FDE0>, <py_sfcl.CommandDataDefinition object at 0x06467840>) , Command count = 883 ] 
14:20:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FE40>, <py_sfcl.CommandDataDefinition object at 0x06467690>) , Command count = 884 ] 
14:20:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:46: [ SetBusWidth(0x4) , Command count = 885 ] 
14:20:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BC00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 886 ] 
14:20:46: Protected Area Size 0x28000
14:20:46: Bus Width           2
14:20:46: Secure Mode         0
14:20:46: Speed  Class        4
14:20:46: Perf Move           0
14:20:46: Au Size             9
14:20:46: Erase Size          15
14:20:46: Erase Timeout       1
14:20:46: Erase offset        1
14:20:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 887 ] 
14:20:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:46: Host Frequency set to 100000 KHz
14:20:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:46: ####CSD Registe 2.0 Values####
14:20:46: CSD_STRUCTURE                                 :0x1
14:20:46: Reserv1                                       :0x0
14:20:46: Time Access 1 TAAC                            :0xe
14:20:46: Time Access 2 NSAC*100                        :0x0
14:20:46: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:46: Card Command Classess CCC                     :0x5b5
14:20:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:46: DSR(driver stage register)  DSR_IMP           :0x0
14:20:46: Reserv2                                       :0x0
14:20:46: Device Size C_SIZE                            :0xedc8
14:20:46: Reserv3                                       :0x0
14:20:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:46: Reserv4                                       :0x0
14:20:46: Write Speed Factor R2W_FACTOR                 :0x2
14:20:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:46: FILE_FORMAT_GRP                               :0x0
14:20:46: COPY flag                                     :0x1
14:20:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:46: File_Format                                   :0x0
14:20:46: CRC                                           :0x0
14:20:46: ####CSD Registe Values####  

14:20:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467A50>, <py_sfcl.CommandDataDefinition object at 0x06467870>) , Command count = 888 ] 
14:20:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FB40>, <py_sfcl.CommandDataDefinition object at 0x06467420>) , Command count = 889 ] 
14:20:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467990>, <py_sfcl.PySEnhancedCmdData object at 0x064679C0>, <None>, <py_sfcl.Command23 object at 0x064678A0>) , Command count = 890 ] 
14:20:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 15
14:20:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06467AE0>, <None>, <py_sfcl.Command23 object at 0x06467C30>) , Command count = 891 ] 
14:20:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645BA80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BAB0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B9F0>, <None>, <py_sfcl.Command23 object at 0x06467B40>) , Command count = 892 ] 
14:20:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:46: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:48: Host Frequency set to 25000 KHz
14:20:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:48: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467E40>, 0x0, True) , Command count = 893 ] 
14:20:48: [GO18_globalSetVolt]### Host voltage value is set.
14:20:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645B600>, 0x0, False) , Command count = 894 ] 
14:20:48: [GO18_globalSetVolt]### Host voltage value is set.
14:20:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 895 ] 
14:20:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 896 ] 
14:20:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 897 ] 
14:20:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467DE0>, <py_sfcl.CommandDataDefinition object at 0x06467D80>) , Command count = 898 ] 
14:20:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467ED0>, <py_sfcl.CommandDataDefinition object at 0x064673C0>) , Command count = 899 ] 
14:20:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:49: [ SetCardRCA(0x1, 0xD555) , Command count = 900 ] 
14:20:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:49: Host Frequency set to 25000 KHz
14:20:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:49: ####CSD Registe 2.0 Values####
14:20:49: CSD_STRUCTURE                                 :0x1
14:20:49: Reserv1                                       :0x0
14:20:49: Time Access 1 TAAC                            :0xe
14:20:49: Time Access 2 NSAC*100                        :0x0
14:20:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:49: Card Command Classess CCC                     :0x5b5
14:20:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:49: DSR(driver stage register)  DSR_IMP           :0x0
14:20:49: Reserv2                                       :0x0
14:20:49: Device Size C_SIZE                            :0xedc8
14:20:49: Reserv3                                       :0x0
14:20:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:49: Reserv4                                       :0x0
14:20:49: Write Speed Factor R2W_FACTOR                 :0x2
14:20:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:49: FILE_FORMAT_GRP                               :0x0
14:20:49: COPY flag                                     :0x1
14:20:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:49: File_Format                                   :0x0
14:20:49: CRC                                           :0x0
14:20:49: ####CSD Registe Values####  

14:20:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:49: [GetSCRRegisterEntry] Passed
14:20:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:49: Data_Status_After Erases          : 0
14:20:49: CPRM Security Support             : No Security
14:20:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:49: Spec. Version                     : Version 3.0X
14:20:49: Extended Security Support         : Extended_Security_Not_Supported
14:20:49: Command Support                   : COMMAND_SUPPORT
14:20:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421030>, <py_sfcl.CommandDataDefinition object at 0x06467F00>) , Command count = 901 ] 
14:20:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467810>, <py_sfcl.CommandDataDefinition object at 0x06467EA0>) , Command count = 902 ] 
14:20:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:49: [ SetBusWidth(0x4) , Command count = 903 ] 
14:20:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BBA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 904 ] 
14:20:49: Protected Area Size 0x28000
14:20:49: Bus Width           2
14:20:49: Secure Mode         0
14:20:49: Speed  Class        4
14:20:49: Perf Move           0
14:20:49: Au Size             9
14:20:49: Erase Size          15
14:20:49: Erase Timeout       1
14:20:49: Erase offset        1
14:20:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 905 ] 
14:20:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:49: Host Frequency set to 100000 KHz
14:20:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:49: ####CSD Registe 2.0 Values####
14:20:49: CSD_STRUCTURE                                 :0x1
14:20:49: Reserv1                                       :0x0
14:20:49: Time Access 1 TAAC                            :0xe
14:20:49: Time Access 2 NSAC*100                        :0x0
14:20:49: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:49: Card Command Classess CCC                     :0x5b5
14:20:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:49: DSR(driver stage register)  DSR_IMP           :0x0
14:20:49: Reserv2                                       :0x0
14:20:49: Device Size C_SIZE                            :0xedc8
14:20:49: Reserv3                                       :0x0
14:20:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:49: Reserv4                                       :0x0
14:20:49: Write Speed Factor R2W_FACTOR                 :0x2
14:20:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:49: FILE_FORMAT_GRP                               :0x0
14:20:49: COPY flag                                     :0x1
14:20:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:49: File_Format                                   :0x0
14:20:49: CRC                                           :0x0
14:20:49: ####CSD Registe Values####  

14:20:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467F90>, <py_sfcl.CommandDataDefinition object at 0x06467FC0>) , Command count = 906 ] 
14:20:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467480>, <py_sfcl.CommandDataDefinition object at 0x06467CC0>) , Command count = 907 ] 
14:20:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467C00>, <py_sfcl.PySEnhancedCmdData object at 0x06467B10>, <None>, <py_sfcl.Command23 object at 0x06467930>) , Command count = 908 ] 
14:20:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 14
14:20:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064679F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421360>, <py_sfcl.PySEnhancedCmdData object at 0x06421390>, <None>, <py_sfcl.Command23 object at 0x064676F0>) , Command count = 909 ] 
14:20:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421210>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421060>, <py_sfcl.PySEnhancedCmdData object at 0x0645BA80>, <None>, <py_sfcl.Command23 object at 0x064213C0>) , Command count = 910 ] 
14:20:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:49: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:51: Host Frequency set to 25000 KHz
14:20:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421720>, 0x0, True) , Command count = 911 ] 
14:20:51: [GO18_globalSetVolt]### Host voltage value is set.
14:20:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467D50>, 0x0, False) , Command count = 912 ] 
14:20:51: [GO18_globalSetVolt]### Host voltage value is set.
14:20:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 913 ] 
14:20:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 914 ] 
14:20:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 915 ] 
14:20:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216C0>, <py_sfcl.CommandDataDefinition object at 0x06421660>) , Command count = 916 ] 
14:20:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064217B0>, <py_sfcl.CommandDataDefinition object at 0x06467BA0>) , Command count = 917 ] 
14:20:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:51: [ SetCardRCA(0x1, 0xD555) , Command count = 918 ] 
14:20:52: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:52: Host Frequency set to 25000 KHz
14:20:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:52: ####CSD Registe 2.0 Values####
14:20:52: CSD_STRUCTURE                                 :0x1
14:20:52: Reserv1                                       :0x0
14:20:52: Time Access 1 TAAC                            :0xe
14:20:52: Time Access 2 NSAC*100                        :0x0
14:20:52: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:52: Card Command Classess CCC                     :0x5b5
14:20:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:52: DSR(driver stage register)  DSR_IMP           :0x0
14:20:52: Reserv2                                       :0x0
14:20:52: Device Size C_SIZE                            :0xedc8
14:20:52: Reserv3                                       :0x0
14:20:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:52: Reserv4                                       :0x0
14:20:52: Write Speed Factor R2W_FACTOR                 :0x2
14:20:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:52: FILE_FORMAT_GRP                               :0x0
14:20:52: COPY flag                                     :0x1
14:20:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:52: File_Format                                   :0x0
14:20:52: CRC                                           :0x0
14:20:52: ####CSD Registe Values####  

14:20:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:52: [GetSCRRegisterEntry] Passed
14:20:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:52: Data_Status_After Erases          : 0
14:20:52: CPRM Security Support             : No Security
14:20:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:52: Spec. Version                     : Version 3.0X
14:20:52: Extended Security Support         : Extended_Security_Not_Supported
14:20:52: Command Support                   : COMMAND_SUPPORT
14:20:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467C60>, <py_sfcl.CommandDataDefinition object at 0x064219C0>) , Command count = 919 ] 
14:20:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421120>, <py_sfcl.CommandDataDefinition object at 0x06421810>) , Command count = 920 ] 
14:20:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:52: [ SetBusWidth(0x4) , Command count = 921 ] 
14:20:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 922 ] 
14:20:52: Protected Area Size 0x28000
14:20:52: Bus Width           2
14:20:52: Secure Mode         0
14:20:52: Speed  Class        4
14:20:52: Perf Move           0
14:20:52: Au Size             9
14:20:52: Erase Size          15
14:20:52: Erase Timeout       1
14:20:52: Erase offset        1
14:20:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 923 ] 
14:20:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:52: Host Frequency set to 100000 KHz
14:20:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:52: ####CSD Registe 2.0 Values####
14:20:52: CSD_STRUCTURE                                 :0x1
14:20:52: Reserv1                                       :0x0
14:20:52: Time Access 1 TAAC                            :0xe
14:20:52: Time Access 2 NSAC*100                        :0x0
14:20:52: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:52: Card Command Classess CCC                     :0x5b5
14:20:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:52: DSR(driver stage register)  DSR_IMP           :0x0
14:20:52: Reserv2                                       :0x0
14:20:52: Device Size C_SIZE                            :0xedc8
14:20:52: Reserv3                                       :0x0
14:20:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:52: Reserv4                                       :0x0
14:20:52: Write Speed Factor R2W_FACTOR                 :0x2
14:20:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:52: FILE_FORMAT_GRP                               :0x0
14:20:52: COPY flag                                     :0x1
14:20:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:52: File_Format                                   :0x0
14:20:52: CRC                                           :0x0
14:20:52: ####CSD Registe Values####  

14:20:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421BD0>, <py_sfcl.CommandDataDefinition object at 0x064219F0>) , Command count = 924 ] 
14:20:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467D20>, <py_sfcl.CommandDataDefinition object at 0x064215A0>) , Command count = 925 ] 
14:20:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421B10>, <py_sfcl.PySEnhancedCmdData object at 0x06421B40>, <None>, <py_sfcl.Command23 object at 0x06421840>) , Command count = 926 ] 
14:20:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 13
14:20:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421C30>, <py_sfcl.PySEnhancedCmdData object at 0x06421C60>, <None>, <py_sfcl.Command23 object at 0x06421510>) , Command count = 927 ] 
14:20:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421180>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421870>, <py_sfcl.PySEnhancedCmdData object at 0x064218A0>, <None>, <py_sfcl.Command23 object at 0x06421300>) , Command count = 928 ] 
14:20:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:52: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:54: Host Frequency set to 25000 KHz
14:20:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:54: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421FC0>, 0x0, True) , Command count = 929 ] 
14:20:54: [GO18_globalSetVolt]### Host voltage value is set.
14:20:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421AB0>, 0x0, False) , Command count = 930 ] 
14:20:54: [GO18_globalSetVolt]### Host voltage value is set.
14:20:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 931 ] 
14:20:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 932 ] 
14:20:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 933 ] 
14:20:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A060>, <py_sfcl.CommandDataDefinition object at 0x06421F60>) , Command count = 934 ] 
14:20:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A090>, <py_sfcl.CommandDataDefinition object at 0x06421540>) , Command count = 935 ] 
14:20:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:54: [ SetCardRCA(0x1, 0xD555) , Command count = 936 ] 
14:20:54: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:54: Host Frequency set to 25000 KHz
14:20:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:54: ####CSD Registe 2.0 Values####
14:20:54: CSD_STRUCTURE                                 :0x1
14:20:54: Reserv1                                       :0x0
14:20:54: Time Access 1 TAAC                            :0xe
14:20:54: Time Access 2 NSAC*100                        :0x0
14:20:54: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:54: Card Command Classess CCC                     :0x5b5
14:20:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:54: DSR(driver stage register)  DSR_IMP           :0x0
14:20:54: Reserv2                                       :0x0
14:20:54: Device Size C_SIZE                            :0xedc8
14:20:54: Reserv3                                       :0x0
14:20:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:54: Reserv4                                       :0x0
14:20:54: Write Speed Factor R2W_FACTOR                 :0x2
14:20:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:54: FILE_FORMAT_GRP                               :0x0
14:20:54: COPY flag                                     :0x1
14:20:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:54: File_Format                                   :0x0
14:20:54: CRC                                           :0x0
14:20:54: ####CSD Registe Values####  

14:20:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:54: [GetSCRRegisterEntry] Passed
14:20:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:54: Data_Status_After Erases          : 0
14:20:54: CPRM Security Support             : No Security
14:20:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:54: Spec. Version                     : Version 3.0X
14:20:54: Extended Security Support         : Extended_Security_Not_Supported
14:20:54: Command Support                   : COMMAND_SUPPORT
14:20:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421F90>, <py_sfcl.CommandDataDefinition object at 0x0642A2A0>) , Command count = 937 ] 
14:20:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421990>, <py_sfcl.CommandDataDefinition object at 0x0642A180>) , Command count = 938 ] 
14:20:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:54: [ SetBusWidth(0x4) , Command count = 939 ] 
14:20:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06421450>, <0x200/0x200, Spc, pat:0x0>) , Command count = 940 ] 
14:20:54: Protected Area Size 0x28000
14:20:54: Bus Width           2
14:20:54: Secure Mode         0
14:20:54: Speed  Class        4
14:20:54: Perf Move           0
14:20:54: Au Size             9
14:20:54: Erase Size          15
14:20:54: Erase Timeout       1
14:20:54: Erase offset        1
14:20:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 941 ] 
14:20:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:55: Host Frequency set to 100000 KHz
14:20:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:55: ####CSD Registe 2.0 Values####
14:20:55: CSD_STRUCTURE                                 :0x1
14:20:55: Reserv1                                       :0x0
14:20:55: Time Access 1 TAAC                            :0xe
14:20:55: Time Access 2 NSAC*100                        :0x0
14:20:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:55: Card Command Classess CCC                     :0x5b5
14:20:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:55: DSR(driver stage register)  DSR_IMP           :0x0
14:20:55: Reserv2                                       :0x0
14:20:55: Device Size C_SIZE                            :0xedc8
14:20:55: Reserv3                                       :0x0
14:20:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:55: Reserv4                                       :0x0
14:20:55: Write Speed Factor R2W_FACTOR                 :0x2
14:20:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:55: FILE_FORMAT_GRP                               :0x0
14:20:55: COPY flag                                     :0x1
14:20:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:55: File_Format                                   :0x0
14:20:55: CRC                                           :0x0
14:20:55: ####CSD Registe Values####  

14:20:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421D50>, <py_sfcl.CommandDataDefinition object at 0x06421C90>) , Command count = 942 ] 
14:20:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421600>, <py_sfcl.CommandDataDefinition object at 0x06421E40>) , Command count = 943 ] 
14:20:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421D80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421BA0>, <py_sfcl.PySEnhancedCmdData object at 0x06421B70>, <None>, <py_sfcl.Command23 object at 0x064214B0>) , Command count = 944 ] 
14:20:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 12
14:20:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A510>, <py_sfcl.PySEnhancedCmdData object at 0x0642A540>, <None>, <py_sfcl.Command23 object at 0x06421CC0>) , Command count = 945 ] 
14:20:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421A20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A150>, <py_sfcl.PySEnhancedCmdData object at 0x0642A120>, <None>, <py_sfcl.Command23 object at 0x0642A3C0>) , Command count = 946 ] 
14:20:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:57: Host Frequency set to 25000 KHz
14:20:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A8A0>, 0x0, True) , Command count = 947 ] 
14:20:57: [GO18_globalSetVolt]### Host voltage value is set.
14:20:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A390>, 0x0, False) , Command count = 948 ] 
14:20:57: [GO18_globalSetVolt]### Host voltage value is set.
14:20:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 949 ] 
14:20:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:20:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 950 ] 
14:20:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:20:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:20:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:20:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:20:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:20:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 951 ] 
14:20:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:20:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:20:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421D20>, <py_sfcl.CommandDataDefinition object at 0x06421DE0>) , Command count = 952 ] 
14:20:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:20:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A930>, <py_sfcl.CommandDataDefinition object at 0x0642A900>) , Command count = 953 ] 
14:20:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:20:57: [ SetCardRCA(0x1, 0xD555) , Command count = 954 ] 
14:20:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:20:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:57: Host Frequency set to 25000 KHz
14:20:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:57: ####CSD Registe 2.0 Values####
14:20:57: CSD_STRUCTURE                                 :0x1
14:20:57: Reserv1                                       :0x0
14:20:57: Time Access 1 TAAC                            :0xe
14:20:57: Time Access 2 NSAC*100                        :0x0
14:20:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:20:57: Card Command Classess CCC                     :0x5b5
14:20:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:57: DSR(driver stage register)  DSR_IMP           :0x0
14:20:57: Reserv2                                       :0x0
14:20:57: Device Size C_SIZE                            :0xedc8
14:20:57: Reserv3                                       :0x0
14:20:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:57: Reserv4                                       :0x0
14:20:57: Write Speed Factor R2W_FACTOR                 :0x2
14:20:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:57: FILE_FORMAT_GRP                               :0x0
14:20:57: COPY flag                                     :0x1
14:20:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:57: File_Format                                   :0x0
14:20:57: CRC                                           :0x0
14:20:57: ####CSD Registe Values####  

14:20:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:20:57: [GetSCRRegisterEntry] Passed
14:20:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:20:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:20:57: Data_Status_After Erases          : 0
14:20:57: CPRM Security Support             : No Security
14:20:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:20:57: Spec. Version                     : Version 3.0X
14:20:57: Extended Security Support         : Extended_Security_Not_Supported
14:20:57: Command Support                   : COMMAND_SUPPORT
14:20:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:20:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AB40>, <py_sfcl.CommandDataDefinition object at 0x0642A960>) , Command count = 955 ] 
14:20:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:20:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A270>, <py_sfcl.CommandDataDefinition object at 0x0642A810>) , Command count = 956 ] 
14:20:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:20:57: [ SetBusWidth(0x4) , Command count = 957 ] 
14:20:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:20:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BAE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 958 ] 
14:20:57: Protected Area Size 0x28000
14:20:57: Bus Width           2
14:20:57: Secure Mode         0
14:20:57: Speed  Class        4
14:20:57: Perf Move           0
14:20:57: Au Size             9
14:20:57: Erase Size          15
14:20:57: Erase Timeout       1
14:20:57: Erase offset        1
14:20:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:20:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:20:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:20:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 959 ] 
14:20:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:20:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:20:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:20:57: Host Frequency set to 100000 KHz
14:20:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:20:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:20:57: ####CSD Registe 2.0 Values####
14:20:57: CSD_STRUCTURE                                 :0x1
14:20:57: Reserv1                                       :0x0
14:20:57: Time Access 1 TAAC                            :0xe
14:20:57: Time Access 2 NSAC*100                        :0x0
14:20:57: Data Transfer Rate TRAN_SPEED                 :0xb
14:20:57: Card Command Classess CCC                     :0x5b5
14:20:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:20:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:20:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:20:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:20:57: DSR(driver stage register)  DSR_IMP           :0x0
14:20:57: Reserv2                                       :0x0
14:20:57: Device Size C_SIZE                            :0xedc8
14:20:57: Reserv3                                       :0x0
14:20:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:20:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:20:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:20:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:20:57: Reserv4                                       :0x0
14:20:57: Write Speed Factor R2W_FACTOR                 :0x2
14:20:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:20:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:20:57: FILE_FORMAT_GRP                               :0x0
14:20:57: COPY flag                                     :0x1
14:20:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:20:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:20:57: File_Format                                   :0x0
14:20:57: CRC                                           :0x0
14:20:57: ####CSD Registe Values####  

14:20:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AD50>, <py_sfcl.CommandDataDefinition object at 0x0642AB70>) , Command count = 960 ] 
14:20:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:20:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421EA0>, <py_sfcl.CommandDataDefinition object at 0x0642A720>) , Command count = 961 ] 
14:20:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:20:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:20:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AC60>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC90>, <py_sfcl.PySEnhancedCmdData object at 0x0642ACC0>, <None>, <py_sfcl.Command23 object at 0x0642A3F0>) , Command count = 962 ] 
14:20:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 11
14:20:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:20:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642ADB0>, <py_sfcl.PySEnhancedCmdData object at 0x0642ADE0>, <None>, <py_sfcl.Command23 object at 0x0642A5A0>) , Command count = 963 ] 
14:20:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:20:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:20:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421E70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A9F0>, <py_sfcl.PySEnhancedCmdData object at 0x0642A420>, <None>, <py_sfcl.Command23 object at 0x0642A480>) , Command count = 964 ] 
14:20:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:20:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:20:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:20:59: Host Frequency set to 25000 KHz
14:20:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:20:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:20:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:20:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E030>, 0x0, True) , Command count = 965 ] 
14:20:59: [GO18_globalSetVolt]### Host voltage value is set.
14:20:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:20:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642AC30>, 0x0, False) , Command count = 966 ] 
14:20:59: [GO18_globalSetVolt]### Host voltage value is set.
14:20:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 967 ] 
14:20:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 968 ] 
14:21:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 969 ] 
14:21:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E150>, <py_sfcl.CommandDataDefinition object at 0x0642E0F0>) , Command count = 970 ] 
14:21:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E210>, <py_sfcl.CommandDataDefinition object at 0x0642A300>) , Command count = 971 ] 
14:21:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:00: [ SetCardRCA(0x1, 0xD555) , Command count = 972 ] 
14:21:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:00: Host Frequency set to 25000 KHz
14:21:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:00: ####CSD Registe 2.0 Values####
14:21:00: CSD_STRUCTURE                                 :0x1
14:21:00: Reserv1                                       :0x0
14:21:00: Time Access 1 TAAC                            :0xe
14:21:00: Time Access 2 NSAC*100                        :0x0
14:21:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:00: Card Command Classess CCC                     :0x5b5
14:21:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:00: DSR(driver stage register)  DSR_IMP           :0x0
14:21:00: Reserv2                                       :0x0
14:21:00: Device Size C_SIZE                            :0xedc8
14:21:00: Reserv3                                       :0x0
14:21:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:00: Reserv4                                       :0x0
14:21:00: Write Speed Factor R2W_FACTOR                 :0x2
14:21:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:00: FILE_FORMAT_GRP                               :0x0
14:21:00: COPY flag                                     :0x1
14:21:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:00: File_Format                                   :0x0
14:21:00: CRC                                           :0x0
14:21:00: ####CSD Registe Values####  

14:21:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:00: [GetSCRRegisterEntry] Passed
14:21:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:00: Data_Status_After Erases          : 0
14:21:00: CPRM Security Support             : No Security
14:21:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:00: Spec. Version                     : Version 3.0X
14:21:00: Extended Security Support         : Extended_Security_Not_Supported
14:21:00: Command Support                   : COMMAND_SUPPORT
14:21:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E420>, <py_sfcl.CommandDataDefinition object at 0x0642E1B0>) , Command count = 973 ] 
14:21:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AB10>, <py_sfcl.CommandDataDefinition object at 0x0642AC00>) , Command count = 974 ] 
14:21:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:00: [ SetBusWidth(0x4) , Command count = 975 ] 
14:21:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642A6C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 976 ] 
14:21:00: Protected Area Size 0x28000
14:21:00: Bus Width           2
14:21:00: Secure Mode         0
14:21:00: Speed  Class        4
14:21:00: Perf Move           0
14:21:00: Au Size             9
14:21:00: Erase Size          15
14:21:00: Erase Timeout       1
14:21:00: Erase offset        1
14:21:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 977 ] 
14:21:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:00: Host Frequency set to 100000 KHz
14:21:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:00: ####CSD Registe 2.0 Values####
14:21:00: CSD_STRUCTURE                                 :0x1
14:21:00: Reserv1                                       :0x0
14:21:00: Time Access 1 TAAC                            :0xe
14:21:00: Time Access 2 NSAC*100                        :0x0
14:21:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:00: Card Command Classess CCC                     :0x5b5
14:21:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:00: DSR(driver stage register)  DSR_IMP           :0x0
14:21:00: Reserv2                                       :0x0
14:21:00: Device Size C_SIZE                            :0xedc8
14:21:00: Reserv3                                       :0x0
14:21:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:00: Reserv4                                       :0x0
14:21:00: Write Speed Factor R2W_FACTOR                 :0x2
14:21:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:00: FILE_FORMAT_GRP                               :0x0
14:21:00: COPY flag                                     :0x1
14:21:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:00: File_Format                                   :0x0
14:21:00: CRC                                           :0x0
14:21:00: ####CSD Registe Values####  

14:21:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AED0>, <py_sfcl.CommandDataDefinition object at 0x0642AE10>) , Command count = 978 ] 
14:21:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A780>, <py_sfcl.CommandDataDefinition object at 0x0642AF60>) , Command count = 979 ] 
14:21:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AF00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AD20>, <py_sfcl.PySEnhancedCmdData object at 0x0642ACF0>, <None>, <py_sfcl.Command23 object at 0x0642AF30>) , Command count = 980 ] 
14:21:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 10
14:21:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E690>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6C0>, <None>, <py_sfcl.Command23 object at 0x0642AE40>) , Command count = 981 ] 
14:21:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642ABA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E2D0>, <py_sfcl.PySEnhancedCmdData object at 0x0642E2A0>, <None>, <py_sfcl.Command23 object at 0x0642E540>) , Command count = 982 ] 
14:21:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:02: Host Frequency set to 25000 KHz
14:21:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:02: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EA20>, 0x0, True) , Command count = 983 ] 
14:21:02: [GO18_globalSetVolt]### Host voltage value is set.
14:21:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E0C0>, 0x0, False) , Command count = 984 ] 
14:21:02: [GO18_globalSetVolt]### Host voltage value is set.
14:21:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 985 ] 
14:21:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 986 ] 
14:21:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 987 ] 
14:21:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AE70>, <py_sfcl.CommandDataDefinition object at 0x0642AEA0>) , Command count = 988 ] 
14:21:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EAB0>, <py_sfcl.CommandDataDefinition object at 0x0642E4B0>) , Command count = 989 ] 
14:21:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:02: [ SetCardRCA(0x1, 0xD555) , Command count = 990 ] 
14:21:03: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:03: Host Frequency set to 25000 KHz
14:21:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:03: ####CSD Registe 2.0 Values####
14:21:03: CSD_STRUCTURE                                 :0x1
14:21:03: Reserv1                                       :0x0
14:21:03: Time Access 1 TAAC                            :0xe
14:21:03: Time Access 2 NSAC*100                        :0x0
14:21:03: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:03: Card Command Classess CCC                     :0x5b5
14:21:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:03: DSR(driver stage register)  DSR_IMP           :0x0
14:21:03: Reserv2                                       :0x0
14:21:03: Device Size C_SIZE                            :0xedc8
14:21:03: Reserv3                                       :0x0
14:21:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:03: Reserv4                                       :0x0
14:21:03: Write Speed Factor R2W_FACTOR                 :0x2
14:21:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:03: FILE_FORMAT_GRP                               :0x0
14:21:03: COPY flag                                     :0x1
14:21:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:03: File_Format                                   :0x0
14:21:03: CRC                                           :0x0
14:21:03: ####CSD Registe Values####  

14:21:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:03: [GetSCRRegisterEntry] Passed
14:21:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:03: Data_Status_After Erases          : 0
14:21:03: CPRM Security Support             : No Security
14:21:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:03: Spec. Version                     : Version 3.0X
14:21:03: Extended Security Support         : Extended_Security_Not_Supported
14:21:03: Command Support                   : COMMAND_SUPPORT
14:21:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ECC0>, <py_sfcl.CommandDataDefinition object at 0x0642EAE0>) , Command count = 991 ] 
14:21:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E3F0>, <py_sfcl.CommandDataDefinition object at 0x0642E960>) , Command count = 992 ] 
14:21:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:03: [ SetBusWidth(0x4) , Command count = 993 ] 
14:21:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642EA80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 994 ] 
14:21:03: Protected Area Size 0x28000
14:21:03: Bus Width           2
14:21:03: Secure Mode         0
14:21:03: Speed  Class        4
14:21:03: Perf Move           0
14:21:03: Au Size             9
14:21:03: Erase Size          15
14:21:03: Erase Timeout       1
14:21:03: Erase offset        1
14:21:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 995 ] 
14:21:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:03: Host Frequency set to 100000 KHz
14:21:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:03: ####CSD Registe 2.0 Values####
14:21:03: CSD_STRUCTURE                                 :0x1
14:21:03: Reserv1                                       :0x0
14:21:03: Time Access 1 TAAC                            :0xe
14:21:03: Time Access 2 NSAC*100                        :0x0
14:21:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:03: Card Command Classess CCC                     :0x5b5
14:21:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:03: DSR(driver stage register)  DSR_IMP           :0x0
14:21:03: Reserv2                                       :0x0
14:21:03: Device Size C_SIZE                            :0xedc8
14:21:03: Reserv3                                       :0x0
14:21:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:03: Reserv4                                       :0x0
14:21:03: Write Speed Factor R2W_FACTOR                 :0x2
14:21:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:03: FILE_FORMAT_GRP                               :0x0
14:21:03: COPY flag                                     :0x1
14:21:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:03: File_Format                                   :0x0
14:21:03: CRC                                           :0x0
14:21:03: ####CSD Registe Values####  

14:21:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EED0>, <py_sfcl.CommandDataDefinition object at 0x0642ECF0>) , Command count = 996 ] 
14:21:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E090>, <py_sfcl.CommandDataDefinition object at 0x0642E8A0>) , Command count = 997 ] 
14:21:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642EDE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EE10>, <py_sfcl.PySEnhancedCmdData object at 0x0642EE40>, <None>, <py_sfcl.Command23 object at 0x0642E570>) , Command count = 998 ] 
14:21:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 9
14:21:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064310F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642EF30>, <None>, <py_sfcl.Command23 object at 0x0642E720>) , Command count = 999 ] 
14:21:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E060>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EB70>, <py_sfcl.PySEnhancedCmdData object at 0x0642E5A0>, <None>, <py_sfcl.Command23 object at 0x0642E600>) , Command count = 1000 ] 
14:21:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:05: Host Frequency set to 25000 KHz
14:21:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431300>, 0x0, True) , Command count = 1001 ] 
14:21:05: [GO18_globalSetVolt]### Host voltage value is set.
14:21:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EDB0>, 0x0, False) , Command count = 1002 ] 
14:21:05: [GO18_globalSetVolt]### Host voltage value is set.
14:21:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1003 ] 
14:21:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1004 ] 
14:21:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1005 ] 
14:21:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312A0>, <py_sfcl.CommandDataDefinition object at 0x06431270>) , Command count = 1006 ] 
14:21:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C40B70>, <py_sfcl.CommandDataDefinition object at 0x0642E840>) , Command count = 1007 ] 
14:21:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:05: [ SetCardRCA(0x1, 0xD555) , Command count = 1008 ] 
14:21:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:05: Host Frequency set to 25000 KHz
14:21:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:05: ####CSD Registe 2.0 Values####
14:21:05: CSD_STRUCTURE                                 :0x1
14:21:05: Reserv1                                       :0x0
14:21:05: Time Access 1 TAAC                            :0xe
14:21:05: Time Access 2 NSAC*100                        :0x0
14:21:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:05: Card Command Classess CCC                     :0x5b5
14:21:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:05: DSR(driver stage register)  DSR_IMP           :0x0
14:21:05: Reserv2                                       :0x0
14:21:05: Device Size C_SIZE                            :0xedc8
14:21:05: Reserv3                                       :0x0
14:21:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:05: Reserv4                                       :0x0
14:21:05: Write Speed Factor R2W_FACTOR                 :0x2
14:21:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:05: FILE_FORMAT_GRP                               :0x0
14:21:05: COPY flag                                     :0x1
14:21:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:05: File_Format                                   :0x0
14:21:05: CRC                                           :0x0
14:21:05: ####CSD Registe Values####  

14:21:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:05: [GetSCRRegisterEntry] Passed
14:21:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:05: Data_Status_After Erases          : 0
14:21:05: CPRM Security Support             : No Security
14:21:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:05: Spec. Version                     : Version 3.0X
14:21:05: Extended Security Support         : Extended_Security_Not_Supported
14:21:05: Command Support                   : COMMAND_SUPPORT
14:21:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ED80>, <py_sfcl.CommandDataDefinition object at 0x06431570>) , Command count = 1009 ] 
14:21:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EC90>, <py_sfcl.CommandDataDefinition object at 0x064313C0>) , Command count = 1010 ] 
14:21:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:05: [ SetBusWidth(0x4) , Command count = 1011 ] 
14:21:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642AAE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1012 ] 
14:21:05: Protected Area Size 0x28000
14:21:05: Bus Width           2
14:21:05: Secure Mode         0
14:21:05: Speed  Class        4
14:21:05: Perf Move           0
14:21:05: Au Size             9
14:21:05: Erase Size          15
14:21:05: Erase Timeout       1
14:21:05: Erase offset        1
14:21:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1013 ] 
14:21:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:06: Host Frequency set to 100000 KHz
14:21:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:06: ####CSD Registe 2.0 Values####
14:21:06: CSD_STRUCTURE                                 :0x1
14:21:06: Reserv1                                       :0x0
14:21:06: Time Access 1 TAAC                            :0xe
14:21:06: Time Access 2 NSAC*100                        :0x0
14:21:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:06: Card Command Classess CCC                     :0x5b5
14:21:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:06: DSR(driver stage register)  DSR_IMP           :0x0
14:21:06: Reserv2                                       :0x0
14:21:06: Device Size C_SIZE                            :0xedc8
14:21:06: Reserv3                                       :0x0
14:21:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:06: Reserv4                                       :0x0
14:21:06: Write Speed Factor R2W_FACTOR                 :0x2
14:21:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:06: FILE_FORMAT_GRP                               :0x0
14:21:06: COPY flag                                     :0x1
14:21:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:06: File_Format                                   :0x0
14:21:06: CRC                                           :0x0
14:21:06: ####CSD Registe Values####  

14:21:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7BD0>, <py_sfcl.CommandDataDefinition object at 0x05D7E1E0>) , Command count = 1014 ] 
14:21:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E900>, <py_sfcl.CommandDataDefinition object at 0x0642E5D0>) , Command count = 1015 ] 
14:21:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642EFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EEA0>, <py_sfcl.PySEnhancedCmdData object at 0x06431510>, <None>, <py_sfcl.Command23 object at 0x0642EE70>) , Command count = 1016 ] 
14:21:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 8
14:21:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7C30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF60>, <py_sfcl.PySEnhancedCmdData object at 0x06431630>, <None>, <py_sfcl.Command23 object at 0x06431540>) , Command count = 1017 ] 
14:21:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642ED20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064313F0>, <py_sfcl.PySEnhancedCmdData object at 0x064314E0>, <None>, <py_sfcl.Command23 object at 0x06431690>) , Command count = 1018 ] 
14:21:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:08: Host Frequency set to 25000 KHz
14:21:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:08: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAD180>, 0x0, True) , Command count = 1019 ] 
14:21:08: [GO18_globalSetVolt]### Host voltage value is set.
14:21:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E4E0>, 0x0, False) , Command count = 1020 ] 
14:21:08: [GO18_globalSetVolt]### Host voltage value is set.
14:21:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1021 ] 
14:21:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1022 ] 
14:21:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:08: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1023 ] 
14:21:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F90>, <py_sfcl.CommandDataDefinition object at 0x05DA7960>) , Command count = 1024 ] 
14:21:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADD50>, <py_sfcl.CommandDataDefinition object at 0x06431330>) , Command count = 1025 ] 
14:21:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:08: [ SetCardRCA(0x1, 0xD555) , Command count = 1026 ] 
14:21:08: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:08: Host Frequency set to 25000 KHz
14:21:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:08: ####CSD Registe 2.0 Values####
14:21:08: CSD_STRUCTURE                                 :0x1
14:21:08: Reserv1                                       :0x0
14:21:08: Time Access 1 TAAC                            :0xe
14:21:08: Time Access 2 NSAC*100                        :0x0
14:21:08: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:08: Card Command Classess CCC                     :0x5b5
14:21:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:08: DSR(driver stage register)  DSR_IMP           :0x0
14:21:08: Reserv2                                       :0x0
14:21:08: Device Size C_SIZE                            :0xedc8
14:21:08: Reserv3                                       :0x0
14:21:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:08: Reserv4                                       :0x0
14:21:08: Write Speed Factor R2W_FACTOR                 :0x2
14:21:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:08: FILE_FORMAT_GRP                               :0x0
14:21:08: COPY flag                                     :0x1
14:21:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:08: File_Format                                   :0x0
14:21:08: CRC                                           :0x0
14:21:08: ####CSD Registe Values####  

14:21:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:08: [GetSCRRegisterEntry] Passed
14:21:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:08: Data_Status_After Erases          : 0
14:21:08: CPRM Security Support             : No Security
14:21:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:08: Spec. Version                     : Version 3.0X
14:21:08: Extended Security Support         : Extended_Security_Not_Supported
14:21:08: Command Support                   : COMMAND_SUPPORT
14:21:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8A80>, <py_sfcl.CommandDataDefinition object at 0x06431A80>) , Command count = 1027 ] 
14:21:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01D66840>, <py_sfcl.CommandDataDefinition object at 0x06431030>) , Command count = 1028 ] 
14:21:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:08: [ SetBusWidth(0x4) , Command count = 1029 ] 
14:21:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642E930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1030 ] 
14:21:08: Protected Area Size 0x28000
14:21:08: Bus Width           2
14:21:08: Secure Mode         0
14:21:08: Speed  Class        4
14:21:08: Perf Move           0
14:21:08: Au Size             9
14:21:08: Erase Size          15
14:21:08: Erase Timeout       1
14:21:08: Erase offset        1
14:21:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1031 ] 
14:21:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:08: Host Frequency set to 100000 KHz
14:21:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:08: ####CSD Registe 2.0 Values####
14:21:08: CSD_STRUCTURE                                 :0x1
14:21:08: Reserv1                                       :0x0
14:21:08: Time Access 1 TAAC                            :0xe
14:21:08: Time Access 2 NSAC*100                        :0x0
14:21:08: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:08: Card Command Classess CCC                     :0x5b5
14:21:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:08: DSR(driver stage register)  DSR_IMP           :0x0
14:21:08: Reserv2                                       :0x0
14:21:08: Device Size C_SIZE                            :0xedc8
14:21:08: Reserv3                                       :0x0
14:21:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:08: Reserv4                                       :0x0
14:21:08: Write Speed Factor R2W_FACTOR                 :0x2
14:21:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:08: FILE_FORMAT_GRP                               :0x0
14:21:08: COPY flag                                     :0x1
14:21:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:08: File_Format                                   :0x0
14:21:08: CRC                                           :0x0
14:21:08: ####CSD Registe Values####  

14:21:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D91180>, <py_sfcl.CommandDataDefinition object at 0x05D91210>) , Command count = 1032 ] 
14:21:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E870>, <py_sfcl.CommandDataDefinition object at 0x064311E0>) , Command count = 1033 ] 
14:21:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF7E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E6F0>, <py_sfcl.PySEnhancedCmdData object at 0x06431A50>, <None>, <py_sfcl.Command23 object at 0x06431180>) , Command count = 1034 ] 
14:21:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 7
14:21:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF810>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431B40>, <py_sfcl.PySEnhancedCmdData object at 0x06431B70>, <None>, <py_sfcl.Command23 object at 0x06431AB0>) , Command count = 1035 ] 
14:21:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064311B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064318D0>, <py_sfcl.PySEnhancedCmdData object at 0x064310C0>, <None>, <py_sfcl.Command23 object at 0x06431600>) , Command count = 1036 ] 
14:21:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:10: Host Frequency set to 25000 KHz
14:21:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF960>, 0x0, True) , Command count = 1037 ] 
14:21:10: [GO18_globalSetVolt]### Host voltage value is set.
14:21:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DA7FC0>, 0x0, False) , Command count = 1038 ] 
14:21:10: [GO18_globalSetVolt]### Host voltage value is set.
14:21:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1039 ] 
14:21:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1040 ] 
14:21:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1041 ] 
14:21:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB10>, <py_sfcl.CommandDataDefinition object at 0x05DA7C60>) , Command count = 1042 ] 
14:21:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFBA0>, <py_sfcl.CommandDataDefinition object at 0x06431990>) , Command count = 1043 ] 
14:21:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:11: [ SetCardRCA(0x1, 0xD555) , Command count = 1044 ] 
14:21:11: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:11: Host Frequency set to 25000 KHz
14:21:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:11: ####CSD Registe 2.0 Values####
14:21:11: CSD_STRUCTURE                                 :0x1
14:21:11: Reserv1                                       :0x0
14:21:11: Time Access 1 TAAC                            :0xe
14:21:11: Time Access 2 NSAC*100                        :0x0
14:21:11: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:11: Card Command Classess CCC                     :0x5b5
14:21:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:11: DSR(driver stage register)  DSR_IMP           :0x0
14:21:11: Reserv2                                       :0x0
14:21:11: Device Size C_SIZE                            :0xedc8
14:21:11: Reserv3                                       :0x0
14:21:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:11: Reserv4                                       :0x0
14:21:11: Write Speed Factor R2W_FACTOR                 :0x2
14:21:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:11: FILE_FORMAT_GRP                               :0x0
14:21:11: COPY flag                                     :0x1
14:21:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:11: File_Format                                   :0x0
14:21:11: CRC                                           :0x0
14:21:11: ####CSD Registe Values####  

14:21:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:11: [GetSCRRegisterEntry] Passed
14:21:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:11: Data_Status_After Erases          : 0
14:21:11: CPRM Security Support             : No Security
14:21:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:11: Spec. Version                     : Version 3.0X
14:21:11: Extended Security Support         : Extended_Security_Not_Supported
14:21:11: Command Support                   : COMMAND_SUPPORT
14:21:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB40>, <py_sfcl.CommandDataDefinition object at 0x06431FC0>) , Command count = 1045 ] 
14:21:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DAD3F0>, <py_sfcl.CommandDataDefinition object at 0x06431480>) , Command count = 1046 ] 
14:21:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:11: [ SetBusWidth(0x4) , Command count = 1047 ] 
14:21:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06431DB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1048 ] 
14:21:11: Protected Area Size 0x28000
14:21:11: Bus Width           2
14:21:11: Secure Mode         0
14:21:11: Speed  Class        4
14:21:11: Perf Move           0
14:21:11: Au Size             9
14:21:11: Erase Size          15
14:21:11: Erase Timeout       1
14:21:11: Erase offset        1
14:21:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1049 ] 
14:21:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:11: Host Frequency set to 100000 KHz
14:21:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:11: ####CSD Registe 2.0 Values####
14:21:11: CSD_STRUCTURE                                 :0x1
14:21:11: Reserv1                                       :0x0
14:21:11: Time Access 1 TAAC                            :0xe
14:21:11: Time Access 2 NSAC*100                        :0x0
14:21:11: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:11: Card Command Classess CCC                     :0x5b5
14:21:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:11: DSR(driver stage register)  DSR_IMP           :0x0
14:21:11: Reserv2                                       :0x0
14:21:11: Device Size C_SIZE                            :0xedc8
14:21:11: Reserv3                                       :0x0
14:21:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:11: Reserv4                                       :0x0
14:21:11: Write Speed Factor R2W_FACTOR                 :0x2
14:21:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:11: FILE_FORMAT_GRP                               :0x0
14:21:11: COPY flag                                     :0x1
14:21:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:11: File_Format                                   :0x0
14:21:11: CRC                                           :0x0
14:21:11: ####CSD Registe Values####  

14:21:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E14B0>, <py_sfcl.CommandDataDefinition object at 0x05DEFE10>) , Command count = 1050 ] 
14:21:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01D7FDB0>, <py_sfcl.CommandDataDefinition object at 0x06431CF0>) , Command count = 1051 ] 
14:21:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F90>, <py_sfcl.PySEnhancedCmdData object at 0x06431C90>, <None>, <py_sfcl.Command23 object at 0x06431CC0>) , Command count = 1052 ] 
14:21:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 6
14:21:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431E10>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F00>, <py_sfcl.PySEnhancedCmdData object at 0x06431BD0>, <None>, <py_sfcl.Command23 object at 0x06431C00>) , Command count = 1053 ] 
14:21:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064319C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431780>, <py_sfcl.PySEnhancedCmdData object at 0x06431AE0>, <None>, <py_sfcl.Command23 object at 0x06431B10>) , Command count = 1054 ] 
14:21:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:13: Host Frequency set to 25000 KHz
14:21:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x064140F0>, 0x0, True) , Command count = 1055 ] 
14:21:13: [GO18_globalSetVolt]### Host voltage value is set.
14:21:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEFAE0>, 0x0, False) , Command count = 1056 ] 
14:21:13: [GO18_globalSetVolt]### Host voltage value is set.
14:21:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1057 ] 
14:21:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1058 ] 
14:21:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1059 ] 
14:21:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414690>, <py_sfcl.CommandDataDefinition object at 0x06414B40>) , Command count = 1060 ] 
14:21:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431F30>, <py_sfcl.CommandDataDefinition object at 0x06431EA0>) , Command count = 1061 ] 
14:21:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:13: [ SetCardRCA(0x1, 0xD555) , Command count = 1062 ] 
14:21:14: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:14: Host Frequency set to 25000 KHz
14:21:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:14: ####CSD Registe 2.0 Values####
14:21:14: CSD_STRUCTURE                                 :0x1
14:21:14: Reserv1                                       :0x0
14:21:14: Time Access 1 TAAC                            :0xe
14:21:14: Time Access 2 NSAC*100                        :0x0
14:21:14: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:14: Card Command Classess CCC                     :0x5b5
14:21:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:14: DSR(driver stage register)  DSR_IMP           :0x0
14:21:14: Reserv2                                       :0x0
14:21:14: Device Size C_SIZE                            :0xedc8
14:21:14: Reserv3                                       :0x0
14:21:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:14: Reserv4                                       :0x0
14:21:14: Write Speed Factor R2W_FACTOR                 :0x2
14:21:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:14: FILE_FORMAT_GRP                               :0x0
14:21:14: COPY flag                                     :0x1
14:21:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:14: File_Format                                   :0x0
14:21:14: CRC                                           :0x0
14:21:14: ####CSD Registe Values####  

14:21:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:14: [GetSCRRegisterEntry] Passed
14:21:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:14: Data_Status_After Erases          : 0
14:21:14: CPRM Security Support             : No Security
14:21:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:14: Spec. Version                     : Version 3.0X
14:21:14: Extended Security Support         : Extended_Security_Not_Supported
14:21:14: Command Support                   : COMMAND_SUPPORT
14:21:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414360>, <py_sfcl.CommandDataDefinition object at 0x06414900>) , Command count = 1063 ] 
14:21:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1330>, <py_sfcl.CommandDataDefinition object at 0x064148A0>) , Command count = 1064 ] 
14:21:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:14: [ SetBusWidth(0x4) , Command count = 1065 ] 
14:21:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1066 ] 
14:21:14: Protected Area Size 0x28000
14:21:14: Bus Width           2
14:21:14: Secure Mode         0
14:21:14: Speed  Class        4
14:21:14: Perf Move           0
14:21:14: Au Size             9
14:21:14: Erase Size          15
14:21:14: Erase Timeout       1
14:21:14: Erase offset        1
14:21:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1067 ] 
14:21:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:14: Host Frequency set to 100000 KHz
14:21:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:14: ####CSD Registe 2.0 Values####
14:21:14: CSD_STRUCTURE                                 :0x1
14:21:14: Reserv1                                       :0x0
14:21:14: Time Access 1 TAAC                            :0xe
14:21:14: Time Access 2 NSAC*100                        :0x0
14:21:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:14: Card Command Classess CCC                     :0x5b5
14:21:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:14: DSR(driver stage register)  DSR_IMP           :0x0
14:21:14: Reserv2                                       :0x0
14:21:14: Device Size C_SIZE                            :0xedc8
14:21:14: Reserv3                                       :0x0
14:21:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:14: Reserv4                                       :0x0
14:21:14: Write Speed Factor R2W_FACTOR                 :0x2
14:21:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:14: FILE_FORMAT_GRP                               :0x0
14:21:14: COPY flag                                     :0x1
14:21:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:14: File_Format                                   :0x0
14:21:14: CRC                                           :0x0
14:21:14: ####CSD Registe Values####  

14:21:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E11E0>, <py_sfcl.CommandDataDefinition object at 0x062E1060>) , Command count = 1068 ] 
14:21:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFA80>, <py_sfcl.CommandDataDefinition object at 0x06431D50>) , Command count = 1069 ] 
14:21:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431F60>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414DB0>, <py_sfcl.PySEnhancedCmdData object at 0x06414AE0>, <None>, <py_sfcl.Command23 object at 0x064316C0>) , Command count = 1070 ] 
14:21:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 5
14:21:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414FC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414300>, <py_sfcl.PySEnhancedCmdData object at 0x06414990>, <None>, <py_sfcl.Command23 object at 0x06414A50>) , Command count = 1071 ] 
14:21:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEFAB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414870>, <py_sfcl.PySEnhancedCmdData object at 0x06414600>, <None>, <py_sfcl.Command23 object at 0x064142D0>) , Command count = 1072 ] 
14:21:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:14: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:16: Host Frequency set to 25000 KHz
14:21:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:16: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x064517B0>, 0x0, True) , Command count = 1073 ] 
14:21:16: [GO18_globalSetVolt]### Host voltage value is set.
14:21:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645B210>, 0x0, False) , Command count = 1074 ] 
14:21:16: [GO18_globalSetVolt]### Host voltage value is set.
14:21:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1075 ] 
14:21:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1076 ] 
14:21:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1077 ] 
14:21:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451540>, <py_sfcl.CommandDataDefinition object at 0x06451EA0>) , Command count = 1078 ] 
14:21:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451870>, <py_sfcl.CommandDataDefinition object at 0x06414060>) , Command count = 1079 ] 
14:21:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1080 ] 
14:21:16: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:16: Host Frequency set to 25000 KHz
14:21:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:16: ####CSD Registe 2.0 Values####
14:21:16: CSD_STRUCTURE                                 :0x1
14:21:16: Reserv1                                       :0x0
14:21:16: Time Access 1 TAAC                            :0xe
14:21:16: Time Access 2 NSAC*100                        :0x0
14:21:16: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:16: Card Command Classess CCC                     :0x5b5
14:21:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:16: DSR(driver stage register)  DSR_IMP           :0x0
14:21:16: Reserv2                                       :0x0
14:21:16: Device Size C_SIZE                            :0xedc8
14:21:16: Reserv3                                       :0x0
14:21:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:16: Reserv4                                       :0x0
14:21:16: Write Speed Factor R2W_FACTOR                 :0x2
14:21:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:16: FILE_FORMAT_GRP                               :0x0
14:21:16: COPY flag                                     :0x1
14:21:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:16: File_Format                                   :0x0
14:21:16: CRC                                           :0x0
14:21:16: ####CSD Registe Values####  

14:21:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:16: [GetSCRRegisterEntry] Passed
14:21:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:16: Data_Status_After Erases          : 0
14:21:16: CPRM Security Support             : No Security
14:21:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:16: Spec. Version                     : Version 3.0X
14:21:16: Extended Security Support         : Extended_Security_Not_Supported
14:21:16: Command Support                   : COMMAND_SUPPORT
14:21:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1A80>, <py_sfcl.CommandDataDefinition object at 0x064149F0>) , Command count = 1081 ] 
14:21:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1300>, <py_sfcl.CommandDataDefinition object at 0x06451840>) , Command count = 1082 ] 
14:21:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:16: [ SetBusWidth(0x4) , Command count = 1083 ] 
14:21:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06414810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1084 ] 
14:21:16: Protected Area Size 0x28000
14:21:16: Bus Width           2
14:21:16: Secure Mode         0
14:21:16: Speed  Class        4
14:21:16: Perf Move           0
14:21:16: Au Size             9
14:21:16: Erase Size          15
14:21:16: Erase Timeout       1
14:21:16: Erase offset        1
14:21:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1085 ] 
14:21:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:17: Host Frequency set to 100000 KHz
14:21:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:17: ####CSD Registe 2.0 Values####
14:21:17: CSD_STRUCTURE                                 :0x1
14:21:17: Reserv1                                       :0x0
14:21:17: Time Access 1 TAAC                            :0xe
14:21:17: Time Access 2 NSAC*100                        :0x0
14:21:17: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:17: Card Command Classess CCC                     :0x5b5
14:21:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:17: DSR(driver stage register)  DSR_IMP           :0x0
14:21:17: Reserv2                                       :0x0
14:21:17: Device Size C_SIZE                            :0xedc8
14:21:17: Reserv3                                       :0x0
14:21:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:17: Reserv4                                       :0x0
14:21:17: Write Speed Factor R2W_FACTOR                 :0x2
14:21:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:17: FILE_FORMAT_GRP                               :0x0
14:21:17: COPY flag                                     :0x1
14:21:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:17: File_Format                                   :0x0
14:21:17: CRC                                           :0x0
14:21:17: ####CSD Registe Values####  

14:21:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414CF0>, <py_sfcl.CommandDataDefinition object at 0x064142A0>) , Command count = 1086 ] 
14:21:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414750>, <py_sfcl.CommandDataDefinition object at 0x06451390>) , Command count = 1087 ] 
14:21:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064518A0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064515A0>, <py_sfcl.PySEnhancedCmdData object at 0x06451B10>, <None>, <py_sfcl.Command23 object at 0x0645BD80>) , Command count = 1088 ] 
14:21:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 4
14:21:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B570>, <py_sfcl.PySEnhancedCmdData object at 0x0645B5A0>, <None>, <py_sfcl.Command23 object at 0x0645B420>) , Command count = 1089 ] 
14:21:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414BD0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B2D0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BB70>, <None>, <py_sfcl.Command23 object at 0x0645B510>) , Command count = 1090 ] 
14:21:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:17: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:19: Host Frequency set to 25000 KHz
14:21:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:19: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x064516C0>, 0x0, True) , Command count = 1091 ] 
14:21:19: [GO18_globalSetVolt]### Host voltage value is set.
14:21:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451690>, 0x0, False) , Command count = 1092 ] 
14:21:19: [GO18_globalSetVolt]### Host voltage value is set.
14:21:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1093 ] 
14:21:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1094 ] 
14:21:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1095 ] 
14:21:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F120>, <py_sfcl.CommandDataDefinition object at 0x064519C0>) , Command count = 1096 ] 
14:21:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F150>, <py_sfcl.CommandDataDefinition object at 0x06451BA0>) , Command count = 1097 ] 
14:21:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:19: [ SetCardRCA(0x1, 0xD555) , Command count = 1098 ] 
14:21:19: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:19: Host Frequency set to 25000 KHz
14:21:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:19: ####CSD Registe 2.0 Values####
14:21:19: CSD_STRUCTURE                                 :0x1
14:21:19: Reserv1                                       :0x0
14:21:19: Time Access 1 TAAC                            :0xe
14:21:19: Time Access 2 NSAC*100                        :0x0
14:21:19: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:19: Card Command Classess CCC                     :0x5b5
14:21:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:19: DSR(driver stage register)  DSR_IMP           :0x0
14:21:19: Reserv2                                       :0x0
14:21:19: Device Size C_SIZE                            :0xedc8
14:21:19: Reserv3                                       :0x0
14:21:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:19: Reserv4                                       :0x0
14:21:19: Write Speed Factor R2W_FACTOR                 :0x2
14:21:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:19: FILE_FORMAT_GRP                               :0x0
14:21:19: COPY flag                                     :0x1
14:21:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:19: File_Format                                   :0x0
14:21:19: CRC                                           :0x0
14:21:19: ####CSD Registe Values####  

14:21:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:19: [GetSCRRegisterEntry] Passed
14:21:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:19: Data_Status_After Erases          : 0
14:21:19: CPRM Security Support             : No Security
14:21:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:19: Spec. Version                     : Version 3.0X
14:21:19: Extended Security Support         : Extended_Security_Not_Supported
14:21:19: Command Support                   : COMMAND_SUPPORT
14:21:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F3F0>, <py_sfcl.CommandDataDefinition object at 0x0641F210>) , Command count = 1099 ] 
14:21:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431E70>, <py_sfcl.CommandDataDefinition object at 0x0641F090>) , Command count = 1100 ] 
14:21:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:19: [ SetBusWidth(0x4) , Command count = 1101 ] 
14:21:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B0F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1102 ] 
14:21:19: Protected Area Size 0x28000
14:21:19: Bus Width           2
14:21:19: Secure Mode         0
14:21:19: Speed  Class        4
14:21:19: Perf Move           0
14:21:19: Au Size             9
14:21:19: Erase Size          15
14:21:19: Erase Timeout       1
14:21:19: Erase offset        1
14:21:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1103 ] 
14:21:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:19: Host Frequency set to 100000 KHz
14:21:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:19: ####CSD Registe 2.0 Values####
14:21:19: CSD_STRUCTURE                                 :0x1
14:21:19: Reserv1                                       :0x0
14:21:19: Time Access 1 TAAC                            :0xe
14:21:19: Time Access 2 NSAC*100                        :0x0
14:21:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:19: Card Command Classess CCC                     :0x5b5
14:21:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:19: DSR(driver stage register)  DSR_IMP           :0x0
14:21:19: Reserv2                                       :0x0
14:21:19: Device Size C_SIZE                            :0xedc8
14:21:19: Reserv3                                       :0x0
14:21:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:19: Reserv4                                       :0x0
14:21:19: Write Speed Factor R2W_FACTOR                 :0x2
14:21:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:19: FILE_FORMAT_GRP                               :0x0
14:21:19: COPY flag                                     :0x1
14:21:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:19: File_Format                                   :0x0
14:21:19: CRC                                           :0x0
14:21:19: ####CSD Registe Values####  

14:21:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451630>, <py_sfcl.CommandDataDefinition object at 0x06451570>) , Command count = 1104 ] 
14:21:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F300>, <py_sfcl.CommandDataDefinition object at 0x0641F0C0>) , Command count = 1105 ] 
14:21:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F180>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F540>, <py_sfcl.PySEnhancedCmdData object at 0x0641F1B0>, <None>, <py_sfcl.Command23 object at 0x0645B390>) , Command count = 1106 ] 
14:21:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 3
14:21:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F4B0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B840>, <None>, <py_sfcl.Command23 object at 0x0645B300>) , Command count = 1107 ] 
14:21:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645B4E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B930>, <py_sfcl.PySEnhancedCmdData object at 0x0645B480>, <None>, <py_sfcl.Command23 object at 0x0645B8A0>) , Command count = 1108 ] 
14:21:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:21: Host Frequency set to 25000 KHz
14:21:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB10>, 0x0, True) , Command count = 1109 ] 
14:21:21: [GO18_globalSetVolt]### Host voltage value is set.
14:21:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451FC0>, 0x0, False) , Command count = 1110 ] 
14:21:21: [GO18_globalSetVolt]### Host voltage value is set.
14:21:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1111 ] 
14:21:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1112 ] 
14:21:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1113 ] 
14:21:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451E40>, <py_sfcl.CommandDataDefinition object at 0x06451600>) , Command count = 1114 ] 
14:21:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FCC0>, <py_sfcl.CommandDataDefinition object at 0x0641FBA0>) , Command count = 1115 ] 
14:21:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:22: [ SetCardRCA(0x1, 0xD555) , Command count = 1116 ] 
14:21:22: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:22: Host Frequency set to 25000 KHz
14:21:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:22: ####CSD Registe 2.0 Values####
14:21:22: CSD_STRUCTURE                                 :0x1
14:21:22: Reserv1                                       :0x0
14:21:22: Time Access 1 TAAC                            :0xe
14:21:22: Time Access 2 NSAC*100                        :0x0
14:21:22: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:22: Card Command Classess CCC                     :0x5b5
14:21:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:22: DSR(driver stage register)  DSR_IMP           :0x0
14:21:22: Reserv2                                       :0x0
14:21:22: Device Size C_SIZE                            :0xedc8
14:21:22: Reserv3                                       :0x0
14:21:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:22: Reserv4                                       :0x0
14:21:22: Write Speed Factor R2W_FACTOR                 :0x2
14:21:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:22: FILE_FORMAT_GRP                               :0x0
14:21:22: COPY flag                                     :0x1
14:21:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:22: File_Format                                   :0x0
14:21:22: CRC                                           :0x0
14:21:22: ####CSD Registe Values####  

14:21:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:22: [GetSCRRegisterEntry] Passed
14:21:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:22: Data_Status_After Erases          : 0
14:21:22: CPRM Security Support             : No Security
14:21:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:22: Spec. Version                     : Version 3.0X
14:21:22: Extended Security Support         : Extended_Security_Not_Supported
14:21:22: Command Support                   : COMMAND_SUPPORT
14:21:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FB70>, <py_sfcl.CommandDataDefinition object at 0x0641FCF0>) , Command count = 1117 ] 
14:21:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414AB0>, <py_sfcl.CommandDataDefinition object at 0x0641FC60>) , Command count = 1118 ] 
14:21:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:22: [ SetBusWidth(0x4) , Command count = 1119 ] 
14:21:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BCC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1120 ] 
14:21:22: Protected Area Size 0x28000
14:21:22: Bus Width           2
14:21:22: Secure Mode         0
14:21:22: Speed  Class        4
14:21:22: Perf Move           0
14:21:22: Au Size             9
14:21:22: Erase Size          15
14:21:22: Erase Timeout       1
14:21:22: Erase offset        1
14:21:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1121 ] 
14:21:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:22: Host Frequency set to 100000 KHz
14:21:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:22: ####CSD Registe 2.0 Values####
14:21:22: CSD_STRUCTURE                                 :0x1
14:21:22: Reserv1                                       :0x0
14:21:22: Time Access 1 TAAC                            :0xe
14:21:22: Time Access 2 NSAC*100                        :0x0
14:21:22: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:22: Card Command Classess CCC                     :0x5b5
14:21:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:22: DSR(driver stage register)  DSR_IMP           :0x0
14:21:22: Reserv2                                       :0x0
14:21:22: Device Size C_SIZE                            :0xedc8
14:21:22: Reserv3                                       :0x0
14:21:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:22: Reserv4                                       :0x0
14:21:22: Write Speed Factor R2W_FACTOR                 :0x2
14:21:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:22: FILE_FORMAT_GRP                               :0x0
14:21:22: COPY flag                                     :0x1
14:21:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:22: File_Format                                   :0x0
14:21:22: CRC                                           :0x0
14:21:22: ####CSD Registe Values####  

14:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467060>, <py_sfcl.CommandDataDefinition object at 0x0641FF90>) , Command count = 1122 ] 
14:21:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FD50>, <py_sfcl.CommandDataDefinition object at 0x0641F2A0>) , Command count = 1123 ] 
14:21:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064671E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467210>, <py_sfcl.PySEnhancedCmdData object at 0x06467240>, <None>, <py_sfcl.Command23 object at 0x0645BD20>) , Command count = 1124 ] 
14:21:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 2
14:21:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064670C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064670F0>, <py_sfcl.PySEnhancedCmdData object at 0x06467120>, <None>, <py_sfcl.Command23 object at 0x0641F510>) , Command count = 1125 ] 
14:21:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645B7B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B030>, <py_sfcl.PySEnhancedCmdData object at 0x0645B720>, <None>, <py_sfcl.Command23 object at 0x06467390>) , Command count = 1126 ] 
14:21:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:24: Host Frequency set to 25000 KHz
14:21:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:24: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x064675A0>, 0x0, True) , Command count = 1127 ] 
14:21:24: [GO18_globalSetVolt]### Host voltage value is set.
14:21:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645B4B0>, 0x0, False) , Command count = 1128 ] 
14:21:24: [GO18_globalSetVolt]### Host voltage value is set.
14:21:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1129 ] 
14:21:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1130 ] 
14:21:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1131 ] 
14:21:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467540>, <py_sfcl.CommandDataDefinition object at 0x064674E0>) , Command count = 1132 ] 
14:21:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467570>, <py_sfcl.CommandDataDefinition object at 0x0641F030>) , Command count = 1133 ] 
14:21:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:24: [ SetCardRCA(0x1, 0xD555) , Command count = 1134 ] 
14:21:25: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:25: Host Frequency set to 25000 KHz
14:21:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:25: ####CSD Registe 2.0 Values####
14:21:25: CSD_STRUCTURE                                 :0x1
14:21:25: Reserv1                                       :0x0
14:21:25: Time Access 1 TAAC                            :0xe
14:21:25: Time Access 2 NSAC*100                        :0x0
14:21:25: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:25: Card Command Classess CCC                     :0x5b5
14:21:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:25: DSR(driver stage register)  DSR_IMP           :0x0
14:21:25: Reserv2                                       :0x0
14:21:25: Device Size C_SIZE                            :0xedc8
14:21:25: Reserv3                                       :0x0
14:21:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:25: Reserv4                                       :0x0
14:21:25: Write Speed Factor R2W_FACTOR                 :0x2
14:21:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:25: FILE_FORMAT_GRP                               :0x0
14:21:25: COPY flag                                     :0x1
14:21:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:25: File_Format                                   :0x0
14:21:25: CRC                                           :0x0
14:21:25: ####CSD Registe Values####  

14:21:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:25: [GetSCRRegisterEntry] Passed
14:21:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:25: Data_Status_After Erases          : 0
14:21:25: CPRM Security Support             : No Security
14:21:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:25: Spec. Version                     : Version 3.0X
14:21:25: Extended Security Support         : Extended_Security_Not_Supported
14:21:25: Command Support                   : COMMAND_SUPPORT
14:21:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FDE0>, <py_sfcl.CommandDataDefinition object at 0x06467840>) , Command count = 1135 ] 
14:21:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414D80>, <py_sfcl.CommandDataDefinition object at 0x06467630>) , Command count = 1136 ] 
14:21:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:25: [ SetBusWidth(0x4) , Command count = 1137 ] 
14:21:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B0C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1138 ] 
14:21:25: Protected Area Size 0x28000
14:21:25: Bus Width           2
14:21:25: Secure Mode         0
14:21:25: Speed  Class        4
14:21:25: Perf Move           0
14:21:25: Au Size             9
14:21:25: Erase Size          15
14:21:25: Erase Timeout       1
14:21:25: Erase offset        1
14:21:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1139 ] 
14:21:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:25: Host Frequency set to 100000 KHz
14:21:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:25: ####CSD Registe 2.0 Values####
14:21:25: CSD_STRUCTURE                                 :0x1
14:21:25: Reserv1                                       :0x0
14:21:25: Time Access 1 TAAC                            :0xe
14:21:25: Time Access 2 NSAC*100                        :0x0
14:21:25: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:25: Card Command Classess CCC                     :0x5b5
14:21:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:25: DSR(driver stage register)  DSR_IMP           :0x0
14:21:25: Reserv2                                       :0x0
14:21:25: Device Size C_SIZE                            :0xedc8
14:21:25: Reserv3                                       :0x0
14:21:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:25: Reserv4                                       :0x0
14:21:25: Write Speed Factor R2W_FACTOR                 :0x2
14:21:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:25: FILE_FORMAT_GRP                               :0x0
14:21:25: COPY flag                                     :0x1
14:21:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:25: File_Format                                   :0x0
14:21:25: CRC                                           :0x0
14:21:25: ####CSD Registe Values####  

14:21:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467A50>, <py_sfcl.CommandDataDefinition object at 0x06467870>) , Command count = 1140 ] 
14:21:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064672A0>, <py_sfcl.CommandDataDefinition object at 0x06467150>) , Command count = 1141 ] 
14:21:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467990>, <py_sfcl.PySEnhancedCmdData object at 0x064679C0>, <None>, <py_sfcl.Command23 object at 0x06467720>) , Command count = 1142 ] 
14:21:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 1
14:21:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06467AE0>, <None>, <py_sfcl.Command23 object at 0x064678A0>) , Command count = 1143 ] 
14:21:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645B180>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BA20>, <py_sfcl.PySEnhancedCmdData object at 0x0645B030>, <None>, <py_sfcl.Command23 object at 0x06467C30>) , Command count = 1144 ] 
14:21:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:25: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:27: Host Frequency set to 25000 KHz
14:21:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467E40>, 0x0, True) , Command count = 1145 ] 
14:21:27: [GO18_globalSetVolt]### Host voltage value is set.
14:21:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645B090>, 0x0, False) , Command count = 1146 ] 
14:21:27: [GO18_globalSetVolt]### Host voltage value is set.
14:21:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1147 ] 
14:21:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1148 ] 
14:21:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1149 ] 
14:21:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467DE0>, <py_sfcl.CommandDataDefinition object at 0x06467D80>) , Command count = 1150 ] 
14:21:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467E10>, <py_sfcl.CommandDataDefinition object at 0x06467420>) , Command count = 1151 ] 
14:21:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1152 ] 
14:21:27: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:27: Host Frequency set to 25000 KHz
14:21:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:27: ####CSD Registe 2.0 Values####
14:21:27: CSD_STRUCTURE                                 :0x1
14:21:27: Reserv1                                       :0x0
14:21:27: Time Access 1 TAAC                            :0xe
14:21:27: Time Access 2 NSAC*100                        :0x0
14:21:27: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:27: Card Command Classess CCC                     :0x5b5
14:21:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:27: DSR(driver stage register)  DSR_IMP           :0x0
14:21:27: Reserv2                                       :0x0
14:21:27: Device Size C_SIZE                            :0xedc8
14:21:27: Reserv3                                       :0x0
14:21:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:27: Reserv4                                       :0x0
14:21:27: Write Speed Factor R2W_FACTOR                 :0x2
14:21:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:27: FILE_FORMAT_GRP                               :0x0
14:21:27: COPY flag                                     :0x1
14:21:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:27: File_Format                                   :0x0
14:21:27: CRC                                           :0x0
14:21:27: ####CSD Registe Values####  

14:21:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:27: [GetSCRRegisterEntry] Passed
14:21:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:27: Data_Status_After Erases          : 0
14:21:27: CPRM Security Support             : No Security
14:21:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:27: Spec. Version                     : Version 3.0X
14:21:27: Extended Security Support         : Extended_Security_Not_Supported
14:21:27: Command Support                   : COMMAND_SUPPORT
14:21:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421030>, <py_sfcl.CommandDataDefinition object at 0x06467F00>) , Command count = 1153 ] 
14:21:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F390>, <py_sfcl.CommandDataDefinition object at 0x064673C0>) , Command count = 1154 ] 
14:21:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:27: [ SetBusWidth(0x4) , Command count = 1155 ] 
14:21:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B450>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1156 ] 
14:21:27: Protected Area Size 0x28000
14:21:27: Bus Width           2
14:21:27: Secure Mode         0
14:21:27: Speed  Class        4
14:21:27: Perf Move           0
14:21:27: Au Size             9
14:21:27: Erase Size          15
14:21:27: Erase Timeout       1
14:21:27: Erase offset        1
14:21:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1157 ] 
14:21:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:28: Host Frequency set to 100000 KHz
14:21:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:28: ####CSD Registe 2.0 Values####
14:21:28: CSD_STRUCTURE                                 :0x1
14:21:28: Reserv1                                       :0x0
14:21:28: Time Access 1 TAAC                            :0xe
14:21:28: Time Access 2 NSAC*100                        :0x0
14:21:28: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:28: Card Command Classess CCC                     :0x5b5
14:21:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:28: DSR(driver stage register)  DSR_IMP           :0x0
14:21:28: Reserv2                                       :0x0
14:21:28: Device Size C_SIZE                            :0xedc8
14:21:28: Reserv3                                       :0x0
14:21:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:28: Reserv4                                       :0x0
14:21:28: Write Speed Factor R2W_FACTOR                 :0x2
14:21:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:28: FILE_FORMAT_GRP                               :0x0
14:21:28: COPY flag                                     :0x1
14:21:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:28: File_Format                                   :0x0
14:21:28: CRC                                           :0x0
14:21:28: ####CSD Registe Values####  

14:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467F90>, <py_sfcl.CommandDataDefinition object at 0x06467FC0>) , Command count = 1158 ] 
14:21:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467B40>, <py_sfcl.CommandDataDefinition object at 0x06467360>) , Command count = 1159 ] 
14:21:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064212A0>, <py_sfcl.PySEnhancedCmdData object at 0x06467C00>, <None>, <py_sfcl.Command23 object at 0x06467930>) , Command count = 1160 ] 
14:21:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Outer loop Count 1022
14:21:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 29
14:21:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421360>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421390>, <py_sfcl.PySEnhancedCmdData object at 0x064679F0>, <None>, <py_sfcl.Command23 object at 0x06467B10>) , Command count = 1161 ] 
14:21:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421330>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B600>, <py_sfcl.PySEnhancedCmdData object at 0x0645B180>, <None>, <py_sfcl.Command23 object at 0x064676F0>) , Command count = 1162 ] 
14:21:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:28: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:30: Host Frequency set to 25000 KHz
14:21:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:30: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421720>, 0x0, True) , Command count = 1163 ] 
14:21:30: [GO18_globalSetVolt]### Host voltage value is set.
14:21:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x064678D0>, 0x0, False) , Command count = 1164 ] 
14:21:30: [GO18_globalSetVolt]### Host voltage value is set.
14:21:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1165 ] 
14:21:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1166 ] 
14:21:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1167 ] 
14:21:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216C0>, <py_sfcl.CommandDataDefinition object at 0x06421660>) , Command count = 1168 ] 
14:21:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216F0>, <py_sfcl.CommandDataDefinition object at 0x06467480>) , Command count = 1169 ] 
14:21:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:30: [ SetCardRCA(0x1, 0xD555) , Command count = 1170 ] 
14:21:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:30: Host Frequency set to 25000 KHz
14:21:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:30: ####CSD Registe 2.0 Values####
14:21:30: CSD_STRUCTURE                                 :0x1
14:21:30: Reserv1                                       :0x0
14:21:30: Time Access 1 TAAC                            :0xe
14:21:30: Time Access 2 NSAC*100                        :0x0
14:21:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:30: Card Command Classess CCC                     :0x5b5
14:21:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:30: DSR(driver stage register)  DSR_IMP           :0x0
14:21:30: Reserv2                                       :0x0
14:21:30: Device Size C_SIZE                            :0xedc8
14:21:30: Reserv3                                       :0x0
14:21:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:30: Reserv4                                       :0x0
14:21:30: Write Speed Factor R2W_FACTOR                 :0x2
14:21:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:30: FILE_FORMAT_GRP                               :0x0
14:21:30: COPY flag                                     :0x1
14:21:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:30: File_Format                                   :0x0
14:21:30: CRC                                           :0x0
14:21:30: ####CSD Registe Values####  

14:21:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:30: [GetSCRRegisterEntry] Passed
14:21:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:30: Data_Status_After Erases          : 0
14:21:30: CPRM Security Support             : No Security
14:21:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:30: Spec. Version                     : Version 3.0X
14:21:30: Extended Security Support         : Extended_Security_Not_Supported
14:21:30: Command Support                   : COMMAND_SUPPORT
14:21:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467C60>, <py_sfcl.CommandDataDefinition object at 0x064219C0>) , Command count = 1171 ] 
14:21:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FDB0>, <py_sfcl.CommandDataDefinition object at 0x064217B0>) , Command count = 1172 ] 
14:21:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:30: [ SetBusWidth(0x4) , Command count = 1173 ] 
14:21:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BBD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1174 ] 
14:21:30: Protected Area Size 0x28000
14:21:30: Bus Width           2
14:21:30: Secure Mode         0
14:21:30: Speed  Class        4
14:21:30: Perf Move           0
14:21:30: Au Size             9
14:21:30: Erase Size          15
14:21:30: Erase Timeout       1
14:21:30: Erase offset        1
14:21:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1175 ] 
14:21:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:30: Host Frequency set to 100000 KHz
14:21:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:30: ####CSD Registe 2.0 Values####
14:21:30: CSD_STRUCTURE                                 :0x1
14:21:30: Reserv1                                       :0x0
14:21:30: Time Access 1 TAAC                            :0xe
14:21:30: Time Access 2 NSAC*100                        :0x0
14:21:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:30: Card Command Classess CCC                     :0x5b5
14:21:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:30: DSR(driver stage register)  DSR_IMP           :0x0
14:21:30: Reserv2                                       :0x0
14:21:30: Device Size C_SIZE                            :0xedc8
14:21:30: Reserv3                                       :0x0
14:21:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:30: Reserv4                                       :0x0
14:21:30: Write Speed Factor R2W_FACTOR                 :0x2
14:21:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:30: FILE_FORMAT_GRP                               :0x0
14:21:30: COPY flag                                     :0x1
14:21:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:30: File_Format                                   :0x0
14:21:30: CRC                                           :0x0
14:21:30: ####CSD Registe Values####  

14:21:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421BD0>, <py_sfcl.CommandDataDefinition object at 0x064219F0>) , Command count = 1176 ] 
14:21:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421210>, <py_sfcl.CommandDataDefinition object at 0x06421060>) , Command count = 1177 ] 
14:21:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421B10>, <py_sfcl.PySEnhancedCmdData object at 0x06421B40>, <None>, <py_sfcl.Command23 object at 0x064218D0>) , Command count = 1178 ] 
14:21:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 28
14:21:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421C30>, <py_sfcl.PySEnhancedCmdData object at 0x06421C60>, <None>, <py_sfcl.Command23 object at 0x06421840>) , Command count = 1179 ] 
14:21:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467D50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421750>, <py_sfcl.PySEnhancedCmdData object at 0x0645BA80>, <None>, <py_sfcl.Command23 object at 0x06421510>) , Command count = 1180 ] 
14:21:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:32: Host Frequency set to 25000 KHz
14:21:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:32: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421FC0>, 0x0, True) , Command count = 1181 ] 
14:21:32: [GO18_globalSetVolt]### Host voltage value is set.
14:21:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x064211B0>, 0x0, False) , Command count = 1182 ] 
14:21:33: [GO18_globalSetVolt]### Host voltage value is set.
14:21:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1183 ] 
14:21:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1184 ] 
14:21:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1185 ] 
14:21:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A060>, <py_sfcl.CommandDataDefinition object at 0x06421F60>) , Command count = 1186 ] 
14:21:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A030>, <py_sfcl.CommandDataDefinition object at 0x064215A0>) , Command count = 1187 ] 
14:21:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:33: [ SetCardRCA(0x1, 0xD555) , Command count = 1188 ] 
14:21:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:33: Host Frequency set to 25000 KHz
14:21:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:33: ####CSD Registe 2.0 Values####
14:21:33: CSD_STRUCTURE                                 :0x1
14:21:33: Reserv1                                       :0x0
14:21:33: Time Access 1 TAAC                            :0xe
14:21:33: Time Access 2 NSAC*100                        :0x0
14:21:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:33: Card Command Classess CCC                     :0x5b5
14:21:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:33: DSR(driver stage register)  DSR_IMP           :0x0
14:21:33: Reserv2                                       :0x0
14:21:33: Device Size C_SIZE                            :0xedc8
14:21:33: Reserv3                                       :0x0
14:21:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:33: Reserv4                                       :0x0
14:21:33: Write Speed Factor R2W_FACTOR                 :0x2
14:21:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:33: FILE_FORMAT_GRP                               :0x0
14:21:33: COPY flag                                     :0x1
14:21:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:33: File_Format                                   :0x0
14:21:33: CRC                                           :0x0
14:21:33: ####CSD Registe Values####  

14:21:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:33: [GetSCRRegisterEntry] Passed
14:21:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:33: Data_Status_After Erases          : 0
14:21:33: CPRM Security Support             : No Security
14:21:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:33: Spec. Version                     : Version 3.0X
14:21:33: Extended Security Support         : Extended_Security_Not_Supported
14:21:33: Command Support                   : COMMAND_SUPPORT
14:21:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421F90>, <py_sfcl.CommandDataDefinition object at 0x0642A2A0>) , Command count = 1189 ] 
14:21:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064677E0>, <py_sfcl.CommandDataDefinition object at 0x0642A090>) , Command count = 1190 ] 
14:21:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:33: [ SetBusWidth(0x4) , Command count = 1191 ] 
14:21:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BC00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1192 ] 
14:21:33: Protected Area Size 0x28000
14:21:33: Bus Width           2
14:21:33: Secure Mode         0
14:21:33: Speed  Class        4
14:21:33: Perf Move           0
14:21:33: Au Size             9
14:21:33: Erase Size          15
14:21:33: Erase Timeout       1
14:21:33: Erase offset        1
14:21:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1193 ] 
14:21:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:33: Host Frequency set to 100000 KHz
14:21:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:33: ####CSD Registe 2.0 Values####
14:21:33: CSD_STRUCTURE                                 :0x1
14:21:33: Reserv1                                       :0x0
14:21:33: Time Access 1 TAAC                            :0xe
14:21:33: Time Access 2 NSAC*100                        :0x0
14:21:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:33: Card Command Classess CCC                     :0x5b5
14:21:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:33: DSR(driver stage register)  DSR_IMP           :0x0
14:21:33: Reserv2                                       :0x0
14:21:33: Device Size C_SIZE                            :0xedc8
14:21:33: Reserv3                                       :0x0
14:21:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:33: Reserv4                                       :0x0
14:21:33: Write Speed Factor R2W_FACTOR                 :0x2
14:21:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:33: FILE_FORMAT_GRP                               :0x0
14:21:33: COPY flag                                     :0x1
14:21:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:33: File_Format                                   :0x0
14:21:33: CRC                                           :0x0
14:21:33: ####CSD Registe Values####  

14:21:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421D50>, <py_sfcl.CommandDataDefinition object at 0x06421C90>) , Command count = 1194 ] 
14:21:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421180>, <py_sfcl.CommandDataDefinition object at 0x06421870>) , Command count = 1195 ] 
14:21:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421D80>, <py_sfcl.PySEnhancedCmdData object at 0x06421BA0>, <None>, <py_sfcl.Command23 object at 0x064214B0>) , Command count = 1196 ] 
14:21:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 27
14:21:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A510>, <py_sfcl.PySEnhancedCmdData object at 0x0642A540>, <None>, <py_sfcl.Command23 object at 0x06421B70>) , Command count = 1197 ] 
14:21:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A1B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421AB0>, <py_sfcl.PySEnhancedCmdData object at 0x064213F0>, <None>, <py_sfcl.Command23 object at 0x0642A180>) , Command count = 1198 ] 
14:21:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:33: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:35: Host Frequency set to 25000 KHz
14:21:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A8A0>, 0x0, True) , Command count = 1199 ] 
14:21:35: [GO18_globalSetVolt]### Host voltage value is set.
14:21:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FE10>, 0x0, False) , Command count = 1200 ] 
14:21:35: [GO18_globalSetVolt]### Host voltage value is set.
14:21:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1201 ] 
14:21:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1202 ] 
14:21:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1203 ] 
14:21:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421D20>, <py_sfcl.CommandDataDefinition object at 0x06421DE0>) , Command count = 1204 ] 
14:21:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A870>, <py_sfcl.CommandDataDefinition object at 0x0642A7E0>) , Command count = 1205 ] 
14:21:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:36: [ SetCardRCA(0x1, 0xD555) , Command count = 1206 ] 
14:21:36: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:36: Host Frequency set to 25000 KHz
14:21:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:36: ####CSD Registe 2.0 Values####
14:21:36: CSD_STRUCTURE                                 :0x1
14:21:36: Reserv1                                       :0x0
14:21:36: Time Access 1 TAAC                            :0xe
14:21:36: Time Access 2 NSAC*100                        :0x0
14:21:36: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:36: Card Command Classess CCC                     :0x5b5
14:21:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:36: DSR(driver stage register)  DSR_IMP           :0x0
14:21:36: Reserv2                                       :0x0
14:21:36: Device Size C_SIZE                            :0xedc8
14:21:36: Reserv3                                       :0x0
14:21:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:36: Reserv4                                       :0x0
14:21:36: Write Speed Factor R2W_FACTOR                 :0x2
14:21:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:36: FILE_FORMAT_GRP                               :0x0
14:21:36: COPY flag                                     :0x1
14:21:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:36: File_Format                                   :0x0
14:21:36: CRC                                           :0x0
14:21:36: ####CSD Registe Values####  

14:21:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:36: [GetSCRRegisterEntry] Passed
14:21:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:36: Data_Status_After Erases          : 0
14:21:36: CPRM Security Support             : No Security
14:21:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:36: Spec. Version                     : Version 3.0X
14:21:36: Extended Security Support         : Extended_Security_Not_Supported
14:21:36: Command Support                   : COMMAND_SUPPORT
14:21:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AB40>, <py_sfcl.CommandDataDefinition object at 0x0642A960>) , Command count = 1207 ] 
14:21:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064210F0>, <py_sfcl.CommandDataDefinition object at 0x0642A900>) , Command count = 1208 ] 
14:21:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:36: [ SetBusWidth(0x4) , Command count = 1209 ] 
14:21:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BBA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1210 ] 
14:21:36: Protected Area Size 0x28000
14:21:36: Bus Width           2
14:21:36: Secure Mode         0
14:21:36: Speed  Class        4
14:21:36: Perf Move           0
14:21:36: Au Size             9
14:21:36: Erase Size          15
14:21:36: Erase Timeout       1
14:21:36: Erase offset        1
14:21:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1211 ] 
14:21:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:36: Host Frequency set to 100000 KHz
14:21:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:36: ####CSD Registe 2.0 Values####
14:21:36: CSD_STRUCTURE                                 :0x1
14:21:36: Reserv1                                       :0x0
14:21:36: Time Access 1 TAAC                            :0xe
14:21:36: Time Access 2 NSAC*100                        :0x0
14:21:36: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:36: Card Command Classess CCC                     :0x5b5
14:21:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:36: DSR(driver stage register)  DSR_IMP           :0x0
14:21:36: Reserv2                                       :0x0
14:21:36: Device Size C_SIZE                            :0xedc8
14:21:36: Reserv3                                       :0x0
14:21:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:36: Reserv4                                       :0x0
14:21:36: Write Speed Factor R2W_FACTOR                 :0x2
14:21:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:36: FILE_FORMAT_GRP                               :0x0
14:21:36: COPY flag                                     :0x1
14:21:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:36: File_Format                                   :0x0
14:21:36: CRC                                           :0x0
14:21:36: ####CSD Registe Values####  

14:21:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AD50>, <py_sfcl.CommandDataDefinition object at 0x0642AB70>) , Command count = 1212 ] 
14:21:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421A20>, <py_sfcl.CommandDataDefinition object at 0x0642A150>) , Command count = 1213 ] 
14:21:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AC60>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC90>, <py_sfcl.PySEnhancedCmdData object at 0x0642ACC0>, <None>, <py_sfcl.Command23 object at 0x06421A80>) , Command count = 1214 ] 
14:21:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 26
14:21:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642ADB0>, <py_sfcl.PySEnhancedCmdData object at 0x0642ADE0>, <None>, <py_sfcl.Command23 object at 0x0642A3F0>) , Command count = 1215 ] 
14:21:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A390>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A8D0>, <py_sfcl.PySEnhancedCmdData object at 0x0642A3C0>, <None>, <py_sfcl.Command23 object at 0x0642A5A0>) , Command count = 1216 ] 
14:21:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:36: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:38: Host Frequency set to 25000 KHz
14:21:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:38: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E030>, 0x0, True) , Command count = 1217 ] 
14:21:38: [GO18_globalSetVolt]### Host voltage value is set.
14:21:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x064215D0>, 0x0, False) , Command count = 1218 ] 
14:21:38: [GO18_globalSetVolt]### Host voltage value is set.
14:21:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1219 ] 
14:21:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1220 ] 
14:21:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1221 ] 
14:21:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E150>, <py_sfcl.CommandDataDefinition object at 0x0642E0F0>) , Command count = 1222 ] 
14:21:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E180>, <py_sfcl.CommandDataDefinition object at 0x0642A720>) , Command count = 1223 ] 
14:21:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:38: [ SetCardRCA(0x1, 0xD555) , Command count = 1224 ] 
14:21:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:38: Host Frequency set to 25000 KHz
14:21:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:38: ####CSD Registe 2.0 Values####
14:21:38: CSD_STRUCTURE                                 :0x1
14:21:38: Reserv1                                       :0x0
14:21:38: Time Access 1 TAAC                            :0xe
14:21:38: Time Access 2 NSAC*100                        :0x0
14:21:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:38: Card Command Classess CCC                     :0x5b5
14:21:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:38: DSR(driver stage register)  DSR_IMP           :0x0
14:21:38: Reserv2                                       :0x0
14:21:38: Device Size C_SIZE                            :0xedc8
14:21:38: Reserv3                                       :0x0
14:21:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:38: Reserv4                                       :0x0
14:21:38: Write Speed Factor R2W_FACTOR                 :0x2
14:21:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:38: FILE_FORMAT_GRP                               :0x0
14:21:38: COPY flag                                     :0x1
14:21:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:38: File_Format                                   :0x0
14:21:38: CRC                                           :0x0
14:21:38: ####CSD Registe Values####  

14:21:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:38: [GetSCRRegisterEntry] Passed
14:21:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:38: Data_Status_After Erases          : 0
14:21:38: CPRM Security Support             : No Security
14:21:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:38: Spec. Version                     : Version 3.0X
14:21:38: Extended Security Support         : Extended_Security_Not_Supported
14:21:38: Command Support                   : COMMAND_SUPPORT
14:21:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E420>, <py_sfcl.CommandDataDefinition object at 0x0642E1B0>) , Command count = 1225 ] 
14:21:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421960>, <py_sfcl.CommandDataDefinition object at 0x0642A5D0>) , Command count = 1226 ] 
14:21:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:38: [ SetBusWidth(0x4) , Command count = 1227 ] 
14:21:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1228 ] 
14:21:38: Protected Area Size 0x28000
14:21:38: Bus Width           2
14:21:38: Secure Mode         0
14:21:38: Speed  Class        4
14:21:38: Perf Move           0
14:21:38: Au Size             9
14:21:38: Erase Size          15
14:21:38: Erase Timeout       1
14:21:38: Erase offset        1
14:21:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1229 ] 
14:21:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:39: Host Frequency set to 100000 KHz
14:21:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:39: ####CSD Registe 2.0 Values####
14:21:39: CSD_STRUCTURE                                 :0x1
14:21:39: Reserv1                                       :0x0
14:21:39: Time Access 1 TAAC                            :0xe
14:21:39: Time Access 2 NSAC*100                        :0x0
14:21:39: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:39: Card Command Classess CCC                     :0x5b5
14:21:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:39: DSR(driver stage register)  DSR_IMP           :0x0
14:21:39: Reserv2                                       :0x0
14:21:39: Device Size C_SIZE                            :0xedc8
14:21:39: Reserv3                                       :0x0
14:21:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:39: Reserv4                                       :0x0
14:21:39: Write Speed Factor R2W_FACTOR                 :0x2
14:21:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:39: FILE_FORMAT_GRP                               :0x0
14:21:39: COPY flag                                     :0x1
14:21:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:39: File_Format                                   :0x0
14:21:39: CRC                                           :0x0
14:21:39: ####CSD Registe Values####  

14:21:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AED0>, <py_sfcl.CommandDataDefinition object at 0x0642AE10>) , Command count = 1230 ] 
14:21:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421E70>, <py_sfcl.CommandDataDefinition object at 0x0642A9F0>) , Command count = 1231 ] 
14:21:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E330>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642AD20>, <None>, <py_sfcl.Command23 object at 0x0642A9C0>) , Command count = 1232 ] 
14:21:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 25
14:21:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E690>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6C0>, <None>, <py_sfcl.Command23 object at 0x0642ACF0>) , Command count = 1233 ] 
14:21:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC30>, <py_sfcl.PySEnhancedCmdData object at 0x0642A480>, <None>, <py_sfcl.Command23 object at 0x0642E300>) , Command count = 1234 ] 
14:21:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:41: Host Frequency set to 25000 KHz
14:21:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EA20>, 0x0, True) , Command count = 1235 ] 
14:21:41: [GO18_globalSetVolt]### Host voltage value is set.
14:21:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A570>, 0x0, False) , Command count = 1236 ] 
14:21:41: [GO18_globalSetVolt]### Host voltage value is set.
14:21:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1237 ] 
14:21:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1238 ] 
14:21:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1239 ] 
14:21:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E9C0>, <py_sfcl.CommandDataDefinition object at 0x0642AE70>) , Command count = 1240 ] 
14:21:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E9F0>, <py_sfcl.CommandDataDefinition object at 0x0642AF60>) , Command count = 1241 ] 
14:21:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1242 ] 
14:21:41: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:41: Host Frequency set to 25000 KHz
14:21:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:41: ####CSD Registe 2.0 Values####
14:21:41: CSD_STRUCTURE                                 :0x1
14:21:41: Reserv1                                       :0x0
14:21:41: Time Access 1 TAAC                            :0xe
14:21:41: Time Access 2 NSAC*100                        :0x0
14:21:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:41: Card Command Classess CCC                     :0x5b5
14:21:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:41: DSR(driver stage register)  DSR_IMP           :0x0
14:21:41: Reserv2                                       :0x0
14:21:41: Device Size C_SIZE                            :0xedc8
14:21:41: Reserv3                                       :0x0
14:21:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:41: Reserv4                                       :0x0
14:21:41: Write Speed Factor R2W_FACTOR                 :0x2
14:21:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:41: FILE_FORMAT_GRP                               :0x0
14:21:41: COPY flag                                     :0x1
14:21:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:41: File_Format                                   :0x0
14:21:41: CRC                                           :0x0
14:21:41: ####CSD Registe Values####  

14:21:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:41: [GetSCRRegisterEntry] Passed
14:21:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:41: Data_Status_After Erases          : 0
14:21:41: CPRM Security Support             : No Security
14:21:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:41: Spec. Version                     : Version 3.0X
14:21:41: Extended Security Support         : Extended_Security_Not_Supported
14:21:41: Command Support                   : COMMAND_SUPPORT
14:21:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ECC0>, <py_sfcl.CommandDataDefinition object at 0x0642EAE0>) , Command count = 1243 ] 
14:21:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421900>, <py_sfcl.CommandDataDefinition object at 0x0642E4B0>) , Command count = 1244 ] 
14:21:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:41: [ SetBusWidth(0x4) , Command count = 1245 ] 
14:21:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BD50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1246 ] 
14:21:41: Protected Area Size 0x28000
14:21:41: Bus Width           2
14:21:41: Secure Mode         0
14:21:41: Speed  Class        4
14:21:41: Perf Move           0
14:21:41: Au Size             9
14:21:41: Erase Size          15
14:21:41: Erase Timeout       1
14:21:41: Erase offset        1
14:21:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1247 ] 
14:21:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:41: Host Frequency set to 100000 KHz
14:21:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:41: ####CSD Registe 2.0 Values####
14:21:41: CSD_STRUCTURE                                 :0x1
14:21:41: Reserv1                                       :0x0
14:21:41: Time Access 1 TAAC                            :0xe
14:21:41: Time Access 2 NSAC*100                        :0x0
14:21:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:41: Card Command Classess CCC                     :0x5b5
14:21:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:41: DSR(driver stage register)  DSR_IMP           :0x0
14:21:41: Reserv2                                       :0x0
14:21:41: Device Size C_SIZE                            :0xedc8
14:21:41: Reserv3                                       :0x0
14:21:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:41: Reserv4                                       :0x0
14:21:41: Write Speed Factor R2W_FACTOR                 :0x2
14:21:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:41: FILE_FORMAT_GRP                               :0x0
14:21:41: COPY flag                                     :0x1
14:21:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:41: File_Format                                   :0x0
14:21:41: CRC                                           :0x0
14:21:41: ####CSD Registe Values####  

14:21:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EED0>, <py_sfcl.CommandDataDefinition object at 0x0642ECF0>) , Command count = 1248 ] 
14:21:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ABA0>, <py_sfcl.CommandDataDefinition object at 0x0642E2D0>) , Command count = 1249 ] 
14:21:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642EDE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EE10>, <py_sfcl.PySEnhancedCmdData object at 0x0642EE40>, <None>, <py_sfcl.Command23 object at 0x0642A660>) , Command count = 1250 ] 
14:21:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 24
14:21:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064310F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642EF30>, <None>, <py_sfcl.Command23 object at 0x0642E570>) , Command count = 1251 ] 
14:21:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E0C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EA50>, <py_sfcl.PySEnhancedCmdData object at 0x0642E540>, <None>, <py_sfcl.Command23 object at 0x0642E720>) , Command count = 1252 ] 
14:21:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:43: Host Frequency set to 25000 KHz
14:21:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431300>, 0x0, True) , Command count = 1253 ] 
14:21:44: [GO18_globalSetVolt]### Host voltage value is set.
14:21:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E7B0>, 0x0, False) , Command count = 1254 ] 
14:21:44: [GO18_globalSetVolt]### Host voltage value is set.
14:21:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1255 ] 
14:21:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1256 ] 
14:21:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1257 ] 
14:21:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312A0>, <py_sfcl.CommandDataDefinition object at 0x06431270>) , Command count = 1258 ] 
14:21:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312D0>, <py_sfcl.CommandDataDefinition object at 0x0642E8A0>) , Command count = 1259 ] 
14:21:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1260 ] 
14:21:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:44: Host Frequency set to 25000 KHz
14:21:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:44: ####CSD Registe 2.0 Values####
14:21:44: CSD_STRUCTURE                                 :0x1
14:21:44: Reserv1                                       :0x0
14:21:44: Time Access 1 TAAC                            :0xe
14:21:44: Time Access 2 NSAC*100                        :0x0
14:21:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:44: Card Command Classess CCC                     :0x5b5
14:21:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:44: DSR(driver stage register)  DSR_IMP           :0x0
14:21:44: Reserv2                                       :0x0
14:21:44: Device Size C_SIZE                            :0xedc8
14:21:44: Reserv3                                       :0x0
14:21:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:44: Reserv4                                       :0x0
14:21:44: Write Speed Factor R2W_FACTOR                 :0x2
14:21:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:44: FILE_FORMAT_GRP                               :0x0
14:21:44: COPY flag                                     :0x1
14:21:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:44: File_Format                                   :0x0
14:21:44: CRC                                           :0x0
14:21:44: ####CSD Registe Values####  

14:21:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:44: [GetSCRRegisterEntry] Passed
14:21:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:44: Data_Status_After Erases          : 0
14:21:44: CPRM Security Support             : No Security
14:21:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:44: Spec. Version                     : Version 3.0X
14:21:44: Extended Security Support         : Extended_Security_Not_Supported
14:21:44: Command Support                   : COMMAND_SUPPORT
14:21:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431570>, <py_sfcl.CommandDataDefinition object at 0x06431360>) , Command count = 1261 ] 
14:21:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E510>, <py_sfcl.CommandDataDefinition object at 0x0642ED80>) , Command count = 1262 ] 
14:21:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:44: [ SetBusWidth(0x4) , Command count = 1263 ] 
14:21:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642AFC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1264 ] 
14:21:44: Protected Area Size 0x28000
14:21:44: Bus Width           2
14:21:44: Secure Mode         0
14:21:44: Speed  Class        4
14:21:44: Perf Move           0
14:21:44: Au Size             9
14:21:44: Erase Size          15
14:21:44: Erase Timeout       1
14:21:44: Erase offset        1
14:21:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1265 ] 
14:21:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:44: Host Frequency set to 100000 KHz
14:21:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:44: ####CSD Registe 2.0 Values####
14:21:44: CSD_STRUCTURE                                 :0x1
14:21:44: Reserv1                                       :0x0
14:21:44: Time Access 1 TAAC                            :0xe
14:21:44: Time Access 2 NSAC*100                        :0x0
14:21:44: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:44: Card Command Classess CCC                     :0x5b5
14:21:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:44: DSR(driver stage register)  DSR_IMP           :0x0
14:21:44: Reserv2                                       :0x0
14:21:44: Device Size C_SIZE                            :0xedc8
14:21:44: Reserv3                                       :0x0
14:21:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:44: Reserv4                                       :0x0
14:21:44: Write Speed Factor R2W_FACTOR                 :0x2
14:21:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:44: FILE_FORMAT_GRP                               :0x0
14:21:44: COPY flag                                     :0x1
14:21:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:44: File_Format                                   :0x0
14:21:44: CRC                                           :0x0
14:21:44: ####CSD Registe Values####  

14:21:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7BD0>, <py_sfcl.CommandDataDefinition object at 0x05D7E1E0>) , Command count = 1266 ] 
14:21:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E060>, <py_sfcl.CommandDataDefinition object at 0x0642EB70>) , Command count = 1267 ] 
14:21:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642EFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EEA0>, <py_sfcl.PySEnhancedCmdData object at 0x0642EE70>, <None>, <py_sfcl.Command23 object at 0x0642EB40>) , Command count = 1268 ] 
14:21:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 23
14:21:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7C30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF60>, <py_sfcl.PySEnhancedCmdData object at 0x06431630>, <None>, <py_sfcl.Command23 object at 0x0642E600>) , Command count = 1269 ] 
14:21:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642EDB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EC00>, <py_sfcl.PySEnhancedCmdData object at 0x064317B0>, <None>, <py_sfcl.Command23 object at 0x06431540>) , Command count = 1270 ] 
14:21:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:44: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:46: Host Frequency set to 25000 KHz
14:21:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:46: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAD180>, 0x0, True) , Command count = 1271 ] 
14:21:46: [GO18_globalSetVolt]### Host voltage value is set.
14:21:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642ED50>, 0x0, False) , Command count = 1272 ] 
14:21:46: [GO18_globalSetVolt]### Host voltage value is set.
14:21:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1273 ] 
14:21:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1274 ] 
14:21:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1275 ] 
14:21:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F90>, <py_sfcl.CommandDataDefinition object at 0x05DA7960>) , Command count = 1276 ] 
14:21:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADCC0>, <py_sfcl.CommandDataDefinition object at 0x0642E5D0>) , Command count = 1277 ] 
14:21:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:47: [ SetCardRCA(0x1, 0xD555) , Command count = 1278 ] 
14:21:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:47: Host Frequency set to 25000 KHz
14:21:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:47: ####CSD Registe 2.0 Values####
14:21:47: CSD_STRUCTURE                                 :0x1
14:21:47: Reserv1                                       :0x0
14:21:47: Time Access 1 TAAC                            :0xe
14:21:47: Time Access 2 NSAC*100                        :0x0
14:21:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:47: Card Command Classess CCC                     :0x5b5
14:21:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:47: DSR(driver stage register)  DSR_IMP           :0x0
14:21:47: Reserv2                                       :0x0
14:21:47: Device Size C_SIZE                            :0xedc8
14:21:47: Reserv3                                       :0x0
14:21:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:47: Reserv4                                       :0x0
14:21:47: Write Speed Factor R2W_FACTOR                 :0x2
14:21:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:47: FILE_FORMAT_GRP                               :0x0
14:21:47: COPY flag                                     :0x1
14:21:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:47: File_Format                                   :0x0
14:21:47: CRC                                           :0x0
14:21:47: ####CSD Registe Values####  

14:21:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:47: [GetSCRRegisterEntry] Passed
14:21:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:47: Data_Status_After Erases          : 0
14:21:47: CPRM Security Support             : No Security
14:21:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:47: Spec. Version                     : Version 3.0X
14:21:47: Extended Security Support         : Extended_Security_Not_Supported
14:21:47: Command Support                   : COMMAND_SUPPORT
14:21:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8A80>, <py_sfcl.CommandDataDefinition object at 0x06431A80>) , Command count = 1279 ] 
14:21:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AA80>, <py_sfcl.CommandDataDefinition object at 0x06431900>) , Command count = 1280 ] 
14:21:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:47: [ SetBusWidth(0x4) , Command count = 1281 ] 
14:21:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642EA80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1282 ] 
14:21:47: Protected Area Size 0x28000
14:21:47: Bus Width           2
14:21:47: Secure Mode         0
14:21:47: Speed  Class        4
14:21:47: Perf Move           0
14:21:47: Au Size             9
14:21:47: Erase Size          15
14:21:47: Erase Timeout       1
14:21:47: Erase offset        1
14:21:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1283 ] 
14:21:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:47: Host Frequency set to 100000 KHz
14:21:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:47: ####CSD Registe 2.0 Values####
14:21:47: CSD_STRUCTURE                                 :0x1
14:21:47: Reserv1                                       :0x0
14:21:47: Time Access 1 TAAC                            :0xe
14:21:47: Time Access 2 NSAC*100                        :0x0
14:21:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:47: Card Command Classess CCC                     :0x5b5
14:21:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:47: DSR(driver stage register)  DSR_IMP           :0x0
14:21:47: Reserv2                                       :0x0
14:21:47: Device Size C_SIZE                            :0xedc8
14:21:47: Reserv3                                       :0x0
14:21:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:47: Reserv4                                       :0x0
14:21:47: Write Speed Factor R2W_FACTOR                 :0x2
14:21:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:47: FILE_FORMAT_GRP                               :0x0
14:21:47: COPY flag                                     :0x1
14:21:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:47: File_Format                                   :0x0
14:21:47: CRC                                           :0x0
14:21:47: ####CSD Registe Values####  

14:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D91180>, <py_sfcl.CommandDataDefinition object at 0x05D91210>) , Command count = 1284 ] 
14:21:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ED20>, <py_sfcl.CommandDataDefinition object at 0x064313F0>) , Command count = 1285 ] 
14:21:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF7E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E6F0>, <py_sfcl.PySEnhancedCmdData object at 0x06431A50>, <None>, <py_sfcl.Command23 object at 0x064315A0>) , Command count = 1286 ] 
14:21:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 22
14:21:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF810>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431B40>, <py_sfcl.PySEnhancedCmdData object at 0x06431B70>, <None>, <py_sfcl.Command23 object at 0x06431180>) , Command count = 1287 ] 
14:21:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E4E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431810>, <py_sfcl.PySEnhancedCmdData object at 0x06431690>, <None>, <py_sfcl.Command23 object at 0x06431AB0>) , Command count = 1288 ] 
14:21:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:49: Host Frequency set to 25000 KHz
14:21:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF960>, 0x0, True) , Command count = 1289 ] 
14:21:49: [GO18_globalSetVolt]### Host voltage value is set.
14:21:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431BA0>, 0x0, False) , Command count = 1290 ] 
14:21:49: [GO18_globalSetVolt]### Host voltage value is set.
14:21:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1291 ] 
14:21:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1292 ] 
14:21:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1293 ] 
14:21:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB10>, <py_sfcl.CommandDataDefinition object at 0x05DA7C60>) , Command count = 1294 ] 
14:21:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D7EAE0>, <py_sfcl.CommandDataDefinition object at 0x06431720>) , Command count = 1295 ] 
14:21:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:49: [ SetCardRCA(0x1, 0xD555) , Command count = 1296 ] 
14:21:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:49: Host Frequency set to 25000 KHz
14:21:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:49: ####CSD Registe 2.0 Values####
14:21:49: CSD_STRUCTURE                                 :0x1
14:21:49: Reserv1                                       :0x0
14:21:49: Time Access 1 TAAC                            :0xe
14:21:49: Time Access 2 NSAC*100                        :0x0
14:21:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:49: Card Command Classess CCC                     :0x5b5
14:21:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:49: DSR(driver stage register)  DSR_IMP           :0x0
14:21:49: Reserv2                                       :0x0
14:21:49: Device Size C_SIZE                            :0xedc8
14:21:49: Reserv3                                       :0x0
14:21:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:49: Reserv4                                       :0x0
14:21:49: Write Speed Factor R2W_FACTOR                 :0x2
14:21:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:49: FILE_FORMAT_GRP                               :0x0
14:21:49: COPY flag                                     :0x1
14:21:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:49: File_Format                                   :0x0
14:21:49: CRC                                           :0x0
14:21:49: ####CSD Registe Values####  

14:21:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:49: [GetSCRRegisterEntry] Passed
14:21:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:49: Data_Status_After Erases          : 0
14:21:49: CPRM Security Support             : No Security
14:21:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:49: Spec. Version                     : Version 3.0X
14:21:49: Extended Security Support         : Extended_Security_Not_Supported
14:21:49: Command Support                   : COMMAND_SUPPORT
14:21:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB40>, <py_sfcl.CommandDataDefinition object at 0x06431FC0>) , Command count = 1297 ] 
14:21:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431840>, <py_sfcl.CommandDataDefinition object at 0x06431990>) , Command count = 1298 ] 
14:21:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:49: [ SetBusWidth(0x4) , Command count = 1299 ] 
14:21:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x064311E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1300 ] 
14:21:49: Protected Area Size 0x28000
14:21:49: Bus Width           2
14:21:49: Secure Mode         0
14:21:49: Speed  Class        4
14:21:49: Perf Move           0
14:21:49: Au Size             9
14:21:49: Erase Size          15
14:21:49: Erase Timeout       1
14:21:49: Erase offset        1
14:21:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1301 ] 
14:21:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:50: Host Frequency set to 100000 KHz
14:21:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:50: ####CSD Registe 2.0 Values####
14:21:50: CSD_STRUCTURE                                 :0x1
14:21:50: Reserv1                                       :0x0
14:21:50: Time Access 1 TAAC                            :0xe
14:21:50: Time Access 2 NSAC*100                        :0x0
14:21:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:50: Card Command Classess CCC                     :0x5b5
14:21:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:50: DSR(driver stage register)  DSR_IMP           :0x0
14:21:50: Reserv2                                       :0x0
14:21:50: Device Size C_SIZE                            :0xedc8
14:21:50: Reserv3                                       :0x0
14:21:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:50: Reserv4                                       :0x0
14:21:50: Write Speed Factor R2W_FACTOR                 :0x2
14:21:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:50: FILE_FORMAT_GRP                               :0x0
14:21:50: COPY flag                                     :0x1
14:21:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:50: File_Format                                   :0x0
14:21:50: CRC                                           :0x0
14:21:50: ####CSD Registe Values####  

14:21:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E14B0>, <py_sfcl.CommandDataDefinition object at 0x05DEFE10>) , Command count = 1302 ] 
14:21:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064311B0>, <py_sfcl.CommandDataDefinition object at 0x064318D0>) , Command count = 1303 ] 
14:21:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F90>, <py_sfcl.PySEnhancedCmdData object at 0x06431C90>, <None>, <py_sfcl.Command23 object at 0x06431450>) , Command count = 1304 ] 
14:21:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 21
14:21:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431E10>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F00>, <py_sfcl.PySEnhancedCmdData object at 0x06431BD0>, <None>, <py_sfcl.Command23 object at 0x06431CC0>) , Command count = 1305 ] 
14:21:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7FC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431930>, <py_sfcl.PySEnhancedCmdData object at 0x06431600>, <None>, <py_sfcl.Command23 object at 0x06431C00>) , Command count = 1306 ] 
14:21:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:50: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:52: Host Frequency set to 25000 KHz
14:21:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:52: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x064140F0>, 0x0, True) , Command count = 1307 ] 
14:21:52: [GO18_globalSetVolt]### Host voltage value is set.
14:21:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431480>, 0x0, False) , Command count = 1308 ] 
14:21:52: [GO18_globalSetVolt]### Host voltage value is set.
14:21:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1309 ] 
14:21:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1310 ] 
14:21:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1311 ] 
14:21:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414690>, <py_sfcl.CommandDataDefinition object at 0x06414B40>) , Command count = 1312 ] 
14:21:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431C30>, <py_sfcl.CommandDataDefinition object at 0x06431CF0>) , Command count = 1313 ] 
14:21:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:52: [ SetCardRCA(0x1, 0xD555) , Command count = 1314 ] 
14:21:52: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:52: Host Frequency set to 25000 KHz
14:21:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:52: ####CSD Registe 2.0 Values####
14:21:52: CSD_STRUCTURE                                 :0x1
14:21:52: Reserv1                                       :0x0
14:21:52: Time Access 1 TAAC                            :0xe
14:21:52: Time Access 2 NSAC*100                        :0x0
14:21:52: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:52: Card Command Classess CCC                     :0x5b5
14:21:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:52: DSR(driver stage register)  DSR_IMP           :0x0
14:21:52: Reserv2                                       :0x0
14:21:52: Device Size C_SIZE                            :0xedc8
14:21:52: Reserv3                                       :0x0
14:21:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:52: Reserv4                                       :0x0
14:21:52: Write Speed Factor R2W_FACTOR                 :0x2
14:21:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:52: FILE_FORMAT_GRP                               :0x0
14:21:52: COPY flag                                     :0x1
14:21:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:52: File_Format                                   :0x0
14:21:52: CRC                                           :0x0
14:21:52: ####CSD Registe Values####  

14:21:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:52: [GetSCRRegisterEntry] Passed
14:21:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:52: Data_Status_After Erases          : 0
14:21:52: CPRM Security Support             : No Security
14:21:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:52: Spec. Version                     : Version 3.0X
14:21:52: Extended Security Support         : Extended_Security_Not_Supported
14:21:52: Command Support                   : COMMAND_SUPPORT
14:21:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431EA0>, <py_sfcl.CommandDataDefinition object at 0x06414360>) , Command count = 1315 ] 
14:21:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8C30>, <py_sfcl.CommandDataDefinition object at 0x064146F0>) , Command count = 1316 ] 
14:21:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:52: [ SetBusWidth(0x4) , Command count = 1317 ] 
14:21:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B6F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1318 ] 
14:21:52: Protected Area Size 0x28000
14:21:52: Bus Width           2
14:21:52: Secure Mode         0
14:21:52: Speed  Class        4
14:21:52: Perf Move           0
14:21:52: Au Size             9
14:21:52: Erase Size          15
14:21:52: Erase Timeout       1
14:21:52: Erase offset        1
14:21:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1319 ] 
14:21:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:52: Host Frequency set to 100000 KHz
14:21:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:52: ####CSD Registe 2.0 Values####
14:21:52: CSD_STRUCTURE                                 :0x1
14:21:52: Reserv1                                       :0x0
14:21:52: Time Access 1 TAAC                            :0xe
14:21:52: Time Access 2 NSAC*100                        :0x0
14:21:52: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:52: Card Command Classess CCC                     :0x5b5
14:21:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:52: DSR(driver stage register)  DSR_IMP           :0x0
14:21:52: Reserv2                                       :0x0
14:21:52: Device Size C_SIZE                            :0xedc8
14:21:52: Reserv3                                       :0x0
14:21:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:52: Reserv4                                       :0x0
14:21:52: Write Speed Factor R2W_FACTOR                 :0x2
14:21:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:52: FILE_FORMAT_GRP                               :0x0
14:21:52: COPY flag                                     :0x1
14:21:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:52: File_Format                                   :0x0
14:21:52: CRC                                           :0x0
14:21:52: ####CSD Registe Values####  

14:21:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431960>, <py_sfcl.CommandDataDefinition object at 0x062E11E0>) , Command count = 1320 ] 
14:21:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064319C0>, <py_sfcl.CommandDataDefinition object at 0x06431780>) , Command count = 1321 ] 
14:21:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431F60>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064316C0>, <py_sfcl.PySEnhancedCmdData object at 0x06431B10>, <None>, <py_sfcl.Command23 object at 0x06431C60>) , Command count = 1322 ] 
14:21:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 20
14:21:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414FC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414300>, <py_sfcl.PySEnhancedCmdData object at 0x06414990>, <None>, <py_sfcl.Command23 object at 0x06414DB0>) , Command count = 1323 ] 
14:21:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEFAE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414C60>, <py_sfcl.PySEnhancedCmdData object at 0x064146F0>, <None>, <py_sfcl.Command23 object at 0x06414A50>) , Command count = 1324 ] 
14:21:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:52: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:55: Host Frequency set to 25000 KHz
14:21:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x064517B0>, 0x0, True) , Command count = 1325 ] 
14:21:55: [GO18_globalSetVolt]### Host voltage value is set.
14:21:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645B240>, 0x0, False) , Command count = 1326 ] 
14:21:55: [GO18_globalSetVolt]### Host voltage value is set.
14:21:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1327 ] 
14:21:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1328 ] 
14:21:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1329 ] 
14:21:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414DE0>, <py_sfcl.CommandDataDefinition object at 0x06431D50>) , Command count = 1330 ] 
14:21:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064519F0>, <py_sfcl.CommandDataDefinition object at 0x06451EA0>) , Command count = 1331 ] 
14:21:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1332 ] 
14:21:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:55: Host Frequency set to 25000 KHz
14:21:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:55: ####CSD Registe 2.0 Values####
14:21:55: CSD_STRUCTURE                                 :0x1
14:21:55: Reserv1                                       :0x0
14:21:55: Time Access 1 TAAC                            :0xe
14:21:55: Time Access 2 NSAC*100                        :0x0
14:21:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:55: Card Command Classess CCC                     :0x5b5
14:21:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:55: DSR(driver stage register)  DSR_IMP           :0x0
14:21:55: Reserv2                                       :0x0
14:21:55: Device Size C_SIZE                            :0xedc8
14:21:55: Reserv3                                       :0x0
14:21:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:55: Reserv4                                       :0x0
14:21:55: Write Speed Factor R2W_FACTOR                 :0x2
14:21:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:55: FILE_FORMAT_GRP                               :0x0
14:21:55: COPY flag                                     :0x1
14:21:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:55: File_Format                                   :0x0
14:21:55: CRC                                           :0x0
14:21:55: ####CSD Registe Values####  

14:21:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:55: [GetSCRRegisterEntry] Passed
14:21:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:55: Data_Status_After Erases          : 0
14:21:55: CPRM Security Support             : No Security
14:21:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:55: Spec. Version                     : Version 3.0X
14:21:55: Extended Security Support         : Extended_Security_Not_Supported
14:21:55: Command Support                   : COMMAND_SUPPORT
14:21:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1A80>, <py_sfcl.CommandDataDefinition object at 0x064149F0>) , Command count = 1333 ] 
14:21:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB70>, <py_sfcl.CommandDataDefinition object at 0x06451870>) , Command count = 1334 ] 
14:21:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:55: [ SetBusWidth(0x4) , Command count = 1335 ] 
14:21:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1336 ] 
14:21:55: Protected Area Size 0x28000
14:21:55: Bus Width           2
14:21:55: Secure Mode         0
14:21:55: Speed  Class        4
14:21:55: Perf Move           0
14:21:55: Au Size             9
14:21:55: Erase Size          15
14:21:55: Erase Timeout       1
14:21:55: Erase offset        1
14:21:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1337 ] 
14:21:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:55: Host Frequency set to 100000 KHz
14:21:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:55: ####CSD Registe 2.0 Values####
14:21:55: CSD_STRUCTURE                                 :0x1
14:21:55: Reserv1                                       :0x0
14:21:55: Time Access 1 TAAC                            :0xe
14:21:55: Time Access 2 NSAC*100                        :0x0
14:21:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:55: Card Command Classess CCC                     :0x5b5
14:21:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:55: DSR(driver stage register)  DSR_IMP           :0x0
14:21:55: Reserv2                                       :0x0
14:21:55: Device Size C_SIZE                            :0xedc8
14:21:55: Reserv3                                       :0x0
14:21:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:55: Reserv4                                       :0x0
14:21:55: Write Speed Factor R2W_FACTOR                 :0x2
14:21:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:55: FILE_FORMAT_GRP                               :0x0
14:21:55: COPY flag                                     :0x1
14:21:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:55: File_Format                                   :0x0
14:21:55: CRC                                           :0x0
14:21:55: ####CSD Registe Values####  

14:21:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414CF0>, <py_sfcl.CommandDataDefinition object at 0x064142A0>) , Command count = 1338 ] 
14:21:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFAB0>, <py_sfcl.CommandDataDefinition object at 0x06414870>) , Command count = 1339 ] 
14:21:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064142D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064518A0>, <py_sfcl.PySEnhancedCmdData object at 0x064515A0>, <None>, <py_sfcl.Command23 object at 0x064148A0>) , Command count = 1340 ] 
14:21:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 19
14:21:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06451BD0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B570>, <None>, <py_sfcl.Command23 object at 0x06451B10>) , Command count = 1341 ] 
14:21:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645B210>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BE40>, <py_sfcl.PySEnhancedCmdData object at 0x0645B270>, <None>, <py_sfcl.Command23 object at 0x0645B5A0>) , Command count = 1342 ] 
14:21:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:21:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:57: Host Frequency set to 25000 KHz
14:21:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:21:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:21:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x064516C0>, 0x0, True) , Command count = 1343 ] 
14:21:57: [GO18_globalSetVolt]### Host voltage value is set.
14:21:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:21:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451C60>, 0x0, False) , Command count = 1344 ] 
14:21:57: [GO18_globalSetVolt]### Host voltage value is set.
14:21:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1345 ] 
14:21:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:21:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1346 ] 
14:21:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:21:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:21:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:21:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:21:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:21:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1347 ] 
14:21:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:21:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:21:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F120>, <py_sfcl.CommandDataDefinition object at 0x064519C0>) , Command count = 1348 ] 
14:21:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:21:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F1E0>, <py_sfcl.CommandDataDefinition object at 0x06451390>) , Command count = 1349 ] 
14:21:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:21:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1350 ] 
14:21:58: [DVTCommonLib]### Identification :Idenfication of card completed 

14:21:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:21:58: Host Frequency set to 25000 KHz
14:21:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:21:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:58: ####CSD Registe 2.0 Values####
14:21:58: CSD_STRUCTURE                                 :0x1
14:21:58: Reserv1                                       :0x0
14:21:58: Time Access 1 TAAC                            :0xe
14:21:58: Time Access 2 NSAC*100                        :0x0
14:21:58: Data Transfer Rate TRAN_SPEED                 :0x32
14:21:58: Card Command Classess CCC                     :0x5b5
14:21:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:58: DSR(driver stage register)  DSR_IMP           :0x0
14:21:58: Reserv2                                       :0x0
14:21:58: Device Size C_SIZE                            :0xedc8
14:21:58: Reserv3                                       :0x0
14:21:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:58: Reserv4                                       :0x0
14:21:58: Write Speed Factor R2W_FACTOR                 :0x2
14:21:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:58: FILE_FORMAT_GRP                               :0x0
14:21:58: COPY flag                                     :0x1
14:21:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:58: File_Format                                   :0x0
14:21:58: CRC                                           :0x0
14:21:58: ####CSD Registe Values####  

14:21:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:21:58: [GetSCRRegisterEntry] Passed
14:21:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:21:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:21:58: Data_Status_After Erases          : 0
14:21:58: CPRM Security Support             : No Security
14:21:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:21:58: Spec. Version                     : Version 3.0X
14:21:58: Extended Security Support         : Extended_Security_Not_Supported
14:21:58: Command Support                   : COMMAND_SUPPORT
14:21:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:21:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F3F0>, <py_sfcl.CommandDataDefinition object at 0x0641F210>) , Command count = 1351 ] 
14:21:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:21:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431ED0>, <py_sfcl.CommandDataDefinition object at 0x0641F150>) , Command count = 1352 ] 
14:21:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:21:58: [ SetBusWidth(0x4) , Command count = 1353 ] 
14:21:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:21:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B9C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1354 ] 
14:21:58: Protected Area Size 0x28000
14:21:58: Bus Width           2
14:21:58: Secure Mode         0
14:21:58: Speed  Class        4
14:21:58: Perf Move           0
14:21:58: Au Size             9
14:21:58: Erase Size          15
14:21:58: Erase Timeout       1
14:21:58: Erase offset        1
14:21:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:21:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:21:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:21:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1355 ] 
14:21:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:21:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:21:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:21:58: Host Frequency set to 100000 KHz
14:21:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:21:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:21:58: ####CSD Registe 2.0 Values####
14:21:58: CSD_STRUCTURE                                 :0x1
14:21:58: Reserv1                                       :0x0
14:21:58: Time Access 1 TAAC                            :0xe
14:21:58: Time Access 2 NSAC*100                        :0x0
14:21:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:21:58: Card Command Classess CCC                     :0x5b5
14:21:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:21:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:21:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:21:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:21:58: DSR(driver stage register)  DSR_IMP           :0x0
14:21:58: Reserv2                                       :0x0
14:21:58: Device Size C_SIZE                            :0xedc8
14:21:58: Reserv3                                       :0x0
14:21:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:21:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:21:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:21:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:21:58: Reserv4                                       :0x0
14:21:58: Write Speed Factor R2W_FACTOR                 :0x2
14:21:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:21:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:21:58: FILE_FORMAT_GRP                               :0x0
14:21:58: COPY flag                                     :0x1
14:21:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:21:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:21:58: File_Format                                   :0x0
14:21:58: CRC                                           :0x0
14:21:58: ####CSD Registe Values####  

14:21:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451630>, <py_sfcl.CommandDataDefinition object at 0x06451570>) , Command count = 1356 ] 
14:21:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:21:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414BD0>, <py_sfcl.CommandDataDefinition object at 0x0641F090>) , Command count = 1357 ] 
14:21:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:21:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:21:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F180>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F540>, <py_sfcl.PySEnhancedCmdData object at 0x0641F1B0>, <None>, <py_sfcl.Command23 object at 0x0645BD80>) , Command count = 1358 ] 
14:21:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 18
14:21:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:21:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F4B0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B840>, <None>, <py_sfcl.Command23 object at 0x0645B390>) , Command count = 1359 ] 
14:21:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:21:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:21:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451690>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BAE0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B2D0>, <None>, <py_sfcl.Command23 object at 0x0645B300>) , Command count = 1360 ] 
14:21:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:21:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:00: Host Frequency set to 25000 KHz
14:22:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB10>, 0x0, True) , Command count = 1361 ] 
14:22:00: [GO18_globalSetVolt]### Host voltage value is set.
14:22:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451ED0>, 0x0, False) , Command count = 1362 ] 
14:22:00: [GO18_globalSetVolt]### Host voltage value is set.
14:22:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1363 ] 
14:22:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1364 ] 
14:22:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1365 ] 
14:22:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451E40>, <py_sfcl.CommandDataDefinition object at 0x06451600>) , Command count = 1366 ] 
14:22:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FC90>, <py_sfcl.CommandDataDefinition object at 0x0641F0C0>) , Command count = 1367 ] 
14:22:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:00: [ SetCardRCA(0x1, 0xD555) , Command count = 1368 ] 
14:22:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:00: Host Frequency set to 25000 KHz
14:22:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:00: ####CSD Registe 2.0 Values####
14:22:00: CSD_STRUCTURE                                 :0x1
14:22:00: Reserv1                                       :0x0
14:22:00: Time Access 1 TAAC                            :0xe
14:22:00: Time Access 2 NSAC*100                        :0x0
14:22:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:00: Card Command Classess CCC                     :0x5b5
14:22:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:00: DSR(driver stage register)  DSR_IMP           :0x0
14:22:00: Reserv2                                       :0x0
14:22:00: Device Size C_SIZE                            :0xedc8
14:22:00: Reserv3                                       :0x0
14:22:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:00: Reserv4                                       :0x0
14:22:00: Write Speed Factor R2W_FACTOR                 :0x2
14:22:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:00: FILE_FORMAT_GRP                               :0x0
14:22:00: COPY flag                                     :0x1
14:22:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:00: File_Format                                   :0x0
14:22:00: CRC                                           :0x0
14:22:00: ####CSD Registe Values####  

14:22:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:01: [GetSCRRegisterEntry] Passed
14:22:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:01: Data_Status_After Erases          : 0
14:22:01: CPRM Security Support             : No Security
14:22:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:01: Spec. Version                     : Version 3.0X
14:22:01: Extended Security Support         : Extended_Security_Not_Supported
14:22:01: Command Support                   : COMMAND_SUPPORT
14:22:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FB70>, <py_sfcl.CommandDataDefinition object at 0x0641FCF0>) , Command count = 1369 ] 
14:22:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414570>, <py_sfcl.CommandDataDefinition object at 0x0641FBA0>) , Command count = 1370 ] 
14:22:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:01: [ SetBusWidth(0x4) , Command count = 1371 ] 
14:22:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1372 ] 
14:22:01: Protected Area Size 0x28000
14:22:01: Bus Width           2
14:22:01: Secure Mode         0
14:22:01: Speed  Class        4
14:22:01: Perf Move           0
14:22:01: Au Size             9
14:22:01: Erase Size          15
14:22:01: Erase Timeout       1
14:22:01: Erase offset        1
14:22:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1373 ] 
14:22:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:01: Host Frequency set to 100000 KHz
14:22:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:01: ####CSD Registe 2.0 Values####
14:22:01: CSD_STRUCTURE                                 :0x1
14:22:01: Reserv1                                       :0x0
14:22:01: Time Access 1 TAAC                            :0xe
14:22:01: Time Access 2 NSAC*100                        :0x0
14:22:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:01: Card Command Classess CCC                     :0x5b5
14:22:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:01: DSR(driver stage register)  DSR_IMP           :0x0
14:22:01: Reserv2                                       :0x0
14:22:01: Device Size C_SIZE                            :0xedc8
14:22:01: Reserv3                                       :0x0
14:22:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:01: Reserv4                                       :0x0
14:22:01: Write Speed Factor R2W_FACTOR                 :0x2
14:22:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:01: FILE_FORMAT_GRP                               :0x0
14:22:01: COPY flag                                     :0x1
14:22:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:01: File_Format                                   :0x0
14:22:01: CRC                                           :0x0
14:22:01: ####CSD Registe Values####  

14:22:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467060>, <py_sfcl.CommandDataDefinition object at 0x0641FF90>) , Command count = 1374 ] 
14:22:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FC60>, <py_sfcl.CommandDataDefinition object at 0x0641FF00>) , Command count = 1375 ] 
14:22:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064671E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467210>, <py_sfcl.PySEnhancedCmdData object at 0x06467240>, <None>, <py_sfcl.Command23 object at 0x0645BB70>) , Command count = 1376 ] 
14:22:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 17
14:22:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064670C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064670F0>, <py_sfcl.PySEnhancedCmdData object at 0x06467120>, <None>, <py_sfcl.Command23 object at 0x0645BD20>) , Command count = 1377 ] 
14:22:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451FC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BB10>, <py_sfcl.PySEnhancedCmdData object at 0x0645B930>, <None>, <py_sfcl.Command23 object at 0x0641F510>) , Command count = 1378 ] 
14:22:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:01: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:03: Host Frequency set to 25000 KHz
14:22:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:03: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x064675A0>, 0x0, True) , Command count = 1379 ] 
14:22:03: [GO18_globalSetVolt]### Host voltage value is set.
14:22:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645B1B0>, 0x0, False) , Command count = 1380 ] 
14:22:03: [GO18_globalSetVolt]### Host voltage value is set.
14:22:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1381 ] 
14:22:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1382 ] 
14:22:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1383 ] 
14:22:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467540>, <py_sfcl.CommandDataDefinition object at 0x064674E0>) , Command count = 1384 ] 
14:22:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F0F0>, <py_sfcl.CommandDataDefinition object at 0x0641F2A0>) , Command count = 1385 ] 
14:22:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:03: [ SetCardRCA(0x1, 0xD555) , Command count = 1386 ] 
14:22:03: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:03: Host Frequency set to 25000 KHz
14:22:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:03: ####CSD Registe 2.0 Values####
14:22:03: CSD_STRUCTURE                                 :0x1
14:22:03: Reserv1                                       :0x0
14:22:03: Time Access 1 TAAC                            :0xe
14:22:03: Time Access 2 NSAC*100                        :0x0
14:22:03: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:03: Card Command Classess CCC                     :0x5b5
14:22:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:03: DSR(driver stage register)  DSR_IMP           :0x0
14:22:03: Reserv2                                       :0x0
14:22:03: Device Size C_SIZE                            :0xedc8
14:22:03: Reserv3                                       :0x0
14:22:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:03: Reserv4                                       :0x0
14:22:03: Write Speed Factor R2W_FACTOR                 :0x2
14:22:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:03: FILE_FORMAT_GRP                               :0x0
14:22:03: COPY flag                                     :0x1
14:22:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:03: File_Format                                   :0x0
14:22:03: CRC                                           :0x0
14:22:03: ####CSD Registe Values####  

14:22:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:03: [GetSCRRegisterEntry] Passed
14:22:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:03: Data_Status_After Erases          : 0
14:22:03: CPRM Security Support             : No Security
14:22:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:03: Spec. Version                     : Version 3.0X
14:22:03: Extended Security Support         : Extended_Security_Not_Supported
14:22:03: Command Support                   : COMMAND_SUPPORT
14:22:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FDE0>, <py_sfcl.CommandDataDefinition object at 0x06467840>) , Command count = 1387 ] 
14:22:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414A80>, <py_sfcl.CommandDataDefinition object at 0x06467570>) , Command count = 1388 ] 
14:22:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:03: [ SetBusWidth(0x4) , Command count = 1389 ] 
14:22:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B3F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1390 ] 
14:22:03: Protected Area Size 0x28000
14:22:03: Bus Width           2
14:22:03: Secure Mode         0
14:22:03: Speed  Class        4
14:22:03: Perf Move           0
14:22:03: Au Size             9
14:22:03: Erase Size          15
14:22:03: Erase Timeout       1
14:22:03: Erase offset        1
14:22:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1391 ] 
14:22:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:03: Host Frequency set to 100000 KHz
14:22:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:03: ####CSD Registe 2.0 Values####
14:22:03: CSD_STRUCTURE                                 :0x1
14:22:03: Reserv1                                       :0x0
14:22:03: Time Access 1 TAAC                            :0xe
14:22:03: Time Access 2 NSAC*100                        :0x0
14:22:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:03: Card Command Classess CCC                     :0x5b5
14:22:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:03: DSR(driver stage register)  DSR_IMP           :0x0
14:22:03: Reserv2                                       :0x0
14:22:03: Device Size C_SIZE                            :0xedc8
14:22:03: Reserv3                                       :0x0
14:22:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:03: Reserv4                                       :0x0
14:22:03: Write Speed Factor R2W_FACTOR                 :0x2
14:22:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:03: FILE_FORMAT_GRP                               :0x0
14:22:03: COPY flag                                     :0x1
14:22:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:03: File_Format                                   :0x0
14:22:03: CRC                                           :0x0
14:22:03: ####CSD Registe Values####  

14:22:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467A50>, <py_sfcl.CommandDataDefinition object at 0x06467870>) , Command count = 1392 ] 
14:22:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467390>, <py_sfcl.CommandDataDefinition object at 0x06467330>) , Command count = 1393 ] 
14:22:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467990>, <py_sfcl.PySEnhancedCmdData object at 0x064679C0>, <None>, <py_sfcl.Command23 object at 0x064671B0>) , Command count = 1394 ] 
14:22:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 16
14:22:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06467AE0>, <None>, <py_sfcl.Command23 object at 0x06467720>) , Command count = 1395 ] 
14:22:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645B4B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BE70>, <py_sfcl.PySEnhancedCmdData object at 0x0645B930>, <None>, <py_sfcl.Command23 object at 0x064678A0>) , Command count = 1396 ] 
14:22:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:06: Host Frequency set to 25000 KHz
14:22:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467E40>, 0x0, True) , Command count = 1397 ] 
14:22:06: [GO18_globalSetVolt]### Host voltage value is set.
14:22:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467600>, 0x0, False) , Command count = 1398 ] 
14:22:06: [GO18_globalSetVolt]### Host voltage value is set.
14:22:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1399 ] 
14:22:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1400 ] 
14:22:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1401 ] 
14:22:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467DE0>, <py_sfcl.CommandDataDefinition object at 0x06467D80>) , Command count = 1402 ] 
14:22:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467ED0>, <py_sfcl.CommandDataDefinition object at 0x06467150>) , Command count = 1403 ] 
14:22:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1404 ] 
14:22:06: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:06: Host Frequency set to 25000 KHz
14:22:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:06: ####CSD Registe 2.0 Values####
14:22:06: CSD_STRUCTURE                                 :0x1
14:22:06: Reserv1                                       :0x0
14:22:06: Time Access 1 TAAC                            :0xe
14:22:06: Time Access 2 NSAC*100                        :0x0
14:22:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:06: Card Command Classess CCC                     :0x5b5
14:22:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:06: DSR(driver stage register)  DSR_IMP           :0x0
14:22:06: Reserv2                                       :0x0
14:22:06: Device Size C_SIZE                            :0xedc8
14:22:06: Reserv3                                       :0x0
14:22:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:06: Reserv4                                       :0x0
14:22:06: Write Speed Factor R2W_FACTOR                 :0x2
14:22:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:06: FILE_FORMAT_GRP                               :0x0
14:22:06: COPY flag                                     :0x1
14:22:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:06: File_Format                                   :0x0
14:22:06: CRC                                           :0x0
14:22:06: ####CSD Registe Values####  

14:22:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:06: [GetSCRRegisterEntry] Passed
14:22:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:06: Data_Status_After Erases          : 0
14:22:06: CPRM Security Support             : No Security
14:22:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:06: Spec. Version                     : Version 3.0X
14:22:06: Extended Security Support         : Extended_Security_Not_Supported
14:22:06: Command Support                   : COMMAND_SUPPORT
14:22:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421030>, <py_sfcl.CommandDataDefinition object at 0x06467F00>) , Command count = 1405 ] 
14:22:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FF60>, <py_sfcl.CommandDataDefinition object at 0x06467420>) , Command count = 1406 ] 
14:22:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:06: [ SetBusWidth(0x4) , Command count = 1407 ] 
14:22:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B7E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1408 ] 
14:22:06: Protected Area Size 0x28000
14:22:06: Bus Width           2
14:22:06: Secure Mode         0
14:22:06: Speed  Class        4
14:22:06: Perf Move           0
14:22:06: Au Size             9
14:22:06: Erase Size          15
14:22:06: Erase Timeout       1
14:22:06: Erase offset        1
14:22:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1409 ] 
14:22:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:06: Host Frequency set to 100000 KHz
14:22:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:06: ####CSD Registe 2.0 Values####
14:22:06: CSD_STRUCTURE                                 :0x1
14:22:06: Reserv1                                       :0x0
14:22:06: Time Access 1 TAAC                            :0xe
14:22:06: Time Access 2 NSAC*100                        :0x0
14:22:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:06: Card Command Classess CCC                     :0x5b5
14:22:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:06: DSR(driver stage register)  DSR_IMP           :0x0
14:22:06: Reserv2                                       :0x0
14:22:06: Device Size C_SIZE                            :0xedc8
14:22:06: Reserv3                                       :0x0
14:22:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:06: Reserv4                                       :0x0
14:22:06: Write Speed Factor R2W_FACTOR                 :0x2
14:22:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:06: FILE_FORMAT_GRP                               :0x0
14:22:06: COPY flag                                     :0x1
14:22:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:06: File_Format                                   :0x0
14:22:06: CRC                                           :0x0
14:22:06: ####CSD Registe Values####  

14:22:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467F90>, <py_sfcl.CommandDataDefinition object at 0x06467FC0>) , Command count = 1410 ] 
14:22:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467C30>, <py_sfcl.CommandDataDefinition object at 0x06467900>) , Command count = 1411 ] 
14:22:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064212A0>, <py_sfcl.PySEnhancedCmdData object at 0x06467C00>, <None>, <py_sfcl.Command23 object at 0x06467EA0>) , Command count = 1412 ] 
14:22:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 15
14:22:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421360>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421390>, <py_sfcl.PySEnhancedCmdData object at 0x064679F0>, <None>, <py_sfcl.Command23 object at 0x06467930>) , Command count = 1413 ] 
14:22:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645B090>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BDB0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BE70>, <None>, <py_sfcl.Command23 object at 0x06467B10>) , Command count = 1414 ] 
14:22:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:08: Host Frequency set to 25000 KHz
14:22:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:08: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421720>, 0x0, True) , Command count = 1415 ] 
14:22:08: [GO18_globalSetVolt]### Host voltage value is set.
14:22:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467300>, 0x0, False) , Command count = 1416 ] 
14:22:08: [GO18_globalSetVolt]### Host voltage value is set.
14:22:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1417 ] 
14:22:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1418 ] 
14:22:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1419 ] 
14:22:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216C0>, <py_sfcl.CommandDataDefinition object at 0x06421660>) , Command count = 1420 ] 
14:22:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467BA0>, <py_sfcl.CommandDataDefinition object at 0x06467360>) , Command count = 1421 ] 
14:22:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1422 ] 
14:22:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:09: Host Frequency set to 25000 KHz
14:22:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:09: ####CSD Registe 2.0 Values####
14:22:09: CSD_STRUCTURE                                 :0x1
14:22:09: Reserv1                                       :0x0
14:22:09: Time Access 1 TAAC                            :0xe
14:22:09: Time Access 2 NSAC*100                        :0x0
14:22:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:09: Card Command Classess CCC                     :0x5b5
14:22:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:09: DSR(driver stage register)  DSR_IMP           :0x0
14:22:09: Reserv2                                       :0x0
14:22:09: Device Size C_SIZE                            :0xedc8
14:22:09: Reserv3                                       :0x0
14:22:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:09: Reserv4                                       :0x0
14:22:09: Write Speed Factor R2W_FACTOR                 :0x2
14:22:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:09: FILE_FORMAT_GRP                               :0x0
14:22:09: COPY flag                                     :0x1
14:22:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:09: File_Format                                   :0x0
14:22:09: CRC                                           :0x0
14:22:09: ####CSD Registe Values####  

14:22:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:09: [GetSCRRegisterEntry] Passed
14:22:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:09: Data_Status_After Erases          : 0
14:22:09: CPRM Security Support             : No Security
14:22:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:09: Spec. Version                     : Version 3.0X
14:22:09: Extended Security Support         : Extended_Security_Not_Supported
14:22:09: Command Support                   : COMMAND_SUPPORT
14:22:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467C60>, <py_sfcl.CommandDataDefinition object at 0x064219C0>) , Command count = 1423 ] 
14:22:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467750>, <py_sfcl.CommandDataDefinition object at 0x064216F0>) , Command count = 1424 ] 
14:22:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:09: [ SetBusWidth(0x4) , Command count = 1425 ] 
14:22:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BCC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1426 ] 
14:22:09: Protected Area Size 0x28000
14:22:09: Bus Width           2
14:22:09: Secure Mode         0
14:22:09: Speed  Class        4
14:22:09: Perf Move           0
14:22:09: Au Size             9
14:22:09: Erase Size          15
14:22:09: Erase Timeout       1
14:22:09: Erase offset        1
14:22:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1427 ] 
14:22:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:09: Host Frequency set to 100000 KHz
14:22:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:09: ####CSD Registe 2.0 Values####
14:22:09: CSD_STRUCTURE                                 :0x1
14:22:09: Reserv1                                       :0x0
14:22:09: Time Access 1 TAAC                            :0xe
14:22:09: Time Access 2 NSAC*100                        :0x0
14:22:09: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:09: Card Command Classess CCC                     :0x5b5
14:22:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:09: DSR(driver stage register)  DSR_IMP           :0x0
14:22:09: Reserv2                                       :0x0
14:22:09: Device Size C_SIZE                            :0xedc8
14:22:09: Reserv3                                       :0x0
14:22:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:09: Reserv4                                       :0x0
14:22:09: Write Speed Factor R2W_FACTOR                 :0x2
14:22:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:09: FILE_FORMAT_GRP                               :0x0
14:22:09: COPY flag                                     :0x1
14:22:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:09: File_Format                                   :0x0
14:22:09: CRC                                           :0x0
14:22:09: ####CSD Registe Values####  

14:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421BD0>, <py_sfcl.CommandDataDefinition object at 0x064219F0>) , Command count = 1428 ] 
14:22:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064676F0>, <py_sfcl.CommandDataDefinition object at 0x06421330>) , Command count = 1429 ] 
14:22:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421B10>, <py_sfcl.PySEnhancedCmdData object at 0x06421B40>, <None>, <py_sfcl.Command23 object at 0x06421420>) , Command count = 1430 ] 
14:22:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 14
14:22:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421C30>, <py_sfcl.PySEnhancedCmdData object at 0x06421C60>, <None>, <py_sfcl.Command23 object at 0x064218D0>) , Command count = 1431 ] 
14:22:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064678D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B540>, <py_sfcl.PySEnhancedCmdData object at 0x0645B090>, <None>, <py_sfcl.Command23 object at 0x06421840>) , Command count = 1432 ] 
14:22:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:09: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:11: Host Frequency set to 25000 KHz
14:22:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:11: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421FC0>, 0x0, True) , Command count = 1433 ] 
14:22:11: [GO18_globalSetVolt]### Host voltage value is set.
14:22:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421780>, 0x0, False) , Command count = 1434 ] 
14:22:11: [GO18_globalSetVolt]### Host voltage value is set.
14:22:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1435 ] 
14:22:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1436 ] 
14:22:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1437 ] 
14:22:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A060>, <py_sfcl.CommandDataDefinition object at 0x06421F60>) , Command count = 1438 ] 
14:22:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421540>, <py_sfcl.CommandDataDefinition object at 0x06421060>) , Command count = 1439 ] 
14:22:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:11: [ SetCardRCA(0x1, 0xD555) , Command count = 1440 ] 
14:22:11: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:12: Host Frequency set to 25000 KHz
14:22:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:12: ####CSD Registe 2.0 Values####
14:22:12: CSD_STRUCTURE                                 :0x1
14:22:12: Reserv1                                       :0x0
14:22:12: Time Access 1 TAAC                            :0xe
14:22:12: Time Access 2 NSAC*100                        :0x0
14:22:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:12: Card Command Classess CCC                     :0x5b5
14:22:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:12: DSR(driver stage register)  DSR_IMP           :0x0
14:22:12: Reserv2                                       :0x0
14:22:12: Device Size C_SIZE                            :0xedc8
14:22:12: Reserv3                                       :0x0
14:22:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:12: Reserv4                                       :0x0
14:22:12: Write Speed Factor R2W_FACTOR                 :0x2
14:22:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:12: FILE_FORMAT_GRP                               :0x0
14:22:12: COPY flag                                     :0x1
14:22:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:12: File_Format                                   :0x0
14:22:12: CRC                                           :0x0
14:22:12: ####CSD Registe Values####  

14:22:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:12: [GetSCRRegisterEntry] Passed
14:22:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:12: Data_Status_After Erases          : 0
14:22:12: CPRM Security Support             : No Security
14:22:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:12: Spec. Version                     : Version 3.0X
14:22:12: Extended Security Support         : Extended_Security_Not_Supported
14:22:12: Command Support                   : COMMAND_SUPPORT
14:22:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A2A0>, <py_sfcl.CommandDataDefinition object at 0x0642A0C0>) , Command count = 1441 ] 
14:22:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FF30>, <py_sfcl.CommandDataDefinition object at 0x06421F90>) , Command count = 1442 ] 
14:22:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:12: [ SetBusWidth(0x4) , Command count = 1443 ] 
14:22:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06421210>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1444 ] 
14:22:12: Protected Area Size 0x28000
14:22:12: Bus Width           2
14:22:12: Secure Mode         0
14:22:12: Speed  Class        4
14:22:12: Perf Move           0
14:22:12: Au Size             9
14:22:12: Erase Size          15
14:22:12: Erase Timeout       1
14:22:12: Erase offset        1
14:22:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1445 ] 
14:22:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:12: Host Frequency set to 100000 KHz
14:22:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:12: ####CSD Registe 2.0 Values####
14:22:12: CSD_STRUCTURE                                 :0x1
14:22:12: Reserv1                                       :0x0
14:22:12: Time Access 1 TAAC                            :0xe
14:22:12: Time Access 2 NSAC*100                        :0x0
14:22:12: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:12: Card Command Classess CCC                     :0x5b5
14:22:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:12: DSR(driver stage register)  DSR_IMP           :0x0
14:22:12: Reserv2                                       :0x0
14:22:12: Device Size C_SIZE                            :0xedc8
14:22:12: Reserv3                                       :0x0
14:22:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:12: Reserv4                                       :0x0
14:22:12: Write Speed Factor R2W_FACTOR                 :0x2
14:22:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:12: FILE_FORMAT_GRP                               :0x0
14:22:12: COPY flag                                     :0x1
14:22:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:12: File_Format                                   :0x0
14:22:12: CRC                                           :0x0
14:22:12: ####CSD Registe Values####  

14:22:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A090>, <py_sfcl.CommandDataDefinition object at 0x06421D50>) , Command count = 1446 ] 
14:22:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467D50>, <py_sfcl.CommandDataDefinition object at 0x06421750>) , Command count = 1447 ] 
14:22:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421D80>, <py_sfcl.PySEnhancedCmdData object at 0x06421BA0>, <None>, <py_sfcl.Command23 object at 0x06421CC0>) , Command count = 1448 ] 
14:22:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 13
14:22:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A510>, <py_sfcl.PySEnhancedCmdData object at 0x0642A540>, <None>, <py_sfcl.Command23 object at 0x064214B0>) , Command count = 1449 ] 
14:22:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064211B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A240>, <py_sfcl.PySEnhancedCmdData object at 0x0645BA80>, <None>, <py_sfcl.Command23 object at 0x06421B70>) , Command count = 1450 ] 
14:22:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:12: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:14: Host Frequency set to 25000 KHz
14:22:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:14: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A8A0>, 0x0, True) , Command count = 1451 ] 
14:22:14: [GO18_globalSetVolt]### Host voltage value is set.
14:22:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451D50>, 0x0, False) , Command count = 1452 ] 
14:22:14: [GO18_globalSetVolt]### Host voltage value is set.
14:22:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1453 ] 
14:22:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1454 ] 
14:22:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1455 ] 
14:22:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A840>, <py_sfcl.CommandDataDefinition object at 0x06421D20>) , Command count = 1456 ] 
14:22:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A930>, <py_sfcl.CommandDataDefinition object at 0x06421870>) , Command count = 1457 ] 
14:22:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:14: [ SetCardRCA(0x1, 0xD555) , Command count = 1458 ] 
14:22:14: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:14: Host Frequency set to 25000 KHz
14:22:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:14: ####CSD Registe 2.0 Values####
14:22:14: CSD_STRUCTURE                                 :0x1
14:22:14: Reserv1                                       :0x0
14:22:14: Time Access 1 TAAC                            :0xe
14:22:14: Time Access 2 NSAC*100                        :0x0
14:22:14: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:14: Card Command Classess CCC                     :0x5b5
14:22:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:14: DSR(driver stage register)  DSR_IMP           :0x0
14:22:14: Reserv2                                       :0x0
14:22:14: Device Size C_SIZE                            :0xedc8
14:22:14: Reserv3                                       :0x0
14:22:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:14: Reserv4                                       :0x0
14:22:14: Write Speed Factor R2W_FACTOR                 :0x2
14:22:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:14: FILE_FORMAT_GRP                               :0x0
14:22:14: COPY flag                                     :0x1
14:22:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:14: File_Format                                   :0x0
14:22:14: CRC                                           :0x0
14:22:14: ####CSD Registe Values####  

14:22:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:14: [GetSCRRegisterEntry] Passed
14:22:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:14: Data_Status_After Erases          : 0
14:22:14: CPRM Security Support             : No Security
14:22:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:14: Spec. Version                     : Version 3.0X
14:22:14: Extended Security Support         : Extended_Security_Not_Supported
14:22:14: Command Support                   : COMMAND_SUPPORT
14:22:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AB40>, <py_sfcl.CommandDataDefinition object at 0x0642A960>) , Command count = 1459 ] 
14:22:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064672D0>, <py_sfcl.CommandDataDefinition object at 0x0642A7E0>) , Command count = 1460 ] 
14:22:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:14: [ SetBusWidth(0x4) , Command count = 1461 ] 
14:22:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B450>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1462 ] 
14:22:14: Protected Area Size 0x28000
14:22:14: Bus Width           2
14:22:14: Secure Mode         0
14:22:14: Speed  Class        4
14:22:14: Perf Move           0
14:22:14: Au Size             9
14:22:14: Erase Size          15
14:22:14: Erase Timeout       1
14:22:14: Erase offset        1
14:22:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1463 ] 
14:22:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:14: Host Frequency set to 100000 KHz
14:22:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:14: ####CSD Registe 2.0 Values####
14:22:14: CSD_STRUCTURE                                 :0x1
14:22:14: Reserv1                                       :0x0
14:22:14: Time Access 1 TAAC                            :0xe
14:22:14: Time Access 2 NSAC*100                        :0x0
14:22:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:14: Card Command Classess CCC                     :0x5b5
14:22:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:14: DSR(driver stage register)  DSR_IMP           :0x0
14:22:14: Reserv2                                       :0x0
14:22:14: Device Size C_SIZE                            :0xedc8
14:22:14: Reserv3                                       :0x0
14:22:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:14: Reserv4                                       :0x0
14:22:14: Write Speed Factor R2W_FACTOR                 :0x2
14:22:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:14: FILE_FORMAT_GRP                               :0x0
14:22:14: COPY flag                                     :0x1
14:22:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:14: File_Format                                   :0x0
14:22:14: CRC                                           :0x0
14:22:14: ####CSD Registe Values####  

14:22:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064210F0>, <py_sfcl.CommandDataDefinition object at 0x0642AD50>) , Command count = 1464 ] 
14:22:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421AB0>, <py_sfcl.CommandDataDefinition object at 0x064213F0>) , Command count = 1465 ] 
14:22:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC60>, <py_sfcl.PySEnhancedCmdData object at 0x0642AC90>, <None>, <py_sfcl.Command23 object at 0x0642A1E0>) , Command count = 1466 ] 
14:22:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 12
14:22:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642ADB0>, <py_sfcl.PySEnhancedCmdData object at 0x0642ADE0>, <None>, <py_sfcl.Command23 object at 0x0642ACC0>) , Command count = 1467 ] 
14:22:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641FE10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A360>, <py_sfcl.PySEnhancedCmdData object at 0x0642A120>, <None>, <py_sfcl.Command23 object at 0x0642A3F0>) , Command count = 1468 ] 
14:22:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:14: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:17: Host Frequency set to 25000 KHz
14:22:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:17: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E030>, 0x0, True) , Command count = 1469 ] 
14:22:17: [GO18_globalSetVolt]### Host voltage value is set.
14:22:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421CF0>, 0x0, False) , Command count = 1470 ] 
14:22:17: [GO18_globalSetVolt]### Host voltage value is set.
14:22:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1471 ] 
14:22:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1472 ] 
14:22:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1473 ] 
14:22:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E150>, <py_sfcl.CommandDataDefinition object at 0x0642E0F0>) , Command count = 1474 ] 
14:22:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E210>, <py_sfcl.CommandDataDefinition object at 0x0642A150>) , Command count = 1475 ] 
14:22:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:17: [ SetCardRCA(0x1, 0xD555) , Command count = 1476 ] 
14:22:17: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:17: Host Frequency set to 25000 KHz
14:22:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:17: ####CSD Registe 2.0 Values####
14:22:17: CSD_STRUCTURE                                 :0x1
14:22:17: Reserv1                                       :0x0
14:22:17: Time Access 1 TAAC                            :0xe
14:22:17: Time Access 2 NSAC*100                        :0x0
14:22:17: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:17: Card Command Classess CCC                     :0x5b5
14:22:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:17: DSR(driver stage register)  DSR_IMP           :0x0
14:22:17: Reserv2                                       :0x0
14:22:17: Device Size C_SIZE                            :0xedc8
14:22:17: Reserv3                                       :0x0
14:22:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:17: Reserv4                                       :0x0
14:22:17: Write Speed Factor R2W_FACTOR                 :0x2
14:22:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:17: FILE_FORMAT_GRP                               :0x0
14:22:17: COPY flag                                     :0x1
14:22:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:17: File_Format                                   :0x0
14:22:17: CRC                                           :0x0
14:22:17: ####CSD Registe Values####  

14:22:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:17: [GetSCRRegisterEntry] Passed
14:22:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:17: Data_Status_After Erases          : 0
14:22:17: CPRM Security Support             : No Security
14:22:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:17: Spec. Version                     : Version 3.0X
14:22:17: Extended Security Support         : Extended_Security_Not_Supported
14:22:17: Command Support                   : COMMAND_SUPPORT
14:22:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E420>, <py_sfcl.CommandDataDefinition object at 0x0642E1B0>) , Command count = 1477 ] 
14:22:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467B70>, <py_sfcl.CommandDataDefinition object at 0x0642A300>) , Command count = 1478 ] 
14:22:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:17: [ SetBusWidth(0x4) , Command count = 1479 ] 
14:22:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BBD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1480 ] 
14:22:17: Protected Area Size 0x28000
14:22:17: Bus Width           2
14:22:17: Secure Mode         0
14:22:17: Speed  Class        4
14:22:17: Perf Move           0
14:22:17: Au Size             9
14:22:17: Erase Size          15
14:22:17: Erase Timeout       1
14:22:17: Erase offset        1
14:22:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1481 ] 
14:22:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:17: Host Frequency set to 100000 KHz
14:22:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:17: ####CSD Registe 2.0 Values####
14:22:17: CSD_STRUCTURE                                 :0x1
14:22:17: Reserv1                                       :0x0
14:22:17: Time Access 1 TAAC                            :0xe
14:22:17: Time Access 2 NSAC*100                        :0x0
14:22:17: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:17: Card Command Classess CCC                     :0x5b5
14:22:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:17: DSR(driver stage register)  DSR_IMP           :0x0
14:22:17: Reserv2                                       :0x0
14:22:17: Device Size C_SIZE                            :0xedc8
14:22:17: Reserv3                                       :0x0
14:22:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:17: Reserv4                                       :0x0
14:22:17: Write Speed Factor R2W_FACTOR                 :0x2
14:22:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:17: FILE_FORMAT_GRP                               :0x0
14:22:17: COPY flag                                     :0x1
14:22:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:17: File_Format                                   :0x0
14:22:17: CRC                                           :0x0
14:22:17: ####CSD Registe Values####  

14:22:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AED0>, <py_sfcl.CommandDataDefinition object at 0x0642AE10>) , Command count = 1482 ] 
14:22:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A390>, <py_sfcl.CommandDataDefinition object at 0x0642A8D0>) , Command count = 1483 ] 
14:22:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E330>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642AD20>, <None>, <py_sfcl.Command23 object at 0x0642A900>) , Command count = 1484 ] 
14:22:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 11
14:22:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E690>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6C0>, <None>, <py_sfcl.Command23 object at 0x0642A9C0>) , Command count = 1485 ] 
14:22:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064215D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E630>, <py_sfcl.PySEnhancedCmdData object at 0x0642A5A0>, <None>, <py_sfcl.Command23 object at 0x0642ACF0>) , Command count = 1486 ] 
14:22:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:17: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:19: Host Frequency set to 25000 KHz
14:22:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:19: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EA20>, 0x0, True) , Command count = 1487 ] 
14:22:19: [GO18_globalSetVolt]### Host voltage value is set.
14:22:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E1E0>, 0x0, False) , Command count = 1488 ] 
14:22:19: [GO18_globalSetVolt]### Host voltage value is set.
14:22:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1489 ] 
14:22:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1490 ] 
14:22:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1491 ] 
14:22:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E9C0>, <py_sfcl.CommandDataDefinition object at 0x0642AE70>) , Command count = 1492 ] 
14:22:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EAB0>, <py_sfcl.CommandDataDefinition object at 0x0642A9F0>) , Command count = 1493 ] 
14:22:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1494 ] 
14:22:20: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:20: Host Frequency set to 25000 KHz
14:22:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:20: ####CSD Registe 2.0 Values####
14:22:20: CSD_STRUCTURE                                 :0x1
14:22:20: Reserv1                                       :0x0
14:22:20: Time Access 1 TAAC                            :0xe
14:22:20: Time Access 2 NSAC*100                        :0x0
14:22:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:20: Card Command Classess CCC                     :0x5b5
14:22:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:20: DSR(driver stage register)  DSR_IMP           :0x0
14:22:20: Reserv2                                       :0x0
14:22:20: Device Size C_SIZE                            :0xedc8
14:22:20: Reserv3                                       :0x0
14:22:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:20: Reserv4                                       :0x0
14:22:20: Write Speed Factor R2W_FACTOR                 :0x2
14:22:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:20: FILE_FORMAT_GRP                               :0x0
14:22:20: COPY flag                                     :0x1
14:22:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:20: File_Format                                   :0x0
14:22:20: CRC                                           :0x0
14:22:20: ####CSD Registe Values####  

14:22:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:20: [GetSCRRegisterEntry] Passed
14:22:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:20: Data_Status_After Erases          : 0
14:22:20: CPRM Security Support             : No Security
14:22:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:20: Spec. Version                     : Version 3.0X
14:22:20: Extended Security Support         : Extended_Security_Not_Supported
14:22:20: Command Support                   : COMMAND_SUPPORT
14:22:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ECC0>, <py_sfcl.CommandDataDefinition object at 0x0642EAE0>) , Command count = 1495 ] 
14:22:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421A50>, <py_sfcl.CommandDataDefinition object at 0x0642E9F0>) , Command count = 1496 ] 
14:22:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:20: [ SetBusWidth(0x4) , Command count = 1497 ] 
14:22:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BC00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1498 ] 
14:22:20: Protected Area Size 0x28000
14:22:20: Bus Width           2
14:22:20: Secure Mode         0
14:22:20: Speed  Class        4
14:22:20: Perf Move           0
14:22:20: Au Size             9
14:22:20: Erase Size          15
14:22:20: Erase Timeout       1
14:22:20: Erase offset        1
14:22:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1499 ] 
14:22:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:20: Host Frequency set to 100000 KHz
14:22:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:20: ####CSD Registe 2.0 Values####
14:22:20: CSD_STRUCTURE                                 :0x1
14:22:20: Reserv1                                       :0x0
14:22:20: Time Access 1 TAAC                            :0xe
14:22:20: Time Access 2 NSAC*100                        :0x0
14:22:20: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:20: Card Command Classess CCC                     :0x5b5
14:22:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:20: DSR(driver stage register)  DSR_IMP           :0x0
14:22:20: Reserv2                                       :0x0
14:22:20: Device Size C_SIZE                            :0xedc8
14:22:20: Reserv3                                       :0x0
14:22:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:20: Reserv4                                       :0x0
14:22:20: Write Speed Factor R2W_FACTOR                 :0x2
14:22:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:20: FILE_FORMAT_GRP                               :0x0
14:22:20: COPY flag                                     :0x1
14:22:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:20: File_Format                                   :0x0
14:22:20: CRC                                           :0x0
14:22:20: ####CSD Registe Values####  

14:22:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EED0>, <py_sfcl.CommandDataDefinition object at 0x0642ECF0>) , Command count = 1500 ] 
14:22:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AC30>, <py_sfcl.CommandDataDefinition object at 0x0642A480>) , Command count = 1501 ] 
14:22:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EDE0>, <py_sfcl.PySEnhancedCmdData object at 0x0642EE10>, <None>, <py_sfcl.Command23 object at 0x0642AF30>) , Command count = 1502 ] 
14:22:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 10
14:22:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064310F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642EF30>, <None>, <py_sfcl.Command23 object at 0x0642EE40>) , Command count = 1503 ] 
14:22:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A570>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E480>, <py_sfcl.PySEnhancedCmdData object at 0x0642E300>, <None>, <py_sfcl.Command23 object at 0x0642E570>) , Command count = 1504 ] 
14:22:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:20: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:22: Host Frequency set to 25000 KHz
14:22:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:22: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431300>, 0x0, True) , Command count = 1505 ] 
14:22:22: [GO18_globalSetVolt]### Host voltage value is set.
14:22:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E810>, 0x0, False) , Command count = 1506 ] 
14:22:22: [GO18_globalSetVolt]### Host voltage value is set.
14:22:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1507 ] 
14:22:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1508 ] 
14:22:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1509 ] 
14:22:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312A0>, <py_sfcl.CommandDataDefinition object at 0x06431270>) , Command count = 1510 ] 
14:22:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C40B70>, <py_sfcl.CommandDataDefinition object at 0x0642E750>) , Command count = 1511 ] 
14:22:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:22: [ SetCardRCA(0x1, 0xD555) , Command count = 1512 ] 
14:22:22: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:23: Host Frequency set to 25000 KHz
14:22:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:23: ####CSD Registe 2.0 Values####
14:22:23: CSD_STRUCTURE                                 :0x1
14:22:23: Reserv1                                       :0x0
14:22:23: Time Access 1 TAAC                            :0xe
14:22:23: Time Access 2 NSAC*100                        :0x0
14:22:23: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:23: Card Command Classess CCC                     :0x5b5
14:22:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:23: DSR(driver stage register)  DSR_IMP           :0x0
14:22:23: Reserv2                                       :0x0
14:22:23: Device Size C_SIZE                            :0xedc8
14:22:23: Reserv3                                       :0x0
14:22:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:23: Reserv4                                       :0x0
14:22:23: Write Speed Factor R2W_FACTOR                 :0x2
14:22:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:23: FILE_FORMAT_GRP                               :0x0
14:22:23: COPY flag                                     :0x1
14:22:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:23: File_Format                                   :0x0
14:22:23: CRC                                           :0x0
14:22:23: ####CSD Registe Values####  

14:22:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:23: [GetSCRRegisterEntry] Passed
14:22:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:23: Data_Status_After Erases          : 0
14:22:23: CPRM Security Support             : No Security
14:22:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:23: Spec. Version                     : Version 3.0X
14:22:23: Extended Security Support         : Extended_Security_Not_Supported
14:22:23: Command Support                   : COMMAND_SUPPORT
14:22:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431570>, <py_sfcl.CommandDataDefinition object at 0x06431360>) , Command count = 1513 ] 
14:22:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A330>, <py_sfcl.CommandDataDefinition object at 0x0642E840>) , Command count = 1514 ] 
14:22:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:23: [ SetBusWidth(0x4) , Command count = 1515 ] 
14:22:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642E090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1516 ] 
14:22:23: Protected Area Size 0x28000
14:22:23: Bus Width           2
14:22:23: Secure Mode         0
14:22:23: Speed  Class        4
14:22:23: Perf Move           0
14:22:23: Au Size             9
14:22:23: Erase Size          15
14:22:23: Erase Timeout       1
14:22:23: Erase offset        1
14:22:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1517 ] 
14:22:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:23: Host Frequency set to 100000 KHz
14:22:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:23: ####CSD Registe 2.0 Values####
14:22:23: CSD_STRUCTURE                                 :0x1
14:22:23: Reserv1                                       :0x0
14:22:23: Time Access 1 TAAC                            :0xe
14:22:23: Time Access 2 NSAC*100                        :0x0
14:22:23: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:23: Card Command Classess CCC                     :0x5b5
14:22:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:23: DSR(driver stage register)  DSR_IMP           :0x0
14:22:23: Reserv2                                       :0x0
14:22:23: Device Size C_SIZE                            :0xedc8
14:22:23: Reserv3                                       :0x0
14:22:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:23: Reserv4                                       :0x0
14:22:23: Write Speed Factor R2W_FACTOR                 :0x2
14:22:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:23: FILE_FORMAT_GRP                               :0x0
14:22:23: COPY flag                                     :0x1
14:22:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:23: File_Format                                   :0x0
14:22:23: CRC                                           :0x0
14:22:23: ####CSD Registe Values####  

14:22:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7BD0>, <py_sfcl.CommandDataDefinition object at 0x05D7E1E0>) , Command count = 1518 ] 
14:22:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431510>, <py_sfcl.CommandDataDefinition object at 0x0642E0C0>) , Command count = 1519 ] 
14:22:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431420>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EFC0>, <py_sfcl.PySEnhancedCmdData object at 0x0642EEA0>, <None>, <py_sfcl.Command23 object at 0x0642EBD0>) , Command count = 1520 ] 
14:22:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 9
14:22:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7C30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431630>, <py_sfcl.PySEnhancedCmdData object at 0x064313C0>, <None>, <py_sfcl.Command23 object at 0x0642EE70>) , Command count = 1521 ] 
14:22:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431060>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E7B0>, <py_sfcl.PySEnhancedCmdData object at 0x0642E540>, <None>, <py_sfcl.Command23 object at 0x0642EF60>) , Command count = 1522 ] 
14:22:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:23: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:25: Host Frequency set to 25000 KHz
14:22:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAD180>, 0x0, True) , Command count = 1523 ] 
14:22:25: [GO18_globalSetVolt]### Host voltage value is set.
14:22:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467CF0>, 0x0, False) , Command count = 1524 ] 
14:22:25: [GO18_globalSetVolt]### Host voltage value is set.
14:22:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1525 ] 
14:22:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1526 ] 
14:22:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1527 ] 
14:22:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F90>, <py_sfcl.CommandDataDefinition object at 0x05DA7960>) , Command count = 1528 ] 
14:22:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADD50>, <py_sfcl.CommandDataDefinition object at 0x0642E060>) , Command count = 1529 ] 
14:22:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:25: [ SetCardRCA(0x1, 0xD555) , Command count = 1530 ] 
14:22:25: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:25: Host Frequency set to 25000 KHz
14:22:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:25: ####CSD Registe 2.0 Values####
14:22:25: CSD_STRUCTURE                                 :0x1
14:22:25: Reserv1                                       :0x0
14:22:25: Time Access 1 TAAC                            :0xe
14:22:25: Time Access 2 NSAC*100                        :0x0
14:22:25: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:25: Card Command Classess CCC                     :0x5b5
14:22:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:25: DSR(driver stage register)  DSR_IMP           :0x0
14:22:25: Reserv2                                       :0x0
14:22:25: Device Size C_SIZE                            :0xedc8
14:22:25: Reserv3                                       :0x0
14:22:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:25: Reserv4                                       :0x0
14:22:25: Write Speed Factor R2W_FACTOR                 :0x2
14:22:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:25: FILE_FORMAT_GRP                               :0x0
14:22:25: COPY flag                                     :0x1
14:22:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:25: File_Format                                   :0x0
14:22:25: CRC                                           :0x0
14:22:25: ####CSD Registe Values####  

14:22:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:25: [GetSCRRegisterEntry] Passed
14:22:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:25: Data_Status_After Erases          : 0
14:22:25: CPRM Security Support             : No Security
14:22:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:25: Spec. Version                     : Version 3.0X
14:22:25: Extended Security Support         : Extended_Security_Not_Supported
14:22:25: Command Support                   : COMMAND_SUPPORT
14:22:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8A80>, <py_sfcl.CommandDataDefinition object at 0x0642E5D0>) , Command count = 1531 ] 
14:22:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ABD0>, <py_sfcl.CommandDataDefinition object at 0x064318A0>) , Command count = 1532 ] 
14:22:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:25: [ SetBusWidth(0x4) , Command count = 1533 ] 
14:22:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642E900>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1534 ] 
14:22:25: Protected Area Size 0x28000
14:22:25: Bus Width           2
14:22:25: Secure Mode         0
14:22:25: Speed  Class        4
14:22:25: Perf Move           0
14:22:25: Au Size             9
14:22:25: Erase Size          15
14:22:25: Erase Timeout       1
14:22:25: Erase offset        1
14:22:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1535 ] 
14:22:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:25: Host Frequency set to 100000 KHz
14:22:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:25: ####CSD Registe 2.0 Values####
14:22:25: CSD_STRUCTURE                                 :0x1
14:22:25: Reserv1                                       :0x0
14:22:25: Time Access 1 TAAC                            :0xe
14:22:25: Time Access 2 NSAC*100                        :0x0
14:22:25: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:25: Card Command Classess CCC                     :0x5b5
14:22:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:25: DSR(driver stage register)  DSR_IMP           :0x0
14:22:25: Reserv2                                       :0x0
14:22:25: Device Size C_SIZE                            :0xedc8
14:22:25: Reserv3                                       :0x0
14:22:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:25: Reserv4                                       :0x0
14:22:25: Write Speed Factor R2W_FACTOR                 :0x2
14:22:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:25: FILE_FORMAT_GRP                               :0x0
14:22:25: COPY flag                                     :0x1
14:22:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:25: File_Format                                   :0x0
14:22:25: CRC                                           :0x0
14:22:25: ####CSD Registe Values####  

14:22:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D91180>, <py_sfcl.CommandDataDefinition object at 0x05D91210>) , Command count = 1536 ] 
14:22:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EDB0>, <py_sfcl.CommandDataDefinition object at 0x0642EC00>) , Command count = 1537 ] 
14:22:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF7E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E6F0>, <py_sfcl.PySEnhancedCmdData object at 0x06431A50>, <None>, <py_sfcl.Command23 object at 0x0642E720>) , Command count = 1538 ] 
14:22:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 8
14:22:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF810>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431B40>, <py_sfcl.PySEnhancedCmdData object at 0x06431B70>, <None>, <py_sfcl.Command23 object at 0x064315A0>) , Command count = 1539 ] 
14:22:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642ED50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431870>, <py_sfcl.PySEnhancedCmdData object at 0x06431540>, <None>, <py_sfcl.Command23 object at 0x06431180>) , Command count = 1540 ] 
14:22:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:26: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:28: Host Frequency set to 25000 KHz
14:22:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:28: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF960>, 0x0, True) , Command count = 1541 ] 
14:22:28: [GO18_globalSetVolt]### Host voltage value is set.
14:22:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DA7F60>, 0x0, False) , Command count = 1542 ] 
14:22:28: [GO18_globalSetVolt]### Host voltage value is set.
14:22:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1543 ] 
14:22:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1544 ] 
14:22:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1545 ] 
14:22:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB10>, <py_sfcl.CommandDataDefinition object at 0x05DA7C60>) , Command count = 1546 ] 
14:22:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFBA0>, <py_sfcl.CommandDataDefinition object at 0x06431030>) , Command count = 1547 ] 
14:22:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:28: [ SetCardRCA(0x1, 0xD555) , Command count = 1548 ] 
14:22:28: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:28: Host Frequency set to 25000 KHz
14:22:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:28: ####CSD Registe 2.0 Values####
14:22:28: CSD_STRUCTURE                                 :0x1
14:22:28: Reserv1                                       :0x0
14:22:28: Time Access 1 TAAC                            :0xe
14:22:28: Time Access 2 NSAC*100                        :0x0
14:22:28: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:28: Card Command Classess CCC                     :0x5b5
14:22:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:28: DSR(driver stage register)  DSR_IMP           :0x0
14:22:28: Reserv2                                       :0x0
14:22:28: Device Size C_SIZE                            :0xedc8
14:22:28: Reserv3                                       :0x0
14:22:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:28: Reserv4                                       :0x0
14:22:28: Write Speed Factor R2W_FACTOR                 :0x2
14:22:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:28: FILE_FORMAT_GRP                               :0x0
14:22:28: COPY flag                                     :0x1
14:22:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:28: File_Format                                   :0x0
14:22:28: CRC                                           :0x0
14:22:28: ####CSD Registe Values####  

14:22:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:28: [GetSCRRegisterEntry] Passed
14:22:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:28: Data_Status_After Erases          : 0
14:22:28: CPRM Security Support             : No Security
14:22:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:28: Spec. Version                     : Version 3.0X
14:22:28: Extended Security Support         : Extended_Security_Not_Supported
14:22:28: Command Support                   : COMMAND_SUPPORT
14:22:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB40>, <py_sfcl.CommandDataDefinition object at 0x06431FC0>) , Command count = 1549 ] 
14:22:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D85F30>, <py_sfcl.CommandDataDefinition object at 0x06431720>) , Command count = 1550 ] 
14:22:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:28: [ SetBusWidth(0x4) , Command count = 1551 ] 
14:22:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x064313F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1552 ] 
14:22:28: Protected Area Size 0x28000
14:22:28: Bus Width           2
14:22:28: Secure Mode         0
14:22:28: Speed  Class        4
14:22:28: Perf Move           0
14:22:28: Au Size             9
14:22:28: Erase Size          15
14:22:28: Erase Timeout       1
14:22:28: Erase offset        1
14:22:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1553 ] 
14:22:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:28: Host Frequency set to 100000 KHz
14:22:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:28: ####CSD Registe 2.0 Values####
14:22:28: CSD_STRUCTURE                                 :0x1
14:22:28: Reserv1                                       :0x0
14:22:28: Time Access 1 TAAC                            :0xe
14:22:28: Time Access 2 NSAC*100                        :0x0
14:22:28: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:28: Card Command Classess CCC                     :0x5b5
14:22:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:28: DSR(driver stage register)  DSR_IMP           :0x0
14:22:28: Reserv2                                       :0x0
14:22:28: Device Size C_SIZE                            :0xedc8
14:22:28: Reserv3                                       :0x0
14:22:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:28: Reserv4                                       :0x0
14:22:28: Write Speed Factor R2W_FACTOR                 :0x2
14:22:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:28: FILE_FORMAT_GRP                               :0x0
14:22:28: COPY flag                                     :0x1
14:22:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:28: File_Format                                   :0x0
14:22:28: CRC                                           :0x0
14:22:28: ####CSD Registe Values####  

14:22:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E14B0>, <py_sfcl.CommandDataDefinition object at 0x05DEFE10>) , Command count = 1554 ] 
14:22:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E4E0>, <py_sfcl.CommandDataDefinition object at 0x06431810>) , Command count = 1555 ] 
14:22:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F90>, <py_sfcl.PySEnhancedCmdData object at 0x06431C90>, <None>, <py_sfcl.Command23 object at 0x06431750>) , Command count = 1556 ] 
14:22:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 7
14:22:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431E10>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F00>, <py_sfcl.PySEnhancedCmdData object at 0x06431BD0>, <None>, <py_sfcl.Command23 object at 0x06431450>) , Command count = 1557 ] 
14:22:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431BA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064315D0>, <py_sfcl.PySEnhancedCmdData object at 0x06431AB0>, <None>, <py_sfcl.Command23 object at 0x06431CC0>) , Command count = 1558 ] 
14:22:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:28: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:30: Host Frequency set to 25000 KHz
14:22:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:30: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x064140F0>, 0x0, True) , Command count = 1559 ] 
14:22:30: [GO18_globalSetVolt]### Host voltage value is set.
14:22:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421ED0>, 0x0, False) , Command count = 1560 ] 
14:22:30: [GO18_globalSetVolt]### Host voltage value is set.
14:22:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1561 ] 
14:22:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1562 ] 
14:22:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1563 ] 
14:22:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414690>, <py_sfcl.CommandDataDefinition object at 0x06414B40>) , Command count = 1564 ] 
14:22:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431F30>, <py_sfcl.CommandDataDefinition object at 0x064318D0>) , Command count = 1565 ] 
14:22:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:31: [ SetCardRCA(0x1, 0xD555) , Command count = 1566 ] 
14:22:31: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:31: Host Frequency set to 25000 KHz
14:22:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:31: ####CSD Registe 2.0 Values####
14:22:31: CSD_STRUCTURE                                 :0x1
14:22:31: Reserv1                                       :0x0
14:22:31: Time Access 1 TAAC                            :0xe
14:22:31: Time Access 2 NSAC*100                        :0x0
14:22:31: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:31: Card Command Classess CCC                     :0x5b5
14:22:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:31: DSR(driver stage register)  DSR_IMP           :0x0
14:22:31: Reserv2                                       :0x0
14:22:31: Device Size C_SIZE                            :0xedc8
14:22:31: Reserv3                                       :0x0
14:22:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:31: Reserv4                                       :0x0
14:22:31: Write Speed Factor R2W_FACTOR                 :0x2
14:22:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:31: FILE_FORMAT_GRP                               :0x0
14:22:31: COPY flag                                     :0x1
14:22:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:31: File_Format                                   :0x0
14:22:31: CRC                                           :0x0
14:22:31: ####CSD Registe Values####  

14:22:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:31: [GetSCRRegisterEntry] Passed
14:22:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:31: Data_Status_After Erases          : 0
14:22:31: CPRM Security Support             : No Security
14:22:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:31: Spec. Version                     : Version 3.0X
14:22:31: Extended Security Support         : Extended_Security_Not_Supported
14:22:31: Command Support                   : COMMAND_SUPPORT
14:22:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431EA0>, <py_sfcl.CommandDataDefinition object at 0x06431CF0>) , Command count = 1567 ] 
14:22:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E780>, <py_sfcl.CommandDataDefinition object at 0x064144B0>) , Command count = 1568 ] 
14:22:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:31: [ SetBusWidth(0x4) , Command count = 1569 ] 
14:22:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1570 ] 
14:22:31: Protected Area Size 0x28000
14:22:31: Bus Width           2
14:22:31: Secure Mode         0
14:22:31: Speed  Class        4
14:22:31: Perf Move           0
14:22:31: Au Size             9
14:22:31: Erase Size          15
14:22:31: Erase Timeout       1
14:22:31: Erase offset        1
14:22:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1571 ] 
14:22:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:31: Host Frequency set to 100000 KHz
14:22:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:31: ####CSD Registe 2.0 Values####
14:22:31: CSD_STRUCTURE                                 :0x1
14:22:31: Reserv1                                       :0x0
14:22:31: Time Access 1 TAAC                            :0xe
14:22:31: Time Access 2 NSAC*100                        :0x0
14:22:31: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:31: Card Command Classess CCC                     :0x5b5
14:22:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:31: DSR(driver stage register)  DSR_IMP           :0x0
14:22:31: Reserv2                                       :0x0
14:22:31: Device Size C_SIZE                            :0xedc8
14:22:31: Reserv3                                       :0x0
14:22:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:31: Reserv4                                       :0x0
14:22:31: Write Speed Factor R2W_FACTOR                 :0x2
14:22:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:31: FILE_FORMAT_GRP                               :0x0
14:22:31: COPY flag                                     :0x1
14:22:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:31: File_Format                                   :0x0
14:22:31: CRC                                           :0x0
14:22:31: ####CSD Registe Values####  

14:22:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431960>, <py_sfcl.CommandDataDefinition object at 0x06431AE0>) , Command count = 1572 ] 
14:22:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7FC0>, <py_sfcl.CommandDataDefinition object at 0x06431930>) , Command count = 1573 ] 
14:22:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431F60>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064316C0>, <py_sfcl.PySEnhancedCmdData object at 0x06431B10>, <None>, <py_sfcl.Command23 object at 0x06431A20>) , Command count = 1574 ] 
14:22:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 6
14:22:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414FC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414300>, <py_sfcl.PySEnhancedCmdData object at 0x06414990>, <None>, <py_sfcl.Command23 object at 0x06431C60>) , Command count = 1575 ] 
14:22:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431480>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064146C0>, <py_sfcl.PySEnhancedCmdData object at 0x06414AE0>, <None>, <py_sfcl.Command23 object at 0x06414DB0>) , Command count = 1576 ] 
14:22:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:31: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:33: Host Frequency set to 25000 KHz
14:22:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x064517B0>, 0x0, True) , Command count = 1577 ] 
14:22:33: [GO18_globalSetVolt]### Host voltage value is set.
14:22:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF840>, 0x0, False) , Command count = 1578 ] 
14:22:33: [GO18_globalSetVolt]### Host voltage value is set.
14:22:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1579 ] 
14:22:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1580 ] 
14:22:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1581 ] 
14:22:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414DE0>, <py_sfcl.CommandDataDefinition object at 0x06431D50>) , Command count = 1582 ] 
14:22:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414060>, <py_sfcl.CommandDataDefinition object at 0x06451450>) , Command count = 1583 ] 
14:22:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:33: [ SetCardRCA(0x1, 0xD555) , Command count = 1584 ] 
14:22:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:34: Host Frequency set to 25000 KHz
14:22:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:34: ####CSD Registe 2.0 Values####
14:22:34: CSD_STRUCTURE                                 :0x1
14:22:34: Reserv1                                       :0x0
14:22:34: Time Access 1 TAAC                            :0xe
14:22:34: Time Access 2 NSAC*100                        :0x0
14:22:34: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:34: Card Command Classess CCC                     :0x5b5
14:22:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:34: DSR(driver stage register)  DSR_IMP           :0x0
14:22:34: Reserv2                                       :0x0
14:22:34: Device Size C_SIZE                            :0xedc8
14:22:34: Reserv3                                       :0x0
14:22:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:34: Reserv4                                       :0x0
14:22:34: Write Speed Factor R2W_FACTOR                 :0x2
14:22:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:34: FILE_FORMAT_GRP                               :0x0
14:22:34: COPY flag                                     :0x1
14:22:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:34: File_Format                                   :0x0
14:22:34: CRC                                           :0x0
14:22:34: ####CSD Registe Values####  

14:22:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:34: [GetSCRRegisterEntry] Passed
14:22:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:34: Data_Status_After Erases          : 0
14:22:34: CPRM Security Support             : No Security
14:22:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:34: Spec. Version                     : Version 3.0X
14:22:34: Extended Security Support         : Extended_Security_Not_Supported
14:22:34: Command Support                   : COMMAND_SUPPORT
14:22:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1A80>, <py_sfcl.CommandDataDefinition object at 0x064149F0>) , Command count = 1585 ] 
14:22:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EC60>, <py_sfcl.CommandDataDefinition object at 0x06451EA0>) , Command count = 1586 ] 
14:22:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:34: [ SetBusWidth(0x4) , Command count = 1587 ] 
14:22:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1588 ] 
14:22:34: Protected Area Size 0x28000
14:22:34: Bus Width           2
14:22:34: Secure Mode         0
14:22:34: Speed  Class        4
14:22:34: Perf Move           0
14:22:34: Au Size             9
14:22:34: Erase Size          15
14:22:34: Erase Timeout       1
14:22:34: Erase offset        1
14:22:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1589 ] 
14:22:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:34: Host Frequency set to 100000 KHz
14:22:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:34: ####CSD Registe 2.0 Values####
14:22:34: CSD_STRUCTURE                                 :0x1
14:22:34: Reserv1                                       :0x0
14:22:34: Time Access 1 TAAC                            :0xe
14:22:34: Time Access 2 NSAC*100                        :0x0
14:22:34: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:34: Card Command Classess CCC                     :0x5b5
14:22:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:34: DSR(driver stage register)  DSR_IMP           :0x0
14:22:34: Reserv2                                       :0x0
14:22:34: Device Size C_SIZE                            :0xedc8
14:22:34: Reserv3                                       :0x0
14:22:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:34: Reserv4                                       :0x0
14:22:34: Write Speed Factor R2W_FACTOR                 :0x2
14:22:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:34: FILE_FORMAT_GRP                               :0x0
14:22:34: COPY flag                                     :0x1
14:22:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:34: File_Format                                   :0x0
14:22:34: CRC                                           :0x0
14:22:34: ####CSD Registe Values####  

14:22:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414CF0>, <py_sfcl.CommandDataDefinition object at 0x064142A0>) , Command count = 1590 ] 
14:22:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFAE0>, <py_sfcl.CommandDataDefinition object at 0x06414C60>) , Command count = 1591 ] 
14:22:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064142D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064148A0>, <py_sfcl.PySEnhancedCmdData object at 0x06414A50>, <None>, <py_sfcl.Command23 object at 0x062E11E0>) , Command count = 1592 ] 
14:22:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 5
14:22:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06451BD0>, <py_sfcl.PySEnhancedCmdData object at 0x06451B10>, <None>, <py_sfcl.Command23 object at 0x064518A0>) , Command count = 1593 ] 
14:22:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064515D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B240>, <py_sfcl.PySEnhancedCmdData object at 0x0645B960>, <None>, <py_sfcl.Command23 object at 0x06451840>) , Command count = 1594 ] 
14:22:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:34: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:36: Host Frequency set to 25000 KHz
14:22:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:36: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x064516C0>, 0x0, True) , Command count = 1595 ] 
14:22:36: [GO18_globalSetVolt]### Host voltage value is set.
14:22:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421630>, 0x0, False) , Command count = 1596 ] 
14:22:36: [GO18_globalSetVolt]### Host voltage value is set.
14:22:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1597 ] 
14:22:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1598 ] 
14:22:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1599 ] 
14:22:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F120>, <py_sfcl.CommandDataDefinition object at 0x06414870>) , Command count = 1600 ] 
14:22:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451BA0>, <py_sfcl.CommandDataDefinition object at 0x06451780>) , Command count = 1601 ] 
14:22:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:36: [ SetCardRCA(0x1, 0xD555) , Command count = 1602 ] 
14:22:36: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:36: Host Frequency set to 25000 KHz
14:22:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:36: ####CSD Registe 2.0 Values####
14:22:36: CSD_STRUCTURE                                 :0x1
14:22:36: Reserv1                                       :0x0
14:22:36: Time Access 1 TAAC                            :0xe
14:22:36: Time Access 2 NSAC*100                        :0x0
14:22:36: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:36: Card Command Classess CCC                     :0x5b5
14:22:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:36: DSR(driver stage register)  DSR_IMP           :0x0
14:22:36: Reserv2                                       :0x0
14:22:36: Device Size C_SIZE                            :0xedc8
14:22:36: Reserv3                                       :0x0
14:22:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:36: Reserv4                                       :0x0
14:22:36: Write Speed Factor R2W_FACTOR                 :0x2
14:22:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:36: FILE_FORMAT_GRP                               :0x0
14:22:36: COPY flag                                     :0x1
14:22:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:36: File_Format                                   :0x0
14:22:36: CRC                                           :0x0
14:22:36: ####CSD Registe Values####  

14:22:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:36: [GetSCRRegisterEntry] Passed
14:22:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:36: Data_Status_After Erases          : 0
14:22:36: CPRM Security Support             : No Security
14:22:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:36: Spec. Version                     : Version 3.0X
14:22:36: Extended Security Support         : Extended_Security_Not_Supported
14:22:36: Command Support                   : COMMAND_SUPPORT
14:22:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F3F0>, <py_sfcl.CommandDataDefinition object at 0x0641F210>) , Command count = 1603 ] 
14:22:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064319F0>, <py_sfcl.CommandDataDefinition object at 0x0641F1E0>) , Command count = 1604 ] 
14:22:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:36: [ SetBusWidth(0x4) , Command count = 1605 ] 
14:22:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BBA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1606 ] 
14:22:36: Protected Area Size 0x28000
14:22:36: Bus Width           2
14:22:36: Secure Mode         0
14:22:36: Speed  Class        4
14:22:36: Perf Move           0
14:22:36: Au Size             9
14:22:36: Erase Size          15
14:22:36: Erase Timeout       1
14:22:36: Erase offset        1
14:22:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1607 ] 
14:22:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:36: Host Frequency set to 100000 KHz
14:22:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:36: ####CSD Registe 2.0 Values####
14:22:36: CSD_STRUCTURE                                 :0x1
14:22:36: Reserv1                                       :0x0
14:22:36: Time Access 1 TAAC                            :0xe
14:22:36: Time Access 2 NSAC*100                        :0x0
14:22:36: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:36: Card Command Classess CCC                     :0x5b5
14:22:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:36: DSR(driver stage register)  DSR_IMP           :0x0
14:22:36: Reserv2                                       :0x0
14:22:36: Device Size C_SIZE                            :0xedc8
14:22:36: Reserv3                                       :0x0
14:22:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:36: Reserv4                                       :0x0
14:22:36: Write Speed Factor R2W_FACTOR                 :0x2
14:22:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:36: FILE_FORMAT_GRP                               :0x0
14:22:36: COPY flag                                     :0x1
14:22:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:36: File_Format                                   :0x0
14:22:36: CRC                                           :0x0
14:22:36: ####CSD Registe Values####  

14:22:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451630>, <py_sfcl.CommandDataDefinition object at 0x06451570>) , Command count = 1608 ] 
14:22:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F150>, <py_sfcl.CommandDataDefinition object at 0x0641F480>) , Command count = 1609 ] 
14:22:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F180>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F540>, <py_sfcl.PySEnhancedCmdData object at 0x0641F1B0>, <None>, <py_sfcl.Command23 object at 0x0645B570>) , Command count = 1610 ] 
14:22:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 4
14:22:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F4B0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B840>, <None>, <py_sfcl.Command23 object at 0x0645BD80>) , Command count = 1611 ] 
14:22:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451C60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B720>, <py_sfcl.PySEnhancedCmdData object at 0x0645BE40>, <None>, <py_sfcl.Command23 object at 0x0645B390>) , Command count = 1612 ] 
14:22:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:37: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:39: Host Frequency set to 25000 KHz
14:22:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:39: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB10>, 0x0, True) , Command count = 1613 ] 
14:22:39: [GO18_globalSetVolt]### Host voltage value is set.
14:22:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451F00>, 0x0, False) , Command count = 1614 ] 
14:22:39: [GO18_globalSetVolt]### Host voltage value is set.
14:22:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1615 ] 
14:22:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1616 ] 
14:22:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1617 ] 
14:22:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451E40>, <py_sfcl.CommandDataDefinition object at 0x06451600>) , Command count = 1618 ] 
14:22:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FCC0>, <py_sfcl.CommandDataDefinition object at 0x0641F090>) , Command count = 1619 ] 
14:22:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:39: [ SetCardRCA(0x1, 0xD555) , Command count = 1620 ] 
14:22:39: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:39: Host Frequency set to 25000 KHz
14:22:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:39: ####CSD Registe 2.0 Values####
14:22:39: CSD_STRUCTURE                                 :0x1
14:22:39: Reserv1                                       :0x0
14:22:39: Time Access 1 TAAC                            :0xe
14:22:39: Time Access 2 NSAC*100                        :0x0
14:22:39: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:39: Card Command Classess CCC                     :0x5b5
14:22:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:39: DSR(driver stage register)  DSR_IMP           :0x0
14:22:39: Reserv2                                       :0x0
14:22:39: Device Size C_SIZE                            :0xedc8
14:22:39: Reserv3                                       :0x0
14:22:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:39: Reserv4                                       :0x0
14:22:39: Write Speed Factor R2W_FACTOR                 :0x2
14:22:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:39: FILE_FORMAT_GRP                               :0x0
14:22:39: COPY flag                                     :0x1
14:22:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:39: File_Format                                   :0x0
14:22:39: CRC                                           :0x0
14:22:39: ####CSD Registe Values####  

14:22:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:39: [GetSCRRegisterEntry] Passed
14:22:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:39: Data_Status_After Erases          : 0
14:22:39: CPRM Security Support             : No Security
14:22:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:39: Spec. Version                     : Version 3.0X
14:22:39: Extended Security Support         : Extended_Security_Not_Supported
14:22:39: Command Support                   : COMMAND_SUPPORT
14:22:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FB70>, <py_sfcl.CommandDataDefinition object at 0x0641FCF0>) , Command count = 1621 ] 
14:22:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414630>, <py_sfcl.CommandDataDefinition object at 0x0641F0C0>) , Command count = 1622 ] 
14:22:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:39: [ SetBusWidth(0x4) , Command count = 1623 ] 
14:22:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B6F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1624 ] 
14:22:39: Protected Area Size 0x28000
14:22:39: Bus Width           2
14:22:39: Secure Mode         0
14:22:39: Speed  Class        4
14:22:39: Perf Move           0
14:22:39: Au Size             9
14:22:39: Erase Size          15
14:22:39: Erase Timeout       1
14:22:39: Erase offset        1
14:22:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1625 ] 
14:22:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:39: Host Frequency set to 100000 KHz
14:22:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:39: ####CSD Registe 2.0 Values####
14:22:39: CSD_STRUCTURE                                 :0x1
14:22:39: Reserv1                                       :0x0
14:22:39: Time Access 1 TAAC                            :0xe
14:22:39: Time Access 2 NSAC*100                        :0x0
14:22:39: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:39: Card Command Classess CCC                     :0x5b5
14:22:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:39: DSR(driver stage register)  DSR_IMP           :0x0
14:22:39: Reserv2                                       :0x0
14:22:39: Device Size C_SIZE                            :0xedc8
14:22:39: Reserv3                                       :0x0
14:22:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:39: Reserv4                                       :0x0
14:22:39: Write Speed Factor R2W_FACTOR                 :0x2
14:22:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:39: FILE_FORMAT_GRP                               :0x0
14:22:39: COPY flag                                     :0x1
14:22:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:39: File_Format                                   :0x0
14:22:39: CRC                                           :0x0
14:22:39: ####CSD Registe Values####  

14:22:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467060>, <py_sfcl.CommandDataDefinition object at 0x0641FF90>) , Command count = 1626 ] 
14:22:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451690>, <py_sfcl.CommandDataDefinition object at 0x0641FD80>) , Command count = 1627 ] 
14:22:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064671E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467210>, <py_sfcl.PySEnhancedCmdData object at 0x06467240>, <None>, <py_sfcl.Command23 object at 0x0645B270>) , Command count = 1628 ] 
14:22:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 3
14:22:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064670C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064670F0>, <py_sfcl.PySEnhancedCmdData object at 0x06467120>, <None>, <py_sfcl.Command23 object at 0x0645BB70>) , Command count = 1629 ] 
14:22:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451ED0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BDE0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B2D0>, <None>, <py_sfcl.Command23 object at 0x0645BD20>) , Command count = 1630 ] 
14:22:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:41: Host Frequency set to 25000 KHz
14:22:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x064675A0>, 0x0, True) , Command count = 1631 ] 
14:22:41: [GO18_globalSetVolt]### Host voltage value is set.
14:22:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451810>, 0x0, False) , Command count = 1632 ] 
14:22:41: [GO18_globalSetVolt]### Host voltage value is set.
14:22:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1633 ] 
14:22:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1634 ] 
14:22:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1635 ] 
14:22:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467540>, <py_sfcl.CommandDataDefinition object at 0x064674E0>) , Command count = 1636 ] 
14:22:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F030>, <py_sfcl.CommandDataDefinition object at 0x0641FF00>) , Command count = 1637 ] 
14:22:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:42: [ SetCardRCA(0x1, 0xD555) , Command count = 1638 ] 
14:22:42: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:42: Host Frequency set to 25000 KHz
14:22:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:42: ####CSD Registe 2.0 Values####
14:22:42: CSD_STRUCTURE                                 :0x1
14:22:42: Reserv1                                       :0x0
14:22:42: Time Access 1 TAAC                            :0xe
14:22:42: Time Access 2 NSAC*100                        :0x0
14:22:42: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:42: Card Command Classess CCC                     :0x5b5
14:22:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:42: DSR(driver stage register)  DSR_IMP           :0x0
14:22:42: Reserv2                                       :0x0
14:22:42: Device Size C_SIZE                            :0xedc8
14:22:42: Reserv3                                       :0x0
14:22:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:42: Reserv4                                       :0x0
14:22:42: Write Speed Factor R2W_FACTOR                 :0x2
14:22:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:42: FILE_FORMAT_GRP                               :0x0
14:22:42: COPY flag                                     :0x1
14:22:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:42: File_Format                                   :0x0
14:22:42: CRC                                           :0x0
14:22:42: ####CSD Registe Values####  

14:22:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:42: [GetSCRRegisterEntry] Passed
14:22:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:42: Data_Status_After Erases          : 0
14:22:42: CPRM Security Support             : No Security
14:22:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:42: Spec. Version                     : Version 3.0X
14:22:42: Extended Security Support         : Extended_Security_Not_Supported
14:22:42: Command Support                   : COMMAND_SUPPORT
14:22:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FDE0>, <py_sfcl.CommandDataDefinition object at 0x0641F2A0>) , Command count = 1639 ] 
14:22:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414450>, <py_sfcl.CommandDataDefinition object at 0x06467030>) , Command count = 1640 ] 
14:22:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:42: [ SetBusWidth(0x4) , Command count = 1641 ] 
14:22:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1642 ] 
14:22:42: Protected Area Size 0x28000
14:22:42: Bus Width           2
14:22:42: Secure Mode         0
14:22:42: Speed  Class        4
14:22:42: Perf Move           0
14:22:42: Au Size             9
14:22:42: Erase Size          15
14:22:42: Erase Timeout       1
14:22:42: Erase offset        1
14:22:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1643 ] 
14:22:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:42: Host Frequency set to 100000 KHz
14:22:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:42: ####CSD Registe 2.0 Values####
14:22:42: CSD_STRUCTURE                                 :0x1
14:22:42: Reserv1                                       :0x0
14:22:42: Time Access 1 TAAC                            :0xe
14:22:42: Time Access 2 NSAC*100                        :0x0
14:22:42: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:42: Card Command Classess CCC                     :0x5b5
14:22:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:42: DSR(driver stage register)  DSR_IMP           :0x0
14:22:42: Reserv2                                       :0x0
14:22:42: Device Size C_SIZE                            :0xedc8
14:22:42: Reserv3                                       :0x0
14:22:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:42: Reserv4                                       :0x0
14:22:42: Write Speed Factor R2W_FACTOR                 :0x2
14:22:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:42: FILE_FORMAT_GRP                               :0x0
14:22:42: COPY flag                                     :0x1
14:22:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:42: File_Format                                   :0x0
14:22:42: CRC                                           :0x0
14:22:42: ####CSD Registe Values####  

14:22:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467A50>, <py_sfcl.CommandDataDefinition object at 0x06467870>) , Command count = 1644 ] 
14:22:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451FC0>, <py_sfcl.CommandDataDefinition object at 0x0641F510>) , Command count = 1645 ] 
14:22:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467990>, <py_sfcl.PySEnhancedCmdData object at 0x064679C0>, <None>, <py_sfcl.Command23 object at 0x06467270>) , Command count = 1646 ] 
14:22:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 2
14:22:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06467AE0>, <None>, <py_sfcl.Command23 object at 0x064671B0>) , Command count = 1647 ] 
14:22:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645B1B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B060>, <py_sfcl.PySEnhancedCmdData object at 0x0645BD20>, <None>, <py_sfcl.Command23 object at 0x06467720>) , Command count = 1648 ] 
14:22:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:42: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:44: Host Frequency set to 25000 KHz
14:22:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:44: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467E40>, 0x0, True) , Command count = 1649 ] 
14:22:44: [GO18_globalSetVolt]### Host voltage value is set.
14:22:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451F60>, 0x0, False) , Command count = 1650 ] 
14:22:44: [GO18_globalSetVolt]### Host voltage value is set.
14:22:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1651 ] 
14:22:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1652 ] 
14:22:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1653 ] 
14:22:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467DE0>, <py_sfcl.CommandDataDefinition object at 0x06467D80>) , Command count = 1654 ] 
14:22:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467E10>, <py_sfcl.CommandDataDefinition object at 0x06467330>) , Command count = 1655 ] 
14:22:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1656 ] 
14:22:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:45: Host Frequency set to 25000 KHz
14:22:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:45: ####CSD Registe 2.0 Values####
14:22:45: CSD_STRUCTURE                                 :0x1
14:22:45: Reserv1                                       :0x0
14:22:45: Time Access 1 TAAC                            :0xe
14:22:45: Time Access 2 NSAC*100                        :0x0
14:22:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:45: Card Command Classess CCC                     :0x5b5
14:22:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:45: DSR(driver stage register)  DSR_IMP           :0x0
14:22:45: Reserv2                                       :0x0
14:22:45: Device Size C_SIZE                            :0xedc8
14:22:45: Reserv3                                       :0x0
14:22:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:45: Reserv4                                       :0x0
14:22:45: Write Speed Factor R2W_FACTOR                 :0x2
14:22:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:45: FILE_FORMAT_GRP                               :0x0
14:22:45: COPY flag                                     :0x1
14:22:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:45: File_Format                                   :0x0
14:22:45: CRC                                           :0x0
14:22:45: ####CSD Registe Values####  

14:22:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:45: [GetSCRRegisterEntry] Passed
14:22:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:45: Data_Status_After Erases          : 0
14:22:45: CPRM Security Support             : No Security
14:22:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:45: Spec. Version                     : Version 3.0X
14:22:45: Extended Security Support         : Extended_Security_Not_Supported
14:22:45: Command Support                   : COMMAND_SUPPORT
14:22:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421030>, <py_sfcl.CommandDataDefinition object at 0x06467F00>) , Command count = 1657 ] 
14:22:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F330>, <py_sfcl.CommandDataDefinition object at 0x06467150>) , Command count = 1658 ] 
14:22:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:45: [ SetBusWidth(0x4) , Command count = 1659 ] 
14:22:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06467390>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1660 ] 
14:22:45: Protected Area Size 0x28000
14:22:45: Bus Width           2
14:22:45: Secure Mode         0
14:22:45: Speed  Class        4
14:22:45: Perf Move           0
14:22:45: Au Size             9
14:22:45: Erase Size          15
14:22:45: Erase Timeout       1
14:22:45: Erase offset        1
14:22:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1661 ] 
14:22:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:45: Host Frequency set to 100000 KHz
14:22:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:45: ####CSD Registe 2.0 Values####
14:22:45: CSD_STRUCTURE                                 :0x1
14:22:45: Reserv1                                       :0x0
14:22:45: Time Access 1 TAAC                            :0xe
14:22:45: Time Access 2 NSAC*100                        :0x0
14:22:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:45: Card Command Classess CCC                     :0x5b5
14:22:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:45: DSR(driver stage register)  DSR_IMP           :0x0
14:22:45: Reserv2                                       :0x0
14:22:45: Device Size C_SIZE                            :0xedc8
14:22:45: Reserv3                                       :0x0
14:22:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:45: Reserv4                                       :0x0
14:22:45: Write Speed Factor R2W_FACTOR                 :0x2
14:22:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:45: FILE_FORMAT_GRP                               :0x0
14:22:45: COPY flag                                     :0x1
14:22:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:45: File_Format                                   :0x0
14:22:45: CRC                                           :0x0
14:22:45: ####CSD Registe Values####  

14:22:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467F90>, <py_sfcl.CommandDataDefinition object at 0x06467FC0>) , Command count = 1662 ] 
14:22:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064678A0>, <py_sfcl.CommandDataDefinition object at 0x064676C0>) , Command count = 1663 ] 
14:22:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064212A0>, <py_sfcl.PySEnhancedCmdData object at 0x06467C00>, <None>, <py_sfcl.Command23 object at 0x064675D0>) , Command count = 1664 ] 
14:22:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 1
14:22:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421360>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421390>, <py_sfcl.PySEnhancedCmdData object at 0x064679F0>, <None>, <py_sfcl.Command23 object at 0x06467EA0>) , Command count = 1665 ] 
14:22:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467600>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B900>, <py_sfcl.PySEnhancedCmdData object at 0x0645BD20>, <None>, <py_sfcl.Command23 object at 0x06467930>) , Command count = 1666 ] 
14:22:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:45: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:47: Host Frequency set to 25000 KHz
14:22:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:47: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421720>, 0x0, True) , Command count = 1667 ] 
14:22:47: [GO18_globalSetVolt]### Host voltage value is set.
14:22:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FA80>, 0x0, False) , Command count = 1668 ] 
14:22:47: [GO18_globalSetVolt]### Host voltage value is set.
14:22:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1669 ] 
14:22:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1670 ] 
14:22:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1671 ] 
14:22:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216C0>, <py_sfcl.CommandDataDefinition object at 0x06421660>) , Command count = 1672 ] 
14:22:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467480>, <py_sfcl.CommandDataDefinition object at 0x06467900>) , Command count = 1673 ] 
14:22:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:47: [ SetCardRCA(0x1, 0xD555) , Command count = 1674 ] 
14:22:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:47: Host Frequency set to 25000 KHz
14:22:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:47: ####CSD Registe 2.0 Values####
14:22:47: CSD_STRUCTURE                                 :0x1
14:22:47: Reserv1                                       :0x0
14:22:47: Time Access 1 TAAC                            :0xe
14:22:47: Time Access 2 NSAC*100                        :0x0
14:22:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:47: Card Command Classess CCC                     :0x5b5
14:22:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:47: DSR(driver stage register)  DSR_IMP           :0x0
14:22:47: Reserv2                                       :0x0
14:22:47: Device Size C_SIZE                            :0xedc8
14:22:47: Reserv3                                       :0x0
14:22:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:47: Reserv4                                       :0x0
14:22:47: Write Speed Factor R2W_FACTOR                 :0x2
14:22:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:47: FILE_FORMAT_GRP                               :0x0
14:22:47: COPY flag                                     :0x1
14:22:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:47: File_Format                                   :0x0
14:22:47: CRC                                           :0x0
14:22:47: ####CSD Registe Values####  

14:22:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:47: [GetSCRRegisterEntry] Passed
14:22:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:47: Data_Status_After Erases          : 0
14:22:47: CPRM Security Support             : No Security
14:22:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:47: Spec. Version                     : Version 3.0X
14:22:47: Extended Security Support         : Extended_Security_Not_Supported
14:22:47: Command Support                   : COMMAND_SUPPORT
14:22:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467C60>, <py_sfcl.CommandDataDefinition object at 0x06467360>) , Command count = 1675 ] 
14:22:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FE70>, <py_sfcl.CommandDataDefinition object at 0x064211E0>) , Command count = 1676 ] 
14:22:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:47: [ SetBusWidth(0x4) , Command count = 1677 ] 
14:22:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1678 ] 
14:22:47: Protected Area Size 0x28000
14:22:47: Bus Width           2
14:22:47: Secure Mode         0
14:22:47: Speed  Class        4
14:22:47: Perf Move           0
14:22:47: Au Size             9
14:22:47: Erase Size          15
14:22:47: Erase Timeout       1
14:22:47: Erase offset        1
14:22:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1679 ] 
14:22:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:47: Host Frequency set to 100000 KHz
14:22:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:47: ####CSD Registe 2.0 Values####
14:22:47: CSD_STRUCTURE                                 :0x1
14:22:47: Reserv1                                       :0x0
14:22:47: Time Access 1 TAAC                            :0xe
14:22:47: Time Access 2 NSAC*100                        :0x0
14:22:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:47: Card Command Classess CCC                     :0x5b5
14:22:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:47: DSR(driver stage register)  DSR_IMP           :0x0
14:22:47: Reserv2                                       :0x0
14:22:47: Device Size C_SIZE                            :0xedc8
14:22:47: Reserv3                                       :0x0
14:22:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:47: Reserv4                                       :0x0
14:22:47: Write Speed Factor R2W_FACTOR                 :0x2
14:22:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:47: FILE_FORMAT_GRP                               :0x0
14:22:47: COPY flag                                     :0x1
14:22:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:47: File_Format                                   :0x0
14:22:47: CRC                                           :0x0
14:22:47: ####CSD Registe Values####  

14:22:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467750>, <py_sfcl.CommandDataDefinition object at 0x06421BD0>) , Command count = 1680 ] 
14:22:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467B10>, <py_sfcl.CommandDataDefinition object at 0x06421DB0>) , Command count = 1681 ] 
14:22:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421B10>, <py_sfcl.PySEnhancedCmdData object at 0x06421B40>, <None>, <py_sfcl.Command23 object at 0x064217B0>) , Command count = 1682 ] 
14:22:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Outer loop Count 1021
14:22:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 29
14:22:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421C30>, <py_sfcl.PySEnhancedCmdData object at 0x06421C60>, <None>, <py_sfcl.Command23 object at 0x06421420>) , Command count = 1683 ] 
14:22:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467300>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BE10>, <py_sfcl.PySEnhancedCmdData object at 0x0645BE70>, <None>, <py_sfcl.Command23 object at 0x064218D0>) , Command count = 1684 ] 
14:22:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:50: Host Frequency set to 25000 KHz
14:22:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421FC0>, 0x0, True) , Command count = 1685 ] 
14:22:50: [GO18_globalSetVolt]### Host voltage value is set.
14:22:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421690>, 0x0, False) , Command count = 1686 ] 
14:22:50: [GO18_globalSetVolt]### Host voltage value is set.
14:22:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1687 ] 
14:22:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1688 ] 
14:22:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1689 ] 
14:22:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A060>, <py_sfcl.CommandDataDefinition object at 0x06421F60>) , Command count = 1690 ] 
14:22:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A030>, <py_sfcl.CommandDataDefinition object at 0x06421330>) , Command count = 1691 ] 
14:22:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:50: [ SetCardRCA(0x1, 0xD555) , Command count = 1692 ] 
14:22:50: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:50: Host Frequency set to 25000 KHz
14:22:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:50: ####CSD Registe 2.0 Values####
14:22:50: CSD_STRUCTURE                                 :0x1
14:22:50: Reserv1                                       :0x0
14:22:50: Time Access 1 TAAC                            :0xe
14:22:50: Time Access 2 NSAC*100                        :0x0
14:22:50: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:50: Card Command Classess CCC                     :0x5b5
14:22:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:50: DSR(driver stage register)  DSR_IMP           :0x0
14:22:50: Reserv2                                       :0x0
14:22:50: Device Size C_SIZE                            :0xedc8
14:22:50: Reserv3                                       :0x0
14:22:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:50: Reserv4                                       :0x0
14:22:50: Write Speed Factor R2W_FACTOR                 :0x2
14:22:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:50: FILE_FORMAT_GRP                               :0x0
14:22:50: COPY flag                                     :0x1
14:22:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:50: File_Format                                   :0x0
14:22:50: CRC                                           :0x0
14:22:50: ####CSD Registe Values####  

14:22:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:50: [GetSCRRegisterEntry] Passed
14:22:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:50: Data_Status_After Erases          : 0
14:22:50: CPRM Security Support             : No Security
14:22:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:50: Spec. Version                     : Version 3.0X
14:22:50: Extended Security Support         : Extended_Security_Not_Supported
14:22:50: Command Support                   : COMMAND_SUPPORT
14:22:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A2A0>, <py_sfcl.CommandDataDefinition object at 0x0642A0C0>) , Command count = 1693 ] 
14:22:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467780>, <py_sfcl.CommandDataDefinition object at 0x06421540>) , Command count = 1694 ] 
14:22:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:50: [ SetBusWidth(0x4) , Command count = 1695 ] 
14:22:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B0C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1696 ] 
14:22:50: Protected Area Size 0x28000
14:22:50: Bus Width           2
14:22:50: Secure Mode         0
14:22:50: Speed  Class        4
14:22:50: Perf Move           0
14:22:50: Au Size             9
14:22:50: Erase Size          15
14:22:50: Erase Timeout       1
14:22:50: Erase offset        1
14:22:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1697 ] 
14:22:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:50: Host Frequency set to 100000 KHz
14:22:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:50: ####CSD Registe 2.0 Values####
14:22:50: CSD_STRUCTURE                                 :0x1
14:22:50: Reserv1                                       :0x0
14:22:50: Time Access 1 TAAC                            :0xe
14:22:50: Time Access 2 NSAC*100                        :0x0
14:22:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:50: Card Command Classess CCC                     :0x5b5
14:22:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:50: DSR(driver stage register)  DSR_IMP           :0x0
14:22:50: Reserv2                                       :0x0
14:22:50: Device Size C_SIZE                            :0xedc8
14:22:50: Reserv3                                       :0x0
14:22:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:50: Reserv4                                       :0x0
14:22:50: Write Speed Factor R2W_FACTOR                 :0x2
14:22:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:50: FILE_FORMAT_GRP                               :0x0
14:22:50: COPY flag                                     :0x1
14:22:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:50: File_Format                                   :0x0
14:22:50: CRC                                           :0x0
14:22:50: ####CSD Registe Values####  

14:22:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A090>, <py_sfcl.CommandDataDefinition object at 0x06421D50>) , Command count = 1698 ] 
14:22:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064678D0>, <py_sfcl.CommandDataDefinition object at 0x06421840>) , Command count = 1699 ] 
14:22:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421D80>, <py_sfcl.PySEnhancedCmdData object at 0x06421BA0>, <None>, <py_sfcl.Command23 object at 0x064212D0>) , Command count = 1700 ] 
14:22:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 28
14:22:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A510>, <py_sfcl.PySEnhancedCmdData object at 0x0642A540>, <None>, <py_sfcl.Command23 object at 0x06421CC0>) , Command count = 1701 ] 
14:22:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421780>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B660>, <py_sfcl.PySEnhancedCmdData object at 0x0645B090>, <None>, <py_sfcl.Command23 object at 0x064214B0>) , Command count = 1702 ] 
14:22:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:50: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:52: Host Frequency set to 25000 KHz
14:22:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:52: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A8A0>, 0x0, True) , Command count = 1703 ] 
14:22:52: [GO18_globalSetVolt]### Host voltage value is set.
14:22:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467C90>, 0x0, False) , Command count = 1704 ] 
14:22:52: [GO18_globalSetVolt]### Host voltage value is set.
14:22:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1705 ] 
14:22:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1706 ] 
14:22:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1707 ] 
14:22:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A840>, <py_sfcl.CommandDataDefinition object at 0x06421D20>) , Command count = 1708 ] 
14:22:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A870>, <py_sfcl.CommandDataDefinition object at 0x06421750>) , Command count = 1709 ] 
14:22:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:53: [ SetCardRCA(0x1, 0xD555) , Command count = 1710 ] 
14:22:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:53: Host Frequency set to 25000 KHz
14:22:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:53: ####CSD Registe 2.0 Values####
14:22:53: CSD_STRUCTURE                                 :0x1
14:22:53: Reserv1                                       :0x0
14:22:53: Time Access 1 TAAC                            :0xe
14:22:53: Time Access 2 NSAC*100                        :0x0
14:22:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:53: Card Command Classess CCC                     :0x5b5
14:22:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:53: DSR(driver stage register)  DSR_IMP           :0x0
14:22:53: Reserv2                                       :0x0
14:22:53: Device Size C_SIZE                            :0xedc8
14:22:53: Reserv3                                       :0x0
14:22:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:53: Reserv4                                       :0x0
14:22:53: Write Speed Factor R2W_FACTOR                 :0x2
14:22:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:53: FILE_FORMAT_GRP                               :0x0
14:22:53: COPY flag                                     :0x1
14:22:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:53: File_Format                                   :0x0
14:22:53: CRC                                           :0x0
14:22:53: ####CSD Registe Values####  

14:22:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:53: [GetSCRRegisterEntry] Passed
14:22:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:53: Data_Status_After Erases          : 0
14:22:53: CPRM Security Support             : No Security
14:22:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:53: Spec. Version                     : Version 3.0X
14:22:53: Extended Security Support         : Extended_Security_Not_Supported
14:22:53: Command Support                   : COMMAND_SUPPORT
14:22:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AB40>, <py_sfcl.CommandDataDefinition object at 0x0642A960>) , Command count = 1711 ] 
14:22:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421090>, <py_sfcl.CommandDataDefinition object at 0x0642A930>) , Command count = 1712 ] 
14:22:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:53: [ SetBusWidth(0x4) , Command count = 1713 ] 
14:22:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1714 ] 
14:22:53: Protected Area Size 0x28000
14:22:53: Bus Width           2
14:22:53: Secure Mode         0
14:22:53: Speed  Class        4
14:22:53: Perf Move           0
14:22:53: Au Size             9
14:22:53: Erase Size          15
14:22:53: Erase Timeout       1
14:22:53: Erase offset        1
14:22:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1715 ] 
14:22:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:53: Host Frequency set to 100000 KHz
14:22:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:53: ####CSD Registe 2.0 Values####
14:22:53: CSD_STRUCTURE                                 :0x1
14:22:53: Reserv1                                       :0x0
14:22:53: Time Access 1 TAAC                            :0xe
14:22:53: Time Access 2 NSAC*100                        :0x0
14:22:53: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:53: Card Command Classess CCC                     :0x5b5
14:22:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:53: DSR(driver stage register)  DSR_IMP           :0x0
14:22:53: Reserv2                                       :0x0
14:22:53: Device Size C_SIZE                            :0xedc8
14:22:53: Reserv3                                       :0x0
14:22:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:53: Reserv4                                       :0x0
14:22:53: Write Speed Factor R2W_FACTOR                 :0x2
14:22:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:53: FILE_FORMAT_GRP                               :0x0
14:22:53: COPY flag                                     :0x1
14:22:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:53: File_Format                                   :0x0
14:22:53: CRC                                           :0x0
14:22:53: ####CSD Registe Values####  

14:22:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064210F0>, <py_sfcl.CommandDataDefinition object at 0x0642AD50>) , Command count = 1716 ] 
14:22:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064211B0>, <py_sfcl.CommandDataDefinition object at 0x06421B70>) , Command count = 1717 ] 
14:22:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC60>, <py_sfcl.PySEnhancedCmdData object at 0x0642AC90>, <None>, <py_sfcl.Command23 object at 0x0642A810>) , Command count = 1718 ] 
14:22:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 27
14:22:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642ADB0>, <py_sfcl.PySEnhancedCmdData object at 0x0642ADE0>, <None>, <py_sfcl.Command23 object at 0x0642A1E0>) , Command count = 1719 ] 
14:22:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451D50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A2D0>, <py_sfcl.PySEnhancedCmdData object at 0x0642AB70>, <None>, <py_sfcl.Command23 object at 0x0642ACC0>) , Command count = 1720 ] 
14:22:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:53: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:55: Host Frequency set to 25000 KHz
14:22:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E030>, 0x0, True) , Command count = 1721 ] 
14:22:55: [GO18_globalSetVolt]### Host voltage value is set.
14:22:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421570>, 0x0, False) , Command count = 1722 ] 
14:22:55: [GO18_globalSetVolt]### Host voltage value is set.
14:22:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1723 ] 
14:22:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1724 ] 
14:22:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1725 ] 
14:22:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E150>, <py_sfcl.CommandDataDefinition object at 0x0642E0F0>) , Command count = 1726 ] 
14:22:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E180>, <py_sfcl.CommandDataDefinition object at 0x0642A630>) , Command count = 1727 ] 
14:22:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1728 ] 
14:22:56: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:56: Host Frequency set to 25000 KHz
14:22:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:56: ####CSD Registe 2.0 Values####
14:22:56: CSD_STRUCTURE                                 :0x1
14:22:56: Reserv1                                       :0x0
14:22:56: Time Access 1 TAAC                            :0xe
14:22:56: Time Access 2 NSAC*100                        :0x0
14:22:56: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:56: Card Command Classess CCC                     :0x5b5
14:22:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:56: DSR(driver stage register)  DSR_IMP           :0x0
14:22:56: Reserv2                                       :0x0
14:22:56: Device Size C_SIZE                            :0xedc8
14:22:56: Reserv3                                       :0x0
14:22:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:56: Reserv4                                       :0x0
14:22:56: Write Speed Factor R2W_FACTOR                 :0x2
14:22:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:56: FILE_FORMAT_GRP                               :0x0
14:22:56: COPY flag                                     :0x1
14:22:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:56: File_Format                                   :0x0
14:22:56: CRC                                           :0x0
14:22:56: ####CSD Registe Values####  

14:22:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:56: [GetSCRRegisterEntry] Passed
14:22:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:56: Data_Status_After Erases          : 0
14:22:56: CPRM Security Support             : No Security
14:22:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:56: Spec. Version                     : Version 3.0X
14:22:56: Extended Security Support         : Extended_Security_Not_Supported
14:22:56: Command Support                   : COMMAND_SUPPORT
14:22:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E420>, <py_sfcl.CommandDataDefinition object at 0x0642E1B0>) , Command count = 1729 ] 
14:22:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421480>, <py_sfcl.CommandDataDefinition object at 0x0642A720>) , Command count = 1730 ] 
14:22:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:56: [ SetBusWidth(0x4) , Command count = 1731 ] 
14:22:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BCC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1732 ] 
14:22:56: Protected Area Size 0x28000
14:22:56: Bus Width           2
14:22:56: Secure Mode         0
14:22:56: Speed  Class        4
14:22:56: Perf Move           0
14:22:56: Au Size             9
14:22:56: Erase Size          15
14:22:56: Erase Timeout       1
14:22:56: Erase offset        1
14:22:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1733 ] 
14:22:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:56: Host Frequency set to 100000 KHz
14:22:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:56: ####CSD Registe 2.0 Values####
14:22:56: CSD_STRUCTURE                                 :0x1
14:22:56: Reserv1                                       :0x0
14:22:56: Time Access 1 TAAC                            :0xe
14:22:56: Time Access 2 NSAC*100                        :0x0
14:22:56: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:56: Card Command Classess CCC                     :0x5b5
14:22:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:56: DSR(driver stage register)  DSR_IMP           :0x0
14:22:56: Reserv2                                       :0x0
14:22:56: Device Size C_SIZE                            :0xedc8
14:22:56: Reserv3                                       :0x0
14:22:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:56: Reserv4                                       :0x0
14:22:56: Write Speed Factor R2W_FACTOR                 :0x2
14:22:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:56: FILE_FORMAT_GRP                               :0x0
14:22:56: COPY flag                                     :0x1
14:22:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:56: File_Format                                   :0x0
14:22:56: CRC                                           :0x0
14:22:56: ####CSD Registe Values####  

14:22:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AED0>, <py_sfcl.CommandDataDefinition object at 0x0642AE10>) , Command count = 1734 ] 
14:22:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FE10>, <py_sfcl.CommandDataDefinition object at 0x0642A360>) , Command count = 1735 ] 
14:22:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E330>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642AD20>, <None>, <py_sfcl.Command23 object at 0x0642AC00>) , Command count = 1736 ] 
14:22:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 26
14:22:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E690>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6C0>, <None>, <py_sfcl.Command23 object at 0x0642A900>) , Command count = 1737 ] 
14:22:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421CF0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A450>, <py_sfcl.PySEnhancedCmdData object at 0x0642AE40>, <None>, <py_sfcl.Command23 object at 0x0642A9C0>) , Command count = 1738 ] 
14:22:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:56: [GO4_globalInitCard]### Switch to Specify Card Type
14:22:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:58: Host Frequency set to 25000 KHz
14:22:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:58: [GO18_globalSetVolt]### Set Host Voltage value.
14:22:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:22:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EA20>, 0x0, True) , Command count = 1739 ] 
14:22:58: [GO18_globalSetVolt]### Host voltage value is set.
14:22:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:22:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421E10>, 0x0, False) , Command count = 1740 ] 
14:22:58: [GO18_globalSetVolt]### Host voltage value is set.
14:22:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1741 ] 
14:22:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:22:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1742 ] 
14:22:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:22:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:22:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:22:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:22:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:22:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1743 ] 
14:22:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:22:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:22:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E9C0>, <py_sfcl.CommandDataDefinition object at 0x0642AE70>) , Command count = 1744 ] 
14:22:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:22:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AF60>, <py_sfcl.CommandDataDefinition object at 0x0642A8D0>) , Command count = 1745 ] 
14:22:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:22:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1746 ] 
14:22:58: [DVTCommonLib]### Identification :Idenfication of card completed 

14:22:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:22:58: Host Frequency set to 25000 KHz
14:22:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:22:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:58: ####CSD Registe 2.0 Values####
14:22:58: CSD_STRUCTURE                                 :0x1
14:22:58: Reserv1                                       :0x0
14:22:58: Time Access 1 TAAC                            :0xe
14:22:58: Time Access 2 NSAC*100                        :0x0
14:22:58: Data Transfer Rate TRAN_SPEED                 :0x32
14:22:58: Card Command Classess CCC                     :0x5b5
14:22:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:58: DSR(driver stage register)  DSR_IMP           :0x0
14:22:58: Reserv2                                       :0x0
14:22:58: Device Size C_SIZE                            :0xedc8
14:22:58: Reserv3                                       :0x0
14:22:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:58: Reserv4                                       :0x0
14:22:58: Write Speed Factor R2W_FACTOR                 :0x2
14:22:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:58: FILE_FORMAT_GRP                               :0x0
14:22:58: COPY flag                                     :0x1
14:22:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:58: File_Format                                   :0x0
14:22:58: CRC                                           :0x0
14:22:58: ####CSD Registe Values####  

14:22:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:22:58: [GetSCRRegisterEntry] Passed
14:22:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:22:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:22:58: Data_Status_After Erases          : 0
14:22:58: CPRM Security Support             : No Security
14:22:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:22:58: Spec. Version                     : Version 3.0X
14:22:58: Extended Security Support         : Extended_Security_Not_Supported
14:22:58: Command Support                   : COMMAND_SUPPORT
14:22:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:22:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ECC0>, <py_sfcl.CommandDataDefinition object at 0x0642EAE0>) , Command count = 1747 ] 
14:22:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:22:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421450>, <py_sfcl.CommandDataDefinition object at 0x0642EAB0>) , Command count = 1748 ] 
14:22:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:22:58: [ SetBusWidth(0x4) , Command count = 1749 ] 
14:22:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:22:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B7B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1750 ] 
14:22:58: Protected Area Size 0x28000
14:22:58: Bus Width           2
14:22:58: Secure Mode         0
14:22:58: Speed  Class        4
14:22:58: Perf Move           0
14:22:58: Au Size             9
14:22:58: Erase Size          15
14:22:58: Erase Timeout       1
14:22:58: Erase offset        1
14:22:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:22:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:22:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:22:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1751 ] 
14:22:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:22:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:22:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:22:59: Host Frequency set to 100000 KHz
14:22:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:22:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:22:59: ####CSD Registe 2.0 Values####
14:22:59: CSD_STRUCTURE                                 :0x1
14:22:59: Reserv1                                       :0x0
14:22:59: Time Access 1 TAAC                            :0xe
14:22:59: Time Access 2 NSAC*100                        :0x0
14:22:59: Data Transfer Rate TRAN_SPEED                 :0xb
14:22:59: Card Command Classess CCC                     :0x5b5
14:22:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:22:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:22:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:22:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:22:59: DSR(driver stage register)  DSR_IMP           :0x0
14:22:59: Reserv2                                       :0x0
14:22:59: Device Size C_SIZE                            :0xedc8
14:22:59: Reserv3                                       :0x0
14:22:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:22:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:22:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:22:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:22:59: Reserv4                                       :0x0
14:22:59: Write Speed Factor R2W_FACTOR                 :0x2
14:22:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:22:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:22:59: FILE_FORMAT_GRP                               :0x0
14:22:59: COPY flag                                     :0x1
14:22:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:22:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:22:59: File_Format                                   :0x0
14:22:59: CRC                                           :0x0
14:22:59: ####CSD Registe Values####  

14:22:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EED0>, <py_sfcl.CommandDataDefinition object at 0x0642ECF0>) , Command count = 1752 ] 
14:22:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:22:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064215D0>, <py_sfcl.CommandDataDefinition object at 0x0642A5A0>) , Command count = 1753 ] 
14:22:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:22:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:22:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AF30>, <py_sfcl.PySEnhancedCmdData object at 0x0642EDE0>, <None>, <py_sfcl.Command23 object at 0x0642A300>) , Command count = 1754 ] 
14:22:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 25
14:22:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:22:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064310F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642EF30>, <None>, <py_sfcl.Command23 object at 0x0642EE10>) , Command count = 1755 ] 
14:22:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:22:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:22:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E1E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E450>, <py_sfcl.PySEnhancedCmdData object at 0x0642E630>, <None>, <py_sfcl.Command23 object at 0x0642EE40>) , Command count = 1756 ] 
14:22:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:22:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:01: Host Frequency set to 25000 KHz
14:23:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431300>, 0x0, True) , Command count = 1757 ] 
14:23:01: [GO18_globalSetVolt]### Host voltage value is set.
14:23:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645BA80>, 0x0, False) , Command count = 1758 ] 
14:23:01: [GO18_globalSetVolt]### Host voltage value is set.
14:23:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1759 ] 
14:23:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1760 ] 
14:23:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1761 ] 
14:23:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312A0>, <py_sfcl.CommandDataDefinition object at 0x06431270>) , Command count = 1762 ] 
14:23:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312D0>, <py_sfcl.CommandDataDefinition object at 0x0642A480>) , Command count = 1763 ] 
14:23:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:01: [ SetCardRCA(0x1, 0xD555) , Command count = 1764 ] 
14:23:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:01: Host Frequency set to 25000 KHz
14:23:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:01: ####CSD Registe 2.0 Values####
14:23:01: CSD_STRUCTURE                                 :0x1
14:23:01: Reserv1                                       :0x0
14:23:01: Time Access 1 TAAC                            :0xe
14:23:01: Time Access 2 NSAC*100                        :0x0
14:23:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:01: Card Command Classess CCC                     :0x5b5
14:23:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:01: DSR(driver stage register)  DSR_IMP           :0x0
14:23:01: Reserv2                                       :0x0
14:23:01: Device Size C_SIZE                            :0xedc8
14:23:01: Reserv3                                       :0x0
14:23:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:01: Reserv4                                       :0x0
14:23:01: Write Speed Factor R2W_FACTOR                 :0x2
14:23:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:01: FILE_FORMAT_GRP                               :0x0
14:23:01: COPY flag                                     :0x1
14:23:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:01: File_Format                                   :0x0
14:23:01: CRC                                           :0x0
14:23:01: ####CSD Registe Values####  

14:23:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:01: [GetSCRRegisterEntry] Passed
14:23:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:01: Data_Status_After Erases          : 0
14:23:01: CPRM Security Support             : No Security
14:23:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:01: Spec. Version                     : Version 3.0X
14:23:01: Extended Security Support         : Extended_Security_Not_Supported
14:23:01: Command Support                   : COMMAND_SUPPORT
14:23:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431570>, <py_sfcl.CommandDataDefinition object at 0x06431360>) , Command count = 1765 ] 
14:23:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E3C0>, <py_sfcl.CommandDataDefinition object at 0x0642E750>) , Command count = 1766 ] 
14:23:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:01: [ SetBusWidth(0x4) , Command count = 1767 ] 
14:23:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642AC30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1768 ] 
14:23:01: Protected Area Size 0x28000
14:23:01: Bus Width           2
14:23:01: Secure Mode         0
14:23:01: Speed  Class        4
14:23:01: Perf Move           0
14:23:01: Au Size             9
14:23:01: Erase Size          15
14:23:01: Erase Timeout       1
14:23:01: Erase offset        1
14:23:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1769 ] 
14:23:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:01: Host Frequency set to 100000 KHz
14:23:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:01: ####CSD Registe 2.0 Values####
14:23:01: CSD_STRUCTURE                                 :0x1
14:23:01: Reserv1                                       :0x0
14:23:01: Time Access 1 TAAC                            :0xe
14:23:01: Time Access 2 NSAC*100                        :0x0
14:23:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:01: Card Command Classess CCC                     :0x5b5
14:23:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:01: DSR(driver stage register)  DSR_IMP           :0x0
14:23:01: Reserv2                                       :0x0
14:23:01: Device Size C_SIZE                            :0xedc8
14:23:01: Reserv3                                       :0x0
14:23:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:01: Reserv4                                       :0x0
14:23:01: Write Speed Factor R2W_FACTOR                 :0x2
14:23:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:01: FILE_FORMAT_GRP                               :0x0
14:23:01: COPY flag                                     :0x1
14:23:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:01: File_Format                                   :0x0
14:23:01: CRC                                           :0x0
14:23:01: ####CSD Registe Values####  

14:23:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7BD0>, <py_sfcl.CommandDataDefinition object at 0x05D7E1E0>) , Command count = 1770 ] 
14:23:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A570>, <py_sfcl.CommandDataDefinition object at 0x0642E480>) , Command count = 1771 ] 
14:23:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431420>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EFC0>, <py_sfcl.PySEnhancedCmdData object at 0x0642EEA0>, <None>, <py_sfcl.Command23 object at 0x0642E360>) , Command count = 1772 ] 
14:23:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 24
14:23:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7C30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431630>, <py_sfcl.PySEnhancedCmdData object at 0x064313C0>, <None>, <py_sfcl.Command23 object at 0x0642EBD0>) , Command count = 1773 ] 
14:23:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431660>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E810>, <py_sfcl.PySEnhancedCmdData object at 0x0642E570>, <None>, <py_sfcl.Command23 object at 0x0642EE70>) , Command count = 1774 ] 
14:23:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:01: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:03: Host Frequency set to 25000 KHz
14:23:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:03: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAD180>, 0x0, True) , Command count = 1775 ] 
14:23:03: [GO18_globalSetVolt]### Host voltage value is set.
14:23:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431240>, 0x0, False) , Command count = 1776 ] 
14:23:03: [GO18_globalSetVolt]### Host voltage value is set.
14:23:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1777 ] 
14:23:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1778 ] 
14:23:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1779 ] 
14:23:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F90>, <py_sfcl.CommandDataDefinition object at 0x05DA7960>) , Command count = 1780 ] 
14:23:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADCC0>, <py_sfcl.CommandDataDefinition object at 0x0642E0C0>) , Command count = 1781 ] 
14:23:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:04: [ SetCardRCA(0x1, 0xD555) , Command count = 1782 ] 
14:23:04: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:04: Host Frequency set to 25000 KHz
14:23:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:04: ####CSD Registe 2.0 Values####
14:23:04: CSD_STRUCTURE                                 :0x1
14:23:04: Reserv1                                       :0x0
14:23:04: Time Access 1 TAAC                            :0xe
14:23:04: Time Access 2 NSAC*100                        :0x0
14:23:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:04: Card Command Classess CCC                     :0x5b5
14:23:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:04: DSR(driver stage register)  DSR_IMP           :0x0
14:23:04: Reserv2                                       :0x0
14:23:04: Device Size C_SIZE                            :0xedc8
14:23:04: Reserv3                                       :0x0
14:23:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:04: Reserv4                                       :0x0
14:23:04: Write Speed Factor R2W_FACTOR                 :0x2
14:23:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:04: FILE_FORMAT_GRP                               :0x0
14:23:04: COPY flag                                     :0x1
14:23:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:04: File_Format                                   :0x0
14:23:04: CRC                                           :0x0
14:23:04: ####CSD Registe Values####  

14:23:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:04: [GetSCRRegisterEntry] Passed
14:23:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:04: Data_Status_After Erases          : 0
14:23:04: CPRM Security Support             : No Security
14:23:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:04: Spec. Version                     : Version 3.0X
14:23:04: Extended Security Support         : Extended_Security_Not_Supported
14:23:04: Command Support                   : COMMAND_SUPPORT
14:23:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8A80>, <py_sfcl.CommandDataDefinition object at 0x0642E5D0>) , Command count = 1783 ] 
14:23:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A6C0>, <py_sfcl.CommandDataDefinition object at 0x06431330>) , Command count = 1784 ] 
14:23:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:04: [ SetBusWidth(0x4) , Command count = 1785 ] 
14:23:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BDB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1786 ] 
14:23:04: Protected Area Size 0x28000
14:23:04: Bus Width           2
14:23:04: Secure Mode         0
14:23:04: Speed  Class        4
14:23:04: Perf Move           0
14:23:04: Au Size             9
14:23:04: Erase Size          15
14:23:04: Erase Timeout       1
14:23:04: Erase offset        1
14:23:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1787 ] 
14:23:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:04: Host Frequency set to 100000 KHz
14:23:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:04: ####CSD Registe 2.0 Values####
14:23:04: CSD_STRUCTURE                                 :0x1
14:23:04: Reserv1                                       :0x0
14:23:04: Time Access 1 TAAC                            :0xe
14:23:04: Time Access 2 NSAC*100                        :0x0
14:23:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:04: Card Command Classess CCC                     :0x5b5
14:23:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:04: DSR(driver stage register)  DSR_IMP           :0x0
14:23:04: Reserv2                                       :0x0
14:23:04: Device Size C_SIZE                            :0xedc8
14:23:04: Reserv3                                       :0x0
14:23:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:04: Reserv4                                       :0x0
14:23:04: Write Speed Factor R2W_FACTOR                 :0x2
14:23:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:04: FILE_FORMAT_GRP                               :0x0
14:23:04: COPY flag                                     :0x1
14:23:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:04: File_Format                                   :0x0
14:23:04: CRC                                           :0x0
14:23:04: ####CSD Registe Values####  

14:23:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D91180>, <py_sfcl.CommandDataDefinition object at 0x05D91210>) , Command count = 1788 ] 
14:23:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E7B0>, <py_sfcl.CommandDataDefinition object at 0x0642E540>) , Command count = 1789 ] 
14:23:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF7E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E6F0>, <py_sfcl.PySEnhancedCmdData object at 0x0642E720>, <None>, <py_sfcl.Command23 object at 0x0642EB40>) , Command count = 1790 ] 
14:23:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 23
14:23:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF810>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431B40>, <py_sfcl.PySEnhancedCmdData object at 0x06431B70>, <None>, <py_sfcl.Command23 object at 0x06431A50>) , Command count = 1791 ] 
14:23:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467CF0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064317E0>, <py_sfcl.PySEnhancedCmdData object at 0x06431090>, <None>, <py_sfcl.Command23 object at 0x064315A0>) , Command count = 1792 ] 
14:23:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:06: Host Frequency set to 25000 KHz
14:23:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF960>, 0x0, True) , Command count = 1793 ] 
14:23:06: [GO18_globalSetVolt]### Host voltage value is set.
14:23:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x064314B0>, 0x0, False) , Command count = 1794 ] 
14:23:06: [GO18_globalSetVolt]### Host voltage value is set.
14:23:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1795 ] 
14:23:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1796 ] 
14:23:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1797 ] 
14:23:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB10>, <py_sfcl.CommandDataDefinition object at 0x05DA7C60>) , Command count = 1798 ] 
14:23:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D7EAE0>, <py_sfcl.CommandDataDefinition object at 0x0642ED20>) , Command count = 1799 ] 
14:23:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1800 ] 
14:23:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:07: Host Frequency set to 25000 KHz
14:23:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:07: ####CSD Registe 2.0 Values####
14:23:07: CSD_STRUCTURE                                 :0x1
14:23:07: Reserv1                                       :0x0
14:23:07: Time Access 1 TAAC                            :0xe
14:23:07: Time Access 2 NSAC*100                        :0x0
14:23:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:07: Card Command Classess CCC                     :0x5b5
14:23:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:07: DSR(driver stage register)  DSR_IMP           :0x0
14:23:07: Reserv2                                       :0x0
14:23:07: Device Size C_SIZE                            :0xedc8
14:23:07: Reserv3                                       :0x0
14:23:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:07: Reserv4                                       :0x0
14:23:07: Write Speed Factor R2W_FACTOR                 :0x2
14:23:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:07: FILE_FORMAT_GRP                               :0x0
14:23:07: COPY flag                                     :0x1
14:23:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:07: File_Format                                   :0x0
14:23:07: CRC                                           :0x0
14:23:07: ####CSD Registe Values####  

14:23:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:07: [GetSCRRegisterEntry] Passed
14:23:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:07: Data_Status_After Erases          : 0
14:23:07: CPRM Security Support             : No Security
14:23:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:07: Spec. Version                     : Version 3.0X
14:23:07: Extended Security Support         : Extended_Security_Not_Supported
14:23:07: Command Support                   : COMMAND_SUPPORT
14:23:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB40>, <py_sfcl.CommandDataDefinition object at 0x06431FC0>) , Command count = 1801 ] 
14:23:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064316F0>, <py_sfcl.CommandDataDefinition object at 0x06431E40>) , Command count = 1802 ] 
14:23:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:07: [ SetBusWidth(0x4) , Command count = 1803 ] 
14:23:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642EC00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1804 ] 
14:23:07: Protected Area Size 0x28000
14:23:07: Bus Width           2
14:23:07: Secure Mode         0
14:23:07: Speed  Class        4
14:23:07: Perf Move           0
14:23:07: Au Size             9
14:23:07: Erase Size          15
14:23:07: Erase Timeout       1
14:23:07: Erase offset        1
14:23:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1805 ] 
14:23:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:07: Host Frequency set to 100000 KHz
14:23:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:07: ####CSD Registe 2.0 Values####
14:23:07: CSD_STRUCTURE                                 :0x1
14:23:07: Reserv1                                       :0x0
14:23:07: Time Access 1 TAAC                            :0xe
14:23:07: Time Access 2 NSAC*100                        :0x0
14:23:07: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:07: Card Command Classess CCC                     :0x5b5
14:23:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:07: DSR(driver stage register)  DSR_IMP           :0x0
14:23:07: Reserv2                                       :0x0
14:23:07: Device Size C_SIZE                            :0xedc8
14:23:07: Reserv3                                       :0x0
14:23:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:07: Reserv4                                       :0x0
14:23:07: Write Speed Factor R2W_FACTOR                 :0x2
14:23:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:07: FILE_FORMAT_GRP                               :0x0
14:23:07: COPY flag                                     :0x1
14:23:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:07: File_Format                                   :0x0
14:23:07: CRC                                           :0x0
14:23:07: ####CSD Registe Values####  

14:23:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E14B0>, <py_sfcl.CommandDataDefinition object at 0x05DEFE10>) , Command count = 1806 ] 
14:23:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ED50>, <py_sfcl.CommandDataDefinition object at 0x06431870>) , Command count = 1807 ] 
14:23:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F90>, <py_sfcl.PySEnhancedCmdData object at 0x06431C90>, <None>, <py_sfcl.Command23 object at 0x0642AA80>) , Command count = 1808 ] 
14:23:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 22
14:23:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431E10>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F00>, <py_sfcl.PySEnhancedCmdData object at 0x06431BD0>, <None>, <py_sfcl.Command23 object at 0x06431750>) , Command count = 1809 ] 
14:23:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7F60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064310C0>, <py_sfcl.PySEnhancedCmdData object at 0x06431180>, <None>, <py_sfcl.Command23 object at 0x06431450>) , Command count = 1810 ] 
14:23:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:09: Host Frequency set to 25000 KHz
14:23:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x064140F0>, 0x0, True) , Command count = 1811 ] 
14:23:09: [GO18_globalSetVolt]### Host voltage value is set.
14:23:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431150>, 0x0, False) , Command count = 1812 ] 
14:23:09: [GO18_globalSetVolt]### Host voltage value is set.
14:23:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1813 ] 
14:23:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1814 ] 
14:23:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1815 ] 
14:23:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414690>, <py_sfcl.CommandDataDefinition object at 0x06414B40>) , Command count = 1816 ] 
14:23:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431C30>, <py_sfcl.CommandDataDefinition object at 0x064311B0>) , Command count = 1817 ] 
14:23:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1818 ] 
14:23:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:09: Host Frequency set to 25000 KHz
14:23:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:09: ####CSD Registe 2.0 Values####
14:23:09: CSD_STRUCTURE                                 :0x1
14:23:09: Reserv1                                       :0x0
14:23:09: Time Access 1 TAAC                            :0xe
14:23:09: Time Access 2 NSAC*100                        :0x0
14:23:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:09: Card Command Classess CCC                     :0x5b5
14:23:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:09: DSR(driver stage register)  DSR_IMP           :0x0
14:23:09: Reserv2                                       :0x0
14:23:09: Device Size C_SIZE                            :0xedc8
14:23:09: Reserv3                                       :0x0
14:23:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:09: Reserv4                                       :0x0
14:23:09: Write Speed Factor R2W_FACTOR                 :0x2
14:23:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:09: FILE_FORMAT_GRP                               :0x0
14:23:09: COPY flag                                     :0x1
14:23:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:09: File_Format                                   :0x0
14:23:09: CRC                                           :0x0
14:23:09: ####CSD Registe Values####  

14:23:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:09: [GetSCRRegisterEntry] Passed
14:23:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:09: Data_Status_After Erases          : 0
14:23:09: CPRM Security Support             : No Security
14:23:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:09: Spec. Version                     : Version 3.0X
14:23:09: Extended Security Support         : Extended_Security_Not_Supported
14:23:09: Command Support                   : COMMAND_SUPPORT
14:23:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431EA0>, <py_sfcl.CommandDataDefinition object at 0x06431CF0>) , Command count = 1819 ] 
14:23:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AAE0>, <py_sfcl.CommandDataDefinition object at 0x06414900>) , Command count = 1820 ] 
14:23:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:09: [ SetBusWidth(0x4) , Command count = 1821 ] 
14:23:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B8D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1822 ] 
14:23:09: Protected Area Size 0x28000
14:23:09: Bus Width           2
14:23:09: Secure Mode         0
14:23:09: Speed  Class        4
14:23:09: Perf Move           0
14:23:09: Au Size             9
14:23:09: Erase Size          15
14:23:09: Erase Timeout       1
14:23:09: Erase offset        1
14:23:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1823 ] 
14:23:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:10: Host Frequency set to 100000 KHz
14:23:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:10: ####CSD Registe 2.0 Values####
14:23:10: CSD_STRUCTURE                                 :0x1
14:23:10: Reserv1                                       :0x0
14:23:10: Time Access 1 TAAC                            :0xe
14:23:10: Time Access 2 NSAC*100                        :0x0
14:23:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:10: Card Command Classess CCC                     :0x5b5
14:23:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:10: DSR(driver stage register)  DSR_IMP           :0x0
14:23:10: Reserv2                                       :0x0
14:23:10: Device Size C_SIZE                            :0xedc8
14:23:10: Reserv3                                       :0x0
14:23:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:10: Reserv4                                       :0x0
14:23:10: Write Speed Factor R2W_FACTOR                 :0x2
14:23:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:10: FILE_FORMAT_GRP                               :0x0
14:23:10: COPY flag                                     :0x1
14:23:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:10: File_Format                                   :0x0
14:23:10: CRC                                           :0x0
14:23:10: ####CSD Registe Values####  

14:23:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431960>, <py_sfcl.CommandDataDefinition object at 0x06431AE0>) , Command count = 1824 ] 
14:23:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431BA0>, <py_sfcl.CommandDataDefinition object at 0x064315D0>) , Command count = 1825 ] 
14:23:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431F60>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064316C0>, <py_sfcl.PySEnhancedCmdData object at 0x06431B10>, <None>, <py_sfcl.Command23 object at 0x06431D80>) , Command count = 1826 ] 
14:23:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 21
14:23:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E1060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431C60>, <py_sfcl.PySEnhancedCmdData object at 0x06431C00>, <None>, <py_sfcl.Command23 object at 0x06431A20>) , Command count = 1827 ] 
14:23:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421ED0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x062E1330>, <py_sfcl.PySEnhancedCmdData object at 0x06414990>, <None>, <py_sfcl.Command23 object at 0x06414FC0>) , Command count = 1828 ] 
14:23:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:12: Host Frequency set to 25000 KHz
14:23:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:12: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x064517B0>, 0x0, True) , Command count = 1829 ] 
14:23:12: [GO18_globalSetVolt]### Host voltage value is set.
14:23:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DADAB0>, 0x0, False) , Command count = 1830 ] 
14:23:12: [GO18_globalSetVolt]### Host voltage value is set.
14:23:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1831 ] 
14:23:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1832 ] 
14:23:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1833 ] 
14:23:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414DE0>, <py_sfcl.CommandDataDefinition object at 0x06451540>) , Command count = 1834 ] 
14:23:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064519F0>, <py_sfcl.CommandDataDefinition object at 0x06431930>) , Command count = 1835 ] 
14:23:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:12: [ SetCardRCA(0x1, 0xD555) , Command count = 1836 ] 
14:23:12: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:12: Host Frequency set to 25000 KHz
14:23:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:12: ####CSD Registe 2.0 Values####
14:23:12: CSD_STRUCTURE                                 :0x1
14:23:12: Reserv1                                       :0x0
14:23:12: Time Access 1 TAAC                            :0xe
14:23:12: Time Access 2 NSAC*100                        :0x0
14:23:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:12: Card Command Classess CCC                     :0x5b5
14:23:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:12: DSR(driver stage register)  DSR_IMP           :0x0
14:23:12: Reserv2                                       :0x0
14:23:12: Device Size C_SIZE                            :0xedc8
14:23:12: Reserv3                                       :0x0
14:23:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:12: Reserv4                                       :0x0
14:23:12: Write Speed Factor R2W_FACTOR                 :0x2
14:23:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:12: FILE_FORMAT_GRP                               :0x0
14:23:12: COPY flag                                     :0x1
14:23:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:12: File_Format                                   :0x0
14:23:12: CRC                                           :0x0
14:23:12: ####CSD Registe Values####  

14:23:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:12: [GetSCRRegisterEntry] Passed
14:23:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:12: Data_Status_After Erases          : 0
14:23:12: CPRM Security Support             : No Security
14:23:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:12: Spec. Version                     : Version 3.0X
14:23:12: Extended Security Support         : Extended_Security_Not_Supported
14:23:12: Command Support                   : COMMAND_SUPPORT
14:23:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1A80>, <py_sfcl.CommandDataDefinition object at 0x064149F0>) , Command count = 1837 ] 
14:23:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E930>, <py_sfcl.CommandDataDefinition object at 0x06451450>) , Command count = 1838 ] 
14:23:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:12: [ SetBusWidth(0x4) , Command count = 1839 ] 
14:23:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1840 ] 
14:23:12: Protected Area Size 0x28000
14:23:12: Bus Width           2
14:23:12: Secure Mode         0
14:23:12: Speed  Class        4
14:23:12: Perf Move           0
14:23:12: Au Size             9
14:23:12: Erase Size          15
14:23:12: Erase Timeout       1
14:23:12: Erase offset        1
14:23:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1841 ] 
14:23:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:12: Host Frequency set to 100000 KHz
14:23:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:12: ####CSD Registe 2.0 Values####
14:23:12: CSD_STRUCTURE                                 :0x1
14:23:12: Reserv1                                       :0x0
14:23:12: Time Access 1 TAAC                            :0xe
14:23:12: Time Access 2 NSAC*100                        :0x0
14:23:12: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:12: Card Command Classess CCC                     :0x5b5
14:23:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:12: DSR(driver stage register)  DSR_IMP           :0x0
14:23:12: Reserv2                                       :0x0
14:23:12: Device Size C_SIZE                            :0xedc8
14:23:12: Reserv3                                       :0x0
14:23:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:12: Reserv4                                       :0x0
14:23:12: Write Speed Factor R2W_FACTOR                 :0x2
14:23:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:12: FILE_FORMAT_GRP                               :0x0
14:23:12: COPY flag                                     :0x1
14:23:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:12: File_Format                                   :0x0
14:23:12: CRC                                           :0x0
14:23:12: ####CSD Registe Values####  

14:23:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414CF0>, <py_sfcl.CommandDataDefinition object at 0x064142A0>) , Command count = 1842 ] 
14:23:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431480>, <py_sfcl.CommandDataDefinition object at 0x064146C0>) , Command count = 1843 ] 
14:23:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E11E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064142D0>, <py_sfcl.PySEnhancedCmdData object at 0x064148A0>, <None>, <py_sfcl.Command23 object at 0x064143C0>) , Command count = 1844 ] 
14:23:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 20
14:23:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06451BD0>, <py_sfcl.PySEnhancedCmdData object at 0x06451B10>, <None>, <py_sfcl.Command23 object at 0x06414A50>) , Command count = 1845 ] 
14:23:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF840>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064515A0>, <py_sfcl.PySEnhancedCmdData object at 0x06451450>, <None>, <py_sfcl.Command23 object at 0x064518A0>) , Command count = 1846 ] 
14:23:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:12: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:14: Host Frequency set to 25000 KHz
14:23:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:14: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x064516C0>, 0x0, True) , Command count = 1847 ] 
14:23:14: [GO18_globalSetVolt]### Host voltage value is set.
14:23:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF9F0>, 0x0, False) , Command count = 1848 ] 
14:23:14: [GO18_globalSetVolt]### Host voltage value is set.
14:23:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1849 ] 
14:23:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1850 ] 
14:23:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1851 ] 
14:23:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F120>, <py_sfcl.CommandDataDefinition object at 0x06414870>) , Command count = 1852 ] 
14:23:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451390>, <py_sfcl.CommandDataDefinition object at 0x06451D20>) , Command count = 1853 ] 
14:23:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:15: [ SetCardRCA(0x1, 0xD555) , Command count = 1854 ] 
14:23:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:15: Host Frequency set to 25000 KHz
14:23:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:15: ####CSD Registe 2.0 Values####
14:23:15: CSD_STRUCTURE                                 :0x1
14:23:15: Reserv1                                       :0x0
14:23:15: Time Access 1 TAAC                            :0xe
14:23:15: Time Access 2 NSAC*100                        :0x0
14:23:15: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:15: Card Command Classess CCC                     :0x5b5
14:23:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:15: DSR(driver stage register)  DSR_IMP           :0x0
14:23:15: Reserv2                                       :0x0
14:23:15: Device Size C_SIZE                            :0xedc8
14:23:15: Reserv3                                       :0x0
14:23:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:15: Reserv4                                       :0x0
14:23:15: Write Speed Factor R2W_FACTOR                 :0x2
14:23:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:15: FILE_FORMAT_GRP                               :0x0
14:23:15: COPY flag                                     :0x1
14:23:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:15: File_Format                                   :0x0
14:23:15: CRC                                           :0x0
14:23:15: ####CSD Registe Values####  

14:23:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:15: [GetSCRRegisterEntry] Passed
14:23:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:15: Data_Status_After Erases          : 0
14:23:15: CPRM Security Support             : No Security
14:23:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:15: Spec. Version                     : Version 3.0X
14:23:15: Extended Security Support         : Extended_Security_Not_Supported
14:23:15: Command Support                   : COMMAND_SUPPORT
14:23:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451780>, <py_sfcl.CommandDataDefinition object at 0x0641F3F0>) , Command count = 1855 ] 
14:23:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431DB0>, <py_sfcl.CommandDataDefinition object at 0x0641F2D0>) , Command count = 1856 ] 
14:23:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:15: [ SetBusWidth(0x4) , Command count = 1857 ] 
14:23:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1858 ] 
14:23:15: Protected Area Size 0x28000
14:23:15: Bus Width           2
14:23:15: Secure Mode         0
14:23:15: Speed  Class        4
14:23:15: Perf Move           0
14:23:15: Au Size             9
14:23:15: Erase Size          15
14:23:15: Erase Timeout       1
14:23:15: Erase offset        1
14:23:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1859 ] 
14:23:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:15: Host Frequency set to 100000 KHz
14:23:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:15: ####CSD Registe 2.0 Values####
14:23:15: CSD_STRUCTURE                                 :0x1
14:23:15: Reserv1                                       :0x0
14:23:15: Time Access 1 TAAC                            :0xe
14:23:15: Time Access 2 NSAC*100                        :0x0
14:23:15: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:15: Card Command Classess CCC                     :0x5b5
14:23:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:15: DSR(driver stage register)  DSR_IMP           :0x0
14:23:15: Reserv2                                       :0x0
14:23:15: Device Size C_SIZE                            :0xedc8
14:23:15: Reserv3                                       :0x0
14:23:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:15: Reserv4                                       :0x0
14:23:15: Write Speed Factor R2W_FACTOR                 :0x2
14:23:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:15: FILE_FORMAT_GRP                               :0x0
14:23:15: COPY flag                                     :0x1
14:23:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:15: File_Format                                   :0x0
14:23:15: CRC                                           :0x0
14:23:15: ####CSD Registe Values####  

14:23:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451630>, <py_sfcl.CommandDataDefinition object at 0x06451570>) , Command count = 1860 ] 
14:23:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064515D0>, <py_sfcl.CommandDataDefinition object at 0x06451840>) , Command count = 1861 ] 
14:23:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F180>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F540>, <py_sfcl.PySEnhancedCmdData object at 0x0641F1B0>, <None>, <py_sfcl.Command23 object at 0x06451EA0>) , Command count = 1862 ] 
14:23:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 19
14:23:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F4B0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B840>, <None>, <py_sfcl.Command23 object at 0x0645B570>) , Command count = 1863 ] 
14:23:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421630>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BC00>, <py_sfcl.PySEnhancedCmdData object at 0x0645B240>, <None>, <py_sfcl.Command23 object at 0x0645BD80>) , Command count = 1864 ] 
14:23:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:17: Host Frequency set to 25000 KHz
14:23:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:17: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB10>, 0x0, True) , Command count = 1865 ] 
14:23:17: [GO18_globalSetVolt]### Host voltage value is set.
14:23:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06414D20>, 0x0, False) , Command count = 1866 ] 
14:23:17: [GO18_globalSetVolt]### Host voltage value is set.
14:23:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1867 ] 
14:23:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1868 ] 
14:23:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1869 ] 
14:23:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451E40>, <py_sfcl.CommandDataDefinition object at 0x06451600>) , Command count = 1870 ] 
14:23:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FC90>, <py_sfcl.CommandDataDefinition object at 0x0641F480>) , Command count = 1871 ] 
14:23:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:17: [ SetCardRCA(0x1, 0xD555) , Command count = 1872 ] 
14:23:18: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:18: Host Frequency set to 25000 KHz
14:23:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:18: ####CSD Registe 2.0 Values####
14:23:18: CSD_STRUCTURE                                 :0x1
14:23:18: Reserv1                                       :0x0
14:23:18: Time Access 1 TAAC                            :0xe
14:23:18: Time Access 2 NSAC*100                        :0x0
14:23:18: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:18: Card Command Classess CCC                     :0x5b5
14:23:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:18: DSR(driver stage register)  DSR_IMP           :0x0
14:23:18: Reserv2                                       :0x0
14:23:18: Device Size C_SIZE                            :0xedc8
14:23:18: Reserv3                                       :0x0
14:23:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:18: Reserv4                                       :0x0
14:23:18: Write Speed Factor R2W_FACTOR                 :0x2
14:23:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:18: FILE_FORMAT_GRP                               :0x0
14:23:18: COPY flag                                     :0x1
14:23:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:18: File_Format                                   :0x0
14:23:18: CRC                                           :0x0
14:23:18: ####CSD Registe Values####  

14:23:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:18: [GetSCRRegisterEntry] Passed
14:23:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:18: Data_Status_After Erases          : 0
14:23:18: CPRM Security Support             : No Security
14:23:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:18: Spec. Version                     : Version 3.0X
14:23:18: Extended Security Support         : Extended_Security_Not_Supported
14:23:18: Command Support                   : COMMAND_SUPPORT
14:23:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FB70>, <py_sfcl.CommandDataDefinition object at 0x0641FCF0>) , Command count = 1873 ] 
14:23:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414480>, <py_sfcl.CommandDataDefinition object at 0x0641F090>) , Command count = 1874 ] 
14:23:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:18: [ SetBusWidth(0x4) , Command count = 1875 ] 
14:23:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1876 ] 
14:23:18: Protected Area Size 0x28000
14:23:18: Bus Width           2
14:23:18: Secure Mode         0
14:23:18: Speed  Class        4
14:23:18: Perf Move           0
14:23:18: Au Size             9
14:23:18: Erase Size          15
14:23:18: Erase Timeout       1
14:23:18: Erase offset        1
14:23:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1877 ] 
14:23:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:18: Host Frequency set to 100000 KHz
14:23:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:18: ####CSD Registe 2.0 Values####
14:23:18: CSD_STRUCTURE                                 :0x1
14:23:18: Reserv1                                       :0x0
14:23:18: Time Access 1 TAAC                            :0xe
14:23:18: Time Access 2 NSAC*100                        :0x0
14:23:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:18: Card Command Classess CCC                     :0x5b5
14:23:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:18: DSR(driver stage register)  DSR_IMP           :0x0
14:23:18: Reserv2                                       :0x0
14:23:18: Device Size C_SIZE                            :0xedc8
14:23:18: Reserv3                                       :0x0
14:23:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:18: Reserv4                                       :0x0
14:23:18: Write Speed Factor R2W_FACTOR                 :0x2
14:23:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:18: FILE_FORMAT_GRP                               :0x0
14:23:18: COPY flag                                     :0x1
14:23:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:18: File_Format                                   :0x0
14:23:18: CRC                                           :0x0
14:23:18: ####CSD Registe Values####  

14:23:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467060>, <py_sfcl.CommandDataDefinition object at 0x0641FF90>) , Command count = 1878 ] 
14:23:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451C60>, <py_sfcl.CommandDataDefinition object at 0x0641FBA0>) , Command count = 1879 ] 
14:23:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064671E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467210>, <py_sfcl.PySEnhancedCmdData object at 0x06467240>, <None>, <py_sfcl.Command23 object at 0x0645B960>) , Command count = 1880 ] 
14:23:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 18
14:23:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064670C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064670F0>, <py_sfcl.PySEnhancedCmdData object at 0x06467120>, <None>, <py_sfcl.Command23 object at 0x0645B270>) , Command count = 1881 ] 
14:23:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451F00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BC30>, <py_sfcl.PySEnhancedCmdData object at 0x0645BE40>, <None>, <py_sfcl.Command23 object at 0x0645BB70>) , Command count = 1882 ] 
14:23:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:18: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:20: Host Frequency set to 25000 KHz
14:23:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:20: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x064675A0>, 0x0, True) , Command count = 1883 ] 
14:23:20: [GO18_globalSetVolt]### Host voltage value is set.
14:23:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645B4E0>, 0x0, False) , Command count = 1884 ] 
14:23:20: [GO18_globalSetVolt]### Host voltage value is set.
14:23:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1885 ] 
14:23:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1886 ] 
14:23:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1887 ] 
14:23:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467540>, <py_sfcl.CommandDataDefinition object at 0x064674E0>) , Command count = 1888 ] 
14:23:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F0F0>, <py_sfcl.CommandDataDefinition object at 0x0641FAE0>) , Command count = 1889 ] 
14:23:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1890 ] 
14:23:20: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:20: Host Frequency set to 25000 KHz
14:23:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:20: ####CSD Registe 2.0 Values####
14:23:20: CSD_STRUCTURE                                 :0x1
14:23:20: Reserv1                                       :0x0
14:23:20: Time Access 1 TAAC                            :0xe
14:23:20: Time Access 2 NSAC*100                        :0x0
14:23:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:20: Card Command Classess CCC                     :0x5b5
14:23:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:20: DSR(driver stage register)  DSR_IMP           :0x0
14:23:20: Reserv2                                       :0x0
14:23:20: Device Size C_SIZE                            :0xedc8
14:23:20: Reserv3                                       :0x0
14:23:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:20: Reserv4                                       :0x0
14:23:20: Write Speed Factor R2W_FACTOR                 :0x2
14:23:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:20: FILE_FORMAT_GRP                               :0x0
14:23:20: COPY flag                                     :0x1
14:23:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:20: File_Format                                   :0x0
14:23:20: CRC                                           :0x0
14:23:20: ####CSD Registe Values####  

14:23:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:20: [GetSCRRegisterEntry] Passed
14:23:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:20: Data_Status_After Erases          : 0
14:23:20: CPRM Security Support             : No Security
14:23:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:20: Spec. Version                     : Version 3.0X
14:23:20: Extended Security Support         : Extended_Security_Not_Supported
14:23:20: Command Support                   : COMMAND_SUPPORT
14:23:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467660>, <py_sfcl.CommandDataDefinition object at 0x0641FDE0>) , Command count = 1891 ] 
14:23:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414810>, <py_sfcl.CommandDataDefinition object at 0x0641F030>) , Command count = 1892 ] 
14:23:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:20: [ SetBusWidth(0x4) , Command count = 1893 ] 
14:23:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0641FAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1894 ] 
14:23:20: Protected Area Size 0x28000
14:23:20: Bus Width           2
14:23:20: Secure Mode         0
14:23:20: Speed  Class        4
14:23:20: Perf Move           0
14:23:20: Au Size             9
14:23:20: Erase Size          15
14:23:20: Erase Timeout       1
14:23:20: Erase offset        1
14:23:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1895 ] 
14:23:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:21: Host Frequency set to 100000 KHz
14:23:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:21: ####CSD Registe 2.0 Values####
14:23:21: CSD_STRUCTURE                                 :0x1
14:23:21: Reserv1                                       :0x0
14:23:21: Time Access 1 TAAC                            :0xe
14:23:21: Time Access 2 NSAC*100                        :0x0
14:23:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:21: Card Command Classess CCC                     :0x5b5
14:23:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:21: DSR(driver stage register)  DSR_IMP           :0x0
14:23:21: Reserv2                                       :0x0
14:23:21: Device Size C_SIZE                            :0xedc8
14:23:21: Reserv3                                       :0x0
14:23:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:21: Reserv4                                       :0x0
14:23:21: Write Speed Factor R2W_FACTOR                 :0x2
14:23:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:21: FILE_FORMAT_GRP                               :0x0
14:23:21: COPY flag                                     :0x1
14:23:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:21: File_Format                                   :0x0
14:23:21: CRC                                           :0x0
14:23:21: ####CSD Registe Values####  

14:23:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467A50>, <py_sfcl.CommandDataDefinition object at 0x06467870>) , Command count = 1896 ] 
14:23:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451ED0>, <py_sfcl.CommandDataDefinition object at 0x06467570>) , Command count = 1897 ] 
14:23:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467990>, <py_sfcl.PySEnhancedCmdData object at 0x064679C0>, <None>, <py_sfcl.Command23 object at 0x06467030>) , Command count = 1898 ] 
14:23:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 17
14:23:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06467AE0>, <None>, <py_sfcl.Command23 object at 0x06467270>) , Command count = 1899 ] 
14:23:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451810>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BA20>, <py_sfcl.PySEnhancedCmdData object at 0x0645B390>, <None>, <py_sfcl.Command23 object at 0x064671B0>) , Command count = 1900 ] 
14:23:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:21: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:23: Host Frequency set to 25000 KHz
14:23:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:23: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467E40>, 0x0, True) , Command count = 1901 ] 
14:23:23: [GO18_globalSetVolt]### Host voltage value is set.
14:23:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467510>, 0x0, False) , Command count = 1902 ] 
14:23:23: [GO18_globalSetVolt]### Host voltage value is set.
14:23:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1903 ] 
14:23:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1904 ] 
14:23:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1905 ] 
14:23:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F510>, <py_sfcl.CommandDataDefinition object at 0x06467DE0>) , Command count = 1906 ] 
14:23:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467ED0>, <py_sfcl.CommandDataDefinition object at 0x064674B0>) , Command count = 1907 ] 
14:23:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1908 ] 
14:23:23: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:23: Host Frequency set to 25000 KHz
14:23:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:23: ####CSD Registe 2.0 Values####
14:23:23: CSD_STRUCTURE                                 :0x1
14:23:23: Reserv1                                       :0x0
14:23:23: Time Access 1 TAAC                            :0xe
14:23:23: Time Access 2 NSAC*100                        :0x0
14:23:23: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:23: Card Command Classess CCC                     :0x5b5
14:23:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:23: DSR(driver stage register)  DSR_IMP           :0x0
14:23:23: Reserv2                                       :0x0
14:23:23: Device Size C_SIZE                            :0xedc8
14:23:23: Reserv3                                       :0x0
14:23:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:23: Reserv4                                       :0x0
14:23:23: Write Speed Factor R2W_FACTOR                 :0x2
14:23:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:23: FILE_FORMAT_GRP                               :0x0
14:23:23: COPY flag                                     :0x1
14:23:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:23: File_Format                                   :0x0
14:23:23: CRC                                           :0x0
14:23:23: ####CSD Registe Values####  

14:23:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:23: [GetSCRRegisterEntry] Passed
14:23:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:23: Data_Status_After Erases          : 0
14:23:23: CPRM Security Support             : No Security
14:23:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:23: Spec. Version                     : Version 3.0X
14:23:23: Extended Security Support         : Extended_Security_Not_Supported
14:23:23: Command Support                   : COMMAND_SUPPORT
14:23:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421030>, <py_sfcl.CommandDataDefinition object at 0x06467F00>) , Command count = 1909 ] 
14:23:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F450>, <py_sfcl.CommandDataDefinition object at 0x06467330>) , Command count = 1910 ] 
14:23:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:23: [ SetBusWidth(0x4) , Command count = 1911 ] 
14:23:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B9C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1912 ] 
14:23:23: Protected Area Size 0x28000
14:23:23: Bus Width           2
14:23:23: Secure Mode         0
14:23:23: Speed  Class        4
14:23:23: Perf Move           0
14:23:23: Au Size             9
14:23:23: Erase Size          15
14:23:23: Erase Timeout       1
14:23:23: Erase offset        1
14:23:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1913 ] 
14:23:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:23: Host Frequency set to 100000 KHz
14:23:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:23: ####CSD Registe 2.0 Values####
14:23:23: CSD_STRUCTURE                                 :0x1
14:23:23: Reserv1                                       :0x0
14:23:23: Time Access 1 TAAC                            :0xe
14:23:23: Time Access 2 NSAC*100                        :0x0
14:23:23: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:23: Card Command Classess CCC                     :0x5b5
14:23:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:23: DSR(driver stage register)  DSR_IMP           :0x0
14:23:23: Reserv2                                       :0x0
14:23:23: Device Size C_SIZE                            :0xedc8
14:23:23: Reserv3                                       :0x0
14:23:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:23: Reserv4                                       :0x0
14:23:23: Write Speed Factor R2W_FACTOR                 :0x2
14:23:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:23: FILE_FORMAT_GRP                               :0x0
14:23:23: COPY flag                                     :0x1
14:23:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:23: File_Format                                   :0x0
14:23:23: CRC                                           :0x0
14:23:23: ####CSD Registe Values####  

14:23:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F330>, <py_sfcl.CommandDataDefinition object at 0x06467F90>) , Command count = 1914 ] 
14:23:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467720>, <py_sfcl.CommandDataDefinition object at 0x06467420>) , Command count = 1915 ] 
14:23:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064212A0>, <py_sfcl.PySEnhancedCmdData object at 0x06467C00>, <None>, <py_sfcl.Command23 object at 0x064673C0>) , Command count = 1916 ] 
14:23:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 16
14:23:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421360>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421390>, <py_sfcl.PySEnhancedCmdData object at 0x064679F0>, <None>, <py_sfcl.Command23 object at 0x064675D0>) , Command count = 1917 ] 
14:23:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451F60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B360>, <py_sfcl.PySEnhancedCmdData object at 0x0645B390>, <None>, <py_sfcl.Command23 object at 0x06467EA0>) , Command count = 1918 ] 
14:23:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:23: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:25: Host Frequency set to 25000 KHz
14:23:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421720>, 0x0, True) , Command count = 1919 ] 
14:23:25: [GO18_globalSetVolt]### Host voltage value is set.
14:23:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB40>, 0x0, False) , Command count = 1920 ] 
14:23:26: [GO18_globalSetVolt]### Host voltage value is set.
14:23:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1921 ] 
14:23:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1922 ] 
14:23:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1923 ] 
14:23:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216C0>, <py_sfcl.CommandDataDefinition object at 0x06421660>) , Command count = 1924 ] 
14:23:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467BA0>, <py_sfcl.CommandDataDefinition object at 0x064676C0>) , Command count = 1925 ] 
14:23:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:26: [ SetCardRCA(0x1, 0xD555) , Command count = 1926 ] 
14:23:26: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:26: Host Frequency set to 25000 KHz
14:23:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:26: ####CSD Registe 2.0 Values####
14:23:26: CSD_STRUCTURE                                 :0x1
14:23:26: Reserv1                                       :0x0
14:23:26: Time Access 1 TAAC                            :0xe
14:23:26: Time Access 2 NSAC*100                        :0x0
14:23:26: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:26: Card Command Classess CCC                     :0x5b5
14:23:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:26: DSR(driver stage register)  DSR_IMP           :0x0
14:23:26: Reserv2                                       :0x0
14:23:26: Device Size C_SIZE                            :0xedc8
14:23:26: Reserv3                                       :0x0
14:23:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:26: Reserv4                                       :0x0
14:23:26: Write Speed Factor R2W_FACTOR                 :0x2
14:23:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:26: FILE_FORMAT_GRP                               :0x0
14:23:26: COPY flag                                     :0x1
14:23:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:26: File_Format                                   :0x0
14:23:26: CRC                                           :0x0
14:23:26: ####CSD Registe Values####  

14:23:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:26: [GetSCRRegisterEntry] Passed
14:23:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:26: Data_Status_After Erases          : 0
14:23:26: CPRM Security Support             : No Security
14:23:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:26: Spec. Version                     : Version 3.0X
14:23:26: Extended Security Support         : Extended_Security_Not_Supported
14:23:26: Command Support                   : COMMAND_SUPPORT
14:23:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467C60>, <py_sfcl.CommandDataDefinition object at 0x06467360>) , Command count = 1927 ] 
14:23:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FE40>, <py_sfcl.CommandDataDefinition object at 0x064217E0>) , Command count = 1928 ] 
14:23:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:26: [ SetBusWidth(0x4) , Command count = 1929 ] 
14:23:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BB10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1930 ] 
14:23:26: Protected Area Size 0x28000
14:23:26: Bus Width           2
14:23:26: Secure Mode         0
14:23:26: Speed  Class        4
14:23:26: Perf Move           0
14:23:26: Au Size             9
14:23:26: Erase Size          15
14:23:26: Erase Timeout       1
14:23:26: Erase offset        1
14:23:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1931 ] 
14:23:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:26: Host Frequency set to 100000 KHz
14:23:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:26: ####CSD Registe 2.0 Values####
14:23:26: CSD_STRUCTURE                                 :0x1
14:23:26: Reserv1                                       :0x0
14:23:26: Time Access 1 TAAC                            :0xe
14:23:26: Time Access 2 NSAC*100                        :0x0
14:23:26: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:26: Card Command Classess CCC                     :0x5b5
14:23:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:26: DSR(driver stage register)  DSR_IMP           :0x0
14:23:26: Reserv2                                       :0x0
14:23:26: Device Size C_SIZE                            :0xedc8
14:23:26: Reserv3                                       :0x0
14:23:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:26: Reserv4                                       :0x0
14:23:26: Write Speed Factor R2W_FACTOR                 :0x2
14:23:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:26: FILE_FORMAT_GRP                               :0x0
14:23:26: COPY flag                                     :0x1
14:23:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:26: File_Format                                   :0x0
14:23:26: CRC                                           :0x0
14:23:26: ####CSD Registe Values####  

14:23:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467750>, <py_sfcl.CommandDataDefinition object at 0x06421BD0>) , Command count = 1932 ] 
14:23:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467600>, <py_sfcl.CommandDataDefinition object at 0x06467930>) , Command count = 1933 ] 
14:23:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421B10>, <py_sfcl.PySEnhancedCmdData object at 0x06421B40>, <None>, <py_sfcl.Command23 object at 0x064213C0>) , Command count = 1934 ] 
14:23:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 15
14:23:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421C30>, <py_sfcl.PySEnhancedCmdData object at 0x06421C60>, <None>, <py_sfcl.Command23 object at 0x064217B0>) , Command count = 1935 ] 
14:23:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641FA80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B5D0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BD20>, <None>, <py_sfcl.Command23 object at 0x06421420>) , Command count = 1936 ] 
14:23:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:26: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:28: Host Frequency set to 25000 KHz
14:23:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:28: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421FC0>, 0x0, True) , Command count = 1937 ] 
14:23:28: [GO18_globalSetVolt]### Host voltage value is set.
14:23:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E8D0>, 0x0, False) , Command count = 1938 ] 
14:23:28: [GO18_globalSetVolt]### Host voltage value is set.
14:23:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1939 ] 
14:23:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1940 ] 
14:23:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1941 ] 
14:23:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A060>, <py_sfcl.CommandDataDefinition object at 0x06421F60>) , Command count = 1942 ] 
14:23:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A0F0>, <py_sfcl.CommandDataDefinition object at 0x06421DB0>) , Command count = 1943 ] 
14:23:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:28: [ SetCardRCA(0x1, 0xD555) , Command count = 1944 ] 
14:23:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:29: Host Frequency set to 25000 KHz
14:23:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:29: ####CSD Registe 2.0 Values####
14:23:29: CSD_STRUCTURE                                 :0x1
14:23:29: Reserv1                                       :0x0
14:23:29: Time Access 1 TAAC                            :0xe
14:23:29: Time Access 2 NSAC*100                        :0x0
14:23:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:29: Card Command Classess CCC                     :0x5b5
14:23:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:29: DSR(driver stage register)  DSR_IMP           :0x0
14:23:29: Reserv2                                       :0x0
14:23:29: Device Size C_SIZE                            :0xedc8
14:23:29: Reserv3                                       :0x0
14:23:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:29: Reserv4                                       :0x0
14:23:29: Write Speed Factor R2W_FACTOR                 :0x2
14:23:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:29: FILE_FORMAT_GRP                               :0x0
14:23:29: COPY flag                                     :0x1
14:23:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:29: File_Format                                   :0x0
14:23:29: CRC                                           :0x0
14:23:29: ####CSD Registe Values####  

14:23:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:29: [GetSCRRegisterEntry] Passed
14:23:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:29: Data_Status_After Erases          : 0
14:23:29: CPRM Security Support             : No Security
14:23:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:29: Spec. Version                     : Version 3.0X
14:23:29: Extended Security Support         : Extended_Security_Not_Supported
14:23:29: Command Support                   : COMMAND_SUPPORT
14:23:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A2A0>, <py_sfcl.CommandDataDefinition object at 0x0642A0C0>) , Command count = 1945 ] 
14:23:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467810>, <py_sfcl.CommandDataDefinition object at 0x06421330>) , Command count = 1946 ] 
14:23:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:29: [ SetBusWidth(0x4) , Command count = 1947 ] 
14:23:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1948 ] 
14:23:29: Protected Area Size 0x28000
14:23:29: Bus Width           2
14:23:29: Secure Mode         0
14:23:29: Speed  Class        4
14:23:29: Perf Move           0
14:23:29: Au Size             9
14:23:29: Erase Size          15
14:23:29: Erase Timeout       1
14:23:29: Erase offset        1
14:23:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1949 ] 
14:23:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:29: Host Frequency set to 100000 KHz
14:23:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:29: ####CSD Registe 2.0 Values####
14:23:29: CSD_STRUCTURE                                 :0x1
14:23:29: Reserv1                                       :0x0
14:23:29: Time Access 1 TAAC                            :0xe
14:23:29: Time Access 2 NSAC*100                        :0x0
14:23:29: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:29: Card Command Classess CCC                     :0x5b5
14:23:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:29: DSR(driver stage register)  DSR_IMP           :0x0
14:23:29: Reserv2                                       :0x0
14:23:29: Device Size C_SIZE                            :0xedc8
14:23:29: Reserv3                                       :0x0
14:23:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:29: Reserv4                                       :0x0
14:23:29: Write Speed Factor R2W_FACTOR                 :0x2
14:23:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:29: FILE_FORMAT_GRP                               :0x0
14:23:29: COPY flag                                     :0x1
14:23:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:29: File_Format                                   :0x0
14:23:29: CRC                                           :0x0
14:23:29: ####CSD Registe Values####  

14:23:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A090>, <py_sfcl.CommandDataDefinition object at 0x06421D50>) , Command count = 1950 ] 
14:23:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467300>, <py_sfcl.CommandDataDefinition object at 0x064218D0>) , Command count = 1951 ] 
14:23:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421D80>, <py_sfcl.PySEnhancedCmdData object at 0x06421BA0>, <None>, <py_sfcl.Command23 object at 0x06421C90>) , Command count = 1952 ] 
14:23:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 14
14:23:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A510>, <py_sfcl.PySEnhancedCmdData object at 0x0642A540>, <None>, <py_sfcl.Command23 object at 0x064212D0>) , Command count = 1953 ] 
14:23:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421690>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B6F0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BE70>, <None>, <py_sfcl.Command23 object at 0x06421CC0>) , Command count = 1954 ] 
14:23:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:29: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:31: Host Frequency set to 25000 KHz
14:23:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:31: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A8A0>, 0x0, True) , Command count = 1955 ] 
14:23:31: [GO18_globalSetVolt]### Host voltage value is set.
14:23:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467D20>, 0x0, False) , Command count = 1956 ] 
14:23:31: [GO18_globalSetVolt]### Host voltage value is set.
14:23:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1957 ] 
14:23:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1958 ] 
14:23:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1959 ] 
14:23:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A840>, <py_sfcl.CommandDataDefinition object at 0x06421D20>) , Command count = 1960 ] 
14:23:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421870>, <py_sfcl.CommandDataDefinition object at 0x06421840>) , Command count = 1961 ] 
14:23:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:31: [ SetCardRCA(0x1, 0xD555) , Command count = 1962 ] 
14:23:31: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:31: Host Frequency set to 25000 KHz
14:23:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:31: ####CSD Registe 2.0 Values####
14:23:31: CSD_STRUCTURE                                 :0x1
14:23:31: Reserv1                                       :0x0
14:23:31: Time Access 1 TAAC                            :0xe
14:23:31: Time Access 2 NSAC*100                        :0x0
14:23:31: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:31: Card Command Classess CCC                     :0x5b5
14:23:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:31: DSR(driver stage register)  DSR_IMP           :0x0
14:23:31: Reserv2                                       :0x0
14:23:31: Device Size C_SIZE                            :0xedc8
14:23:31: Reserv3                                       :0x0
14:23:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:31: Reserv4                                       :0x0
14:23:31: Write Speed Factor R2W_FACTOR                 :0x2
14:23:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:31: FILE_FORMAT_GRP                               :0x0
14:23:31: COPY flag                                     :0x1
14:23:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:31: File_Format                                   :0x0
14:23:31: CRC                                           :0x0
14:23:31: ####CSD Registe Values####  

14:23:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:31: [GetSCRRegisterEntry] Passed
14:23:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:31: Data_Status_After Erases          : 0
14:23:31: CPRM Security Support             : No Security
14:23:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:31: Spec. Version                     : Version 3.0X
14:23:31: Extended Security Support         : Extended_Security_Not_Supported
14:23:31: Command Support                   : COMMAND_SUPPORT
14:23:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AB40>, <py_sfcl.CommandDataDefinition object at 0x0642A960>) , Command count = 1963 ] 
14:23:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421120>, <py_sfcl.CommandDataDefinition object at 0x0642A870>) , Command count = 1964 ] 
14:23:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:31: [ SetBusWidth(0x4) , Command count = 1965 ] 
14:23:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1966 ] 
14:23:31: Protected Area Size 0x28000
14:23:31: Bus Width           2
14:23:31: Secure Mode         0
14:23:31: Speed  Class        4
14:23:31: Perf Move           0
14:23:31: Au Size             9
14:23:31: Erase Size          15
14:23:31: Erase Timeout       1
14:23:31: Erase offset        1
14:23:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1967 ] 
14:23:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:32: Host Frequency set to 100000 KHz
14:23:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:32: ####CSD Registe 2.0 Values####
14:23:32: CSD_STRUCTURE                                 :0x1
14:23:32: Reserv1                                       :0x0
14:23:32: Time Access 1 TAAC                            :0xe
14:23:32: Time Access 2 NSAC*100                        :0x0
14:23:32: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:32: Card Command Classess CCC                     :0x5b5
14:23:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:32: DSR(driver stage register)  DSR_IMP           :0x0
14:23:32: Reserv2                                       :0x0
14:23:32: Device Size C_SIZE                            :0xedc8
14:23:32: Reserv3                                       :0x0
14:23:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:32: Reserv4                                       :0x0
14:23:32: Write Speed Factor R2W_FACTOR                 :0x2
14:23:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:32: FILE_FORMAT_GRP                               :0x0
14:23:32: COPY flag                                     :0x1
14:23:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:32: File_Format                                   :0x0
14:23:32: CRC                                           :0x0
14:23:32: ####CSD Registe Values####  

14:23:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064210F0>, <py_sfcl.CommandDataDefinition object at 0x0642AD50>) , Command count = 1968 ] 
14:23:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421780>, <py_sfcl.CommandDataDefinition object at 0x064214B0>) , Command count = 1969 ] 
14:23:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC60>, <py_sfcl.PySEnhancedCmdData object at 0x0642AC90>, <None>, <py_sfcl.Command23 object at 0x0642A690>) , Command count = 1970 ] 
14:23:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 13
14:23:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642ADB0>, <py_sfcl.PySEnhancedCmdData object at 0x0642ADE0>, <None>, <py_sfcl.Command23 object at 0x0642A810>) , Command count = 1971 ] 
14:23:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467C90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B420>, <py_sfcl.PySEnhancedCmdData object at 0x0645B090>, <None>, <py_sfcl.Command23 object at 0x0642A1E0>) , Command count = 1972 ] 
14:23:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:32: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:34: Host Frequency set to 25000 KHz
14:23:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:34: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E030>, 0x0, True) , Command count = 1973 ] 
14:23:34: [GO18_globalSetVolt]### Host voltage value is set.
14:23:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421600>, 0x0, False) , Command count = 1974 ] 
14:23:34: [GO18_globalSetVolt]### Host voltage value is set.
14:23:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1975 ] 
14:23:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1976 ] 
14:23:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1977 ] 
14:23:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E150>, <py_sfcl.CommandDataDefinition object at 0x0642E0F0>) , Command count = 1978 ] 
14:23:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E210>, <py_sfcl.CommandDataDefinition object at 0x06421B70>) , Command count = 1979 ] 
14:23:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1980 ] 
14:23:34: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:34: Host Frequency set to 25000 KHz
14:23:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:34: ####CSD Registe 2.0 Values####
14:23:34: CSD_STRUCTURE                                 :0x1
14:23:34: Reserv1                                       :0x0
14:23:34: Time Access 1 TAAC                            :0xe
14:23:34: Time Access 2 NSAC*100                        :0x0
14:23:34: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:34: Card Command Classess CCC                     :0x5b5
14:23:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:34: DSR(driver stage register)  DSR_IMP           :0x0
14:23:34: Reserv2                                       :0x0
14:23:34: Device Size C_SIZE                            :0xedc8
14:23:34: Reserv3                                       :0x0
14:23:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:34: Reserv4                                       :0x0
14:23:34: Write Speed Factor R2W_FACTOR                 :0x2
14:23:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:34: FILE_FORMAT_GRP                               :0x0
14:23:34: COPY flag                                     :0x1
14:23:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:34: File_Format                                   :0x0
14:23:34: CRC                                           :0x0
14:23:34: ####CSD Registe Values####  

14:23:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:34: [GetSCRRegisterEntry] Passed
14:23:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:34: Data_Status_After Erases          : 0
14:23:34: CPRM Security Support             : No Security
14:23:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:34: Spec. Version                     : Version 3.0X
14:23:34: Extended Security Support         : Extended_Security_Not_Supported
14:23:34: Command Support                   : COMMAND_SUPPORT
14:23:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E420>, <py_sfcl.CommandDataDefinition object at 0x0642E1B0>) , Command count = 1981 ] 
14:23:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421990>, <py_sfcl.CommandDataDefinition object at 0x0642A150>) , Command count = 1982 ] 
14:23:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:34: [ SetBusWidth(0x4) , Command count = 1983 ] 
14:23:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1984 ] 
14:23:34: Protected Area Size 0x28000
14:23:34: Bus Width           2
14:23:34: Secure Mode         0
14:23:34: Speed  Class        4
14:23:34: Perf Move           0
14:23:34: Au Size             9
14:23:34: Erase Size          15
14:23:34: Erase Timeout       1
14:23:34: Erase offset        1
14:23:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1985 ] 
14:23:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:34: Host Frequency set to 100000 KHz
14:23:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:34: ####CSD Registe 2.0 Values####
14:23:34: CSD_STRUCTURE                                 :0x1
14:23:34: Reserv1                                       :0x0
14:23:34: Time Access 1 TAAC                            :0xe
14:23:34: Time Access 2 NSAC*100                        :0x0
14:23:34: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:34: Card Command Classess CCC                     :0x5b5
14:23:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:34: DSR(driver stage register)  DSR_IMP           :0x0
14:23:34: Reserv2                                       :0x0
14:23:34: Device Size C_SIZE                            :0xedc8
14:23:34: Reserv3                                       :0x0
14:23:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:34: Reserv4                                       :0x0
14:23:34: Write Speed Factor R2W_FACTOR                 :0x2
14:23:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:34: FILE_FORMAT_GRP                               :0x0
14:23:34: COPY flag                                     :0x1
14:23:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:34: File_Format                                   :0x0
14:23:34: CRC                                           :0x0
14:23:34: ####CSD Registe Values####  

14:23:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AED0>, <py_sfcl.CommandDataDefinition object at 0x0642AE10>) , Command count = 1986 ] 
14:23:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451D50>, <py_sfcl.CommandDataDefinition object at 0x0642A2D0>) , Command count = 1987 ] 
14:23:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E330>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642AD20>, <None>, <py_sfcl.Command23 object at 0x0642A5D0>) , Command count = 1988 ] 
14:23:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 12
14:23:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E690>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6C0>, <None>, <py_sfcl.Command23 object at 0x0642AC00>) , Command count = 1989 ] 
14:23:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421570>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A3C0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BBA0>, <None>, <py_sfcl.Command23 object at 0x0642A900>) , Command count = 1990 ] 
14:23:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:34: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:37: Host Frequency set to 25000 KHz
14:23:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EA20>, 0x0, True) , Command count = 1991 ] 
14:23:37: [GO18_globalSetVolt]### Host voltage value is set.
14:23:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421EA0>, 0x0, False) , Command count = 1992 ] 
14:23:37: [GO18_globalSetVolt]### Host voltage value is set.
14:23:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1993 ] 
14:23:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1994 ] 
14:23:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1995 ] 
14:23:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E9C0>, <py_sfcl.CommandDataDefinition object at 0x0642AE70>) , Command count = 1996 ] 
14:23:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A9F0>, <py_sfcl.CommandDataDefinition object at 0x0642A360>) , Command count = 1997 ] 
14:23:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1998 ] 
14:23:37: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:37: Host Frequency set to 25000 KHz
14:23:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:37: ####CSD Registe 2.0 Values####
14:23:37: CSD_STRUCTURE                                 :0x1
14:23:37: Reserv1                                       :0x0
14:23:37: Time Access 1 TAAC                            :0xe
14:23:37: Time Access 2 NSAC*100                        :0x0
14:23:37: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:37: Card Command Classess CCC                     :0x5b5
14:23:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:37: DSR(driver stage register)  DSR_IMP           :0x0
14:23:37: Reserv2                                       :0x0
14:23:37: Device Size C_SIZE                            :0xedc8
14:23:37: Reserv3                                       :0x0
14:23:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:37: Reserv4                                       :0x0
14:23:37: Write Speed Factor R2W_FACTOR                 :0x2
14:23:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:37: FILE_FORMAT_GRP                               :0x0
14:23:37: COPY flag                                     :0x1
14:23:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:37: File_Format                                   :0x0
14:23:37: CRC                                           :0x0
14:23:37: ####CSD Registe Values####  

14:23:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:37: [GetSCRRegisterEntry] Passed
14:23:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:37: Data_Status_After Erases          : 0
14:23:37: CPRM Security Support             : No Security
14:23:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:37: Spec. Version                     : Version 3.0X
14:23:37: Extended Security Support         : Extended_Security_Not_Supported
14:23:37: Command Support                   : COMMAND_SUPPORT
14:23:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A8D0>, <py_sfcl.CommandDataDefinition object at 0x0642ECC0>) , Command count = 1999 ] 
14:23:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A270>, <py_sfcl.CommandDataDefinition object at 0x0642EBA0>) , Command count = 2000 ] 
14:23:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:37: [ SetBusWidth(0x4) , Command count = 2001 ] 
14:23:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B0C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2002 ] 
14:23:37: Protected Area Size 0x28000
14:23:37: Bus Width           2
14:23:37: Secure Mode         0
14:23:37: Speed  Class        4
14:23:37: Perf Move           0
14:23:37: Au Size             9
14:23:37: Erase Size          15
14:23:37: Erase Timeout       1
14:23:37: Erase offset        1
14:23:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2003 ] 
14:23:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:37: Host Frequency set to 100000 KHz
14:23:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:37: ####CSD Registe 2.0 Values####
14:23:37: CSD_STRUCTURE                                 :0x1
14:23:37: Reserv1                                       :0x0
14:23:37: Time Access 1 TAAC                            :0xe
14:23:37: Time Access 2 NSAC*100                        :0x0
14:23:37: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:37: Card Command Classess CCC                     :0x5b5
14:23:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:37: DSR(driver stage register)  DSR_IMP           :0x0
14:23:37: Reserv2                                       :0x0
14:23:37: Device Size C_SIZE                            :0xedc8
14:23:37: Reserv3                                       :0x0
14:23:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:37: Reserv4                                       :0x0
14:23:37: Write Speed Factor R2W_FACTOR                 :0x2
14:23:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:37: FILE_FORMAT_GRP                               :0x0
14:23:37: COPY flag                                     :0x1
14:23:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:37: File_Format                                   :0x0
14:23:37: CRC                                           :0x0
14:23:37: ####CSD Registe Values####  

14:23:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ACF0>, <py_sfcl.CommandDataDefinition object at 0x0642EED0>) , Command count = 2004 ] 
14:23:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421CF0>, <py_sfcl.CommandDataDefinition object at 0x0642A450>) , Command count = 2005 ] 
14:23:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AF30>, <py_sfcl.PySEnhancedCmdData object at 0x0642A300>, <None>, <py_sfcl.Command23 object at 0x0642E4B0>) , Command count = 2006 ] 
14:23:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 11
14:23:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064310F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642EF30>, <None>, <py_sfcl.Command23 object at 0x0642EDE0>) , Command count = 2007 ] 
14:23:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421E10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E2A0>, <py_sfcl.PySEnhancedCmdData object at 0x0642EAB0>, <None>, <py_sfcl.Command23 object at 0x0642EE10>) , Command count = 2008 ] 
14:23:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:37: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:39: Host Frequency set to 25000 KHz
14:23:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:39: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431300>, 0x0, True) , Command count = 2009 ] 
14:23:39: [GO18_globalSetVolt]### Host voltage value is set.
14:23:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645BE10>, 0x0, False) , Command count = 2010 ] 
14:23:39: [GO18_globalSetVolt]### Host voltage value is set.
14:23:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2011 ] 
14:23:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2012 ] 
14:23:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2013 ] 
14:23:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312A0>, <py_sfcl.CommandDataDefinition object at 0x06431270>) , Command count = 2014 ] 
14:23:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C40B70>, <py_sfcl.CommandDataDefinition object at 0x0642A750>) , Command count = 2015 ] 
14:23:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:40: [ SetCardRCA(0x1, 0xD555) , Command count = 2016 ] 
14:23:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:40: Host Frequency set to 25000 KHz
14:23:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:40: ####CSD Registe 2.0 Values####
14:23:40: CSD_STRUCTURE                                 :0x1
14:23:40: Reserv1                                       :0x0
14:23:40: Time Access 1 TAAC                            :0xe
14:23:40: Time Access 2 NSAC*100                        :0x0
14:23:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:40: Card Command Classess CCC                     :0x5b5
14:23:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:40: DSR(driver stage register)  DSR_IMP           :0x0
14:23:40: Reserv2                                       :0x0
14:23:40: Device Size C_SIZE                            :0xedc8
14:23:40: Reserv3                                       :0x0
14:23:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:40: Reserv4                                       :0x0
14:23:40: Write Speed Factor R2W_FACTOR                 :0x2
14:23:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:40: FILE_FORMAT_GRP                               :0x0
14:23:40: COPY flag                                     :0x1
14:23:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:40: File_Format                                   :0x0
14:23:40: CRC                                           :0x0
14:23:40: ####CSD Registe Values####  

14:23:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:40: [GetSCRRegisterEntry] Passed
14:23:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:40: Data_Status_After Erases          : 0
14:23:40: CPRM Security Support             : No Security
14:23:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:40: Spec. Version                     : Version 3.0X
14:23:40: Extended Security Support         : Extended_Security_Not_Supported
14:23:40: Command Support                   : COMMAND_SUPPORT
14:23:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431570>, <py_sfcl.CommandDataDefinition object at 0x06431360>) , Command count = 2017 ] 
14:23:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AB10>, <py_sfcl.CommandDataDefinition object at 0x0642A750>) , Command count = 2018 ] 
14:23:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:40: [ SetBusWidth(0x4) , Command count = 2019 ] 
14:23:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642A5A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2020 ] 
14:23:40: Protected Area Size 0x28000
14:23:40: Bus Width           2
14:23:40: Secure Mode         0
14:23:40: Speed  Class        4
14:23:40: Perf Move           0
14:23:40: Au Size             9
14:23:40: Erase Size          15
14:23:40: Erase Timeout       1
14:23:40: Erase offset        1
14:23:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2021 ] 
14:23:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:40: Host Frequency set to 100000 KHz
14:23:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:40: ####CSD Registe 2.0 Values####
14:23:40: CSD_STRUCTURE                                 :0x1
14:23:40: Reserv1                                       :0x0
14:23:40: Time Access 1 TAAC                            :0xe
14:23:40: Time Access 2 NSAC*100                        :0x0
14:23:40: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:40: Card Command Classess CCC                     :0x5b5
14:23:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:40: DSR(driver stage register)  DSR_IMP           :0x0
14:23:40: Reserv2                                       :0x0
14:23:40: Device Size C_SIZE                            :0xedc8
14:23:40: Reserv3                                       :0x0
14:23:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:40: Reserv4                                       :0x0
14:23:40: Write Speed Factor R2W_FACTOR                 :0x2
14:23:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:40: FILE_FORMAT_GRP                               :0x0
14:23:40: COPY flag                                     :0x1
14:23:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:40: File_Format                                   :0x0
14:23:40: CRC                                           :0x0
14:23:40: ####CSD Registe Values####  

14:23:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7BD0>, <py_sfcl.CommandDataDefinition object at 0x05D7E1E0>) , Command count = 2022 ] 
14:23:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E1E0>, <py_sfcl.CommandDataDefinition object at 0x0642E450>) , Command count = 2023 ] 
14:23:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431420>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EFC0>, <py_sfcl.PySEnhancedCmdData object at 0x0642EEA0>, <None>, <py_sfcl.Command23 object at 0x0642E270>) , Command count = 2024 ] 
14:23:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 10
14:23:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7C30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431630>, <py_sfcl.PySEnhancedCmdData object at 0x064313C0>, <None>, <py_sfcl.Command23 object at 0x0642E360>) , Command count = 2025 ] 
14:23:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E7E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E5A0>, <py_sfcl.PySEnhancedCmdData object at 0x0642EE40>, <None>, <py_sfcl.Command23 object at 0x0642EBD0>) , Command count = 2026 ] 
14:23:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:40: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:42: Host Frequency set to 25000 KHz
14:23:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:42: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAD180>, 0x0, True) , Command count = 2027 ] 
14:23:42: [GO18_globalSetVolt]### Host voltage value is set.
14:23:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x064145A0>, 0x0, False) , Command count = 2028 ] 
14:23:42: [GO18_globalSetVolt]### Host voltage value is set.
14:23:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2029 ] 
14:23:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2030 ] 
14:23:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2031 ] 
14:23:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F90>, <py_sfcl.CommandDataDefinition object at 0x05DA7960>) , Command count = 2032 ] 
14:23:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADD50>, <py_sfcl.CommandDataDefinition object at 0x0642E480>) , Command count = 2033 ] 
14:23:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:42: [ SetCardRCA(0x1, 0xD555) , Command count = 2034 ] 
14:23:42: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:42: Host Frequency set to 25000 KHz
14:23:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:42: ####CSD Registe 2.0 Values####
14:23:42: CSD_STRUCTURE                                 :0x1
14:23:42: Reserv1                                       :0x0
14:23:42: Time Access 1 TAAC                            :0xe
14:23:42: Time Access 2 NSAC*100                        :0x0
14:23:42: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:42: Card Command Classess CCC                     :0x5b5
14:23:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:42: DSR(driver stage register)  DSR_IMP           :0x0
14:23:42: Reserv2                                       :0x0
14:23:42: Device Size C_SIZE                            :0xedc8
14:23:42: Reserv3                                       :0x0
14:23:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:42: Reserv4                                       :0x0
14:23:42: Write Speed Factor R2W_FACTOR                 :0x2
14:23:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:42: FILE_FORMAT_GRP                               :0x0
14:23:42: COPY flag                                     :0x1
14:23:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:42: File_Format                                   :0x0
14:23:42: CRC                                           :0x0
14:23:42: ####CSD Registe Values####  

14:23:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:42: [GetSCRRegisterEntry] Passed
14:23:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:42: Data_Status_After Erases          : 0
14:23:42: CPRM Security Support             : No Security
14:23:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:42: Spec. Version                     : Version 3.0X
14:23:42: Extended Security Support         : Extended_Security_Not_Supported
14:23:42: Command Support                   : COMMAND_SUPPORT
14:23:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8A80>, <py_sfcl.CommandDataDefinition object at 0x06431A80>) , Command count = 2035 ] 
14:23:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E3F0>, <py_sfcl.CommandDataDefinition object at 0x0642E0C0>) , Command count = 2036 ] 
14:23:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:43: [ SetBusWidth(0x4) , Command count = 2037 ] 
14:23:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B1E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2038 ] 
14:23:43: Protected Area Size 0x28000
14:23:43: Bus Width           2
14:23:43: Secure Mode         0
14:23:43: Speed  Class        4
14:23:43: Perf Move           0
14:23:43: Au Size             9
14:23:43: Erase Size          15
14:23:43: Erase Timeout       1
14:23:43: Erase offset        1
14:23:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2039 ] 
14:23:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:43: Host Frequency set to 100000 KHz
14:23:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:43: ####CSD Registe 2.0 Values####
14:23:43: CSD_STRUCTURE                                 :0x1
14:23:43: Reserv1                                       :0x0
14:23:43: Time Access 1 TAAC                            :0xe
14:23:43: Time Access 2 NSAC*100                        :0x0
14:23:43: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:43: Card Command Classess CCC                     :0x5b5
14:23:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:43: DSR(driver stage register)  DSR_IMP           :0x0
14:23:43: Reserv2                                       :0x0
14:23:43: Device Size C_SIZE                            :0xedc8
14:23:43: Reserv3                                       :0x0
14:23:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:43: Reserv4                                       :0x0
14:23:43: Write Speed Factor R2W_FACTOR                 :0x2
14:23:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:43: FILE_FORMAT_GRP                               :0x0
14:23:43: COPY flag                                     :0x1
14:23:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:43: File_Format                                   :0x0
14:23:43: CRC                                           :0x0
14:23:43: ####CSD Registe Values####  

14:23:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D91180>, <py_sfcl.CommandDataDefinition object at 0x05D91210>) , Command count = 2040 ] 
14:23:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E810>, <py_sfcl.CommandDataDefinition object at 0x0642E570>) , Command count = 2041 ] 
14:23:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF7E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E6F0>, <py_sfcl.PySEnhancedCmdData object at 0x0642E720>, <None>, <py_sfcl.Command23 object at 0x0642E600>) , Command count = 2042 ] 
14:23:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 9
14:23:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF810>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431B40>, <py_sfcl.PySEnhancedCmdData object at 0x06431B70>, <None>, <py_sfcl.Command23 object at 0x0642EB40>) , Command count = 2043 ] 
14:23:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x01D66840>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431240>, <py_sfcl.PySEnhancedCmdData object at 0x06431900>, <None>, <py_sfcl.Command23 object at 0x06431A50>) , Command count = 2044 ] 
14:23:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:43: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:45: Host Frequency set to 25000 KHz
14:23:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:45: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF960>, 0x0, True) , Command count = 2045 ] 
14:23:45: [GO18_globalSetVolt]### Host voltage value is set.
14:23:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467450>, 0x0, False) , Command count = 2046 ] 
14:23:45: [GO18_globalSetVolt]### Host voltage value is set.
14:23:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2047 ] 
14:23:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2048 ] 
14:23:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2049 ] 
14:23:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB10>, <py_sfcl.CommandDataDefinition object at 0x05DA7C60>) , Command count = 2050 ] 
14:23:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFBA0>, <py_sfcl.CommandDataDefinition object at 0x0642EDB0>) , Command count = 2051 ] 
14:23:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:45: [ SetCardRCA(0x1, 0xD555) , Command count = 2052 ] 
14:23:45: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:45: Host Frequency set to 25000 KHz
14:23:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:45: ####CSD Registe 2.0 Values####
14:23:45: CSD_STRUCTURE                                 :0x1
14:23:45: Reserv1                                       :0x0
14:23:45: Time Access 1 TAAC                            :0xe
14:23:45: Time Access 2 NSAC*100                        :0x0
14:23:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:45: Card Command Classess CCC                     :0x5b5
14:23:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:45: DSR(driver stage register)  DSR_IMP           :0x0
14:23:45: Reserv2                                       :0x0
14:23:45: Device Size C_SIZE                            :0xedc8
14:23:45: Reserv3                                       :0x0
14:23:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:45: Reserv4                                       :0x0
14:23:45: Write Speed Factor R2W_FACTOR                 :0x2
14:23:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:45: FILE_FORMAT_GRP                               :0x0
14:23:45: COPY flag                                     :0x1
14:23:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:45: File_Format                                   :0x0
14:23:45: CRC                                           :0x0
14:23:45: ####CSD Registe Values####  

14:23:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:45: [GetSCRRegisterEntry] Passed
14:23:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:45: Data_Status_After Erases          : 0
14:23:45: CPRM Security Support             : No Security
14:23:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:45: Spec. Version                     : Version 3.0X
14:23:45: Extended Security Support         : Extended_Security_Not_Supported
14:23:45: Command Support                   : COMMAND_SUPPORT
14:23:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB40>, <py_sfcl.CommandDataDefinition object at 0x06431FC0>) , Command count = 2053 ] 
14:23:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EC90>, <py_sfcl.CommandDataDefinition object at 0x0642EDB0>) , Command count = 2054 ] 
14:23:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:45: [ SetBusWidth(0x4) , Command count = 2055 ] 
14:23:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642E7B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2056 ] 
14:23:45: Protected Area Size 0x28000
14:23:45: Bus Width           2
14:23:45: Secure Mode         0
14:23:45: Speed  Class        4
14:23:45: Perf Move           0
14:23:45: Au Size             9
14:23:45: Erase Size          15
14:23:45: Erase Timeout       1
14:23:45: Erase offset        1
14:23:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2057 ] 
14:23:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:45: Host Frequency set to 100000 KHz
14:23:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:45: ####CSD Registe 2.0 Values####
14:23:45: CSD_STRUCTURE                                 :0x1
14:23:45: Reserv1                                       :0x0
14:23:45: Time Access 1 TAAC                            :0xe
14:23:45: Time Access 2 NSAC*100                        :0x0
14:23:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:45: Card Command Classess CCC                     :0x5b5
14:23:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:45: DSR(driver stage register)  DSR_IMP           :0x0
14:23:45: Reserv2                                       :0x0
14:23:45: Device Size C_SIZE                            :0xedc8
14:23:45: Reserv3                                       :0x0
14:23:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:45: Reserv4                                       :0x0
14:23:45: Write Speed Factor R2W_FACTOR                 :0x2
14:23:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:45: FILE_FORMAT_GRP                               :0x0
14:23:45: COPY flag                                     :0x1
14:23:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:45: File_Format                                   :0x0
14:23:45: CRC                                           :0x0
14:23:45: ####CSD Registe Values####  

14:23:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E14B0>, <py_sfcl.CommandDataDefinition object at 0x05DEFE10>) , Command count = 2058 ] 
14:23:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467CF0>, <py_sfcl.CommandDataDefinition object at 0x064317E0>) , Command count = 2059 ] 
14:23:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AA80>, <py_sfcl.PySEnhancedCmdData object at 0x06431F90>, <None>, <py_sfcl.Command23 object at 0x064317B0>) , Command count = 2060 ] 
14:23:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 8
14:23:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DAD3F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431E10>, <py_sfcl.PySEnhancedCmdData object at 0x06431F00>, <None>, <py_sfcl.Command23 object at 0x06431C90>) , Command count = 2061 ] 
14:23:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064314B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431840>, <py_sfcl.PySEnhancedCmdData object at 0x064315A0>, <None>, <py_sfcl.Command23 object at 0x06431BD0>) , Command count = 2062 ] 
14:23:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:45: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:48: Host Frequency set to 25000 KHz
14:23:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:48: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x064140F0>, 0x0, True) , Command count = 2063 ] 
14:23:48: [GO18_globalSetVolt]### Host voltage value is set.
14:23:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E870>, 0x0, False) , Command count = 2064 ] 
14:23:48: [GO18_globalSetVolt]### Host voltage value is set.
14:23:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2065 ] 
14:23:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2066 ] 
14:23:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2067 ] 
14:23:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414690>, <py_sfcl.CommandDataDefinition object at 0x06414B40>) , Command count = 2068 ] 
14:23:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431F30>, <py_sfcl.CommandDataDefinition object at 0x06431810>) , Command count = 2069 ] 
14:23:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:48: [ SetCardRCA(0x1, 0xD555) , Command count = 2070 ] 
14:23:48: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:48: Host Frequency set to 25000 KHz
14:23:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:48: ####CSD Registe 2.0 Values####
14:23:48: CSD_STRUCTURE                                 :0x1
14:23:48: Reserv1                                       :0x0
14:23:48: Time Access 1 TAAC                            :0xe
14:23:48: Time Access 2 NSAC*100                        :0x0
14:23:48: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:48: Card Command Classess CCC                     :0x5b5
14:23:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:48: DSR(driver stage register)  DSR_IMP           :0x0
14:23:48: Reserv2                                       :0x0
14:23:48: Device Size C_SIZE                            :0xedc8
14:23:48: Reserv3                                       :0x0
14:23:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:48: Reserv4                                       :0x0
14:23:48: Write Speed Factor R2W_FACTOR                 :0x2
14:23:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:48: FILE_FORMAT_GRP                               :0x0
14:23:48: COPY flag                                     :0x1
14:23:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:48: File_Format                                   :0x0
14:23:48: CRC                                           :0x0
14:23:48: ####CSD Registe Values####  

14:23:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:48: [GetSCRRegisterEntry] Passed
14:23:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:48: Data_Status_After Erases          : 0
14:23:48: CPRM Security Support             : No Security
14:23:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:48: Spec. Version                     : Version 3.0X
14:23:48: Extended Security Support         : Extended_Security_Not_Supported
14:23:48: Command Support                   : COMMAND_SUPPORT
14:23:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414360>, <py_sfcl.CommandDataDefinition object at 0x06431EA0>) , Command count = 2071 ] 
14:23:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AFC0>, <py_sfcl.CommandDataDefinition object at 0x064311B0>) , Command count = 2072 ] 
14:23:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:48: [ SetBusWidth(0x4) , Command count = 2073 ] 
14:23:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2074 ] 
14:23:48: Protected Area Size 0x28000
14:23:48: Bus Width           2
14:23:48: Secure Mode         0
14:23:48: Speed  Class        4
14:23:48: Perf Move           0
14:23:48: Au Size             9
14:23:48: Erase Size          15
14:23:48: Erase Timeout       1
14:23:48: Erase offset        1
14:23:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2075 ] 
14:23:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:48: Host Frequency set to 100000 KHz
14:23:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:48: ####CSD Registe 2.0 Values####
14:23:48: CSD_STRUCTURE                                 :0x1
14:23:48: Reserv1                                       :0x0
14:23:48: Time Access 1 TAAC                            :0xe
14:23:48: Time Access 2 NSAC*100                        :0x0
14:23:48: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:48: Card Command Classess CCC                     :0x5b5
14:23:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:48: DSR(driver stage register)  DSR_IMP           :0x0
14:23:48: Reserv2                                       :0x0
14:23:48: Device Size C_SIZE                            :0xedc8
14:23:48: Reserv3                                       :0x0
14:23:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:48: Reserv4                                       :0x0
14:23:48: Write Speed Factor R2W_FACTOR                 :0x2
14:23:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:48: FILE_FORMAT_GRP                               :0x0
14:23:48: COPY flag                                     :0x1
14:23:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:48: File_Format                                   :0x0
14:23:48: CRC                                           :0x0
14:23:48: ####CSD Registe Values####  

14:23:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431960>, <py_sfcl.CommandDataDefinition object at 0x06431AE0>) , Command count = 2076 ] 
14:23:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F60>, <py_sfcl.CommandDataDefinition object at 0x064310C0>) , Command count = 2077 ] 
14:23:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414300>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F60>, <py_sfcl.PySEnhancedCmdData object at 0x064316C0>, <None>, <py_sfcl.Command23 object at 0x06431990>) , Command count = 2078 ] 
14:23:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 7
14:23:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E1060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414900>, <py_sfcl.PySEnhancedCmdData object at 0x06431C60>, <None>, <py_sfcl.Command23 object at 0x06431B10>) , Command count = 2079 ] 
14:23:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064144B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431150>, <py_sfcl.PySEnhancedCmdData object at 0x06431450>, <None>, <py_sfcl.Command23 object at 0x06431C00>) , Command count = 2080 ] 
14:23:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:50: Host Frequency set to 25000 KHz
14:23:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x064517B0>, 0x0, True) , Command count = 2081 ] 
14:23:50: [GO18_globalSetVolt]### Host voltage value is set.
14:23:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x01D7FDB0>, 0x0, False) , Command count = 2082 ] 
14:23:50: [GO18_globalSetVolt]### Host voltage value is set.
14:23:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2083 ] 
14:23:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2084 ] 
14:23:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2085 ] 
14:23:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414DE0>, <py_sfcl.CommandDataDefinition object at 0x06451540>) , Command count = 2086 ] 
14:23:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414060>, <py_sfcl.CommandDataDefinition object at 0x06431D50>) , Command count = 2087 ] 
14:23:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:51: [ SetCardRCA(0x1, 0xD555) , Command count = 2088 ] 
14:23:51: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:51: Host Frequency set to 25000 KHz
14:23:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:51: ####CSD Registe 2.0 Values####
14:23:51: CSD_STRUCTURE                                 :0x1
14:23:51: Reserv1                                       :0x0
14:23:51: Time Access 1 TAAC                            :0xe
14:23:51: Time Access 2 NSAC*100                        :0x0
14:23:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:51: Card Command Classess CCC                     :0x5b5
14:23:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:51: DSR(driver stage register)  DSR_IMP           :0x0
14:23:51: Reserv2                                       :0x0
14:23:51: Device Size C_SIZE                            :0xedc8
14:23:51: Reserv3                                       :0x0
14:23:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:51: Reserv4                                       :0x0
14:23:51: Write Speed Factor R2W_FACTOR                 :0x2
14:23:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:51: FILE_FORMAT_GRP                               :0x0
14:23:51: COPY flag                                     :0x1
14:23:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:51: File_Format                                   :0x0
14:23:51: CRC                                           :0x0
14:23:51: ####CSD Registe Values####  

14:23:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:51: [GetSCRRegisterEntry] Passed
14:23:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:51: Data_Status_After Erases          : 0
14:23:51: CPRM Security Support             : No Security
14:23:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:51: Spec. Version                     : Version 3.0X
14:23:51: Extended Security Support         : Extended_Security_Not_Supported
14:23:51: Command Support                   : COMMAND_SUPPORT
14:23:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1A80>, <py_sfcl.CommandDataDefinition object at 0x064149F0>) , Command count = 2089 ] 
14:23:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EA80>, <py_sfcl.CommandDataDefinition object at 0x06431D50>) , Command count = 2090 ] 
14:23:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:51: [ SetBusWidth(0x4) , Command count = 2091 ] 
14:23:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x064315D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2092 ] 
14:23:51: Protected Area Size 0x28000
14:23:51: Bus Width           2
14:23:51: Secure Mode         0
14:23:51: Speed  Class        4
14:23:51: Perf Move           0
14:23:51: Au Size             9
14:23:51: Erase Size          15
14:23:51: Erase Timeout       1
14:23:51: Erase offset        1
14:23:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2093 ] 
14:23:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:51: Host Frequency set to 100000 KHz
14:23:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:51: ####CSD Registe 2.0 Values####
14:23:51: CSD_STRUCTURE                                 :0x1
14:23:51: Reserv1                                       :0x0
14:23:51: Time Access 1 TAAC                            :0xe
14:23:51: Time Access 2 NSAC*100                        :0x0
14:23:51: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:51: Card Command Classess CCC                     :0x5b5
14:23:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:51: DSR(driver stage register)  DSR_IMP           :0x0
14:23:51: Reserv2                                       :0x0
14:23:51: Device Size C_SIZE                            :0xedc8
14:23:51: Reserv3                                       :0x0
14:23:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:51: Reserv4                                       :0x0
14:23:51: Write Speed Factor R2W_FACTOR                 :0x2
14:23:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:51: FILE_FORMAT_GRP                               :0x0
14:23:51: COPY flag                                     :0x1
14:23:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:51: File_Format                                   :0x0
14:23:51: CRC                                           :0x0
14:23:51: ####CSD Registe Values####  

14:23:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414CF0>, <py_sfcl.CommandDataDefinition object at 0x064142A0>) , Command count = 2094 ] 
14:23:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421ED0>, <py_sfcl.CommandDataDefinition object at 0x062E1330>) , Command count = 2095 ] 
14:23:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E11E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06451870>, <py_sfcl.PySEnhancedCmdData object at 0x064142D0>, <None>, <py_sfcl.Command23 object at 0x06431CC0>) , Command count = 2096 ] 
14:23:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 6
14:23:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06451BD0>, <py_sfcl.PySEnhancedCmdData object at 0x06451B10>, <None>, <py_sfcl.Command23 object at 0x064148A0>) , Command count = 2097 ] 
14:23:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DADAB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414DB0>, <py_sfcl.PySEnhancedCmdData object at 0x064146F0>, <None>, <py_sfcl.Command23 object at 0x06414A50>) , Command count = 2098 ] 
14:23:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:53: Host Frequency set to 25000 KHz
14:23:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:53: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x064516C0>, 0x0, True) , Command count = 2099 ] 
14:23:53: [GO18_globalSetVolt]### Host voltage value is set.
14:23:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEFA80>, 0x0, False) , Command count = 2100 ] 
14:23:53: [GO18_globalSetVolt]### Host voltage value is set.
14:23:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2101 ] 
14:23:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2102 ] 
14:23:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2103 ] 
14:23:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F120>, <py_sfcl.CommandDataDefinition object at 0x064519C0>) , Command count = 2104 ] 
14:23:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451BA0>, <py_sfcl.CommandDataDefinition object at 0x064146C0>) , Command count = 2105 ] 
14:23:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:53: [ SetCardRCA(0x1, 0xD555) , Command count = 2106 ] 
14:23:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:53: Host Frequency set to 25000 KHz
14:23:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:53: ####CSD Registe 2.0 Values####
14:23:53: CSD_STRUCTURE                                 :0x1
14:23:53: Reserv1                                       :0x0
14:23:53: Time Access 1 TAAC                            :0xe
14:23:53: Time Access 2 NSAC*100                        :0x0
14:23:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:53: Card Command Classess CCC                     :0x5b5
14:23:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:53: DSR(driver stage register)  DSR_IMP           :0x0
14:23:53: Reserv2                                       :0x0
14:23:53: Device Size C_SIZE                            :0xedc8
14:23:53: Reserv3                                       :0x0
14:23:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:53: Reserv4                                       :0x0
14:23:53: Write Speed Factor R2W_FACTOR                 :0x2
14:23:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:53: FILE_FORMAT_GRP                               :0x0
14:23:53: COPY flag                                     :0x1
14:23:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:53: File_Format                                   :0x0
14:23:53: CRC                                           :0x0
14:23:53: ####CSD Registe Values####  

14:23:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:53: [GetSCRRegisterEntry] Passed
14:23:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:53: Data_Status_After Erases          : 0
14:23:53: CPRM Security Support             : No Security
14:23:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:53: Spec. Version                     : Version 3.0X
14:23:53: Extended Security Support         : Extended_Security_Not_Supported
14:23:53: Command Support                   : COMMAND_SUPPORT
14:23:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451780>, <py_sfcl.CommandDataDefinition object at 0x06451D20>) , Command count = 2107 ] 
14:23:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064311E0>, <py_sfcl.CommandDataDefinition object at 0x0641F240>) , Command count = 2108 ] 
14:23:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:54: [ SetBusWidth(0x4) , Command count = 2109 ] 
14:23:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BCC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2110 ] 
14:23:54: Protected Area Size 0x28000
14:23:54: Bus Width           2
14:23:54: Secure Mode         0
14:23:54: Speed  Class        4
14:23:54: Perf Move           0
14:23:54: Au Size             9
14:23:54: Erase Size          15
14:23:54: Erase Timeout       1
14:23:54: Erase offset        1
14:23:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2111 ] 
14:23:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:54: Host Frequency set to 100000 KHz
14:23:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:54: ####CSD Registe 2.0 Values####
14:23:54: CSD_STRUCTURE                                 :0x1
14:23:54: Reserv1                                       :0x0
14:23:54: Time Access 1 TAAC                            :0xe
14:23:54: Time Access 2 NSAC*100                        :0x0
14:23:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:54: Card Command Classess CCC                     :0x5b5
14:23:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:54: DSR(driver stage register)  DSR_IMP           :0x0
14:23:54: Reserv2                                       :0x0
14:23:54: Device Size C_SIZE                            :0xedc8
14:23:54: Reserv3                                       :0x0
14:23:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:54: Reserv4                                       :0x0
14:23:54: Write Speed Factor R2W_FACTOR                 :0x2
14:23:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:54: FILE_FORMAT_GRP                               :0x0
14:23:54: COPY flag                                     :0x1
14:23:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:54: File_Format                                   :0x0
14:23:54: CRC                                           :0x0
14:23:54: ####CSD Registe Values####  

14:23:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451630>, <py_sfcl.CommandDataDefinition object at 0x06451570>) , Command count = 2112 ] 
14:23:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEF840>, <py_sfcl.CommandDataDefinition object at 0x064515A0>) , Command count = 2113 ] 
14:23:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451EA0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064518A0>, <py_sfcl.PySEnhancedCmdData object at 0x0641F180>, <None>, <py_sfcl.Command23 object at 0x06414600>) , Command count = 2114 ] 
14:23:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 5
14:23:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F4B0>, <py_sfcl.PySEnhancedCmdData object at 0x0641F660>, <None>, <py_sfcl.Command23 object at 0x0641F540>) , Command count = 2115 ] 
14:23:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF9F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B7B0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B840>, <None>, <py_sfcl.Command23 object at 0x0641F2D0>) , Command count = 2116 ] 
14:23:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:54: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:56: Host Frequency set to 25000 KHz
14:23:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:56: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB10>, 0x0, True) , Command count = 2117 ] 
14:23:56: [GO18_globalSetVolt]### Host voltage value is set.
14:23:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x06414750>, 0x0, False) , Command count = 2118 ] 
14:23:56: [GO18_globalSetVolt]### Host voltage value is set.
14:23:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2119 ] 
14:23:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2120 ] 
14:23:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2121 ] 
14:23:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451E40>, <py_sfcl.CommandDataDefinition object at 0x06451600>) , Command count = 2122 ] 
14:23:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FCC0>, <py_sfcl.CommandDataDefinition object at 0x0641FC00>) , Command count = 2123 ] 
14:23:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:56: [ SetCardRCA(0x1, 0xD555) , Command count = 2124 ] 
14:23:56: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:56: Host Frequency set to 25000 KHz
14:23:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:56: ####CSD Registe 2.0 Values####
14:23:56: CSD_STRUCTURE                                 :0x1
14:23:56: Reserv1                                       :0x0
14:23:56: Time Access 1 TAAC                            :0xe
14:23:56: Time Access 2 NSAC*100                        :0x0
14:23:56: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:56: Card Command Classess CCC                     :0x5b5
14:23:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:56: DSR(driver stage register)  DSR_IMP           :0x0
14:23:56: Reserv2                                       :0x0
14:23:56: Device Size C_SIZE                            :0xedc8
14:23:56: Reserv3                                       :0x0
14:23:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:56: Reserv4                                       :0x0
14:23:56: Write Speed Factor R2W_FACTOR                 :0x2
14:23:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:56: FILE_FORMAT_GRP                               :0x0
14:23:56: COPY flag                                     :0x1
14:23:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:56: File_Format                                   :0x0
14:23:56: CRC                                           :0x0
14:23:56: ####CSD Registe Values####  

14:23:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:56: [GetSCRRegisterEntry] Passed
14:23:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:56: Data_Status_After Erases          : 0
14:23:56: CPRM Security Support             : No Security
14:23:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:56: Spec. Version                     : Version 3.0X
14:23:56: Extended Security Support         : Extended_Security_Not_Supported
14:23:56: Command Support                   : COMMAND_SUPPORT
14:23:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FB70>, <py_sfcl.CommandDataDefinition object at 0x0641FCF0>) , Command count = 2125 ] 
14:23:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1300>, <py_sfcl.CommandDataDefinition object at 0x0641F480>) , Command count = 2126 ] 
14:23:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:56: [ SetBusWidth(0x4) , Command count = 2127 ] 
14:23:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B8D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2128 ] 
14:23:56: Protected Area Size 0x28000
14:23:56: Bus Width           2
14:23:56: Secure Mode         0
14:23:56: Speed  Class        4
14:23:56: Perf Move           0
14:23:56: Au Size             9
14:23:56: Erase Size          15
14:23:56: Erase Timeout       1
14:23:56: Erase offset        1
14:23:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2129 ] 
14:23:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:56: Host Frequency set to 100000 KHz
14:23:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:56: ####CSD Registe 2.0 Values####
14:23:56: CSD_STRUCTURE                                 :0x1
14:23:56: Reserv1                                       :0x0
14:23:56: Time Access 1 TAAC                            :0xe
14:23:56: Time Access 2 NSAC*100                        :0x0
14:23:56: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:56: Card Command Classess CCC                     :0x5b5
14:23:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:56: DSR(driver stage register)  DSR_IMP           :0x0
14:23:56: Reserv2                                       :0x0
14:23:56: Device Size C_SIZE                            :0xedc8
14:23:56: Reserv3                                       :0x0
14:23:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:56: Reserv4                                       :0x0
14:23:56: Write Speed Factor R2W_FACTOR                 :0x2
14:23:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:56: FILE_FORMAT_GRP                               :0x0
14:23:56: COPY flag                                     :0x1
14:23:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:56: File_Format                                   :0x0
14:23:56: CRC                                           :0x0
14:23:56: ####CSD Registe Values####  

14:23:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467060>, <py_sfcl.CommandDataDefinition object at 0x0641FF90>) , Command count = 2130 ] 
14:23:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421630>, <py_sfcl.CommandDataDefinition object at 0x0641F0C0>) , Command count = 2131 ] 
14:23:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064671E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467210>, <py_sfcl.PySEnhancedCmdData object at 0x06467240>, <None>, <py_sfcl.Command23 object at 0x0645B570>) , Command count = 2132 ] 
14:23:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 4
14:23:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064670C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064670F0>, <py_sfcl.PySEnhancedCmdData object at 0x06467120>, <None>, <py_sfcl.Command23 object at 0x0645B960>) , Command count = 2133 ] 
14:23:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414D20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B4B0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B240>, <None>, <py_sfcl.Command23 object at 0x0645B270>) , Command count = 2134 ] 
14:23:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:56: [GO4_globalInitCard]### Switch to Specify Card Type
14:23:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:59: Host Frequency set to 25000 KHz
14:23:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:23:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:23:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x064675A0>, 0x0, True) , Command count = 2135 ] 
14:23:59: [GO18_globalSetVolt]### Host voltage value is set.
14:23:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:23:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641F300>, 0x0, False) , Command count = 2136 ] 
14:23:59: [GO18_globalSetVolt]### Host voltage value is set.
14:23:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2137 ] 
14:23:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:23:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2138 ] 
14:23:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:23:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:23:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:23:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:23:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:23:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2139 ] 
14:23:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:23:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:23:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467540>, <py_sfcl.CommandDataDefinition object at 0x064674E0>) , Command count = 2140 ] 
14:23:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:23:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467840>, <py_sfcl.CommandDataDefinition object at 0x0641FD80>) , Command count = 2141 ] 
14:23:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:23:59: [ SetCardRCA(0x1, 0xD555) , Command count = 2142 ] 
14:23:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:23:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:23:59: Host Frequency set to 25000 KHz
14:23:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:23:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:59: ####CSD Registe 2.0 Values####
14:23:59: CSD_STRUCTURE                                 :0x1
14:23:59: Reserv1                                       :0x0
14:23:59: Time Access 1 TAAC                            :0xe
14:23:59: Time Access 2 NSAC*100                        :0x0
14:23:59: Data Transfer Rate TRAN_SPEED                 :0x32
14:23:59: Card Command Classess CCC                     :0x5b5
14:23:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:59: DSR(driver stage register)  DSR_IMP           :0x0
14:23:59: Reserv2                                       :0x0
14:23:59: Device Size C_SIZE                            :0xedc8
14:23:59: Reserv3                                       :0x0
14:23:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:59: Reserv4                                       :0x0
14:23:59: Write Speed Factor R2W_FACTOR                 :0x2
14:23:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:59: FILE_FORMAT_GRP                               :0x0
14:23:59: COPY flag                                     :0x1
14:23:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:59: File_Format                                   :0x0
14:23:59: CRC                                           :0x0
14:23:59: ####CSD Registe Values####  

14:23:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:23:59: [GetSCRRegisterEntry] Passed
14:23:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:23:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:23:59: Data_Status_After Erases          : 0
14:23:59: CPRM Security Support             : No Security
14:23:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:23:59: Spec. Version                     : Version 3.0X
14:23:59: Extended Security Support         : Extended_Security_Not_Supported
14:23:59: Command Support                   : COMMAND_SUPPORT
14:23:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:23:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467660>, <py_sfcl.CommandDataDefinition object at 0x0641FDE0>) , Command count = 2143 ] 
14:23:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:23:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431E70>, <py_sfcl.CommandDataDefinition object at 0x0641FAE0>) , Command count = 2144 ] 
14:23:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:23:59: [ SetBusWidth(0x4) , Command count = 2145 ] 
14:23:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:23:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2146 ] 
14:23:59: Protected Area Size 0x28000
14:23:59: Bus Width           2
14:23:59: Secure Mode         0
14:23:59: Speed  Class        4
14:23:59: Perf Move           0
14:23:59: Au Size             9
14:23:59: Erase Size          15
14:23:59: Erase Timeout       1
14:23:59: Erase offset        1
14:23:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:23:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:23:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:23:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2147 ] 
14:23:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:23:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:23:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:23:59: Host Frequency set to 100000 KHz
14:23:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:23:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:23:59: ####CSD Registe 2.0 Values####
14:23:59: CSD_STRUCTURE                                 :0x1
14:23:59: Reserv1                                       :0x0
14:23:59: Time Access 1 TAAC                            :0xe
14:23:59: Time Access 2 NSAC*100                        :0x0
14:23:59: Data Transfer Rate TRAN_SPEED                 :0xb
14:23:59: Card Command Classess CCC                     :0x5b5
14:23:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:23:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:23:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:23:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:23:59: DSR(driver stage register)  DSR_IMP           :0x0
14:23:59: Reserv2                                       :0x0
14:23:59: Device Size C_SIZE                            :0xedc8
14:23:59: Reserv3                                       :0x0
14:23:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:23:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:23:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:23:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:23:59: Reserv4                                       :0x0
14:23:59: Write Speed Factor R2W_FACTOR                 :0x2
14:23:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:23:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:23:59: FILE_FORMAT_GRP                               :0x0
14:23:59: COPY flag                                     :0x1
14:23:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:23:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:23:59: File_Format                                   :0x0
14:23:59: CRC                                           :0x0
14:23:59: ####CSD Registe Values####  

14:23:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F030>, <py_sfcl.CommandDataDefinition object at 0x06467A50>) , Command count = 2148 ] 
14:23:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:23:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451F00>, <py_sfcl.CommandDataDefinition object at 0x06467690>) , Command count = 2149 ] 
14:23:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:23:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:23:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467990>, <py_sfcl.PySEnhancedCmdData object at 0x064679C0>, <None>, <py_sfcl.Command23 object at 0x06467630>) , Command count = 2150 ] 
14:23:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 3
14:23:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:23:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06467AE0>, <None>, <py_sfcl.Command23 object at 0x06467030>) , Command count = 2151 ] 
14:23:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:23:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:23:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645B4E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B900>, <py_sfcl.PySEnhancedCmdData object at 0x0645BCF0>, <None>, <py_sfcl.Command23 object at 0x06467270>) , Command count = 2152 ] 
14:23:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:23:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:01: Host Frequency set to 25000 KHz
14:24:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467E40>, 0x0, True) , Command count = 2153 ] 
14:24:01: [GO18_globalSetVolt]### Host voltage value is set.
14:24:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645B210>, 0x0, False) , Command count = 2154 ] 
14:24:01: [GO18_globalSetVolt]### Host voltage value is set.
14:24:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2155 ] 
14:24:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2156 ] 
14:24:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2157 ] 
14:24:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F510>, <py_sfcl.CommandDataDefinition object at 0x06467DE0>) , Command count = 2158 ] 
14:24:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467E10>, <py_sfcl.CommandDataDefinition object at 0x06467570>) , Command count = 2159 ] 
14:24:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:02: [ SetCardRCA(0x1, 0xD555) , Command count = 2160 ] 
14:24:02: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:02: Host Frequency set to 25000 KHz
14:24:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:02: ####CSD Registe 2.0 Values####
14:24:02: CSD_STRUCTURE                                 :0x1
14:24:02: Reserv1                                       :0x0
14:24:02: Time Access 1 TAAC                            :0xe
14:24:02: Time Access 2 NSAC*100                        :0x0
14:24:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:02: Card Command Classess CCC                     :0x5b5
14:24:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:02: DSR(driver stage register)  DSR_IMP           :0x0
14:24:02: Reserv2                                       :0x0
14:24:02: Device Size C_SIZE                            :0xedc8
14:24:02: Reserv3                                       :0x0
14:24:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:02: Reserv4                                       :0x0
14:24:02: Write Speed Factor R2W_FACTOR                 :0x2
14:24:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:02: FILE_FORMAT_GRP                               :0x0
14:24:02: COPY flag                                     :0x1
14:24:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:02: File_Format                                   :0x0
14:24:02: CRC                                           :0x0
14:24:02: ####CSD Registe Values####  

14:24:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:02: [GetSCRRegisterEntry] Passed
14:24:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:02: Data_Status_After Erases          : 0
14:24:02: CPRM Security Support             : No Security
14:24:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:02: Spec. Version                     : Version 3.0X
14:24:02: Extended Security Support         : Extended_Security_Not_Supported
14:24:02: Command Support                   : COMMAND_SUPPORT
14:24:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421030>, <py_sfcl.CommandDataDefinition object at 0x06467F00>) , Command count = 2161 ] 
14:24:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414AB0>, <py_sfcl.CommandDataDefinition object at 0x064674B0>) , Command count = 2162 ] 
14:24:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:02: [ SetBusWidth(0x4) , Command count = 2163 ] 
14:24:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2164 ] 
14:24:02: Protected Area Size 0x28000
14:24:02: Bus Width           2
14:24:02: Secure Mode         0
14:24:02: Speed  Class        4
14:24:02: Perf Move           0
14:24:02: Au Size             9
14:24:02: Erase Size          15
14:24:02: Erase Timeout       1
14:24:02: Erase offset        1
14:24:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2165 ] 
14:24:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:02: Host Frequency set to 100000 KHz
14:24:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:02: ####CSD Registe 2.0 Values####
14:24:02: CSD_STRUCTURE                                 :0x1
14:24:02: Reserv1                                       :0x0
14:24:02: Time Access 1 TAAC                            :0xe
14:24:02: Time Access 2 NSAC*100                        :0x0
14:24:02: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:02: Card Command Classess CCC                     :0x5b5
14:24:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:02: DSR(driver stage register)  DSR_IMP           :0x0
14:24:02: Reserv2                                       :0x0
14:24:02: Device Size C_SIZE                            :0xedc8
14:24:02: Reserv3                                       :0x0
14:24:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:02: Reserv4                                       :0x0
14:24:02: Write Speed Factor R2W_FACTOR                 :0x2
14:24:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:02: FILE_FORMAT_GRP                               :0x0
14:24:02: COPY flag                                     :0x1
14:24:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:02: File_Format                                   :0x0
14:24:02: CRC                                           :0x0
14:24:02: ####CSD Registe Values####  

14:24:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F330>, <py_sfcl.CommandDataDefinition object at 0x06467F90>) , Command count = 2166 ] 
14:24:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451810>, <py_sfcl.CommandDataDefinition object at 0x064671B0>) , Command count = 2167 ] 
14:24:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064212A0>, <py_sfcl.PySEnhancedCmdData object at 0x06467C00>, <None>, <py_sfcl.Command23 object at 0x06467BD0>) , Command count = 2168 ] 
14:24:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 2
14:24:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421360>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421390>, <py_sfcl.PySEnhancedCmdData object at 0x064679F0>, <None>, <py_sfcl.Command23 object at 0x064673C0>) , Command count = 2169 ] 
14:24:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467510>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BBD0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BCF0>, <None>, <py_sfcl.Command23 object at 0x064675D0>) , Command count = 2170 ] 
14:24:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:02: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:04: Host Frequency set to 25000 KHz
14:24:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:04: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421720>, 0x0, True) , Command count = 2171 ] 
14:24:04: [GO18_globalSetVolt]### Host voltage value is set.
14:24:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x064672A0>, 0x0, False) , Command count = 2172 ] 
14:24:04: [GO18_globalSetVolt]### Host voltage value is set.
14:24:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2173 ] 
14:24:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2174 ] 
14:24:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2175 ] 
14:24:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216C0>, <py_sfcl.CommandDataDefinition object at 0x06421660>) , Command count = 2176 ] 
14:24:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467480>, <py_sfcl.CommandDataDefinition object at 0x06467420>) , Command count = 2177 ] 
14:24:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:04: [ SetCardRCA(0x1, 0xD555) , Command count = 2178 ] 
14:24:04: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:05: Host Frequency set to 25000 KHz
14:24:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:05: ####CSD Registe 2.0 Values####
14:24:05: CSD_STRUCTURE                                 :0x1
14:24:05: Reserv1                                       :0x0
14:24:05: Time Access 1 TAAC                            :0xe
14:24:05: Time Access 2 NSAC*100                        :0x0
14:24:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:05: Card Command Classess CCC                     :0x5b5
14:24:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:05: DSR(driver stage register)  DSR_IMP           :0x0
14:24:05: Reserv2                                       :0x0
14:24:05: Device Size C_SIZE                            :0xedc8
14:24:05: Reserv3                                       :0x0
14:24:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:05: Reserv4                                       :0x0
14:24:05: Write Speed Factor R2W_FACTOR                 :0x2
14:24:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:05: FILE_FORMAT_GRP                               :0x0
14:24:05: COPY flag                                     :0x1
14:24:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:05: File_Format                                   :0x0
14:24:05: CRC                                           :0x0
14:24:05: ####CSD Registe Values####  

14:24:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:05: [GetSCRRegisterEntry] Passed
14:24:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:05: Data_Status_After Erases          : 0
14:24:05: CPRM Security Support             : No Security
14:24:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:05: Spec. Version                     : Version 3.0X
14:24:05: Extended Security Support         : Extended_Security_Not_Supported
14:24:05: Command Support                   : COMMAND_SUPPORT
14:24:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064219C0>, <py_sfcl.CommandDataDefinition object at 0x06467C60>) , Command count = 2179 ] 
14:24:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414D80>, <py_sfcl.CommandDataDefinition object at 0x064676C0>) , Command count = 2180 ] 
14:24:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:05: [ SetBusWidth(0x4) , Command count = 2181 ] 
14:24:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2182 ] 
14:24:05: Protected Area Size 0x28000
14:24:05: Bus Width           2
14:24:05: Secure Mode         0
14:24:05: Speed  Class        4
14:24:05: Perf Move           0
14:24:05: Au Size             9
14:24:05: Erase Size          15
14:24:05: Erase Timeout       1
14:24:05: Erase offset        1
14:24:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2183 ] 
14:24:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:05: Host Frequency set to 100000 KHz
14:24:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:05: ####CSD Registe 2.0 Values####
14:24:05: CSD_STRUCTURE                                 :0x1
14:24:05: Reserv1                                       :0x0
14:24:05: Time Access 1 TAAC                            :0xe
14:24:05: Time Access 2 NSAC*100                        :0x0
14:24:05: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:05: Card Command Classess CCC                     :0x5b5
14:24:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:05: DSR(driver stage register)  DSR_IMP           :0x0
14:24:05: Reserv2                                       :0x0
14:24:05: Device Size C_SIZE                            :0xedc8
14:24:05: Reserv3                                       :0x0
14:24:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:05: Reserv4                                       :0x0
14:24:05: Write Speed Factor R2W_FACTOR                 :0x2
14:24:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:05: FILE_FORMAT_GRP                               :0x0
14:24:05: COPY flag                                     :0x1
14:24:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:05: File_Format                                   :0x0
14:24:05: CRC                                           :0x0
14:24:05: ####CSD Registe Values####  

14:24:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467750>, <py_sfcl.CommandDataDefinition object at 0x06421BD0>) , Command count = 2184 ] 
14:24:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451F60>, <py_sfcl.CommandDataDefinition object at 0x06467EA0>) , Command count = 2185 ] 
14:24:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421B10>, <py_sfcl.PySEnhancedCmdData object at 0x06421B40>, <None>, <py_sfcl.Command23 object at 0x064219F0>) , Command count = 2186 ] 
14:24:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 1
14:24:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421C30>, <py_sfcl.PySEnhancedCmdData object at 0x06421C60>, <None>, <py_sfcl.Command23 object at 0x064213C0>) , Command count = 2187 ] 
14:24:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641FB40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B330>, <py_sfcl.PySEnhancedCmdData object at 0x0645B390>, <None>, <py_sfcl.Command23 object at 0x064217B0>) , Command count = 2188 ] 
14:24:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:05: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:07: Host Frequency set to 25000 KHz
14:24:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:07: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421FC0>, 0x0, True) , Command count = 2189 ] 
14:24:07: [GO18_globalSetVolt]### Host voltage value is set.
14:24:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467B40>, 0x0, False) , Command count = 2190 ] 
14:24:07: [GO18_globalSetVolt]### Host voltage value is set.
14:24:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2191 ] 
14:24:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2192 ] 
14:24:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2193 ] 
14:24:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A060>, <py_sfcl.CommandDataDefinition object at 0x06467930>) , Command count = 2194 ] 
14:24:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A030>, <py_sfcl.CommandDataDefinition object at 0x06421F30>) , Command count = 2195 ] 
14:24:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:07: [ SetCardRCA(0x1, 0xD555) , Command count = 2196 ] 
14:24:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:07: Host Frequency set to 25000 KHz
14:24:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:07: ####CSD Registe 2.0 Values####
14:24:07: CSD_STRUCTURE                                 :0x1
14:24:07: Reserv1                                       :0x0
14:24:07: Time Access 1 TAAC                            :0xe
14:24:07: Time Access 2 NSAC*100                        :0x0
14:24:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:07: Card Command Classess CCC                     :0x5b5
14:24:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:07: DSR(driver stage register)  DSR_IMP           :0x0
14:24:07: Reserv2                                       :0x0
14:24:07: Device Size C_SIZE                            :0xedc8
14:24:07: Reserv3                                       :0x0
14:24:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:07: Reserv4                                       :0x0
14:24:07: Write Speed Factor R2W_FACTOR                 :0x2
14:24:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:07: FILE_FORMAT_GRP                               :0x0
14:24:07: COPY flag                                     :0x1
14:24:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:07: File_Format                                   :0x0
14:24:07: CRC                                           :0x0
14:24:07: ####CSD Registe Values####  

14:24:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:07: [GetSCRRegisterEntry] Passed
14:24:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:07: Data_Status_After Erases          : 0
14:24:07: CPRM Security Support             : No Security
14:24:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:07: Spec. Version                     : Version 3.0X
14:24:07: Extended Security Support         : Extended_Security_Not_Supported
14:24:07: Command Support                   : COMMAND_SUPPORT
14:24:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A2A0>, <py_sfcl.CommandDataDefinition object at 0x0642A0C0>) , Command count = 2197 ] 
14:24:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F390>, <py_sfcl.CommandDataDefinition object at 0x06421DB0>) , Command count = 2198 ] 
14:24:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:07: [ SetBusWidth(0x4) , Command count = 2199 ] 
14:24:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B3C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2200 ] 
14:24:07: Protected Area Size 0x28000
14:24:07: Bus Width           2
14:24:07: Secure Mode         0
14:24:07: Speed  Class        4
14:24:07: Perf Move           0
14:24:07: Au Size             9
14:24:07: Erase Size          15
14:24:07: Erase Timeout       1
14:24:07: Erase offset        1
14:24:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2201 ] 
14:24:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:07: Host Frequency set to 100000 KHz
14:24:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:07: ####CSD Registe 2.0 Values####
14:24:07: CSD_STRUCTURE                                 :0x1
14:24:07: Reserv1                                       :0x0
14:24:07: Time Access 1 TAAC                            :0xe
14:24:07: Time Access 2 NSAC*100                        :0x0
14:24:07: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:07: Card Command Classess CCC                     :0x5b5
14:24:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:07: DSR(driver stage register)  DSR_IMP           :0x0
14:24:07: Reserv2                                       :0x0
14:24:07: Device Size C_SIZE                            :0xedc8
14:24:07: Reserv3                                       :0x0
14:24:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:07: Reserv4                                       :0x0
14:24:07: Write Speed Factor R2W_FACTOR                 :0x2
14:24:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:07: FILE_FORMAT_GRP                               :0x0
14:24:07: COPY flag                                     :0x1
14:24:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:07: File_Format                                   :0x0
14:24:07: CRC                                           :0x0
14:24:07: ####CSD Registe Values####  

14:24:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A090>, <py_sfcl.CommandDataDefinition object at 0x06421D50>) , Command count = 2202 ] 
14:24:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FA80>, <py_sfcl.CommandDataDefinition object at 0x06421420>) , Command count = 2203 ] 
14:24:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421D80>, <py_sfcl.PySEnhancedCmdData object at 0x06421BA0>, <None>, <py_sfcl.Command23 object at 0x06421510>) , Command count = 2204 ] 
14:24:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Outer loop Count 1020
14:24:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 29
14:24:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A510>, <py_sfcl.PySEnhancedCmdData object at 0x0642A540>, <None>, <py_sfcl.Command23 object at 0x06421C90>) , Command count = 2205 ] 
14:24:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E8D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BAE0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BD20>, <None>, <py_sfcl.Command23 object at 0x064212D0>) , Command count = 2206 ] 
14:24:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:10: Host Frequency set to 25000 KHz
14:24:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A8A0>, 0x0, True) , Command count = 2207 ] 
14:24:10: [GO18_globalSetVolt]### Host voltage value is set.
14:24:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641F060>, 0x0, False) , Command count = 2208 ] 
14:24:10: [GO18_globalSetVolt]### Host voltage value is set.
14:24:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2209 ] 
14:24:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2210 ] 
14:24:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2211 ] 
14:24:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A840>, <py_sfcl.CommandDataDefinition object at 0x06421D20>) , Command count = 2212 ] 
14:24:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421750>, <py_sfcl.CommandDataDefinition object at 0x064218D0>) , Command count = 2213 ] 
14:24:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:10: [ SetCardRCA(0x1, 0xD555) , Command count = 2214 ] 
14:24:10: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:10: Host Frequency set to 25000 KHz
14:24:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:10: ####CSD Registe 2.0 Values####
14:24:10: CSD_STRUCTURE                                 :0x1
14:24:10: Reserv1                                       :0x0
14:24:10: Time Access 1 TAAC                            :0xe
14:24:10: Time Access 2 NSAC*100                        :0x0
14:24:10: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:10: Card Command Classess CCC                     :0x5b5
14:24:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:10: DSR(driver stage register)  DSR_IMP           :0x0
14:24:10: Reserv2                                       :0x0
14:24:10: Device Size C_SIZE                            :0xedc8
14:24:10: Reserv3                                       :0x0
14:24:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:10: Reserv4                                       :0x0
14:24:10: Write Speed Factor R2W_FACTOR                 :0x2
14:24:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:10: FILE_FORMAT_GRP                               :0x0
14:24:10: COPY flag                                     :0x1
14:24:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:10: File_Format                                   :0x0
14:24:10: CRC                                           :0x0
14:24:10: ####CSD Registe Values####  

14:24:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:10: [GetSCRRegisterEntry] Passed
14:24:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:10: Data_Status_After Erases          : 0
14:24:10: CPRM Security Support             : No Security
14:24:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:10: Spec. Version                     : Version 3.0X
14:24:10: Extended Security Support         : Extended_Security_Not_Supported
14:24:10: Command Support                   : COMMAND_SUPPORT
14:24:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421840>, <py_sfcl.CommandDataDefinition object at 0x0642AB40>) , Command count = 2215 ] 
14:24:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FDB0>, <py_sfcl.CommandDataDefinition object at 0x0642A990>) , Command count = 2216 ] 
14:24:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:10: [ SetBusWidth(0x4) , Command count = 2217 ] 
14:24:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B9C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2218 ] 
14:24:10: Protected Area Size 0x28000
14:24:10: Bus Width           2
14:24:10: Secure Mode         0
14:24:10: Speed  Class        4
14:24:10: Perf Move           0
14:24:10: Au Size             9
14:24:10: Erase Size          15
14:24:10: Erase Timeout       1
14:24:10: Erase offset        1
14:24:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2219 ] 
14:24:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:10: Host Frequency set to 100000 KHz
14:24:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:10: ####CSD Registe 2.0 Values####
14:24:10: CSD_STRUCTURE                                 :0x1
14:24:10: Reserv1                                       :0x0
14:24:10: Time Access 1 TAAC                            :0xe
14:24:10: Time Access 2 NSAC*100                        :0x0
14:24:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:10: Card Command Classess CCC                     :0x5b5
14:24:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:10: DSR(driver stage register)  DSR_IMP           :0x0
14:24:10: Reserv2                                       :0x0
14:24:10: Device Size C_SIZE                            :0xedc8
14:24:10: Reserv3                                       :0x0
14:24:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:10: Reserv4                                       :0x0
14:24:10: Write Speed Factor R2W_FACTOR                 :0x2
14:24:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:10: FILE_FORMAT_GRP                               :0x0
14:24:10: COPY flag                                     :0x1
14:24:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:10: File_Format                                   :0x0
14:24:10: CRC                                           :0x0
14:24:10: ####CSD Registe Values####  

14:24:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064210F0>, <py_sfcl.CommandDataDefinition object at 0x0642AD50>) , Command count = 2220 ] 
14:24:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421690>, <py_sfcl.CommandDataDefinition object at 0x06421CC0>) , Command count = 2221 ] 
14:24:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC60>, <py_sfcl.PySEnhancedCmdData object at 0x0642AC90>, <None>, <py_sfcl.Command23 object at 0x0642A1B0>) , Command count = 2222 ] 
14:24:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 28
14:24:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642ADB0>, <py_sfcl.PySEnhancedCmdData object at 0x0642ADE0>, <None>, <py_sfcl.Command23 object at 0x0642A690>) , Command count = 2223 ] 
14:24:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467D20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B600>, <py_sfcl.PySEnhancedCmdData object at 0x0645BE70>, <None>, <py_sfcl.Command23 object at 0x0642A810>) , Command count = 2224 ] 
14:24:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:12: Host Frequency set to 25000 KHz
14:24:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:12: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E030>, 0x0, True) , Command count = 2225 ] 
14:24:12: [GO18_globalSetVolt]### Host voltage value is set.
14:24:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421180>, 0x0, False) , Command count = 2226 ] 
14:24:12: [GO18_globalSetVolt]### Host voltage value is set.
14:24:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2227 ] 
14:24:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2228 ] 
14:24:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2229 ] 
14:24:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E150>, <py_sfcl.CommandDataDefinition object at 0x0642E0F0>) , Command count = 2230 ] 
14:24:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E180>, <py_sfcl.CommandDataDefinition object at 0x06421780>) , Command count = 2231 ] 
14:24:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:13: [ SetCardRCA(0x1, 0xD555) , Command count = 2232 ] 
14:24:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:13: Host Frequency set to 25000 KHz
14:24:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:13: ####CSD Registe 2.0 Values####
14:24:13: CSD_STRUCTURE                                 :0x1
14:24:13: Reserv1                                       :0x0
14:24:13: Time Access 1 TAAC                            :0xe
14:24:13: Time Access 2 NSAC*100                        :0x0
14:24:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:13: Card Command Classess CCC                     :0x5b5
14:24:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:13: DSR(driver stage register)  DSR_IMP           :0x0
14:24:13: Reserv2                                       :0x0
14:24:13: Device Size C_SIZE                            :0xedc8
14:24:13: Reserv3                                       :0x0
14:24:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:13: Reserv4                                       :0x0
14:24:13: Write Speed Factor R2W_FACTOR                 :0x2
14:24:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:13: FILE_FORMAT_GRP                               :0x0
14:24:13: COPY flag                                     :0x1
14:24:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:13: File_Format                                   :0x0
14:24:13: CRC                                           :0x0
14:24:13: ####CSD Registe Values####  

14:24:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:13: [GetSCRRegisterEntry] Passed
14:24:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:13: Data_Status_After Erases          : 0
14:24:13: CPRM Security Support             : No Security
14:24:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:13: Spec. Version                     : Version 3.0X
14:24:13: Extended Security Support         : Extended_Security_Not_Supported
14:24:13: Command Support                   : COMMAND_SUPPORT
14:24:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A630>, <py_sfcl.CommandDataDefinition object at 0x0642E420>) , Command count = 2233 ] 
14:24:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064677E0>, <py_sfcl.CommandDataDefinition object at 0x0642E210>) , Command count = 2234 ] 
14:24:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:13: [ SetBusWidth(0x4) , Command count = 2235 ] 
14:24:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BB10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2236 ] 
14:24:13: Protected Area Size 0x28000
14:24:13: Bus Width           2
14:24:13: Secure Mode         0
14:24:13: Speed  Class        4
14:24:13: Perf Move           0
14:24:13: Au Size             9
14:24:13: Erase Size          15
14:24:13: Erase Timeout       1
14:24:13: Erase offset        1
14:24:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2237 ] 
14:24:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:13: Host Frequency set to 100000 KHz
14:24:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:13: ####CSD Registe 2.0 Values####
14:24:13: CSD_STRUCTURE                                 :0x1
14:24:13: Reserv1                                       :0x0
14:24:13: Time Access 1 TAAC                            :0xe
14:24:13: Time Access 2 NSAC*100                        :0x0
14:24:13: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:13: Card Command Classess CCC                     :0x5b5
14:24:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:13: DSR(driver stage register)  DSR_IMP           :0x0
14:24:13: Reserv2                                       :0x0
14:24:13: Device Size C_SIZE                            :0xedc8
14:24:13: Reserv3                                       :0x0
14:24:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:13: Reserv4                                       :0x0
14:24:13: Write Speed Factor R2W_FACTOR                 :0x2
14:24:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:13: FILE_FORMAT_GRP                               :0x0
14:24:13: COPY flag                                     :0x1
14:24:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:13: File_Format                                   :0x0
14:24:13: CRC                                           :0x0
14:24:13: ####CSD Registe Values####  

14:24:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AED0>, <py_sfcl.CommandDataDefinition object at 0x0642AE10>) , Command count = 2238 ] 
14:24:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467C90>, <py_sfcl.CommandDataDefinition object at 0x0642A1E0>) , Command count = 2239 ] 
14:24:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E330>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642AD20>, <None>, <py_sfcl.Command23 object at 0x0642A420>) , Command count = 2240 ] 
14:24:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 27
14:24:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E690>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6C0>, <None>, <py_sfcl.Command23 object at 0x0642A5D0>) , Command count = 2241 ] 
14:24:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421600>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B060>, <py_sfcl.PySEnhancedCmdData object at 0x0645B090>, <None>, <py_sfcl.Command23 object at 0x0642AC00>) , Command count = 2242 ] 
14:24:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:15: Host Frequency set to 25000 KHz
14:24:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EA20>, 0x0, True) , Command count = 2243 ] 
14:24:15: [GO18_globalSetVolt]### Host voltage value is set.
14:24:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421A20>, 0x0, False) , Command count = 2244 ] 
14:24:15: [GO18_globalSetVolt]### Host voltage value is set.
14:24:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2245 ] 
14:24:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2246 ] 
14:24:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2247 ] 
14:24:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E9C0>, <py_sfcl.CommandDataDefinition object at 0x0642AE70>) , Command count = 2248 ] 
14:24:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AF60>, <py_sfcl.CommandDataDefinition object at 0x0642A2D0>) , Command count = 2249 ] 
14:24:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:15: [ SetCardRCA(0x1, 0xD555) , Command count = 2250 ] 
14:24:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:16: Host Frequency set to 25000 KHz
14:24:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:16: ####CSD Registe 2.0 Values####
14:24:16: CSD_STRUCTURE                                 :0x1
14:24:16: Reserv1                                       :0x0
14:24:16: Time Access 1 TAAC                            :0xe
14:24:16: Time Access 2 NSAC*100                        :0x0
14:24:16: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:16: Card Command Classess CCC                     :0x5b5
14:24:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:16: DSR(driver stage register)  DSR_IMP           :0x0
14:24:16: Reserv2                                       :0x0
14:24:16: Device Size C_SIZE                            :0xedc8
14:24:16: Reserv3                                       :0x0
14:24:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:16: Reserv4                                       :0x0
14:24:16: Write Speed Factor R2W_FACTOR                 :0x2
14:24:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:16: FILE_FORMAT_GRP                               :0x0
14:24:16: COPY flag                                     :0x1
14:24:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:16: File_Format                                   :0x0
14:24:16: CRC                                           :0x0
14:24:16: ####CSD Registe Values####  

14:24:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:16: [GetSCRRegisterEntry] Passed
14:24:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:16: Data_Status_After Erases          : 0
14:24:16: CPRM Security Support             : No Security
14:24:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:16: Spec. Version                     : Version 3.0X
14:24:16: Extended Security Support         : Extended_Security_Not_Supported
14:24:16: Command Support                   : COMMAND_SUPPORT
14:24:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A8D0>, <py_sfcl.CommandDataDefinition object at 0x0642A360>) , Command count = 2251 ] 
14:24:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421210>, <py_sfcl.CommandDataDefinition object at 0x0642EB10>) , Command count = 2252 ] 
14:24:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:16: [ SetBusWidth(0x4) , Command count = 2253 ] 
14:24:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2254 ] 
14:24:16: Protected Area Size 0x28000
14:24:16: Bus Width           2
14:24:16: Secure Mode         0
14:24:16: Speed  Class        4
14:24:16: Perf Move           0
14:24:16: Au Size             9
14:24:16: Erase Size          15
14:24:16: Erase Timeout       1
14:24:16: Erase offset        1
14:24:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2255 ] 
14:24:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:16: Host Frequency set to 100000 KHz
14:24:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:16: ####CSD Registe 2.0 Values####
14:24:16: CSD_STRUCTURE                                 :0x1
14:24:16: Reserv1                                       :0x0
14:24:16: Time Access 1 TAAC                            :0xe
14:24:16: Time Access 2 NSAC*100                        :0x0
14:24:16: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:16: Card Command Classess CCC                     :0x5b5
14:24:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:16: DSR(driver stage register)  DSR_IMP           :0x0
14:24:16: Reserv2                                       :0x0
14:24:16: Device Size C_SIZE                            :0xedc8
14:24:16: Reserv3                                       :0x0
14:24:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:16: Reserv4                                       :0x0
14:24:16: Write Speed Factor R2W_FACTOR                 :0x2
14:24:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:16: FILE_FORMAT_GRP                               :0x0
14:24:16: COPY flag                                     :0x1
14:24:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:16: File_Format                                   :0x0
14:24:16: CRC                                           :0x0
14:24:16: ####CSD Registe Values####  

14:24:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ACF0>, <py_sfcl.CommandDataDefinition object at 0x0642AE40>) , Command count = 2256 ] 
14:24:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421570>, <py_sfcl.CommandDataDefinition object at 0x0642A3C0>) , Command count = 2257 ] 
14:24:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AF30>, <py_sfcl.PySEnhancedCmdData object at 0x0642A300>, <None>, <py_sfcl.Command23 object at 0x0642E9F0>) , Command count = 2258 ] 
14:24:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 26
14:24:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064310F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642EF30>, <None>, <py_sfcl.Command23 object at 0x0642E4B0>) , Command count = 2259 ] 
14:24:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421EA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B2D0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BBA0>, <None>, <py_sfcl.Command23 object at 0x0642EDE0>) , Command count = 2260 ] 
14:24:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:18: Host Frequency set to 25000 KHz
14:24:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:18: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431300>, 0x0, True) , Command count = 2261 ] 
14:24:18: [GO18_globalSetVolt]### Host voltage value is set.
14:24:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645B5D0>, 0x0, False) , Command count = 2262 ] 
14:24:18: [GO18_globalSetVolt]### Host voltage value is set.
14:24:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2263 ] 
14:24:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2264 ] 
14:24:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2265 ] 
14:24:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312A0>, <py_sfcl.CommandDataDefinition object at 0x06431270>) , Command count = 2266 ] 
14:24:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312D0>, <py_sfcl.CommandDataDefinition object at 0x0642A7B0>) , Command count = 2267 ] 
14:24:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:18: [ SetCardRCA(0x1, 0xD555) , Command count = 2268 ] 
14:24:18: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:18: Host Frequency set to 25000 KHz
14:24:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:18: ####CSD Registe 2.0 Values####
14:24:18: CSD_STRUCTURE                                 :0x1
14:24:18: Reserv1                                       :0x0
14:24:18: Time Access 1 TAAC                            :0xe
14:24:18: Time Access 2 NSAC*100                        :0x0
14:24:18: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:18: Card Command Classess CCC                     :0x5b5
14:24:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:18: DSR(driver stage register)  DSR_IMP           :0x0
14:24:18: Reserv2                                       :0x0
14:24:18: Device Size C_SIZE                            :0xedc8
14:24:18: Reserv3                                       :0x0
14:24:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:18: Reserv4                                       :0x0
14:24:18: Write Speed Factor R2W_FACTOR                 :0x2
14:24:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:18: FILE_FORMAT_GRP                               :0x0
14:24:18: COPY flag                                     :0x1
14:24:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:18: File_Format                                   :0x0
14:24:18: CRC                                           :0x0
14:24:18: ####CSD Registe Values####  

14:24:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:18: [GetSCRRegisterEntry] Passed
14:24:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:18: Data_Status_After Erases          : 0
14:24:18: CPRM Security Support             : No Security
14:24:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:18: Spec. Version                     : Version 3.0X
14:24:18: Extended Security Support         : Extended_Security_Not_Supported
14:24:18: Command Support                   : COMMAND_SUPPORT
14:24:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A480>, <py_sfcl.CommandDataDefinition object at 0x06431570>) , Command count = 2269 ] 
14:24:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421960>, <py_sfcl.CommandDataDefinition object at 0x06431390>) , Command count = 2270 ] 
14:24:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:18: [ SetBusWidth(0x4) , Command count = 2271 ] 
14:24:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2272 ] 
14:24:18: Protected Area Size 0x28000
14:24:18: Bus Width           2
14:24:18: Secure Mode         0
14:24:18: Speed  Class        4
14:24:18: Perf Move           0
14:24:18: Au Size             9
14:24:18: Erase Size          15
14:24:18: Erase Timeout       1
14:24:18: Erase offset        1
14:24:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2273 ] 
14:24:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:18: Host Frequency set to 100000 KHz
14:24:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:18: ####CSD Registe 2.0 Values####
14:24:18: CSD_STRUCTURE                                 :0x1
14:24:18: Reserv1                                       :0x0
14:24:18: Time Access 1 TAAC                            :0xe
14:24:18: Time Access 2 NSAC*100                        :0x0
14:24:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:18: Card Command Classess CCC                     :0x5b5
14:24:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:18: DSR(driver stage register)  DSR_IMP           :0x0
14:24:18: Reserv2                                       :0x0
14:24:18: Device Size C_SIZE                            :0xedc8
14:24:18: Reserv3                                       :0x0
14:24:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:18: Reserv4                                       :0x0
14:24:18: Write Speed Factor R2W_FACTOR                 :0x2
14:24:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:18: FILE_FORMAT_GRP                               :0x0
14:24:18: COPY flag                                     :0x1
14:24:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:18: File_Format                                   :0x0
14:24:18: CRC                                           :0x0
14:24:18: ####CSD Registe Values####  

14:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7BD0>, <py_sfcl.CommandDataDefinition object at 0x05D7E1E0>) , Command count = 2274 ] 
14:24:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421E10>, <py_sfcl.CommandDataDefinition object at 0x0642E2A0>) , Command count = 2275 ] 
14:24:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431420>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EFC0>, <py_sfcl.PySEnhancedCmdData object at 0x0642EEA0>, <None>, <py_sfcl.Command23 object at 0x0642E840>) , Command count = 2276 ] 
14:24:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 25
14:24:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7C30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431630>, <py_sfcl.PySEnhancedCmdData object at 0x064313C0>, <None>, <py_sfcl.Command23 object at 0x0642E270>) , Command count = 2277 ] 
14:24:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642EA50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E300>, <py_sfcl.PySEnhancedCmdData object at 0x0645BE10>, <None>, <py_sfcl.Command23 object at 0x0642E360>) , Command count = 2278 ] 
14:24:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:21: Host Frequency set to 25000 KHz
14:24:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAD180>, 0x0, True) , Command count = 2279 ] 
14:24:21: [GO18_globalSetVolt]### Host voltage value is set.
14:24:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642ABA0>, 0x0, False) , Command count = 2280 ] 
14:24:21: [GO18_globalSetVolt]### Host voltage value is set.
14:24:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2281 ] 
14:24:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2282 ] 
14:24:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2283 ] 
14:24:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F90>, <py_sfcl.CommandDataDefinition object at 0x05DA7960>) , Command count = 2284 ] 
14:24:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADCC0>, <py_sfcl.CommandDataDefinition object at 0x0642E450>) , Command count = 2285 ] 
14:24:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:21: [ SetCardRCA(0x1, 0xD555) , Command count = 2286 ] 
14:24:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:21: Host Frequency set to 25000 KHz
14:24:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:21: ####CSD Registe 2.0 Values####
14:24:21: CSD_STRUCTURE                                 :0x1
14:24:21: Reserv1                                       :0x0
14:24:21: Time Access 1 TAAC                            :0xe
14:24:21: Time Access 2 NSAC*100                        :0x0
14:24:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:21: Card Command Classess CCC                     :0x5b5
14:24:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:21: DSR(driver stage register)  DSR_IMP           :0x0
14:24:21: Reserv2                                       :0x0
14:24:21: Device Size C_SIZE                            :0xedc8
14:24:21: Reserv3                                       :0x0
14:24:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:21: Reserv4                                       :0x0
14:24:21: Write Speed Factor R2W_FACTOR                 :0x2
14:24:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:21: FILE_FORMAT_GRP                               :0x0
14:24:21: COPY flag                                     :0x1
14:24:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:21: File_Format                                   :0x0
14:24:21: CRC                                           :0x0
14:24:21: ####CSD Registe Values####  

14:24:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:21: [GetSCRRegisterEntry] Passed
14:24:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:21: Data_Status_After Erases          : 0
14:24:21: CPRM Security Support             : No Security
14:24:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:21: Spec. Version                     : Version 3.0X
14:24:21: Extended Security Support         : Extended_Security_Not_Supported
14:24:21: Command Support                   : COMMAND_SUPPORT
14:24:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8A80>, <py_sfcl.CommandDataDefinition object at 0x06431A80>) , Command count = 2287 ] 
14:24:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421900>, <py_sfcl.CommandDataDefinition object at 0x0642E480>) , Command count = 2288 ] 
14:24:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:21: [ SetBusWidth(0x4) , Command count = 2289 ] 
14:24:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2290 ] 
14:24:21: Protected Area Size 0x28000
14:24:21: Bus Width           2
14:24:21: Secure Mode         0
14:24:21: Speed  Class        4
14:24:21: Perf Move           0
14:24:21: Au Size             9
14:24:21: Erase Size          15
14:24:21: Erase Timeout       1
14:24:21: Erase offset        1
14:24:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2291 ] 
14:24:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:21: Host Frequency set to 100000 KHz
14:24:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:21: ####CSD Registe 2.0 Values####
14:24:21: CSD_STRUCTURE                                 :0x1
14:24:21: Reserv1                                       :0x0
14:24:21: Time Access 1 TAAC                            :0xe
14:24:21: Time Access 2 NSAC*100                        :0x0
14:24:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:21: Card Command Classess CCC                     :0x5b5
14:24:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:21: DSR(driver stage register)  DSR_IMP           :0x0
14:24:21: Reserv2                                       :0x0
14:24:21: Device Size C_SIZE                            :0xedc8
14:24:21: Reserv3                                       :0x0
14:24:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:21: Reserv4                                       :0x0
14:24:21: Write Speed Factor R2W_FACTOR                 :0x2
14:24:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:21: FILE_FORMAT_GRP                               :0x0
14:24:21: COPY flag                                     :0x1
14:24:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:21: File_Format                                   :0x0
14:24:21: CRC                                           :0x0
14:24:21: ####CSD Registe Values####  

14:24:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D91180>, <py_sfcl.CommandDataDefinition object at 0x05D91210>) , Command count = 2292 ] 
14:24:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431060>, <py_sfcl.CommandDataDefinition object at 0x0642E7E0>) , Command count = 2293 ] 
14:24:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF7E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431660>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6F0>, <None>, <py_sfcl.Command23 object at 0x0642E600>) , Command count = 2294 ] 
14:24:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 24
14:24:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF810>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431B40>, <py_sfcl.PySEnhancedCmdData object at 0x06431B70>, <None>, <py_sfcl.Command23 object at 0x0642E720>) , Command count = 2295 ] 
14:24:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064145A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC30>, <py_sfcl.PySEnhancedCmdData object at 0x0642E0C0>, <None>, <py_sfcl.Command23 object at 0x0642A330>) , Command count = 2296 ] 
14:24:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:21: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:23: Host Frequency set to 25000 KHz
14:24:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:23: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF960>, 0x0, True) , Command count = 2297 ] 
14:24:23: [GO18_globalSetVolt]### Host voltage value is set.
14:24:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431120>, 0x0, False) , Command count = 2298 ] 
14:24:23: [GO18_globalSetVolt]### Host voltage value is set.
14:24:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2299 ] 
14:24:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2300 ] 
14:24:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2301 ] 
14:24:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB10>, <py_sfcl.CommandDataDefinition object at 0x05DA7C60>) , Command count = 2302 ] 
14:24:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D7EAE0>, <py_sfcl.CommandDataDefinition object at 0x0642E810>) , Command count = 2303 ] 
14:24:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:24: [ SetCardRCA(0x1, 0xD555) , Command count = 2304 ] 
14:24:24: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:24: Host Frequency set to 25000 KHz
14:24:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:24: ####CSD Registe 2.0 Values####
14:24:24: CSD_STRUCTURE                                 :0x1
14:24:24: Reserv1                                       :0x0
14:24:24: Time Access 1 TAAC                            :0xe
14:24:24: Time Access 2 NSAC*100                        :0x0
14:24:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:24: Card Command Classess CCC                     :0x5b5
14:24:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:24: DSR(driver stage register)  DSR_IMP           :0x0
14:24:24: Reserv2                                       :0x0
14:24:24: Device Size C_SIZE                            :0xedc8
14:24:24: Reserv3                                       :0x0
14:24:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:24: Reserv4                                       :0x0
14:24:24: Write Speed Factor R2W_FACTOR                 :0x2
14:24:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:24: FILE_FORMAT_GRP                               :0x0
14:24:24: COPY flag                                     :0x1
14:24:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:24: File_Format                                   :0x0
14:24:24: CRC                                           :0x0
14:24:24: ####CSD Registe Values####  

14:24:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:24: [GetSCRRegisterEntry] Passed
14:24:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:24: Data_Status_After Erases          : 0
14:24:24: CPRM Security Support             : No Security
14:24:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:24: Spec. Version                     : Version 3.0X
14:24:24: Extended Security Support         : Extended_Security_Not_Supported
14:24:24: Command Support                   : COMMAND_SUPPORT
14:24:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB40>, <py_sfcl.CommandDataDefinition object at 0x0642ED20>) , Command count = 2305 ] 
14:24:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E510>, <py_sfcl.CommandDataDefinition object at 0x06431DE0>) , Command count = 2306 ] 
14:24:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:24: [ SetBusWidth(0x4) , Command count = 2307 ] 
14:24:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2308 ] 
14:24:24: Protected Area Size 0x28000
14:24:24: Bus Width           2
14:24:24: Secure Mode         0
14:24:24: Speed  Class        4
14:24:24: Perf Move           0
14:24:24: Au Size             9
14:24:24: Erase Size          15
14:24:24: Erase Timeout       1
14:24:24: Erase offset        1
14:24:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2309 ] 
14:24:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:24: Host Frequency set to 100000 KHz
14:24:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:24: ####CSD Registe 2.0 Values####
14:24:24: CSD_STRUCTURE                                 :0x1
14:24:24: Reserv1                                       :0x0
14:24:24: Time Access 1 TAAC                            :0xe
14:24:24: Time Access 2 NSAC*100                        :0x0
14:24:24: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:24: Card Command Classess CCC                     :0x5b5
14:24:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:24: DSR(driver stage register)  DSR_IMP           :0x0
14:24:24: Reserv2                                       :0x0
14:24:24: Device Size C_SIZE                            :0xedc8
14:24:24: Reserv3                                       :0x0
14:24:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:24: Reserv4                                       :0x0
14:24:24: Write Speed Factor R2W_FACTOR                 :0x2
14:24:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:24: FILE_FORMAT_GRP                               :0x0
14:24:24: COPY flag                                     :0x1
14:24:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:24: File_Format                                   :0x0
14:24:24: CRC                                           :0x0
14:24:24: ####CSD Registe Values####  

14:24:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E14B0>, <py_sfcl.CommandDataDefinition object at 0x05DEFE10>) , Command count = 2310 ] 
14:24:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01D66840>, <py_sfcl.CommandDataDefinition object at 0x06431240>) , Command count = 2311 ] 
14:24:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AA80>, <py_sfcl.PySEnhancedCmdData object at 0x06431F90>, <None>, <py_sfcl.Command23 object at 0x0642EF60>) , Command count = 2312 ] 
14:24:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 23
14:24:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DAD3F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431E10>, <py_sfcl.PySEnhancedCmdData object at 0x06431F00>, <None>, <py_sfcl.Command23 object at 0x064317B0>) , Command count = 2313 ] 
14:24:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467450>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DE8690>, <py_sfcl.PySEnhancedCmdData object at 0x06431A50>, <None>, <py_sfcl.Command23 object at 0x06431C90>) , Command count = 2314 ] 
14:24:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:24: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:26: Host Frequency set to 25000 KHz
14:24:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:26: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x064140F0>, 0x0, True) , Command count = 2315 ] 
14:24:26: [GO18_globalSetVolt]### Host voltage value is set.
14:24:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D7E2A0>, 0x0, False) , Command count = 2316 ] 
14:24:26: [GO18_globalSetVolt]### Host voltage value is set.
14:24:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2317 ] 
14:24:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2318 ] 
14:24:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2319 ] 
14:24:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414690>, <py_sfcl.CommandDataDefinition object at 0x06414B40>) , Command count = 2320 ] 
14:24:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431C30>, <py_sfcl.CommandDataDefinition object at 0x06431870>) , Command count = 2321 ] 
14:24:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:26: [ SetCardRCA(0x1, 0xD555) , Command count = 2322 ] 
14:24:26: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:27: Host Frequency set to 25000 KHz
14:24:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:27: ####CSD Registe 2.0 Values####
14:24:27: CSD_STRUCTURE                                 :0x1
14:24:27: Reserv1                                       :0x0
14:24:27: Time Access 1 TAAC                            :0xe
14:24:27: Time Access 2 NSAC*100                        :0x0
14:24:27: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:27: Card Command Classess CCC                     :0x5b5
14:24:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:27: DSR(driver stage register)  DSR_IMP           :0x0
14:24:27: Reserv2                                       :0x0
14:24:27: Device Size C_SIZE                            :0xedc8
14:24:27: Reserv3                                       :0x0
14:24:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:27: Reserv4                                       :0x0
14:24:27: Write Speed Factor R2W_FACTOR                 :0x2
14:24:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:27: FILE_FORMAT_GRP                               :0x0
14:24:27: COPY flag                                     :0x1
14:24:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:27: File_Format                                   :0x0
14:24:27: CRC                                           :0x0
14:24:27: ####CSD Registe Values####  

14:24:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:27: [GetSCRRegisterEntry] Passed
14:24:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:27: Data_Status_After Erases          : 0
14:24:27: CPRM Security Support             : No Security
14:24:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:27: Spec. Version                     : Version 3.0X
14:24:27: Extended Security Support         : Extended_Security_Not_Supported
14:24:27: Command Support                   : COMMAND_SUPPORT
14:24:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414360>, <py_sfcl.CommandDataDefinition object at 0x06431EA0>) , Command count = 2323 ] 
14:24:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E090>, <py_sfcl.CommandDataDefinition object at 0x06431810>) , Command count = 2324 ] 
14:24:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:27: [ SetBusWidth(0x4) , Command count = 2325 ] 
14:24:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2326 ] 
14:24:27: Protected Area Size 0x28000
14:24:27: Bus Width           2
14:24:27: Secure Mode         0
14:24:27: Speed  Class        4
14:24:27: Perf Move           0
14:24:27: Au Size             9
14:24:27: Erase Size          15
14:24:27: Erase Timeout       1
14:24:27: Erase offset        1
14:24:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2327 ] 
14:24:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:27: Host Frequency set to 100000 KHz
14:24:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:27: ####CSD Registe 2.0 Values####
14:24:27: CSD_STRUCTURE                                 :0x1
14:24:27: Reserv1                                       :0x0
14:24:27: Time Access 1 TAAC                            :0xe
14:24:27: Time Access 2 NSAC*100                        :0x0
14:24:27: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:27: Card Command Classess CCC                     :0x5b5
14:24:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:27: DSR(driver stage register)  DSR_IMP           :0x0
14:24:27: Reserv2                                       :0x0
14:24:27: Device Size C_SIZE                            :0xedc8
14:24:27: Reserv3                                       :0x0
14:24:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:27: Reserv4                                       :0x0
14:24:27: Write Speed Factor R2W_FACTOR                 :0x2
14:24:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:27: FILE_FORMAT_GRP                               :0x0
14:24:27: COPY flag                                     :0x1
14:24:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:27: File_Format                                   :0x0
14:24:27: CRC                                           :0x0
14:24:27: ####CSD Registe Values####  

14:24:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431960>, <py_sfcl.CommandDataDefinition object at 0x06431AE0>) , Command count = 2328 ] 
14:24:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064314B0>, <py_sfcl.CommandDataDefinition object at 0x06431840>) , Command count = 2329 ] 
14:24:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414300>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F60>, <py_sfcl.PySEnhancedCmdData object at 0x064316C0>, <None>, <py_sfcl.Command23 object at 0x06431720>) , Command count = 2330 ] 
14:24:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 22
14:24:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E1060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414900>, <py_sfcl.PySEnhancedCmdData object at 0x06431C60>, <None>, <py_sfcl.Command23 object at 0x06431990>) , Command count = 2331 ] 
14:24:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE8C30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E870>, <py_sfcl.PySEnhancedCmdData object at 0x06431BD0>, <None>, <py_sfcl.Command23 object at 0x06431B10>) , Command count = 2332 ] 
14:24:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:29: Host Frequency set to 25000 KHz
14:24:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x064517B0>, 0x0, True) , Command count = 2333 ] 
14:24:29: [GO18_globalSetVolt]### Host voltage value is set.
14:24:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x06414420>, 0x0, False) , Command count = 2334 ] 
14:24:29: [GO18_globalSetVolt]### Host voltage value is set.
14:24:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2335 ] 
14:24:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2336 ] 
14:24:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2337 ] 
14:24:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414DE0>, <py_sfcl.CommandDataDefinition object at 0x06451540>) , Command count = 2338 ] 
14:24:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064519F0>, <py_sfcl.CommandDataDefinition object at 0x064310C0>) , Command count = 2339 ] 
14:24:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:29: [ SetCardRCA(0x1, 0xD555) , Command count = 2340 ] 
14:24:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:29: Host Frequency set to 25000 KHz
14:24:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:29: ####CSD Registe 2.0 Values####
14:24:29: CSD_STRUCTURE                                 :0x1
14:24:29: Reserv1                                       :0x0
14:24:29: Time Access 1 TAAC                            :0xe
14:24:29: Time Access 2 NSAC*100                        :0x0
14:24:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:29: Card Command Classess CCC                     :0x5b5
14:24:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:29: DSR(driver stage register)  DSR_IMP           :0x0
14:24:29: Reserv2                                       :0x0
14:24:29: Device Size C_SIZE                            :0xedc8
14:24:29: Reserv3                                       :0x0
14:24:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:29: Reserv4                                       :0x0
14:24:29: Write Speed Factor R2W_FACTOR                 :0x2
14:24:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:29: FILE_FORMAT_GRP                               :0x0
14:24:29: COPY flag                                     :0x1
14:24:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:29: File_Format                                   :0x0
14:24:29: CRC                                           :0x0
14:24:29: ####CSD Registe Values####  

14:24:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:29: [GetSCRRegisterEntry] Passed
14:24:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:29: Data_Status_After Erases          : 0
14:24:29: CPRM Security Support             : No Security
14:24:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:29: Spec. Version                     : Version 3.0X
14:24:29: Extended Security Support         : Extended_Security_Not_Supported
14:24:29: Command Support                   : COMMAND_SUPPORT
14:24:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1A80>, <py_sfcl.CommandDataDefinition object at 0x064149F0>) , Command count = 2341 ] 
14:24:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E900>, <py_sfcl.CommandDataDefinition object at 0x06451900>) , Command count = 2342 ] 
14:24:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:29: [ SetBusWidth(0x4) , Command count = 2343 ] 
14:24:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BDB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2344 ] 
14:24:29: Protected Area Size 0x28000
14:24:29: Bus Width           2
14:24:29: Secure Mode         0
14:24:29: Speed  Class        4
14:24:29: Perf Move           0
14:24:29: Au Size             9
14:24:29: Erase Size          15
14:24:29: Erase Timeout       1
14:24:29: Erase offset        1
14:24:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2345 ] 
14:24:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:29: Host Frequency set to 100000 KHz
14:24:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:29: ####CSD Registe 2.0 Values####
14:24:29: CSD_STRUCTURE                                 :0x1
14:24:29: Reserv1                                       :0x0
14:24:29: Time Access 1 TAAC                            :0xe
14:24:29: Time Access 2 NSAC*100                        :0x0
14:24:29: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:29: Card Command Classess CCC                     :0x5b5
14:24:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:29: DSR(driver stage register)  DSR_IMP           :0x0
14:24:29: Reserv2                                       :0x0
14:24:29: Device Size C_SIZE                            :0xedc8
14:24:29: Reserv3                                       :0x0
14:24:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:29: Reserv4                                       :0x0
14:24:29: Write Speed Factor R2W_FACTOR                 :0x2
14:24:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:29: FILE_FORMAT_GRP                               :0x0
14:24:29: COPY flag                                     :0x1
14:24:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:29: File_Format                                   :0x0
14:24:29: CRC                                           :0x0
14:24:29: ####CSD Registe Values####  

14:24:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431D50>, <py_sfcl.CommandDataDefinition object at 0x06414CF0>) , Command count = 2346 ] 
14:24:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431150>, <py_sfcl.CommandDataDefinition object at 0x06431450>) , Command count = 2347 ] 
14:24:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E11E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06451870>, <py_sfcl.PySEnhancedCmdData object at 0x06431CC0>, <None>, <py_sfcl.Command23 object at 0x06431D80>) , Command count = 2348 ] 
14:24:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 21
14:24:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06451BD0>, <py_sfcl.PySEnhancedCmdData object at 0x06451B10>, <None>, <py_sfcl.Command23 object at 0x064142D0>) , Command count = 2349 ] 
14:24:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x01D7FDB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064143C0>, <py_sfcl.PySEnhancedCmdData object at 0x06414990>, <None>, <py_sfcl.Command23 object at 0x064148A0>) , Command count = 2350 ] 
14:24:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:32: Host Frequency set to 25000 KHz
14:24:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:32: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x064516C0>, 0x0, True) , Command count = 2351 ] 
14:24:32: [GO18_globalSetVolt]### Host voltage value is set.
14:24:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x064319C0>, 0x0, False) , Command count = 2352 ] 
14:24:32: [GO18_globalSetVolt]### Host voltage value is set.
14:24:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2353 ] 
14:24:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2354 ] 
14:24:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2355 ] 
14:24:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F120>, <py_sfcl.CommandDataDefinition object at 0x064519C0>) , Command count = 2356 ] 
14:24:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451390>, <py_sfcl.CommandDataDefinition object at 0x06414C60>) , Command count = 2357 ] 
14:24:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:32: [ SetCardRCA(0x1, 0xD555) , Command count = 2358 ] 
14:24:32: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:32: Host Frequency set to 25000 KHz
14:24:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:32: ####CSD Registe 2.0 Values####
14:24:32: CSD_STRUCTURE                                 :0x1
14:24:32: Reserv1                                       :0x0
14:24:32: Time Access 1 TAAC                            :0xe
14:24:32: Time Access 2 NSAC*100                        :0x0
14:24:32: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:32: Card Command Classess CCC                     :0x5b5
14:24:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:32: DSR(driver stage register)  DSR_IMP           :0x0
14:24:32: Reserv2                                       :0x0
14:24:32: Device Size C_SIZE                            :0xedc8
14:24:32: Reserv3                                       :0x0
14:24:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:32: Reserv4                                       :0x0
14:24:32: Write Speed Factor R2W_FACTOR                 :0x2
14:24:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:32: FILE_FORMAT_GRP                               :0x0
14:24:32: COPY flag                                     :0x1
14:24:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:32: File_Format                                   :0x0
14:24:32: CRC                                           :0x0
14:24:32: ####CSD Registe Values####  

14:24:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:32: [GetSCRRegisterEntry] Passed
14:24:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:32: Data_Status_After Erases          : 0
14:24:32: CPRM Security Support             : No Security
14:24:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:32: Spec. Version                     : Version 3.0X
14:24:32: Extended Security Support         : Extended_Security_Not_Supported
14:24:32: Command Support                   : COMMAND_SUPPORT
14:24:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451780>, <py_sfcl.CommandDataDefinition object at 0x06451D20>) , Command count = 2359 ] 
14:24:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064313F0>, <py_sfcl.CommandDataDefinition object at 0x0641F210>) , Command count = 2360 ] 
14:24:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:32: [ SetBusWidth(0x4) , Command count = 2361 ] 
14:24:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2362 ] 
14:24:32: Protected Area Size 0x28000
14:24:32: Bus Width           2
14:24:32: Secure Mode         0
14:24:32: Speed  Class        4
14:24:32: Perf Move           0
14:24:32: Au Size             9
14:24:32: Erase Size          15
14:24:32: Erase Timeout       1
14:24:32: Erase offset        1
14:24:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2363 ] 
14:24:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:32: Host Frequency set to 100000 KHz
14:24:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:32: ####CSD Registe 2.0 Values####
14:24:32: CSD_STRUCTURE                                 :0x1
14:24:32: Reserv1                                       :0x0
14:24:32: Time Access 1 TAAC                            :0xe
14:24:32: Time Access 2 NSAC*100                        :0x0
14:24:32: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:32: Card Command Classess CCC                     :0x5b5
14:24:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:32: DSR(driver stage register)  DSR_IMP           :0x0
14:24:32: Reserv2                                       :0x0
14:24:32: Device Size C_SIZE                            :0xedc8
14:24:32: Reserv3                                       :0x0
14:24:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:32: Reserv4                                       :0x0
14:24:32: Write Speed Factor R2W_FACTOR                 :0x2
14:24:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:32: FILE_FORMAT_GRP                               :0x0
14:24:32: COPY flag                                     :0x1
14:24:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:32: File_Format                                   :0x0
14:24:32: CRC                                           :0x0
14:24:32: ####CSD Registe Values####  

14:24:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451630>, <py_sfcl.CommandDataDefinition object at 0x06451570>) , Command count = 2364 ] 
14:24:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADAB0>, <py_sfcl.CommandDataDefinition object at 0x06414DB0>) , Command count = 2365 ] 
14:24:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451EA0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064518A0>, <py_sfcl.PySEnhancedCmdData object at 0x06414600>, <None>, <py_sfcl.Command23 object at 0x06414AE0>) , Command count = 2366 ] 
14:24:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 20
14:24:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F4B0>, <py_sfcl.PySEnhancedCmdData object at 0x0641F660>, <None>, <py_sfcl.Command23 object at 0x06414A50>) , Command count = 2367 ] 
14:24:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEFA80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F1B0>, <py_sfcl.PySEnhancedCmdData object at 0x0641F210>, <None>, <py_sfcl.Command23 object at 0x0641F540>) , Command count = 2368 ] 
14:24:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:32: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:34: Host Frequency set to 25000 KHz
14:24:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:34: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB10>, 0x0, True) , Command count = 2369 ] 
14:24:34: [GO18_globalSetVolt]### Host voltage value is set.
14:24:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEFAB0>, 0x0, False) , Command count = 2370 ] 
14:24:34: [GO18_globalSetVolt]### Host voltage value is set.
14:24:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2371 ] 
14:24:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2372 ] 
14:24:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2373 ] 
14:24:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FFC0>, <py_sfcl.CommandDataDefinition object at 0x06451E40>) , Command count = 2374 ] 
14:24:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FC90>, <py_sfcl.CommandDataDefinition object at 0x064515A0>) , Command count = 2375 ] 
14:24:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:35: [ SetCardRCA(0x1, 0xD555) , Command count = 2376 ] 
14:24:35: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:35: Host Frequency set to 25000 KHz
14:24:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:35: ####CSD Registe 2.0 Values####
14:24:35: CSD_STRUCTURE                                 :0x1
14:24:35: Reserv1                                       :0x0
14:24:35: Time Access 1 TAAC                            :0xe
14:24:35: Time Access 2 NSAC*100                        :0x0
14:24:35: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:35: Card Command Classess CCC                     :0x5b5
14:24:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:35: DSR(driver stage register)  DSR_IMP           :0x0
14:24:35: Reserv2                                       :0x0
14:24:35: Device Size C_SIZE                            :0xedc8
14:24:35: Reserv3                                       :0x0
14:24:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:35: Reserv4                                       :0x0
14:24:35: Write Speed Factor R2W_FACTOR                 :0x2
14:24:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:35: FILE_FORMAT_GRP                               :0x0
14:24:35: COPY flag                                     :0x1
14:24:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:35: File_Format                                   :0x0
14:24:35: CRC                                           :0x0
14:24:35: ####CSD Registe Values####  

14:24:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:35: [GetSCRRegisterEntry] Passed
14:24:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:35: Data_Status_After Erases          : 0
14:24:35: CPRM Security Support             : No Security
14:24:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:35: Spec. Version                     : Version 3.0X
14:24:35: Extended Security Support         : Extended_Security_Not_Supported
14:24:35: Command Support                   : COMMAND_SUPPORT
14:24:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FB70>, <py_sfcl.CommandDataDefinition object at 0x0641FCF0>) , Command count = 2377 ] 
14:24:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB70>, <py_sfcl.CommandDataDefinition object at 0x0641FC00>) , Command count = 2378 ] 
14:24:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:35: [ SetBusWidth(0x4) , Command count = 2379 ] 
14:24:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2380 ] 
14:24:35: Protected Area Size 0x28000
14:24:35: Bus Width           2
14:24:35: Secure Mode         0
14:24:35: Speed  Class        4
14:24:35: Perf Move           0
14:24:35: Au Size             9
14:24:35: Erase Size          15
14:24:35: Erase Timeout       1
14:24:35: Erase offset        1
14:24:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2381 ] 
14:24:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:35: Host Frequency set to 100000 KHz
14:24:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:35: ####CSD Registe 2.0 Values####
14:24:35: CSD_STRUCTURE                                 :0x1
14:24:35: Reserv1                                       :0x0
14:24:35: Time Access 1 TAAC                            :0xe
14:24:35: Time Access 2 NSAC*100                        :0x0
14:24:35: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:35: Card Command Classess CCC                     :0x5b5
14:24:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:35: DSR(driver stage register)  DSR_IMP           :0x0
14:24:35: Reserv2                                       :0x0
14:24:35: Device Size C_SIZE                            :0xedc8
14:24:35: Reserv3                                       :0x0
14:24:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:35: Reserv4                                       :0x0
14:24:35: Write Speed Factor R2W_FACTOR                 :0x2
14:24:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:35: FILE_FORMAT_GRP                               :0x0
14:24:35: COPY flag                                     :0x1
14:24:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:35: File_Format                                   :0x0
14:24:35: CRC                                           :0x0
14:24:35: ####CSD Registe Values####  

14:24:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467060>, <py_sfcl.CommandDataDefinition object at 0x0641FF90>) , Command count = 2382 ] 
14:24:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEF9F0>, <py_sfcl.CommandDataDefinition object at 0x0641F2D0>) , Command count = 2383 ] 
14:24:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064671E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467210>, <py_sfcl.PySEnhancedCmdData object at 0x06467240>, <None>, <py_sfcl.Command23 object at 0x0641F240>) , Command count = 2384 ] 
14:24:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 19
14:24:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064670C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064670F0>, <py_sfcl.PySEnhancedCmdData object at 0x06467120>, <None>, <py_sfcl.Command23 object at 0x0645B570>) , Command count = 2385 ] 
14:24:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BA80>, <py_sfcl.PySEnhancedCmdData object at 0x0645B7B0>, <None>, <py_sfcl.Command23 object at 0x0645B960>) , Command count = 2386 ] 
14:24:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:35: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:37: Host Frequency set to 25000 KHz
14:24:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x064675A0>, 0x0, True) , Command count = 2387 ] 
14:24:37: [GO18_globalSetVolt]### Host voltage value is set.
14:24:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645B720>, 0x0, False) , Command count = 2388 ] 
14:24:37: [GO18_globalSetVolt]### Host voltage value is set.
14:24:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2389 ] 
14:24:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2390 ] 
14:24:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2391 ] 
14:24:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467540>, <py_sfcl.CommandDataDefinition object at 0x064674E0>) , Command count = 2392 ] 
14:24:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F0F0>, <py_sfcl.CommandDataDefinition object at 0x0641FBA0>) , Command count = 2393 ] 
14:24:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:37: [ SetCardRCA(0x1, 0xD555) , Command count = 2394 ] 
14:24:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:38: Host Frequency set to 25000 KHz
14:24:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:38: ####CSD Registe 2.0 Values####
14:24:38: CSD_STRUCTURE                                 :0x1
14:24:38: Reserv1                                       :0x0
14:24:38: Time Access 1 TAAC                            :0xe
14:24:38: Time Access 2 NSAC*100                        :0x0
14:24:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:38: Card Command Classess CCC                     :0x5b5
14:24:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:38: DSR(driver stage register)  DSR_IMP           :0x0
14:24:38: Reserv2                                       :0x0
14:24:38: Device Size C_SIZE                            :0xedc8
14:24:38: Reserv3                                       :0x0
14:24:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:38: Reserv4                                       :0x0
14:24:38: Write Speed Factor R2W_FACTOR                 :0x2
14:24:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:38: FILE_FORMAT_GRP                               :0x0
14:24:38: COPY flag                                     :0x1
14:24:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:38: File_Format                                   :0x0
14:24:38: CRC                                           :0x0
14:24:38: ####CSD Registe Values####  

14:24:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:38: [GetSCRRegisterEntry] Passed
14:24:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:38: Data_Status_After Erases          : 0
14:24:38: CPRM Security Support             : No Security
14:24:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:38: Spec. Version                     : Version 3.0X
14:24:38: Extended Security Support         : Extended_Security_Not_Supported
14:24:38: Command Support                   : COMMAND_SUPPORT
14:24:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467660>, <py_sfcl.CommandDataDefinition object at 0x0641FDE0>) , Command count = 2395 ] 
14:24:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431ED0>, <py_sfcl.CommandDataDefinition object at 0x0641FD80>) , Command count = 2396 ] 
14:24:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:38: [ SetBusWidth(0x4) , Command count = 2397 ] 
14:24:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2398 ] 
14:24:38: Protected Area Size 0x28000
14:24:38: Bus Width           2
14:24:38: Secure Mode         0
14:24:38: Speed  Class        4
14:24:38: Perf Move           0
14:24:38: Au Size             9
14:24:38: Erase Size          15
14:24:38: Erase Timeout       1
14:24:38: Erase offset        1
14:24:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2399 ] 
14:24:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:38: Host Frequency set to 100000 KHz
14:24:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:38: ####CSD Registe 2.0 Values####
14:24:38: CSD_STRUCTURE                                 :0x1
14:24:38: Reserv1                                       :0x0
14:24:38: Time Access 1 TAAC                            :0xe
14:24:38: Time Access 2 NSAC*100                        :0x0
14:24:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:38: Card Command Classess CCC                     :0x5b5
14:24:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:38: DSR(driver stage register)  DSR_IMP           :0x0
14:24:38: Reserv2                                       :0x0
14:24:38: Device Size C_SIZE                            :0xedc8
14:24:38: Reserv3                                       :0x0
14:24:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:38: Reserv4                                       :0x0
14:24:38: Write Speed Factor R2W_FACTOR                 :0x2
14:24:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:38: FILE_FORMAT_GRP                               :0x0
14:24:38: COPY flag                                     :0x1
14:24:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:38: File_Format                                   :0x0
14:24:38: CRC                                           :0x0
14:24:38: ####CSD Registe Values####  

14:24:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F030>, <py_sfcl.CommandDataDefinition object at 0x0641FAE0>) , Command count = 2400 ] 
14:24:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414D20>, <py_sfcl.CommandDataDefinition object at 0x06467A20>) , Command count = 2401 ] 
14:24:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467990>, <py_sfcl.PySEnhancedCmdData object at 0x064679C0>, <None>, <py_sfcl.Command23 object at 0x0645B840>) , Command count = 2402 ] 
14:24:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 18
14:24:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06467AE0>, <None>, <py_sfcl.Command23 object at 0x06467630>) , Command count = 2403 ] 
14:24:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F300>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BD50>, <py_sfcl.PySEnhancedCmdData object at 0x0645B4B0>, <None>, <py_sfcl.Command23 object at 0x06467030>) , Command count = 2404 ] 
14:24:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:38: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:40: Host Frequency set to 25000 KHz
14:24:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:40: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467E40>, 0x0, True) , Command count = 2405 ] 
14:24:40: [GO18_globalSetVolt]### Host voltage value is set.
14:24:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FC60>, 0x0, False) , Command count = 2406 ] 
14:24:40: [GO18_globalSetVolt]### Host voltage value is set.
14:24:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2407 ] 
14:24:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2408 ] 
14:24:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2409 ] 
14:24:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F510>, <py_sfcl.CommandDataDefinition object at 0x06467DE0>) , Command count = 2410 ] 
14:24:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467ED0>, <py_sfcl.CommandDataDefinition object at 0x06467690>) , Command count = 2411 ] 
14:24:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:40: [ SetCardRCA(0x1, 0xD555) , Command count = 2412 ] 
14:24:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:40: Host Frequency set to 25000 KHz
14:24:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:40: ####CSD Registe 2.0 Values####
14:24:40: CSD_STRUCTURE                                 :0x1
14:24:40: Reserv1                                       :0x0
14:24:40: Time Access 1 TAAC                            :0xe
14:24:40: Time Access 2 NSAC*100                        :0x0
14:24:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:40: Card Command Classess CCC                     :0x5b5
14:24:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:40: DSR(driver stage register)  DSR_IMP           :0x0
14:24:40: Reserv2                                       :0x0
14:24:40: Device Size C_SIZE                            :0xedc8
14:24:40: Reserv3                                       :0x0
14:24:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:40: Reserv4                                       :0x0
14:24:40: Write Speed Factor R2W_FACTOR                 :0x2
14:24:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:40: FILE_FORMAT_GRP                               :0x0
14:24:40: COPY flag                                     :0x1
14:24:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:40: File_Format                                   :0x0
14:24:40: CRC                                           :0x0
14:24:40: ####CSD Registe Values####  

14:24:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:40: [GetSCRRegisterEntry] Passed
14:24:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:40: Data_Status_After Erases          : 0
14:24:40: CPRM Security Support             : No Security
14:24:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:40: Spec. Version                     : Version 3.0X
14:24:40: Extended Security Support         : Extended_Security_Not_Supported
14:24:40: Command Support                   : COMMAND_SUPPORT
14:24:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421030>, <py_sfcl.CommandDataDefinition object at 0x06467F00>) , Command count = 2413 ] 
14:24:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414570>, <py_sfcl.CommandDataDefinition object at 0x06467570>) , Command count = 2414 ] 
14:24:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:40: [ SetBusWidth(0x4) , Command count = 2415 ] 
14:24:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2416 ] 
14:24:40: Protected Area Size 0x28000
14:24:40: Bus Width           2
14:24:40: Secure Mode         0
14:24:40: Speed  Class        4
14:24:40: Perf Move           0
14:24:40: Au Size             9
14:24:40: Erase Size          15
14:24:40: Erase Timeout       1
14:24:40: Erase offset        1
14:24:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2417 ] 
14:24:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:41: Host Frequency set to 100000 KHz
14:24:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:41: ####CSD Registe 2.0 Values####
14:24:41: CSD_STRUCTURE                                 :0x1
14:24:41: Reserv1                                       :0x0
14:24:41: Time Access 1 TAAC                            :0xe
14:24:41: Time Access 2 NSAC*100                        :0x0
14:24:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:41: Card Command Classess CCC                     :0x5b5
14:24:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:41: DSR(driver stage register)  DSR_IMP           :0x0
14:24:41: Reserv2                                       :0x0
14:24:41: Device Size C_SIZE                            :0xedc8
14:24:41: Reserv3                                       :0x0
14:24:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:41: Reserv4                                       :0x0
14:24:41: Write Speed Factor R2W_FACTOR                 :0x2
14:24:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:41: FILE_FORMAT_GRP                               :0x0
14:24:41: COPY flag                                     :0x1
14:24:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:41: File_Format                                   :0x0
14:24:41: CRC                                           :0x0
14:24:41: ####CSD Registe Values####  

14:24:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F330>, <py_sfcl.CommandDataDefinition object at 0x06467F90>) , Command count = 2418 ] 
14:24:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467270>, <py_sfcl.CommandDataDefinition object at 0x06467330>) , Command count = 2419 ] 
14:24:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064212A0>, <py_sfcl.PySEnhancedCmdData object at 0x06467C00>, <None>, <py_sfcl.Command23 object at 0x064674B0>) , Command count = 2420 ] 
14:24:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 17
14:24:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421360>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421390>, <py_sfcl.PySEnhancedCmdData object at 0x064679F0>, <None>, <py_sfcl.Command23 object at 0x06467BD0>) , Command count = 2421 ] 
14:24:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645B210>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B1E0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B240>, <None>, <py_sfcl.Command23 object at 0x064673C0>) , Command count = 2422 ] 
14:24:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:43: Host Frequency set to 25000 KHz
14:24:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421720>, 0x0, True) , Command count = 2423 ] 
14:24:43: [GO18_globalSetVolt]### Host voltage value is set.
14:24:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x063FFEA0>, 0x0, False) , Command count = 2424 ] 
14:24:43: [GO18_globalSetVolt]### Host voltage value is set.
14:24:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2425 ] 
14:24:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2426 ] 
14:24:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2427 ] 
14:24:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216C0>, <py_sfcl.CommandDataDefinition object at 0x06421660>) , Command count = 2428 ] 
14:24:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467BA0>, <py_sfcl.CommandDataDefinition object at 0x064671B0>) , Command count = 2429 ] 
14:24:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:43: [ SetCardRCA(0x1, 0xD555) , Command count = 2430 ] 
14:24:43: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:43: Host Frequency set to 25000 KHz
14:24:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:43: ####CSD Registe 2.0 Values####
14:24:43: CSD_STRUCTURE                                 :0x1
14:24:43: Reserv1                                       :0x0
14:24:43: Time Access 1 TAAC                            :0xe
14:24:43: Time Access 2 NSAC*100                        :0x0
14:24:43: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:43: Card Command Classess CCC                     :0x5b5
14:24:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:43: DSR(driver stage register)  DSR_IMP           :0x0
14:24:43: Reserv2                                       :0x0
14:24:43: Device Size C_SIZE                            :0xedc8
14:24:43: Reserv3                                       :0x0
14:24:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:43: Reserv4                                       :0x0
14:24:43: Write Speed Factor R2W_FACTOR                 :0x2
14:24:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:43: FILE_FORMAT_GRP                               :0x0
14:24:43: COPY flag                                     :0x1
14:24:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:43: File_Format                                   :0x0
14:24:43: CRC                                           :0x0
14:24:43: ####CSD Registe Values####  

14:24:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:43: [GetSCRRegisterEntry] Passed
14:24:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:43: Data_Status_After Erases          : 0
14:24:43: CPRM Security Support             : No Security
14:24:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:43: Spec. Version                     : Version 3.0X
14:24:43: Extended Security Support         : Extended_Security_Not_Supported
14:24:43: Command Support                   : COMMAND_SUPPORT
14:24:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064219C0>, <py_sfcl.CommandDataDefinition object at 0x06467C60>) , Command count = 2431 ] 
14:24:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414A80>, <py_sfcl.CommandDataDefinition object at 0x06467420>) , Command count = 2432 ] 
14:24:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:43: [ SetBusWidth(0x4) , Command count = 2433 ] 
14:24:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B8D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2434 ] 
14:24:43: Protected Area Size 0x28000
14:24:43: Bus Width           2
14:24:43: Secure Mode         0
14:24:43: Speed  Class        4
14:24:43: Perf Move           0
14:24:43: Au Size             9
14:24:43: Erase Size          15
14:24:43: Erase Timeout       1
14:24:43: Erase offset        1
14:24:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2435 ] 
14:24:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:43: Host Frequency set to 100000 KHz
14:24:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:43: ####CSD Registe 2.0 Values####
14:24:43: CSD_STRUCTURE                                 :0x1
14:24:43: Reserv1                                       :0x0
14:24:43: Time Access 1 TAAC                            :0xe
14:24:43: Time Access 2 NSAC*100                        :0x0
14:24:43: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:43: Card Command Classess CCC                     :0x5b5
14:24:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:43: DSR(driver stage register)  DSR_IMP           :0x0
14:24:43: Reserv2                                       :0x0
14:24:43: Device Size C_SIZE                            :0xedc8
14:24:43: Reserv3                                       :0x0
14:24:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:43: Reserv4                                       :0x0
14:24:43: Write Speed Factor R2W_FACTOR                 :0x2
14:24:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:43: FILE_FORMAT_GRP                               :0x0
14:24:43: COPY flag                                     :0x1
14:24:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:43: File_Format                                   :0x0
14:24:43: CRC                                           :0x0
14:24:43: ####CSD Registe Values####  

14:24:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467750>, <py_sfcl.CommandDataDefinition object at 0x064676C0>) , Command count = 2436 ] 
14:24:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467510>, <py_sfcl.CommandDataDefinition object at 0x064675D0>) , Command count = 2437 ] 
14:24:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421B10>, <py_sfcl.PySEnhancedCmdData object at 0x06421B40>, <None>, <py_sfcl.Command23 object at 0x06421810>) , Command count = 2438 ] 
14:24:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 16
14:24:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421C30>, <py_sfcl.PySEnhancedCmdData object at 0x06421C60>, <None>, <py_sfcl.Command23 object at 0x064219F0>) , Command count = 2439 ] 
14:24:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064672A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B5A0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B210>, <None>, <py_sfcl.Command23 object at 0x064213C0>) , Command count = 2440 ] 
14:24:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:43: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:45: Host Frequency set to 25000 KHz
14:24:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:45: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421FC0>, 0x0, True) , Command count = 2441 ] 
14:24:45: [GO18_globalSetVolt]### Host voltage value is set.
14:24:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467C30>, 0x0, False) , Command count = 2442 ] 
14:24:45: [GO18_globalSetVolt]### Host voltage value is set.
14:24:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2443 ] 
14:24:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2444 ] 
14:24:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2445 ] 
14:24:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A060>, <py_sfcl.CommandDataDefinition object at 0x06467930>) , Command count = 2446 ] 
14:24:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A0F0>, <py_sfcl.CommandDataDefinition object at 0x06421F00>) , Command count = 2447 ] 
14:24:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:46: [ SetCardRCA(0x1, 0xD555) , Command count = 2448 ] 
14:24:46: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:46: Host Frequency set to 25000 KHz
14:24:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:46: ####CSD Registe 2.0 Values####
14:24:46: CSD_STRUCTURE                                 :0x1
14:24:46: Reserv1                                       :0x0
14:24:46: Time Access 1 TAAC                            :0xe
14:24:46: Time Access 2 NSAC*100                        :0x0
14:24:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:46: Card Command Classess CCC                     :0x5b5
14:24:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:46: DSR(driver stage register)  DSR_IMP           :0x0
14:24:46: Reserv2                                       :0x0
14:24:46: Device Size C_SIZE                            :0xedc8
14:24:46: Reserv3                                       :0x0
14:24:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:46: Reserv4                                       :0x0
14:24:46: Write Speed Factor R2W_FACTOR                 :0x2
14:24:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:46: FILE_FORMAT_GRP                               :0x0
14:24:46: COPY flag                                     :0x1
14:24:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:46: File_Format                                   :0x0
14:24:46: CRC                                           :0x0
14:24:46: ####CSD Registe Values####  

14:24:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:46: [GetSCRRegisterEntry] Passed
14:24:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:46: Data_Status_After Erases          : 0
14:24:46: CPRM Security Support             : No Security
14:24:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:46: Spec. Version                     : Version 3.0X
14:24:46: Extended Security Support         : Extended_Security_Not_Supported
14:24:46: Command Support                   : COMMAND_SUPPORT
14:24:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A2A0>, <py_sfcl.CommandDataDefinition object at 0x0642A0C0>) , Command count = 2449 ] 
14:24:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FF60>, <py_sfcl.CommandDataDefinition object at 0x06421F30>) , Command count = 2450 ] 
14:24:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:46: [ SetBusWidth(0x4) , Command count = 2451 ] 
14:24:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2452 ] 
14:24:46: Protected Area Size 0x28000
14:24:46: Bus Width           2
14:24:46: Secure Mode         0
14:24:46: Speed  Class        4
14:24:46: Perf Move           0
14:24:46: Au Size             9
14:24:46: Erase Size          15
14:24:46: Erase Timeout       1
14:24:46: Erase offset        1
14:24:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2453 ] 
14:24:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:46: Host Frequency set to 100000 KHz
14:24:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:46: ####CSD Registe 2.0 Values####
14:24:46: CSD_STRUCTURE                                 :0x1
14:24:46: Reserv1                                       :0x0
14:24:46: Time Access 1 TAAC                            :0xe
14:24:46: Time Access 2 NSAC*100                        :0x0
14:24:46: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:46: Card Command Classess CCC                     :0x5b5
14:24:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:46: DSR(driver stage register)  DSR_IMP           :0x0
14:24:46: Reserv2                                       :0x0
14:24:46: Device Size C_SIZE                            :0xedc8
14:24:46: Reserv3                                       :0x0
14:24:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:46: Reserv4                                       :0x0
14:24:46: Write Speed Factor R2W_FACTOR                 :0x2
14:24:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:46: FILE_FORMAT_GRP                               :0x0
14:24:46: COPY flag                                     :0x1
14:24:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:46: File_Format                                   :0x0
14:24:46: CRC                                           :0x0
14:24:46: ####CSD Registe Values####  

14:24:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A090>, <py_sfcl.CommandDataDefinition object at 0x06421D50>) , Command count = 2454 ] 
14:24:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FB40>, <py_sfcl.CommandDataDefinition object at 0x064217B0>) , Command count = 2455 ] 
14:24:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421D80>, <py_sfcl.PySEnhancedCmdData object at 0x06421BA0>, <None>, <py_sfcl.Command23 object at 0x06421300>) , Command count = 2456 ] 
14:24:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 15
14:24:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A510>, <py_sfcl.PySEnhancedCmdData object at 0x0642A540>, <None>, <py_sfcl.Command23 object at 0x06421510>) , Command count = 2457 ] 
14:24:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467B40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BCC0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B390>, <None>, <py_sfcl.Command23 object at 0x06421C90>) , Command count = 2458 ] 
14:24:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:46: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:48: Host Frequency set to 25000 KHz
14:24:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:48: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A8A0>, 0x0, True) , Command count = 2459 ] 
14:24:48: [GO18_globalSetVolt]### Host voltage value is set.
14:24:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x064676F0>, 0x0, False) , Command count = 2460 ] 
14:24:48: [GO18_globalSetVolt]### Host voltage value is set.
14:24:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2461 ] 
14:24:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2462 ] 
14:24:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2463 ] 
14:24:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A840>, <py_sfcl.CommandDataDefinition object at 0x06421D20>) , Command count = 2464 ] 
14:24:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421870>, <py_sfcl.CommandDataDefinition object at 0x06421420>) , Command count = 2465 ] 
14:24:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:48: [ SetCardRCA(0x1, 0xD555) , Command count = 2466 ] 
14:24:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:49: Host Frequency set to 25000 KHz
14:24:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:49: ####CSD Registe 2.0 Values####
14:24:49: CSD_STRUCTURE                                 :0x1
14:24:49: Reserv1                                       :0x0
14:24:49: Time Access 1 TAAC                            :0xe
14:24:49: Time Access 2 NSAC*100                        :0x0
14:24:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:49: Card Command Classess CCC                     :0x5b5
14:24:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:49: DSR(driver stage register)  DSR_IMP           :0x0
14:24:49: Reserv2                                       :0x0
14:24:49: Device Size C_SIZE                            :0xedc8
14:24:49: Reserv3                                       :0x0
14:24:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:49: Reserv4                                       :0x0
14:24:49: Write Speed Factor R2W_FACTOR                 :0x2
14:24:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:49: FILE_FORMAT_GRP                               :0x0
14:24:49: COPY flag                                     :0x1
14:24:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:49: File_Format                                   :0x0
14:24:49: CRC                                           :0x0
14:24:49: ####CSD Registe Values####  

14:24:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:49: [GetSCRRegisterEntry] Passed
14:24:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:49: Data_Status_After Erases          : 0
14:24:49: CPRM Security Support             : No Security
14:24:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:49: Spec. Version                     : Version 3.0X
14:24:49: Extended Security Support         : Extended_Security_Not_Supported
14:24:49: Command Support                   : COMMAND_SUPPORT
14:24:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421840>, <py_sfcl.CommandDataDefinition object at 0x064218D0>) , Command count = 2467 ] 
14:24:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467390>, <py_sfcl.CommandDataDefinition object at 0x0642AA20>) , Command count = 2468 ] 
14:24:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:49: [ SetBusWidth(0x4) , Command count = 2469 ] 
14:24:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2470 ] 
14:24:49: Protected Area Size 0x28000
14:24:49: Bus Width           2
14:24:49: Secure Mode         0
14:24:49: Speed  Class        4
14:24:49: Perf Move           0
14:24:49: Au Size             9
14:24:49: Erase Size          15
14:24:49: Erase Timeout       1
14:24:49: Erase offset        1
14:24:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2471 ] 
14:24:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:49: Host Frequency set to 100000 KHz
14:24:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:49: ####CSD Registe 2.0 Values####
14:24:49: CSD_STRUCTURE                                 :0x1
14:24:49: Reserv1                                       :0x0
14:24:49: Time Access 1 TAAC                            :0xe
14:24:49: Time Access 2 NSAC*100                        :0x0
14:24:49: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:49: Card Command Classess CCC                     :0x5b5
14:24:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:49: DSR(driver stage register)  DSR_IMP           :0x0
14:24:49: Reserv2                                       :0x0
14:24:49: Device Size C_SIZE                            :0xedc8
14:24:49: Reserv3                                       :0x0
14:24:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:49: Reserv4                                       :0x0
14:24:49: Write Speed Factor R2W_FACTOR                 :0x2
14:24:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:49: FILE_FORMAT_GRP                               :0x0
14:24:49: COPY flag                                     :0x1
14:24:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:49: File_Format                                   :0x0
14:24:49: CRC                                           :0x0
14:24:49: ####CSD Registe Values####  

14:24:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064210F0>, <py_sfcl.CommandDataDefinition object at 0x0642AD50>) , Command count = 2472 ] 
14:24:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E8D0>, <py_sfcl.CommandDataDefinition object at 0x064212D0>) , Command count = 2473 ] 
14:24:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC60>, <py_sfcl.PySEnhancedCmdData object at 0x0642AC90>, <None>, <py_sfcl.Command23 object at 0x0642A240>) , Command count = 2474 ] 
14:24:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 14
14:24:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642ADB0>, <py_sfcl.PySEnhancedCmdData object at 0x0642ADE0>, <None>, <py_sfcl.Command23 object at 0x0642A1B0>) , Command count = 2475 ] 
14:24:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F060>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B150>, <py_sfcl.PySEnhancedCmdData object at 0x0645BD20>, <None>, <py_sfcl.Command23 object at 0x0642A690>) , Command count = 2476 ] 
14:24:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:49: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:51: Host Frequency set to 25000 KHz
14:24:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E030>, 0x0, True) , Command count = 2477 ] 
14:24:51: [GO18_globalSetVolt]### Host voltage value is set.
14:24:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467D50>, 0x0, False) , Command count = 2478 ] 
14:24:51: [GO18_globalSetVolt]### Host voltage value is set.
14:24:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2479 ] 
14:24:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2480 ] 
14:24:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2481 ] 
14:24:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E150>, <py_sfcl.CommandDataDefinition object at 0x0642E0F0>) , Command count = 2482 ] 
14:24:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421B70>, <py_sfcl.CommandDataDefinition object at 0x06421CC0>) , Command count = 2483 ] 
14:24:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:51: [ SetCardRCA(0x1, 0xD555) , Command count = 2484 ] 
14:24:51: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:51: Host Frequency set to 25000 KHz
14:24:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:51: ####CSD Registe 2.0 Values####
14:24:51: CSD_STRUCTURE                                 :0x1
14:24:51: Reserv1                                       :0x0
14:24:51: Time Access 1 TAAC                            :0xe
14:24:51: Time Access 2 NSAC*100                        :0x0
14:24:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:51: Card Command Classess CCC                     :0x5b5
14:24:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:51: DSR(driver stage register)  DSR_IMP           :0x0
14:24:51: Reserv2                                       :0x0
14:24:51: Device Size C_SIZE                            :0xedc8
14:24:51: Reserv3                                       :0x0
14:24:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:51: Reserv4                                       :0x0
14:24:51: Write Speed Factor R2W_FACTOR                 :0x2
14:24:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:51: FILE_FORMAT_GRP                               :0x0
14:24:51: COPY flag                                     :0x1
14:24:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:51: File_Format                                   :0x0
14:24:51: CRC                                           :0x0
14:24:51: ####CSD Registe Values####  

14:24:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:51: [GetSCRRegisterEntry] Passed
14:24:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:51: Data_Status_After Erases          : 0
14:24:51: CPRM Security Support             : No Security
14:24:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:51: Spec. Version                     : Version 3.0X
14:24:51: Extended Security Support         : Extended_Security_Not_Supported
14:24:51: Command Support                   : COMMAND_SUPPORT
14:24:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A630>, <py_sfcl.CommandDataDefinition object at 0x0642E420>) , Command count = 2485 ] 
14:24:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FF30>, <py_sfcl.CommandDataDefinition object at 0x0642E180>) , Command count = 2486 ] 
14:24:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:51: [ SetBusWidth(0x4) , Command count = 2487 ] 
14:24:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2488 ] 
14:24:51: Protected Area Size 0x28000
14:24:51: Bus Width           2
14:24:51: Secure Mode         0
14:24:51: Speed  Class        4
14:24:51: Perf Move           0
14:24:51: Au Size             9
14:24:51: Erase Size          15
14:24:51: Erase Timeout       1
14:24:51: Erase offset        1
14:24:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2489 ] 
14:24:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:52: Host Frequency set to 100000 KHz
14:24:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:52: ####CSD Registe 2.0 Values####
14:24:52: CSD_STRUCTURE                                 :0x1
14:24:52: Reserv1                                       :0x0
14:24:52: Time Access 1 TAAC                            :0xe
14:24:52: Time Access 2 NSAC*100                        :0x0
14:24:52: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:52: Card Command Classess CCC                     :0x5b5
14:24:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:52: DSR(driver stage register)  DSR_IMP           :0x0
14:24:52: Reserv2                                       :0x0
14:24:52: Device Size C_SIZE                            :0xedc8
14:24:52: Reserv3                                       :0x0
14:24:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:52: Reserv4                                       :0x0
14:24:52: Write Speed Factor R2W_FACTOR                 :0x2
14:24:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:52: FILE_FORMAT_GRP                               :0x0
14:24:52: COPY flag                                     :0x1
14:24:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:52: File_Format                                   :0x0
14:24:52: CRC                                           :0x0
14:24:52: ####CSD Registe Values####  

14:24:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E210>, <py_sfcl.CommandDataDefinition object at 0x0642AED0>) , Command count = 2490 ] 
14:24:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467D20>, <py_sfcl.CommandDataDefinition object at 0x0642A810>) , Command count = 2491 ] 
14:24:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E330>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642AD20>, <None>, <py_sfcl.Command23 object at 0x0642A120>) , Command count = 2492 ] 
14:24:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 13
14:24:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E690>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6C0>, <None>, <py_sfcl.Command23 object at 0x0642A420>) , Command count = 2493 ] 
14:24:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421180>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B450>, <py_sfcl.PySEnhancedCmdData object at 0x0645BE70>, <None>, <py_sfcl.Command23 object at 0x0642A5D0>) , Command count = 2494 ] 
14:24:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:52: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:54: Host Frequency set to 25000 KHz
14:24:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:54: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EA20>, 0x0, True) , Command count = 2495 ] 
14:24:54: [GO18_globalSetVolt]### Host voltage value is set.
14:24:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421AB0>, 0x0, False) , Command count = 2496 ] 
14:24:54: [GO18_globalSetVolt]### Host voltage value is set.
14:24:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2497 ] 
14:24:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2498 ] 
14:24:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2499 ] 
14:24:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E9C0>, <py_sfcl.CommandDataDefinition object at 0x0642AE70>) , Command count = 2500 ] 
14:24:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A9F0>, <py_sfcl.CommandDataDefinition object at 0x0642A1E0>) , Command count = 2501 ] 
14:24:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:54: [ SetCardRCA(0x1, 0xD555) , Command count = 2502 ] 
14:24:54: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:54: Host Frequency set to 25000 KHz
14:24:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:54: ####CSD Registe 2.0 Values####
14:24:54: CSD_STRUCTURE                                 :0x1
14:24:54: Reserv1                                       :0x0
14:24:54: Time Access 1 TAAC                            :0xe
14:24:54: Time Access 2 NSAC*100                        :0x0
14:24:54: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:54: Card Command Classess CCC                     :0x5b5
14:24:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:54: DSR(driver stage register)  DSR_IMP           :0x0
14:24:54: Reserv2                                       :0x0
14:24:54: Device Size C_SIZE                            :0xedc8
14:24:54: Reserv3                                       :0x0
14:24:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:54: Reserv4                                       :0x0
14:24:54: Write Speed Factor R2W_FACTOR                 :0x2
14:24:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:54: FILE_FORMAT_GRP                               :0x0
14:24:54: COPY flag                                     :0x1
14:24:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:54: File_Format                                   :0x0
14:24:54: CRC                                           :0x0
14:24:54: ####CSD Registe Values####  

14:24:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:54: [GetSCRRegisterEntry] Passed
14:24:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:54: Data_Status_After Erases          : 0
14:24:54: CPRM Security Support             : No Security
14:24:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:54: Spec. Version                     : Version 3.0X
14:24:54: Extended Security Support         : Extended_Security_Not_Supported
14:24:54: Command Support                   : COMMAND_SUPPORT
14:24:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A8D0>, <py_sfcl.CommandDataDefinition object at 0x0642A360>) , Command count = 2503 ] 
14:24:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064672D0>, <py_sfcl.CommandDataDefinition object at 0x0642EAE0>) , Command count = 2504 ] 
14:24:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:54: [ SetBusWidth(0x4) , Command count = 2505 ] 
14:24:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B3C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2506 ] 
14:24:54: Protected Area Size 0x28000
14:24:54: Bus Width           2
14:24:54: Secure Mode         0
14:24:54: Speed  Class        4
14:24:54: Perf Move           0
14:24:54: Au Size             9
14:24:54: Erase Size          15
14:24:54: Erase Timeout       1
14:24:54: Erase offset        1
14:24:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2507 ] 
14:24:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:54: Host Frequency set to 100000 KHz
14:24:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:54: ####CSD Registe 2.0 Values####
14:24:54: CSD_STRUCTURE                                 :0x1
14:24:54: Reserv1                                       :0x0
14:24:54: Time Access 1 TAAC                            :0xe
14:24:54: Time Access 2 NSAC*100                        :0x0
14:24:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:54: Card Command Classess CCC                     :0x5b5
14:24:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:54: DSR(driver stage register)  DSR_IMP           :0x0
14:24:54: Reserv2                                       :0x0
14:24:54: Device Size C_SIZE                            :0xedc8
14:24:54: Reserv3                                       :0x0
14:24:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:54: Reserv4                                       :0x0
14:24:54: Write Speed Factor R2W_FACTOR                 :0x2
14:24:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:54: FILE_FORMAT_GRP                               :0x0
14:24:54: COPY flag                                     :0x1
14:24:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:54: File_Format                                   :0x0
14:24:54: CRC                                           :0x0
14:24:54: ####CSD Registe Values####  

14:24:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ACF0>, <py_sfcl.CommandDataDefinition object at 0x0642AE40>) , Command count = 2508 ] 
14:24:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421600>, <py_sfcl.CommandDataDefinition object at 0x0642AC00>) , Command count = 2509 ] 
14:24:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AF30>, <py_sfcl.PySEnhancedCmdData object at 0x0642A300>, <None>, <py_sfcl.Command23 object at 0x0642ECF0>) , Command count = 2510 ] 
14:24:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 12
14:24:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064310F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642EF30>, <None>, <py_sfcl.Command23 object at 0x0642E9F0>) , Command count = 2511 ] 
14:24:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421A20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BB70>, <py_sfcl.PySEnhancedCmdData object at 0x0645B090>, <None>, <py_sfcl.Command23 object at 0x0642E4B0>) , Command count = 2512 ] 
14:24:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:54: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:56: Host Frequency set to 25000 KHz
14:24:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:56: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431300>, 0x0, True) , Command count = 2513 ] 
14:24:56: [GO18_globalSetVolt]### Host voltage value is set.
14:24:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645B330>, 0x0, False) , Command count = 2514 ] 
14:24:57: [GO18_globalSetVolt]### Host voltage value is set.
14:24:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2515 ] 
14:24:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2516 ] 
14:24:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2517 ] 
14:24:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312A0>, <py_sfcl.CommandDataDefinition object at 0x06431270>) , Command count = 2518 ] 
14:24:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C40B70>, <py_sfcl.CommandDataDefinition object at 0x0642A450>) , Command count = 2519 ] 
14:24:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:57: [ SetCardRCA(0x1, 0xD555) , Command count = 2520 ] 
14:24:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:24:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:57: Host Frequency set to 25000 KHz
14:24:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:57: ####CSD Registe 2.0 Values####
14:24:57: CSD_STRUCTURE                                 :0x1
14:24:57: Reserv1                                       :0x0
14:24:57: Time Access 1 TAAC                            :0xe
14:24:57: Time Access 2 NSAC*100                        :0x0
14:24:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:24:57: Card Command Classess CCC                     :0x5b5
14:24:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:57: DSR(driver stage register)  DSR_IMP           :0x0
14:24:57: Reserv2                                       :0x0
14:24:57: Device Size C_SIZE                            :0xedc8
14:24:57: Reserv3                                       :0x0
14:24:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:57: Reserv4                                       :0x0
14:24:57: Write Speed Factor R2W_FACTOR                 :0x2
14:24:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:57: FILE_FORMAT_GRP                               :0x0
14:24:57: COPY flag                                     :0x1
14:24:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:57: File_Format                                   :0x0
14:24:57: CRC                                           :0x0
14:24:57: ####CSD Registe Values####  

14:24:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:24:57: [GetSCRRegisterEntry] Passed
14:24:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:24:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:24:57: Data_Status_After Erases          : 0
14:24:57: CPRM Security Support             : No Security
14:24:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:24:57: Spec. Version                     : Version 3.0X
14:24:57: Extended Security Support         : Extended_Security_Not_Supported
14:24:57: Command Support                   : COMMAND_SUPPORT
14:24:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:24:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A480>, <py_sfcl.CommandDataDefinition object at 0x0642E8A0>) , Command count = 2521 ] 
14:24:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:24:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467B70>, <py_sfcl.CommandDataDefinition object at 0x064312D0>) , Command count = 2522 ] 
14:24:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:24:57: [ SetBusWidth(0x4) , Command count = 2523 ] 
14:24:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:24:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BC30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2524 ] 
14:24:57: Protected Area Size 0x28000
14:24:57: Bus Width           2
14:24:57: Secure Mode         0
14:24:57: Speed  Class        4
14:24:57: Perf Move           0
14:24:57: Au Size             9
14:24:57: Erase Size          15
14:24:57: Erase Timeout       1
14:24:57: Erase offset        1
14:24:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:24:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:24:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:24:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2525 ] 
14:24:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:24:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:24:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:24:57: Host Frequency set to 100000 KHz
14:24:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:24:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:24:57: ####CSD Registe 2.0 Values####
14:24:57: CSD_STRUCTURE                                 :0x1
14:24:57: Reserv1                                       :0x0
14:24:57: Time Access 1 TAAC                            :0xe
14:24:57: Time Access 2 NSAC*100                        :0x0
14:24:57: Data Transfer Rate TRAN_SPEED                 :0xb
14:24:57: Card Command Classess CCC                     :0x5b5
14:24:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:24:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:24:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:24:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:24:57: DSR(driver stage register)  DSR_IMP           :0x0
14:24:57: Reserv2                                       :0x0
14:24:57: Device Size C_SIZE                            :0xedc8
14:24:57: Reserv3                                       :0x0
14:24:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:24:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:24:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:24:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:24:57: Reserv4                                       :0x0
14:24:57: Write Speed Factor R2W_FACTOR                 :0x2
14:24:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:24:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:24:57: FILE_FORMAT_GRP                               :0x0
14:24:57: COPY flag                                     :0x1
14:24:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:24:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:24:57: File_Format                                   :0x0
14:24:57: CRC                                           :0x0
14:24:57: ####CSD Registe Values####  

14:24:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7BD0>, <py_sfcl.CommandDataDefinition object at 0x05D7E1E0>) , Command count = 2526 ] 
14:24:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:24:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421EA0>, <py_sfcl.CommandDataDefinition object at 0x0642EDE0>) , Command count = 2527 ] 
14:24:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:24:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:24:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642EFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EEA0>, <py_sfcl.PySEnhancedCmdData object at 0x0642E840>, <None>, <py_sfcl.Command23 object at 0x0642ED80>) , Command count = 2528 ] 
14:24:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 11
14:24:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:24:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7C30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431630>, <py_sfcl.PySEnhancedCmdData object at 0x064313C0>, <None>, <py_sfcl.Command23 object at 0x0642E750>) , Command count = 2529 ] 
14:24:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:24:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:24:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645B5D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BEA0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BBA0>, <None>, <py_sfcl.Command23 object at 0x0642E270>) , Command count = 2530 ] 
14:24:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:24:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:24:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:24:59: Host Frequency set to 25000 KHz
14:24:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:24:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:24:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:24:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAD180>, 0x0, True) , Command count = 2531 ] 
14:24:59: [GO18_globalSetVolt]### Host voltage value is set.
14:24:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:24:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E990>, 0x0, False) , Command count = 2532 ] 
14:24:59: [GO18_globalSetVolt]### Host voltage value is set.
14:24:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2533 ] 
14:24:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:24:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2534 ] 
14:24:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:24:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:24:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:24:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:24:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:24:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2535 ] 
14:24:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:24:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:24:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F90>, <py_sfcl.CommandDataDefinition object at 0x05DA7960>) , Command count = 2536 ] 
14:24:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:24:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADD50>, <py_sfcl.CommandDataDefinition object at 0x0642E2A0>) , Command count = 2537 ] 
14:24:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:24:59: [ SetCardRCA(0x1, 0xD555) , Command count = 2538 ] 
14:25:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:00: Host Frequency set to 25000 KHz
14:25:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:00: ####CSD Registe 2.0 Values####
14:25:00: CSD_STRUCTURE                                 :0x1
14:25:00: Reserv1                                       :0x0
14:25:00: Time Access 1 TAAC                            :0xe
14:25:00: Time Access 2 NSAC*100                        :0x0
14:25:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:00: Card Command Classess CCC                     :0x5b5
14:25:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:00: DSR(driver stage register)  DSR_IMP           :0x0
14:25:00: Reserv2                                       :0x0
14:25:00: Device Size C_SIZE                            :0xedc8
14:25:00: Reserv3                                       :0x0
14:25:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:00: Reserv4                                       :0x0
14:25:00: Write Speed Factor R2W_FACTOR                 :0x2
14:25:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:00: FILE_FORMAT_GRP                               :0x0
14:25:00: COPY flag                                     :0x1
14:25:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:00: File_Format                                   :0x0
14:25:00: CRC                                           :0x0
14:25:00: ####CSD Registe Values####  

14:25:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:00: [GetSCRRegisterEntry] Passed
14:25:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:00: Data_Status_After Erases          : 0
14:25:00: CPRM Security Support             : No Security
14:25:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:00: Spec. Version                     : Version 3.0X
14:25:00: Extended Security Support         : Extended_Security_Not_Supported
14:25:00: Command Support                   : COMMAND_SUPPORT
14:25:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8A80>, <py_sfcl.CommandDataDefinition object at 0x06431A80>) , Command count = 2539 ] 
14:25:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421A50>, <py_sfcl.CommandDataDefinition object at 0x0642E450>) , Command count = 2540 ] 
14:25:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:00: [ SetBusWidth(0x4) , Command count = 2541 ] 
14:25:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BBD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2542 ] 
14:25:00: Protected Area Size 0x28000
14:25:00: Bus Width           2
14:25:00: Secure Mode         0
14:25:00: Speed  Class        4
14:25:00: Perf Move           0
14:25:00: Au Size             9
14:25:00: Erase Size          15
14:25:00: Erase Timeout       1
14:25:00: Erase offset        1
14:25:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2543 ] 
14:25:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:00: Host Frequency set to 100000 KHz
14:25:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:00: ####CSD Registe 2.0 Values####
14:25:00: CSD_STRUCTURE                                 :0x1
14:25:00: Reserv1                                       :0x0
14:25:00: Time Access 1 TAAC                            :0xe
14:25:00: Time Access 2 NSAC*100                        :0x0
14:25:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:00: Card Command Classess CCC                     :0x5b5
14:25:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:00: DSR(driver stage register)  DSR_IMP           :0x0
14:25:00: Reserv2                                       :0x0
14:25:00: Device Size C_SIZE                            :0xedc8
14:25:00: Reserv3                                       :0x0
14:25:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:00: Reserv4                                       :0x0
14:25:00: Write Speed Factor R2W_FACTOR                 :0x2
14:25:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:00: FILE_FORMAT_GRP                               :0x0
14:25:00: COPY flag                                     :0x1
14:25:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:00: File_Format                                   :0x0
14:25:00: CRC                                           :0x0
14:25:00: ####CSD Registe Values####  

14:25:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D91180>, <py_sfcl.CommandDataDefinition object at 0x05D91210>) , Command count = 2544 ] 
14:25:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EA50>, <py_sfcl.CommandDataDefinition object at 0x0642E300>) , Command count = 2545 ] 
14:25:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF7E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431660>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6F0>, <None>, <py_sfcl.Command23 object at 0x0642EB40>) , Command count = 2546 ] 
14:25:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 10
14:25:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF810>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431B40>, <py_sfcl.PySEnhancedCmdData object at 0x06431B70>, <None>, <py_sfcl.Command23 object at 0x0642E600>) , Command count = 2547 ] 
14:25:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642ABA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A5A0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B5D0>, <None>, <py_sfcl.Command23 object at 0x0642E720>) , Command count = 2548 ] 
14:25:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:02: Host Frequency set to 25000 KHz
14:25:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:02: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF960>, 0x0, True) , Command count = 2549 ] 
14:25:02: [GO18_globalSetVolt]### Host voltage value is set.
14:25:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431510>, 0x0, False) , Command count = 2550 ] 
14:25:02: [GO18_globalSetVolt]### Host voltage value is set.
14:25:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2551 ] 
14:25:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2552 ] 
14:25:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2553 ] 
14:25:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB10>, <py_sfcl.CommandDataDefinition object at 0x05DA7C60>) , Command count = 2554 ] 
14:25:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFBA0>, <py_sfcl.CommandDataDefinition object at 0x0642E7E0>) , Command count = 2555 ] 
14:25:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:02: [ SetCardRCA(0x1, 0xD555) , Command count = 2556 ] 
14:25:02: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:02: Host Frequency set to 25000 KHz
14:25:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:02: ####CSD Registe 2.0 Values####
14:25:02: CSD_STRUCTURE                                 :0x1
14:25:02: Reserv1                                       :0x0
14:25:02: Time Access 1 TAAC                            :0xe
14:25:02: Time Access 2 NSAC*100                        :0x0
14:25:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:02: Card Command Classess CCC                     :0x5b5
14:25:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:02: DSR(driver stage register)  DSR_IMP           :0x0
14:25:02: Reserv2                                       :0x0
14:25:02: Device Size C_SIZE                            :0xedc8
14:25:02: Reserv3                                       :0x0
14:25:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:02: Reserv4                                       :0x0
14:25:02: Write Speed Factor R2W_FACTOR                 :0x2
14:25:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:02: FILE_FORMAT_GRP                               :0x0
14:25:02: COPY flag                                     :0x1
14:25:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:02: File_Format                                   :0x0
14:25:02: CRC                                           :0x0
14:25:02: ####CSD Registe Values####  

14:25:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:02: [GetSCRRegisterEntry] Passed
14:25:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:02: Data_Status_After Erases          : 0
14:25:02: CPRM Security Support             : No Security
14:25:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:02: Spec. Version                     : Version 3.0X
14:25:02: Extended Security Support         : Extended_Security_Not_Supported
14:25:02: Command Support                   : COMMAND_SUPPORT
14:25:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB40>, <py_sfcl.CommandDataDefinition object at 0x0642ED20>) , Command count = 2557 ] 
14:25:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064314E0>, <py_sfcl.CommandDataDefinition object at 0x06431030>) , Command count = 2558 ] 
14:25:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:02: [ SetBusWidth(0x4) , Command count = 2559 ] 
14:25:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2560 ] 
14:25:02: Protected Area Size 0x28000
14:25:02: Bus Width           2
14:25:02: Secure Mode         0
14:25:02: Speed  Class        4
14:25:02: Perf Move           0
14:25:02: Au Size             9
14:25:02: Erase Size          15
14:25:02: Erase Timeout       1
14:25:02: Erase offset        1
14:25:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2561 ] 
14:25:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:03: Host Frequency set to 100000 KHz
14:25:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:03: ####CSD Registe 2.0 Values####
14:25:03: CSD_STRUCTURE                                 :0x1
14:25:03: Reserv1                                       :0x0
14:25:03: Time Access 1 TAAC                            :0xe
14:25:03: Time Access 2 NSAC*100                        :0x0
14:25:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:03: Card Command Classess CCC                     :0x5b5
14:25:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:03: DSR(driver stage register)  DSR_IMP           :0x0
14:25:03: Reserv2                                       :0x0
14:25:03: Device Size C_SIZE                            :0xedc8
14:25:03: Reserv3                                       :0x0
14:25:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:03: Reserv4                                       :0x0
14:25:03: Write Speed Factor R2W_FACTOR                 :0x2
14:25:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:03: FILE_FORMAT_GRP                               :0x0
14:25:03: COPY flag                                     :0x1
14:25:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:03: File_Format                                   :0x0
14:25:03: CRC                                           :0x0
14:25:03: ####CSD Registe Values####  

14:25:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E14B0>, <py_sfcl.CommandDataDefinition object at 0x05DEFE10>) , Command count = 2562 ] 
14:25:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064145A0>, <py_sfcl.CommandDataDefinition object at 0x0642E0C0>) , Command count = 2563 ] 
14:25:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF60>, <py_sfcl.PySEnhancedCmdData object at 0x0642AA80>, <None>, <py_sfcl.Command23 object at 0x06431F90>) , Command count = 2564 ] 
14:25:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 9
14:25:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DAD3F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431E10>, <py_sfcl.PySEnhancedCmdData object at 0x06431F00>, <None>, <py_sfcl.Command23 object at 0x0642A330>) , Command count = 2565 ] 
14:25:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431120>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431690>, <py_sfcl.PySEnhancedCmdData object at 0x06431900>, <None>, <py_sfcl.Command23 object at 0x064317B0>) , Command count = 2566 ] 
14:25:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:05: Host Frequency set to 25000 KHz
14:25:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x064140F0>, 0x0, True) , Command count = 2567 ] 
14:25:05: [GO18_globalSetVolt]### Host voltage value is set.
14:25:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642ABD0>, 0x0, False) , Command count = 2568 ] 
14:25:05: [GO18_globalSetVolt]### Host voltage value is set.
14:25:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2569 ] 
14:25:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2570 ] 
14:25:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2571 ] 
14:25:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414690>, <py_sfcl.CommandDataDefinition object at 0x06414B40>) , Command count = 2572 ] 
14:25:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431F30>, <py_sfcl.CommandDataDefinition object at 0x064317E0>) , Command count = 2573 ] 
14:25:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:05: [ SetCardRCA(0x1, 0xD555) , Command count = 2574 ] 
14:25:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:05: Host Frequency set to 25000 KHz
14:25:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:05: ####CSD Registe 2.0 Values####
14:25:05: CSD_STRUCTURE                                 :0x1
14:25:05: Reserv1                                       :0x0
14:25:05: Time Access 1 TAAC                            :0xe
14:25:05: Time Access 2 NSAC*100                        :0x0
14:25:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:05: Card Command Classess CCC                     :0x5b5
14:25:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:05: DSR(driver stage register)  DSR_IMP           :0x0
14:25:05: Reserv2                                       :0x0
14:25:05: Device Size C_SIZE                            :0xedc8
14:25:05: Reserv3                                       :0x0
14:25:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:05: Reserv4                                       :0x0
14:25:05: Write Speed Factor R2W_FACTOR                 :0x2
14:25:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:05: FILE_FORMAT_GRP                               :0x0
14:25:05: COPY flag                                     :0x1
14:25:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:05: File_Format                                   :0x0
14:25:05: CRC                                           :0x0
14:25:05: ####CSD Registe Values####  

14:25:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:05: [GetSCRRegisterEntry] Passed
14:25:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:05: Data_Status_After Erases          : 0
14:25:05: CPRM Security Support             : No Security
14:25:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:05: Spec. Version                     : Version 3.0X
14:25:05: Extended Security Support         : Extended_Security_Not_Supported
14:25:05: Command Support                   : COMMAND_SUPPORT
14:25:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414360>, <py_sfcl.CommandDataDefinition object at 0x06431EA0>) , Command count = 2575 ] 
14:25:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064318A0>, <py_sfcl.CommandDataDefinition object at 0x06431870>) , Command count = 2576 ] 
14:25:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:05: [ SetBusWidth(0x4) , Command count = 2577 ] 
14:25:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2578 ] 
14:25:05: Protected Area Size 0x28000
14:25:05: Bus Width           2
14:25:05: Secure Mode         0
14:25:05: Speed  Class        4
14:25:05: Perf Move           0
14:25:05: Au Size             9
14:25:05: Erase Size          15
14:25:05: Erase Timeout       1
14:25:05: Erase offset        1
14:25:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2579 ] 
14:25:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:05: Host Frequency set to 100000 KHz
14:25:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:05: ####CSD Registe 2.0 Values####
14:25:05: CSD_STRUCTURE                                 :0x1
14:25:05: Reserv1                                       :0x0
14:25:05: Time Access 1 TAAC                            :0xe
14:25:05: Time Access 2 NSAC*100                        :0x0
14:25:05: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:05: Card Command Classess CCC                     :0x5b5
14:25:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:05: DSR(driver stage register)  DSR_IMP           :0x0
14:25:05: Reserv2                                       :0x0
14:25:05: Device Size C_SIZE                            :0xedc8
14:25:05: Reserv3                                       :0x0
14:25:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:05: Reserv4                                       :0x0
14:25:05: Write Speed Factor R2W_FACTOR                 :0x2
14:25:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:05: FILE_FORMAT_GRP                               :0x0
14:25:05: COPY flag                                     :0x1
14:25:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:05: File_Format                                   :0x0
14:25:05: CRC                                           :0x0
14:25:05: ####CSD Registe Values####  

14:25:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431960>, <py_sfcl.CommandDataDefinition object at 0x06431AE0>) , Command count = 2580 ] 
14:25:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467450>, <py_sfcl.CommandDataDefinition object at 0x05DE8690>) , Command count = 2581 ] 
14:25:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414300>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F60>, <py_sfcl.PySEnhancedCmdData object at 0x064316C0>, <None>, <py_sfcl.Command23 object at 0x06431DE0>) , Command count = 2582 ] 
14:25:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 8
14:25:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E1060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414900>, <py_sfcl.PySEnhancedCmdData object at 0x06431C60>, <None>, <py_sfcl.Command23 object at 0x06431720>) , Command count = 2583 ] 
14:25:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05D7E2A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E7B0>, <py_sfcl.PySEnhancedCmdData object at 0x06431C90>, <None>, <py_sfcl.Command23 object at 0x06431990>) , Command count = 2584 ] 
14:25:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:05: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:07: Host Frequency set to 25000 KHz
14:25:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:07: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x064517B0>, 0x0, True) , Command count = 2585 ] 
14:25:08: [GO18_globalSetVolt]### Host voltage value is set.
14:25:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E4E0>, 0x0, False) , Command count = 2586 ] 
14:25:08: [GO18_globalSetVolt]### Host voltage value is set.
14:25:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2587 ] 
14:25:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2588 ] 
14:25:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:08: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2589 ] 
14:25:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414DE0>, <py_sfcl.CommandDataDefinition object at 0x06451540>) , Command count = 2590 ] 
14:25:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414060>, <py_sfcl.CommandDataDefinition object at 0x06431840>) , Command count = 2591 ] 
14:25:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:08: [ SetCardRCA(0x1, 0xD555) , Command count = 2592 ] 
14:25:08: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:08: Host Frequency set to 25000 KHz
14:25:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:08: ####CSD Registe 2.0 Values####
14:25:08: CSD_STRUCTURE                                 :0x1
14:25:08: Reserv1                                       :0x0
14:25:08: Time Access 1 TAAC                            :0xe
14:25:08: Time Access 2 NSAC*100                        :0x0
14:25:08: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:08: Card Command Classess CCC                     :0x5b5
14:25:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:08: DSR(driver stage register)  DSR_IMP           :0x0
14:25:08: Reserv2                                       :0x0
14:25:08: Device Size C_SIZE                            :0xedc8
14:25:08: Reserv3                                       :0x0
14:25:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:08: Reserv4                                       :0x0
14:25:08: Write Speed Factor R2W_FACTOR                 :0x2
14:25:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:08: FILE_FORMAT_GRP                               :0x0
14:25:08: COPY flag                                     :0x1
14:25:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:08: File_Format                                   :0x0
14:25:08: CRC                                           :0x0
14:25:08: ####CSD Registe Values####  

14:25:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:08: [GetSCRRegisterEntry] Passed
14:25:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:08: Data_Status_After Erases          : 0
14:25:08: CPRM Security Support             : No Security
14:25:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:08: Spec. Version                     : Version 3.0X
14:25:08: Extended Security Support         : Extended_Security_Not_Supported
14:25:08: Command Support                   : COMMAND_SUPPORT
14:25:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1A80>, <py_sfcl.CommandDataDefinition object at 0x064149F0>) , Command count = 2593 ] 
14:25:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D85F30>, <py_sfcl.CommandDataDefinition object at 0x06451750>) , Command count = 2594 ] 
14:25:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:08: [ SetBusWidth(0x4) , Command count = 2595 ] 
14:25:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2596 ] 
14:25:08: Protected Area Size 0x28000
14:25:08: Bus Width           2
14:25:08: Secure Mode         0
14:25:08: Speed  Class        4
14:25:08: Perf Move           0
14:25:08: Au Size             9
14:25:08: Erase Size          15
14:25:08: Erase Timeout       1
14:25:08: Erase offset        1
14:25:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2597 ] 
14:25:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:08: Host Frequency set to 100000 KHz
14:25:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:08: ####CSD Registe 2.0 Values####
14:25:08: CSD_STRUCTURE                                 :0x1
14:25:08: Reserv1                                       :0x0
14:25:08: Time Access 1 TAAC                            :0xe
14:25:08: Time Access 2 NSAC*100                        :0x0
14:25:08: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:08: Card Command Classess CCC                     :0x5b5
14:25:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:08: DSR(driver stage register)  DSR_IMP           :0x0
14:25:08: Reserv2                                       :0x0
14:25:08: Device Size C_SIZE                            :0xedc8
14:25:08: Reserv3                                       :0x0
14:25:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:08: Reserv4                                       :0x0
14:25:08: Write Speed Factor R2W_FACTOR                 :0x2
14:25:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:08: FILE_FORMAT_GRP                               :0x0
14:25:08: COPY flag                                     :0x1
14:25:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:08: File_Format                                   :0x0
14:25:08: CRC                                           :0x0
14:25:08: ####CSD Registe Values####  

14:25:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431D50>, <py_sfcl.CommandDataDefinition object at 0x06431C00>) , Command count = 2598 ] 
14:25:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8C30>, <py_sfcl.CommandDataDefinition object at 0x0642E870>) , Command count = 2599 ] 
14:25:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E11E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06451870>, <py_sfcl.PySEnhancedCmdData object at 0x06431CC0>, <None>, <py_sfcl.Command23 object at 0x06431A20>) , Command count = 2600 ] 
14:25:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 7
14:25:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06451BD0>, <py_sfcl.PySEnhancedCmdData object at 0x06451B10>, <None>, <py_sfcl.Command23 object at 0x06431D80>) , Command count = 2601 ] 
14:25:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414420>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414FC0>, <py_sfcl.PySEnhancedCmdData object at 0x06414CF0>, <None>, <py_sfcl.Command23 object at 0x064142D0>) , Command count = 2602 ] 
14:25:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:10: Host Frequency set to 25000 KHz
14:25:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x064516C0>, 0x0, True) , Command count = 2603 ] 
14:25:10: [GO18_globalSetVolt]### Host voltage value is set.
14:25:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DA7FC0>, 0x0, False) , Command count = 2604 ] 
14:25:10: [GO18_globalSetVolt]### Host voltage value is set.
14:25:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2605 ] 
14:25:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2606 ] 
14:25:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2607 ] 
14:25:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F120>, <py_sfcl.CommandDataDefinition object at 0x064519C0>) , Command count = 2608 ] 
14:25:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451BA0>, <py_sfcl.CommandDataDefinition object at 0x06431450>) , Command count = 2609 ] 
14:25:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:11: [ SetCardRCA(0x1, 0xD555) , Command count = 2610 ] 
14:25:11: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:11: Host Frequency set to 25000 KHz
14:25:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:11: ####CSD Registe 2.0 Values####
14:25:11: CSD_STRUCTURE                                 :0x1
14:25:11: Reserv1                                       :0x0
14:25:11: Time Access 1 TAAC                            :0xe
14:25:11: Time Access 2 NSAC*100                        :0x0
14:25:11: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:11: Card Command Classess CCC                     :0x5b5
14:25:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:11: DSR(driver stage register)  DSR_IMP           :0x0
14:25:11: Reserv2                                       :0x0
14:25:11: Device Size C_SIZE                            :0xedc8
14:25:11: Reserv3                                       :0x0
14:25:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:11: Reserv4                                       :0x0
14:25:11: Write Speed Factor R2W_FACTOR                 :0x2
14:25:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:11: FILE_FORMAT_GRP                               :0x0
14:25:11: COPY flag                                     :0x1
14:25:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:11: File_Format                                   :0x0
14:25:11: CRC                                           :0x0
14:25:11: ####CSD Registe Values####  

14:25:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:11: [GetSCRRegisterEntry] Passed
14:25:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:11: Data_Status_After Erases          : 0
14:25:11: CPRM Security Support             : No Security
14:25:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:11: Spec. Version                     : Version 3.0X
14:25:11: Extended Security Support         : Extended_Security_Not_Supported
14:25:11: Command Support                   : COMMAND_SUPPORT
14:25:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451780>, <py_sfcl.CommandDataDefinition object at 0x06451D20>) , Command count = 2611 ] 
14:25:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EC00>, <py_sfcl.CommandDataDefinition object at 0x06414C60>) , Command count = 2612 ] 
14:25:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:11: [ SetBusWidth(0x4) , Command count = 2613 ] 
14:25:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2614 ] 
14:25:11: Protected Area Size 0x28000
14:25:11: Bus Width           2
14:25:11: Secure Mode         0
14:25:11: Speed  Class        4
14:25:11: Perf Move           0
14:25:11: Au Size             9
14:25:11: Erase Size          15
14:25:11: Erase Timeout       1
14:25:11: Erase offset        1
14:25:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2615 ] 
14:25:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:11: Host Frequency set to 100000 KHz
14:25:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:11: ####CSD Registe 2.0 Values####
14:25:11: CSD_STRUCTURE                                 :0x1
14:25:11: Reserv1                                       :0x0
14:25:11: Time Access 1 TAAC                            :0xe
14:25:11: Time Access 2 NSAC*100                        :0x0
14:25:11: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:11: Card Command Classess CCC                     :0x5b5
14:25:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:11: DSR(driver stage register)  DSR_IMP           :0x0
14:25:11: Reserv2                                       :0x0
14:25:11: Device Size C_SIZE                            :0xedc8
14:25:11: Reserv3                                       :0x0
14:25:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:11: Reserv4                                       :0x0
14:25:11: Write Speed Factor R2W_FACTOR                 :0x2
14:25:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:11: FILE_FORMAT_GRP                               :0x0
14:25:11: COPY flag                                     :0x1
14:25:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:11: File_Format                                   :0x0
14:25:11: CRC                                           :0x0
14:25:11: ####CSD Registe Values####  

14:25:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451630>, <py_sfcl.CommandDataDefinition object at 0x06451570>) , Command count = 2616 ] 
14:25:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01D7FDB0>, <py_sfcl.CommandDataDefinition object at 0x064143C0>) , Command count = 2617 ] 
14:25:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451EA0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064518A0>, <py_sfcl.PySEnhancedCmdData object at 0x06414600>, <None>, <py_sfcl.Command23 object at 0x064142A0>) , Command count = 2618 ] 
14:25:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 6
14:25:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414A50>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F7B0>, <py_sfcl.PySEnhancedCmdData object at 0x0641F4B0>, <None>, <py_sfcl.Command23 object at 0x06414AE0>) , Command count = 2619 ] 
14:25:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F180>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064319C0>, <py_sfcl.PySEnhancedCmdData object at 0x064313F0>, <None>, <py_sfcl.Command23 object at 0x0641F660>) , Command count = 2620 ] 
14:25:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:13: Host Frequency set to 25000 KHz
14:25:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB10>, 0x0, True) , Command count = 2621 ] 
14:25:13: [GO18_globalSetVolt]### Host voltage value is set.
14:25:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEFAE0>, 0x0, False) , Command count = 2622 ] 
14:25:13: [GO18_globalSetVolt]### Host voltage value is set.
14:25:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2623 ] 
14:25:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2624 ] 
14:25:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2625 ] 
14:25:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FFC0>, <py_sfcl.CommandDataDefinition object at 0x06414DB0>) , Command count = 2626 ] 
14:25:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FCC0>, <py_sfcl.CommandDataDefinition object at 0x06451840>) , Command count = 2627 ] 
14:25:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:13: [ SetCardRCA(0x1, 0xD555) , Command count = 2628 ] 
14:25:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:13: Host Frequency set to 25000 KHz
14:25:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:13: ####CSD Registe 2.0 Values####
14:25:13: CSD_STRUCTURE                                 :0x1
14:25:13: Reserv1                                       :0x0
14:25:13: Time Access 1 TAAC                            :0xe
14:25:13: Time Access 2 NSAC*100                        :0x0
14:25:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:13: Card Command Classess CCC                     :0x5b5
14:25:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:13: DSR(driver stage register)  DSR_IMP           :0x0
14:25:13: Reserv2                                       :0x0
14:25:13: Device Size C_SIZE                            :0xedc8
14:25:13: Reserv3                                       :0x0
14:25:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:13: Reserv4                                       :0x0
14:25:13: Write Speed Factor R2W_FACTOR                 :0x2
14:25:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:13: FILE_FORMAT_GRP                               :0x0
14:25:13: COPY flag                                     :0x1
14:25:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:13: File_Format                                   :0x0
14:25:13: CRC                                           :0x0
14:25:13: ####CSD Registe Values####  

14:25:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:13: [GetSCRRegisterEntry] Passed
14:25:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:13: Data_Status_After Erases          : 0
14:25:13: CPRM Security Support             : No Security
14:25:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:13: Spec. Version                     : Version 3.0X
14:25:13: Extended Security Support         : Extended_Security_Not_Supported
14:25:13: Command Support                   : COMMAND_SUPPORT
14:25:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FB70>, <py_sfcl.CommandDataDefinition object at 0x0641FCF0>) , Command count = 2629 ] 
14:25:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EC60>, <py_sfcl.CommandDataDefinition object at 0x0641FC90>) , Command count = 2630 ] 
14:25:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:13: [ SetBusWidth(0x4) , Command count = 2631 ] 
14:25:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2632 ] 
14:25:13: Protected Area Size 0x28000
14:25:13: Bus Width           2
14:25:13: Secure Mode         0
14:25:13: Speed  Class        4
14:25:13: Perf Move           0
14:25:13: Au Size             9
14:25:13: Erase Size          15
14:25:13: Erase Timeout       1
14:25:13: Erase offset        1
14:25:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2633 ] 
14:25:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:14: Host Frequency set to 100000 KHz
14:25:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:14: ####CSD Registe 2.0 Values####
14:25:14: CSD_STRUCTURE                                 :0x1
14:25:14: Reserv1                                       :0x0
14:25:14: Time Access 1 TAAC                            :0xe
14:25:14: Time Access 2 NSAC*100                        :0x0
14:25:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:14: Card Command Classess CCC                     :0x5b5
14:25:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:14: DSR(driver stage register)  DSR_IMP           :0x0
14:25:14: Reserv2                                       :0x0
14:25:14: Device Size C_SIZE                            :0xedc8
14:25:14: Reserv3                                       :0x0
14:25:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:14: Reserv4                                       :0x0
14:25:14: Write Speed Factor R2W_FACTOR                 :0x2
14:25:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:14: FILE_FORMAT_GRP                               :0x0
14:25:14: COPY flag                                     :0x1
14:25:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:14: File_Format                                   :0x0
14:25:14: CRC                                           :0x0
14:25:14: ####CSD Registe Values####  

14:25:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467060>, <py_sfcl.CommandDataDefinition object at 0x0641FF90>) , Command count = 2634 ] 
14:25:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFA80>, <py_sfcl.CommandDataDefinition object at 0x0641F1B0>) , Command count = 2635 ] 
14:25:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064671E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467210>, <py_sfcl.PySEnhancedCmdData object at 0x06467240>, <None>, <py_sfcl.Command23 object at 0x06431DB0>) , Command count = 2636 ] 
14:25:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 5
14:25:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064670C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064670F0>, <py_sfcl.PySEnhancedCmdData object at 0x06467120>, <None>, <py_sfcl.Command23 object at 0x0641F240>) , Command count = 2637 ] 
14:25:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEFAB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B060>, <py_sfcl.PySEnhancedCmdData object at 0x0645B570>, <None>, <py_sfcl.Command23 object at 0x0641FC00>) , Command count = 2638 ] 
14:25:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:14: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:16: Host Frequency set to 25000 KHz
14:25:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:16: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x064675A0>, 0x0, True) , Command count = 2639 ] 
14:25:16: [GO18_globalSetVolt]### Host voltage value is set.
14:25:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641F150>, 0x0, False) , Command count = 2640 ] 
14:25:16: [GO18_globalSetVolt]### Host voltage value is set.
14:25:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2641 ] 
14:25:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2642 ] 
14:25:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2643 ] 
14:25:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467540>, <py_sfcl.CommandDataDefinition object at 0x064674E0>) , Command count = 2644 ] 
14:25:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467840>, <py_sfcl.CommandDataDefinition object at 0x0641F0C0>) , Command count = 2645 ] 
14:25:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:16: [ SetCardRCA(0x1, 0xD555) , Command count = 2646 ] 
14:25:16: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:16: Host Frequency set to 25000 KHz
14:25:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:16: ####CSD Registe 2.0 Values####
14:25:16: CSD_STRUCTURE                                 :0x1
14:25:16: Reserv1                                       :0x0
14:25:16: Time Access 1 TAAC                            :0xe
14:25:16: Time Access 2 NSAC*100                        :0x0
14:25:16: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:16: Card Command Classess CCC                     :0x5b5
14:25:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:16: DSR(driver stage register)  DSR_IMP           :0x0
14:25:16: Reserv2                                       :0x0
14:25:16: Device Size C_SIZE                            :0xedc8
14:25:16: Reserv3                                       :0x0
14:25:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:16: Reserv4                                       :0x0
14:25:16: Write Speed Factor R2W_FACTOR                 :0x2
14:25:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:16: FILE_FORMAT_GRP                               :0x0
14:25:16: COPY flag                                     :0x1
14:25:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:16: File_Format                                   :0x0
14:25:16: CRC                                           :0x0
14:25:16: ####CSD Registe Values####  

14:25:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:16: [GetSCRRegisterEntry] Passed
14:25:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:16: Data_Status_After Erases          : 0
14:25:16: CPRM Security Support             : No Security
14:25:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:16: Spec. Version                     : Version 3.0X
14:25:16: Extended Security Support         : Extended_Security_Not_Supported
14:25:16: Command Support                   : COMMAND_SUPPORT
14:25:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467660>, <py_sfcl.CommandDataDefinition object at 0x0641FDE0>) , Command count = 2647 ] 
14:25:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064319F0>, <py_sfcl.CommandDataDefinition object at 0x0641FBA0>) , Command count = 2648 ] 
14:25:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:16: [ SetBusWidth(0x4) , Command count = 2649 ] 
14:25:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BDB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2650 ] 
14:25:16: Protected Area Size 0x28000
14:25:16: Bus Width           2
14:25:16: Secure Mode         0
14:25:16: Speed  Class        4
14:25:16: Perf Move           0
14:25:16: Au Size             9
14:25:16: Erase Size          15
14:25:16: Erase Timeout       1
14:25:16: Erase offset        1
14:25:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2651 ] 
14:25:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:16: Host Frequency set to 100000 KHz
14:25:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:16: ####CSD Registe 2.0 Values####
14:25:16: CSD_STRUCTURE                                 :0x1
14:25:16: Reserv1                                       :0x0
14:25:16: Time Access 1 TAAC                            :0xe
14:25:16: Time Access 2 NSAC*100                        :0x0
14:25:16: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:16: Card Command Classess CCC                     :0x5b5
14:25:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:16: DSR(driver stage register)  DSR_IMP           :0x0
14:25:16: Reserv2                                       :0x0
14:25:16: Device Size C_SIZE                            :0xedc8
14:25:16: Reserv3                                       :0x0
14:25:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:16: Reserv4                                       :0x0
14:25:16: Write Speed Factor R2W_FACTOR                 :0x2
14:25:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:16: FILE_FORMAT_GRP                               :0x0
14:25:16: COPY flag                                     :0x1
14:25:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:16: File_Format                                   :0x0
14:25:16: CRC                                           :0x0
14:25:16: ####CSD Registe Values####  

14:25:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F030>, <py_sfcl.CommandDataDefinition object at 0x0641FAE0>) , Command count = 2652 ] 
14:25:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414750>, <py_sfcl.CommandDataDefinition object at 0x06467870>) , Command count = 2653 ] 
14:25:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467990>, <py_sfcl.PySEnhancedCmdData object at 0x064679C0>, <None>, <py_sfcl.Command23 object at 0x0645B690>) , Command count = 2654 ] 
14:25:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 4
14:25:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06467AE0>, <None>, <py_sfcl.Command23 object at 0x0645B840>) , Command count = 2655 ] 
14:25:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645B720>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B2D0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BA80>, <None>, <py_sfcl.Command23 object at 0x06467630>) , Command count = 2656 ] 
14:25:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:19: Host Frequency set to 25000 KHz
14:25:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:19: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467E40>, 0x0, True) , Command count = 2657 ] 
14:25:19: [GO18_globalSetVolt]### Host voltage value is set.
14:25:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x063FFD50>, 0x0, False) , Command count = 2658 ] 
14:25:19: [GO18_globalSetVolt]### Host voltage value is set.
14:25:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2659 ] 
14:25:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2660 ] 
14:25:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2661 ] 
14:25:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F510>, <py_sfcl.CommandDataDefinition object at 0x06467DE0>) , Command count = 2662 ] 
14:25:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467E10>, <py_sfcl.CommandDataDefinition object at 0x06467A20>) , Command count = 2663 ] 
14:25:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:19: [ SetCardRCA(0x1, 0xD555) , Command count = 2664 ] 
14:25:19: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:19: Host Frequency set to 25000 KHz
14:25:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:19: ####CSD Registe 2.0 Values####
14:25:19: CSD_STRUCTURE                                 :0x1
14:25:19: Reserv1                                       :0x0
14:25:19: Time Access 1 TAAC                            :0xe
14:25:19: Time Access 2 NSAC*100                        :0x0
14:25:19: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:19: Card Command Classess CCC                     :0x5b5
14:25:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:19: DSR(driver stage register)  DSR_IMP           :0x0
14:25:19: Reserv2                                       :0x0
14:25:19: Device Size C_SIZE                            :0xedc8
14:25:19: Reserv3                                       :0x0
14:25:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:19: Reserv4                                       :0x0
14:25:19: Write Speed Factor R2W_FACTOR                 :0x2
14:25:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:19: FILE_FORMAT_GRP                               :0x0
14:25:19: COPY flag                                     :0x1
14:25:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:19: File_Format                                   :0x0
14:25:19: CRC                                           :0x0
14:25:19: ####CSD Registe Values####  

14:25:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:19: [GetSCRRegisterEntry] Passed
14:25:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:19: Data_Status_After Erases          : 0
14:25:19: CPRM Security Support             : No Security
14:25:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:19: Spec. Version                     : Version 3.0X
14:25:19: Extended Security Support         : Extended_Security_Not_Supported
14:25:19: Command Support                   : COMMAND_SUPPORT
14:25:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421030>, <py_sfcl.CommandDataDefinition object at 0x06467F00>) , Command count = 2665 ] 
14:25:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414630>, <py_sfcl.CommandDataDefinition object at 0x06467690>) , Command count = 2666 ] 
14:25:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:19: [ SetBusWidth(0x4) , Command count = 2667 ] 
14:25:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2668 ] 
14:25:19: Protected Area Size 0x28000
14:25:19: Bus Width           2
14:25:19: Secure Mode         0
14:25:19: Speed  Class        4
14:25:19: Perf Move           0
14:25:19: Au Size             9
14:25:19: Erase Size          15
14:25:19: Erase Timeout       1
14:25:19: Erase offset        1
14:25:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2669 ] 
14:25:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:19: Host Frequency set to 100000 KHz
14:25:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:19: ####CSD Registe 2.0 Values####
14:25:19: CSD_STRUCTURE                                 :0x1
14:25:19: Reserv1                                       :0x0
14:25:19: Time Access 1 TAAC                            :0xe
14:25:19: Time Access 2 NSAC*100                        :0x0
14:25:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:19: Card Command Classess CCC                     :0x5b5
14:25:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:19: DSR(driver stage register)  DSR_IMP           :0x0
14:25:19: Reserv2                                       :0x0
14:25:19: Device Size C_SIZE                            :0xedc8
14:25:19: Reserv3                                       :0x0
14:25:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:19: Reserv4                                       :0x0
14:25:19: Write Speed Factor R2W_FACTOR                 :0x2
14:25:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:19: FILE_FORMAT_GRP                               :0x0
14:25:19: COPY flag                                     :0x1
14:25:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:19: File_Format                                   :0x0
14:25:19: CRC                                           :0x0
14:25:19: ####CSD Registe Values####  

14:25:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F330>, <py_sfcl.CommandDataDefinition object at 0x06467F90>) , Command count = 2670 ] 
14:25:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F300>, <py_sfcl.CommandDataDefinition object at 0x06467030>) , Command count = 2671 ] 
14:25:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064212A0>, <py_sfcl.PySEnhancedCmdData object at 0x06467C00>, <None>, <py_sfcl.Command23 object at 0x06467570>) , Command count = 2672 ] 
14:25:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 3
14:25:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421360>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421390>, <py_sfcl.PySEnhancedCmdData object at 0x064679F0>, <None>, <py_sfcl.Command23 object at 0x064674B0>) , Command count = 2673 ] 
14:25:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641FC60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BAE0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B7B0>, <None>, <py_sfcl.Command23 object at 0x06467BD0>) , Command count = 2674 ] 
14:25:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:21: Host Frequency set to 25000 KHz
14:25:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421720>, 0x0, True) , Command count = 2675 ] 
14:25:21: [GO18_globalSetVolt]### Host voltage value is set.
14:25:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451FC0>, 0x0, False) , Command count = 2676 ] 
14:25:21: [GO18_globalSetVolt]### Host voltage value is set.
14:25:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2677 ] 
14:25:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2678 ] 
14:25:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2679 ] 
14:25:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216C0>, <py_sfcl.CommandDataDefinition object at 0x06421660>) , Command count = 2680 ] 
14:25:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467480>, <py_sfcl.CommandDataDefinition object at 0x06467330>) , Command count = 2681 ] 
14:25:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:22: [ SetCardRCA(0x1, 0xD555) , Command count = 2682 ] 
14:25:22: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:22: Host Frequency set to 25000 KHz
14:25:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:22: ####CSD Registe 2.0 Values####
14:25:22: CSD_STRUCTURE                                 :0x1
14:25:22: Reserv1                                       :0x0
14:25:22: Time Access 1 TAAC                            :0xe
14:25:22: Time Access 2 NSAC*100                        :0x0
14:25:22: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:22: Card Command Classess CCC                     :0x5b5
14:25:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:22: DSR(driver stage register)  DSR_IMP           :0x0
14:25:22: Reserv2                                       :0x0
14:25:22: Device Size C_SIZE                            :0xedc8
14:25:22: Reserv3                                       :0x0
14:25:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:22: Reserv4                                       :0x0
14:25:22: Write Speed Factor R2W_FACTOR                 :0x2
14:25:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:22: FILE_FORMAT_GRP                               :0x0
14:25:22: COPY flag                                     :0x1
14:25:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:22: File_Format                                   :0x0
14:25:22: CRC                                           :0x0
14:25:22: ####CSD Registe Values####  

14:25:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:22: [GetSCRRegisterEntry] Passed
14:25:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:22: Data_Status_After Erases          : 0
14:25:22: CPRM Security Support             : No Security
14:25:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:22: Spec. Version                     : Version 3.0X
14:25:22: Extended Security Support         : Extended_Security_Not_Supported
14:25:22: Command Support                   : COMMAND_SUPPORT
14:25:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064219C0>, <py_sfcl.CommandDataDefinition object at 0x06467C60>) , Command count = 2683 ] 
14:25:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414450>, <py_sfcl.CommandDataDefinition object at 0x064671B0>) , Command count = 2684 ] 
14:25:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:22: [ SetBusWidth(0x4) , Command count = 2685 ] 
14:25:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2686 ] 
14:25:22: Protected Area Size 0x28000
14:25:22: Bus Width           2
14:25:22: Secure Mode         0
14:25:22: Speed  Class        4
14:25:22: Perf Move           0
14:25:22: Au Size             9
14:25:22: Erase Size          15
14:25:22: Erase Timeout       1
14:25:22: Erase offset        1
14:25:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2687 ] 
14:25:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:22: Host Frequency set to 100000 KHz
14:25:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:22: ####CSD Registe 2.0 Values####
14:25:22: CSD_STRUCTURE                                 :0x1
14:25:22: Reserv1                                       :0x0
14:25:22: Time Access 1 TAAC                            :0xe
14:25:22: Time Access 2 NSAC*100                        :0x0
14:25:22: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:22: Card Command Classess CCC                     :0x5b5
14:25:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:22: DSR(driver stage register)  DSR_IMP           :0x0
14:25:22: Reserv2                                       :0x0
14:25:22: Device Size C_SIZE                            :0xedc8
14:25:22: Reserv3                                       :0x0
14:25:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:22: Reserv4                                       :0x0
14:25:22: Write Speed Factor R2W_FACTOR                 :0x2
14:25:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:22: FILE_FORMAT_GRP                               :0x0
14:25:22: COPY flag                                     :0x1
14:25:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:22: File_Format                                   :0x0
14:25:22: CRC                                           :0x0
14:25:22: ####CSD Registe Values####  

14:25:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467750>, <py_sfcl.CommandDataDefinition object at 0x064676C0>) , Command count = 2688 ] 
14:25:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064673C0>, <py_sfcl.CommandDataDefinition object at 0x064211E0>) , Command count = 2689 ] 
14:25:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421B10>, <py_sfcl.PySEnhancedCmdData object at 0x06421B40>, <None>, <py_sfcl.Command23 object at 0x06421270>) , Command count = 2690 ] 
14:25:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 2
14:25:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421C30>, <py_sfcl.PySEnhancedCmdData object at 0x06421C60>, <None>, <py_sfcl.Command23 object at 0x06421810>) , Command count = 2691 ] 
14:25:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFEA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BB10>, <py_sfcl.PySEnhancedCmdData object at 0x0645BAE0>, <None>, <py_sfcl.Command23 object at 0x064219F0>) , Command count = 2692 ] 
14:25:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:24: Host Frequency set to 25000 KHz
14:25:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:24: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421FC0>, 0x0, True) , Command count = 2693 ] 
14:25:24: [GO18_globalSetVolt]### Host voltage value is set.
14:25:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x064678A0>, 0x0, False) , Command count = 2694 ] 
14:25:24: [GO18_globalSetVolt]### Host voltage value is set.
14:25:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2695 ] 
14:25:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2696 ] 
14:25:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2697 ] 
14:25:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A060>, <py_sfcl.CommandDataDefinition object at 0x06421F60>) , Command count = 2698 ] 
14:25:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A030>, <py_sfcl.CommandDataDefinition object at 0x064675D0>) , Command count = 2699 ] 
14:25:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:24: [ SetCardRCA(0x1, 0xD555) , Command count = 2700 ] 
14:25:24: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:24: Host Frequency set to 25000 KHz
14:25:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:24: ####CSD Registe 2.0 Values####
14:25:24: CSD_STRUCTURE                                 :0x1
14:25:24: Reserv1                                       :0x0
14:25:24: Time Access 1 TAAC                            :0xe
14:25:24: Time Access 2 NSAC*100                        :0x0
14:25:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:24: Card Command Classess CCC                     :0x5b5
14:25:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:24: DSR(driver stage register)  DSR_IMP           :0x0
14:25:24: Reserv2                                       :0x0
14:25:24: Device Size C_SIZE                            :0xedc8
14:25:24: Reserv3                                       :0x0
14:25:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:24: Reserv4                                       :0x0
14:25:24: Write Speed Factor R2W_FACTOR                 :0x2
14:25:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:24: FILE_FORMAT_GRP                               :0x0
14:25:24: COPY flag                                     :0x1
14:25:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:24: File_Format                                   :0x0
14:25:24: CRC                                           :0x0
14:25:24: ####CSD Registe Values####  

14:25:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:24: [GetSCRRegisterEntry] Passed
14:25:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:24: Data_Status_After Erases          : 0
14:25:24: CPRM Security Support             : No Security
14:25:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:24: Spec. Version                     : Version 3.0X
14:25:24: Extended Security Support         : Extended_Security_Not_Supported
14:25:24: Command Support                   : COMMAND_SUPPORT
14:25:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A2A0>, <py_sfcl.CommandDataDefinition object at 0x0642A0C0>) , Command count = 2701 ] 
14:25:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FAB0>, <py_sfcl.CommandDataDefinition object at 0x06421F00>) , Command count = 2702 ] 
14:25:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:24: [ SetBusWidth(0x4) , Command count = 2703 ] 
14:25:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2704 ] 
14:25:24: Protected Area Size 0x28000
14:25:24: Bus Width           2
14:25:24: Secure Mode         0
14:25:24: Speed  Class        4
14:25:24: Perf Move           0
14:25:24: Au Size             9
14:25:24: Erase Size          15
14:25:24: Erase Timeout       1
14:25:24: Erase offset        1
14:25:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2705 ] 
14:25:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:25: Host Frequency set to 100000 KHz
14:25:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:25: ####CSD Registe 2.0 Values####
14:25:25: CSD_STRUCTURE                                 :0x1
14:25:25: Reserv1                                       :0x0
14:25:25: Time Access 1 TAAC                            :0xe
14:25:25: Time Access 2 NSAC*100                        :0x0
14:25:25: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:25: Card Command Classess CCC                     :0x5b5
14:25:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:25: DSR(driver stage register)  DSR_IMP           :0x0
14:25:25: Reserv2                                       :0x0
14:25:25: Device Size C_SIZE                            :0xedc8
14:25:25: Reserv3                                       :0x0
14:25:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:25: Reserv4                                       :0x0
14:25:25: Write Speed Factor R2W_FACTOR                 :0x2
14:25:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:25: FILE_FORMAT_GRP                               :0x0
14:25:25: COPY flag                                     :0x1
14:25:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:25: File_Format                                   :0x0
14:25:25: CRC                                           :0x0
14:25:25: ####CSD Registe Values####  

14:25:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A090>, <py_sfcl.CommandDataDefinition object at 0x06421D50>) , Command count = 2706 ] 
14:25:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064672A0>, <py_sfcl.CommandDataDefinition object at 0x064213C0>) , Command count = 2707 ] 
14:25:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421D80>, <py_sfcl.PySEnhancedCmdData object at 0x06421BA0>, <None>, <py_sfcl.Command23 object at 0x064214E0>) , Command count = 2708 ] 
14:25:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 1
14:25:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A510>, <py_sfcl.PySEnhancedCmdData object at 0x0642A540>, <None>, <py_sfcl.Command23 object at 0x06421300>) , Command count = 2709 ] 
14:25:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467C30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BC00>, <py_sfcl.PySEnhancedCmdData object at 0x0645B210>, <None>, <py_sfcl.Command23 object at 0x06421510>) , Command count = 2710 ] 
14:25:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:25: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:27: Host Frequency set to 25000 KHz
14:25:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A8A0>, 0x0, True) , Command count = 2711 ] 
14:25:27: [GO18_globalSetVolt]### Host voltage value is set.
14:25:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467B10>, 0x0, False) , Command count = 2712 ] 
14:25:27: [GO18_globalSetVolt]### Host voltage value is set.
14:25:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2713 ] 
14:25:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2714 ] 
14:25:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2715 ] 
14:25:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A840>, <py_sfcl.CommandDataDefinition object at 0x06421D20>) , Command count = 2716 ] 
14:25:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421750>, <py_sfcl.CommandDataDefinition object at 0x064217B0>) , Command count = 2717 ] 
14:25:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:27: [ SetCardRCA(0x1, 0xD555) , Command count = 2718 ] 
14:25:27: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:27: Host Frequency set to 25000 KHz
14:25:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:27: ####CSD Registe 2.0 Values####
14:25:27: CSD_STRUCTURE                                 :0x1
14:25:27: Reserv1                                       :0x0
14:25:27: Time Access 1 TAAC                            :0xe
14:25:27: Time Access 2 NSAC*100                        :0x0
14:25:27: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:27: Card Command Classess CCC                     :0x5b5
14:25:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:27: DSR(driver stage register)  DSR_IMP           :0x0
14:25:27: Reserv2                                       :0x0
14:25:27: Device Size C_SIZE                            :0xedc8
14:25:27: Reserv3                                       :0x0
14:25:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:27: Reserv4                                       :0x0
14:25:27: Write Speed Factor R2W_FACTOR                 :0x2
14:25:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:27: FILE_FORMAT_GRP                               :0x0
14:25:27: COPY flag                                     :0x1
14:25:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:27: File_Format                                   :0x0
14:25:27: CRC                                           :0x0
14:25:27: ####CSD Registe Values####  

14:25:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:27: [GetSCRRegisterEntry] Passed
14:25:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:27: Data_Status_After Erases          : 0
14:25:27: CPRM Security Support             : No Security
14:25:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:27: Spec. Version                     : Version 3.0X
14:25:27: Extended Security Support         : Extended_Security_Not_Supported
14:25:27: Command Support                   : COMMAND_SUPPORT
14:25:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421840>, <py_sfcl.CommandDataDefinition object at 0x064218D0>) , Command count = 2719 ] 
14:25:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FE70>, <py_sfcl.CommandDataDefinition object at 0x0642A960>) , Command count = 2720 ] 
14:25:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:27: [ SetBusWidth(0x4) , Command count = 2721 ] 
14:25:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2722 ] 
14:25:27: Protected Area Size 0x28000
14:25:27: Bus Width           2
14:25:27: Secure Mode         0
14:25:27: Speed  Class        4
14:25:27: Perf Move           0
14:25:27: Au Size             9
14:25:27: Erase Size          15
14:25:27: Erase Timeout       1
14:25:27: Erase offset        1
14:25:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2723 ] 
14:25:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:27: Host Frequency set to 100000 KHz
14:25:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:27: ####CSD Registe 2.0 Values####
14:25:27: CSD_STRUCTURE                                 :0x1
14:25:27: Reserv1                                       :0x0
14:25:27: Time Access 1 TAAC                            :0xe
14:25:27: Time Access 2 NSAC*100                        :0x0
14:25:27: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:27: Card Command Classess CCC                     :0x5b5
14:25:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:27: DSR(driver stage register)  DSR_IMP           :0x0
14:25:27: Reserv2                                       :0x0
14:25:27: Device Size C_SIZE                            :0xedc8
14:25:27: Reserv3                                       :0x0
14:25:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:27: Reserv4                                       :0x0
14:25:27: Write Speed Factor R2W_FACTOR                 :0x2
14:25:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:27: FILE_FORMAT_GRP                               :0x0
14:25:27: COPY flag                                     :0x1
14:25:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:27: File_Format                                   :0x0
14:25:27: CRC                                           :0x0
14:25:27: ####CSD Registe Values####  

14:25:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064210F0>, <py_sfcl.CommandDataDefinition object at 0x0642AD50>) , Command count = 2724 ] 
14:25:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467B40>, <py_sfcl.CommandDataDefinition object at 0x06421C90>) , Command count = 2725 ] 
14:25:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC60>, <py_sfcl.PySEnhancedCmdData object at 0x0642AC90>, <None>, <py_sfcl.Command23 object at 0x0642A180>) , Command count = 2726 ] 
14:25:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Outer loop Count 1019
14:25:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 29
14:25:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642ADB0>, <py_sfcl.PySEnhancedCmdData object at 0x0642ADE0>, <None>, <py_sfcl.Command23 object at 0x0642A240>) , Command count = 2727 ] 
14:25:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064676F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B6C0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B390>, <None>, <py_sfcl.Command23 object at 0x0642A1B0>) , Command count = 2728 ] 
14:25:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:30: Host Frequency set to 25000 KHz
14:25:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:30: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E030>, 0x0, True) , Command count = 2729 ] 
14:25:30: [GO18_globalSetVolt]### Host voltage value is set.
14:25:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x064678D0>, 0x0, False) , Command count = 2730 ] 
14:25:30: [GO18_globalSetVolt]### Host voltage value is set.
14:25:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2731 ] 
14:25:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2732 ] 
14:25:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2733 ] 
14:25:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E150>, <py_sfcl.CommandDataDefinition object at 0x0642E0F0>) , Command count = 2734 ] 
14:25:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421780>, <py_sfcl.CommandDataDefinition object at 0x064212D0>) , Command count = 2735 ] 
14:25:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:30: [ SetCardRCA(0x1, 0xD555) , Command count = 2736 ] 
14:25:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:30: Host Frequency set to 25000 KHz
14:25:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:30: ####CSD Registe 2.0 Values####
14:25:30: CSD_STRUCTURE                                 :0x1
14:25:30: Reserv1                                       :0x0
14:25:30: Time Access 1 TAAC                            :0xe
14:25:30: Time Access 2 NSAC*100                        :0x0
14:25:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:30: Card Command Classess CCC                     :0x5b5
14:25:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:30: DSR(driver stage register)  DSR_IMP           :0x0
14:25:30: Reserv2                                       :0x0
14:25:30: Device Size C_SIZE                            :0xedc8
14:25:30: Reserv3                                       :0x0
14:25:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:30: Reserv4                                       :0x0
14:25:30: Write Speed Factor R2W_FACTOR                 :0x2
14:25:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:30: FILE_FORMAT_GRP                               :0x0
14:25:30: COPY flag                                     :0x1
14:25:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:30: File_Format                                   :0x0
14:25:30: CRC                                           :0x0
14:25:30: ####CSD Registe Values####  

14:25:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:30: [GetSCRRegisterEntry] Passed
14:25:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:30: Data_Status_After Erases          : 0
14:25:30: CPRM Security Support             : No Security
14:25:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:30: Spec. Version                     : Version 3.0X
14:25:30: Extended Security Support         : Extended_Security_Not_Supported
14:25:30: Command Support                   : COMMAND_SUPPORT
14:25:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A630>, <py_sfcl.CommandDataDefinition object at 0x06421CC0>) , Command count = 2737 ] 
14:25:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467780>, <py_sfcl.CommandDataDefinition object at 0x0642E1B0>) , Command count = 2738 ] 
14:25:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:30: [ SetBusWidth(0x4) , Command count = 2739 ] 
14:25:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B8D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2740 ] 
14:25:30: Protected Area Size 0x28000
14:25:30: Bus Width           2
14:25:30: Secure Mode         0
14:25:30: Speed  Class        4
14:25:30: Perf Move           0
14:25:30: Au Size             9
14:25:30: Erase Size          15
14:25:30: Erase Timeout       1
14:25:30: Erase offset        1
14:25:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2741 ] 
14:25:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:30: Host Frequency set to 100000 KHz
14:25:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:30: ####CSD Registe 2.0 Values####
14:25:30: CSD_STRUCTURE                                 :0x1
14:25:30: Reserv1                                       :0x0
14:25:30: Time Access 1 TAAC                            :0xe
14:25:30: Time Access 2 NSAC*100                        :0x0
14:25:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:30: Card Command Classess CCC                     :0x5b5
14:25:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:30: DSR(driver stage register)  DSR_IMP           :0x0
14:25:30: Reserv2                                       :0x0
14:25:30: Device Size C_SIZE                            :0xedc8
14:25:30: Reserv3                                       :0x0
14:25:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:30: Reserv4                                       :0x0
14:25:30: Write Speed Factor R2W_FACTOR                 :0x2
14:25:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:30: FILE_FORMAT_GRP                               :0x0
14:25:30: COPY flag                                     :0x1
14:25:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:30: File_Format                                   :0x0
14:25:30: CRC                                           :0x0
14:25:30: ####CSD Registe Values####  

14:25:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E210>, <py_sfcl.CommandDataDefinition object at 0x0642E180>) , Command count = 2742 ] 
14:25:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F060>, <py_sfcl.CommandDataDefinition object at 0x0642A690>) , Command count = 2743 ] 
14:25:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E330>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642AD20>, <None>, <py_sfcl.Command23 object at 0x0642AB70>) , Command count = 2744 ] 
14:25:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 28
14:25:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E690>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6C0>, <None>, <py_sfcl.Command23 object at 0x0642A120>) , Command count = 2745 ] 
14:25:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467D50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B660>, <py_sfcl.PySEnhancedCmdData object at 0x0645BD20>, <None>, <py_sfcl.Command23 object at 0x0642A420>) , Command count = 2746 ] 
14:25:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:32: Host Frequency set to 25000 KHz
14:25:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:32: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EA20>, 0x0, True) , Command count = 2747 ] 
14:25:32: [GO18_globalSetVolt]### Host voltage value is set.
14:25:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x064211B0>, 0x0, False) , Command count = 2748 ] 
14:25:32: [GO18_globalSetVolt]### Host voltage value is set.
14:25:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2749 ] 
14:25:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2750 ] 
14:25:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2751 ] 
14:25:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E9C0>, <py_sfcl.CommandDataDefinition object at 0x0642AE70>) , Command count = 2752 ] 
14:25:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AF60>, <py_sfcl.CommandDataDefinition object at 0x0642A810>) , Command count = 2753 ] 
14:25:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:33: [ SetCardRCA(0x1, 0xD555) , Command count = 2754 ] 
14:25:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:33: Host Frequency set to 25000 KHz
14:25:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:33: ####CSD Registe 2.0 Values####
14:25:33: CSD_STRUCTURE                                 :0x1
14:25:33: Reserv1                                       :0x0
14:25:33: Time Access 1 TAAC                            :0xe
14:25:33: Time Access 2 NSAC*100                        :0x0
14:25:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:33: Card Command Classess CCC                     :0x5b5
14:25:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:33: DSR(driver stage register)  DSR_IMP           :0x0
14:25:33: Reserv2                                       :0x0
14:25:33: Device Size C_SIZE                            :0xedc8
14:25:33: Reserv3                                       :0x0
14:25:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:33: Reserv4                                       :0x0
14:25:33: Write Speed Factor R2W_FACTOR                 :0x2
14:25:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:33: FILE_FORMAT_GRP                               :0x0
14:25:33: COPY flag                                     :0x1
14:25:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:33: File_Format                                   :0x0
14:25:33: CRC                                           :0x0
14:25:33: ####CSD Registe Values####  

14:25:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:33: [GetSCRRegisterEntry] Passed
14:25:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:33: Data_Status_After Erases          : 0
14:25:33: CPRM Security Support             : No Security
14:25:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:33: Spec. Version                     : Version 3.0X
14:25:33: Extended Security Support         : Extended_Security_Not_Supported
14:25:33: Command Support                   : COMMAND_SUPPORT
14:25:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ECC0>, <py_sfcl.CommandDataDefinition object at 0x0642A8D0>) , Command count = 2755 ] 
14:25:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421090>, <py_sfcl.CommandDataDefinition object at 0x0642A1E0>) , Command count = 2756 ] 
14:25:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:33: [ SetBusWidth(0x4) , Command count = 2757 ] 
14:25:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2758 ] 
14:25:33: Protected Area Size 0x28000
14:25:33: Bus Width           2
14:25:33: Secure Mode         0
14:25:33: Speed  Class        4
14:25:33: Perf Move           0
14:25:33: Au Size             9
14:25:33: Erase Size          15
14:25:33: Erase Timeout       1
14:25:33: Erase offset        1
14:25:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2759 ] 
14:25:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:33: Host Frequency set to 100000 KHz
14:25:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:33: ####CSD Registe 2.0 Values####
14:25:33: CSD_STRUCTURE                                 :0x1
14:25:33: Reserv1                                       :0x0
14:25:33: Time Access 1 TAAC                            :0xe
14:25:33: Time Access 2 NSAC*100                        :0x0
14:25:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:33: Card Command Classess CCC                     :0x5b5
14:25:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:33: DSR(driver stage register)  DSR_IMP           :0x0
14:25:33: Reserv2                                       :0x0
14:25:33: Device Size C_SIZE                            :0xedc8
14:25:33: Reserv3                                       :0x0
14:25:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:33: Reserv4                                       :0x0
14:25:33: Write Speed Factor R2W_FACTOR                 :0x2
14:25:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:33: FILE_FORMAT_GRP                               :0x0
14:25:33: COPY flag                                     :0x1
14:25:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:33: File_Format                                   :0x0
14:25:33: CRC                                           :0x0
14:25:33: ####CSD Registe Values####  

14:25:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EED0>, <py_sfcl.CommandDataDefinition object at 0x0642ACF0>) , Command count = 2760 ] 
14:25:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421180>, <py_sfcl.CommandDataDefinition object at 0x0642E960>) , Command count = 2761 ] 
14:25:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642ECF0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EB10>, <py_sfcl.PySEnhancedCmdData object at 0x0642A660>, <None>, <py_sfcl.Command23 object at 0x0642A300>) , Command count = 2762 ] 
14:25:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 27
14:25:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064310F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642EF30>, <None>, <py_sfcl.Command23 object at 0x0642AF30>) , Command count = 2763 ] 
14:25:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BD80>, <py_sfcl.PySEnhancedCmdData object at 0x0645BE70>, <None>, <py_sfcl.Command23 object at 0x0642E9F0>) , Command count = 2764 ] 
14:25:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:33: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:35: Host Frequency set to 25000 KHz
14:25:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431300>, 0x0, True) , Command count = 2765 ] 
14:25:35: [GO18_globalSetVolt]### Host voltage value is set.
14:25:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FE10>, 0x0, False) , Command count = 2766 ] 
14:25:35: [GO18_globalSetVolt]### Host voltage value is set.
14:25:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2767 ] 
14:25:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2768 ] 
14:25:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2769 ] 
14:25:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312A0>, <py_sfcl.CommandDataDefinition object at 0x06431270>) , Command count = 2770 ] 
14:25:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A7B0>, <py_sfcl.CommandDataDefinition object at 0x0642A3C0>) , Command count = 2771 ] 
14:25:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:35: [ SetCardRCA(0x1, 0xD555) , Command count = 2772 ] 
14:25:35: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:35: Host Frequency set to 25000 KHz
14:25:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:35: ####CSD Registe 2.0 Values####
14:25:35: CSD_STRUCTURE                                 :0x1
14:25:35: Reserv1                                       :0x0
14:25:35: Time Access 1 TAAC                            :0xe
14:25:35: Time Access 2 NSAC*100                        :0x0
14:25:35: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:35: Card Command Classess CCC                     :0x5b5
14:25:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:35: DSR(driver stage register)  DSR_IMP           :0x0
14:25:35: Reserv2                                       :0x0
14:25:35: Device Size C_SIZE                            :0xedc8
14:25:35: Reserv3                                       :0x0
14:25:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:35: Reserv4                                       :0x0
14:25:35: Write Speed Factor R2W_FACTOR                 :0x2
14:25:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:35: FILE_FORMAT_GRP                               :0x0
14:25:35: COPY flag                                     :0x1
14:25:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:35: File_Format                                   :0x0
14:25:35: CRC                                           :0x0
14:25:35: ####CSD Registe Values####  

14:25:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:35: [GetSCRRegisterEntry] Passed
14:25:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:35: Data_Status_After Erases          : 0
14:25:35: CPRM Security Support             : No Security
14:25:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:35: Spec. Version                     : Version 3.0X
14:25:35: Extended Security Support         : Extended_Security_Not_Supported
14:25:35: Command Support                   : COMMAND_SUPPORT
14:25:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E8A0>, <py_sfcl.CommandDataDefinition object at 0x0642A480>) , Command count = 2773 ] 
14:25:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421480>, <py_sfcl.CommandDataDefinition object at 0x06431360>) , Command count = 2774 ] 
14:25:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:35: [ SetBusWidth(0x4) , Command count = 2775 ] 
14:25:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2776 ] 
14:25:36: Protected Area Size 0x28000
14:25:36: Bus Width           2
14:25:36: Secure Mode         0
14:25:36: Speed  Class        4
14:25:36: Perf Move           0
14:25:36: Au Size             9
14:25:36: Erase Size          15
14:25:36: Erase Timeout       1
14:25:36: Erase offset        1
14:25:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2777 ] 
14:25:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:36: Host Frequency set to 100000 KHz
14:25:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:36: ####CSD Registe 2.0 Values####
14:25:36: CSD_STRUCTURE                                 :0x1
14:25:36: Reserv1                                       :0x0
14:25:36: Time Access 1 TAAC                            :0xe
14:25:36: Time Access 2 NSAC*100                        :0x0
14:25:36: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:36: Card Command Classess CCC                     :0x5b5
14:25:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:36: DSR(driver stage register)  DSR_IMP           :0x0
14:25:36: Reserv2                                       :0x0
14:25:36: Device Size C_SIZE                            :0xedc8
14:25:36: Reserv3                                       :0x0
14:25:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:36: Reserv4                                       :0x0
14:25:36: Write Speed Factor R2W_FACTOR                 :0x2
14:25:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:36: FILE_FORMAT_GRP                               :0x0
14:25:36: COPY flag                                     :0x1
14:25:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:36: File_Format                                   :0x0
14:25:36: CRC                                           :0x0
14:25:36: ####CSD Registe Values####  

14:25:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7BD0>, <py_sfcl.CommandDataDefinition object at 0x05D7E1E0>) , Command count = 2778 ] 
14:25:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421A20>, <py_sfcl.CommandDataDefinition object at 0x0642E4B0>) , Command count = 2779 ] 
14:25:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642EFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EEA0>, <py_sfcl.PySEnhancedCmdData object at 0x0642E840>, <None>, <py_sfcl.Command23 object at 0x0642A750>) , Command count = 2780 ] 
14:25:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 26
14:25:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7C30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E750>, <py_sfcl.PySEnhancedCmdData object at 0x06431630>, <None>, <py_sfcl.Command23 object at 0x0642ED80>) , Command count = 2781 ] 
14:25:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645B330>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B900>, <py_sfcl.PySEnhancedCmdData object at 0x0645B090>, <None>, <py_sfcl.Command23 object at 0x064313C0>) , Command count = 2782 ] 
14:25:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:36: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:38: Host Frequency set to 25000 KHz
14:25:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:38: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAD180>, 0x0, True) , Command count = 2783 ] 
14:25:38: [GO18_globalSetVolt]### Host voltage value is set.
14:25:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x064215D0>, 0x0, False) , Command count = 2784 ] 
14:25:38: [GO18_globalSetVolt]### Host voltage value is set.
14:25:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2785 ] 
14:25:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2786 ] 
14:25:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2787 ] 
14:25:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F90>, <py_sfcl.CommandDataDefinition object at 0x05DA7960>) , Command count = 2788 ] 
14:25:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADCC0>, <py_sfcl.CommandDataDefinition object at 0x0642EDE0>) , Command count = 2789 ] 
14:25:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:38: [ SetCardRCA(0x1, 0xD555) , Command count = 2790 ] 
14:25:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:38: Host Frequency set to 25000 KHz
14:25:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:38: ####CSD Registe 2.0 Values####
14:25:38: CSD_STRUCTURE                                 :0x1
14:25:38: Reserv1                                       :0x0
14:25:38: Time Access 1 TAAC                            :0xe
14:25:38: Time Access 2 NSAC*100                        :0x0
14:25:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:38: Card Command Classess CCC                     :0x5b5
14:25:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:38: DSR(driver stage register)  DSR_IMP           :0x0
14:25:38: Reserv2                                       :0x0
14:25:38: Device Size C_SIZE                            :0xedc8
14:25:38: Reserv3                                       :0x0
14:25:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:38: Reserv4                                       :0x0
14:25:38: Write Speed Factor R2W_FACTOR                 :0x2
14:25:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:38: FILE_FORMAT_GRP                               :0x0
14:25:38: COPY flag                                     :0x1
14:25:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:38: File_Format                                   :0x0
14:25:38: CRC                                           :0x0
14:25:38: ####CSD Registe Values####  

14:25:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:38: [GetSCRRegisterEntry] Passed
14:25:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:38: Data_Status_After Erases          : 0
14:25:38: CPRM Security Support             : No Security
14:25:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:38: Spec. Version                     : Version 3.0X
14:25:38: Extended Security Support         : Extended_Security_Not_Supported
14:25:38: Command Support                   : COMMAND_SUPPORT
14:25:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8A80>, <py_sfcl.CommandDataDefinition object at 0x06431A80>) , Command count = 2791 ] 
14:25:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421450>, <py_sfcl.CommandDataDefinition object at 0x0642E2A0>) , Command count = 2792 ] 
14:25:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:38: [ SetBusWidth(0x4) , Command count = 2793 ] 
14:25:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2794 ] 
14:25:38: Protected Area Size 0x28000
14:25:38: Bus Width           2
14:25:38: Secure Mode         0
14:25:38: Speed  Class        4
14:25:38: Perf Move           0
14:25:38: Au Size             9
14:25:38: Erase Size          15
14:25:38: Erase Timeout       1
14:25:38: Erase offset        1
14:25:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2795 ] 
14:25:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:38: Host Frequency set to 100000 KHz
14:25:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:38: ####CSD Registe 2.0 Values####
14:25:38: CSD_STRUCTURE                                 :0x1
14:25:38: Reserv1                                       :0x0
14:25:38: Time Access 1 TAAC                            :0xe
14:25:38: Time Access 2 NSAC*100                        :0x0
14:25:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:38: Card Command Classess CCC                     :0x5b5
14:25:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:38: DSR(driver stage register)  DSR_IMP           :0x0
14:25:38: Reserv2                                       :0x0
14:25:38: Device Size C_SIZE                            :0xedc8
14:25:38: Reserv3                                       :0x0
14:25:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:38: Reserv4                                       :0x0
14:25:38: Write Speed Factor R2W_FACTOR                 :0x2
14:25:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:38: FILE_FORMAT_GRP                               :0x0
14:25:38: COPY flag                                     :0x1
14:25:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:38: File_Format                                   :0x0
14:25:38: CRC                                           :0x0
14:25:38: ####CSD Registe Values####  

14:25:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D91180>, <py_sfcl.CommandDataDefinition object at 0x05D91210>) , Command count = 2796 ] 
14:25:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E270>, <py_sfcl.CommandDataDefinition object at 0x0642EE40>) , Command count = 2797 ] 
14:25:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF7E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431660>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6F0>, <None>, <py_sfcl.Command23 object at 0x0642E480>) , Command count = 2798 ] 
14:25:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 25
14:25:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF810>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431B40>, <py_sfcl.PySEnhancedCmdData object at 0x06431B70>, <None>, <py_sfcl.Command23 object at 0x0642EB40>) , Command count = 2799 ] 
14:25:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E990>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B480>, <py_sfcl.PySEnhancedCmdData object at 0x0645B900>, <None>, <py_sfcl.Command23 object at 0x0642E600>) , Command count = 2800 ] 
14:25:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:38: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:41: Host Frequency set to 25000 KHz
14:25:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF960>, 0x0, True) , Command count = 2801 ] 
14:25:41: [GO18_globalSetVolt]### Host voltage value is set.
14:25:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A570>, 0x0, False) , Command count = 2802 ] 
14:25:41: [GO18_globalSetVolt]### Host voltage value is set.
14:25:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2803 ] 
14:25:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2804 ] 
14:25:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2805 ] 
14:25:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB10>, <py_sfcl.CommandDataDefinition object at 0x05DA7C60>) , Command count = 2806 ] 
14:25:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D7EAE0>, <py_sfcl.CommandDataDefinition object at 0x0642E300>) , Command count = 2807 ] 
14:25:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:41: [ SetCardRCA(0x1, 0xD555) , Command count = 2808 ] 
14:25:41: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:41: Host Frequency set to 25000 KHz
14:25:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:41: ####CSD Registe 2.0 Values####
14:25:41: CSD_STRUCTURE                                 :0x1
14:25:41: Reserv1                                       :0x0
14:25:41: Time Access 1 TAAC                            :0xe
14:25:41: Time Access 2 NSAC*100                        :0x0
14:25:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:41: Card Command Classess CCC                     :0x5b5
14:25:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:41: DSR(driver stage register)  DSR_IMP           :0x0
14:25:41: Reserv2                                       :0x0
14:25:41: Device Size C_SIZE                            :0xedc8
14:25:41: Reserv3                                       :0x0
14:25:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:41: Reserv4                                       :0x0
14:25:41: Write Speed Factor R2W_FACTOR                 :0x2
14:25:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:41: FILE_FORMAT_GRP                               :0x0
14:25:41: COPY flag                                     :0x1
14:25:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:41: File_Format                                   :0x0
14:25:41: CRC                                           :0x0
14:25:41: ####CSD Registe Values####  

14:25:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:41: [GetSCRRegisterEntry] Passed
14:25:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:41: Data_Status_After Erases          : 0
14:25:41: CPRM Security Support             : No Security
14:25:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:41: Spec. Version                     : Version 3.0X
14:25:41: Extended Security Support         : Extended_Security_Not_Supported
14:25:41: Command Support                   : COMMAND_SUPPORT
14:25:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB40>, <py_sfcl.CommandDataDefinition object at 0x06431FC0>) , Command count = 2809 ] 
14:25:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E3C0>, <py_sfcl.CommandDataDefinition object at 0x0642E7E0>) , Command count = 2810 ] 
14:25:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:41: [ SetBusWidth(0x4) , Command count = 2811 ] 
14:25:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B3C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2812 ] 
14:25:41: Protected Area Size 0x28000
14:25:41: Bus Width           2
14:25:41: Secure Mode         0
14:25:41: Speed  Class        4
14:25:41: Perf Move           0
14:25:41: Au Size             9
14:25:41: Erase Size          15
14:25:41: Erase Timeout       1
14:25:41: Erase offset        1
14:25:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2813 ] 
14:25:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:41: Host Frequency set to 100000 KHz
14:25:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:41: ####CSD Registe 2.0 Values####
14:25:41: CSD_STRUCTURE                                 :0x1
14:25:41: Reserv1                                       :0x0
14:25:41: Time Access 1 TAAC                            :0xe
14:25:41: Time Access 2 NSAC*100                        :0x0
14:25:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:41: Card Command Classess CCC                     :0x5b5
14:25:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:41: DSR(driver stage register)  DSR_IMP           :0x0
14:25:41: Reserv2                                       :0x0
14:25:41: Device Size C_SIZE                            :0xedc8
14:25:41: Reserv3                                       :0x0
14:25:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:41: Reserv4                                       :0x0
14:25:41: Write Speed Factor R2W_FACTOR                 :0x2
14:25:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:41: FILE_FORMAT_GRP                               :0x0
14:25:41: COPY flag                                     :0x1
14:25:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:41: File_Format                                   :0x0
14:25:41: CRC                                           :0x0
14:25:41: ####CSD Registe Values####  

14:25:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E14B0>, <py_sfcl.CommandDataDefinition object at 0x05DEFE10>) , Command count = 2814 ] 
14:25:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ABA0>, <py_sfcl.CommandDataDefinition object at 0x0642A5A0>) , Command count = 2815 ] 
14:25:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF60>, <py_sfcl.PySEnhancedCmdData object at 0x0642AA80>, <None>, <py_sfcl.Command23 object at 0x06431090>) , Command count = 2816 ] 
14:25:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 24
14:25:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DAD3F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A330>, <py_sfcl.PySEnhancedCmdData object at 0x06431E10>, <None>, <py_sfcl.Command23 object at 0x06431F90>) , Command count = 2817 ] 
14:25:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431510>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431540>, <py_sfcl.PySEnhancedCmdData object at 0x0645B5D0>, <None>, <py_sfcl.Command23 object at 0x06431F00>) , Command count = 2818 ] 
14:25:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:43: Host Frequency set to 25000 KHz
14:25:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x064140F0>, 0x0, True) , Command count = 2819 ] 
14:25:43: [GO18_globalSetVolt]### Host voltage value is set.
14:25:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A6C0>, 0x0, False) , Command count = 2820 ] 
14:25:43: [GO18_globalSetVolt]### Host voltage value is set.
14:25:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2821 ] 
14:25:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2822 ] 
14:25:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2823 ] 
14:25:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414690>, <py_sfcl.CommandDataDefinition object at 0x06414B40>) , Command count = 2824 ] 
14:25:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431C30>, <py_sfcl.CommandDataDefinition object at 0x06431240>) , Command count = 2825 ] 
14:25:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:44: [ SetCardRCA(0x1, 0xD555) , Command count = 2826 ] 
14:25:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:44: Host Frequency set to 25000 KHz
14:25:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:44: ####CSD Registe 2.0 Values####
14:25:44: CSD_STRUCTURE                                 :0x1
14:25:44: Reserv1                                       :0x0
14:25:44: Time Access 1 TAAC                            :0xe
14:25:44: Time Access 2 NSAC*100                        :0x0
14:25:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:44: Card Command Classess CCC                     :0x5b5
14:25:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:44: DSR(driver stage register)  DSR_IMP           :0x0
14:25:44: Reserv2                                       :0x0
14:25:44: Device Size C_SIZE                            :0xedc8
14:25:44: Reserv3                                       :0x0
14:25:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:44: Reserv4                                       :0x0
14:25:44: Write Speed Factor R2W_FACTOR                 :0x2
14:25:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:44: FILE_FORMAT_GRP                               :0x0
14:25:44: COPY flag                                     :0x1
14:25:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:44: File_Format                                   :0x0
14:25:44: CRC                                           :0x0
14:25:44: ####CSD Registe Values####  

14:25:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:44: [GetSCRRegisterEntry] Passed
14:25:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:44: Data_Status_After Erases          : 0
14:25:44: CPRM Security Support             : No Security
14:25:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:44: Spec. Version                     : Version 3.0X
14:25:44: Extended Security Support         : Extended_Security_Not_Supported
14:25:44: Command Support                   : COMMAND_SUPPORT
14:25:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414360>, <py_sfcl.CommandDataDefinition object at 0x06431EA0>) , Command count = 2827 ] 
14:25:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431330>, <py_sfcl.CommandDataDefinition object at 0x064317E0>) , Command count = 2828 ] 
14:25:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:44: [ SetBusWidth(0x4) , Command count = 2829 ] 
14:25:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BC30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2830 ] 
14:25:44: Protected Area Size 0x28000
14:25:44: Bus Width           2
14:25:44: Secure Mode         0
14:25:44: Speed  Class        4
14:25:44: Perf Move           0
14:25:44: Au Size             9
14:25:44: Erase Size          15
14:25:44: Erase Timeout       1
14:25:44: Erase offset        1
14:25:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2831 ] 
14:25:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:44: Host Frequency set to 100000 KHz
14:25:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:44: ####CSD Registe 2.0 Values####
14:25:44: CSD_STRUCTURE                                 :0x1
14:25:44: Reserv1                                       :0x0
14:25:44: Time Access 1 TAAC                            :0xe
14:25:44: Time Access 2 NSAC*100                        :0x0
14:25:44: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:44: Card Command Classess CCC                     :0x5b5
14:25:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:44: DSR(driver stage register)  DSR_IMP           :0x0
14:25:44: Reserv2                                       :0x0
14:25:44: Device Size C_SIZE                            :0xedc8
14:25:44: Reserv3                                       :0x0
14:25:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:44: Reserv4                                       :0x0
14:25:44: Write Speed Factor R2W_FACTOR                 :0x2
14:25:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:44: FILE_FORMAT_GRP                               :0x0
14:25:44: COPY flag                                     :0x1
14:25:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:44: File_Format                                   :0x0
14:25:44: CRC                                           :0x0
14:25:44: ####CSD Registe Values####  

14:25:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431960>, <py_sfcl.CommandDataDefinition object at 0x06431AE0>) , Command count = 2832 ] 
14:25:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431120>, <py_sfcl.CommandDataDefinition object at 0x06431690>) , Command count = 2833 ] 
14:25:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414300>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F60>, <py_sfcl.PySEnhancedCmdData object at 0x064316C0>, <None>, <py_sfcl.Command23 object at 0x064311B0>) , Command count = 2834 ] 
14:25:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 23
14:25:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E1060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414900>, <py_sfcl.PySEnhancedCmdData object at 0x06431C60>, <None>, <py_sfcl.Command23 object at 0x06431DE0>) , Command count = 2835 ] 
14:25:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642ABD0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06431870>, <None>, <py_sfcl.Command23 object at 0x06431720>) , Command count = 2836 ] 
14:25:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:44: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:46: Host Frequency set to 25000 KHz
14:25:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:46: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x064517B0>, 0x0, True) , Command count = 2837 ] 
14:25:46: [GO18_globalSetVolt]### Host voltage value is set.
14:25:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642ED50>, 0x0, False) , Command count = 2838 ] 
14:25:46: [GO18_globalSetVolt]### Host voltage value is set.
14:25:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2839 ] 
14:25:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2840 ] 
14:25:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2841 ] 
14:25:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414DE0>, <py_sfcl.CommandDataDefinition object at 0x06451540>) , Command count = 2842 ] 
14:25:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064310C0>, <py_sfcl.CommandDataDefinition object at 0x06431BA0>) , Command count = 2843 ] 
14:25:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:46: [ SetCardRCA(0x1, 0xD555) , Command count = 2844 ] 
14:25:46: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:46: Host Frequency set to 25000 KHz
14:25:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:46: ####CSD Registe 2.0 Values####
14:25:46: CSD_STRUCTURE                                 :0x1
14:25:46: Reserv1                                       :0x0
14:25:46: Time Access 1 TAAC                            :0xe
14:25:46: Time Access 2 NSAC*100                        :0x0
14:25:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:46: Card Command Classess CCC                     :0x5b5
14:25:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:46: DSR(driver stage register)  DSR_IMP           :0x0
14:25:46: Reserv2                                       :0x0
14:25:46: Device Size C_SIZE                            :0xedc8
14:25:46: Reserv3                                       :0x0
14:25:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:47: Reserv4                                       :0x0
14:25:47: Write Speed Factor R2W_FACTOR                 :0x2
14:25:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:47: FILE_FORMAT_GRP                               :0x0
14:25:47: COPY flag                                     :0x1
14:25:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:47: File_Format                                   :0x0
14:25:47: CRC                                           :0x0
14:25:47: ####CSD Registe Values####  

14:25:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:47: [GetSCRRegisterEntry] Passed
14:25:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:47: Data_Status_After Erases          : 0
14:25:47: CPRM Security Support             : No Security
14:25:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:47: Spec. Version                     : Version 3.0X
14:25:47: Extended Security Support         : Extended_Security_Not_Supported
14:25:47: Command Support                   : COMMAND_SUPPORT
14:25:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1A80>, <py_sfcl.CommandDataDefinition object at 0x064149F0>) , Command count = 2845 ] 
14:25:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064316F0>, <py_sfcl.CommandDataDefinition object at 0x06431840>) , Command count = 2846 ] 
14:25:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:47: [ SetBusWidth(0x4) , Command count = 2847 ] 
14:25:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BBD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2848 ] 
14:25:47: Protected Area Size 0x28000
14:25:47: Bus Width           2
14:25:47: Secure Mode         0
14:25:47: Speed  Class        4
14:25:47: Perf Move           0
14:25:47: Au Size             9
14:25:47: Erase Size          15
14:25:47: Erase Timeout       1
14:25:47: Erase offset        1
14:25:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2849 ] 
14:25:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:47: Host Frequency set to 100000 KHz
14:25:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:47: ####CSD Registe 2.0 Values####
14:25:47: CSD_STRUCTURE                                 :0x1
14:25:47: Reserv1                                       :0x0
14:25:47: Time Access 1 TAAC                            :0xe
14:25:47: Time Access 2 NSAC*100                        :0x0
14:25:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:47: Card Command Classess CCC                     :0x5b5
14:25:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:47: DSR(driver stage register)  DSR_IMP           :0x0
14:25:47: Reserv2                                       :0x0
14:25:47: Device Size C_SIZE                            :0xedc8
14:25:47: Reserv3                                       :0x0
14:25:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:47: Reserv4                                       :0x0
14:25:47: Write Speed Factor R2W_FACTOR                 :0x2
14:25:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:47: FILE_FORMAT_GRP                               :0x0
14:25:47: COPY flag                                     :0x1
14:25:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:47: File_Format                                   :0x0
14:25:47: CRC                                           :0x0
14:25:47: ####CSD Registe Values####  

14:25:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431D50>, <py_sfcl.CommandDataDefinition object at 0x06431C00>) , Command count = 2850 ] 
14:25:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D7E2A0>, <py_sfcl.CommandDataDefinition object at 0x0642E7B0>) , Command count = 2851 ] 
14:25:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E11E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064144B0>, <py_sfcl.PySEnhancedCmdData object at 0x06431CC0>, <None>, <py_sfcl.Command23 object at 0x064315A0>) , Command count = 2852 ] 
14:25:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 22
14:25:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431D80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431B10>, <py_sfcl.PySEnhancedCmdData object at 0x06451A80>, <None>, <py_sfcl.Command23 object at 0x06431A20>) , Command count = 2853 ] 
14:25:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E4E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06451870>, <py_sfcl.PySEnhancedCmdData object at 0x06451750>, <None>, <py_sfcl.Command23 object at 0x06451BD0>) , Command count = 2854 ] 
14:25:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:49: Host Frequency set to 25000 KHz
14:25:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x064516C0>, 0x0, True) , Command count = 2855 ] 
14:25:49: [GO18_globalSetVolt]### Host voltage value is set.
14:25:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E780>, 0x0, False) , Command count = 2856 ] 
14:25:49: [GO18_globalSetVolt]### Host voltage value is set.
14:25:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2857 ] 
14:25:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2858 ] 
14:25:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2859 ] 
14:25:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F120>, <py_sfcl.CommandDataDefinition object at 0x064519C0>) , Command count = 2860 ] 
14:25:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451390>, <py_sfcl.CommandDataDefinition object at 0x0642E870>) , Command count = 2861 ] 
14:25:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:49: [ SetCardRCA(0x1, 0xD555) , Command count = 2862 ] 
14:25:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:49: Host Frequency set to 25000 KHz
14:25:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:49: ####CSD Registe 2.0 Values####
14:25:49: CSD_STRUCTURE                                 :0x1
14:25:49: Reserv1                                       :0x0
14:25:49: Time Access 1 TAAC                            :0xe
14:25:49: Time Access 2 NSAC*100                        :0x0
14:25:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:49: Card Command Classess CCC                     :0x5b5
14:25:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:49: DSR(driver stage register)  DSR_IMP           :0x0
14:25:49: Reserv2                                       :0x0
14:25:49: Device Size C_SIZE                            :0xedc8
14:25:49: Reserv3                                       :0x0
14:25:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:49: Reserv4                                       :0x0
14:25:49: Write Speed Factor R2W_FACTOR                 :0x2
14:25:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:49: FILE_FORMAT_GRP                               :0x0
14:25:49: COPY flag                                     :0x1
14:25:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:49: File_Format                                   :0x0
14:25:49: CRC                                           :0x0
14:25:49: ####CSD Registe Values####  

14:25:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:49: [GetSCRRegisterEntry] Passed
14:25:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:49: Data_Status_After Erases          : 0
14:25:49: CPRM Security Support             : No Security
14:25:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:49: Spec. Version                     : Version 3.0X
14:25:49: Extended Security Support         : Extended_Security_Not_Supported
14:25:49: Command Support                   : COMMAND_SUPPORT
14:25:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451780>, <py_sfcl.CommandDataDefinition object at 0x06451D20>) , Command count = 2863 ] 
14:25:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AAE0>, <py_sfcl.CommandDataDefinition object at 0x06431450>) , Command count = 2864 ] 
14:25:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:49: [ SetBusWidth(0x4) , Command count = 2865 ] 
14:25:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2866 ] 
14:25:49: Protected Area Size 0x28000
14:25:49: Bus Width           2
14:25:49: Secure Mode         0
14:25:49: Speed  Class        4
14:25:49: Perf Move           0
14:25:49: Au Size             9
14:25:49: Erase Size          15
14:25:49: Erase Timeout       1
14:25:49: Erase offset        1
14:25:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2867 ] 
14:25:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:49: Host Frequency set to 100000 KHz
14:25:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:49: ####CSD Registe 2.0 Values####
14:25:49: CSD_STRUCTURE                                 :0x1
14:25:49: Reserv1                                       :0x0
14:25:49: Time Access 1 TAAC                            :0xe
14:25:49: Time Access 2 NSAC*100                        :0x0
14:25:49: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:49: Card Command Classess CCC                     :0x5b5
14:25:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:49: DSR(driver stage register)  DSR_IMP           :0x0
14:25:49: Reserv2                                       :0x0
14:25:49: Device Size C_SIZE                            :0xedc8
14:25:49: Reserv3                                       :0x0
14:25:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:49: Reserv4                                       :0x0
14:25:49: Write Speed Factor R2W_FACTOR                 :0x2
14:25:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:49: FILE_FORMAT_GRP                               :0x0
14:25:49: COPY flag                                     :0x1
14:25:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:49: File_Format                                   :0x0
14:25:49: CRC                                           :0x0
14:25:49: ####CSD Registe Values####  

14:25:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451630>, <py_sfcl.CommandDataDefinition object at 0x06451570>) , Command count = 2868 ] 
14:25:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414420>, <py_sfcl.CommandDataDefinition object at 0x06414FC0>) , Command count = 2869 ] 
14:25:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451EA0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064518A0>, <py_sfcl.PySEnhancedCmdData object at 0x0641F1E0>, <None>, <py_sfcl.Command23 object at 0x06451900>) , Command count = 2870 ] 
14:25:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 21
14:25:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F4B0>, <py_sfcl.PySEnhancedCmdData object at 0x06414A50>, <None>, <py_sfcl.Command23 object at 0x06414600>) , Command count = 2871 ] 
14:25:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7FC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064148A0>, <py_sfcl.PySEnhancedCmdData object at 0x06414C60>, <None>, <py_sfcl.Command23 object at 0x06414AE0>) , Command count = 2872 ] 
14:25:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:49: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:52: Host Frequency set to 25000 KHz
14:25:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:52: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB10>, 0x0, True) , Command count = 2873 ] 
14:25:52: [GO18_globalSetVolt]### Host voltage value is set.
14:25:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431480>, 0x0, False) , Command count = 2874 ] 
14:25:52: [GO18_globalSetVolt]### Host voltage value is set.
14:25:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2875 ] 
14:25:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2876 ] 
14:25:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2877 ] 
14:25:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FFC0>, <py_sfcl.CommandDataDefinition object at 0x06414DB0>) , Command count = 2878 ] 
14:25:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064515A0>, <py_sfcl.CommandDataDefinition object at 0x06451600>) , Command count = 2879 ] 
14:25:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:52: [ SetCardRCA(0x1, 0xD555) , Command count = 2880 ] 
14:25:52: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:52: Host Frequency set to 25000 KHz
14:25:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:52: ####CSD Registe 2.0 Values####
14:25:52: CSD_STRUCTURE                                 :0x1
14:25:52: Reserv1                                       :0x0
14:25:52: Time Access 1 TAAC                            :0xe
14:25:52: Time Access 2 NSAC*100                        :0x0
14:25:52: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:52: Card Command Classess CCC                     :0x5b5
14:25:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:52: DSR(driver stage register)  DSR_IMP           :0x0
14:25:52: Reserv2                                       :0x0
14:25:52: Device Size C_SIZE                            :0xedc8
14:25:52: Reserv3                                       :0x0
14:25:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:52: Reserv4                                       :0x0
14:25:52: Write Speed Factor R2W_FACTOR                 :0x2
14:25:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:52: FILE_FORMAT_GRP                               :0x0
14:25:52: COPY flag                                     :0x1
14:25:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:52: File_Format                                   :0x0
14:25:52: CRC                                           :0x0
14:25:52: ####CSD Registe Values####  

14:25:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:52: [GetSCRRegisterEntry] Passed
14:25:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:52: Data_Status_After Erases          : 0
14:25:52: CPRM Security Support             : No Security
14:25:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:52: Spec. Version                     : Version 3.0X
14:25:52: Extended Security Support         : Extended_Security_Not_Supported
14:25:52: Command Support                   : COMMAND_SUPPORT
14:25:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FB70>, <py_sfcl.CommandDataDefinition object at 0x0641FCF0>) , Command count = 2881 ] 
14:25:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E930>, <py_sfcl.CommandDataDefinition object at 0x0641FCC0>) , Command count = 2882 ] 
14:25:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:52: [ SetBusWidth(0x4) , Command count = 2883 ] 
14:25:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2884 ] 
14:25:52: Protected Area Size 0x28000
14:25:52: Bus Width           2
14:25:52: Secure Mode         0
14:25:52: Speed  Class        4
14:25:52: Perf Move           0
14:25:52: Au Size             9
14:25:52: Erase Size          15
14:25:52: Erase Timeout       1
14:25:52: Erase offset        1
14:25:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2885 ] 
14:25:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:52: Host Frequency set to 100000 KHz
14:25:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:52: ####CSD Registe 2.0 Values####
14:25:52: CSD_STRUCTURE                                 :0x1
14:25:52: Reserv1                                       :0x0
14:25:52: Time Access 1 TAAC                            :0xe
14:25:52: Time Access 2 NSAC*100                        :0x0
14:25:52: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:52: Card Command Classess CCC                     :0x5b5
14:25:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:52: DSR(driver stage register)  DSR_IMP           :0x0
14:25:52: Reserv2                                       :0x0
14:25:52: Device Size C_SIZE                            :0xedc8
14:25:52: Reserv3                                       :0x0
14:25:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:52: Reserv4                                       :0x0
14:25:52: Write Speed Factor R2W_FACTOR                 :0x2
14:25:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:52: FILE_FORMAT_GRP                               :0x0
14:25:52: COPY flag                                     :0x1
14:25:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:52: File_Format                                   :0x0
14:25:52: CRC                                           :0x0
14:25:52: ####CSD Registe Values####  

14:25:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467060>, <py_sfcl.CommandDataDefinition object at 0x0641FF90>) , Command count = 2886 ] 
14:25:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064319C0>, <py_sfcl.CommandDataDefinition object at 0x064313F0>) , Command count = 2887 ] 
14:25:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064671E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467210>, <py_sfcl.PySEnhancedCmdData object at 0x06467240>, <None>, <py_sfcl.Command23 object at 0x064146F0>) , Command count = 2888 ] 
14:25:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 20
14:25:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064670C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064670F0>, <py_sfcl.PySEnhancedCmdData object at 0x06467120>, <None>, <py_sfcl.Command23 object at 0x06431DB0>) , Command count = 2889 ] 
14:25:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEFAE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F540>, <py_sfcl.PySEnhancedCmdData object at 0x0641FC90>, <None>, <py_sfcl.Command23 object at 0x0641F240>) , Command count = 2890 ] 
14:25:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:52: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:54: Host Frequency set to 25000 KHz
14:25:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:54: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x064675A0>, 0x0, True) , Command count = 2891 ] 
14:25:54: [GO18_globalSetVolt]### Host voltage value is set.
14:25:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x064515D0>, 0x0, False) , Command count = 2892 ] 
14:25:54: [GO18_globalSetVolt]### Host voltage value is set.
14:25:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2893 ] 
14:25:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2894 ] 
14:25:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2895 ] 
14:25:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467540>, <py_sfcl.CommandDataDefinition object at 0x064674E0>) , Command count = 2896 ] 
14:25:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F0F0>, <py_sfcl.CommandDataDefinition object at 0x0641F2D0>) , Command count = 2897 ] 
14:25:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:55: [ SetCardRCA(0x1, 0xD555) , Command count = 2898 ] 
14:25:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:55: Host Frequency set to 25000 KHz
14:25:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:55: ####CSD Registe 2.0 Values####
14:25:55: CSD_STRUCTURE                                 :0x1
14:25:55: Reserv1                                       :0x0
14:25:55: Time Access 1 TAAC                            :0xe
14:25:55: Time Access 2 NSAC*100                        :0x0
14:25:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:55: Card Command Classess CCC                     :0x5b5
14:25:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:55: DSR(driver stage register)  DSR_IMP           :0x0
14:25:55: Reserv2                                       :0x0
14:25:55: Device Size C_SIZE                            :0xedc8
14:25:55: Reserv3                                       :0x0
14:25:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:55: Reserv4                                       :0x0
14:25:55: Write Speed Factor R2W_FACTOR                 :0x2
14:25:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:55: FILE_FORMAT_GRP                               :0x0
14:25:55: COPY flag                                     :0x1
14:25:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:55: File_Format                                   :0x0
14:25:55: CRC                                           :0x0
14:25:55: ####CSD Registe Values####  

14:25:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:55: [GetSCRRegisterEntry] Passed
14:25:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:55: Data_Status_After Erases          : 0
14:25:55: CPRM Security Support             : No Security
14:25:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:55: Spec. Version                     : Version 3.0X
14:25:55: Extended Security Support         : Extended_Security_Not_Supported
14:25:55: Command Support                   : COMMAND_SUPPORT
14:25:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467660>, <py_sfcl.CommandDataDefinition object at 0x0641FDE0>) , Command count = 2899 ] 
14:25:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064315D0>, <py_sfcl.CommandDataDefinition object at 0x0641F0C0>) , Command count = 2900 ] 
14:25:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:55: [ SetBusWidth(0x4) , Command count = 2901 ] 
14:25:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2902 ] 
14:25:55: Protected Area Size 0x28000
14:25:55: Bus Width           2
14:25:55: Secure Mode         0
14:25:55: Speed  Class        4
14:25:55: Perf Move           0
14:25:55: Au Size             9
14:25:55: Erase Size          15
14:25:55: Erase Timeout       1
14:25:55: Erase offset        1
14:25:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2903 ] 
14:25:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:55: Host Frequency set to 100000 KHz
14:25:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:55: ####CSD Registe 2.0 Values####
14:25:55: CSD_STRUCTURE                                 :0x1
14:25:55: Reserv1                                       :0x0
14:25:55: Time Access 1 TAAC                            :0xe
14:25:55: Time Access 2 NSAC*100                        :0x0
14:25:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:55: Card Command Classess CCC                     :0x5b5
14:25:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:55: DSR(driver stage register)  DSR_IMP           :0x0
14:25:55: Reserv2                                       :0x0
14:25:55: Device Size C_SIZE                            :0xedc8
14:25:55: Reserv3                                       :0x0
14:25:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:55: Reserv4                                       :0x0
14:25:55: Write Speed Factor R2W_FACTOR                 :0x2
14:25:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:55: FILE_FORMAT_GRP                               :0x0
14:25:55: COPY flag                                     :0x1
14:25:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:55: File_Format                                   :0x0
14:25:55: CRC                                           :0x0
14:25:55: ####CSD Registe Values####  

14:25:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467A50>, <py_sfcl.CommandDataDefinition object at 0x0641F030>) , Command count = 2904 ] 
14:25:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFAB0>, <py_sfcl.CommandDataDefinition object at 0x0641FC00>) , Command count = 2905 ] 
14:25:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467990>, <py_sfcl.PySEnhancedCmdData object at 0x064679C0>, <None>, <py_sfcl.Command23 object at 0x0641F090>) , Command count = 2906 ] 
14:25:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 19
14:25:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06467AE0>, <None>, <py_sfcl.Command23 object at 0x0641FD80>) , Command count = 2907 ] 
14:25:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F150>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BB70>, <py_sfcl.PySEnhancedCmdData object at 0x0645B270>, <None>, <py_sfcl.Command23 object at 0x0645B840>) , Command count = 2908 ] 
14:25:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:25:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:57: Host Frequency set to 25000 KHz
14:25:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:25:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:25:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467E40>, 0x0, True) , Command count = 2909 ] 
14:25:57: [GO18_globalSetVolt]### Host voltage value is set.
14:25:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:25:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451C60>, 0x0, False) , Command count = 2910 ] 
14:25:57: [GO18_globalSetVolt]### Host voltage value is set.
14:25:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2911 ] 
14:25:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:25:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2912 ] 
14:25:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:25:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:25:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:25:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:25:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:25:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2913 ] 
14:25:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:25:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:25:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F510>, <py_sfcl.CommandDataDefinition object at 0x06467DE0>) , Command count = 2914 ] 
14:25:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:25:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467ED0>, <py_sfcl.CommandDataDefinition object at 0x06467870>) , Command count = 2915 ] 
14:25:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:25:57: [ SetCardRCA(0x1, 0xD555) , Command count = 2916 ] 
14:25:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:25:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:25:57: Host Frequency set to 25000 KHz
14:25:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:25:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:57: ####CSD Registe 2.0 Values####
14:25:57: CSD_STRUCTURE                                 :0x1
14:25:57: Reserv1                                       :0x0
14:25:57: Time Access 1 TAAC                            :0xe
14:25:57: Time Access 2 NSAC*100                        :0x0
14:25:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:25:57: Card Command Classess CCC                     :0x5b5
14:25:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:57: DSR(driver stage register)  DSR_IMP           :0x0
14:25:57: Reserv2                                       :0x0
14:25:57: Device Size C_SIZE                            :0xedc8
14:25:57: Reserv3                                       :0x0
14:25:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:58: Reserv4                                       :0x0
14:25:58: Write Speed Factor R2W_FACTOR                 :0x2
14:25:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:58: FILE_FORMAT_GRP                               :0x0
14:25:58: COPY flag                                     :0x1
14:25:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:58: File_Format                                   :0x0
14:25:58: CRC                                           :0x0
14:25:58: ####CSD Registe Values####  

14:25:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:25:58: [GetSCRRegisterEntry] Passed
14:25:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:25:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:25:58: Data_Status_After Erases          : 0
14:25:58: CPRM Security Support             : No Security
14:25:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:25:58: Spec. Version                     : Version 3.0X
14:25:58: Extended Security Support         : Extended_Security_Not_Supported
14:25:58: Command Support                   : COMMAND_SUPPORT
14:25:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:25:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421030>, <py_sfcl.CommandDataDefinition object at 0x06467F00>) , Command count = 2917 ] 
14:25:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:25:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414480>, <py_sfcl.CommandDataDefinition object at 0x06467A20>) , Command count = 2918 ] 
14:25:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:25:58: [ SetBusWidth(0x4) , Command count = 2919 ] 
14:25:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:25:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2920 ] 
14:25:58: Protected Area Size 0x28000
14:25:58: Bus Width           2
14:25:58: Secure Mode         0
14:25:58: Speed  Class        4
14:25:58: Perf Move           0
14:25:58: Au Size             9
14:25:58: Erase Size          15
14:25:58: Erase Timeout       1
14:25:58: Erase offset        1
14:25:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:25:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:25:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:25:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2921 ] 
14:25:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:25:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:25:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:25:58: Host Frequency set to 100000 KHz
14:25:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:25:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:25:58: ####CSD Registe 2.0 Values####
14:25:58: CSD_STRUCTURE                                 :0x1
14:25:58: Reserv1                                       :0x0
14:25:58: Time Access 1 TAAC                            :0xe
14:25:58: Time Access 2 NSAC*100                        :0x0
14:25:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:25:58: Card Command Classess CCC                     :0x5b5
14:25:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:25:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:25:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:25:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:25:58: DSR(driver stage register)  DSR_IMP           :0x0
14:25:58: Reserv2                                       :0x0
14:25:58: Device Size C_SIZE                            :0xedc8
14:25:58: Reserv3                                       :0x0
14:25:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:25:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:25:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:25:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:25:58: Reserv4                                       :0x0
14:25:58: Write Speed Factor R2W_FACTOR                 :0x2
14:25:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:25:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:25:58: FILE_FORMAT_GRP                               :0x0
14:25:58: COPY flag                                     :0x1
14:25:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:25:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:25:58: File_Format                                   :0x0
14:25:58: CRC                                           :0x0
14:25:58: ####CSD Registe Values####  

14:25:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F330>, <py_sfcl.CommandDataDefinition object at 0x06467F90>) , Command count = 2922 ] 
14:25:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:25:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467630>, <py_sfcl.CommandDataDefinition object at 0x06467150>) , Command count = 2923 ] 
14:25:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:25:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:25:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064212A0>, <py_sfcl.PySEnhancedCmdData object at 0x06467C00>, <None>, <py_sfcl.Command23 object at 0x06467FC0>) , Command count = 2924 ] 
14:25:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 18
14:25:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:25:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421360>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421390>, <py_sfcl.PySEnhancedCmdData object at 0x064679F0>, <None>, <py_sfcl.Command23 object at 0x06467570>) , Command count = 2925 ] 
14:25:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:25:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:25:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFD50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BEA0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B4E0>, <None>, <py_sfcl.Command23 object at 0x064674B0>) , Command count = 2926 ] 
14:25:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:25:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:00: Host Frequency set to 25000 KHz
14:26:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421720>, 0x0, True) , Command count = 2927 ] 
14:26:00: [GO18_globalSetVolt]### Host voltage value is set.
14:26:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451ED0>, 0x0, False) , Command count = 2928 ] 
14:26:00: [GO18_globalSetVolt]### Host voltage value is set.
14:26:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2929 ] 
14:26:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2930 ] 
14:26:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2931 ] 
14:26:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216C0>, <py_sfcl.CommandDataDefinition object at 0x06421660>) , Command count = 2932 ] 
14:26:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467BA0>, <py_sfcl.CommandDataDefinition object at 0x06467030>) , Command count = 2933 ] 
14:26:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:00: [ SetCardRCA(0x1, 0xD555) , Command count = 2934 ] 
14:26:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:00: Host Frequency set to 25000 KHz
14:26:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:00: ####CSD Registe 2.0 Values####
14:26:00: CSD_STRUCTURE                                 :0x1
14:26:00: Reserv1                                       :0x0
14:26:00: Time Access 1 TAAC                            :0xe
14:26:00: Time Access 2 NSAC*100                        :0x0
14:26:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:00: Card Command Classess CCC                     :0x5b5
14:26:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:00: DSR(driver stage register)  DSR_IMP           :0x0
14:26:00: Reserv2                                       :0x0
14:26:00: Device Size C_SIZE                            :0xedc8
14:26:00: Reserv3                                       :0x0
14:26:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:00: Reserv4                                       :0x0
14:26:00: Write Speed Factor R2W_FACTOR                 :0x2
14:26:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:00: FILE_FORMAT_GRP                               :0x0
14:26:00: COPY flag                                     :0x1
14:26:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:00: File_Format                                   :0x0
14:26:00: CRC                                           :0x0
14:26:00: ####CSD Registe Values####  

14:26:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:00: [GetSCRRegisterEntry] Passed
14:26:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:00: Data_Status_After Erases          : 0
14:26:00: CPRM Security Support             : No Security
14:26:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:00: Spec. Version                     : Version 3.0X
14:26:00: Extended Security Support         : Extended_Security_Not_Supported
14:26:00: Command Support                   : COMMAND_SUPPORT
14:26:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064219C0>, <py_sfcl.CommandDataDefinition object at 0x06467C60>) , Command count = 2935 ] 
14:26:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414810>, <py_sfcl.CommandDataDefinition object at 0x06467330>) , Command count = 2936 ] 
14:26:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:00: [ SetBusWidth(0x4) , Command count = 2937 ] 
14:26:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2938 ] 
14:26:00: Protected Area Size 0x28000
14:26:00: Bus Width           2
14:26:00: Secure Mode         0
14:26:00: Speed  Class        4
14:26:00: Perf Move           0
14:26:00: Au Size             9
14:26:00: Erase Size          15
14:26:00: Erase Timeout       1
14:26:00: Erase offset        1
14:26:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2939 ] 
14:26:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:00: Host Frequency set to 100000 KHz
14:26:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:00: ####CSD Registe 2.0 Values####
14:26:00: CSD_STRUCTURE                                 :0x1
14:26:00: Reserv1                                       :0x0
14:26:00: Time Access 1 TAAC                            :0xe
14:26:00: Time Access 2 NSAC*100                        :0x0
14:26:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:00: Card Command Classess CCC                     :0x5b5
14:26:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:00: DSR(driver stage register)  DSR_IMP           :0x0
14:26:00: Reserv2                                       :0x0
14:26:00: Device Size C_SIZE                            :0xedc8
14:26:00: Reserv3                                       :0x0
14:26:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:00: Reserv4                                       :0x0
14:26:00: Write Speed Factor R2W_FACTOR                 :0x2
14:26:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:00: FILE_FORMAT_GRP                               :0x0
14:26:00: COPY flag                                     :0x1
14:26:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:00: File_Format                                   :0x0
14:26:00: CRC                                           :0x0
14:26:00: ####CSD Registe Values####  

14:26:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064217E0>, <py_sfcl.CommandDataDefinition object at 0x06467750>) , Command count = 2940 ] 
14:26:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FC60>, <py_sfcl.CommandDataDefinition object at 0x06421240>) , Command count = 2941 ] 
14:26:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421B10>, <py_sfcl.PySEnhancedCmdData object at 0x06421B40>, <None>, <py_sfcl.Command23 object at 0x06467750>) , Command count = 2942 ] 
14:26:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 17
14:26:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421C30>, <py_sfcl.PySEnhancedCmdData object at 0x06421C60>, <None>, <py_sfcl.Command23 object at 0x06421270>) , Command count = 2943 ] 
14:26:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451FC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B5A0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BEA0>, <None>, <py_sfcl.Command23 object at 0x06421810>) , Command count = 2944 ] 
14:26:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:03: Host Frequency set to 25000 KHz
14:26:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:03: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421FC0>, 0x0, True) , Command count = 2945 ] 
14:26:03: [GO18_globalSetVolt]### Host voltage value is set.
14:26:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467720>, 0x0, False) , Command count = 2946 ] 
14:26:03: [GO18_globalSetVolt]### Host voltage value is set.
14:26:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2947 ] 
14:26:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2948 ] 
14:26:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2949 ] 
14:26:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A060>, <py_sfcl.CommandDataDefinition object at 0x06421F60>) , Command count = 2950 ] 
14:26:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A0F0>, <py_sfcl.CommandDataDefinition object at 0x064673C0>) , Command count = 2951 ] 
14:26:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:03: [ SetCardRCA(0x1, 0xD555) , Command count = 2952 ] 
14:26:03: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:03: Host Frequency set to 25000 KHz
14:26:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:03: ####CSD Registe 2.0 Values####
14:26:03: CSD_STRUCTURE                                 :0x1
14:26:03: Reserv1                                       :0x0
14:26:03: Time Access 1 TAAC                            :0xe
14:26:03: Time Access 2 NSAC*100                        :0x0
14:26:03: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:03: Card Command Classess CCC                     :0x5b5
14:26:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:03: DSR(driver stage register)  DSR_IMP           :0x0
14:26:03: Reserv2                                       :0x0
14:26:03: Device Size C_SIZE                            :0xedc8
14:26:03: Reserv3                                       :0x0
14:26:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:03: Reserv4                                       :0x0
14:26:03: Write Speed Factor R2W_FACTOR                 :0x2
14:26:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:03: FILE_FORMAT_GRP                               :0x0
14:26:03: COPY flag                                     :0x1
14:26:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:03: File_Format                                   :0x0
14:26:03: CRC                                           :0x0
14:26:03: ####CSD Registe Values####  

14:26:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:03: [GetSCRRegisterEntry] Passed
14:26:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:03: Data_Status_After Erases          : 0
14:26:03: CPRM Security Support             : No Security
14:26:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:03: Spec. Version                     : Version 3.0X
14:26:03: Extended Security Support         : Extended_Security_Not_Supported
14:26:03: Command Support                   : COMMAND_SUPPORT
14:26:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A2A0>, <py_sfcl.CommandDataDefinition object at 0x0642A0C0>) , Command count = 2953 ] 
14:26:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F450>, <py_sfcl.CommandDataDefinition object at 0x06421060>) , Command count = 2954 ] 
14:26:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:03: [ SetBusWidth(0x4) , Command count = 2955 ] 
14:26:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BDB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2956 ] 
14:26:03: Protected Area Size 0x28000
14:26:03: Bus Width           2
14:26:03: Secure Mode         0
14:26:03: Speed  Class        4
14:26:03: Perf Move           0
14:26:03: Au Size             9
14:26:03: Erase Size          15
14:26:03: Erase Timeout       1
14:26:03: Erase offset        1
14:26:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2957 ] 
14:26:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:03: Host Frequency set to 100000 KHz
14:26:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:03: ####CSD Registe 2.0 Values####
14:26:03: CSD_STRUCTURE                                 :0x1
14:26:03: Reserv1                                       :0x0
14:26:03: Time Access 1 TAAC                            :0xe
14:26:03: Time Access 2 NSAC*100                        :0x0
14:26:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:03: Card Command Classess CCC                     :0x5b5
14:26:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:03: DSR(driver stage register)  DSR_IMP           :0x0
14:26:03: Reserv2                                       :0x0
14:26:03: Device Size C_SIZE                            :0xedc8
14:26:03: Reserv3                                       :0x0
14:26:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:03: Reserv4                                       :0x0
14:26:03: Write Speed Factor R2W_FACTOR                 :0x2
14:26:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:03: FILE_FORMAT_GRP                               :0x0
14:26:03: COPY flag                                     :0x1
14:26:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:03: File_Format                                   :0x0
14:26:03: CRC                                           :0x0
14:26:03: ####CSD Registe Values####  

14:26:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A090>, <py_sfcl.CommandDataDefinition object at 0x06421D50>) , Command count = 2958 ] 
14:26:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x063FFEA0>, <py_sfcl.CommandDataDefinition object at 0x064219F0>) , Command count = 2959 ] 
14:26:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421D80>, <py_sfcl.PySEnhancedCmdData object at 0x06421BA0>, <None>, <py_sfcl.Command23 object at 0x064218A0>) , Command count = 2960 ] 
14:26:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 16
14:26:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A510>, <py_sfcl.PySEnhancedCmdData object at 0x0642A540>, <None>, <py_sfcl.Command23 object at 0x064214E0>) , Command count = 2961 ] 
14:26:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064678A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B6F0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BAE0>, <None>, <py_sfcl.Command23 object at 0x06421300>) , Command count = 2962 ] 
14:26:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:05: Host Frequency set to 25000 KHz
14:26:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A8A0>, 0x0, True) , Command count = 2963 ] 
14:26:05: [GO18_globalSetVolt]### Host voltage value is set.
14:26:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467600>, 0x0, False) , Command count = 2964 ] 
14:26:05: [GO18_globalSetVolt]### Host voltage value is set.
14:26:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2965 ] 
14:26:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2966 ] 
14:26:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2967 ] 
14:26:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A840>, <py_sfcl.CommandDataDefinition object at 0x06421D20>) , Command count = 2968 ] 
14:26:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421870>, <py_sfcl.CommandDataDefinition object at 0x064213C0>) , Command count = 2969 ] 
14:26:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:06: [ SetCardRCA(0x1, 0xD555) , Command count = 2970 ] 
14:26:06: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:06: Host Frequency set to 25000 KHz
14:26:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:06: ####CSD Registe 2.0 Values####
14:26:06: CSD_STRUCTURE                                 :0x1
14:26:06: Reserv1                                       :0x0
14:26:06: Time Access 1 TAAC                            :0xe
14:26:06: Time Access 2 NSAC*100                        :0x0
14:26:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:06: Card Command Classess CCC                     :0x5b5
14:26:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:06: DSR(driver stage register)  DSR_IMP           :0x0
14:26:06: Reserv2                                       :0x0
14:26:06: Device Size C_SIZE                            :0xedc8
14:26:06: Reserv3                                       :0x0
14:26:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:06: Reserv4                                       :0x0
14:26:06: Write Speed Factor R2W_FACTOR                 :0x2
14:26:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:06: FILE_FORMAT_GRP                               :0x0
14:26:06: COPY flag                                     :0x1
14:26:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:06: File_Format                                   :0x0
14:26:06: CRC                                           :0x0
14:26:06: ####CSD Registe Values####  

14:26:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:06: [GetSCRRegisterEntry] Passed
14:26:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:06: Data_Status_After Erases          : 0
14:26:06: CPRM Security Support             : No Security
14:26:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:06: Spec. Version                     : Version 3.0X
14:26:06: Extended Security Support         : Extended_Security_Not_Supported
14:26:06: Command Support                   : COMMAND_SUPPORT
14:26:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AB40>, <py_sfcl.CommandDataDefinition object at 0x06421840>) , Command count = 2971 ] 
14:26:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FE40>, <py_sfcl.CommandDataDefinition object at 0x064217B0>) , Command count = 2972 ] 
14:26:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:06: [ SetBusWidth(0x4) , Command count = 2973 ] 
14:26:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2974 ] 
14:26:06: Protected Area Size 0x28000
14:26:06: Bus Width           2
14:26:06: Secure Mode         0
14:26:06: Speed  Class        4
14:26:06: Perf Move           0
14:26:06: Au Size             9
14:26:06: Erase Size          15
14:26:06: Erase Timeout       1
14:26:06: Erase offset        1
14:26:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2975 ] 
14:26:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:06: Host Frequency set to 100000 KHz
14:26:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:06: ####CSD Registe 2.0 Values####
14:26:06: CSD_STRUCTURE                                 :0x1
14:26:06: Reserv1                                       :0x0
14:26:06: Time Access 1 TAAC                            :0xe
14:26:06: Time Access 2 NSAC*100                        :0x0
14:26:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:06: Card Command Classess CCC                     :0x5b5
14:26:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:06: DSR(driver stage register)  DSR_IMP           :0x0
14:26:06: Reserv2                                       :0x0
14:26:06: Device Size C_SIZE                            :0xedc8
14:26:06: Reserv3                                       :0x0
14:26:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:06: Reserv4                                       :0x0
14:26:06: Write Speed Factor R2W_FACTOR                 :0x2
14:26:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:06: FILE_FORMAT_GRP                               :0x0
14:26:06: COPY flag                                     :0x1
14:26:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:06: File_Format                                   :0x0
14:26:06: CRC                                           :0x0
14:26:06: ####CSD Registe Values####  

14:26:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064210F0>, <py_sfcl.CommandDataDefinition object at 0x0642AD50>) , Command count = 2976 ] 
14:26:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467C30>, <py_sfcl.CommandDataDefinition object at 0x06421510>) , Command count = 2977 ] 
14:26:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC60>, <py_sfcl.PySEnhancedCmdData object at 0x0642AC90>, <None>, <py_sfcl.Command23 object at 0x0642AA50>) , Command count = 2978 ] 
14:26:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 15
14:26:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642ADB0>, <py_sfcl.PySEnhancedCmdData object at 0x0642ADE0>, <None>, <py_sfcl.Command23 object at 0x0642A180>) , Command count = 2979 ] 
14:26:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467B10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B0C0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B210>, <None>, <py_sfcl.Command23 object at 0x0642A240>) , Command count = 2980 ] 
14:26:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:08: Host Frequency set to 25000 KHz
14:26:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:08: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E030>, 0x0, True) , Command count = 2981 ] 
14:26:08: [GO18_globalSetVolt]### Host voltage value is set.
14:26:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467300>, 0x0, False) , Command count = 2982 ] 
14:26:08: [GO18_globalSetVolt]### Host voltage value is set.
14:26:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2983 ] 
14:26:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2984 ] 
14:26:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:08: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2985 ] 
14:26:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E150>, <py_sfcl.CommandDataDefinition object at 0x0642E0F0>) , Command count = 2986 ] 
14:26:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421B70>, <py_sfcl.CommandDataDefinition object at 0x06421C90>) , Command count = 2987 ] 
14:26:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:08: [ SetCardRCA(0x1, 0xD555) , Command count = 2988 ] 
14:26:08: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:09: Host Frequency set to 25000 KHz
14:26:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:09: ####CSD Registe 2.0 Values####
14:26:09: CSD_STRUCTURE                                 :0x1
14:26:09: Reserv1                                       :0x0
14:26:09: Time Access 1 TAAC                            :0xe
14:26:09: Time Access 2 NSAC*100                        :0x0
14:26:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:09: Card Command Classess CCC                     :0x5b5
14:26:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:09: DSR(driver stage register)  DSR_IMP           :0x0
14:26:09: Reserv2                                       :0x0
14:26:09: Device Size C_SIZE                            :0xedc8
14:26:09: Reserv3                                       :0x0
14:26:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:09: Reserv4                                       :0x0
14:26:09: Write Speed Factor R2W_FACTOR                 :0x2
14:26:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:09: FILE_FORMAT_GRP                               :0x0
14:26:09: COPY flag                                     :0x1
14:26:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:09: File_Format                                   :0x0
14:26:09: CRC                                           :0x0
14:26:09: ####CSD Registe Values####  

14:26:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:09: [GetSCRRegisterEntry] Passed
14:26:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:09: Data_Status_After Erases          : 0
14:26:09: CPRM Security Support             : No Security
14:26:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:09: Spec. Version                     : Version 3.0X
14:26:09: Extended Security Support         : Extended_Security_Not_Supported
14:26:09: Command Support                   : COMMAND_SUPPORT
14:26:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A630>, <py_sfcl.CommandDataDefinition object at 0x06421CC0>) , Command count = 2989 ] 
14:26:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467810>, <py_sfcl.CommandDataDefinition object at 0x0642E240>) , Command count = 2990 ] 
14:26:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:09: [ SetBusWidth(0x4) , Command count = 2991 ] 
14:26:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2992 ] 
14:26:09: Protected Area Size 0x28000
14:26:09: Bus Width           2
14:26:09: Secure Mode         0
14:26:09: Speed  Class        4
14:26:09: Perf Move           0
14:26:09: Au Size             9
14:26:09: Erase Size          15
14:26:09: Erase Timeout       1
14:26:09: Erase offset        1
14:26:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2993 ] 
14:26:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:09: Host Frequency set to 100000 KHz
14:26:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:09: ####CSD Registe 2.0 Values####
14:26:09: CSD_STRUCTURE                                 :0x1
14:26:09: Reserv1                                       :0x0
14:26:09: Time Access 1 TAAC                            :0xe
14:26:09: Time Access 2 NSAC*100                        :0x0
14:26:09: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:09: Card Command Classess CCC                     :0x5b5
14:26:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:09: DSR(driver stage register)  DSR_IMP           :0x0
14:26:09: Reserv2                                       :0x0
14:26:09: Device Size C_SIZE                            :0xedc8
14:26:09: Reserv3                                       :0x0
14:26:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:09: Reserv4                                       :0x0
14:26:09: Write Speed Factor R2W_FACTOR                 :0x2
14:26:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:09: FILE_FORMAT_GRP                               :0x0
14:26:09: COPY flag                                     :0x1
14:26:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:09: File_Format                                   :0x0
14:26:09: CRC                                           :0x0
14:26:09: ####CSD Registe Values####  

14:26:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E210>, <py_sfcl.CommandDataDefinition object at 0x0642E180>) , Command count = 2994 ] 
14:26:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064676F0>, <py_sfcl.CommandDataDefinition object at 0x0642A1B0>) , Command count = 2995 ] 
14:26:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E330>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642AD20>, <None>, <py_sfcl.Command23 object at 0x0642AE10>) , Command count = 2996 ] 
14:26:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 14
14:26:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E690>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6C0>, <None>, <py_sfcl.Command23 object at 0x0642AB70>) , Command count = 2997 ] 
14:26:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064678D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B630>, <py_sfcl.PySEnhancedCmdData object at 0x0645B390>, <None>, <py_sfcl.Command23 object at 0x0642A120>) , Command count = 2998 ] 
14:26:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:09: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:11: Host Frequency set to 25000 KHz
14:26:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:11: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EA20>, 0x0, True) , Command count = 2999 ] 
14:26:11: [GO18_globalSetVolt]### Host voltage value is set.
14:26:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A600>, 0x0, False) , Command count = 3000 ] 
14:26:11: [GO18_globalSetVolt]### Host voltage value is set.
14:26:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3001 ] 
14:26:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3002 ] 
14:26:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3003 ] 
14:26:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E9C0>, <py_sfcl.CommandDataDefinition object at 0x0642AE70>) , Command count = 3004 ] 
14:26:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A9F0>, <py_sfcl.CommandDataDefinition object at 0x0642A690>) , Command count = 3005 ] 
14:26:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:11: [ SetCardRCA(0x1, 0xD555) , Command count = 3006 ] 
14:26:11: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:11: Host Frequency set to 25000 KHz
14:26:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:11: ####CSD Registe 2.0 Values####
14:26:11: CSD_STRUCTURE                                 :0x1
14:26:11: Reserv1                                       :0x0
14:26:11: Time Access 1 TAAC                            :0xe
14:26:11: Time Access 2 NSAC*100                        :0x0
14:26:11: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:11: Card Command Classess CCC                     :0x5b5
14:26:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:11: DSR(driver stage register)  DSR_IMP           :0x0
14:26:11: Reserv2                                       :0x0
14:26:11: Device Size C_SIZE                            :0xedc8
14:26:11: Reserv3                                       :0x0
14:26:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:11: Reserv4                                       :0x0
14:26:11: Write Speed Factor R2W_FACTOR                 :0x2
14:26:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:11: FILE_FORMAT_GRP                               :0x0
14:26:11: COPY flag                                     :0x1
14:26:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:11: File_Format                                   :0x0
14:26:11: CRC                                           :0x0
14:26:11: ####CSD Registe Values####  

14:26:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:11: [GetSCRRegisterEntry] Passed
14:26:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:11: Data_Status_After Erases          : 0
14:26:11: CPRM Security Support             : No Security
14:26:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:11: Spec. Version                     : Version 3.0X
14:26:11: Extended Security Support         : Extended_Security_Not_Supported
14:26:11: Command Support                   : COMMAND_SUPPORT
14:26:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ECC0>, <py_sfcl.CommandDataDefinition object at 0x0642A8D0>) , Command count = 3007 ] 
14:26:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421120>, <py_sfcl.CommandDataDefinition object at 0x0642A810>) , Command count = 3008 ] 
14:26:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:11: [ SetBusWidth(0x4) , Command count = 3009 ] 
14:26:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3010 ] 
14:26:11: Protected Area Size 0x28000
14:26:11: Bus Width           2
14:26:11: Secure Mode         0
14:26:11: Speed  Class        4
14:26:11: Perf Move           0
14:26:11: Au Size             9
14:26:11: Erase Size          15
14:26:11: Erase Timeout       1
14:26:11: Erase offset        1
14:26:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3011 ] 
14:26:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:11: Host Frequency set to 100000 KHz
14:26:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:11: ####CSD Registe 2.0 Values####
14:26:11: CSD_STRUCTURE                                 :0x1
14:26:11: Reserv1                                       :0x0
14:26:11: Time Access 1 TAAC                            :0xe
14:26:11: Time Access 2 NSAC*100                        :0x0
14:26:11: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:11: Card Command Classess CCC                     :0x5b5
14:26:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:11: DSR(driver stage register)  DSR_IMP           :0x0
14:26:11: Reserv2                                       :0x0
14:26:11: Device Size C_SIZE                            :0xedc8
14:26:11: Reserv3                                       :0x0
14:26:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:11: Reserv4                                       :0x0
14:26:11: Write Speed Factor R2W_FACTOR                 :0x2
14:26:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:11: FILE_FORMAT_GRP                               :0x0
14:26:11: COPY flag                                     :0x1
14:26:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:11: File_Format                                   :0x0
14:26:11: CRC                                           :0x0
14:26:11: ####CSD Registe Values####  

14:26:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EED0>, <py_sfcl.CommandDataDefinition object at 0x0642EBA0>) , Command count = 3012 ] 
14:26:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467D50>, <py_sfcl.CommandDataDefinition object at 0x0642A420>) , Command count = 3013 ] 
14:26:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642ECF0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EB10>, <py_sfcl.PySEnhancedCmdData object at 0x0642A660>, <None>, <py_sfcl.Command23 object at 0x0642A9C0>) , Command count = 3014 ] 
14:26:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 13
14:26:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064310F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642EF30>, <None>, <py_sfcl.Command23 object at 0x0642A300>) , Command count = 3015 ] 
14:26:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064211B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BDE0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BD20>, <None>, <py_sfcl.Command23 object at 0x0642AF30>) , Command count = 3016 ] 
14:26:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:14: Host Frequency set to 25000 KHz
14:26:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:14: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431300>, 0x0, True) , Command count = 3017 ] 
14:26:14: [GO18_globalSetVolt]### Host voltage value is set.
14:26:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451D50>, 0x0, False) , Command count = 3018 ] 
14:26:14: [GO18_globalSetVolt]### Host voltage value is set.
14:26:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3019 ] 
14:26:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3020 ] 
14:26:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3021 ] 
14:26:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312A0>, <py_sfcl.CommandDataDefinition object at 0x06431270>) , Command count = 3022 ] 
14:26:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C40B70>, <py_sfcl.CommandDataDefinition object at 0x0642E960>) , Command count = 3023 ] 
14:26:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:14: [ SetCardRCA(0x1, 0xD555) , Command count = 3024 ] 
14:26:14: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:14: Host Frequency set to 25000 KHz
14:26:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:14: ####CSD Registe 2.0 Values####
14:26:14: CSD_STRUCTURE                                 :0x1
14:26:14: Reserv1                                       :0x0
14:26:14: Time Access 1 TAAC                            :0xe
14:26:14: Time Access 2 NSAC*100                        :0x0
14:26:14: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:14: Card Command Classess CCC                     :0x5b5
14:26:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:14: DSR(driver stage register)  DSR_IMP           :0x0
14:26:14: Reserv2                                       :0x0
14:26:14: Device Size C_SIZE                            :0xedc8
14:26:14: Reserv3                                       :0x0
14:26:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:14: Reserv4                                       :0x0
14:26:14: Write Speed Factor R2W_FACTOR                 :0x2
14:26:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:14: FILE_FORMAT_GRP                               :0x0
14:26:14: COPY flag                                     :0x1
14:26:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:14: File_Format                                   :0x0
14:26:14: CRC                                           :0x0
14:26:14: ####CSD Registe Values####  

14:26:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:14: [GetSCRRegisterEntry] Passed
14:26:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:14: Data_Status_After Erases          : 0
14:26:14: CPRM Security Support             : No Security
14:26:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:14: Spec. Version                     : Version 3.0X
14:26:14: Extended Security Support         : Extended_Security_Not_Supported
14:26:14: Command Support                   : COMMAND_SUPPORT
14:26:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E8A0>, <py_sfcl.CommandDataDefinition object at 0x06431570>) , Command count = 3025 ] 
14:26:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421990>, <py_sfcl.CommandDataDefinition object at 0x0642A3C0>) , Command count = 3026 ] 
14:26:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:14: [ SetBusWidth(0x4) , Command count = 3027 ] 
14:26:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3028 ] 
14:26:14: Protected Area Size 0x28000
14:26:14: Bus Width           2
14:26:14: Secure Mode         0
14:26:14: Speed  Class        4
14:26:14: Perf Move           0
14:26:14: Au Size             9
14:26:14: Erase Size          15
14:26:14: Erase Timeout       1
14:26:14: Erase offset        1
14:26:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3029 ] 
14:26:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:14: Host Frequency set to 100000 KHz
14:26:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:14: ####CSD Registe 2.0 Values####
14:26:14: CSD_STRUCTURE                                 :0x1
14:26:14: Reserv1                                       :0x0
14:26:14: Time Access 1 TAAC                            :0xe
14:26:14: Time Access 2 NSAC*100                        :0x0
14:26:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:14: Card Command Classess CCC                     :0x5b5
14:26:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:14: DSR(driver stage register)  DSR_IMP           :0x0
14:26:14: Reserv2                                       :0x0
14:26:14: Device Size C_SIZE                            :0xedc8
14:26:14: Reserv3                                       :0x0
14:26:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:14: Reserv4                                       :0x0
14:26:14: Write Speed Factor R2W_FACTOR                 :0x2
14:26:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:14: FILE_FORMAT_GRP                               :0x0
14:26:14: COPY flag                                     :0x1
14:26:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:14: File_Format                                   :0x0
14:26:14: CRC                                           :0x0
14:26:14: ####CSD Registe Values####  

14:26:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7BD0>, <py_sfcl.CommandDataDefinition object at 0x05D7E1E0>) , Command count = 3030 ] 
14:26:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421AB0>, <py_sfcl.CommandDataDefinition object at 0x06431420>) , Command count = 3031 ] 
14:26:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A750>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064312D0>, <py_sfcl.PySEnhancedCmdData object at 0x06431360>, <None>, <py_sfcl.Command23 object at 0x0642EEA0>) , Command count = 3032 ] 
14:26:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 12
14:26:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7C30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431630>, <py_sfcl.PySEnhancedCmdData object at 0x0642E750>, <None>, <py_sfcl.Command23 object at 0x0642EFC0>) , Command count = 3033 ] 
14:26:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641FE10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B4B0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BE70>, <None>, <py_sfcl.Command23 object at 0x0642ED80>) , Command count = 3034 ] 
14:26:14: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:14: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:16: Host Frequency set to 25000 KHz
14:26:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:16: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAD180>, 0x0, True) , Command count = 3035 ] 
14:26:16: [GO18_globalSetVolt]### Host voltage value is set.
14:26:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421CF0>, 0x0, False) , Command count = 3036 ] 
14:26:16: [GO18_globalSetVolt]### Host voltage value is set.
14:26:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3037 ] 
14:26:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3038 ] 
14:26:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3039 ] 
14:26:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F90>, <py_sfcl.CommandDataDefinition object at 0x05DA7960>) , Command count = 3040 ] 
14:26:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADD50>, <py_sfcl.CommandDataDefinition object at 0x0642E4B0>) , Command count = 3041 ] 
14:26:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:17: [ SetCardRCA(0x1, 0xD555) , Command count = 3042 ] 
14:26:17: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:17: Host Frequency set to 25000 KHz
14:26:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:17: ####CSD Registe 2.0 Values####
14:26:17: CSD_STRUCTURE                                 :0x1
14:26:17: Reserv1                                       :0x0
14:26:17: Time Access 1 TAAC                            :0xe
14:26:17: Time Access 2 NSAC*100                        :0x0
14:26:17: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:17: Card Command Classess CCC                     :0x5b5
14:26:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:17: DSR(driver stage register)  DSR_IMP           :0x0
14:26:17: Reserv2                                       :0x0
14:26:17: Device Size C_SIZE                            :0xedc8
14:26:17: Reserv3                                       :0x0
14:26:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:17: Reserv4                                       :0x0
14:26:17: Write Speed Factor R2W_FACTOR                 :0x2
14:26:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:17: FILE_FORMAT_GRP                               :0x0
14:26:17: COPY flag                                     :0x1
14:26:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:17: File_Format                                   :0x0
14:26:17: CRC                                           :0x0
14:26:17: ####CSD Registe Values####  

14:26:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:17: [GetSCRRegisterEntry] Passed
14:26:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:17: Data_Status_After Erases          : 0
14:26:17: CPRM Security Support             : No Security
14:26:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:17: Spec. Version                     : Version 3.0X
14:26:17: Extended Security Support         : Extended_Security_Not_Supported
14:26:17: Command Support                   : COMMAND_SUPPORT
14:26:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8A80>, <py_sfcl.CommandDataDefinition object at 0x06431A80>) , Command count = 3043 ] 
14:26:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A270>, <py_sfcl.CommandDataDefinition object at 0x0642EDE0>) , Command count = 3044 ] 
14:26:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:17: [ SetBusWidth(0x4) , Command count = 3045 ] 
14:26:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B8D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3046 ] 
14:26:17: Protected Area Size 0x28000
14:26:17: Bus Width           2
14:26:17: Secure Mode         0
14:26:17: Speed  Class        4
14:26:17: Perf Move           0
14:26:17: Au Size             9
14:26:17: Erase Size          15
14:26:17: Erase Timeout       1
14:26:17: Erase offset        1
14:26:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3047 ] 
14:26:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:17: Host Frequency set to 100000 KHz
14:26:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:17: ####CSD Registe 2.0 Values####
14:26:17: CSD_STRUCTURE                                 :0x1
14:26:17: Reserv1                                       :0x0
14:26:17: Time Access 1 TAAC                            :0xe
14:26:17: Time Access 2 NSAC*100                        :0x0
14:26:17: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:17: Card Command Classess CCC                     :0x5b5
14:26:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:17: DSR(driver stage register)  DSR_IMP           :0x0
14:26:17: Reserv2                                       :0x0
14:26:17: Device Size C_SIZE                            :0xedc8
14:26:17: Reserv3                                       :0x0
14:26:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:17: Reserv4                                       :0x0
14:26:17: Write Speed Factor R2W_FACTOR                 :0x2
14:26:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:17: FILE_FORMAT_GRP                               :0x0
14:26:17: COPY flag                                     :0x1
14:26:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:17: File_Format                                   :0x0
14:26:17: CRC                                           :0x0
14:26:17: ####CSD Registe Values####  

14:26:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D91180>, <py_sfcl.CommandDataDefinition object at 0x05D91210>) , Command count = 3048 ] 
14:26:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064313C0>, <py_sfcl.CommandDataDefinition object at 0x0642EE70>) , Command count = 3049 ] 
14:26:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF7E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431660>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6F0>, <None>, <py_sfcl.Command23 object at 0x0642E5A0>) , Command count = 3050 ] 
14:26:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 11
14:26:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF810>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431B40>, <py_sfcl.PySEnhancedCmdData object at 0x06431B70>, <None>, <py_sfcl.Command23 object at 0x0642E480>) , Command count = 3051 ] 
14:26:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064215D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BCF0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BE70>, <None>, <py_sfcl.Command23 object at 0x0642EB40>) , Command count = 3052 ] 
14:26:17: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:17: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:19: Host Frequency set to 25000 KHz
14:26:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:19: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF960>, 0x0, True) , Command count = 3053 ] 
14:26:19: [GO18_globalSetVolt]### Host voltage value is set.
14:26:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E1E0>, 0x0, False) , Command count = 3054 ] 
14:26:19: [GO18_globalSetVolt]### Host voltage value is set.
14:26:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3055 ] 
14:26:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3056 ] 
14:26:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3057 ] 
14:26:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB10>, <py_sfcl.CommandDataDefinition object at 0x05DA7C60>) , Command count = 3058 ] 
14:26:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFBA0>, <py_sfcl.CommandDataDefinition object at 0x0642EE40>) , Command count = 3059 ] 
14:26:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:19: [ SetCardRCA(0x1, 0xD555) , Command count = 3060 ] 
14:26:19: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:20: Host Frequency set to 25000 KHz
14:26:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:20: ####CSD Registe 2.0 Values####
14:26:20: CSD_STRUCTURE                                 :0x1
14:26:20: Reserv1                                       :0x0
14:26:20: Time Access 1 TAAC                            :0xe
14:26:20: Time Access 2 NSAC*100                        :0x0
14:26:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:20: Card Command Classess CCC                     :0x5b5
14:26:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:20: DSR(driver stage register)  DSR_IMP           :0x0
14:26:20: Reserv2                                       :0x0
14:26:20: Device Size C_SIZE                            :0xedc8
14:26:20: Reserv3                                       :0x0
14:26:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:20: Reserv4                                       :0x0
14:26:20: Write Speed Factor R2W_FACTOR                 :0x2
14:26:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:20: FILE_FORMAT_GRP                               :0x0
14:26:20: COPY flag                                     :0x1
14:26:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:20: File_Format                                   :0x0
14:26:20: CRC                                           :0x0
14:26:20: ####CSD Registe Values####  

14:26:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:20: [GetSCRRegisterEntry] Passed
14:26:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:20: Data_Status_After Erases          : 0
14:26:20: CPRM Security Support             : No Security
14:26:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:20: Spec. Version                     : Version 3.0X
14:26:20: Extended Security Support         : Extended_Security_Not_Supported
14:26:20: Command Support                   : COMMAND_SUPPORT
14:26:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB40>, <py_sfcl.CommandDataDefinition object at 0x06431FC0>) , Command count = 3061 ] 
14:26:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AB10>, <py_sfcl.CommandDataDefinition object at 0x0642E300>) , Command count = 3062 ] 
14:26:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:20: [ SetBusWidth(0x4) , Command count = 3063 ] 
14:26:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3064 ] 
14:26:20: Protected Area Size 0x28000
14:26:20: Bus Width           2
14:26:20: Secure Mode         0
14:26:20: Speed  Class        4
14:26:20: Perf Move           0
14:26:20: Au Size             9
14:26:20: Erase Size          15
14:26:20: Erase Timeout       1
14:26:20: Erase offset        1
14:26:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3065 ] 
14:26:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:20: Host Frequency set to 100000 KHz
14:26:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:20: ####CSD Registe 2.0 Values####
14:26:20: CSD_STRUCTURE                                 :0x1
14:26:20: Reserv1                                       :0x0
14:26:20: Time Access 1 TAAC                            :0xe
14:26:20: Time Access 2 NSAC*100                        :0x0
14:26:20: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:20: Card Command Classess CCC                     :0x5b5
14:26:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:20: DSR(driver stage register)  DSR_IMP           :0x0
14:26:20: Reserv2                                       :0x0
14:26:20: Device Size C_SIZE                            :0xedc8
14:26:20: Reserv3                                       :0x0
14:26:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:20: Reserv4                                       :0x0
14:26:20: Write Speed Factor R2W_FACTOR                 :0x2
14:26:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:20: FILE_FORMAT_GRP                               :0x0
14:26:20: COPY flag                                     :0x1
14:26:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:20: File_Format                                   :0x0
14:26:20: CRC                                           :0x0
14:26:20: ####CSD Registe Values####  

14:26:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E14B0>, <py_sfcl.CommandDataDefinition object at 0x05DEFE10>) , Command count = 3066 ] 
14:26:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E990>, <py_sfcl.CommandDataDefinition object at 0x0642E600>) , Command count = 3067 ] 
14:26:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF60>, <py_sfcl.PySEnhancedCmdData object at 0x06431090>, <None>, <py_sfcl.Command23 object at 0x06431750>) , Command count = 3068 ] 
14:26:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 10
14:26:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DAD3F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431E10>, <py_sfcl.PySEnhancedCmdData object at 0x06431F90>, <None>, <py_sfcl.Command23 object at 0x06431030>) , Command count = 3069 ] 
14:26:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A570>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B7B0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B900>, <None>, <py_sfcl.Command23 object at 0x0642A330>) , Command count = 3070 ] 
14:26:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:20: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:22: Host Frequency set to 25000 KHz
14:26:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:22: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x064140F0>, 0x0, True) , Command count = 3071 ] 
14:26:22: [GO18_globalSetVolt]### Host voltage value is set.
14:26:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431D20>, 0x0, False) , Command count = 3072 ] 
14:26:22: [GO18_globalSetVolt]### Host voltage value is set.
14:26:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3073 ] 
14:26:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3074 ] 
14:26:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3075 ] 
14:26:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414690>, <py_sfcl.CommandDataDefinition object at 0x06414B40>) , Command count = 3076 ] 
14:26:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431F30>, <py_sfcl.CommandDataDefinition object at 0x0642E0C0>) , Command count = 3077 ] 
14:26:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:22: [ SetCardRCA(0x1, 0xD555) , Command count = 3078 ] 
14:26:22: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:22: Host Frequency set to 25000 KHz
14:26:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:22: ####CSD Registe 2.0 Values####
14:26:22: CSD_STRUCTURE                                 :0x1
14:26:22: Reserv1                                       :0x0
14:26:22: Time Access 1 TAAC                            :0xe
14:26:22: Time Access 2 NSAC*100                        :0x0
14:26:22: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:22: Card Command Classess CCC                     :0x5b5
14:26:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:22: DSR(driver stage register)  DSR_IMP           :0x0
14:26:22: Reserv2                                       :0x0
14:26:22: Device Size C_SIZE                            :0xedc8
14:26:22: Reserv3                                       :0x0
14:26:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:22: Reserv4                                       :0x0
14:26:22: Write Speed Factor R2W_FACTOR                 :0x2
14:26:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:22: FILE_FORMAT_GRP                               :0x0
14:26:22: COPY flag                                     :0x1
14:26:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:22: File_Format                                   :0x0
14:26:22: CRC                                           :0x0
14:26:22: ####CSD Registe Values####  

14:26:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:22: [GetSCRRegisterEntry] Passed
14:26:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:22: Data_Status_After Erases          : 0
14:26:22: CPRM Security Support             : No Security
14:26:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:22: Spec. Version                     : Version 3.0X
14:26:22: Extended Security Support         : Extended_Security_Not_Supported
14:26:22: Command Support                   : COMMAND_SUPPORT
14:26:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414360>, <py_sfcl.CommandDataDefinition object at 0x06431EA0>) , Command count = 3079 ] 
14:26:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E3F0>, <py_sfcl.CommandDataDefinition object at 0x06431240>) , Command count = 3080 ] 
14:26:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:22: [ SetBusWidth(0x4) , Command count = 3081 ] 
14:26:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3082 ] 
14:26:22: Protected Area Size 0x28000
14:26:22: Bus Width           2
14:26:22: Secure Mode         0
14:26:22: Speed  Class        4
14:26:22: Perf Move           0
14:26:22: Au Size             9
14:26:22: Erase Size          15
14:26:22: Erase Timeout       1
14:26:22: Erase offset        1
14:26:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3083 ] 
14:26:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:22: Host Frequency set to 100000 KHz
14:26:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:22: ####CSD Registe 2.0 Values####
14:26:22: CSD_STRUCTURE                                 :0x1
14:26:22: Reserv1                                       :0x0
14:26:22: Time Access 1 TAAC                            :0xe
14:26:22: Time Access 2 NSAC*100                        :0x0
14:26:22: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:22: Card Command Classess CCC                     :0x5b5
14:26:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:22: DSR(driver stage register)  DSR_IMP           :0x0
14:26:22: Reserv2                                       :0x0
14:26:22: Device Size C_SIZE                            :0xedc8
14:26:22: Reserv3                                       :0x0
14:26:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:22: Reserv4                                       :0x0
14:26:22: Write Speed Factor R2W_FACTOR                 :0x2
14:26:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:22: FILE_FORMAT_GRP                               :0x0
14:26:22: COPY flag                                     :0x1
14:26:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:22: File_Format                                   :0x0
14:26:22: CRC                                           :0x0
14:26:22: ####CSD Registe Values####  

14:26:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431960>, <py_sfcl.CommandDataDefinition object at 0x06431AE0>) , Command count = 3084 ] 
14:26:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431510>, <py_sfcl.CommandDataDefinition object at 0x06431540>) , Command count = 3085 ] 
14:26:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414300>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F60>, <py_sfcl.PySEnhancedCmdData object at 0x064316C0>, <None>, <py_sfcl.Command23 object at 0x06431810>) , Command count = 3086 ] 
14:26:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 9
14:26:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E1060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414900>, <py_sfcl.PySEnhancedCmdData object at 0x06431C60>, <None>, <py_sfcl.Command23 object at 0x064311B0>) , Command count = 3087 ] 
14:26:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A6C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431180>, <py_sfcl.PySEnhancedCmdData object at 0x0645B5D0>, <None>, <py_sfcl.Command23 object at 0x06431DE0>) , Command count = 3088 ] 
14:26:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:25: Host Frequency set to 25000 KHz
14:26:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x064517B0>, 0x0, True) , Command count = 3089 ] 
14:26:25: [GO18_globalSetVolt]### Host voltage value is set.
14:26:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467CF0>, 0x0, False) , Command count = 3090 ] 
14:26:25: [GO18_globalSetVolt]### Host voltage value is set.
14:26:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3091 ] 
14:26:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3092 ] 
14:26:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3093 ] 
14:26:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414DE0>, <py_sfcl.CommandDataDefinition object at 0x06451540>) , Command count = 3094 ] 
14:26:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414060>, <py_sfcl.CommandDataDefinition object at 0x06431120>) , Command count = 3095 ] 
14:26:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:25: [ SetCardRCA(0x1, 0xD555) , Command count = 3096 ] 
14:26:25: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:25: Host Frequency set to 25000 KHz
14:26:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:25: ####CSD Registe 2.0 Values####
14:26:25: CSD_STRUCTURE                                 :0x1
14:26:25: Reserv1                                       :0x0
14:26:25: Time Access 1 TAAC                            :0xe
14:26:25: Time Access 2 NSAC*100                        :0x0
14:26:25: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:25: Card Command Classess CCC                     :0x5b5
14:26:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:25: DSR(driver stage register)  DSR_IMP           :0x0
14:26:25: Reserv2                                       :0x0
14:26:25: Device Size C_SIZE                            :0xedc8
14:26:25: Reserv3                                       :0x0
14:26:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:25: Reserv4                                       :0x0
14:26:25: Write Speed Factor R2W_FACTOR                 :0x2
14:26:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:25: FILE_FORMAT_GRP                               :0x0
14:26:25: COPY flag                                     :0x1
14:26:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:25: File_Format                                   :0x0
14:26:25: CRC                                           :0x0
14:26:25: ####CSD Registe Values####  

14:26:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:25: [GetSCRRegisterEntry] Passed
14:26:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:25: Data_Status_After Erases          : 0
14:26:25: CPRM Security Support             : No Security
14:26:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:25: Spec. Version                     : Version 3.0X
14:26:25: Extended Security Support         : Extended_Security_Not_Supported
14:26:25: Command Support                   : COMMAND_SUPPORT
14:26:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1A80>, <py_sfcl.CommandDataDefinition object at 0x064149F0>) , Command count = 3097 ] 
14:26:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EC90>, <py_sfcl.CommandDataDefinition object at 0x064310C0>) , Command count = 3098 ] 
14:26:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:25: [ SetBusWidth(0x4) , Command count = 3099 ] 
14:26:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3100 ] 
14:26:25: Protected Area Size 0x28000
14:26:25: Bus Width           2
14:26:25: Secure Mode         0
14:26:25: Speed  Class        4
14:26:25: Perf Move           0
14:26:25: Au Size             9
14:26:25: Erase Size          15
14:26:25: Erase Timeout       1
14:26:25: Erase offset        1
14:26:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3101 ] 
14:26:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:25: Host Frequency set to 100000 KHz
14:26:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:25: ####CSD Registe 2.0 Values####
14:26:25: CSD_STRUCTURE                                 :0x1
14:26:25: Reserv1                                       :0x0
14:26:25: Time Access 1 TAAC                            :0xe
14:26:25: Time Access 2 NSAC*100                        :0x0
14:26:25: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:25: Card Command Classess CCC                     :0x5b5
14:26:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:25: DSR(driver stage register)  DSR_IMP           :0x0
14:26:25: Reserv2                                       :0x0
14:26:25: Device Size C_SIZE                            :0xedc8
14:26:25: Reserv3                                       :0x0
14:26:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:25: Reserv4                                       :0x0
14:26:25: Write Speed Factor R2W_FACTOR                 :0x2
14:26:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:25: FILE_FORMAT_GRP                               :0x0
14:26:25: COPY flag                                     :0x1
14:26:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:25: File_Format                                   :0x0
14:26:25: CRC                                           :0x0
14:26:25: ####CSD Registe Values####  

14:26:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431D50>, <py_sfcl.CommandDataDefinition object at 0x06431C00>) , Command count = 3102 ] 
14:26:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ABD0>, <py_sfcl.CommandDataDefinition object at 0x06431AB0>) , Command count = 3103 ] 
14:26:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E11E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064144B0>, <py_sfcl.PySEnhancedCmdData object at 0x06451B10>, <None>, <py_sfcl.Command23 object at 0x064315A0>) , Command count = 3104 ] 
14:26:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 8
14:26:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431D80>, <py_sfcl.PySEnhancedCmdData object at 0x06431B10>, <None>, <py_sfcl.Command23 object at 0x06431CC0>) , Command count = 3105 ] 
14:26:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642ED50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431BD0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BC00>, <None>, <py_sfcl.Command23 object at 0x06431A20>) , Command count = 3106 ] 
14:26:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:25: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:27: Host Frequency set to 25000 KHz
14:26:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x064516C0>, 0x0, True) , Command count = 3107 ] 
14:26:27: [GO18_globalSetVolt]### Host voltage value is set.
14:26:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DA7F60>, 0x0, False) , Command count = 3108 ] 
14:26:27: [GO18_globalSetVolt]### Host voltage value is set.
14:26:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3109 ] 
14:26:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3110 ] 
14:26:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3111 ] 
14:26:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F120>, <py_sfcl.CommandDataDefinition object at 0x064519C0>) , Command count = 3112 ] 
14:26:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451BA0>, <py_sfcl.CommandDataDefinition object at 0x062E1330>) , Command count = 3113 ] 
14:26:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:28: [ SetCardRCA(0x1, 0xD555) , Command count = 3114 ] 
14:26:28: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:28: Host Frequency set to 25000 KHz
14:26:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:28: ####CSD Registe 2.0 Values####
14:26:28: CSD_STRUCTURE                                 :0x1
14:26:28: Reserv1                                       :0x0
14:26:28: Time Access 1 TAAC                            :0xe
14:26:28: Time Access 2 NSAC*100                        :0x0
14:26:28: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:28: Card Command Classess CCC                     :0x5b5
14:26:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:28: DSR(driver stage register)  DSR_IMP           :0x0
14:26:28: Reserv2                                       :0x0
14:26:28: Device Size C_SIZE                            :0xedc8
14:26:28: Reserv3                                       :0x0
14:26:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:28: Reserv4                                       :0x0
14:26:28: Write Speed Factor R2W_FACTOR                 :0x2
14:26:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:28: FILE_FORMAT_GRP                               :0x0
14:26:28: COPY flag                                     :0x1
14:26:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:28: File_Format                                   :0x0
14:26:28: CRC                                           :0x0
14:26:28: ####CSD Registe Values####  

14:26:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:28: [GetSCRRegisterEntry] Passed
14:26:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:28: Data_Status_After Erases          : 0
14:26:28: CPRM Security Support             : No Security
14:26:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:28: Spec. Version                     : Version 3.0X
14:26:28: Extended Security Support         : Extended_Security_Not_Supported
14:26:28: Command Support                   : COMMAND_SUPPORT
14:26:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451780>, <py_sfcl.CommandDataDefinition object at 0x06451D20>) , Command count = 3115 ] 
14:26:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AFC0>, <py_sfcl.CommandDataDefinition object at 0x0642E870>) , Command count = 3116 ] 
14:26:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:28: [ SetBusWidth(0x4) , Command count = 3117 ] 
14:26:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B3C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3118 ] 
14:26:28: Protected Area Size 0x28000
14:26:28: Bus Width           2
14:26:28: Secure Mode         0
14:26:28: Speed  Class        4
14:26:28: Perf Move           0
14:26:28: Au Size             9
14:26:28: Erase Size          15
14:26:28: Erase Timeout       1
14:26:28: Erase offset        1
14:26:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3119 ] 
14:26:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:28: Host Frequency set to 100000 KHz
14:26:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:28: ####CSD Registe 2.0 Values####
14:26:28: CSD_STRUCTURE                                 :0x1
14:26:28: Reserv1                                       :0x0
14:26:28: Time Access 1 TAAC                            :0xe
14:26:28: Time Access 2 NSAC*100                        :0x0
14:26:28: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:28: Card Command Classess CCC                     :0x5b5
14:26:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:28: DSR(driver stage register)  DSR_IMP           :0x0
14:26:28: Reserv2                                       :0x0
14:26:28: Device Size C_SIZE                            :0xedc8
14:26:28: Reserv3                                       :0x0
14:26:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:28: Reserv4                                       :0x0
14:26:28: Write Speed Factor R2W_FACTOR                 :0x2
14:26:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:28: FILE_FORMAT_GRP                               :0x0
14:26:28: COPY flag                                     :0x1
14:26:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:28: File_Format                                   :0x0
14:26:28: CRC                                           :0x0
14:26:28: ####CSD Registe Values####  

14:26:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451630>, <py_sfcl.CommandDataDefinition object at 0x06451570>) , Command count = 3120 ] 
14:26:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E4E0>, <py_sfcl.CommandDataDefinition object at 0x06451870>) , Command count = 3121 ] 
14:26:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F1E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06451EA0>, <py_sfcl.PySEnhancedCmdData object at 0x064518A0>, <None>, <py_sfcl.Command23 object at 0x06451BD0>) , Command count = 3122 ] 
14:26:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 7
14:26:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F4B0>, <py_sfcl.PySEnhancedCmdData object at 0x06414A50>, <None>, <py_sfcl.Command23 object at 0x06451900>) , Command count = 3123 ] 
14:26:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E780>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414990>, <py_sfcl.PySEnhancedCmdData object at 0x0645B6C0>, <None>, <py_sfcl.Command23 object at 0x06414600>) , Command count = 3124 ] 
14:26:28: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:28: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:30: Host Frequency set to 25000 KHz
14:26:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:30: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB10>, 0x0, True) , Command count = 3125 ] 
14:26:30: [GO18_globalSetVolt]### Host voltage value is set.
14:26:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421ED0>, 0x0, False) , Command count = 3126 ] 
14:26:30: [GO18_globalSetVolt]### Host voltage value is set.
14:26:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3127 ] 
14:26:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3128 ] 
14:26:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3129 ] 
14:26:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FFC0>, <py_sfcl.CommandDataDefinition object at 0x06451E40>) , Command count = 3130 ] 
14:26:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451840>, <py_sfcl.CommandDataDefinition object at 0x06414FC0>) , Command count = 3131 ] 
14:26:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:30: [ SetCardRCA(0x1, 0xD555) , Command count = 3132 ] 
14:26:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:31: Host Frequency set to 25000 KHz
14:26:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:31: ####CSD Registe 2.0 Values####
14:26:31: CSD_STRUCTURE                                 :0x1
14:26:31: Reserv1                                       :0x0
14:26:31: Time Access 1 TAAC                            :0xe
14:26:31: Time Access 2 NSAC*100                        :0x0
14:26:31: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:31: Card Command Classess CCC                     :0x5b5
14:26:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:31: DSR(driver stage register)  DSR_IMP           :0x0
14:26:31: Reserv2                                       :0x0
14:26:31: Device Size C_SIZE                            :0xedc8
14:26:31: Reserv3                                       :0x0
14:26:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:31: Reserv4                                       :0x0
14:26:31: Write Speed Factor R2W_FACTOR                 :0x2
14:26:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:31: FILE_FORMAT_GRP                               :0x0
14:26:31: COPY flag                                     :0x1
14:26:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:31: File_Format                                   :0x0
14:26:31: CRC                                           :0x0
14:26:31: ####CSD Registe Values####  

14:26:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:31: [GetSCRRegisterEntry] Passed
14:26:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:31: Data_Status_After Erases          : 0
14:26:31: CPRM Security Support             : No Security
14:26:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:31: Spec. Version                     : Version 3.0X
14:26:31: Extended Security Support         : Extended_Security_Not_Supported
14:26:31: Command Support                   : COMMAND_SUPPORT
14:26:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451600>, <py_sfcl.CommandDataDefinition object at 0x0641FB70>) , Command count = 3133 ] 
14:26:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EA80>, <py_sfcl.CommandDataDefinition object at 0x0641FC30>) , Command count = 3134 ] 
14:26:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:31: [ SetBusWidth(0x4) , Command count = 3135 ] 
14:26:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BC30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3136 ] 
14:26:31: Protected Area Size 0x28000
14:26:31: Bus Width           2
14:26:31: Secure Mode         0
14:26:31: Speed  Class        4
14:26:31: Perf Move           0
14:26:31: Au Size             9
14:26:31: Erase Size          15
14:26:31: Erase Timeout       1
14:26:31: Erase offset        1
14:26:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3137 ] 
14:26:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:31: Host Frequency set to 100000 KHz
14:26:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:31: ####CSD Registe 2.0 Values####
14:26:31: CSD_STRUCTURE                                 :0x1
14:26:31: Reserv1                                       :0x0
14:26:31: Time Access 1 TAAC                            :0xe
14:26:31: Time Access 2 NSAC*100                        :0x0
14:26:31: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:31: Card Command Classess CCC                     :0x5b5
14:26:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:31: DSR(driver stage register)  DSR_IMP           :0x0
14:26:31: Reserv2                                       :0x0
14:26:31: Device Size C_SIZE                            :0xedc8
14:26:31: Reserv3                                       :0x0
14:26:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:31: Reserv4                                       :0x0
14:26:31: Write Speed Factor R2W_FACTOR                 :0x2
14:26:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:31: FILE_FORMAT_GRP                               :0x0
14:26:31: COPY flag                                     :0x1
14:26:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:31: File_Format                                   :0x0
14:26:31: CRC                                           :0x0
14:26:31: ####CSD Registe Values####  

14:26:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467060>, <py_sfcl.CommandDataDefinition object at 0x0641FF90>) , Command count = 3138 ] 
14:26:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7FC0>, <py_sfcl.CommandDataDefinition object at 0x064148A0>) , Command count = 3139 ] 
14:26:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064671E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467210>, <py_sfcl.PySEnhancedCmdData object at 0x06467240>, <None>, <py_sfcl.Command23 object at 0x0641F660>) , Command count = 3140 ] 
14:26:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 6
14:26:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064670C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064670F0>, <py_sfcl.PySEnhancedCmdData object at 0x06467120>, <None>, <py_sfcl.Command23 object at 0x064146F0>) , Command count = 3141 ] 
14:26:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431480>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F210>, <py_sfcl.PySEnhancedCmdData object at 0x0645B660>, <None>, <py_sfcl.Command23 object at 0x06431DB0>) , Command count = 3142 ] 
14:26:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:31: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:33: Host Frequency set to 25000 KHz
14:26:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x064675A0>, 0x0, True) , Command count = 3143 ] 
14:26:33: [GO18_globalSetVolt]### Host voltage value is set.
14:26:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF840>, 0x0, False) , Command count = 3144 ] 
14:26:33: [GO18_globalSetVolt]### Host voltage value is set.
14:26:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3145 ] 
14:26:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3146 ] 
14:26:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3147 ] 
14:26:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467540>, <py_sfcl.CommandDataDefinition object at 0x064674E0>) , Command count = 3148 ] 
14:26:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467840>, <py_sfcl.CommandDataDefinition object at 0x064313F0>) , Command count = 3149 ] 
14:26:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:33: [ SetCardRCA(0x1, 0xD555) , Command count = 3150 ] 
14:26:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:33: Host Frequency set to 25000 KHz
14:26:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:33: ####CSD Registe 2.0 Values####
14:26:33: CSD_STRUCTURE                                 :0x1
14:26:33: Reserv1                                       :0x0
14:26:33: Time Access 1 TAAC                            :0xe
14:26:33: Time Access 2 NSAC*100                        :0x0
14:26:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:33: Card Command Classess CCC                     :0x5b5
14:26:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:33: DSR(driver stage register)  DSR_IMP           :0x0
14:26:33: Reserv2                                       :0x0
14:26:33: Device Size C_SIZE                            :0xedc8
14:26:33: Reserv3                                       :0x0
14:26:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:33: Reserv4                                       :0x0
14:26:33: Write Speed Factor R2W_FACTOR                 :0x2
14:26:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:33: FILE_FORMAT_GRP                               :0x0
14:26:33: COPY flag                                     :0x1
14:26:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:33: File_Format                                   :0x0
14:26:33: CRC                                           :0x0
14:26:33: ####CSD Registe Values####  

14:26:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:33: [GetSCRRegisterEntry] Passed
14:26:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:33: Data_Status_After Erases          : 0
14:26:33: CPRM Security Support             : No Security
14:26:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:33: Spec. Version                     : Version 3.0X
14:26:33: Extended Security Support         : Extended_Security_Not_Supported
14:26:33: Command Support                   : COMMAND_SUPPORT
14:26:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467660>, <py_sfcl.CommandDataDefinition object at 0x0641FDE0>) , Command count = 3151 ] 
14:26:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064311E0>, <py_sfcl.CommandDataDefinition object at 0x0641F2D0>) , Command count = 3152 ] 
14:26:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:33: [ SetBusWidth(0x4) , Command count = 3153 ] 
14:26:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BBD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3154 ] 
14:26:33: Protected Area Size 0x28000
14:26:33: Bus Width           2
14:26:33: Secure Mode         0
14:26:33: Speed  Class        4
14:26:33: Perf Move           0
14:26:33: Au Size             9
14:26:33: Erase Size          15
14:26:33: Erase Timeout       1
14:26:33: Erase offset        1
14:26:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3155 ] 
14:26:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:33: Host Frequency set to 100000 KHz
14:26:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:33: ####CSD Registe 2.0 Values####
14:26:33: CSD_STRUCTURE                                 :0x1
14:26:33: Reserv1                                       :0x0
14:26:33: Time Access 1 TAAC                            :0xe
14:26:33: Time Access 2 NSAC*100                        :0x0
14:26:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:33: Card Command Classess CCC                     :0x5b5
14:26:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:33: DSR(driver stage register)  DSR_IMP           :0x0
14:26:33: Reserv2                                       :0x0
14:26:33: Device Size C_SIZE                            :0xedc8
14:26:33: Reserv3                                       :0x0
14:26:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:33: Reserv4                                       :0x0
14:26:33: Write Speed Factor R2W_FACTOR                 :0x2
14:26:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:33: FILE_FORMAT_GRP                               :0x0
14:26:33: COPY flag                                     :0x1
14:26:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:33: File_Format                                   :0x0
14:26:33: CRC                                           :0x0
14:26:33: ####CSD Registe Values####  

14:26:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467A50>, <py_sfcl.CommandDataDefinition object at 0x0641F030>) , Command count = 3156 ] 
14:26:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFAE0>, <py_sfcl.CommandDataDefinition object at 0x0641F540>) , Command count = 3157 ] 
14:26:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467990>, <py_sfcl.PySEnhancedCmdData object at 0x064679C0>, <None>, <py_sfcl.Command23 object at 0x0641F240>) , Command count = 3158 ] 
14:26:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 5
14:26:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06467AE0>, <None>, <py_sfcl.Command23 object at 0x0641F090>) , Command count = 3159 ] 
14:26:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064515D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BE10>, <py_sfcl.PySEnhancedCmdData object at 0x0645B660>, <None>, <py_sfcl.Command23 object at 0x0641FD80>) , Command count = 3160 ] 
14:26:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:33: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:36: Host Frequency set to 25000 KHz
14:26:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:36: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467E40>, 0x0, True) , Command count = 3161 ] 
14:26:36: [GO18_globalSetVolt]### Host voltage value is set.
14:26:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421630>, 0x0, False) , Command count = 3162 ] 
14:26:36: [GO18_globalSetVolt]### Host voltage value is set.
14:26:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3163 ] 
14:26:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3164 ] 
14:26:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3165 ] 
14:26:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F510>, <py_sfcl.CommandDataDefinition object at 0x0641FC00>) , Command count = 3166 ] 
14:26:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467E10>, <py_sfcl.CommandDataDefinition object at 0x06467DB0>) , Command count = 3167 ] 
14:26:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:36: [ SetCardRCA(0x1, 0xD555) , Command count = 3168 ] 
14:26:36: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:36: Host Frequency set to 25000 KHz
14:26:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:36: ####CSD Registe 2.0 Values####
14:26:36: CSD_STRUCTURE                                 :0x1
14:26:36: Reserv1                                       :0x0
14:26:36: Time Access 1 TAAC                            :0xe
14:26:36: Time Access 2 NSAC*100                        :0x0
14:26:36: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:36: Card Command Classess CCC                     :0x5b5
14:26:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:36: DSR(driver stage register)  DSR_IMP           :0x0
14:26:36: Reserv2                                       :0x0
14:26:36: Device Size C_SIZE                            :0xedc8
14:26:36: Reserv3                                       :0x0
14:26:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:36: Reserv4                                       :0x0
14:26:36: Write Speed Factor R2W_FACTOR                 :0x2
14:26:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:36: FILE_FORMAT_GRP                               :0x0
14:26:36: COPY flag                                     :0x1
14:26:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:36: File_Format                                   :0x0
14:26:36: CRC                                           :0x0
14:26:36: ####CSD Registe Values####  

14:26:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:36: [GetSCRRegisterEntry] Passed
14:26:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:36: Data_Status_After Erases          : 0
14:26:36: CPRM Security Support             : No Security
14:26:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:36: Spec. Version                     : Version 3.0X
14:26:36: Extended Security Support         : Extended_Security_Not_Supported
14:26:36: Command Support                   : COMMAND_SUPPORT
14:26:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421030>, <py_sfcl.CommandDataDefinition object at 0x06467F00>) , Command count = 3169 ] 
14:26:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1300>, <py_sfcl.CommandDataDefinition object at 0x06467870>) , Command count = 3170 ] 
14:26:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:36: [ SetBusWidth(0x4) , Command count = 3171 ] 
14:26:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3172 ] 
14:26:36: Protected Area Size 0x28000
14:26:36: Bus Width           2
14:26:36: Secure Mode         0
14:26:36: Speed  Class        4
14:26:36: Perf Move           0
14:26:36: Au Size             9
14:26:36: Erase Size          15
14:26:36: Erase Timeout       1
14:26:36: Erase offset        1
14:26:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3173 ] 
14:26:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:36: Host Frequency set to 100000 KHz
14:26:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:36: ####CSD Registe 2.0 Values####
14:26:36: CSD_STRUCTURE                                 :0x1
14:26:36: Reserv1                                       :0x0
14:26:36: Time Access 1 TAAC                            :0xe
14:26:36: Time Access 2 NSAC*100                        :0x0
14:26:36: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:36: Card Command Classess CCC                     :0x5b5
14:26:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:36: DSR(driver stage register)  DSR_IMP           :0x0
14:26:36: Reserv2                                       :0x0
14:26:36: Device Size C_SIZE                            :0xedc8
14:26:36: Reserv3                                       :0x0
14:26:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:36: Reserv4                                       :0x0
14:26:36: Write Speed Factor R2W_FACTOR                 :0x2
14:26:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:36: FILE_FORMAT_GRP                               :0x0
14:26:36: COPY flag                                     :0x1
14:26:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:36: File_Format                                   :0x0
14:26:36: CRC                                           :0x0
14:26:36: ####CSD Registe Values####  

14:26:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F330>, <py_sfcl.CommandDataDefinition object at 0x06467F90>) , Command count = 3174 ] 
14:26:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F150>, <py_sfcl.CommandDataDefinition object at 0x06467A20>) , Command count = 3175 ] 
14:26:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064212A0>, <py_sfcl.PySEnhancedCmdData object at 0x06467C00>, <None>, <py_sfcl.Command23 object at 0x0645B450>) , Command count = 3176 ] 
14:26:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 4
14:26:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421360>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421390>, <py_sfcl.PySEnhancedCmdData object at 0x064679F0>, <None>, <py_sfcl.Command23 object at 0x06467FC0>) , Command count = 3177 ] 
14:26:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451C60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B090>, <py_sfcl.PySEnhancedCmdData object at 0x0645BB70>, <None>, <py_sfcl.Command23 object at 0x06467570>) , Command count = 3178 ] 
14:26:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:36: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:38: Host Frequency set to 25000 KHz
14:26:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:38: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421720>, 0x0, True) , Command count = 3179 ] 
14:26:38: [GO18_globalSetVolt]### Host voltage value is set.
14:26:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451F00>, 0x0, False) , Command count = 3180 ] 
14:26:38: [GO18_globalSetVolt]### Host voltage value is set.
14:26:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3181 ] 
14:26:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3182 ] 
14:26:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3183 ] 
14:26:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216C0>, <py_sfcl.CommandDataDefinition object at 0x06421660>) , Command count = 3184 ] 
14:26:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467480>, <py_sfcl.CommandDataDefinition object at 0x06467150>) , Command count = 3185 ] 
14:26:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:39: [ SetCardRCA(0x1, 0xD555) , Command count = 3186 ] 
14:26:39: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:39: Host Frequency set to 25000 KHz
14:26:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:39: ####CSD Registe 2.0 Values####
14:26:39: CSD_STRUCTURE                                 :0x1
14:26:39: Reserv1                                       :0x0
14:26:39: Time Access 1 TAAC                            :0xe
14:26:39: Time Access 2 NSAC*100                        :0x0
14:26:39: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:39: Card Command Classess CCC                     :0x5b5
14:26:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:39: DSR(driver stage register)  DSR_IMP           :0x0
14:26:39: Reserv2                                       :0x0
14:26:39: Device Size C_SIZE                            :0xedc8
14:26:39: Reserv3                                       :0x0
14:26:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:39: Reserv4                                       :0x0
14:26:39: Write Speed Factor R2W_FACTOR                 :0x2
14:26:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:39: FILE_FORMAT_GRP                               :0x0
14:26:39: COPY flag                                     :0x1
14:26:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:39: File_Format                                   :0x0
14:26:39: CRC                                           :0x0
14:26:39: ####CSD Registe Values####  

14:26:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:39: [GetSCRRegisterEntry] Passed
14:26:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:39: Data_Status_After Erases          : 0
14:26:39: CPRM Security Support             : No Security
14:26:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:39: Spec. Version                     : Version 3.0X
14:26:39: Extended Security Support         : Extended_Security_Not_Supported
14:26:39: Command Support                   : COMMAND_SUPPORT
14:26:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064219C0>, <py_sfcl.CommandDataDefinition object at 0x06467C60>) , Command count = 3187 ] 
14:26:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431E70>, <py_sfcl.CommandDataDefinition object at 0x06467030>) , Command count = 3188 ] 
14:26:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:39: [ SetBusWidth(0x4) , Command count = 3189 ] 
14:26:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3190 ] 
14:26:39: Protected Area Size 0x28000
14:26:39: Bus Width           2
14:26:39: Secure Mode         0
14:26:39: Speed  Class        4
14:26:39: Perf Move           0
14:26:39: Au Size             9
14:26:39: Erase Size          15
14:26:39: Erase Timeout       1
14:26:39: Erase offset        1
14:26:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3191 ] 
14:26:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:39: Host Frequency set to 100000 KHz
14:26:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:39: ####CSD Registe 2.0 Values####
14:26:39: CSD_STRUCTURE                                 :0x1
14:26:39: Reserv1                                       :0x0
14:26:39: Time Access 1 TAAC                            :0xe
14:26:39: Time Access 2 NSAC*100                        :0x0
14:26:39: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:39: Card Command Classess CCC                     :0x5b5
14:26:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:39: DSR(driver stage register)  DSR_IMP           :0x0
14:26:39: Reserv2                                       :0x0
14:26:39: Device Size C_SIZE                            :0xedc8
14:26:39: Reserv3                                       :0x0
14:26:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:39: Reserv4                                       :0x0
14:26:39: Write Speed Factor R2W_FACTOR                 :0x2
14:26:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:39: FILE_FORMAT_GRP                               :0x0
14:26:39: COPY flag                                     :0x1
14:26:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:39: File_Format                                   :0x0
14:26:39: CRC                                           :0x0
14:26:39: ####CSD Registe Values####  

14:26:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064217E0>, <py_sfcl.CommandDataDefinition object at 0x064216F0>) , Command count = 3192 ] 
14:26:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x063FFD50>, <py_sfcl.CommandDataDefinition object at 0x064674B0>) , Command count = 3193 ] 
14:26:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421B10>, <py_sfcl.PySEnhancedCmdData object at 0x06421B40>, <None>, <py_sfcl.Command23 object at 0x064671B0>) , Command count = 3194 ] 
14:26:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 3
14:26:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421C30>, <py_sfcl.PySEnhancedCmdData object at 0x06421C60>, <None>, <py_sfcl.Command23 object at 0x06467750>) , Command count = 3195 ] 
14:26:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451ED0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B480>, <py_sfcl.PySEnhancedCmdData object at 0x0645B090>, <None>, <py_sfcl.Command23 object at 0x06421270>) , Command count = 3196 ] 
14:26:39: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:41: Host Frequency set to 25000 KHz
14:26:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421FC0>, 0x0, True) , Command count = 3197 ] 
14:26:41: [GO18_globalSetVolt]### Host voltage value is set.
14:26:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451810>, 0x0, False) , Command count = 3198 ] 
14:26:41: [GO18_globalSetVolt]### Host voltage value is set.
14:26:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3199 ] 
14:26:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3200 ] 
14:26:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3201 ] 
14:26:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A060>, <py_sfcl.CommandDataDefinition object at 0x06421F60>) , Command count = 3202 ] 
14:26:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A030>, <py_sfcl.CommandDataDefinition object at 0x06467930>) , Command count = 3203 ] 
14:26:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:41: [ SetCardRCA(0x1, 0xD555) , Command count = 3204 ] 
14:26:42: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:42: Host Frequency set to 25000 KHz
14:26:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:42: ####CSD Registe 2.0 Values####
14:26:42: CSD_STRUCTURE                                 :0x1
14:26:42: Reserv1                                       :0x0
14:26:42: Time Access 1 TAAC                            :0xe
14:26:42: Time Access 2 NSAC*100                        :0x0
14:26:42: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:42: Card Command Classess CCC                     :0x5b5
14:26:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:42: DSR(driver stage register)  DSR_IMP           :0x0
14:26:42: Reserv2                                       :0x0
14:26:42: Device Size C_SIZE                            :0xedc8
14:26:42: Reserv3                                       :0x0
14:26:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:42: Reserv4                                       :0x0
14:26:42: Write Speed Factor R2W_FACTOR                 :0x2
14:26:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:42: FILE_FORMAT_GRP                               :0x0
14:26:42: COPY flag                                     :0x1
14:26:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:42: File_Format                                   :0x0
14:26:42: CRC                                           :0x0
14:26:42: ####CSD Registe Values####  

14:26:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:42: [GetSCRRegisterEntry] Passed
14:26:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:42: Data_Status_After Erases          : 0
14:26:42: CPRM Security Support             : No Security
14:26:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:42: Spec. Version                     : Version 3.0X
14:26:42: Extended Security Support         : Extended_Security_Not_Supported
14:26:42: Command Support                   : COMMAND_SUPPORT
14:26:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A2A0>, <py_sfcl.CommandDataDefinition object at 0x0642A0C0>) , Command count = 3205 ] 
14:26:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414AB0>, <py_sfcl.CommandDataDefinition object at 0x064673C0>) , Command count = 3206 ] 
14:26:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:42: [ SetBusWidth(0x4) , Command count = 3207 ] 
14:26:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3208 ] 
14:26:42: Protected Area Size 0x28000
14:26:42: Bus Width           2
14:26:42: Secure Mode         0
14:26:42: Speed  Class        4
14:26:42: Perf Move           0
14:26:42: Au Size             9
14:26:42: Erase Size          15
14:26:42: Erase Timeout       1
14:26:42: Erase offset        1
14:26:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3209 ] 
14:26:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:42: Host Frequency set to 100000 KHz
14:26:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:42: ####CSD Registe 2.0 Values####
14:26:42: CSD_STRUCTURE                                 :0x1
14:26:42: Reserv1                                       :0x0
14:26:42: Time Access 1 TAAC                            :0xe
14:26:42: Time Access 2 NSAC*100                        :0x0
14:26:42: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:42: Card Command Classess CCC                     :0x5b5
14:26:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:42: DSR(driver stage register)  DSR_IMP           :0x0
14:26:42: Reserv2                                       :0x0
14:26:42: Device Size C_SIZE                            :0xedc8
14:26:42: Reserv3                                       :0x0
14:26:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:42: Reserv4                                       :0x0
14:26:42: Write Speed Factor R2W_FACTOR                 :0x2
14:26:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:42: FILE_FORMAT_GRP                               :0x0
14:26:42: COPY flag                                     :0x1
14:26:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:42: File_Format                                   :0x0
14:26:42: CRC                                           :0x0
14:26:42: ####CSD Registe Values####  

14:26:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A090>, <py_sfcl.CommandDataDefinition object at 0x06421D50>) , Command count = 3210 ] 
14:26:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451FC0>, <py_sfcl.CommandDataDefinition object at 0x06421810>) , Command count = 3211 ] 
14:26:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421D80>, <py_sfcl.PySEnhancedCmdData object at 0x06421BA0>, <None>, <py_sfcl.Command23 object at 0x06421F90>) , Command count = 3212 ] 
14:26:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 2
14:26:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A510>, <py_sfcl.PySEnhancedCmdData object at 0x0642A540>, <None>, <py_sfcl.Command23 object at 0x064218A0>) , Command count = 3213 ] 
14:26:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467720>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B9C0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BEA0>, <None>, <py_sfcl.Command23 object at 0x064214E0>) , Command count = 3214 ] 
14:26:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:42: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:44: Host Frequency set to 25000 KHz
14:26:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:44: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A8A0>, 0x0, True) , Command count = 3215 ] 
14:26:44: [GO18_globalSetVolt]### Host voltage value is set.
14:26:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451F60>, 0x0, False) , Command count = 3216 ] 
14:26:44: [GO18_globalSetVolt]### Host voltage value is set.
14:26:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3217 ] 
14:26:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3218 ] 
14:26:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3219 ] 
14:26:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A840>, <py_sfcl.CommandDataDefinition object at 0x06421D20>) , Command count = 3220 ] 
14:26:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421750>, <py_sfcl.CommandDataDefinition object at 0x064219F0>) , Command count = 3221 ] 
14:26:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:44: [ SetCardRCA(0x1, 0xD555) , Command count = 3222 ] 
14:26:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:44: Host Frequency set to 25000 KHz
14:26:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:44: ####CSD Registe 2.0 Values####
14:26:44: CSD_STRUCTURE                                 :0x1
14:26:44: Reserv1                                       :0x0
14:26:44: Time Access 1 TAAC                            :0xe
14:26:44: Time Access 2 NSAC*100                        :0x0
14:26:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:44: Card Command Classess CCC                     :0x5b5
14:26:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:44: DSR(driver stage register)  DSR_IMP           :0x0
14:26:44: Reserv2                                       :0x0
14:26:44: Device Size C_SIZE                            :0xedc8
14:26:44: Reserv3                                       :0x0
14:26:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:44: Reserv4                                       :0x0
14:26:44: Write Speed Factor R2W_FACTOR                 :0x2
14:26:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:44: FILE_FORMAT_GRP                               :0x0
14:26:44: COPY flag                                     :0x1
14:26:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:44: File_Format                                   :0x0
14:26:44: CRC                                           :0x0
14:26:44: ####CSD Registe Values####  

14:26:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:44: [GetSCRRegisterEntry] Passed
14:26:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:44: Data_Status_After Erases          : 0
14:26:44: CPRM Security Support             : No Security
14:26:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:44: Spec. Version                     : Version 3.0X
14:26:44: Extended Security Support         : Extended_Security_Not_Supported
14:26:44: Command Support                   : COMMAND_SUPPORT
14:26:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AB40>, <py_sfcl.CommandDataDefinition object at 0x06421840>) , Command count = 3223 ] 
14:26:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414D80>, <py_sfcl.CommandDataDefinition object at 0x064213C0>) , Command count = 3224 ] 
14:26:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:44: [ SetBusWidth(0x4) , Command count = 3225 ] 
14:26:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3226 ] 
14:26:44: Protected Area Size 0x28000
14:26:44: Bus Width           2
14:26:44: Secure Mode         0
14:26:44: Speed  Class        4
14:26:44: Perf Move           0
14:26:44: Au Size             9
14:26:44: Erase Size          15
14:26:44: Erase Timeout       1
14:26:44: Erase offset        1
14:26:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3227 ] 
14:26:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:44: Host Frequency set to 100000 KHz
14:26:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:44: ####CSD Registe 2.0 Values####
14:26:44: CSD_STRUCTURE                                 :0x1
14:26:44: Reserv1                                       :0x0
14:26:44: Time Access 1 TAAC                            :0xe
14:26:44: Time Access 2 NSAC*100                        :0x0
14:26:44: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:44: Card Command Classess CCC                     :0x5b5
14:26:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:44: DSR(driver stage register)  DSR_IMP           :0x0
14:26:44: Reserv2                                       :0x0
14:26:44: Device Size C_SIZE                            :0xedc8
14:26:44: Reserv3                                       :0x0
14:26:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:44: Reserv4                                       :0x0
14:26:44: Write Speed Factor R2W_FACTOR                 :0x2
14:26:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:44: FILE_FORMAT_GRP                               :0x0
14:26:44: COPY flag                                     :0x1
14:26:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:44: File_Format                                   :0x0
14:26:44: CRC                                           :0x0
14:26:44: ####CSD Registe Values####  

14:26:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064210F0>, <py_sfcl.CommandDataDefinition object at 0x064217B0>) , Command count = 3228 ] 
14:26:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064678A0>, <py_sfcl.CommandDataDefinition object at 0x06421300>) , Command count = 3229 ] 
14:26:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC60>, <py_sfcl.PySEnhancedCmdData object at 0x0642AC90>, <None>, <py_sfcl.Command23 object at 0x0642A7E0>) , Command count = 3230 ] 
14:26:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 1
14:26:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642ADB0>, <py_sfcl.PySEnhancedCmdData object at 0x0642ADE0>, <None>, <py_sfcl.Command23 object at 0x0642AA50>) , Command count = 3231 ] 
14:26:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467600>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B600>, <py_sfcl.PySEnhancedCmdData object at 0x0645BAE0>, <None>, <py_sfcl.Command23 object at 0x0642A180>) , Command count = 3232 ] 
14:26:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:45: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:47: Host Frequency set to 25000 KHz
14:26:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:47: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E030>, 0x0, True) , Command count = 3233 ] 
14:26:47: [GO18_globalSetVolt]### Host voltage value is set.
14:26:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FA80>, 0x0, False) , Command count = 3234 ] 
14:26:47: [GO18_globalSetVolt]### Host voltage value is set.
14:26:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3235 ] 
14:26:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3236 ] 
14:26:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3237 ] 
14:26:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E150>, <py_sfcl.CommandDataDefinition object at 0x0642E0F0>) , Command count = 3238 ] 
14:26:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421780>, <py_sfcl.CommandDataDefinition object at 0x06421510>) , Command count = 3239 ] 
14:26:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:47: [ SetCardRCA(0x1, 0xD555) , Command count = 3240 ] 
14:26:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:47: Host Frequency set to 25000 KHz
14:26:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:47: ####CSD Registe 2.0 Values####
14:26:47: CSD_STRUCTURE                                 :0x1
14:26:47: Reserv1                                       :0x0
14:26:47: Time Access 1 TAAC                            :0xe
14:26:47: Time Access 2 NSAC*100                        :0x0
14:26:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:47: Card Command Classess CCC                     :0x5b5
14:26:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:47: DSR(driver stage register)  DSR_IMP           :0x0
14:26:47: Reserv2                                       :0x0
14:26:47: Device Size C_SIZE                            :0xedc8
14:26:47: Reserv3                                       :0x0
14:26:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:47: Reserv4                                       :0x0
14:26:47: Write Speed Factor R2W_FACTOR                 :0x2
14:26:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:47: FILE_FORMAT_GRP                               :0x0
14:26:47: COPY flag                                     :0x1
14:26:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:47: File_Format                                   :0x0
14:26:47: CRC                                           :0x0
14:26:47: ####CSD Registe Values####  

14:26:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:47: [GetSCRRegisterEntry] Passed
14:26:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:47: Data_Status_After Erases          : 0
14:26:47: CPRM Security Support             : No Security
14:26:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:47: Spec. Version                     : Version 3.0X
14:26:47: Extended Security Support         : Extended_Security_Not_Supported
14:26:47: Command Support                   : COMMAND_SUPPORT
14:26:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A630>, <py_sfcl.CommandDataDefinition object at 0x0642E420>) , Command count = 3241 ] 
14:26:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F390>, <py_sfcl.CommandDataDefinition object at 0x06421C90>) , Command count = 3242 ] 
14:26:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:47: [ SetBusWidth(0x4) , Command count = 3243 ] 
14:26:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3244 ] 
14:26:47: Protected Area Size 0x28000
14:26:47: Bus Width           2
14:26:47: Secure Mode         0
14:26:47: Speed  Class        4
14:26:47: Perf Move           0
14:26:47: Au Size             9
14:26:47: Erase Size          15
14:26:47: Erase Timeout       1
14:26:47: Erase offset        1
14:26:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3245 ] 
14:26:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:47: Host Frequency set to 100000 KHz
14:26:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:47: ####CSD Registe 2.0 Values####
14:26:47: CSD_STRUCTURE                                 :0x1
14:26:47: Reserv1                                       :0x0
14:26:47: Time Access 1 TAAC                            :0xe
14:26:47: Time Access 2 NSAC*100                        :0x0
14:26:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:47: Card Command Classess CCC                     :0x5b5
14:26:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:47: DSR(driver stage register)  DSR_IMP           :0x0
14:26:47: Reserv2                                       :0x0
14:26:47: Device Size C_SIZE                            :0xedc8
14:26:47: Reserv3                                       :0x0
14:26:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:47: Reserv4                                       :0x0
14:26:47: Write Speed Factor R2W_FACTOR                 :0x2
14:26:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:47: FILE_FORMAT_GRP                               :0x0
14:26:47: COPY flag                                     :0x1
14:26:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:47: File_Format                                   :0x0
14:26:47: CRC                                           :0x0
14:26:47: ####CSD Registe Values####  

14:26:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A150>, <py_sfcl.CommandDataDefinition object at 0x0642E210>) , Command count = 3246 ] 
14:26:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467B10>, <py_sfcl.CommandDataDefinition object at 0x0642A240>) , Command count = 3247 ] 
14:26:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AF00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AD20>, <py_sfcl.PySEnhancedCmdData object at 0x0642AE10>, <None>, <py_sfcl.Command23 object at 0x0642A720>) , Command count = 3248 ] 
14:26:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Outer loop Count 1018
14:26:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 29
14:26:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AB70>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E660>, <py_sfcl.PySEnhancedCmdData object at 0x0642E690>, <None>, <py_sfcl.Command23 object at 0x0642AED0>) , Command count = 3249 ] 
14:26:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467300>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B8A0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B210>, <None>, <py_sfcl.Command23 object at 0x0642E6C0>) , Command count = 3250 ] 
14:26:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:49: Host Frequency set to 25000 KHz
14:26:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EA20>, 0x0, True) , Command count = 3251 ] 
14:26:49: [GO18_globalSetVolt]### Host voltage value is set.
14:26:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421690>, 0x0, False) , Command count = 3252 ] 
14:26:49: [GO18_globalSetVolt]### Host voltage value is set.
14:26:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3253 ] 
14:26:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3254 ] 
14:26:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3255 ] 
14:26:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E9C0>, <py_sfcl.CommandDataDefinition object at 0x0642AE70>) , Command count = 3256 ] 
14:26:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AF60>, <py_sfcl.CommandDataDefinition object at 0x0642A1B0>) , Command count = 3257 ] 
14:26:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:50: [ SetCardRCA(0x1, 0xD555) , Command count = 3258 ] 
14:26:50: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:50: Host Frequency set to 25000 KHz
14:26:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:50: ####CSD Registe 2.0 Values####
14:26:50: CSD_STRUCTURE                                 :0x1
14:26:50: Reserv1                                       :0x0
14:26:50: Time Access 1 TAAC                            :0xe
14:26:50: Time Access 2 NSAC*100                        :0x0
14:26:50: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:50: Card Command Classess CCC                     :0x5b5
14:26:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:50: DSR(driver stage register)  DSR_IMP           :0x0
14:26:50: Reserv2                                       :0x0
14:26:50: Device Size C_SIZE                            :0xedc8
14:26:50: Reserv3                                       :0x0
14:26:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:50: Reserv4                                       :0x0
14:26:50: Write Speed Factor R2W_FACTOR                 :0x2
14:26:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:50: FILE_FORMAT_GRP                               :0x0
14:26:50: COPY flag                                     :0x1
14:26:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:50: File_Format                                   :0x0
14:26:50: CRC                                           :0x0
14:26:50: ####CSD Registe Values####  

14:26:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:50: [GetSCRRegisterEntry] Passed
14:26:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:50: Data_Status_After Erases          : 0
14:26:50: CPRM Security Support             : No Security
14:26:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:50: Spec. Version                     : Version 3.0X
14:26:50: Extended Security Support         : Extended_Security_Not_Supported
14:26:50: Command Support                   : COMMAND_SUPPORT
14:26:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ECC0>, <py_sfcl.CommandDataDefinition object at 0x0642A8D0>) , Command count = 3259 ] 
14:26:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FDB0>, <py_sfcl.CommandDataDefinition object at 0x0642A690>) , Command count = 3260 ] 
14:26:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:50: [ SetBusWidth(0x4) , Command count = 3261 ] 
14:26:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BDB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3262 ] 
14:26:50: Protected Area Size 0x28000
14:26:50: Bus Width           2
14:26:50: Secure Mode         0
14:26:50: Speed  Class        4
14:26:50: Perf Move           0
14:26:50: Au Size             9
14:26:50: Erase Size          15
14:26:50: Erase Timeout       1
14:26:50: Erase offset        1
14:26:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3263 ] 
14:26:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:50: Host Frequency set to 100000 KHz
14:26:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:50: ####CSD Registe 2.0 Values####
14:26:50: CSD_STRUCTURE                                 :0x1
14:26:50: Reserv1                                       :0x0
14:26:50: Time Access 1 TAAC                            :0xe
14:26:50: Time Access 2 NSAC*100                        :0x0
14:26:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:50: Card Command Classess CCC                     :0x5b5
14:26:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:50: DSR(driver stage register)  DSR_IMP           :0x0
14:26:50: Reserv2                                       :0x0
14:26:50: Device Size C_SIZE                            :0xedc8
14:26:50: Reserv3                                       :0x0
14:26:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:50: Reserv4                                       :0x0
14:26:50: Write Speed Factor R2W_FACTOR                 :0x2
14:26:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:50: FILE_FORMAT_GRP                               :0x0
14:26:50: COPY flag                                     :0x1
14:26:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:50: File_Format                                   :0x0
14:26:50: CRC                                           :0x0
14:26:50: ####CSD Registe Values####  

14:26:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EED0>, <py_sfcl.CommandDataDefinition object at 0x0642EBA0>) , Command count = 3264 ] 
14:26:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064678D0>, <py_sfcl.CommandDataDefinition object at 0x0642A120>) , Command count = 3265 ] 
14:26:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642ECF0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EB10>, <py_sfcl.PySEnhancedCmdData object at 0x0642A660>, <None>, <py_sfcl.Command23 object at 0x0642AE40>) , Command count = 3266 ] 
14:26:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 28
14:26:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064310F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642EF30>, <None>, <py_sfcl.Command23 object at 0x0642A9C0>) , Command count = 3267 ] 
14:26:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A600>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BE40>, <py_sfcl.PySEnhancedCmdData object at 0x0645B390>, <None>, <py_sfcl.Command23 object at 0x0642A300>) , Command count = 3268 ] 
14:26:50: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:50: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:52: Host Frequency set to 25000 KHz
14:26:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:52: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431300>, 0x0, True) , Command count = 3269 ] 
14:26:52: [GO18_globalSetVolt]### Host voltage value is set.
14:26:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467C90>, 0x0, False) , Command count = 3270 ] 
14:26:52: [GO18_globalSetVolt]### Host voltage value is set.
14:26:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3271 ] 
14:26:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3272 ] 
14:26:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3273 ] 
14:26:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312A0>, <py_sfcl.CommandDataDefinition object at 0x06431270>) , Command count = 3274 ] 
14:26:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A7B0>, <py_sfcl.CommandDataDefinition object at 0x0642A420>) , Command count = 3275 ] 
14:26:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:52: [ SetCardRCA(0x1, 0xD555) , Command count = 3276 ] 
14:26:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:53: Host Frequency set to 25000 KHz
14:26:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:53: ####CSD Registe 2.0 Values####
14:26:53: CSD_STRUCTURE                                 :0x1
14:26:53: Reserv1                                       :0x0
14:26:53: Time Access 1 TAAC                            :0xe
14:26:53: Time Access 2 NSAC*100                        :0x0
14:26:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:53: Card Command Classess CCC                     :0x5b5
14:26:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:53: DSR(driver stage register)  DSR_IMP           :0x0
14:26:53: Reserv2                                       :0x0
14:26:53: Device Size C_SIZE                            :0xedc8
14:26:53: Reserv3                                       :0x0
14:26:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:53: Reserv4                                       :0x0
14:26:53: Write Speed Factor R2W_FACTOR                 :0x2
14:26:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:53: FILE_FORMAT_GRP                               :0x0
14:26:53: COPY flag                                     :0x1
14:26:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:53: File_Format                                   :0x0
14:26:53: CRC                                           :0x0
14:26:53: ####CSD Registe Values####  

14:26:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:53: [GetSCRRegisterEntry] Passed
14:26:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:53: Data_Status_After Erases          : 0
14:26:53: CPRM Security Support             : No Security
14:26:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:53: Spec. Version                     : Version 3.0X
14:26:53: Extended Security Support         : Extended_Security_Not_Supported
14:26:53: Command Support                   : COMMAND_SUPPORT
14:26:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431570>, <py_sfcl.CommandDataDefinition object at 0x0642E8A0>) , Command count = 3277 ] 
14:26:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064677E0>, <py_sfcl.CommandDataDefinition object at 0x0642A450>) , Command count = 3278 ] 
14:26:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:53: [ SetBusWidth(0x4) , Command count = 3279 ] 
14:26:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3280 ] 
14:26:53: Protected Area Size 0x28000
14:26:53: Bus Width           2
14:26:53: Secure Mode         0
14:26:53: Speed  Class        4
14:26:53: Perf Move           0
14:26:53: Au Size             9
14:26:53: Erase Size          15
14:26:53: Erase Timeout       1
14:26:53: Erase offset        1
14:26:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3281 ] 
14:26:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:53: Host Frequency set to 100000 KHz
14:26:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:53: ####CSD Registe 2.0 Values####
14:26:53: CSD_STRUCTURE                                 :0x1
14:26:53: Reserv1                                       :0x0
14:26:53: Time Access 1 TAAC                            :0xe
14:26:53: Time Access 2 NSAC*100                        :0x0
14:26:53: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:53: Card Command Classess CCC                     :0x5b5
14:26:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:53: DSR(driver stage register)  DSR_IMP           :0x0
14:26:53: Reserv2                                       :0x0
14:26:53: Device Size C_SIZE                            :0xedc8
14:26:53: Reserv3                                       :0x0
14:26:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:53: Reserv4                                       :0x0
14:26:53: Write Speed Factor R2W_FACTOR                 :0x2
14:26:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:53: FILE_FORMAT_GRP                               :0x0
14:26:53: COPY flag                                     :0x1
14:26:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:53: File_Format                                   :0x0
14:26:53: CRC                                           :0x0
14:26:53: ####CSD Registe Values####  

14:26:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7BD0>, <py_sfcl.CommandDataDefinition object at 0x05D7E1E0>) , Command count = 3282 ] 
14:26:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064211B0>, <py_sfcl.CommandDataDefinition object at 0x0642AF30>) , Command count = 3283 ] 
14:26:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A750>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064312D0>, <py_sfcl.PySEnhancedCmdData object at 0x06431360>, <None>, <py_sfcl.Command23 object at 0x0642EAB0>) , Command count = 3284 ] 
14:26:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 27
14:26:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7C30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431630>, <py_sfcl.PySEnhancedCmdData object at 0x0642E750>, <None>, <py_sfcl.Command23 object at 0x0642EEA0>) , Command count = 3285 ] 
14:26:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451D50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BA80>, <py_sfcl.PySEnhancedCmdData object at 0x0645BD20>, <None>, <py_sfcl.Command23 object at 0x0642EFC0>) , Command count = 3286 ] 
14:26:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:53: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:55: Host Frequency set to 25000 KHz
14:26:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAD180>, 0x0, True) , Command count = 3287 ] 
14:26:55: [GO18_globalSetVolt]### Host voltage value is set.
14:26:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421570>, 0x0, False) , Command count = 3288 ] 
14:26:55: [GO18_globalSetVolt]### Host voltage value is set.
14:26:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3289 ] 
14:26:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3290 ] 
14:26:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3291 ] 
14:26:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F90>, <py_sfcl.CommandDataDefinition object at 0x05DA7960>) , Command count = 3292 ] 
14:26:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADCC0>, <py_sfcl.CommandDataDefinition object at 0x0642EB70>) , Command count = 3293 ] 
14:26:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:55: [ SetCardRCA(0x1, 0xD555) , Command count = 3294 ] 
14:26:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:55: Host Frequency set to 25000 KHz
14:26:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:55: ####CSD Registe 2.0 Values####
14:26:55: CSD_STRUCTURE                                 :0x1
14:26:55: Reserv1                                       :0x0
14:26:55: Time Access 1 TAAC                            :0xe
14:26:55: Time Access 2 NSAC*100                        :0x0
14:26:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:55: Card Command Classess CCC                     :0x5b5
14:26:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:55: DSR(driver stage register)  DSR_IMP           :0x0
14:26:55: Reserv2                                       :0x0
14:26:55: Device Size C_SIZE                            :0xedc8
14:26:55: Reserv3                                       :0x0
14:26:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:55: Reserv4                                       :0x0
14:26:55: Write Speed Factor R2W_FACTOR                 :0x2
14:26:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:55: FILE_FORMAT_GRP                               :0x0
14:26:55: COPY flag                                     :0x1
14:26:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:55: File_Format                                   :0x0
14:26:55: CRC                                           :0x0
14:26:55: ####CSD Registe Values####  

14:26:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:55: [GetSCRRegisterEntry] Passed
14:26:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:55: Data_Status_After Erases          : 0
14:26:55: CPRM Security Support             : No Security
14:26:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:55: Spec. Version                     : Version 3.0X
14:26:55: Extended Security Support         : Extended_Security_Not_Supported
14:26:55: Command Support                   : COMMAND_SUPPORT
14:26:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8A80>, <py_sfcl.CommandDataDefinition object at 0x06431A80>) , Command count = 3295 ] 
14:26:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421210>, <py_sfcl.CommandDataDefinition object at 0x0642E4B0>) , Command count = 3296 ] 
14:26:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:55: [ SetBusWidth(0x4) , Command count = 3297 ] 
14:26:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3298 ] 
14:26:55: Protected Area Size 0x28000
14:26:55: Bus Width           2
14:26:55: Secure Mode         0
14:26:55: Speed  Class        4
14:26:55: Perf Move           0
14:26:55: Au Size             9
14:26:55: Erase Size          15
14:26:55: Erase Timeout       1
14:26:55: Erase offset        1
14:26:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3299 ] 
14:26:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:56: Host Frequency set to 100000 KHz
14:26:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:56: ####CSD Registe 2.0 Values####
14:26:56: CSD_STRUCTURE                                 :0x1
14:26:56: Reserv1                                       :0x0
14:26:56: Time Access 1 TAAC                            :0xe
14:26:56: Time Access 2 NSAC*100                        :0x0
14:26:56: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:56: Card Command Classess CCC                     :0x5b5
14:26:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:56: DSR(driver stage register)  DSR_IMP           :0x0
14:26:56: Reserv2                                       :0x0
14:26:56: Device Size C_SIZE                            :0xedc8
14:26:56: Reserv3                                       :0x0
14:26:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:56: Reserv4                                       :0x0
14:26:56: Write Speed Factor R2W_FACTOR                 :0x2
14:26:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:56: FILE_FORMAT_GRP                               :0x0
14:26:56: COPY flag                                     :0x1
14:26:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:56: File_Format                                   :0x0
14:26:56: CRC                                           :0x0
14:26:56: ####CSD Registe Values####  

14:26:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D91180>, <py_sfcl.CommandDataDefinition object at 0x05D91210>) , Command count = 3300 ] 
14:26:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FE10>, <py_sfcl.CommandDataDefinition object at 0x0642ED80>) , Command count = 3301 ] 
14:26:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF7E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431660>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6F0>, <None>, <py_sfcl.Command23 object at 0x0642E360>) , Command count = 3302 ] 
14:26:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 26
14:26:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF810>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431B40>, <py_sfcl.PySEnhancedCmdData object at 0x06431B70>, <None>, <py_sfcl.Command23 object at 0x0642E5A0>) , Command count = 3303 ] 
14:26:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421CF0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B240>, <py_sfcl.PySEnhancedCmdData object at 0x0645BD20>, <None>, <py_sfcl.Command23 object at 0x0642E480>) , Command count = 3304 ] 
14:26:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:56: [GO4_globalInitCard]### Switch to Specify Card Type
14:26:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:58: Host Frequency set to 25000 KHz
14:26:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:58: [GO18_globalSetVolt]### Set Host Voltage value.
14:26:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:26:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF960>, 0x0, True) , Command count = 3305 ] 
14:26:58: [GO18_globalSetVolt]### Host voltage value is set.
14:26:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:26:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421E10>, 0x0, False) , Command count = 3306 ] 
14:26:58: [GO18_globalSetVolt]### Host voltage value is set.
14:26:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3307 ] 
14:26:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:26:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3308 ] 
14:26:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:26:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:26:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:26:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:26:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:26:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3309 ] 
14:26:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:26:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:26:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB10>, <py_sfcl.CommandDataDefinition object at 0x05DA7C60>) , Command count = 3310 ] 
14:26:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:26:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D7EAE0>, <py_sfcl.CommandDataDefinition object at 0x0642EE70>) , Command count = 3311 ] 
14:26:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:26:58: [ SetCardRCA(0x1, 0xD555) , Command count = 3312 ] 
14:26:58: [DVTCommonLib]### Identification :Idenfication of card completed 

14:26:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:26:58: Host Frequency set to 25000 KHz
14:26:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:26:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:58: ####CSD Registe 2.0 Values####
14:26:58: CSD_STRUCTURE                                 :0x1
14:26:58: Reserv1                                       :0x0
14:26:58: Time Access 1 TAAC                            :0xe
14:26:58: Time Access 2 NSAC*100                        :0x0
14:26:58: Data Transfer Rate TRAN_SPEED                 :0x32
14:26:58: Card Command Classess CCC                     :0x5b5
14:26:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:58: DSR(driver stage register)  DSR_IMP           :0x0
14:26:58: Reserv2                                       :0x0
14:26:58: Device Size C_SIZE                            :0xedc8
14:26:58: Reserv3                                       :0x0
14:26:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:58: Reserv4                                       :0x0
14:26:58: Write Speed Factor R2W_FACTOR                 :0x2
14:26:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:58: FILE_FORMAT_GRP                               :0x0
14:26:58: COPY flag                                     :0x1
14:26:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:58: File_Format                                   :0x0
14:26:58: CRC                                           :0x0
14:26:58: ####CSD Registe Values####  

14:26:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:26:58: [GetSCRRegisterEntry] Passed
14:26:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:26:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:26:58: Data_Status_After Erases          : 0
14:26:58: CPRM Security Support             : No Security
14:26:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:26:58: Spec. Version                     : Version 3.0X
14:26:58: Extended Security Support         : Extended_Security_Not_Supported
14:26:58: Command Support                   : COMMAND_SUPPORT
14:26:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:26:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB40>, <py_sfcl.CommandDataDefinition object at 0x06431FC0>) , Command count = 3313 ] 
14:26:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:26:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421960>, <py_sfcl.CommandDataDefinition object at 0x0642EE40>) , Command count = 3314 ] 
14:26:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:26:58: [ SetBusWidth(0x4) , Command count = 3315 ] 
14:26:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:26:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3316 ] 
14:26:58: Protected Area Size 0x28000
14:26:58: Bus Width           2
14:26:58: Secure Mode         0
14:26:58: Speed  Class        4
14:26:58: Perf Move           0
14:26:58: Au Size             9
14:26:58: Erase Size          15
14:26:58: Erase Timeout       1
14:26:58: Erase offset        1
14:26:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:26:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:26:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:26:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3317 ] 
14:26:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:26:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:26:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:26:58: Host Frequency set to 100000 KHz
14:26:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:26:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:26:58: ####CSD Registe 2.0 Values####
14:26:58: CSD_STRUCTURE                                 :0x1
14:26:58: Reserv1                                       :0x0
14:26:58: Time Access 1 TAAC                            :0xe
14:26:58: Time Access 2 NSAC*100                        :0x0
14:26:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:26:58: Card Command Classess CCC                     :0x5b5
14:26:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:26:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:26:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:26:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:26:58: DSR(driver stage register)  DSR_IMP           :0x0
14:26:58: Reserv2                                       :0x0
14:26:58: Device Size C_SIZE                            :0xedc8
14:26:58: Reserv3                                       :0x0
14:26:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:26:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:26:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:26:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:26:58: Reserv4                                       :0x0
14:26:58: Write Speed Factor R2W_FACTOR                 :0x2
14:26:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:26:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:26:58: FILE_FORMAT_GRP                               :0x0
14:26:58: COPY flag                                     :0x1
14:26:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:26:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:26:58: File_Format                                   :0x0
14:26:58: CRC                                           :0x0
14:26:58: ####CSD Registe Values####  

14:26:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E14B0>, <py_sfcl.CommandDataDefinition object at 0x05DEFE10>) , Command count = 3318 ] 
14:26:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:26:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064215D0>, <py_sfcl.CommandDataDefinition object at 0x064314E0>) , Command count = 3319 ] 
14:26:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:26:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:26:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431090>, <py_sfcl.PySEnhancedCmdData object at 0x06431750>, <None>, <py_sfcl.Command23 object at 0x0642AB10>) , Command count = 3320 ] 
14:26:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 25
14:26:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:26:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DAD3F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431E10>, <py_sfcl.PySEnhancedCmdData object at 0x06431F90>, <None>, <py_sfcl.Command23 object at 0x0642AC30>) , Command count = 3321 ] 
14:26:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:26:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:26:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E1E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B4E0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BE70>, <None>, <py_sfcl.Command23 object at 0x06431030>) , Command count = 3322 ] 
14:26:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:26:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:00: Host Frequency set to 25000 KHz
14:27:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x064140F0>, 0x0, True) , Command count = 3323 ] 
14:27:00: [GO18_globalSetVolt]### Host voltage value is set.
14:27:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431060>, 0x0, False) , Command count = 3324 ] 
14:27:01: [GO18_globalSetVolt]### Host voltage value is set.
14:27:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3325 ] 
14:27:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3326 ] 
14:27:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3327 ] 
14:27:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414690>, <py_sfcl.CommandDataDefinition object at 0x06414B40>) , Command count = 3328 ] 
14:27:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431C30>, <py_sfcl.CommandDataDefinition object at 0x0642E600>) , Command count = 3329 ] 
14:27:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:01: [ SetCardRCA(0x1, 0xD555) , Command count = 3330 ] 
14:27:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:01: Host Frequency set to 25000 KHz
14:27:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:01: ####CSD Registe 2.0 Values####
14:27:01: CSD_STRUCTURE                                 :0x1
14:27:01: Reserv1                                       :0x0
14:27:01: Time Access 1 TAAC                            :0xe
14:27:01: Time Access 2 NSAC*100                        :0x0
14:27:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:01: Card Command Classess CCC                     :0x5b5
14:27:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:01: DSR(driver stage register)  DSR_IMP           :0x0
14:27:01: Reserv2                                       :0x0
14:27:01: Device Size C_SIZE                            :0xedc8
14:27:01: Reserv3                                       :0x0
14:27:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:01: Reserv4                                       :0x0
14:27:01: Write Speed Factor R2W_FACTOR                 :0x2
14:27:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:01: FILE_FORMAT_GRP                               :0x0
14:27:01: COPY flag                                     :0x1
14:27:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:01: File_Format                                   :0x0
14:27:01: CRC                                           :0x0
14:27:01: ####CSD Registe Values####  

14:27:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:01: [GetSCRRegisterEntry] Passed
14:27:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:01: Data_Status_After Erases          : 0
14:27:01: CPRM Security Support             : No Security
14:27:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:01: Spec. Version                     : Version 3.0X
14:27:01: Extended Security Support         : Extended_Security_Not_Supported
14:27:01: Command Support                   : COMMAND_SUPPORT
14:27:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414360>, <py_sfcl.CommandDataDefinition object at 0x06431EA0>) , Command count = 3331 ] 
14:27:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421900>, <py_sfcl.CommandDataDefinition object at 0x06431F30>) , Command count = 3332 ] 
14:27:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:01: [ SetBusWidth(0x4) , Command count = 3333 ] 
14:27:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3334 ] 
14:27:01: Protected Area Size 0x28000
14:27:01: Bus Width           2
14:27:01: Secure Mode         0
14:27:01: Speed  Class        4
14:27:01: Perf Move           0
14:27:01: Au Size             9
14:27:01: Erase Size          15
14:27:01: Erase Timeout       1
14:27:01: Erase offset        1
14:27:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3335 ] 
14:27:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:01: Host Frequency set to 100000 KHz
14:27:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:01: ####CSD Registe 2.0 Values####
14:27:01: CSD_STRUCTURE                                 :0x1
14:27:01: Reserv1                                       :0x0
14:27:01: Time Access 1 TAAC                            :0xe
14:27:01: Time Access 2 NSAC*100                        :0x0
14:27:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:01: Card Command Classess CCC                     :0x5b5
14:27:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:01: DSR(driver stage register)  DSR_IMP           :0x0
14:27:01: Reserv2                                       :0x0
14:27:01: Device Size C_SIZE                            :0xedc8
14:27:01: Reserv3                                       :0x0
14:27:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:01: Reserv4                                       :0x0
14:27:01: Write Speed Factor R2W_FACTOR                 :0x2
14:27:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:01: FILE_FORMAT_GRP                               :0x0
14:27:01: COPY flag                                     :0x1
14:27:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:01: File_Format                                   :0x0
14:27:01: CRC                                           :0x0
14:27:01: ####CSD Registe Values####  

14:27:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431960>, <py_sfcl.CommandDataDefinition object at 0x06431AE0>) , Command count = 3336 ] 
14:27:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A570>, <py_sfcl.CommandDataDefinition object at 0x0642A330>) , Command count = 3337 ] 
14:27:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414300>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F60>, <py_sfcl.PySEnhancedCmdData object at 0x064316C0>, <None>, <py_sfcl.Command23 object at 0x06431A50>) , Command count = 3338 ] 
14:27:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 24
14:27:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E1060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414900>, <py_sfcl.PySEnhancedCmdData object at 0x06431C60>, <None>, <py_sfcl.Command23 object at 0x06431810>) , Command count = 3339 ] 
14:27:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431D20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B5A0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B900>, <None>, <py_sfcl.Command23 object at 0x064311B0>) , Command count = 3340 ] 
14:27:01: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:01: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:03: Host Frequency set to 25000 KHz
14:27:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:03: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x064517B0>, 0x0, True) , Command count = 3341 ] 
14:27:03: [GO18_globalSetVolt]### Host voltage value is set.
14:27:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x01D66840>, 0x0, False) , Command count = 3342 ] 
14:27:03: [GO18_globalSetVolt]### Host voltage value is set.
14:27:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3343 ] 
14:27:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3344 ] 
14:27:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3345 ] 
14:27:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414DE0>, <py_sfcl.CommandDataDefinition object at 0x06451540>) , Command count = 3346 ] 
14:27:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064519F0>, <py_sfcl.CommandDataDefinition object at 0x06431540>) , Command count = 3347 ] 
14:27:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:04: [ SetCardRCA(0x1, 0xD555) , Command count = 3348 ] 
14:27:04: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:04: Host Frequency set to 25000 KHz
14:27:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:04: ####CSD Registe 2.0 Values####
14:27:04: CSD_STRUCTURE                                 :0x1
14:27:04: Reserv1                                       :0x0
14:27:04: Time Access 1 TAAC                            :0xe
14:27:04: Time Access 2 NSAC*100                        :0x0
14:27:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:04: Card Command Classess CCC                     :0x5b5
14:27:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:04: DSR(driver stage register)  DSR_IMP           :0x0
14:27:04: Reserv2                                       :0x0
14:27:04: Device Size C_SIZE                            :0xedc8
14:27:04: Reserv3                                       :0x0
14:27:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:04: Reserv4                                       :0x0
14:27:04: Write Speed Factor R2W_FACTOR                 :0x2
14:27:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:04: FILE_FORMAT_GRP                               :0x0
14:27:04: COPY flag                                     :0x1
14:27:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:04: File_Format                                   :0x0
14:27:04: CRC                                           :0x0
14:27:04: ####CSD Registe Values####  

14:27:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:04: [GetSCRRegisterEntry] Passed
14:27:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:04: Data_Status_After Erases          : 0
14:27:04: CPRM Security Support             : No Security
14:27:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:04: Spec. Version                     : Version 3.0X
14:27:04: Extended Security Support         : Extended_Security_Not_Supported
14:27:04: Command Support                   : COMMAND_SUPPORT
14:27:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1A80>, <py_sfcl.CommandDataDefinition object at 0x064149F0>) , Command count = 3349 ] 
14:27:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E510>, <py_sfcl.CommandDataDefinition object at 0x06431120>) , Command count = 3350 ] 
14:27:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:04: [ SetBusWidth(0x4) , Command count = 3351 ] 
14:27:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B8D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3352 ] 
14:27:04: Protected Area Size 0x28000
14:27:04: Bus Width           2
14:27:04: Secure Mode         0
14:27:04: Speed  Class        4
14:27:04: Perf Move           0
14:27:04: Au Size             9
14:27:04: Erase Size          15
14:27:04: Erase Timeout       1
14:27:04: Erase offset        1
14:27:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3353 ] 
14:27:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:04: Host Frequency set to 100000 KHz
14:27:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:04: ####CSD Registe 2.0 Values####
14:27:04: CSD_STRUCTURE                                 :0x1
14:27:04: Reserv1                                       :0x0
14:27:04: Time Access 1 TAAC                            :0xe
14:27:04: Time Access 2 NSAC*100                        :0x0
14:27:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:04: Card Command Classess CCC                     :0x5b5
14:27:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:04: DSR(driver stage register)  DSR_IMP           :0x0
14:27:04: Reserv2                                       :0x0
14:27:04: Device Size C_SIZE                            :0xedc8
14:27:04: Reserv3                                       :0x0
14:27:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:04: Reserv4                                       :0x0
14:27:04: Write Speed Factor R2W_FACTOR                 :0x2
14:27:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:04: FILE_FORMAT_GRP                               :0x0
14:27:04: COPY flag                                     :0x1
14:27:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:04: File_Format                                   :0x0
14:27:04: CRC                                           :0x0
14:27:04: ####CSD Registe Values####  

14:27:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431D50>, <py_sfcl.CommandDataDefinition object at 0x06431C00>) , Command count = 3354 ] 
14:27:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A6C0>, <py_sfcl.CommandDataDefinition object at 0x06431180>) , Command count = 3355 ] 
14:27:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E11E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064144B0>, <py_sfcl.PySEnhancedCmdData object at 0x06451B10>, <None>, <py_sfcl.Command23 object at 0x06431840>) , Command count = 3356 ] 
14:27:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 23
14:27:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431D80>, <py_sfcl.PySEnhancedCmdData object at 0x06431B10>, <None>, <py_sfcl.Command23 object at 0x064315A0>) , Command count = 3357 ] 
14:27:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467CF0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B6F0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B5D0>, <None>, <py_sfcl.Command23 object at 0x06431CC0>) , Command count = 3358 ] 
14:27:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:06: Host Frequency set to 25000 KHz
14:27:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x064516C0>, 0x0, True) , Command count = 3359 ] 
14:27:06: [GO18_globalSetVolt]### Host voltage value is set.
14:27:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x064314B0>, 0x0, False) , Command count = 3360 ] 
14:27:06: [GO18_globalSetVolt]### Host voltage value is set.
14:27:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3361 ] 
14:27:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3362 ] 
14:27:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3363 ] 
14:27:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F120>, <py_sfcl.CommandDataDefinition object at 0x064519C0>) , Command count = 3364 ] 
14:27:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451390>, <py_sfcl.CommandDataDefinition object at 0x06431AB0>) , Command count = 3365 ] 
14:27:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:06: [ SetCardRCA(0x1, 0xD555) , Command count = 3366 ] 
14:27:06: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:06: Host Frequency set to 25000 KHz
14:27:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:06: ####CSD Registe 2.0 Values####
14:27:06: CSD_STRUCTURE                                 :0x1
14:27:06: Reserv1                                       :0x0
14:27:06: Time Access 1 TAAC                            :0xe
14:27:06: Time Access 2 NSAC*100                        :0x0
14:27:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:06: Card Command Classess CCC                     :0x5b5
14:27:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:06: DSR(driver stage register)  DSR_IMP           :0x0
14:27:06: Reserv2                                       :0x0
14:27:06: Device Size C_SIZE                            :0xedc8
14:27:06: Reserv3                                       :0x0
14:27:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:06: Reserv4                                       :0x0
14:27:06: Write Speed Factor R2W_FACTOR                 :0x2
14:27:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:06: FILE_FORMAT_GRP                               :0x0
14:27:06: COPY flag                                     :0x1
14:27:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:06: File_Format                                   :0x0
14:27:06: CRC                                           :0x0
14:27:06: ####CSD Registe Values####  

14:27:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:06: [GetSCRRegisterEntry] Passed
14:27:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:06: Data_Status_After Erases          : 0
14:27:06: CPRM Security Support             : No Security
14:27:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:06: Spec. Version                     : Version 3.0X
14:27:06: Extended Security Support         : Extended_Security_Not_Supported
14:27:06: Command Support                   : COMMAND_SUPPORT
14:27:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451780>, <py_sfcl.CommandDataDefinition object at 0x06451D20>) , Command count = 3367 ] 
14:27:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E090>, <py_sfcl.CommandDataDefinition object at 0x062E1330>) , Command count = 3368 ] 
14:27:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:06: [ SetBusWidth(0x4) , Command count = 3369 ] 
14:27:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3370 ] 
14:27:06: Protected Area Size 0x28000
14:27:06: Bus Width           2
14:27:06: Secure Mode         0
14:27:06: Speed  Class        4
14:27:06: Perf Move           0
14:27:06: Au Size             9
14:27:06: Erase Size          15
14:27:06: Erase Timeout       1
14:27:06: Erase offset        1
14:27:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3371 ] 
14:27:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:07: Host Frequency set to 100000 KHz
14:27:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:07: ####CSD Registe 2.0 Values####
14:27:07: CSD_STRUCTURE                                 :0x1
14:27:07: Reserv1                                       :0x0
14:27:07: Time Access 1 TAAC                            :0xe
14:27:07: Time Access 2 NSAC*100                        :0x0
14:27:07: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:07: Card Command Classess CCC                     :0x5b5
14:27:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:07: DSR(driver stage register)  DSR_IMP           :0x0
14:27:07: Reserv2                                       :0x0
14:27:07: Device Size C_SIZE                            :0xedc8
14:27:07: Reserv3                                       :0x0
14:27:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:07: Reserv4                                       :0x0
14:27:07: Write Speed Factor R2W_FACTOR                 :0x2
14:27:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:07: FILE_FORMAT_GRP                               :0x0
14:27:07: COPY flag                                     :0x1
14:27:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:07: File_Format                                   :0x0
14:27:07: CRC                                           :0x0
14:27:07: ####CSD Registe Values####  

14:27:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451630>, <py_sfcl.CommandDataDefinition object at 0x06451570>) , Command count = 3372 ] 
14:27:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064142D0>, <py_sfcl.CommandDataDefinition object at 0x064142A0>) , Command count = 3373 ] 
14:27:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F1E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06451EA0>, <py_sfcl.PySEnhancedCmdData object at 0x064518A0>, <None>, <py_sfcl.Command23 object at 0x06414CF0>) , Command count = 3374 ] 
14:27:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 22
14:27:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F4B0>, <py_sfcl.PySEnhancedCmdData object at 0x06414A50>, <None>, <py_sfcl.Command23 object at 0x06451BD0>) , Command count = 3375 ] 
14:27:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7F60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B0C0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BC00>, <None>, <py_sfcl.Command23 object at 0x06451900>) , Command count = 3376 ] 
14:27:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:09: Host Frequency set to 25000 KHz
14:27:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB10>, 0x0, True) , Command count = 3377 ] 
14:27:09: [GO18_globalSetVolt]### Host voltage value is set.
14:27:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431150>, 0x0, False) , Command count = 3378 ] 
14:27:09: [GO18_globalSetVolt]### Host voltage value is set.
14:27:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3379 ] 
14:27:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3380 ] 
14:27:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3381 ] 
14:27:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FFC0>, <py_sfcl.CommandDataDefinition object at 0x06451E40>) , Command count = 3382 ] 
14:27:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064515A0>, <py_sfcl.CommandDataDefinition object at 0x064143C0>) , Command count = 3383 ] 
14:27:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:09: [ SetCardRCA(0x1, 0xD555) , Command count = 3384 ] 
14:27:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:09: Host Frequency set to 25000 KHz
14:27:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:09: ####CSD Registe 2.0 Values####
14:27:09: CSD_STRUCTURE                                 :0x1
14:27:09: Reserv1                                       :0x0
14:27:09: Time Access 1 TAAC                            :0xe
14:27:09: Time Access 2 NSAC*100                        :0x0
14:27:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:09: Card Command Classess CCC                     :0x5b5
14:27:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:09: DSR(driver stage register)  DSR_IMP           :0x0
14:27:09: Reserv2                                       :0x0
14:27:09: Device Size C_SIZE                            :0xedc8
14:27:09: Reserv3                                       :0x0
14:27:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:09: Reserv4                                       :0x0
14:27:09: Write Speed Factor R2W_FACTOR                 :0x2
14:27:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:09: FILE_FORMAT_GRP                               :0x0
14:27:09: COPY flag                                     :0x1
14:27:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:09: File_Format                                   :0x0
14:27:09: CRC                                           :0x0
14:27:09: ####CSD Registe Values####  

14:27:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:09: [GetSCRRegisterEntry] Passed
14:27:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:09: Data_Status_After Erases          : 0
14:27:09: CPRM Security Support             : No Security
14:27:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:09: Spec. Version                     : Version 3.0X
14:27:09: Extended Security Support         : Extended_Security_Not_Supported
14:27:09: Command Support                   : COMMAND_SUPPORT
14:27:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451600>, <py_sfcl.CommandDataDefinition object at 0x06414FC0>) , Command count = 3385 ] 
14:27:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E900>, <py_sfcl.CommandDataDefinition object at 0x0641FD20>) , Command count = 3386 ] 
14:27:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:09: [ SetBusWidth(0x4) , Command count = 3387 ] 
14:27:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3388 ] 
14:27:09: Protected Area Size 0x28000
14:27:09: Bus Width           2
14:27:09: Secure Mode         0
14:27:09: Speed  Class        4
14:27:09: Perf Move           0
14:27:09: Au Size             9
14:27:09: Erase Size          15
14:27:09: Erase Timeout       1
14:27:09: Erase offset        1
14:27:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3389 ] 
14:27:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:09: Host Frequency set to 100000 KHz
14:27:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:09: ####CSD Registe 2.0 Values####
14:27:09: CSD_STRUCTURE                                 :0x1
14:27:09: Reserv1                                       :0x0
14:27:09: Time Access 1 TAAC                            :0xe
14:27:09: Time Access 2 NSAC*100                        :0x0
14:27:09: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:09: Card Command Classess CCC                     :0x5b5
14:27:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:09: DSR(driver stage register)  DSR_IMP           :0x0
14:27:09: Reserv2                                       :0x0
14:27:09: Device Size C_SIZE                            :0xedc8
14:27:09: Reserv3                                       :0x0
14:27:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:09: Reserv4                                       :0x0
14:27:09: Write Speed Factor R2W_FACTOR                 :0x2
14:27:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:09: FILE_FORMAT_GRP                               :0x0
14:27:09: COPY flag                                     :0x1
14:27:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:09: File_Format                                   :0x0
14:27:09: CRC                                           :0x0
14:27:09: ####CSD Registe Values####  

14:27:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467060>, <py_sfcl.CommandDataDefinition object at 0x06414C60>) , Command count = 3390 ] 
14:27:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E780>, <py_sfcl.CommandDataDefinition object at 0x06414990>) , Command count = 3391 ] 
14:27:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064671E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467210>, <py_sfcl.PySEnhancedCmdData object at 0x06467240>, <None>, <py_sfcl.Command23 object at 0x0641FCC0>) , Command count = 3392 ] 
14:27:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 21
14:27:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064670C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064670F0>, <py_sfcl.PySEnhancedCmdData object at 0x06467120>, <None>, <py_sfcl.Command23 object at 0x0641F660>) , Command count = 3393 ] 
14:27:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421ED0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B630>, <py_sfcl.PySEnhancedCmdData object at 0x0645B6C0>, <None>, <py_sfcl.Command23 object at 0x064146F0>) , Command count = 3394 ] 
14:27:09: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:09: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:11: Host Frequency set to 25000 KHz
14:27:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:11: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x064675A0>, 0x0, True) , Command count = 3395 ] 
14:27:12: [GO18_globalSetVolt]### Host voltage value is set.
14:27:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DADAB0>, 0x0, False) , Command count = 3396 ] 
14:27:12: [GO18_globalSetVolt]### Host voltage value is set.
14:27:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3397 ] 
14:27:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3398 ] 
14:27:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3399 ] 
14:27:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467540>, <py_sfcl.CommandDataDefinition object at 0x064674E0>) , Command count = 3400 ] 
14:27:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064148A0>, <py_sfcl.CommandDataDefinition object at 0x0641F0F0>) , Command count = 3401 ] 
14:27:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:12: [ SetCardRCA(0x1, 0xD555) , Command count = 3402 ] 
14:27:12: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:12: Host Frequency set to 25000 KHz
14:27:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:12: ####CSD Registe 2.0 Values####
14:27:12: CSD_STRUCTURE                                 :0x1
14:27:12: Reserv1                                       :0x0
14:27:12: Time Access 1 TAAC                            :0xe
14:27:12: Time Access 2 NSAC*100                        :0x0
14:27:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:12: Card Command Classess CCC                     :0x5b5
14:27:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:12: DSR(driver stage register)  DSR_IMP           :0x0
14:27:12: Reserv2                                       :0x0
14:27:12: Device Size C_SIZE                            :0xedc8
14:27:12: Reserv3                                       :0x0
14:27:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:12: Reserv4                                       :0x0
14:27:12: Write Speed Factor R2W_FACTOR                 :0x2
14:27:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:12: FILE_FORMAT_GRP                               :0x0
14:27:12: COPY flag                                     :0x1
14:27:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:12: File_Format                                   :0x0
14:27:12: CRC                                           :0x0
14:27:12: ####CSD Registe Values####  

14:27:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:12: [GetSCRRegisterEntry] Passed
14:27:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:12: Data_Status_After Erases          : 0
14:27:12: CPRM Security Support             : No Security
14:27:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:12: Spec. Version                     : Version 3.0X
14:27:12: Extended Security Support         : Extended_Security_Not_Supported
14:27:12: Command Support                   : COMMAND_SUPPORT
14:27:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467660>, <py_sfcl.CommandDataDefinition object at 0x064313F0>) , Command count = 3403 ] 
14:27:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451450>, <py_sfcl.CommandDataDefinition object at 0x0641F2A0>) , Command count = 3404 ] 
14:27:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:12: [ SetBusWidth(0x4) , Command count = 3405 ] 
14:27:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3406 ] 
14:27:12: Protected Area Size 0x28000
14:27:12: Bus Width           2
14:27:12: Secure Mode         0
14:27:12: Speed  Class        4
14:27:12: Perf Move           0
14:27:12: Au Size             9
14:27:12: Erase Size          15
14:27:12: Erase Timeout       1
14:27:12: Erase offset        1
14:27:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3407 ] 
14:27:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:12: Host Frequency set to 100000 KHz
14:27:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:12: ####CSD Registe 2.0 Values####
14:27:12: CSD_STRUCTURE                                 :0x1
14:27:12: Reserv1                                       :0x0
14:27:12: Time Access 1 TAAC                            :0xe
14:27:12: Time Access 2 NSAC*100                        :0x0
14:27:12: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:12: Card Command Classess CCC                     :0x5b5
14:27:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:12: DSR(driver stage register)  DSR_IMP           :0x0
14:27:12: Reserv2                                       :0x0
14:27:12: Device Size C_SIZE                            :0xedc8
14:27:12: Reserv3                                       :0x0
14:27:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:12: Reserv4                                       :0x0
14:27:12: Write Speed Factor R2W_FACTOR                 :0x2
14:27:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:12: FILE_FORMAT_GRP                               :0x0
14:27:12: COPY flag                                     :0x1
14:27:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:12: File_Format                                   :0x0
14:27:12: CRC                                           :0x0
14:27:12: ####CSD Registe Values####  

14:27:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467A50>, <py_sfcl.CommandDataDefinition object at 0x0641F030>) , Command count = 3408 ] 
14:27:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431480>, <py_sfcl.CommandDataDefinition object at 0x06431DB0>) , Command count = 3409 ] 
14:27:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467990>, <py_sfcl.PySEnhancedCmdData object at 0x064679C0>, <None>, <py_sfcl.Command23 object at 0x0641F0C0>) , Command count = 3410 ] 
14:27:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 20
14:27:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06467AE0>, <None>, <py_sfcl.Command23 object at 0x0641F240>) , Command count = 3411 ] 
14:27:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF840>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B330>, <py_sfcl.PySEnhancedCmdData object at 0x0645B630>, <None>, <py_sfcl.Command23 object at 0x0641F090>) , Command count = 3412 ] 
14:27:12: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:12: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:14: Host Frequency set to 25000 KHz
14:27:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:14: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467E40>, 0x0, True) , Command count = 3413 ] 
14:27:14: [GO18_globalSetVolt]### Host voltage value is set.
14:27:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF9F0>, 0x0, False) , Command count = 3414 ] 
14:27:14: [GO18_globalSetVolt]### Host voltage value is set.
14:27:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3415 ] 
14:27:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3416 ] 
14:27:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3417 ] 
14:27:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F510>, <py_sfcl.CommandDataDefinition object at 0x0641FC00>) , Command count = 3418 ] 
14:27:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467ED0>, <py_sfcl.CommandDataDefinition object at 0x06467D80>) , Command count = 3419 ] 
14:27:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:15: [ SetCardRCA(0x1, 0xD555) , Command count = 3420 ] 
14:27:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:15: Host Frequency set to 25000 KHz
14:27:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:15: ####CSD Registe 2.0 Values####
14:27:15: CSD_STRUCTURE                                 :0x1
14:27:15: Reserv1                                       :0x0
14:27:15: Time Access 1 TAAC                            :0xe
14:27:15: Time Access 2 NSAC*100                        :0x0
14:27:15: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:15: Card Command Classess CCC                     :0x5b5
14:27:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:15: DSR(driver stage register)  DSR_IMP           :0x0
14:27:15: Reserv2                                       :0x0
14:27:15: Device Size C_SIZE                            :0xedc8
14:27:15: Reserv3                                       :0x0
14:27:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:15: Reserv4                                       :0x0
14:27:15: Write Speed Factor R2W_FACTOR                 :0x2
14:27:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:15: FILE_FORMAT_GRP                               :0x0
14:27:15: COPY flag                                     :0x1
14:27:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:15: File_Format                                   :0x0
14:27:15: CRC                                           :0x0
14:27:15: ####CSD Registe Values####  

14:27:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:15: [GetSCRRegisterEntry] Passed
14:27:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:15: Data_Status_After Erases          : 0
14:27:15: CPRM Security Support             : No Security
14:27:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:15: Spec. Version                     : Version 3.0X
14:27:15: Extended Security Support         : Extended_Security_Not_Supported
14:27:15: Command Support                   : COMMAND_SUPPORT
14:27:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421030>, <py_sfcl.CommandDataDefinition object at 0x06467F00>) , Command count = 3421 ] 
14:27:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB70>, <py_sfcl.CommandDataDefinition object at 0x06467DB0>) , Command count = 3422 ] 
14:27:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:15: [ SetBusWidth(0x4) , Command count = 3423 ] 
14:27:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B3C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3424 ] 
14:27:15: Protected Area Size 0x28000
14:27:15: Bus Width           2
14:27:15: Secure Mode         0
14:27:15: Speed  Class        4
14:27:15: Perf Move           0
14:27:15: Au Size             9
14:27:15: Erase Size          15
14:27:15: Erase Timeout       1
14:27:15: Erase offset        1
14:27:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3425 ] 
14:27:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:15: Host Frequency set to 100000 KHz
14:27:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:15: ####CSD Registe 2.0 Values####
14:27:15: CSD_STRUCTURE                                 :0x1
14:27:15: Reserv1                                       :0x0
14:27:15: Time Access 1 TAAC                            :0xe
14:27:15: Time Access 2 NSAC*100                        :0x0
14:27:15: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:15: Card Command Classess CCC                     :0x5b5
14:27:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:15: DSR(driver stage register)  DSR_IMP           :0x0
14:27:15: Reserv2                                       :0x0
14:27:15: Device Size C_SIZE                            :0xedc8
14:27:15: Reserv3                                       :0x0
14:27:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:15: Reserv4                                       :0x0
14:27:15: Write Speed Factor R2W_FACTOR                 :0x2
14:27:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:15: FILE_FORMAT_GRP                               :0x0
14:27:15: COPY flag                                     :0x1
14:27:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:15: File_Format                                   :0x0
14:27:15: CRC                                           :0x0
14:27:15: ####CSD Registe Values####  

14:27:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F330>, <py_sfcl.CommandDataDefinition object at 0x06467F90>) , Command count = 3426 ] 
14:27:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064515D0>, <py_sfcl.CommandDataDefinition object at 0x0641FD80>) , Command count = 3427 ] 
14:27:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064212A0>, <py_sfcl.PySEnhancedCmdData object at 0x06467C00>, <None>, <py_sfcl.Command23 object at 0x0645B6C0>) , Command count = 3428 ] 
14:27:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 19
14:27:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421360>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421390>, <py_sfcl.PySEnhancedCmdData object at 0x064679F0>, <None>, <py_sfcl.Command23 object at 0x06467690>) , Command count = 3429 ] 
14:27:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421630>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BDE0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B2D0>, <None>, <py_sfcl.Command23 object at 0x06467FC0>) , Command count = 3430 ] 
14:27:15: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:17: Host Frequency set to 25000 KHz
14:27:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:17: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421720>, 0x0, True) , Command count = 3431 ] 
14:27:17: [GO18_globalSetVolt]### Host voltage value is set.
14:27:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06414D20>, 0x0, False) , Command count = 3432 ] 
14:27:17: [GO18_globalSetVolt]### Host voltage value is set.
14:27:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3433 ] 
14:27:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3434 ] 
14:27:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3435 ] 
14:27:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216C0>, <py_sfcl.CommandDataDefinition object at 0x06421660>) , Command count = 3436 ] 
14:27:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467BA0>, <py_sfcl.CommandDataDefinition object at 0x06467A20>) , Command count = 3437 ] 
14:27:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:17: [ SetCardRCA(0x1, 0xD555) , Command count = 3438 ] 
14:27:17: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:17: Host Frequency set to 25000 KHz
14:27:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:17: ####CSD Registe 2.0 Values####
14:27:17: CSD_STRUCTURE                                 :0x1
14:27:17: Reserv1                                       :0x0
14:27:17: Time Access 1 TAAC                            :0xe
14:27:17: Time Access 2 NSAC*100                        :0x0
14:27:17: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:17: Card Command Classess CCC                     :0x5b5
14:27:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:17: DSR(driver stage register)  DSR_IMP           :0x0
14:27:17: Reserv2                                       :0x0
14:27:17: Device Size C_SIZE                            :0xedc8
14:27:17: Reserv3                                       :0x0
14:27:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:17: Reserv4                                       :0x0
14:27:17: Write Speed Factor R2W_FACTOR                 :0x2
14:27:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:17: FILE_FORMAT_GRP                               :0x0
14:27:17: COPY flag                                     :0x1
14:27:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:17: File_Format                                   :0x0
14:27:17: CRC                                           :0x0
14:27:17: ####CSD Registe Values####  

14:27:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:17: [GetSCRRegisterEntry] Passed
14:27:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:17: Data_Status_After Erases          : 0
14:27:17: CPRM Security Support             : No Security
14:27:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:17: Spec. Version                     : Version 3.0X
14:27:17: Extended Security Support         : Extended_Security_Not_Supported
14:27:17: Command Support                   : COMMAND_SUPPORT
14:27:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064219C0>, <py_sfcl.CommandDataDefinition object at 0x06467C60>) , Command count = 3439 ] 
14:27:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431ED0>, <py_sfcl.CommandDataDefinition object at 0x06467150>) , Command count = 3440 ] 
14:27:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:17: [ SetBusWidth(0x4) , Command count = 3441 ] 
14:27:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BC30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3442 ] 
14:27:18: Protected Area Size 0x28000
14:27:18: Bus Width           2
14:27:18: Secure Mode         0
14:27:18: Speed  Class        4
14:27:18: Perf Move           0
14:27:18: Au Size             9
14:27:18: Erase Size          15
14:27:18: Erase Timeout       1
14:27:18: Erase offset        1
14:27:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3443 ] 
14:27:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:18: Host Frequency set to 100000 KHz
14:27:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:18: ####CSD Registe 2.0 Values####
14:27:18: CSD_STRUCTURE                                 :0x1
14:27:18: Reserv1                                       :0x0
14:27:18: Time Access 1 TAAC                            :0xe
14:27:18: Time Access 2 NSAC*100                        :0x0
14:27:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:18: Card Command Classess CCC                     :0x5b5
14:27:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:18: DSR(driver stage register)  DSR_IMP           :0x0
14:27:18: Reserv2                                       :0x0
14:27:18: Device Size C_SIZE                            :0xedc8
14:27:18: Reserv3                                       :0x0
14:27:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:18: Reserv4                                       :0x0
14:27:18: Write Speed Factor R2W_FACTOR                 :0x2
14:27:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:18: FILE_FORMAT_GRP                               :0x0
14:27:18: COPY flag                                     :0x1
14:27:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:18: File_Format                                   :0x0
14:27:18: CRC                                           :0x0
14:27:18: ####CSD Registe Values####  

14:27:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064217E0>, <py_sfcl.CommandDataDefinition object at 0x064216F0>) , Command count = 3444 ] 
14:27:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451C60>, <py_sfcl.CommandDataDefinition object at 0x06467570>) , Command count = 3445 ] 
14:27:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421B10>, <py_sfcl.PySEnhancedCmdData object at 0x06421B40>, <None>, <py_sfcl.Command23 object at 0x06467330>) , Command count = 3446 ] 
14:27:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 18
14:27:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421C30>, <py_sfcl.PySEnhancedCmdData object at 0x06421C60>, <None>, <py_sfcl.Command23 object at 0x064671B0>) , Command count = 3447 ] 
14:27:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451F00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BCF0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BDE0>, <None>, <py_sfcl.Command23 object at 0x06467750>) , Command count = 3448 ] 
14:27:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:18: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:20: Host Frequency set to 25000 KHz
14:27:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:20: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421FC0>, 0x0, True) , Command count = 3449 ] 
14:27:20: [GO18_globalSetVolt]### Host voltage value is set.
14:27:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467270>, 0x0, False) , Command count = 3450 ] 
14:27:20: [GO18_globalSetVolt]### Host voltage value is set.
14:27:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3451 ] 
14:27:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3452 ] 
14:27:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3453 ] 
14:27:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A060>, <py_sfcl.CommandDataDefinition object at 0x06421F60>) , Command count = 3454 ] 
14:27:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A0F0>, <py_sfcl.CommandDataDefinition object at 0x06467EA0>) , Command count = 3455 ] 
14:27:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:20: [ SetCardRCA(0x1, 0xD555) , Command count = 3456 ] 
14:27:20: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:20: Host Frequency set to 25000 KHz
14:27:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:20: ####CSD Registe 2.0 Values####
14:27:20: CSD_STRUCTURE                                 :0x1
14:27:20: Reserv1                                       :0x0
14:27:20: Time Access 1 TAAC                            :0xe
14:27:20: Time Access 2 NSAC*100                        :0x0
14:27:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:20: Card Command Classess CCC                     :0x5b5
14:27:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:20: DSR(driver stage register)  DSR_IMP           :0x0
14:27:20: Reserv2                                       :0x0
14:27:20: Device Size C_SIZE                            :0xedc8
14:27:20: Reserv3                                       :0x0
14:27:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:20: Reserv4                                       :0x0
14:27:20: Write Speed Factor R2W_FACTOR                 :0x2
14:27:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:20: FILE_FORMAT_GRP                               :0x0
14:27:20: COPY flag                                     :0x1
14:27:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:20: File_Format                                   :0x0
14:27:20: CRC                                           :0x0
14:27:20: ####CSD Registe Values####  

14:27:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:20: [GetSCRRegisterEntry] Passed
14:27:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:20: Data_Status_After Erases          : 0
14:27:20: CPRM Security Support             : No Security
14:27:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:20: Spec. Version                     : Version 3.0X
14:27:20: Extended Security Support         : Extended_Security_Not_Supported
14:27:20: Command Support                   : COMMAND_SUPPORT
14:27:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A2A0>, <py_sfcl.CommandDataDefinition object at 0x0642A0C0>) , Command count = 3457 ] 
14:27:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414570>, <py_sfcl.CommandDataDefinition object at 0x064675D0>) , Command count = 3458 ] 
14:27:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:20: [ SetBusWidth(0x4) , Command count = 3459 ] 
14:27:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BBD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3460 ] 
14:27:20: Protected Area Size 0x28000
14:27:20: Bus Width           2
14:27:20: Secure Mode         0
14:27:20: Speed  Class        4
14:27:20: Perf Move           0
14:27:20: Au Size             9
14:27:20: Erase Size          15
14:27:20: Erase Timeout       1
14:27:20: Erase offset        1
14:27:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3461 ] 
14:27:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:20: Host Frequency set to 100000 KHz
14:27:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:20: ####CSD Registe 2.0 Values####
14:27:20: CSD_STRUCTURE                                 :0x1
14:27:20: Reserv1                                       :0x0
14:27:20: Time Access 1 TAAC                            :0xe
14:27:20: Time Access 2 NSAC*100                        :0x0
14:27:20: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:20: Card Command Classess CCC                     :0x5b5
14:27:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:20: DSR(driver stage register)  DSR_IMP           :0x0
14:27:20: Reserv2                                       :0x0
14:27:20: Device Size C_SIZE                            :0xedc8
14:27:20: Reserv3                                       :0x0
14:27:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:20: Reserv4                                       :0x0
14:27:20: Write Speed Factor R2W_FACTOR                 :0x2
14:27:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:20: FILE_FORMAT_GRP                               :0x0
14:27:20: COPY flag                                     :0x1
14:27:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:20: File_Format                                   :0x0
14:27:20: CRC                                           :0x0
14:27:20: ####CSD Registe Values####  

14:27:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A090>, <py_sfcl.CommandDataDefinition object at 0x064673C0>) , Command count = 3462 ] 
14:27:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451ED0>, <py_sfcl.CommandDataDefinition object at 0x06421270>) , Command count = 3463 ] 
14:27:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421D80>, <py_sfcl.PySEnhancedCmdData object at 0x06421BA0>, <None>, <py_sfcl.Command23 object at 0x06421540>) , Command count = 3464 ] 
14:27:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 17
14:27:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A510>, <py_sfcl.PySEnhancedCmdData object at 0x0642A540>, <None>, <py_sfcl.Command23 object at 0x06421F90>) , Command count = 3465 ] 
14:27:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451810>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B7B0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B090>, <None>, <py_sfcl.Command23 object at 0x064218A0>) , Command count = 3466 ] 
14:27:20: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:20: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:23: Host Frequency set to 25000 KHz
14:27:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:23: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A8A0>, 0x0, True) , Command count = 3467 ] 
14:27:23: [GO18_globalSetVolt]### Host voltage value is set.
14:27:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467510>, 0x0, False) , Command count = 3468 ] 
14:27:23: [GO18_globalSetVolt]### Host voltage value is set.
14:27:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3469 ] 
14:27:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3470 ] 
14:27:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3471 ] 
14:27:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A840>, <py_sfcl.CommandDataDefinition object at 0x06421D20>) , Command count = 3472 ] 
14:27:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421870>, <py_sfcl.CommandDataDefinition object at 0x06421810>) , Command count = 3473 ] 
14:27:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:23: [ SetCardRCA(0x1, 0xD555) , Command count = 3474 ] 
14:27:23: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:23: Host Frequency set to 25000 KHz
14:27:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:23: ####CSD Registe 2.0 Values####
14:27:23: CSD_STRUCTURE                                 :0x1
14:27:23: Reserv1                                       :0x0
14:27:23: Time Access 1 TAAC                            :0xe
14:27:23: Time Access 2 NSAC*100                        :0x0
14:27:23: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:23: Card Command Classess CCC                     :0x5b5
14:27:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:23: DSR(driver stage register)  DSR_IMP           :0x0
14:27:23: Reserv2                                       :0x0
14:27:23: Device Size C_SIZE                            :0xedc8
14:27:23: Reserv3                                       :0x0
14:27:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:23: Reserv4                                       :0x0
14:27:23: Write Speed Factor R2W_FACTOR                 :0x2
14:27:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:23: FILE_FORMAT_GRP                               :0x0
14:27:23: COPY flag                                     :0x1
14:27:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:23: File_Format                                   :0x0
14:27:23: CRC                                           :0x0
14:27:23: ####CSD Registe Values####  

14:27:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:23: [GetSCRRegisterEntry] Passed
14:27:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:23: Data_Status_After Erases          : 0
14:27:23: CPRM Security Support             : No Security
14:27:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:23: Spec. Version                     : Version 3.0X
14:27:23: Extended Security Support         : Extended_Security_Not_Supported
14:27:23: Command Support                   : COMMAND_SUPPORT
14:27:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AB40>, <py_sfcl.CommandDataDefinition object at 0x06421840>) , Command count = 3475 ] 
14:27:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414A80>, <py_sfcl.CommandDataDefinition object at 0x064219F0>) , Command count = 3476 ] 
14:27:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:23: [ SetBusWidth(0x4) , Command count = 3477 ] 
14:27:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3478 ] 
14:27:23: Protected Area Size 0x28000
14:27:23: Bus Width           2
14:27:23: Secure Mode         0
14:27:23: Speed  Class        4
14:27:23: Perf Move           0
14:27:23: Au Size             9
14:27:23: Erase Size          15
14:27:23: Erase Timeout       1
14:27:23: Erase offset        1
14:27:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3479 ] 
14:27:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:23: Host Frequency set to 100000 KHz
14:27:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:23: ####CSD Registe 2.0 Values####
14:27:23: CSD_STRUCTURE                                 :0x1
14:27:23: Reserv1                                       :0x0
14:27:23: Time Access 1 TAAC                            :0xe
14:27:23: Time Access 2 NSAC*100                        :0x0
14:27:23: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:23: Card Command Classess CCC                     :0x5b5
14:27:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:23: DSR(driver stage register)  DSR_IMP           :0x0
14:27:23: Reserv2                                       :0x0
14:27:23: Device Size C_SIZE                            :0xedc8
14:27:23: Reserv3                                       :0x0
14:27:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:23: Reserv4                                       :0x0
14:27:23: Write Speed Factor R2W_FACTOR                 :0x2
14:27:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:23: FILE_FORMAT_GRP                               :0x0
14:27:23: COPY flag                                     :0x1
14:27:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:23: File_Format                                   :0x0
14:27:23: CRC                                           :0x0
14:27:23: ####CSD Registe Values####  

14:27:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064210F0>, <py_sfcl.CommandDataDefinition object at 0x064217B0>) , Command count = 3480 ] 
14:27:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467720>, <py_sfcl.CommandDataDefinition object at 0x064214E0>) , Command count = 3481 ] 
14:27:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC60>, <py_sfcl.PySEnhancedCmdData object at 0x0642AC90>, <None>, <py_sfcl.Command23 object at 0x0642A930>) , Command count = 3482 ] 
14:27:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 16
14:27:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642ADB0>, <py_sfcl.PySEnhancedCmdData object at 0x0642ADE0>, <None>, <py_sfcl.Command23 object at 0x0642A7E0>) , Command count = 3483 ] 
14:27:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451F60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BCC0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BEA0>, <None>, <py_sfcl.Command23 object at 0x0642AA50>) , Command count = 3484 ] 
14:27:23: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:23: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:25: Host Frequency set to 25000 KHz
14:27:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E030>, 0x0, True) , Command count = 3485 ] 
14:27:25: [GO18_globalSetVolt]### Host voltage value is set.
14:27:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB40>, 0x0, False) , Command count = 3486 ] 
14:27:25: [GO18_globalSetVolt]### Host voltage value is set.
14:27:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3487 ] 
14:27:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3488 ] 
14:27:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3489 ] 
14:27:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E150>, <py_sfcl.CommandDataDefinition object at 0x0642E0F0>) , Command count = 3490 ] 
14:27:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421B70>, <py_sfcl.CommandDataDefinition object at 0x06421300>) , Command count = 3491 ] 
14:27:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:26: [ SetCardRCA(0x1, 0xD555) , Command count = 3492 ] 
14:27:26: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:26: Host Frequency set to 25000 KHz
14:27:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:26: ####CSD Registe 2.0 Values####
14:27:26: CSD_STRUCTURE                                 :0x1
14:27:26: Reserv1                                       :0x0
14:27:26: Time Access 1 TAAC                            :0xe
14:27:26: Time Access 2 NSAC*100                        :0x0
14:27:26: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:26: Card Command Classess CCC                     :0x5b5
14:27:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:26: DSR(driver stage register)  DSR_IMP           :0x0
14:27:26: Reserv2                                       :0x0
14:27:26: Device Size C_SIZE                            :0xedc8
14:27:26: Reserv3                                       :0x0
14:27:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:26: Reserv4                                       :0x0
14:27:26: Write Speed Factor R2W_FACTOR                 :0x2
14:27:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:26: FILE_FORMAT_GRP                               :0x0
14:27:26: COPY flag                                     :0x1
14:27:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:26: File_Format                                   :0x0
14:27:26: CRC                                           :0x0
14:27:26: ####CSD Registe Values####  

14:27:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:26: [GetSCRRegisterEntry] Passed
14:27:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:26: Data_Status_After Erases          : 0
14:27:26: CPRM Security Support             : No Security
14:27:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:26: Spec. Version                     : Version 3.0X
14:27:26: Extended Security Support         : Extended_Security_Not_Supported
14:27:26: Command Support                   : COMMAND_SUPPORT
14:27:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A630>, <py_sfcl.CommandDataDefinition object at 0x0642E420>) , Command count = 3493 ] 
14:27:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FF60>, <py_sfcl.CommandDataDefinition object at 0x06421510>) , Command count = 3494 ] 
14:27:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:26: [ SetBusWidth(0x4) , Command count = 3495 ] 
14:27:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3496 ] 
14:27:26: Protected Area Size 0x28000
14:27:26: Bus Width           2
14:27:26: Secure Mode         0
14:27:26: Speed  Class        4
14:27:26: Perf Move           0
14:27:26: Au Size             9
14:27:26: Erase Size          15
14:27:26: Erase Timeout       1
14:27:26: Erase offset        1
14:27:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3497 ] 
14:27:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:26: Host Frequency set to 100000 KHz
14:27:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:26: ####CSD Registe 2.0 Values####
14:27:26: CSD_STRUCTURE                                 :0x1
14:27:26: Reserv1                                       :0x0
14:27:26: Time Access 1 TAAC                            :0xe
14:27:26: Time Access 2 NSAC*100                        :0x0
14:27:26: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:26: Card Command Classess CCC                     :0x5b5
14:27:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:26: DSR(driver stage register)  DSR_IMP           :0x0
14:27:26: Reserv2                                       :0x0
14:27:26: Device Size C_SIZE                            :0xedc8
14:27:26: Reserv3                                       :0x0
14:27:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:26: Reserv4                                       :0x0
14:27:26: Write Speed Factor R2W_FACTOR                 :0x2
14:27:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:26: FILE_FORMAT_GRP                               :0x0
14:27:26: COPY flag                                     :0x1
14:27:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:26: File_Format                                   :0x0
14:27:26: CRC                                           :0x0
14:27:26: ####CSD Registe Values####  

14:27:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A150>, <py_sfcl.CommandDataDefinition object at 0x0642ACC0>) , Command count = 3498 ] 
14:27:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467600>, <py_sfcl.CommandDataDefinition object at 0x0642A180>) , Command count = 3499 ] 
14:27:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AF00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AD20>, <py_sfcl.PySEnhancedCmdData object at 0x0642AE10>, <None>, <py_sfcl.Command23 object at 0x0642E1B0>) , Command count = 3500 ] 
14:27:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 15
14:27:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AB70>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AED0>, <py_sfcl.PySEnhancedCmdData object at 0x0642E660>, <None>, <py_sfcl.Command23 object at 0x0642A720>) , Command count = 3501 ] 
14:27:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641FA80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B150>, <py_sfcl.PySEnhancedCmdData object at 0x0645BAE0>, <None>, <py_sfcl.Command23 object at 0x0642E690>) , Command count = 3502 ] 
14:27:26: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:26: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:28: Host Frequency set to 25000 KHz
14:27:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:28: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EA20>, 0x0, True) , Command count = 3503 ] 
14:27:28: [GO18_globalSetVolt]### Host voltage value is set.
14:27:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E8D0>, 0x0, False) , Command count = 3504 ] 
14:27:28: [GO18_globalSetVolt]### Host voltage value is set.
14:27:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3505 ] 
14:27:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3506 ] 
14:27:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3507 ] 
14:27:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E9C0>, <py_sfcl.CommandDataDefinition object at 0x0642AE70>) , Command count = 3508 ] 
14:27:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A9F0>, <py_sfcl.CommandDataDefinition object at 0x0642A240>) , Command count = 3509 ] 
14:27:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:28: [ SetCardRCA(0x1, 0xD555) , Command count = 3510 ] 
14:27:28: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:28: Host Frequency set to 25000 KHz
14:27:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:28: ####CSD Registe 2.0 Values####
14:27:28: CSD_STRUCTURE                                 :0x1
14:27:28: Reserv1                                       :0x0
14:27:28: Time Access 1 TAAC                            :0xe
14:27:28: Time Access 2 NSAC*100                        :0x0
14:27:28: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:28: Card Command Classess CCC                     :0x5b5
14:27:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:28: DSR(driver stage register)  DSR_IMP           :0x0
14:27:28: Reserv2                                       :0x0
14:27:28: Device Size C_SIZE                            :0xedc8
14:27:28: Reserv3                                       :0x0
14:27:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:28: Reserv4                                       :0x0
14:27:28: Write Speed Factor R2W_FACTOR                 :0x2
14:27:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:28: FILE_FORMAT_GRP                               :0x0
14:27:28: COPY flag                                     :0x1
14:27:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:28: File_Format                                   :0x0
14:27:28: CRC                                           :0x0
14:27:28: ####CSD Registe Values####  

14:27:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:29: [GetSCRRegisterEntry] Passed
14:27:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:29: Data_Status_After Erases          : 0
14:27:29: CPRM Security Support             : No Security
14:27:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:29: Spec. Version                     : Version 3.0X
14:27:29: Extended Security Support         : Extended_Security_Not_Supported
14:27:29: Command Support                   : COMMAND_SUPPORT
14:27:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ECC0>, <py_sfcl.CommandDataDefinition object at 0x0642A8D0>) , Command count = 3511 ] 
14:27:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467390>, <py_sfcl.CommandDataDefinition object at 0x0642A1B0>) , Command count = 3512 ] 
14:27:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:29: [ SetBusWidth(0x4) , Command count = 3513 ] 
14:27:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3514 ] 
14:27:29: Protected Area Size 0x28000
14:27:29: Bus Width           2
14:27:29: Secure Mode         0
14:27:29: Speed  Class        4
14:27:29: Perf Move           0
14:27:29: Au Size             9
14:27:29: Erase Size          15
14:27:29: Erase Timeout       1
14:27:29: Erase offset        1
14:27:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3515 ] 
14:27:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:29: Host Frequency set to 100000 KHz
14:27:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:29: ####CSD Registe 2.0 Values####
14:27:29: CSD_STRUCTURE                                 :0x1
14:27:29: Reserv1                                       :0x0
14:27:29: Time Access 1 TAAC                            :0xe
14:27:29: Time Access 2 NSAC*100                        :0x0
14:27:29: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:29: Card Command Classess CCC                     :0x5b5
14:27:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:29: DSR(driver stage register)  DSR_IMP           :0x0
14:27:29: Reserv2                                       :0x0
14:27:29: Device Size C_SIZE                            :0xedc8
14:27:29: Reserv3                                       :0x0
14:27:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:29: Reserv4                                       :0x0
14:27:29: Write Speed Factor R2W_FACTOR                 :0x2
14:27:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:29: FILE_FORMAT_GRP                               :0x0
14:27:29: COPY flag                                     :0x1
14:27:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:29: File_Format                                   :0x0
14:27:29: CRC                                           :0x0
14:27:29: ####CSD Registe Values####  

14:27:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EED0>, <py_sfcl.CommandDataDefinition object at 0x0642EBA0>) , Command count = 3516 ] 
14:27:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467300>, <py_sfcl.CommandDataDefinition object at 0x0642E6C0>) , Command count = 3517 ] 
14:27:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642ECF0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EB10>, <py_sfcl.PySEnhancedCmdData object at 0x0642A660>, <None>, <py_sfcl.Command23 object at 0x0642A810>) , Command count = 3518 ] 
14:27:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 14
14:27:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064310F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642EF30>, <None>, <py_sfcl.Command23 object at 0x0642AE40>) , Command count = 3519 ] 
14:27:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421690>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B690>, <py_sfcl.PySEnhancedCmdData object at 0x0645B210>, <None>, <py_sfcl.Command23 object at 0x0642A9C0>) , Command count = 3520 ] 
14:27:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:29: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:31: Host Frequency set to 25000 KHz
14:27:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:31: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431300>, 0x0, True) , Command count = 3521 ] 
14:27:31: [GO18_globalSetVolt]### Host voltage value is set.
14:27:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467D20>, 0x0, False) , Command count = 3522 ] 
14:27:31: [GO18_globalSetVolt]### Host voltage value is set.
14:27:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3523 ] 
14:27:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3524 ] 
14:27:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3525 ] 
14:27:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312A0>, <py_sfcl.CommandDataDefinition object at 0x06431270>) , Command count = 3526 ] 
14:27:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C40B70>, <py_sfcl.CommandDataDefinition object at 0x0642AC00>) , Command count = 3527 ] 
14:27:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:31: [ SetCardRCA(0x1, 0xD555) , Command count = 3528 ] 
14:27:31: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:31: Host Frequency set to 25000 KHz
14:27:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:31: ####CSD Registe 2.0 Values####
14:27:31: CSD_STRUCTURE                                 :0x1
14:27:31: Reserv1                                       :0x0
14:27:31: Time Access 1 TAAC                            :0xe
14:27:31: Time Access 2 NSAC*100                        :0x0
14:27:31: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:31: Card Command Classess CCC                     :0x5b5
14:27:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:31: DSR(driver stage register)  DSR_IMP           :0x0
14:27:31: Reserv2                                       :0x0
14:27:31: Device Size C_SIZE                            :0xedc8
14:27:31: Reserv3                                       :0x0
14:27:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:31: Reserv4                                       :0x0
14:27:31: Write Speed Factor R2W_FACTOR                 :0x2
14:27:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:31: FILE_FORMAT_GRP                               :0x0
14:27:31: COPY flag                                     :0x1
14:27:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:31: File_Format                                   :0x0
14:27:31: CRC                                           :0x0
14:27:31: ####CSD Registe Values####  

14:27:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:31: [GetSCRRegisterEntry] Passed
14:27:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:31: Data_Status_After Erases          : 0
14:27:31: CPRM Security Support             : No Security
14:27:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:31: Spec. Version                     : Version 3.0X
14:27:31: Extended Security Support         : Extended_Security_Not_Supported
14:27:31: Command Support                   : COMMAND_SUPPORT
14:27:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431570>, <py_sfcl.CommandDataDefinition object at 0x0642E8A0>) , Command count = 3529 ] 
14:27:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FF30>, <py_sfcl.CommandDataDefinition object at 0x0642A7B0>) , Command count = 3530 ] 
14:27:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:31: [ SetBusWidth(0x4) , Command count = 3531 ] 
14:27:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3532 ] 
14:27:31: Protected Area Size 0x28000
14:27:31: Bus Width           2
14:27:31: Secure Mode         0
14:27:31: Speed  Class        4
14:27:31: Perf Move           0
14:27:31: Au Size             9
14:27:31: Erase Size          15
14:27:31: Erase Timeout       1
14:27:31: Erase offset        1
14:27:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3533 ] 
14:27:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:31: Host Frequency set to 100000 KHz
14:27:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:31: ####CSD Registe 2.0 Values####
14:27:31: CSD_STRUCTURE                                 :0x1
14:27:31: Reserv1                                       :0x0
14:27:31: Time Access 1 TAAC                            :0xe
14:27:31: Time Access 2 NSAC*100                        :0x0
14:27:31: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:31: Card Command Classess CCC                     :0x5b5
14:27:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:31: DSR(driver stage register)  DSR_IMP           :0x0
14:27:31: Reserv2                                       :0x0
14:27:31: Device Size C_SIZE                            :0xedc8
14:27:31: Reserv3                                       :0x0
14:27:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:31: Reserv4                                       :0x0
14:27:31: Write Speed Factor R2W_FACTOR                 :0x2
14:27:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:31: FILE_FORMAT_GRP                               :0x0
14:27:31: COPY flag                                     :0x1
14:27:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:31: File_Format                                   :0x0
14:27:31: CRC                                           :0x0
14:27:31: ####CSD Registe Values####  

14:27:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7BD0>, <py_sfcl.CommandDataDefinition object at 0x05D7E1E0>) , Command count = 3534 ] 
14:27:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E840>, <py_sfcl.CommandDataDefinition object at 0x0642E9F0>) , Command count = 3535 ] 
14:27:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064312D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431360>, <py_sfcl.PySEnhancedCmdData object at 0x0642EAB0>, <None>, <py_sfcl.Command23 object at 0x0642A750>) , Command count = 3536 ] 
14:27:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 13
14:27:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7C30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431630>, <py_sfcl.PySEnhancedCmdData object at 0x0642E750>, <None>, <py_sfcl.Command23 object at 0x0642E630>) , Command count = 3537 ] 
14:27:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467C90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B060>, <py_sfcl.PySEnhancedCmdData object at 0x0645B390>, <None>, <py_sfcl.Command23 object at 0x0642EEA0>) , Command count = 3538 ] 
14:27:31: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:31: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:34: Host Frequency set to 25000 KHz
14:27:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:34: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAD180>, 0x0, True) , Command count = 3539 ] 
14:27:34: [GO18_globalSetVolt]### Host voltage value is set.
14:27:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421600>, 0x0, False) , Command count = 3540 ] 
14:27:34: [GO18_globalSetVolt]### Host voltage value is set.
14:27:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3541 ] 
14:27:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3542 ] 
14:27:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3543 ] 
14:27:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F90>, <py_sfcl.CommandDataDefinition object at 0x05DA7960>) , Command count = 3544 ] 
14:27:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADD50>, <py_sfcl.CommandDataDefinition object at 0x0642AF30>) , Command count = 3545 ] 
14:27:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:34: [ SetCardRCA(0x1, 0xD555) , Command count = 3546 ] 
14:27:34: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:34: Host Frequency set to 25000 KHz
14:27:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:34: ####CSD Registe 2.0 Values####
14:27:34: CSD_STRUCTURE                                 :0x1
14:27:34: Reserv1                                       :0x0
14:27:34: Time Access 1 TAAC                            :0xe
14:27:34: Time Access 2 NSAC*100                        :0x0
14:27:34: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:34: Card Command Classess CCC                     :0x5b5
14:27:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:34: DSR(driver stage register)  DSR_IMP           :0x0
14:27:34: Reserv2                                       :0x0
14:27:34: Device Size C_SIZE                            :0xedc8
14:27:34: Reserv3                                       :0x0
14:27:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:34: Reserv4                                       :0x0
14:27:34: Write Speed Factor R2W_FACTOR                 :0x2
14:27:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:34: FILE_FORMAT_GRP                               :0x0
14:27:34: COPY flag                                     :0x1
14:27:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:34: File_Format                                   :0x0
14:27:34: CRC                                           :0x0
14:27:34: ####CSD Registe Values####  

14:27:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:34: [GetSCRRegisterEntry] Passed
14:27:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:34: Data_Status_After Erases          : 0
14:27:34: CPRM Security Support             : No Security
14:27:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:34: Spec. Version                     : Version 3.0X
14:27:34: Extended Security Support         : Extended_Security_Not_Supported
14:27:34: Command Support                   : COMMAND_SUPPORT
14:27:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8A80>, <py_sfcl.CommandDataDefinition object at 0x06431A80>) , Command count = 3547 ] 
14:27:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064672D0>, <py_sfcl.CommandDataDefinition object at 0x0642EB70>) , Command count = 3548 ] 
14:27:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:34: [ SetBusWidth(0x4) , Command count = 3549 ] 
14:27:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3550 ] 
14:27:34: Protected Area Size 0x28000
14:27:34: Bus Width           2
14:27:34: Secure Mode         0
14:27:34: Speed  Class        4
14:27:34: Perf Move           0
14:27:34: Au Size             9
14:27:34: Erase Size          15
14:27:34: Erase Timeout       1
14:27:34: Erase offset        1
14:27:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3551 ] 
14:27:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:34: Host Frequency set to 100000 KHz
14:27:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:34: ####CSD Registe 2.0 Values####
14:27:34: CSD_STRUCTURE                                 :0x1
14:27:34: Reserv1                                       :0x0
14:27:34: Time Access 1 TAAC                            :0xe
14:27:34: Time Access 2 NSAC*100                        :0x0
14:27:34: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:34: Card Command Classess CCC                     :0x5b5
14:27:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:34: DSR(driver stage register)  DSR_IMP           :0x0
14:27:34: Reserv2                                       :0x0
14:27:34: Device Size C_SIZE                            :0xedc8
14:27:34: Reserv3                                       :0x0
14:27:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:34: Reserv4                                       :0x0
14:27:34: Write Speed Factor R2W_FACTOR                 :0x2
14:27:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:34: FILE_FORMAT_GRP                               :0x0
14:27:34: COPY flag                                     :0x1
14:27:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:34: File_Format                                   :0x0
14:27:34: CRC                                           :0x0
14:27:34: ####CSD Registe Values####  

14:27:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D91180>, <py_sfcl.CommandDataDefinition object at 0x05D91210>) , Command count = 3552 ] 
14:27:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451D50>, <py_sfcl.CommandDataDefinition object at 0x0642EFC0>) , Command count = 3553 ] 
14:27:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF7E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431660>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6F0>, <None>, <py_sfcl.Command23 object at 0x0642EBD0>) , Command count = 3554 ] 
14:27:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 12
14:27:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF810>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431B40>, <py_sfcl.PySEnhancedCmdData object at 0x06431B70>, <None>, <py_sfcl.Command23 object at 0x0642E360>) , Command count = 3555 ] 
14:27:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421570>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B030>, <py_sfcl.PySEnhancedCmdData object at 0x0645B390>, <None>, <py_sfcl.Command23 object at 0x0642E5A0>) , Command count = 3556 ] 
14:27:34: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:34: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:36: Host Frequency set to 25000 KHz
14:27:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:36: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF960>, 0x0, True) , Command count = 3557 ] 
14:27:36: [GO18_globalSetVolt]### Host voltage value is set.
14:27:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421EA0>, 0x0, False) , Command count = 3558 ] 
14:27:36: [GO18_globalSetVolt]### Host voltage value is set.
14:27:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3559 ] 
14:27:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3560 ] 
14:27:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3561 ] 
14:27:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB10>, <py_sfcl.CommandDataDefinition object at 0x05DA7C60>) , Command count = 3562 ] 
14:27:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFBA0>, <py_sfcl.CommandDataDefinition object at 0x0642ED80>) , Command count = 3563 ] 
14:27:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:37: [ SetCardRCA(0x1, 0xD555) , Command count = 3564 ] 
14:27:37: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:37: Host Frequency set to 25000 KHz
14:27:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:37: ####CSD Registe 2.0 Values####
14:27:37: CSD_STRUCTURE                                 :0x1
14:27:37: Reserv1                                       :0x0
14:27:37: Time Access 1 TAAC                            :0xe
14:27:37: Time Access 2 NSAC*100                        :0x0
14:27:37: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:37: Card Command Classess CCC                     :0x5b5
14:27:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:37: DSR(driver stage register)  DSR_IMP           :0x0
14:27:37: Reserv2                                       :0x0
14:27:37: Device Size C_SIZE                            :0xedc8
14:27:37: Reserv3                                       :0x0
14:27:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:37: Reserv4                                       :0x0
14:27:37: Write Speed Factor R2W_FACTOR                 :0x2
14:27:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:37: FILE_FORMAT_GRP                               :0x0
14:27:37: COPY flag                                     :0x1
14:27:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:37: File_Format                                   :0x0
14:27:37: CRC                                           :0x0
14:27:37: ####CSD Registe Values####  

14:27:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:37: [GetSCRRegisterEntry] Passed
14:27:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:37: Data_Status_After Erases          : 0
14:27:37: CPRM Security Support             : No Security
14:27:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:37: Spec. Version                     : Version 3.0X
14:27:37: Extended Security Support         : Extended_Security_Not_Supported
14:27:37: Command Support                   : COMMAND_SUPPORT
14:27:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB40>, <py_sfcl.CommandDataDefinition object at 0x06431FC0>) , Command count = 3565 ] 
14:27:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467B70>, <py_sfcl.CommandDataDefinition object at 0x0642EE70>) , Command count = 3566 ] 
14:27:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:37: [ SetBusWidth(0x4) , Command count = 3567 ] 
14:27:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BDB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3568 ] 
14:27:37: Protected Area Size 0x28000
14:27:37: Bus Width           2
14:27:37: Secure Mode         0
14:27:37: Speed  Class        4
14:27:37: Perf Move           0
14:27:37: Au Size             9
14:27:37: Erase Size          15
14:27:37: Erase Timeout       1
14:27:37: Erase offset        1
14:27:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3569 ] 
14:27:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:37: Host Frequency set to 100000 KHz
14:27:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:37: ####CSD Registe 2.0 Values####
14:27:37: CSD_STRUCTURE                                 :0x1
14:27:37: Reserv1                                       :0x0
14:27:37: Time Access 1 TAAC                            :0xe
14:27:37: Time Access 2 NSAC*100                        :0x0
14:27:37: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:37: Card Command Classess CCC                     :0x5b5
14:27:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:37: DSR(driver stage register)  DSR_IMP           :0x0
14:27:37: Reserv2                                       :0x0
14:27:37: Device Size C_SIZE                            :0xedc8
14:27:37: Reserv3                                       :0x0
14:27:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:37: Reserv4                                       :0x0
14:27:37: Write Speed Factor R2W_FACTOR                 :0x2
14:27:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:37: FILE_FORMAT_GRP                               :0x0
14:27:37: COPY flag                                     :0x1
14:27:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:37: File_Format                                   :0x0
14:27:37: CRC                                           :0x0
14:27:37: ####CSD Registe Values####  

14:27:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E14B0>, <py_sfcl.CommandDataDefinition object at 0x05DEFE10>) , Command count = 3570 ] 
14:27:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421CF0>, <py_sfcl.CommandDataDefinition object at 0x0642E480>) , Command count = 3571 ] 
14:27:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431090>, <py_sfcl.PySEnhancedCmdData object at 0x06431750>, <None>, <py_sfcl.Command23 object at 0x0642E7E0>) , Command count = 3572 ] 
14:27:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 11
14:27:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DAD3F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431E10>, <py_sfcl.PySEnhancedCmdData object at 0x06431F90>, <None>, <py_sfcl.Command23 object at 0x0642AB10>) , Command count = 3573 ] 
14:27:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421E10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BB70>, <py_sfcl.PySEnhancedCmdData object at 0x0645BD20>, <None>, <py_sfcl.Command23 object at 0x0642AC30>) , Command count = 3574 ] 
14:27:37: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:37: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:39: Host Frequency set to 25000 KHz
14:27:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:39: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x064140F0>, 0x0, True) , Command count = 3575 ] 
14:27:39: [GO18_globalSetVolt]### Host voltage value is set.
14:27:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EA50>, 0x0, False) , Command count = 3576 ] 
14:27:39: [GO18_globalSetVolt]### Host voltage value is set.
14:27:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3577 ] 
14:27:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3578 ] 
14:27:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3579 ] 
14:27:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414690>, <py_sfcl.CommandDataDefinition object at 0x06414B40>) , Command count = 3580 ] 
14:27:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E0C0>, <py_sfcl.CommandDataDefinition object at 0x0642E990>) , Command count = 3581 ] 
14:27:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:39: [ SetCardRCA(0x1, 0xD555) , Command count = 3582 ] 
14:27:39: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:40: Host Frequency set to 25000 KHz
14:27:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:40: ####CSD Registe 2.0 Values####
14:27:40: CSD_STRUCTURE                                 :0x1
14:27:40: Reserv1                                       :0x0
14:27:40: Time Access 1 TAAC                            :0xe
14:27:40: Time Access 2 NSAC*100                        :0x0
14:27:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:40: Card Command Classess CCC                     :0x5b5
14:27:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:40: DSR(driver stage register)  DSR_IMP           :0x0
14:27:40: Reserv2                                       :0x0
14:27:40: Device Size C_SIZE                            :0xedc8
14:27:40: Reserv3                                       :0x0
14:27:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:40: Reserv4                                       :0x0
14:27:40: Write Speed Factor R2W_FACTOR                 :0x2
14:27:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:40: FILE_FORMAT_GRP                               :0x0
14:27:40: COPY flag                                     :0x1
14:27:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:40: File_Format                                   :0x0
14:27:40: CRC                                           :0x0
14:27:40: ####CSD Registe Values####  

14:27:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:40: [GetSCRRegisterEntry] Passed
14:27:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:40: Data_Status_After Erases          : 0
14:27:40: CPRM Security Support             : No Security
14:27:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:40: Spec. Version                     : Version 3.0X
14:27:40: Extended Security Support         : Extended_Security_Not_Supported
14:27:40: Command Support                   : COMMAND_SUPPORT
14:27:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414360>, <py_sfcl.CommandDataDefinition object at 0x06431EA0>) , Command count = 3583 ] 
14:27:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421A50>, <py_sfcl.CommandDataDefinition object at 0x06431C30>) , Command count = 3584 ] 
14:27:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:40: [ SetBusWidth(0x4) , Command count = 3585 ] 
14:27:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3586 ] 
14:27:40: Protected Area Size 0x28000
14:27:40: Bus Width           2
14:27:40: Secure Mode         0
14:27:40: Speed  Class        4
14:27:40: Perf Move           0
14:27:40: Au Size             9
14:27:40: Erase Size          15
14:27:40: Erase Timeout       1
14:27:40: Erase offset        1
14:27:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3587 ] 
14:27:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:40: Host Frequency set to 100000 KHz
14:27:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:40: ####CSD Registe 2.0 Values####
14:27:40: CSD_STRUCTURE                                 :0x1
14:27:40: Reserv1                                       :0x0
14:27:40: Time Access 1 TAAC                            :0xe
14:27:40: Time Access 2 NSAC*100                        :0x0
14:27:40: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:40: Card Command Classess CCC                     :0x5b5
14:27:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:40: DSR(driver stage register)  DSR_IMP           :0x0
14:27:40: Reserv2                                       :0x0
14:27:40: Device Size C_SIZE                            :0xedc8
14:27:40: Reserv3                                       :0x0
14:27:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:40: Reserv4                                       :0x0
14:27:40: Write Speed Factor R2W_FACTOR                 :0x2
14:27:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:40: FILE_FORMAT_GRP                               :0x0
14:27:40: COPY flag                                     :0x1
14:27:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:40: File_Format                                   :0x0
14:27:40: CRC                                           :0x0
14:27:40: ####CSD Registe Values####  

14:27:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431960>, <py_sfcl.CommandDataDefinition object at 0x06431AE0>) , Command count = 3588 ] 
14:27:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E1E0>, <py_sfcl.CommandDataDefinition object at 0x06431030>) , Command count = 3589 ] 
14:27:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414300>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F60>, <py_sfcl.PySEnhancedCmdData object at 0x064316C0>, <None>, <py_sfcl.Command23 object at 0x06431900>) , Command count = 3590 ] 
14:27:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 10
14:27:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E1060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414900>, <py_sfcl.PySEnhancedCmdData object at 0x06431C60>, <None>, <py_sfcl.Command23 object at 0x06431A50>) , Command count = 3591 ] 
14:27:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431060>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B480>, <py_sfcl.PySEnhancedCmdData object at 0x0645BE70>, <None>, <py_sfcl.Command23 object at 0x06431810>) , Command count = 3592 ] 
14:27:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:40: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:42: Host Frequency set to 25000 KHz
14:27:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:42: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x064517B0>, 0x0, True) , Command count = 3593 ] 
14:27:42: [GO18_globalSetVolt]### Host voltage value is set.
14:27:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x064145A0>, 0x0, False) , Command count = 3594 ] 
14:27:42: [GO18_globalSetVolt]### Host voltage value is set.
14:27:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3595 ] 
14:27:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3596 ] 
14:27:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3597 ] 
14:27:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414DE0>, <py_sfcl.CommandDataDefinition object at 0x06451540>) , Command count = 3598 ] 
14:27:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414060>, <py_sfcl.CommandDataDefinition object at 0x0642E120>) , Command count = 3599 ] 
14:27:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:42: [ SetCardRCA(0x1, 0xD555) , Command count = 3600 ] 
14:27:42: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:42: Host Frequency set to 25000 KHz
14:27:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:42: ####CSD Registe 2.0 Values####
14:27:42: CSD_STRUCTURE                                 :0x1
14:27:42: Reserv1                                       :0x0
14:27:42: Time Access 1 TAAC                            :0xe
14:27:42: Time Access 2 NSAC*100                        :0x0
14:27:42: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:42: Card Command Classess CCC                     :0x5b5
14:27:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:42: DSR(driver stage register)  DSR_IMP           :0x0
14:27:42: Reserv2                                       :0x0
14:27:42: Device Size C_SIZE                            :0xedc8
14:27:42: Reserv3                                       :0x0
14:27:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:42: Reserv4                                       :0x0
14:27:42: Write Speed Factor R2W_FACTOR                 :0x2
14:27:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:42: FILE_FORMAT_GRP                               :0x0
14:27:42: COPY flag                                     :0x1
14:27:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:42: File_Format                                   :0x0
14:27:42: CRC                                           :0x0
14:27:42: ####CSD Registe Values####  

14:27:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:42: [GetSCRRegisterEntry] Passed
14:27:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:42: Data_Status_After Erases          : 0
14:27:42: CPRM Security Support             : No Security
14:27:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:42: Spec. Version                     : Version 3.0X
14:27:42: Extended Security Support         : Extended_Security_Not_Supported
14:27:42: Command Support                   : COMMAND_SUPPORT
14:27:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1A80>, <py_sfcl.CommandDataDefinition object at 0x064149F0>) , Command count = 3601 ] 
14:27:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EDB0>, <py_sfcl.CommandDataDefinition object at 0x06431540>) , Command count = 3602 ] 
14:27:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:42: [ SetBusWidth(0x4) , Command count = 3603 ] 
14:27:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642A570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3604 ] 
14:27:42: Protected Area Size 0x28000
14:27:42: Bus Width           2
14:27:42: Secure Mode         0
14:27:42: Speed  Class        4
14:27:42: Perf Move           0
14:27:42: Au Size             9
14:27:42: Erase Size          15
14:27:42: Erase Timeout       1
14:27:42: Erase offset        1
14:27:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3605 ] 
14:27:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:42: Host Frequency set to 100000 KHz
14:27:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:42: ####CSD Registe 2.0 Values####
14:27:42: CSD_STRUCTURE                                 :0x1
14:27:42: Reserv1                                       :0x0
14:27:42: Time Access 1 TAAC                            :0xe
14:27:42: Time Access 2 NSAC*100                        :0x0
14:27:42: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:42: Card Command Classess CCC                     :0x5b5
14:27:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:42: DSR(driver stage register)  DSR_IMP           :0x0
14:27:42: Reserv2                                       :0x0
14:27:42: Device Size C_SIZE                            :0xedc8
14:27:42: Reserv3                                       :0x0
14:27:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:42: Reserv4                                       :0x0
14:27:42: Write Speed Factor R2W_FACTOR                 :0x2
14:27:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:42: FILE_FORMAT_GRP                               :0x0
14:27:42: COPY flag                                     :0x1
14:27:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:42: File_Format                                   :0x0
14:27:42: CRC                                           :0x0
14:27:42: ####CSD Registe Values####  

14:27:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431D50>, <py_sfcl.CommandDataDefinition object at 0x06431C00>) , Command count = 3606 ] 
14:27:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431D20>, <py_sfcl.CommandDataDefinition object at 0x064311B0>) , Command count = 3607 ] 
14:27:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E11E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064144B0>, <py_sfcl.PySEnhancedCmdData object at 0x06451B10>, <None>, <py_sfcl.Command23 object at 0x06431C90>) , Command count = 3608 ] 
14:27:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 9
14:27:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431D80>, <py_sfcl.PySEnhancedCmdData object at 0x06431B10>, <None>, <py_sfcl.Command23 object at 0x06431840>) , Command count = 3609 ] 
14:27:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x01D66840>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B9C0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B900>, <None>, <py_sfcl.Command23 object at 0x064315A0>) , Command count = 3610 ] 
14:27:42: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:42: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:45: Host Frequency set to 25000 KHz
14:27:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:45: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x064516C0>, 0x0, True) , Command count = 3611 ] 
14:27:45: [GO18_globalSetVolt]### Host voltage value is set.
14:27:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467450>, 0x0, False) , Command count = 3612 ] 
14:27:45: [GO18_globalSetVolt]### Host voltage value is set.
14:27:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3613 ] 
14:27:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3614 ] 
14:27:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3615 ] 
14:27:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F120>, <py_sfcl.CommandDataDefinition object at 0x064519C0>) , Command count = 3616 ] 
14:27:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451BA0>, <py_sfcl.CommandDataDefinition object at 0x064311B0>) , Command count = 3617 ] 
14:27:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:45: [ SetCardRCA(0x1, 0xD555) , Command count = 3618 ] 
14:27:45: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:45: Host Frequency set to 25000 KHz
14:27:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:45: ####CSD Registe 2.0 Values####
14:27:45: CSD_STRUCTURE                                 :0x1
14:27:45: Reserv1                                       :0x0
14:27:45: Time Access 1 TAAC                            :0xe
14:27:45: Time Access 2 NSAC*100                        :0x0
14:27:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:45: Card Command Classess CCC                     :0x5b5
14:27:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:45: DSR(driver stage register)  DSR_IMP           :0x0
14:27:45: Reserv2                                       :0x0
14:27:45: Device Size C_SIZE                            :0xedc8
14:27:45: Reserv3                                       :0x0
14:27:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:45: Reserv4                                       :0x0
14:27:45: Write Speed Factor R2W_FACTOR                 :0x2
14:27:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:45: FILE_FORMAT_GRP                               :0x0
14:27:45: COPY flag                                     :0x1
14:27:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:45: File_Format                                   :0x0
14:27:45: CRC                                           :0x0
14:27:45: ####CSD Registe Values####  

14:27:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:45: [GetSCRRegisterEntry] Passed
14:27:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:45: Data_Status_After Erases          : 0
14:27:45: CPRM Security Support             : No Security
14:27:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:45: Spec. Version                     : Version 3.0X
14:27:45: Extended Security Support         : Extended_Security_Not_Supported
14:27:45: Command Support                   : COMMAND_SUPPORT
14:27:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451780>, <py_sfcl.CommandDataDefinition object at 0x06451D20>) , Command count = 3619 ] 
14:27:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064318A0>, <py_sfcl.CommandDataDefinition object at 0x06431AB0>) , Command count = 3620 ] 
14:27:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:45: [ SetBusWidth(0x4) , Command count = 3621 ] 
14:27:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3622 ] 
14:27:45: Protected Area Size 0x28000
14:27:45: Bus Width           2
14:27:45: Secure Mode         0
14:27:45: Speed  Class        4
14:27:45: Perf Move           0
14:27:45: Au Size             9
14:27:45: Erase Size          15
14:27:45: Erase Timeout       1
14:27:45: Erase offset        1
14:27:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3623 ] 
14:27:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:45: Host Frequency set to 100000 KHz
14:27:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:45: ####CSD Registe 2.0 Values####
14:27:45: CSD_STRUCTURE                                 :0x1
14:27:45: Reserv1                                       :0x0
14:27:45: Time Access 1 TAAC                            :0xe
14:27:45: Time Access 2 NSAC*100                        :0x0
14:27:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:45: Card Command Classess CCC                     :0x5b5
14:27:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:45: DSR(driver stage register)  DSR_IMP           :0x0
14:27:45: Reserv2                                       :0x0
14:27:45: Device Size C_SIZE                            :0xedc8
14:27:45: Reserv3                                       :0x0
14:27:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:45: Reserv4                                       :0x0
14:27:45: Write Speed Factor R2W_FACTOR                 :0x2
14:27:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:45: FILE_FORMAT_GRP                               :0x0
14:27:45: COPY flag                                     :0x1
14:27:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:45: File_Format                                   :0x0
14:27:45: CRC                                           :0x0
14:27:45: ####CSD Registe Values####  

14:27:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451630>, <py_sfcl.CommandDataDefinition object at 0x06451570>) , Command count = 3624 ] 
14:27:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467CF0>, <py_sfcl.CommandDataDefinition object at 0x06431CC0>) , Command count = 3625 ] 
14:27:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F1E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06451EA0>, <py_sfcl.PySEnhancedCmdData object at 0x064518A0>, <None>, <py_sfcl.Command23 object at 0x06431450>) , Command count = 3626 ] 
14:27:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 8
14:27:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F4B0>, <py_sfcl.PySEnhancedCmdData object at 0x06414A50>, <None>, <py_sfcl.Command23 object at 0x06414CF0>) , Command count = 3627 ] 
14:27:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064314B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E090>, <py_sfcl.PySEnhancedCmdData object at 0x0645B600>, <None>, <py_sfcl.Command23 object at 0x06451BD0>) , Command count = 3628 ] 
14:27:45: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:45: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:47: Host Frequency set to 25000 KHz
14:27:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:47: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB10>, 0x0, True) , Command count = 3629 ] 
14:27:47: [GO18_globalSetVolt]### Host voltage value is set.
14:27:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE8C30>, 0x0, False) , Command count = 3630 ] 
14:27:47: [GO18_globalSetVolt]### Host voltage value is set.
14:27:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3631 ] 
14:27:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3632 ] 
14:27:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3633 ] 
14:27:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FFC0>, <py_sfcl.CommandDataDefinition object at 0x06451E40>) , Command count = 3634 ] 
14:27:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451840>, <py_sfcl.CommandDataDefinition object at 0x064142D0>) , Command count = 3635 ] 
14:27:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:48: [ SetCardRCA(0x1, 0xD555) , Command count = 3636 ] 
14:27:48: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:48: Host Frequency set to 25000 KHz
14:27:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:48: ####CSD Registe 2.0 Values####
14:27:48: CSD_STRUCTURE                                 :0x1
14:27:48: Reserv1                                       :0x0
14:27:48: Time Access 1 TAAC                            :0xe
14:27:48: Time Access 2 NSAC*100                        :0x0
14:27:48: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:48: Card Command Classess CCC                     :0x5b5
14:27:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:48: DSR(driver stage register)  DSR_IMP           :0x0
14:27:48: Reserv2                                       :0x0
14:27:48: Device Size C_SIZE                            :0xedc8
14:27:48: Reserv3                                       :0x0
14:27:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:48: Reserv4                                       :0x0
14:27:48: Write Speed Factor R2W_FACTOR                 :0x2
14:27:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:48: FILE_FORMAT_GRP                               :0x0
14:27:48: COPY flag                                     :0x1
14:27:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:48: File_Format                                   :0x0
14:27:48: CRC                                           :0x0
14:27:48: ####CSD Registe Values####  

14:27:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:48: [GetSCRRegisterEntry] Passed
14:27:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:48: Data_Status_After Erases          : 0
14:27:48: CPRM Security Support             : No Security
14:27:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:48: Spec. Version                     : Version 3.0X
14:27:48: Extended Security Support         : Extended_Security_Not_Supported
14:27:48: Command Support                   : COMMAND_SUPPORT
14:27:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451600>, <py_sfcl.CommandDataDefinition object at 0x06414FC0>) , Command count = 3637 ] 
14:27:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D85F30>, <py_sfcl.CommandDataDefinition object at 0x0641FCF0>) , Command count = 3638 ] 
14:27:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:48: [ SetBusWidth(0x4) , Command count = 3639 ] 
14:27:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3640 ] 
14:27:48: Protected Area Size 0x28000
14:27:48: Bus Width           2
14:27:48: Secure Mode         0
14:27:48: Speed  Class        4
14:27:48: Perf Move           0
14:27:48: Au Size             9
14:27:48: Erase Size          15
14:27:48: Erase Timeout       1
14:27:48: Erase offset        1
14:27:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3641 ] 
14:27:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:48: Host Frequency set to 100000 KHz
14:27:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:48: ####CSD Registe 2.0 Values####
14:27:48: CSD_STRUCTURE                                 :0x1
14:27:48: Reserv1                                       :0x0
14:27:48: Time Access 1 TAAC                            :0xe
14:27:48: Time Access 2 NSAC*100                        :0x0
14:27:48: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:48: Card Command Classess CCC                     :0x5b5
14:27:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:48: DSR(driver stage register)  DSR_IMP           :0x0
14:27:48: Reserv2                                       :0x0
14:27:48: Device Size C_SIZE                            :0xedc8
14:27:48: Reserv3                                       :0x0
14:27:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:48: Reserv4                                       :0x0
14:27:48: Write Speed Factor R2W_FACTOR                 :0x2
14:27:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:48: FILE_FORMAT_GRP                               :0x0
14:27:48: COPY flag                                     :0x1
14:27:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:48: File_Format                                   :0x0
14:27:48: CRC                                           :0x0
14:27:48: ####CSD Registe Values####  

14:27:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467060>, <py_sfcl.CommandDataDefinition object at 0x06414C60>) , Command count = 3642 ] 
14:27:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F60>, <py_sfcl.CommandDataDefinition object at 0x06451900>) , Command count = 3643 ] 
14:27:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064671E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467210>, <py_sfcl.PySEnhancedCmdData object at 0x06467240>, <None>, <py_sfcl.Command23 object at 0x0641F180>) , Command count = 3644 ] 
14:27:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 7
14:27:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064670C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064670F0>, <py_sfcl.PySEnhancedCmdData object at 0x06467120>, <None>, <py_sfcl.Command23 object at 0x0641FCC0>) , Command count = 3645 ] 
14:27:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431150>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641FD20>, <py_sfcl.PySEnhancedCmdData object at 0x0645B8A0>, <None>, <py_sfcl.Command23 object at 0x0641F660>) , Command count = 3646 ] 
14:27:48: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:50: Host Frequency set to 25000 KHz
14:27:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x064675A0>, 0x0, True) , Command count = 3647 ] 
14:27:50: [GO18_globalSetVolt]### Host voltage value is set.
14:27:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x01D7FDB0>, 0x0, False) , Command count = 3648 ] 
14:27:50: [GO18_globalSetVolt]### Host voltage value is set.
14:27:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3649 ] 
14:27:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3650 ] 
14:27:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3651 ] 
14:27:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467540>, <py_sfcl.CommandDataDefinition object at 0x064674E0>) , Command count = 3652 ] 
14:27:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467840>, <py_sfcl.CommandDataDefinition object at 0x06451690>) , Command count = 3653 ] 
14:27:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:50: [ SetCardRCA(0x1, 0xD555) , Command count = 3654 ] 
14:27:50: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:51: Host Frequency set to 25000 KHz
14:27:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:51: ####CSD Registe 2.0 Values####
14:27:51: CSD_STRUCTURE                                 :0x1
14:27:51: Reserv1                                       :0x0
14:27:51: Time Access 1 TAAC                            :0xe
14:27:51: Time Access 2 NSAC*100                        :0x0
14:27:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:51: Card Command Classess CCC                     :0x5b5
14:27:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:51: DSR(driver stage register)  DSR_IMP           :0x0
14:27:51: Reserv2                                       :0x0
14:27:51: Device Size C_SIZE                            :0xedc8
14:27:51: Reserv3                                       :0x0
14:27:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:51: Reserv4                                       :0x0
14:27:51: Write Speed Factor R2W_FACTOR                 :0x2
14:27:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:51: FILE_FORMAT_GRP                               :0x0
14:27:51: COPY flag                                     :0x1
14:27:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:51: File_Format                                   :0x0
14:27:51: CRC                                           :0x0
14:27:51: ####CSD Registe Values####  

14:27:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:51: [GetSCRRegisterEntry] Passed
14:27:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:51: Data_Status_After Erases          : 0
14:27:51: CPRM Security Support             : No Security
14:27:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:51: Spec. Version                     : Version 3.0X
14:27:51: Extended Security Support         : Extended_Security_Not_Supported
14:27:51: Command Support                   : COMMAND_SUPPORT
14:27:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467660>, <py_sfcl.CommandDataDefinition object at 0x064313F0>) , Command count = 3655 ] 
14:27:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EC00>, <py_sfcl.CommandDataDefinition object at 0x0641F0F0>) , Command count = 3656 ] 
14:27:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:51: [ SetBusWidth(0x4) , Command count = 3657 ] 
14:27:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B8D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3658 ] 
14:27:51: Protected Area Size 0x28000
14:27:51: Bus Width           2
14:27:51: Secure Mode         0
14:27:51: Speed  Class        4
14:27:51: Perf Move           0
14:27:51: Au Size             9
14:27:51: Erase Size          15
14:27:51: Erase Timeout       1
14:27:51: Erase offset        1
14:27:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3659 ] 
14:27:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:51: Host Frequency set to 100000 KHz
14:27:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:51: ####CSD Registe 2.0 Values####
14:27:51: CSD_STRUCTURE                                 :0x1
14:27:51: Reserv1                                       :0x0
14:27:51: Time Access 1 TAAC                            :0xe
14:27:51: Time Access 2 NSAC*100                        :0x0
14:27:51: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:51: Card Command Classess CCC                     :0x5b5
14:27:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:51: DSR(driver stage register)  DSR_IMP           :0x0
14:27:51: Reserv2                                       :0x0
14:27:51: Device Size C_SIZE                            :0xedc8
14:27:51: Reserv3                                       :0x0
14:27:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:51: Reserv4                                       :0x0
14:27:51: Write Speed Factor R2W_FACTOR                 :0x2
14:27:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:51: FILE_FORMAT_GRP                               :0x0
14:27:51: COPY flag                                     :0x1
14:27:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:51: File_Format                                   :0x0
14:27:51: CRC                                           :0x0
14:27:51: ####CSD Registe Values####  

14:27:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467A50>, <py_sfcl.CommandDataDefinition object at 0x0641F030>) , Command count = 3660 ] 
14:27:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421ED0>, <py_sfcl.CommandDataDefinition object at 0x064146F0>) , Command count = 3661 ] 
14:27:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467990>, <py_sfcl.PySEnhancedCmdData object at 0x064679C0>, <None>, <py_sfcl.Command23 object at 0x0641F2D0>) , Command count = 3662 ] 
14:27:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 6
14:27:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06467AE0>, <None>, <py_sfcl.Command23 object at 0x0641F0C0>) , Command count = 3663 ] 
14:27:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DADAB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B4B0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B0C0>, <None>, <py_sfcl.Command23 object at 0x0641F240>) , Command count = 3664 ] 
14:27:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:53: Host Frequency set to 25000 KHz
14:27:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:53: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467E40>, 0x0, True) , Command count = 3665 ] 
14:27:53: [GO18_globalSetVolt]### Host voltage value is set.
14:27:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEFA80>, 0x0, False) , Command count = 3666 ] 
14:27:53: [GO18_globalSetVolt]### Host voltage value is set.
14:27:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3667 ] 
14:27:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3668 ] 
14:27:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3669 ] 
14:27:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467DE0>, <py_sfcl.CommandDataDefinition object at 0x06431DB0>) , Command count = 3670 ] 
14:27:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467E10>, <py_sfcl.CommandDataDefinition object at 0x0641FC00>) , Command count = 3671 ] 
14:27:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:53: [ SetCardRCA(0x1, 0xD555) , Command count = 3672 ] 
14:27:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:53: Host Frequency set to 25000 KHz
14:27:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:53: ####CSD Registe 2.0 Values####
14:27:53: CSD_STRUCTURE                                 :0x1
14:27:53: Reserv1                                       :0x0
14:27:53: Time Access 1 TAAC                            :0xe
14:27:53: Time Access 2 NSAC*100                        :0x0
14:27:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:53: Card Command Classess CCC                     :0x5b5
14:27:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:53: DSR(driver stage register)  DSR_IMP           :0x0
14:27:53: Reserv2                                       :0x0
14:27:53: Device Size C_SIZE                            :0xedc8
14:27:53: Reserv3                                       :0x0
14:27:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:53: Reserv4                                       :0x0
14:27:53: Write Speed Factor R2W_FACTOR                 :0x2
14:27:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:53: FILE_FORMAT_GRP                               :0x0
14:27:53: COPY flag                                     :0x1
14:27:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:53: File_Format                                   :0x0
14:27:53: CRC                                           :0x0
14:27:53: ####CSD Registe Values####  

14:27:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:53: [GetSCRRegisterEntry] Passed
14:27:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:53: Data_Status_After Erases          : 0
14:27:53: CPRM Security Support             : No Security
14:27:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:53: Spec. Version                     : Version 3.0X
14:27:53: Extended Security Support         : Extended_Security_Not_Supported
14:27:53: Command Support                   : COMMAND_SUPPORT
14:27:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421030>, <py_sfcl.CommandDataDefinition object at 0x06467F00>) , Command count = 3673 ] 
14:27:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EC60>, <py_sfcl.CommandDataDefinition object at 0x06467D80>) , Command count = 3674 ] 
14:27:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:53: [ SetBusWidth(0x4) , Command count = 3675 ] 
14:27:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3676 ] 
14:27:53: Protected Area Size 0x28000
14:27:53: Bus Width           2
14:27:53: Secure Mode         0
14:27:53: Speed  Class        4
14:27:53: Perf Move           0
14:27:53: Au Size             9
14:27:53: Erase Size          15
14:27:53: Erase Timeout       1
14:27:53: Erase offset        1
14:27:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3677 ] 
14:27:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:53: Host Frequency set to 100000 KHz
14:27:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:53: ####CSD Registe 2.0 Values####
14:27:53: CSD_STRUCTURE                                 :0x1
14:27:53: Reserv1                                       :0x0
14:27:53: Time Access 1 TAAC                            :0xe
14:27:53: Time Access 2 NSAC*100                        :0x0
14:27:53: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:53: Card Command Classess CCC                     :0x5b5
14:27:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:53: DSR(driver stage register)  DSR_IMP           :0x0
14:27:53: Reserv2                                       :0x0
14:27:53: Device Size C_SIZE                            :0xedc8
14:27:53: Reserv3                                       :0x0
14:27:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:53: Reserv4                                       :0x0
14:27:53: Write Speed Factor R2W_FACTOR                 :0x2
14:27:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:53: FILE_FORMAT_GRP                               :0x0
14:27:53: COPY flag                                     :0x1
14:27:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:53: File_Format                                   :0x0
14:27:53: CRC                                           :0x0
14:27:53: ####CSD Registe Values####  

14:27:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F330>, <py_sfcl.CommandDataDefinition object at 0x06467F90>) , Command count = 3678 ] 
14:27:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEF840>, <py_sfcl.CommandDataDefinition object at 0x0641F090>) , Command count = 3679 ] 
14:27:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064212A0>, <py_sfcl.PySEnhancedCmdData object at 0x06467C00>, <None>, <py_sfcl.Command23 object at 0x0645B8A0>) , Command count = 3680 ] 
14:27:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 5
14:27:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421360>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421390>, <py_sfcl.PySEnhancedCmdData object at 0x064679F0>, <None>, <py_sfcl.Command23 object at 0x06467E70>) , Command count = 3681 ] 
14:27:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF9F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BE40>, <py_sfcl.PySEnhancedCmdData object at 0x0645B840>, <None>, <py_sfcl.Command23 object at 0x06467690>) , Command count = 3682 ] 
14:27:53: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:53: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:56: Host Frequency set to 25000 KHz
14:27:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:56: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421720>, 0x0, True) , Command count = 3683 ] 
14:27:56: [GO18_globalSetVolt]### Host voltage value is set.
14:27:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x06414750>, 0x0, False) , Command count = 3684 ] 
14:27:56: [GO18_globalSetVolt]### Host voltage value is set.
14:27:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3685 ] 
14:27:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3686 ] 
14:27:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3687 ] 
14:27:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216C0>, <py_sfcl.CommandDataDefinition object at 0x06421660>) , Command count = 3688 ] 
14:27:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467480>, <py_sfcl.CommandDataDefinition object at 0x064673F0>) , Command count = 3689 ] 
14:27:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:56: [ SetCardRCA(0x1, 0xD555) , Command count = 3690 ] 
14:27:56: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:56: Host Frequency set to 25000 KHz
14:27:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:56: ####CSD Registe 2.0 Values####
14:27:56: CSD_STRUCTURE                                 :0x1
14:27:56: Reserv1                                       :0x0
14:27:56: Time Access 1 TAAC                            :0xe
14:27:56: Time Access 2 NSAC*100                        :0x0
14:27:56: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:56: Card Command Classess CCC                     :0x5b5
14:27:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:56: DSR(driver stage register)  DSR_IMP           :0x0
14:27:56: Reserv2                                       :0x0
14:27:56: Device Size C_SIZE                            :0xedc8
14:27:56: Reserv3                                       :0x0
14:27:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:56: Reserv4                                       :0x0
14:27:56: Write Speed Factor R2W_FACTOR                 :0x2
14:27:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:56: FILE_FORMAT_GRP                               :0x0
14:27:56: COPY flag                                     :0x1
14:27:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:56: File_Format                                   :0x0
14:27:56: CRC                                           :0x0
14:27:56: ####CSD Registe Values####  

14:27:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:56: [GetSCRRegisterEntry] Passed
14:27:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:56: Data_Status_After Erases          : 0
14:27:56: CPRM Security Support             : No Security
14:27:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:56: Spec. Version                     : Version 3.0X
14:27:56: Extended Security Support         : Extended_Security_Not_Supported
14:27:56: Command Support                   : COMMAND_SUPPORT
14:27:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064219C0>, <py_sfcl.CommandDataDefinition object at 0x06467C60>) , Command count = 3691 ] 
14:27:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064319F0>, <py_sfcl.CommandDataDefinition object at 0x06467A20>) , Command count = 3692 ] 
14:27:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:56: [ SetBusWidth(0x4) , Command count = 3693 ] 
14:27:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3694 ] 
14:27:56: Protected Area Size 0x28000
14:27:56: Bus Width           2
14:27:56: Secure Mode         0
14:27:56: Speed  Class        4
14:27:56: Perf Move           0
14:27:56: Au Size             9
14:27:56: Erase Size          15
14:27:56: Erase Timeout       1
14:27:56: Erase offset        1
14:27:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3695 ] 
14:27:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:56: Host Frequency set to 100000 KHz
14:27:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:56: ####CSD Registe 2.0 Values####
14:27:56: CSD_STRUCTURE                                 :0x1
14:27:56: Reserv1                                       :0x0
14:27:56: Time Access 1 TAAC                            :0xe
14:27:56: Time Access 2 NSAC*100                        :0x0
14:27:56: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:56: Card Command Classess CCC                     :0x5b5
14:27:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:56: DSR(driver stage register)  DSR_IMP           :0x0
14:27:56: Reserv2                                       :0x0
14:27:56: Device Size C_SIZE                            :0xedc8
14:27:56: Reserv3                                       :0x0
14:27:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:56: Reserv4                                       :0x0
14:27:56: Write Speed Factor R2W_FACTOR                 :0x2
14:27:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:56: FILE_FORMAT_GRP                               :0x0
14:27:56: COPY flag                                     :0x1
14:27:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:56: File_Format                                   :0x0
14:27:56: CRC                                           :0x0
14:27:56: ####CSD Registe Values####  

14:27:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064217E0>, <py_sfcl.CommandDataDefinition object at 0x064216F0>) , Command count = 3696 ] 
14:27:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421630>, <py_sfcl.CommandDataDefinition object at 0x06467FC0>) , Command count = 3697 ] 
14:27:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421B10>, <py_sfcl.PySEnhancedCmdData object at 0x06421B40>, <None>, <py_sfcl.Command23 object at 0x06467BD0>) , Command count = 3698 ] 
14:27:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 4
14:27:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421C30>, <py_sfcl.PySEnhancedCmdData object at 0x06421C60>, <None>, <py_sfcl.Command23 object at 0x06467330>) , Command count = 3699 ] 
14:27:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414D20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B240>, <py_sfcl.PySEnhancedCmdData object at 0x0645BE40>, <None>, <py_sfcl.Command23 object at 0x064671B0>) , Command count = 3700 ] 
14:27:56: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:56: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:58: Host Frequency set to 25000 KHz
14:27:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:58: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421FC0>, 0x0, True) , Command count = 3701 ] 
14:27:58: [GO18_globalSetVolt]### Host voltage value is set.
14:27:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641F300>, 0x0, False) , Command count = 3702 ] 
14:27:58: [GO18_globalSetVolt]### Host voltage value is set.
14:27:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3703 ] 
14:27:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3704 ] 
14:27:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3705 ] 
14:27:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A060>, <py_sfcl.CommandDataDefinition object at 0x06421F60>) , Command count = 3706 ] 
14:27:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A030>, <py_sfcl.CommandDataDefinition object at 0x064674B0>) , Command count = 3707 ] 
14:27:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:59: [ SetCardRCA(0x1, 0xD555) , Command count = 3708 ] 
14:27:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:59: Host Frequency set to 25000 KHz
14:27:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:59: ####CSD Registe 2.0 Values####
14:27:59: CSD_STRUCTURE                                 :0x1
14:27:59: Reserv1                                       :0x0
14:27:59: Time Access 1 TAAC                            :0xe
14:27:59: Time Access 2 NSAC*100                        :0x0
14:27:59: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:59: Card Command Classess CCC                     :0x5b5
14:27:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:59: DSR(driver stage register)  DSR_IMP           :0x0
14:27:59: Reserv2                                       :0x0
14:27:59: Device Size C_SIZE                            :0xedc8
14:27:59: Reserv3                                       :0x0
14:27:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:59: Reserv4                                       :0x0
14:27:59: Write Speed Factor R2W_FACTOR                 :0x2
14:27:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:59: FILE_FORMAT_GRP                               :0x0
14:27:59: COPY flag                                     :0x1
14:27:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:59: File_Format                                   :0x0
14:27:59: CRC                                           :0x0
14:27:59: ####CSD Registe Values####  

14:27:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:59: [GetSCRRegisterEntry] Passed
14:27:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:59: Data_Status_After Erases          : 0
14:27:59: CPRM Security Support             : No Security
14:27:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:59: Spec. Version                     : Version 3.0X
14:27:59: Extended Security Support         : Extended_Security_Not_Supported
14:27:59: Command Support                   : COMMAND_SUPPORT
14:27:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A2A0>, <py_sfcl.CommandDataDefinition object at 0x0642A0C0>) , Command count = 3709 ] 
14:27:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414630>, <py_sfcl.CommandDataDefinition object at 0x06467930>) , Command count = 3710 ] 
14:27:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:59: [ SetBusWidth(0x4) , Command count = 3711 ] 
14:27:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3712 ] 
14:27:59: Protected Area Size 0x28000
14:27:59: Bus Width           2
14:27:59: Secure Mode         0
14:27:59: Speed  Class        4
14:27:59: Perf Move           0
14:27:59: Au Size             9
14:27:59: Erase Size          15
14:27:59: Erase Timeout       1
14:27:59: Erase offset        1
14:27:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3713 ] 
14:27:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:59: Host Frequency set to 100000 KHz
14:27:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:59: ####CSD Registe 2.0 Values####
14:27:59: CSD_STRUCTURE                                 :0x1
14:27:59: Reserv1                                       :0x0
14:27:59: Time Access 1 TAAC                            :0xe
14:27:59: Time Access 2 NSAC*100                        :0x0
14:27:59: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:59: Card Command Classess CCC                     :0x5b5
14:27:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:59: DSR(driver stage register)  DSR_IMP           :0x0
14:27:59: Reserv2                                       :0x0
14:27:59: Device Size C_SIZE                            :0xedc8
14:27:59: Reserv3                                       :0x0
14:27:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:59: Reserv4                                       :0x0
14:27:59: Write Speed Factor R2W_FACTOR                 :0x2
14:27:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:59: FILE_FORMAT_GRP                               :0x0
14:27:59: COPY flag                                     :0x1
14:27:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:59: File_Format                                   :0x0
14:27:59: CRC                                           :0x0
14:27:59: ####CSD Registe Values####  

14:27:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A090>, <py_sfcl.CommandDataDefinition object at 0x064673C0>) , Command count = 3714 ] 
14:27:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451F00>, <py_sfcl.CommandDataDefinition object at 0x06467750>) , Command count = 3715 ] 
14:27:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421D80>, <py_sfcl.PySEnhancedCmdData object at 0x06421BA0>, <None>, <py_sfcl.Command23 object at 0x06421330>) , Command count = 3716 ] 
14:27:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 3
14:27:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:27:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A510>, <py_sfcl.PySEnhancedCmdData object at 0x0642A540>, <None>, <py_sfcl.Command23 object at 0x06421540>) , Command count = 3717 ] 
14:27:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:27:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:27:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B4E0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BDE0>, <None>, <py_sfcl.Command23 object at 0x06421F90>) , Command count = 3718 ] 
14:27:59: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:27:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:01: Host Frequency set to 25000 KHz
14:28:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A8A0>, 0x0, True) , Command count = 3719 ] 
14:28:01: [GO18_globalSetVolt]### Host voltage value is set.
14:28:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x064211E0>, 0x0, False) , Command count = 3720 ] 
14:28:01: [GO18_globalSetVolt]### Host voltage value is set.
14:28:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3721 ] 
14:28:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3722 ] 
14:28:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3723 ] 
14:28:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A840>, <py_sfcl.CommandDataDefinition object at 0x06421D20>) , Command count = 3724 ] 
14:28:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421750>, <py_sfcl.CommandDataDefinition object at 0x06421270>) , Command count = 3725 ] 
14:28:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:01: [ SetCardRCA(0x1, 0xD555) , Command count = 3726 ] 
14:28:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:02: Host Frequency set to 25000 KHz
14:28:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:02: ####CSD Registe 2.0 Values####
14:28:02: CSD_STRUCTURE                                 :0x1
14:28:02: Reserv1                                       :0x0
14:28:02: Time Access 1 TAAC                            :0xe
14:28:02: Time Access 2 NSAC*100                        :0x0
14:28:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:02: Card Command Classess CCC                     :0x5b5
14:28:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:02: DSR(driver stage register)  DSR_IMP           :0x0
14:28:02: Reserv2                                       :0x0
14:28:02: Device Size C_SIZE                            :0xedc8
14:28:02: Reserv3                                       :0x0
14:28:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:02: Reserv4                                       :0x0
14:28:02: Write Speed Factor R2W_FACTOR                 :0x2
14:28:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:02: FILE_FORMAT_GRP                               :0x0
14:28:02: COPY flag                                     :0x1
14:28:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:02: File_Format                                   :0x0
14:28:02: CRC                                           :0x0
14:28:02: ####CSD Registe Values####  

14:28:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:02: [GetSCRRegisterEntry] Passed
14:28:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:02: Data_Status_After Erases          : 0
14:28:02: CPRM Security Support             : No Security
14:28:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:02: Spec. Version                     : Version 3.0X
14:28:02: Extended Security Support         : Extended_Security_Not_Supported
14:28:02: Command Support                   : COMMAND_SUPPORT
14:28:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AB40>, <py_sfcl.CommandDataDefinition object at 0x06421840>) , Command count = 3727 ] 
14:28:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414450>, <py_sfcl.CommandDataDefinition object at 0x06421810>) , Command count = 3728 ] 
14:28:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:02: [ SetBusWidth(0x4) , Command count = 3729 ] 
14:28:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B3C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3730 ] 
14:28:02: Protected Area Size 0x28000
14:28:02: Bus Width           2
14:28:02: Secure Mode         0
14:28:02: Speed  Class        4
14:28:02: Perf Move           0
14:28:02: Au Size             9
14:28:02: Erase Size          15
14:28:02: Erase Timeout       1
14:28:02: Erase offset        1
14:28:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3731 ] 
14:28:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:02: Host Frequency set to 100000 KHz
14:28:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:02: ####CSD Registe 2.0 Values####
14:28:02: CSD_STRUCTURE                                 :0x1
14:28:02: Reserv1                                       :0x0
14:28:02: Time Access 1 TAAC                            :0xe
14:28:02: Time Access 2 NSAC*100                        :0x0
14:28:02: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:02: Card Command Classess CCC                     :0x5b5
14:28:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:02: DSR(driver stage register)  DSR_IMP           :0x0
14:28:02: Reserv2                                       :0x0
14:28:02: Device Size C_SIZE                            :0xedc8
14:28:02: Reserv3                                       :0x0
14:28:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:02: Reserv4                                       :0x0
14:28:02: Write Speed Factor R2W_FACTOR                 :0x2
14:28:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:02: FILE_FORMAT_GRP                               :0x0
14:28:02: COPY flag                                     :0x1
14:28:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:02: File_Format                                   :0x0
14:28:02: CRC                                           :0x0
14:28:02: ####CSD Registe Values####  

14:28:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AA20>, <py_sfcl.CommandDataDefinition object at 0x064210F0>) , Command count = 3732 ] 
14:28:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451810>, <py_sfcl.CommandDataDefinition object at 0x0642A960>) , Command count = 3733 ] 
14:28:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AC60>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC90>, <py_sfcl.PySEnhancedCmdData object at 0x0642A930>, <None>, <py_sfcl.Command23 object at 0x06421A80>) , Command count = 3734 ] 
14:28:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 2
14:28:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642ADB0>, <py_sfcl.PySEnhancedCmdData object at 0x0642ADE0>, <None>, <py_sfcl.Command23 object at 0x0642AD50>) , Command count = 3735 ] 
14:28:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467510>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B5A0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B090>, <None>, <py_sfcl.Command23 object at 0x0642A7E0>) , Command count = 3736 ] 
14:28:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:02: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:04: Host Frequency set to 25000 KHz
14:28:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:04: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E030>, 0x0, True) , Command count = 3737 ] 
14:28:04: [GO18_globalSetVolt]### Host voltage value is set.
14:28:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x064672A0>, 0x0, False) , Command count = 3738 ] 
14:28:04: [GO18_globalSetVolt]### Host voltage value is set.
14:28:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3739 ] 
14:28:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3740 ] 
14:28:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3741 ] 
14:28:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E150>, <py_sfcl.CommandDataDefinition object at 0x0642E0F0>) , Command count = 3742 ] 
14:28:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421780>, <py_sfcl.CommandDataDefinition object at 0x064214E0>) , Command count = 3743 ] 
14:28:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:04: [ SetCardRCA(0x1, 0xD555) , Command count = 3744 ] 
14:28:04: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:04: Host Frequency set to 25000 KHz
14:28:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:04: ####CSD Registe 2.0 Values####
14:28:04: CSD_STRUCTURE                                 :0x1
14:28:04: Reserv1                                       :0x0
14:28:04: Time Access 1 TAAC                            :0xe
14:28:04: Time Access 2 NSAC*100                        :0x0
14:28:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:04: Card Command Classess CCC                     :0x5b5
14:28:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:04: DSR(driver stage register)  DSR_IMP           :0x0
14:28:04: Reserv2                                       :0x0
14:28:04: Device Size C_SIZE                            :0xedc8
14:28:04: Reserv3                                       :0x0
14:28:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:04: Reserv4                                       :0x0
14:28:04: Write Speed Factor R2W_FACTOR                 :0x2
14:28:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:04: FILE_FORMAT_GRP                               :0x0
14:28:04: COPY flag                                     :0x1
14:28:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:04: File_Format                                   :0x0
14:28:04: CRC                                           :0x0
14:28:04: ####CSD Registe Values####  

14:28:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:04: [GetSCRRegisterEntry] Passed
14:28:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:04: Data_Status_After Erases          : 0
14:28:04: CPRM Security Support             : No Security
14:28:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:04: Spec. Version                     : Version 3.0X
14:28:04: Extended Security Support         : Extended_Security_Not_Supported
14:28:04: Command Support                   : COMMAND_SUPPORT
14:28:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A630>, <py_sfcl.CommandDataDefinition object at 0x0642E420>) , Command count = 3745 ] 
14:28:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FAB0>, <py_sfcl.CommandDataDefinition object at 0x06421300>) , Command count = 3746 ] 
14:28:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:04: [ SetBusWidth(0x4) , Command count = 3747 ] 
14:28:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BC30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3748 ] 
14:28:04: Protected Area Size 0x28000
14:28:04: Bus Width           2
14:28:04: Secure Mode         0
14:28:04: Speed  Class        4
14:28:04: Perf Move           0
14:28:04: Au Size             9
14:28:04: Erase Size          15
14:28:04: Erase Timeout       1
14:28:04: Erase offset        1
14:28:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3749 ] 
14:28:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:04: Host Frequency set to 100000 KHz
14:28:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:04: ####CSD Registe 2.0 Values####
14:28:04: CSD_STRUCTURE                                 :0x1
14:28:04: Reserv1                                       :0x0
14:28:04: Time Access 1 TAAC                            :0xe
14:28:04: Time Access 2 NSAC*100                        :0x0
14:28:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:04: Card Command Classess CCC                     :0x5b5
14:28:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:04: DSR(driver stage register)  DSR_IMP           :0x0
14:28:04: Reserv2                                       :0x0
14:28:04: Device Size C_SIZE                            :0xedc8
14:28:04: Reserv3                                       :0x0
14:28:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:04: Reserv4                                       :0x0
14:28:04: Write Speed Factor R2W_FACTOR                 :0x2
14:28:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:04: FILE_FORMAT_GRP                               :0x0
14:28:04: COPY flag                                     :0x1
14:28:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:04: File_Format                                   :0x0
14:28:04: CRC                                           :0x0
14:28:04: ####CSD Registe Values####  

14:28:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A150>, <py_sfcl.CommandDataDefinition object at 0x0642ACC0>) , Command count = 3750 ] 
14:28:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451F60>, <py_sfcl.CommandDataDefinition object at 0x0642AA50>) , Command count = 3751 ] 
14:28:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AF00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AD20>, <py_sfcl.PySEnhancedCmdData object at 0x0642AE10>, <None>, <py_sfcl.Command23 object at 0x0642E180>) , Command count = 3752 ] 
14:28:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 1
14:28:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AB70>, <py_sfcl.PySEnhancedCmdData object at 0x0642AED0>, <None>, <py_sfcl.Command23 object at 0x0642E1B0>) , Command count = 3753 ] 
14:28:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:04: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641FB40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B6F0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BEA0>, <None>, <py_sfcl.Command23 object at 0x0642A720>) , Command count = 3754 ] 
14:28:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:05: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:07: Host Frequency set to 25000 KHz
14:28:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:07: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EA20>, 0x0, True) , Command count = 3755 ] 
14:28:07: [GO18_globalSetVolt]### Host voltage value is set.
14:28:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467B40>, 0x0, False) , Command count = 3756 ] 
14:28:07: [GO18_globalSetVolt]### Host voltage value is set.
14:28:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3757 ] 
14:28:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3758 ] 
14:28:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3759 ] 
14:28:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E9C0>, <py_sfcl.CommandDataDefinition object at 0x0642AE70>) , Command count = 3760 ] 
14:28:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AF60>, <py_sfcl.CommandDataDefinition object at 0x0642A180>) , Command count = 3761 ] 
14:28:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:07: [ SetCardRCA(0x1, 0xD555) , Command count = 3762 ] 
14:28:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:07: Host Frequency set to 25000 KHz
14:28:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:07: ####CSD Registe 2.0 Values####
14:28:07: CSD_STRUCTURE                                 :0x1
14:28:07: Reserv1                                       :0x0
14:28:07: Time Access 1 TAAC                            :0xe
14:28:07: Time Access 2 NSAC*100                        :0x0
14:28:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:07: Card Command Classess CCC                     :0x5b5
14:28:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:07: DSR(driver stage register)  DSR_IMP           :0x0
14:28:07: Reserv2                                       :0x0
14:28:07: Device Size C_SIZE                            :0xedc8
14:28:07: Reserv3                                       :0x0
14:28:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:07: Reserv4                                       :0x0
14:28:07: Write Speed Factor R2W_FACTOR                 :0x2
14:28:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:07: FILE_FORMAT_GRP                               :0x0
14:28:07: COPY flag                                     :0x1
14:28:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:07: File_Format                                   :0x0
14:28:07: CRC                                           :0x0
14:28:07: ####CSD Registe Values####  

14:28:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:07: [GetSCRRegisterEntry] Passed
14:28:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:07: Data_Status_After Erases          : 0
14:28:07: CPRM Security Support             : No Security
14:28:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:07: Spec. Version                     : Version 3.0X
14:28:07: Extended Security Support         : Extended_Security_Not_Supported
14:28:07: Command Support                   : COMMAND_SUPPORT
14:28:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ECC0>, <py_sfcl.CommandDataDefinition object at 0x0642A8D0>) , Command count = 3763 ] 
14:28:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FE70>, <py_sfcl.CommandDataDefinition object at 0x0642A240>) , Command count = 3764 ] 
14:28:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:07: [ SetBusWidth(0x4) , Command count = 3765 ] 
14:28:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BBD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3766 ] 
14:28:07: Protected Area Size 0x28000
14:28:07: Bus Width           2
14:28:07: Secure Mode         0
14:28:07: Speed  Class        4
14:28:07: Perf Move           0
14:28:07: Au Size             9
14:28:07: Erase Size          15
14:28:07: Erase Timeout       1
14:28:07: Erase offset        1
14:28:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3767 ] 
14:28:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:07: Host Frequency set to 100000 KHz
14:28:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:07: ####CSD Registe 2.0 Values####
14:28:07: CSD_STRUCTURE                                 :0x1
14:28:07: Reserv1                                       :0x0
14:28:07: Time Access 1 TAAC                            :0xe
14:28:07: Time Access 2 NSAC*100                        :0x0
14:28:07: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:07: Card Command Classess CCC                     :0x5b5
14:28:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:07: DSR(driver stage register)  DSR_IMP           :0x0
14:28:07: Reserv2                                       :0x0
14:28:07: Device Size C_SIZE                            :0xedc8
14:28:07: Reserv3                                       :0x0
14:28:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:07: Reserv4                                       :0x0
14:28:07: Write Speed Factor R2W_FACTOR                 :0x2
14:28:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:07: FILE_FORMAT_GRP                               :0x0
14:28:07: COPY flag                                     :0x1
14:28:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:07: File_Format                                   :0x0
14:28:07: CRC                                           :0x0
14:28:07: ####CSD Registe Values####  

14:28:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EED0>, <py_sfcl.CommandDataDefinition object at 0x0642EBA0>) , Command count = 3768 ] 
14:28:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FA80>, <py_sfcl.CommandDataDefinition object at 0x0642E690>) , Command count = 3769 ] 
14:28:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642ECF0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EB10>, <py_sfcl.PySEnhancedCmdData object at 0x0642A660>, <None>, <py_sfcl.Command23 object at 0x0642A690>) , Command count = 3770 ] 
14:28:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Outer loop Count 1017
14:28:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 29
14:28:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064310F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642EF30>, <None>, <py_sfcl.Command23 object at 0x0642A810>) , Command count = 3771 ] 
14:28:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E8D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B570>, <py_sfcl.PySEnhancedCmdData object at 0x0645BAE0>, <None>, <py_sfcl.Command23 object at 0x0642AE40>) , Command count = 3772 ] 
14:28:07: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:09: Host Frequency set to 25000 KHz
14:28:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431300>, 0x0, True) , Command count = 3773 ] 
14:28:09: [GO18_globalSetVolt]### Host voltage value is set.
14:28:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641F060>, 0x0, False) , Command count = 3774 ] 
14:28:09: [GO18_globalSetVolt]### Host voltage value is set.
14:28:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3775 ] 
14:28:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3776 ] 
14:28:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3777 ] 
14:28:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312A0>, <py_sfcl.CommandDataDefinition object at 0x06431270>) , Command count = 3778 ] 
14:28:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E960>, <py_sfcl.CommandDataDefinition object at 0x0642E6C0>) , Command count = 3779 ] 
14:28:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:10: [ SetCardRCA(0x1, 0xD555) , Command count = 3780 ] 
14:28:10: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:10: Host Frequency set to 25000 KHz
14:28:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:10: ####CSD Registe 2.0 Values####
14:28:10: CSD_STRUCTURE                                 :0x1
14:28:10: Reserv1                                       :0x0
14:28:10: Time Access 1 TAAC                            :0xe
14:28:10: Time Access 2 NSAC*100                        :0x0
14:28:10: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:10: Card Command Classess CCC                     :0x5b5
14:28:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:10: DSR(driver stage register)  DSR_IMP           :0x0
14:28:10: Reserv2                                       :0x0
14:28:10: Device Size C_SIZE                            :0xedc8
14:28:10: Reserv3                                       :0x0
14:28:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:10: Reserv4                                       :0x0
14:28:10: Write Speed Factor R2W_FACTOR                 :0x2
14:28:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:10: FILE_FORMAT_GRP                               :0x0
14:28:10: COPY flag                                     :0x1
14:28:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:10: File_Format                                   :0x0
14:28:10: CRC                                           :0x0
14:28:10: ####CSD Registe Values####  

14:28:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:10: [GetSCRRegisterEntry] Passed
14:28:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:10: Data_Status_After Erases          : 0
14:28:10: CPRM Security Support             : No Security
14:28:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:10: Spec. Version                     : Version 3.0X
14:28:10: Extended Security Support         : Extended_Security_Not_Supported
14:28:10: Command Support                   : COMMAND_SUPPORT
14:28:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431570>, <py_sfcl.CommandDataDefinition object at 0x0642E8A0>) , Command count = 3781 ] 
14:28:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467780>, <py_sfcl.CommandDataDefinition object at 0x0642AC00>) , Command count = 3782 ] 
14:28:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:10: [ SetBusWidth(0x4) , Command count = 3783 ] 
14:28:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3784 ] 
14:28:10: Protected Area Size 0x28000
14:28:10: Bus Width           2
14:28:10: Secure Mode         0
14:28:10: Speed  Class        4
14:28:10: Perf Move           0
14:28:10: Au Size             9
14:28:10: Erase Size          15
14:28:10: Erase Timeout       1
14:28:10: Erase offset        1
14:28:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3785 ] 
14:28:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:10: Host Frequency set to 100000 KHz
14:28:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:10: ####CSD Registe 2.0 Values####
14:28:10: CSD_STRUCTURE                                 :0x1
14:28:10: Reserv1                                       :0x0
14:28:10: Time Access 1 TAAC                            :0xe
14:28:10: Time Access 2 NSAC*100                        :0x0
14:28:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:10: Card Command Classess CCC                     :0x5b5
14:28:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:10: DSR(driver stage register)  DSR_IMP           :0x0
14:28:10: Reserv2                                       :0x0
14:28:10: Device Size C_SIZE                            :0xedc8
14:28:10: Reserv3                                       :0x0
14:28:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:10: Reserv4                                       :0x0
14:28:10: Write Speed Factor R2W_FACTOR                 :0x2
14:28:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:10: FILE_FORMAT_GRP                               :0x0
14:28:10: COPY flag                                     :0x1
14:28:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:10: File_Format                                   :0x0
14:28:10: CRC                                           :0x0
14:28:10: ####CSD Registe Values####  

14:28:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7BD0>, <py_sfcl.CommandDataDefinition object at 0x05D7E1E0>) , Command count = 3786 ] 
14:28:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421690>, <py_sfcl.CommandDataDefinition object at 0x0642A9C0>) , Command count = 3787 ] 
14:28:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064312D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431360>, <py_sfcl.PySEnhancedCmdData object at 0x0642EAB0>, <None>, <py_sfcl.Command23 object at 0x0642A450>) , Command count = 3788 ] 
14:28:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 28
14:28:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7C30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431630>, <py_sfcl.PySEnhancedCmdData object at 0x0642E750>, <None>, <py_sfcl.Command23 object at 0x0642A750>) , Command count = 3789 ] 
14:28:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467D20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BD50>, <py_sfcl.PySEnhancedCmdData object at 0x0645B210>, <None>, <py_sfcl.Command23 object at 0x0642E630>) , Command count = 3790 ] 
14:28:10: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:12: Host Frequency set to 25000 KHz
14:28:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:12: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAD180>, 0x0, True) , Command count = 3791 ] 
14:28:12: [GO18_globalSetVolt]### Host voltage value is set.
14:28:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421180>, 0x0, False) , Command count = 3792 ] 
14:28:12: [GO18_globalSetVolt]### Host voltage value is set.
14:28:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3793 ] 
14:28:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3794 ] 
14:28:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3795 ] 
14:28:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F90>, <py_sfcl.CommandDataDefinition object at 0x05DA7960>) , Command count = 3796 ] 
14:28:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADCC0>, <py_sfcl.CommandDataDefinition object at 0x0642E9F0>) , Command count = 3797 ] 
14:28:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:12: [ SetCardRCA(0x1, 0xD555) , Command count = 3798 ] 
14:28:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:13: Host Frequency set to 25000 KHz
14:28:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:13: ####CSD Registe 2.0 Values####
14:28:13: CSD_STRUCTURE                                 :0x1
14:28:13: Reserv1                                       :0x0
14:28:13: Time Access 1 TAAC                            :0xe
14:28:13: Time Access 2 NSAC*100                        :0x0
14:28:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:13: Card Command Classess CCC                     :0x5b5
14:28:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:13: DSR(driver stage register)  DSR_IMP           :0x0
14:28:13: Reserv2                                       :0x0
14:28:13: Device Size C_SIZE                            :0xedc8
14:28:13: Reserv3                                       :0x0
14:28:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:13: Reserv4                                       :0x0
14:28:13: Write Speed Factor R2W_FACTOR                 :0x2
14:28:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:13: FILE_FORMAT_GRP                               :0x0
14:28:13: COPY flag                                     :0x1
14:28:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:13: File_Format                                   :0x0
14:28:13: CRC                                           :0x0
14:28:13: ####CSD Registe Values####  

14:28:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:13: [GetSCRRegisterEntry] Passed
14:28:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:13: Data_Status_After Erases          : 0
14:28:13: CPRM Security Support             : No Security
14:28:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:13: Spec. Version                     : Version 3.0X
14:28:13: Extended Security Support         : Extended_Security_Not_Supported
14:28:13: Command Support                   : COMMAND_SUPPORT
14:28:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8A80>, <py_sfcl.CommandDataDefinition object at 0x06431A80>) , Command count = 3799 ] 
14:28:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421090>, <py_sfcl.CommandDataDefinition object at 0x0642E060>) , Command count = 3800 ] 
14:28:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:13: [ SetBusWidth(0x4) , Command count = 3801 ] 
14:28:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3802 ] 
14:28:13: Protected Area Size 0x28000
14:28:13: Bus Width           2
14:28:13: Secure Mode         0
14:28:13: Speed  Class        4
14:28:13: Perf Move           0
14:28:13: Au Size             9
14:28:13: Erase Size          15
14:28:13: Erase Timeout       1
14:28:13: Erase offset        1
14:28:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3803 ] 
14:28:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:13: Host Frequency set to 100000 KHz
14:28:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:13: ####CSD Registe 2.0 Values####
14:28:13: CSD_STRUCTURE                                 :0x1
14:28:13: Reserv1                                       :0x0
14:28:13: Time Access 1 TAAC                            :0xe
14:28:13: Time Access 2 NSAC*100                        :0x0
14:28:13: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:13: Card Command Classess CCC                     :0x5b5
14:28:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:13: DSR(driver stage register)  DSR_IMP           :0x0
14:28:13: Reserv2                                       :0x0
14:28:13: Device Size C_SIZE                            :0xedc8
14:28:13: Reserv3                                       :0x0
14:28:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:13: Reserv4                                       :0x0
14:28:13: Write Speed Factor R2W_FACTOR                 :0x2
14:28:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:13: FILE_FORMAT_GRP                               :0x0
14:28:13: COPY flag                                     :0x1
14:28:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:13: File_Format                                   :0x0
14:28:13: CRC                                           :0x0
14:28:13: ####CSD Registe Values####  

14:28:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D91180>, <py_sfcl.CommandDataDefinition object at 0x05D91210>) , Command count = 3804 ] 
14:28:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467C90>, <py_sfcl.CommandDataDefinition object at 0x0642EEA0>) , Command count = 3805 ] 
14:28:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF7E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431660>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6F0>, <None>, <py_sfcl.Command23 object at 0x0642E450>) , Command count = 3806 ] 
14:28:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 27
14:28:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF810>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431B40>, <py_sfcl.PySEnhancedCmdData object at 0x06431B70>, <None>, <py_sfcl.Command23 object at 0x0642EBD0>) , Command count = 3807 ] 
14:28:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421600>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B720>, <py_sfcl.PySEnhancedCmdData object at 0x0645B210>, <None>, <py_sfcl.Command23 object at 0x0642E360>) , Command count = 3808 ] 
14:28:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:15: Host Frequency set to 25000 KHz
14:28:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF960>, 0x0, True) , Command count = 3809 ] 
14:28:15: [GO18_globalSetVolt]### Host voltage value is set.
14:28:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421A20>, 0x0, False) , Command count = 3810 ] 
14:28:15: [GO18_globalSetVolt]### Host voltage value is set.
14:28:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3811 ] 
14:28:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3812 ] 
14:28:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3813 ] 
14:28:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB10>, <py_sfcl.CommandDataDefinition object at 0x05DA7C60>) , Command count = 3814 ] 
14:28:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D7EAE0>, <py_sfcl.CommandDataDefinition object at 0x0642EFC0>) , Command count = 3815 ] 
14:28:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:15: [ SetCardRCA(0x1, 0xD555) , Command count = 3816 ] 
14:28:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:15: Host Frequency set to 25000 KHz
14:28:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:15: ####CSD Registe 2.0 Values####
14:28:15: CSD_STRUCTURE                                 :0x1
14:28:15: Reserv1                                       :0x0
14:28:15: Time Access 1 TAAC                            :0xe
14:28:15: Time Access 2 NSAC*100                        :0x0
14:28:15: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:15: Card Command Classess CCC                     :0x5b5
14:28:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:15: DSR(driver stage register)  DSR_IMP           :0x0
14:28:15: Reserv2                                       :0x0
14:28:15: Device Size C_SIZE                            :0xedc8
14:28:15: Reserv3                                       :0x0
14:28:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:15: Reserv4                                       :0x0
14:28:15: Write Speed Factor R2W_FACTOR                 :0x2
14:28:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:15: FILE_FORMAT_GRP                               :0x0
14:28:15: COPY flag                                     :0x1
14:28:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:15: File_Format                                   :0x0
14:28:15: CRC                                           :0x0
14:28:15: ####CSD Registe Values####  

14:28:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:15: [GetSCRRegisterEntry] Passed
14:28:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:15: Data_Status_After Erases          : 0
14:28:15: CPRM Security Support             : No Security
14:28:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:15: Spec. Version                     : Version 3.0X
14:28:15: Extended Security Support         : Extended_Security_Not_Supported
14:28:15: Command Support                   : COMMAND_SUPPORT
14:28:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB40>, <py_sfcl.CommandDataDefinition object at 0x06431FC0>) , Command count = 3817 ] 
14:28:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421480>, <py_sfcl.CommandDataDefinition object at 0x0642ED80>) , Command count = 3818 ] 
14:28:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:15: [ SetBusWidth(0x4) , Command count = 3819 ] 
14:28:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3820 ] 
14:28:15: Protected Area Size 0x28000
14:28:15: Bus Width           2
14:28:15: Secure Mode         0
14:28:15: Speed  Class        4
14:28:15: Perf Move           0
14:28:15: Au Size             9
14:28:15: Erase Size          15
14:28:15: Erase Timeout       1
14:28:15: Erase offset        1
14:28:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3821 ] 
14:28:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:15: Host Frequency set to 100000 KHz
14:28:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:15: ####CSD Registe 2.0 Values####
14:28:15: CSD_STRUCTURE                                 :0x1
14:28:15: Reserv1                                       :0x0
14:28:15: Time Access 1 TAAC                            :0xe
14:28:16: Time Access 2 NSAC*100                        :0x0
14:28:16: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:16: Card Command Classess CCC                     :0x5b5
14:28:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:16: DSR(driver stage register)  DSR_IMP           :0x0
14:28:16: Reserv2                                       :0x0
14:28:16: Device Size C_SIZE                            :0xedc8
14:28:16: Reserv3                                       :0x0
14:28:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:16: Reserv4                                       :0x0
14:28:16: Write Speed Factor R2W_FACTOR                 :0x2
14:28:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:16: FILE_FORMAT_GRP                               :0x0
14:28:16: COPY flag                                     :0x1
14:28:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:16: File_Format                                   :0x0
14:28:16: CRC                                           :0x0
14:28:16: ####CSD Registe Values####  

14:28:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E14B0>, <py_sfcl.CommandDataDefinition object at 0x05DEFE10>) , Command count = 3822 ] 
14:28:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421570>, <py_sfcl.CommandDataDefinition object at 0x0642E5A0>) , Command count = 3823 ] 
14:28:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E7E0>, <py_sfcl.PySEnhancedCmdData object at 0x0642EE40>, <None>, <py_sfcl.Command23 object at 0x0642EE70>) , Command count = 3824 ] 
14:28:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 26
14:28:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DAD3F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AB10>, <py_sfcl.PySEnhancedCmdData object at 0x06431E10>, <None>, <py_sfcl.Command23 object at 0x0642E720>) , Command count = 3825 ] 
14:28:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421EA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B2D0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B390>, <None>, <py_sfcl.Command23 object at 0x06431F90>) , Command count = 3826 ] 
14:28:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:18: Host Frequency set to 25000 KHz
14:28:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:18: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x064140F0>, 0x0, True) , Command count = 3827 ] 
14:28:18: [GO18_globalSetVolt]### Host voltage value is set.
14:28:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E270>, 0x0, False) , Command count = 3828 ] 
14:28:18: [GO18_globalSetVolt]### Host voltage value is set.
14:28:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3829 ] 
14:28:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3830 ] 
14:28:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3831 ] 
14:28:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414690>, <py_sfcl.CommandDataDefinition object at 0x06414B40>) , Command count = 3832 ] 
14:28:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E600>, <py_sfcl.CommandDataDefinition object at 0x0642E480>) , Command count = 3833 ] 
14:28:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:18: [ SetCardRCA(0x1, 0xD555) , Command count = 3834 ] 
14:28:18: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:18: Host Frequency set to 25000 KHz
14:28:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:18: ####CSD Registe 2.0 Values####
14:28:18: CSD_STRUCTURE                                 :0x1
14:28:18: Reserv1                                       :0x0
14:28:18: Time Access 1 TAAC                            :0xe
14:28:18: Time Access 2 NSAC*100                        :0x0
14:28:18: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:18: Card Command Classess CCC                     :0x5b5
14:28:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:18: DSR(driver stage register)  DSR_IMP           :0x0
14:28:18: Reserv2                                       :0x0
14:28:18: Device Size C_SIZE                            :0xedc8
14:28:18: Reserv3                                       :0x0
14:28:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:18: Reserv4                                       :0x0
14:28:18: Write Speed Factor R2W_FACTOR                 :0x2
14:28:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:18: FILE_FORMAT_GRP                               :0x0
14:28:18: COPY flag                                     :0x1
14:28:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:18: File_Format                                   :0x0
14:28:18: CRC                                           :0x0
14:28:18: ####CSD Registe Values####  

14:28:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:18: [GetSCRRegisterEntry] Passed
14:28:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:18: Data_Status_After Erases          : 0
14:28:18: CPRM Security Support             : No Security
14:28:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:18: Spec. Version                     : Version 3.0X
14:28:18: Extended Security Support         : Extended_Security_Not_Supported
14:28:18: Command Support                   : COMMAND_SUPPORT
14:28:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414360>, <py_sfcl.CommandDataDefinition object at 0x0642E990>) , Command count = 3835 ] 
14:28:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421450>, <py_sfcl.CommandDataDefinition object at 0x064318D0>) , Command count = 3836 ] 
14:28:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:18: [ SetBusWidth(0x4) , Command count = 3837 ] 
14:28:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3838 ] 
14:28:18: Protected Area Size 0x28000
14:28:18: Bus Width           2
14:28:18: Secure Mode         0
14:28:18: Speed  Class        4
14:28:18: Perf Move           0
14:28:18: Au Size             9
14:28:18: Erase Size          15
14:28:18: Erase Timeout       1
14:28:18: Erase offset        1
14:28:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3839 ] 
14:28:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:18: Host Frequency set to 100000 KHz
14:28:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:18: ####CSD Registe 2.0 Values####
14:28:18: CSD_STRUCTURE                                 :0x1
14:28:18: Reserv1                                       :0x0
14:28:18: Time Access 1 TAAC                            :0xe
14:28:18: Time Access 2 NSAC*100                        :0x0
14:28:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:18: Card Command Classess CCC                     :0x5b5
14:28:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:18: DSR(driver stage register)  DSR_IMP           :0x0
14:28:18: Reserv2                                       :0x0
14:28:18: Device Size C_SIZE                            :0xedc8
14:28:18: Reserv3                                       :0x0
14:28:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:18: Reserv4                                       :0x0
14:28:18: Write Speed Factor R2W_FACTOR                 :0x2
14:28:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:18: FILE_FORMAT_GRP                               :0x0
14:28:18: COPY flag                                     :0x1
14:28:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:18: File_Format                                   :0x0
14:28:18: CRC                                           :0x0
14:28:18: ####CSD Registe Values####  

14:28:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431960>, <py_sfcl.CommandDataDefinition object at 0x06431AE0>) , Command count = 3840 ] 
14:28:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421E10>, <py_sfcl.CommandDataDefinition object at 0x0642AC30>) , Command count = 3841 ] 
14:28:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414300>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F60>, <py_sfcl.PySEnhancedCmdData object at 0x064316C0>, <None>, <py_sfcl.Command23 object at 0x06431F00>) , Command count = 3842 ] 
14:28:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 25
14:28:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E1060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414900>, <py_sfcl.PySEnhancedCmdData object at 0x06431C60>, <None>, <py_sfcl.Command23 object at 0x06431900>) , Command count = 3843 ] 
14:28:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642EA50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BCF0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BD20>, <None>, <py_sfcl.Command23 object at 0x06431A50>) , Command count = 3844 ] 
14:28:18: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:18: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:20: Host Frequency set to 25000 KHz
14:28:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:20: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x064517B0>, 0x0, True) , Command count = 3845 ] 
14:28:20: [GO18_globalSetVolt]### Host voltage value is set.
14:28:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642ABA0>, 0x0, False) , Command count = 3846 ] 
14:28:20: [GO18_globalSetVolt]### Host voltage value is set.
14:28:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3847 ] 
14:28:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3848 ] 
14:28:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3849 ] 
14:28:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414DE0>, <py_sfcl.CommandDataDefinition object at 0x06451540>) , Command count = 3850 ] 
14:28:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064519F0>, <py_sfcl.CommandDataDefinition object at 0x06431780>) , Command count = 3851 ] 
14:28:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:21: [ SetCardRCA(0x1, 0xD555) , Command count = 3852 ] 
14:28:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:21: Host Frequency set to 25000 KHz
14:28:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:21: ####CSD Registe 2.0 Values####
14:28:21: CSD_STRUCTURE                                 :0x1
14:28:21: Reserv1                                       :0x0
14:28:21: Time Access 1 TAAC                            :0xe
14:28:21: Time Access 2 NSAC*100                        :0x0
14:28:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:21: Card Command Classess CCC                     :0x5b5
14:28:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:21: DSR(driver stage register)  DSR_IMP           :0x0
14:28:21: Reserv2                                       :0x0
14:28:21: Device Size C_SIZE                            :0xedc8
14:28:21: Reserv3                                       :0x0
14:28:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:21: Reserv4                                       :0x0
14:28:21: Write Speed Factor R2W_FACTOR                 :0x2
14:28:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:21: FILE_FORMAT_GRP                               :0x0
14:28:21: COPY flag                                     :0x1
14:28:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:21: File_Format                                   :0x0
14:28:21: CRC                                           :0x0
14:28:21: ####CSD Registe Values####  

14:28:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:21: [GetSCRRegisterEntry] Passed
14:28:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:21: Data_Status_After Erases          : 0
14:28:21: CPRM Security Support             : No Security
14:28:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:21: Spec. Version                     : Version 3.0X
14:28:21: Extended Security Support         : Extended_Security_Not_Supported
14:28:21: Command Support                   : COMMAND_SUPPORT
14:28:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1A80>, <py_sfcl.CommandDataDefinition object at 0x064149F0>) , Command count = 3853 ] 
14:28:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E3C0>, <py_sfcl.CommandDataDefinition object at 0x06431BA0>) , Command count = 3854 ] 
14:28:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:21: [ SetBusWidth(0x4) , Command count = 3855 ] 
14:28:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3856 ] 
14:28:21: Protected Area Size 0x28000
14:28:21: Bus Width           2
14:28:21: Secure Mode         0
14:28:21: Speed  Class        4
14:28:21: Perf Move           0
14:28:21: Au Size             9
14:28:21: Erase Size          15
14:28:21: Erase Timeout       1
14:28:21: Erase offset        1
14:28:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3857 ] 
14:28:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:21: Host Frequency set to 100000 KHz
14:28:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:21: ####CSD Registe 2.0 Values####
14:28:21: CSD_STRUCTURE                                 :0x1
14:28:21: Reserv1                                       :0x0
14:28:21: Time Access 1 TAAC                            :0xe
14:28:21: Time Access 2 NSAC*100                        :0x0
14:28:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:21: Card Command Classess CCC                     :0x5b5
14:28:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:21: DSR(driver stage register)  DSR_IMP           :0x0
14:28:21: Reserv2                                       :0x0
14:28:21: Device Size C_SIZE                            :0xedc8
14:28:21: Reserv3                                       :0x0
14:28:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:21: Reserv4                                       :0x0
14:28:21: Write Speed Factor R2W_FACTOR                 :0x2
14:28:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:21: FILE_FORMAT_GRP                               :0x0
14:28:21: COPY flag                                     :0x1
14:28:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:21: File_Format                                   :0x0
14:28:21: CRC                                           :0x0
14:28:21: ####CSD Registe Values####  

14:28:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431D50>, <py_sfcl.CommandDataDefinition object at 0x06431C00>) , Command count = 3858 ] 
14:28:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431060>, <py_sfcl.CommandDataDefinition object at 0x06431810>) , Command count = 3859 ] 
14:28:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E11E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064144B0>, <py_sfcl.PySEnhancedCmdData object at 0x06451B10>, <None>, <py_sfcl.Command23 object at 0x06431870>) , Command count = 3860 ] 
14:28:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 24
14:28:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431D80>, <py_sfcl.PySEnhancedCmdData object at 0x06431B10>, <None>, <py_sfcl.Command23 object at 0x06431C90>) , Command count = 3861 ] 
14:28:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064145A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BCC0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BE70>, <None>, <py_sfcl.Command23 object at 0x06431840>) , Command count = 3862 ] 
14:28:21: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:21: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:23: Host Frequency set to 25000 KHz
14:28:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:23: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x064516C0>, 0x0, True) , Command count = 3863 ] 
14:28:23: [GO18_globalSetVolt]### Host voltage value is set.
14:28:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE8690>, 0x0, False) , Command count = 3864 ] 
14:28:23: [GO18_globalSetVolt]### Host voltage value is set.
14:28:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3865 ] 
14:28:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3866 ] 
14:28:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3867 ] 
14:28:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F120>, <py_sfcl.CommandDataDefinition object at 0x064519C0>) , Command count = 3868 ] 
14:28:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451390>, <py_sfcl.CommandDataDefinition object at 0x06431180>) , Command count = 3869 ] 
14:28:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:23: [ SetCardRCA(0x1, 0xD555) , Command count = 3870 ] 
14:28:24: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:24: Host Frequency set to 25000 KHz
14:28:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:24: ####CSD Registe 2.0 Values####
14:28:24: CSD_STRUCTURE                                 :0x1
14:28:24: Reserv1                                       :0x0
14:28:24: Time Access 1 TAAC                            :0xe
14:28:24: Time Access 2 NSAC*100                        :0x0
14:28:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:24: Card Command Classess CCC                     :0x5b5
14:28:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:24: DSR(driver stage register)  DSR_IMP           :0x0
14:28:24: Reserv2                                       :0x0
14:28:24: Device Size C_SIZE                            :0xedc8
14:28:24: Reserv3                                       :0x0
14:28:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:24: Reserv4                                       :0x0
14:28:24: Write Speed Factor R2W_FACTOR                 :0x2
14:28:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:24: FILE_FORMAT_GRP                               :0x0
14:28:24: COPY flag                                     :0x1
14:28:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:24: File_Format                                   :0x0
14:28:24: CRC                                           :0x0
14:28:24: ####CSD Registe Values####  

14:28:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:24: [GetSCRRegisterEntry] Passed
14:28:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:24: Data_Status_After Erases          : 0
14:28:24: CPRM Security Support             : No Security
14:28:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:24: Spec. Version                     : Version 3.0X
14:28:24: Extended Security Support         : Extended_Security_Not_Supported
14:28:24: Command Support                   : COMMAND_SUPPORT
14:28:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451780>, <py_sfcl.CommandDataDefinition object at 0x06451D20>) , Command count = 3871 ] 
14:28:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431330>, <py_sfcl.CommandDataDefinition object at 0x06431180>) , Command count = 3872 ] 
14:28:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:24: [ SetBusWidth(0x4) , Command count = 3873 ] 
14:28:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3874 ] 
14:28:24: Protected Area Size 0x28000
14:28:24: Bus Width           2
14:28:24: Secure Mode         0
14:28:24: Speed  Class        4
14:28:24: Perf Move           0
14:28:24: Au Size             9
14:28:24: Erase Size          15
14:28:24: Erase Timeout       1
14:28:24: Erase offset        1
14:28:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3875 ] 
14:28:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:24: Host Frequency set to 100000 KHz
14:28:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:24: ####CSD Registe 2.0 Values####
14:28:24: CSD_STRUCTURE                                 :0x1
14:28:24: Reserv1                                       :0x0
14:28:24: Time Access 1 TAAC                            :0xe
14:28:24: Time Access 2 NSAC*100                        :0x0
14:28:24: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:24: Card Command Classess CCC                     :0x5b5
14:28:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:24: DSR(driver stage register)  DSR_IMP           :0x0
14:28:24: Reserv2                                       :0x0
14:28:24: Device Size C_SIZE                            :0xedc8
14:28:24: Reserv3                                       :0x0
14:28:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:24: Reserv4                                       :0x0
14:28:24: Write Speed Factor R2W_FACTOR                 :0x2
14:28:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:24: FILE_FORMAT_GRP                               :0x0
14:28:24: COPY flag                                     :0x1
14:28:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:24: File_Format                                   :0x0
14:28:24: CRC                                           :0x0
14:28:24: ####CSD Registe Values####  

14:28:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431BD0>, <py_sfcl.CommandDataDefinition object at 0x06431AB0>) , Command count = 3876 ] 
14:28:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01D66840>, <py_sfcl.CommandDataDefinition object at 0x064315A0>) , Command count = 3877 ] 
14:28:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F1E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431450>, <py_sfcl.PySEnhancedCmdData object at 0x0642E510>, <None>, <py_sfcl.Command23 object at 0x0642ED50>) , Command count = 3878 ] 
14:28:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 23
14:28:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F4B0>, <py_sfcl.PySEnhancedCmdData object at 0x06414A50>, <None>, <py_sfcl.Command23 object at 0x0642E870>) , Command count = 3879 ] 
14:28:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467450>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B990>, <py_sfcl.PySEnhancedCmdData object at 0x0645B9C0>, <None>, <py_sfcl.Command23 object at 0x06414CF0>) , Command count = 3880 ] 
14:28:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:24: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:26: Host Frequency set to 25000 KHz
14:28:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:26: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB10>, 0x0, True) , Command count = 3881 ] 
14:28:26: [GO18_globalSetVolt]### Host voltage value is set.
14:28:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D7E2A0>, 0x0, False) , Command count = 3882 ] 
14:28:26: [GO18_globalSetVolt]### Host voltage value is set.
14:28:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3883 ] 
14:28:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3884 ] 
14:28:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3885 ] 
14:28:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FFC0>, <py_sfcl.CommandDataDefinition object at 0x06451E40>) , Command count = 3886 ] 
14:28:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064515A0>, <py_sfcl.CommandDataDefinition object at 0x064142A0>) , Command count = 3887 ] 
14:28:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:26: [ SetCardRCA(0x1, 0xD555) , Command count = 3888 ] 
14:28:26: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:26: Host Frequency set to 25000 KHz
14:28:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:26: ####CSD Registe 2.0 Values####
14:28:26: CSD_STRUCTURE                                 :0x1
14:28:26: Reserv1                                       :0x0
14:28:26: Time Access 1 TAAC                            :0xe
14:28:26: Time Access 2 NSAC*100                        :0x0
14:28:26: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:26: Card Command Classess CCC                     :0x5b5
14:28:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:26: DSR(driver stage register)  DSR_IMP           :0x0
14:28:26: Reserv2                                       :0x0
14:28:26: Device Size C_SIZE                            :0xedc8
14:28:26: Reserv3                                       :0x0
14:28:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:26: Reserv4                                       :0x0
14:28:26: Write Speed Factor R2W_FACTOR                 :0x2
14:28:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:26: FILE_FORMAT_GRP                               :0x0
14:28:26: COPY flag                                     :0x1
14:28:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:26: File_Format                                   :0x0
14:28:26: CRC                                           :0x0
14:28:26: ####CSD Registe Values####  

14:28:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:26: [GetSCRRegisterEntry] Passed
14:28:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:26: Data_Status_After Erases          : 0
14:28:26: CPRM Security Support             : No Security
14:28:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:26: Spec. Version                     : Version 3.0X
14:28:26: Extended Security Support         : Extended_Security_Not_Supported
14:28:26: Command Support                   : COMMAND_SUPPORT
14:28:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451600>, <py_sfcl.CommandDataDefinition object at 0x0641FB70>) , Command count = 3889 ] 
14:28:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064316F0>, <py_sfcl.CommandDataDefinition object at 0x064142D0>) , Command count = 3890 ] 
14:28:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:26: [ SetBusWidth(0x4) , Command count = 3891 ] 
14:28:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3892 ] 
14:28:26: Protected Area Size 0x28000
14:28:26: Bus Width           2
14:28:26: Secure Mode         0
14:28:26: Speed  Class        4
14:28:26: Perf Move           0
14:28:26: Au Size             9
14:28:26: Erase Size          15
14:28:26: Erase Timeout       1
14:28:26: Erase offset        1
14:28:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3893 ] 
14:28:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:27: Host Frequency set to 100000 KHz
14:28:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:27: ####CSD Registe 2.0 Values####
14:28:27: CSD_STRUCTURE                                 :0x1
14:28:27: Reserv1                                       :0x0
14:28:27: Time Access 1 TAAC                            :0xe
14:28:27: Time Access 2 NSAC*100                        :0x0
14:28:27: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:27: Card Command Classess CCC                     :0x5b5
14:28:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:27: DSR(driver stage register)  DSR_IMP           :0x0
14:28:27: Reserv2                                       :0x0
14:28:27: Device Size C_SIZE                            :0xedc8
14:28:27: Reserv3                                       :0x0
14:28:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:27: Reserv4                                       :0x0
14:28:27: Write Speed Factor R2W_FACTOR                 :0x2
14:28:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:27: FILE_FORMAT_GRP                               :0x0
14:28:27: COPY flag                                     :0x1
14:28:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:27: File_Format                                   :0x0
14:28:27: CRC                                           :0x0
14:28:27: ####CSD Registe Values####  

14:28:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467060>, <py_sfcl.CommandDataDefinition object at 0x0641FF90>) , Command count = 3894 ] 
14:28:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064314B0>, <py_sfcl.CommandDataDefinition object at 0x0642E090>) , Command count = 3895 ] 
14:28:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064671E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467210>, <py_sfcl.PySEnhancedCmdData object at 0x06467240>, <None>, <py_sfcl.Command23 object at 0x0641FCF0>) , Command count = 3896 ] 
14:28:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 22
14:28:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064670C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064670F0>, <py_sfcl.PySEnhancedCmdData object at 0x06467120>, <None>, <py_sfcl.Command23 object at 0x0641F180>) , Command count = 3897 ] 
14:28:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE8C30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BDB0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B600>, <None>, <py_sfcl.Command23 object at 0x0641FCC0>) , Command count = 3898 ] 
14:28:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:29: Host Frequency set to 25000 KHz
14:28:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x064675A0>, 0x0, True) , Command count = 3899 ] 
14:28:29: [GO18_globalSetVolt]### Host voltage value is set.
14:28:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x06414420>, 0x0, False) , Command count = 3900 ] 
14:28:29: [GO18_globalSetVolt]### Host voltage value is set.
14:28:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3901 ] 
14:28:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3902 ] 
14:28:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3903 ] 
14:28:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467540>, <py_sfcl.CommandDataDefinition object at 0x064674E0>) , Command count = 3904 ] 
14:28:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064148A0>, <py_sfcl.CommandDataDefinition object at 0x0641F1B0>) , Command count = 3905 ] 
14:28:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:29: [ SetCardRCA(0x1, 0xD555) , Command count = 3906 ] 
14:28:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:29: Host Frequency set to 25000 KHz
14:28:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:29: ####CSD Registe 2.0 Values####
14:28:29: CSD_STRUCTURE                                 :0x1
14:28:29: Reserv1                                       :0x0
14:28:29: Time Access 1 TAAC                            :0xe
14:28:29: Time Access 2 NSAC*100                        :0x0
14:28:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:29: Card Command Classess CCC                     :0x5b5
14:28:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:29: DSR(driver stage register)  DSR_IMP           :0x0
14:28:29: Reserv2                                       :0x0
14:28:29: Device Size C_SIZE                            :0xedc8
14:28:29: Reserv3                                       :0x0
14:28:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:29: Reserv4                                       :0x0
14:28:29: Write Speed Factor R2W_FACTOR                 :0x2
14:28:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:29: FILE_FORMAT_GRP                               :0x0
14:28:29: COPY flag                                     :0x1
14:28:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:29: File_Format                                   :0x0
14:28:29: CRC                                           :0x0
14:28:29: ####CSD Registe Values####  

14:28:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:29: [GetSCRRegisterEntry] Passed
14:28:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:29: Data_Status_After Erases          : 0
14:28:29: CPRM Security Support             : No Security
14:28:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:29: Spec. Version                     : Version 3.0X
14:28:29: Extended Security Support         : Extended_Security_Not_Supported
14:28:29: Command Support                   : COMMAND_SUPPORT
14:28:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467660>, <py_sfcl.CommandDataDefinition object at 0x064313F0>) , Command count = 3907 ] 
14:28:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AAE0>, <py_sfcl.CommandDataDefinition object at 0x0641FDE0>) , Command count = 3908 ] 
14:28:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:29: [ SetBusWidth(0x4) , Command count = 3909 ] 
14:28:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BA80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3910 ] 
14:28:29: Protected Area Size 0x28000
14:28:29: Bus Width           2
14:28:29: Secure Mode         0
14:28:29: Speed  Class        4
14:28:29: Perf Move           0
14:28:29: Au Size             9
14:28:29: Erase Size          15
14:28:29: Erase Timeout       1
14:28:29: Erase offset        1
14:28:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3911 ] 
14:28:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:29: Host Frequency set to 100000 KHz
14:28:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:29: ####CSD Registe 2.0 Values####
14:28:29: CSD_STRUCTURE                                 :0x1
14:28:29: Reserv1                                       :0x0
14:28:29: Time Access 1 TAAC                            :0xe
14:28:29: Time Access 2 NSAC*100                        :0x0
14:28:29: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:29: Card Command Classess CCC                     :0x5b5
14:28:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:29: DSR(driver stage register)  DSR_IMP           :0x0
14:28:29: Reserv2                                       :0x0
14:28:29: Device Size C_SIZE                            :0xedc8
14:28:29: Reserv3                                       :0x0
14:28:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:29: Reserv4                                       :0x0
14:28:29: Write Speed Factor R2W_FACTOR                 :0x2
14:28:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:29: FILE_FORMAT_GRP                               :0x0
14:28:29: COPY flag                                     :0x1
14:28:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:29: File_Format                                   :0x0
14:28:29: CRC                                           :0x0
14:28:29: ####CSD Registe Values####  

14:28:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467A50>, <py_sfcl.CommandDataDefinition object at 0x0641F030>) , Command count = 3912 ] 
14:28:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431150>, <py_sfcl.CommandDataDefinition object at 0x0641FD20>) , Command count = 3913 ] 
14:28:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467990>, <py_sfcl.PySEnhancedCmdData object at 0x064679C0>, <None>, <py_sfcl.Command23 object at 0x0641FC90>) , Command count = 3914 ] 
14:28:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 21
14:28:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06467AE0>, <None>, <py_sfcl.Command23 object at 0x0641F2D0>) , Command count = 3915 ] 
14:28:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x01D7FDB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B690>, <py_sfcl.PySEnhancedCmdData object at 0x0645BC00>, <None>, <py_sfcl.Command23 object at 0x0641F0C0>) , Command count = 3916 ] 
14:28:29: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:29: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:31: Host Frequency set to 25000 KHz
14:28:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:31: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467E40>, 0x0, True) , Command count = 3917 ] 
14:28:31: [GO18_globalSetVolt]### Host voltage value is set.
14:28:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x064319C0>, 0x0, False) , Command count = 3918 ] 
14:28:31: [GO18_globalSetVolt]### Host voltage value is set.
14:28:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3919 ] 
14:28:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3920 ] 
14:28:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3921 ] 
14:28:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467DE0>, <py_sfcl.CommandDataDefinition object at 0x06431DB0>) , Command count = 3922 ] 
14:28:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467ED0>, <py_sfcl.CommandDataDefinition object at 0x0641F540>) , Command count = 3923 ] 
14:28:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:32: [ SetCardRCA(0x1, 0xD555) , Command count = 3924 ] 
14:28:32: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:32: Host Frequency set to 25000 KHz
14:28:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:32: ####CSD Registe 2.0 Values####
14:28:32: CSD_STRUCTURE                                 :0x1
14:28:32: Reserv1                                       :0x0
14:28:32: Time Access 1 TAAC                            :0xe
14:28:32: Time Access 2 NSAC*100                        :0x0
14:28:32: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:32: Card Command Classess CCC                     :0x5b5
14:28:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:32: DSR(driver stage register)  DSR_IMP           :0x0
14:28:32: Reserv2                                       :0x0
14:28:32: Device Size C_SIZE                            :0xedc8
14:28:32: Reserv3                                       :0x0
14:28:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:32: Reserv4                                       :0x0
14:28:32: Write Speed Factor R2W_FACTOR                 :0x2
14:28:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:32: FILE_FORMAT_GRP                               :0x0
14:28:32: COPY flag                                     :0x1
14:28:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:32: File_Format                                   :0x0
14:28:32: CRC                                           :0x0
14:28:32: ####CSD Registe Values####  

14:28:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:32: [GetSCRRegisterEntry] Passed
14:28:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:32: Data_Status_After Erases          : 0
14:28:32: CPRM Security Support             : No Security
14:28:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:32: Spec. Version                     : Version 3.0X
14:28:32: Extended Security Support         : Extended_Security_Not_Supported
14:28:32: Command Support                   : COMMAND_SUPPORT
14:28:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421030>, <py_sfcl.CommandDataDefinition object at 0x06467F00>) , Command count = 3925 ] 
14:28:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E930>, <py_sfcl.CommandDataDefinition object at 0x06467E10>) , Command count = 3926 ] 
14:28:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:32: [ SetBusWidth(0x4) , Command count = 3927 ] 
14:28:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3928 ] 
14:28:32: Protected Area Size 0x28000
14:28:32: Bus Width           2
14:28:32: Secure Mode         0
14:28:32: Speed  Class        4
14:28:32: Perf Move           0
14:28:32: Au Size             9
14:28:32: Erase Size          15
14:28:32: Erase Timeout       1
14:28:32: Erase offset        1
14:28:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3929 ] 
14:28:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:32: Host Frequency set to 100000 KHz
14:28:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:32: ####CSD Registe 2.0 Values####
14:28:32: CSD_STRUCTURE                                 :0x1
14:28:32: Reserv1                                       :0x0
14:28:32: Time Access 1 TAAC                            :0xe
14:28:32: Time Access 2 NSAC*100                        :0x0
14:28:32: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:32: Card Command Classess CCC                     :0x5b5
14:28:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:32: DSR(driver stage register)  DSR_IMP           :0x0
14:28:32: Reserv2                                       :0x0
14:28:32: Device Size C_SIZE                            :0xedc8
14:28:32: Reserv3                                       :0x0
14:28:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:32: Reserv4                                       :0x0
14:28:32: Write Speed Factor R2W_FACTOR                 :0x2
14:28:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:32: FILE_FORMAT_GRP                               :0x0
14:28:32: COPY flag                                     :0x1
14:28:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:32: File_Format                                   :0x0
14:28:32: CRC                                           :0x0
14:28:32: ####CSD Registe Values####  

14:28:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F330>, <py_sfcl.CommandDataDefinition object at 0x06467F90>) , Command count = 3930 ] 
14:28:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADAB0>, <py_sfcl.CommandDataDefinition object at 0x0641F240>) , Command count = 3931 ] 
14:28:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064212A0>, <py_sfcl.PySEnhancedCmdData object at 0x06467C00>, <None>, <py_sfcl.Command23 object at 0x0645BDB0>) , Command count = 3932 ] 
14:28:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 20
14:28:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421360>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421390>, <py_sfcl.PySEnhancedCmdData object at 0x064679F0>, <None>, <py_sfcl.Command23 object at 0x06467870>) , Command count = 3933 ] 
14:28:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEFA80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B150>, <py_sfcl.PySEnhancedCmdData object at 0x0645B660>, <None>, <py_sfcl.Command23 object at 0x06467E70>) , Command count = 3934 ] 
14:28:32: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:32: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:34: Host Frequency set to 25000 KHz
14:28:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:34: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421720>, 0x0, True) , Command count = 3935 ] 
14:28:34: [GO18_globalSetVolt]### Host voltage value is set.
14:28:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEFAB0>, 0x0, False) , Command count = 3936 ] 
14:28:34: [GO18_globalSetVolt]### Host voltage value is set.
14:28:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3937 ] 
14:28:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3938 ] 
14:28:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3939 ] 
14:28:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216C0>, <py_sfcl.CommandDataDefinition object at 0x06421660>) , Command count = 3940 ] 
14:28:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467BA0>, <py_sfcl.CommandDataDefinition object at 0x0641F090>) , Command count = 3941 ] 
14:28:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:34: [ SetCardRCA(0x1, 0xD555) , Command count = 3942 ] 
14:28:35: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:35: Host Frequency set to 25000 KHz
14:28:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:35: ####CSD Registe 2.0 Values####
14:28:35: CSD_STRUCTURE                                 :0x1
14:28:35: Reserv1                                       :0x0
14:28:35: Time Access 1 TAAC                            :0xe
14:28:35: Time Access 2 NSAC*100                        :0x0
14:28:35: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:35: Card Command Classess CCC                     :0x5b5
14:28:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:35: DSR(driver stage register)  DSR_IMP           :0x0
14:28:35: Reserv2                                       :0x0
14:28:35: Device Size C_SIZE                            :0xedc8
14:28:35: Reserv3                                       :0x0
14:28:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:35: Reserv4                                       :0x0
14:28:35: Write Speed Factor R2W_FACTOR                 :0x2
14:28:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:35: FILE_FORMAT_GRP                               :0x0
14:28:35: COPY flag                                     :0x1
14:28:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:35: File_Format                                   :0x0
14:28:35: CRC                                           :0x0
14:28:35: ####CSD Registe Values####  

14:28:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:35: [GetSCRRegisterEntry] Passed
14:28:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:35: Data_Status_After Erases          : 0
14:28:35: CPRM Security Support             : No Security
14:28:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:35: Spec. Version                     : Version 3.0X
14:28:35: Extended Security Support         : Extended_Security_Not_Supported
14:28:35: Command Support                   : COMMAND_SUPPORT
14:28:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064219C0>, <py_sfcl.CommandDataDefinition object at 0x06467C60>) , Command count = 3943 ] 
14:28:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064315D0>, <py_sfcl.CommandDataDefinition object at 0x064673F0>) , Command count = 3944 ] 
14:28:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:35: [ SetBusWidth(0x4) , Command count = 3945 ] 
14:28:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3946 ] 
14:28:35: Protected Area Size 0x28000
14:28:35: Bus Width           2
14:28:35: Secure Mode         0
14:28:35: Speed  Class        4
14:28:35: Perf Move           0
14:28:35: Au Size             9
14:28:35: Erase Size          15
14:28:35: Erase Timeout       1
14:28:35: Erase offset        1
14:28:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3947 ] 
14:28:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:35: Host Frequency set to 100000 KHz
14:28:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:35: ####CSD Registe 2.0 Values####
14:28:35: CSD_STRUCTURE                                 :0x1
14:28:35: Reserv1                                       :0x0
14:28:35: Time Access 1 TAAC                            :0xe
14:28:35: Time Access 2 NSAC*100                        :0x0
14:28:35: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:35: Card Command Classess CCC                     :0x5b5
14:28:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:35: DSR(driver stage register)  DSR_IMP           :0x0
14:28:35: Reserv2                                       :0x0
14:28:35: Device Size C_SIZE                            :0xedc8
14:28:35: Reserv3                                       :0x0
14:28:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:35: Reserv4                                       :0x0
14:28:35: Write Speed Factor R2W_FACTOR                 :0x2
14:28:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:35: FILE_FORMAT_GRP                               :0x0
14:28:35: COPY flag                                     :0x1
14:28:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:35: File_Format                                   :0x0
14:28:35: CRC                                           :0x0
14:28:35: ####CSD Registe Values####  

14:28:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064217E0>, <py_sfcl.CommandDataDefinition object at 0x064216F0>) , Command count = 3948 ] 
14:28:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEF9F0>, <py_sfcl.CommandDataDefinition object at 0x06467690>) , Command count = 3949 ] 
14:28:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421B10>, <py_sfcl.PySEnhancedCmdData object at 0x06421B40>, <None>, <py_sfcl.Command23 object at 0x06467420>) , Command count = 3950 ] 
14:28:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 19
14:28:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421C30>, <py_sfcl.PySEnhancedCmdData object at 0x06421C60>, <None>, <py_sfcl.Command23 object at 0x06467BD0>) , Command count = 3951 ] 
14:28:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B480>, <py_sfcl.PySEnhancedCmdData object at 0x0645B150>, <None>, <py_sfcl.Command23 object at 0x06467330>) , Command count = 3952 ] 
14:28:35: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:35: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:37: Host Frequency set to 25000 KHz
14:28:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421FC0>, 0x0, True) , Command count = 3953 ] 
14:28:37: [GO18_globalSetVolt]### Host voltage value is set.
14:28:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467630>, 0x0, False) , Command count = 3954 ] 
14:28:37: [GO18_globalSetVolt]### Host voltage value is set.
14:28:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3955 ] 
14:28:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3956 ] 
14:28:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3957 ] 
14:28:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A060>, <py_sfcl.CommandDataDefinition object at 0x06421F60>) , Command count = 3958 ] 
14:28:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A0F0>, <py_sfcl.CommandDataDefinition object at 0x06467570>) , Command count = 3959 ] 
14:28:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:37: [ SetCardRCA(0x1, 0xD555) , Command count = 3960 ] 
14:28:37: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:37: Host Frequency set to 25000 KHz
14:28:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:37: ####CSD Registe 2.0 Values####
14:28:37: CSD_STRUCTURE                                 :0x1
14:28:37: Reserv1                                       :0x0
14:28:37: Time Access 1 TAAC                            :0xe
14:28:37: Time Access 2 NSAC*100                        :0x0
14:28:37: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:37: Card Command Classess CCC                     :0x5b5
14:28:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:37: DSR(driver stage register)  DSR_IMP           :0x0
14:28:37: Reserv2                                       :0x0
14:28:37: Device Size C_SIZE                            :0xedc8
14:28:37: Reserv3                                       :0x0
14:28:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:37: Reserv4                                       :0x0
14:28:37: Write Speed Factor R2W_FACTOR                 :0x2
14:28:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:37: FILE_FORMAT_GRP                               :0x0
14:28:37: COPY flag                                     :0x1
14:28:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:37: File_Format                                   :0x0
14:28:37: CRC                                           :0x0
14:28:37: ####CSD Registe Values####  

14:28:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:37: [GetSCRRegisterEntry] Passed
14:28:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:37: Data_Status_After Erases          : 0
14:28:37: CPRM Security Support             : No Security
14:28:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:37: Spec. Version                     : Version 3.0X
14:28:37: Extended Security Support         : Extended_Security_Not_Supported
14:28:37: Command Support                   : COMMAND_SUPPORT
14:28:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A2A0>, <py_sfcl.CommandDataDefinition object at 0x0642A0C0>) , Command count = 3961 ] 
14:28:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414480>, <py_sfcl.CommandDataDefinition object at 0x06467EA0>) , Command count = 3962 ] 
14:28:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:37: [ SetBusWidth(0x4) , Command count = 3963 ] 
14:28:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B8D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3964 ] 
14:28:37: Protected Area Size 0x28000
14:28:37: Bus Width           2
14:28:37: Secure Mode         0
14:28:37: Speed  Class        4
14:28:37: Perf Move           0
14:28:37: Au Size             9
14:28:37: Erase Size          15
14:28:37: Erase Timeout       1
14:28:37: Erase offset        1
14:28:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3965 ] 
14:28:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:38: Host Frequency set to 100000 KHz
14:28:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:38: ####CSD Registe 2.0 Values####
14:28:38: CSD_STRUCTURE                                 :0x1
14:28:38: Reserv1                                       :0x0
14:28:38: Time Access 1 TAAC                            :0xe
14:28:38: Time Access 2 NSAC*100                        :0x0
14:28:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:38: Card Command Classess CCC                     :0x5b5
14:28:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:38: DSR(driver stage register)  DSR_IMP           :0x0
14:28:38: Reserv2                                       :0x0
14:28:38: Device Size C_SIZE                            :0xedc8
14:28:38: Reserv3                                       :0x0
14:28:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:38: Reserv4                                       :0x0
14:28:38: Write Speed Factor R2W_FACTOR                 :0x2
14:28:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:38: FILE_FORMAT_GRP                               :0x0
14:28:38: COPY flag                                     :0x1
14:28:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:38: File_Format                                   :0x0
14:28:38: CRC                                           :0x0
14:28:38: ####CSD Registe Values####  

14:28:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A090>, <py_sfcl.CommandDataDefinition object at 0x06421F00>) , Command count = 3966 ] 
14:28:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414D20>, <py_sfcl.CommandDataDefinition object at 0x06421060>) , Command count = 3967 ] 
14:28:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421D80>, <py_sfcl.PySEnhancedCmdData object at 0x06421BA0>, <None>, <py_sfcl.Command23 object at 0x06421D50>) , Command count = 3968 ] 
14:28:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 18
14:28:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A510>, <py_sfcl.PySEnhancedCmdData object at 0x0642A540>, <None>, <py_sfcl.Command23 object at 0x06421330>) , Command count = 3969 ] 
14:28:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F300>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BB70>, <py_sfcl.PySEnhancedCmdData object at 0x0645BE40>, <None>, <py_sfcl.Command23 object at 0x06421540>) , Command count = 3970 ] 
14:28:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:38: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:40: Host Frequency set to 25000 KHz
14:28:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:40: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A8A0>, 0x0, True) , Command count = 3971 ] 
14:28:40: [GO18_globalSetVolt]### Host voltage value is set.
14:28:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FC60>, 0x0, False) , Command count = 3972 ] 
14:28:40: [GO18_globalSetVolt]### Host voltage value is set.
14:28:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3973 ] 
14:28:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3974 ] 
14:28:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3975 ] 
14:28:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A840>, <py_sfcl.CommandDataDefinition object at 0x06421D20>) , Command count = 3976 ] 
14:28:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421870>, <py_sfcl.CommandDataDefinition object at 0x06421E40>) , Command count = 3977 ] 
14:28:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:40: [ SetCardRCA(0x1, 0xD555) , Command count = 3978 ] 
14:28:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:40: Host Frequency set to 25000 KHz
14:28:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:40: ####CSD Registe 2.0 Values####
14:28:40: CSD_STRUCTURE                                 :0x1
14:28:40: Reserv1                                       :0x0
14:28:40: Time Access 1 TAAC                            :0xe
14:28:40: Time Access 2 NSAC*100                        :0x0
14:28:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:40: Card Command Classess CCC                     :0x5b5
14:28:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:40: DSR(driver stage register)  DSR_IMP           :0x0
14:28:40: Reserv2                                       :0x0
14:28:40: Device Size C_SIZE                            :0xedc8
14:28:40: Reserv3                                       :0x0
14:28:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:40: Reserv4                                       :0x0
14:28:40: Write Speed Factor R2W_FACTOR                 :0x2
14:28:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:40: FILE_FORMAT_GRP                               :0x0
14:28:40: COPY flag                                     :0x1
14:28:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:40: File_Format                                   :0x0
14:28:40: CRC                                           :0x0
14:28:40: ####CSD Registe Values####  

14:28:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:40: [GetSCRRegisterEntry] Passed
14:28:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:40: Data_Status_After Erases          : 0
14:28:40: CPRM Security Support             : No Security
14:28:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:40: Spec. Version                     : Version 3.0X
14:28:40: Extended Security Support         : Extended_Security_Not_Supported
14:28:40: Command Support                   : COMMAND_SUPPORT
14:28:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AB40>, <py_sfcl.CommandDataDefinition object at 0x06421840>) , Command count = 3979 ] 
14:28:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414810>, <py_sfcl.CommandDataDefinition object at 0x06421270>) , Command count = 3980 ] 
14:28:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:40: [ SetBusWidth(0x4) , Command count = 3981 ] 
14:28:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06451F00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3982 ] 
14:28:40: Protected Area Size 0x28000
14:28:40: Bus Width           2
14:28:40: Secure Mode         0
14:28:40: Speed  Class        4
14:28:40: Perf Move           0
14:28:40: Au Size             9
14:28:40: Erase Size          15
14:28:40: Erase Timeout       1
14:28:40: Erase offset        1
14:28:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3983 ] 
14:28:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:40: Host Frequency set to 100000 KHz
14:28:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:40: ####CSD Registe 2.0 Values####
14:28:40: CSD_STRUCTURE                                 :0x1
14:28:40: Reserv1                                       :0x0
14:28:40: Time Access 1 TAAC                            :0xe
14:28:40: Time Access 2 NSAC*100                        :0x0
14:28:40: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:40: Card Command Classess CCC                     :0x5b5
14:28:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:40: DSR(driver stage register)  DSR_IMP           :0x0
14:28:40: Reserv2                                       :0x0
14:28:40: Device Size C_SIZE                            :0xedc8
14:28:40: Reserv3                                       :0x0
14:28:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:40: Reserv4                                       :0x0
14:28:40: Write Speed Factor R2W_FACTOR                 :0x2
14:28:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:40: FILE_FORMAT_GRP                               :0x0
14:28:40: COPY flag                                     :0x1
14:28:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:40: File_Format                                   :0x0
14:28:40: CRC                                           :0x0
14:28:40: ####CSD Registe Values####  

14:28:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AA20>, <py_sfcl.CommandDataDefinition object at 0x0642A870>) , Command count = 3984 ] 
14:28:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467270>, <py_sfcl.CommandDataDefinition object at 0x06421F90>) , Command count = 3985 ] 
14:28:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AC60>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC90>, <py_sfcl.PySEnhancedCmdData object at 0x0642A930>, <None>, <py_sfcl.Command23 object at 0x064213C0>) , Command count = 3986 ] 
14:28:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 17
14:28:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642ADB0>, <py_sfcl.PySEnhancedCmdData object at 0x0642ADE0>, <None>, <py_sfcl.Command23 object at 0x06421A80>) , Command count = 3987 ] 
14:28:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064211E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B900>, <py_sfcl.PySEnhancedCmdData object at 0x0645BDE0>, <None>, <py_sfcl.Command23 object at 0x0642AD50>) , Command count = 3988 ] 
14:28:40: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:40: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:42: Host Frequency set to 25000 KHz
14:28:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:42: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E030>, 0x0, True) , Command count = 3989 ] 
14:28:43: [GO18_globalSetVolt]### Host voltage value is set.
14:28:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x063FFEA0>, 0x0, False) , Command count = 3990 ] 
14:28:43: [GO18_globalSetVolt]### Host voltage value is set.
14:28:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3991 ] 
14:28:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3992 ] 
14:28:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3993 ] 
14:28:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E150>, <py_sfcl.CommandDataDefinition object at 0x0642E0F0>) , Command count = 3994 ] 
14:28:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421B70>, <py_sfcl.CommandDataDefinition object at 0x064214B0>) , Command count = 3995 ] 
14:28:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:43: [ SetCardRCA(0x1, 0xD555) , Command count = 3996 ] 
14:28:43: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:43: Host Frequency set to 25000 KHz
14:28:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:43: ####CSD Registe 2.0 Values####
14:28:43: CSD_STRUCTURE                                 :0x1
14:28:43: Reserv1                                       :0x0
14:28:43: Time Access 1 TAAC                            :0xe
14:28:43: Time Access 2 NSAC*100                        :0x0
14:28:43: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:43: Card Command Classess CCC                     :0x5b5
14:28:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:43: DSR(driver stage register)  DSR_IMP           :0x0
14:28:43: Reserv2                                       :0x0
14:28:43: Device Size C_SIZE                            :0xedc8
14:28:43: Reserv3                                       :0x0
14:28:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:43: Reserv4                                       :0x0
14:28:43: Write Speed Factor R2W_FACTOR                 :0x2
14:28:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:43: FILE_FORMAT_GRP                               :0x0
14:28:43: COPY flag                                     :0x1
14:28:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:43: File_Format                                   :0x0
14:28:43: CRC                                           :0x0
14:28:43: ####CSD Registe Values####  

14:28:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:43: [GetSCRRegisterEntry] Passed
14:28:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:43: Data_Status_After Erases          : 0
14:28:43: CPRM Security Support             : No Security
14:28:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:43: Spec. Version                     : Version 3.0X
14:28:43: Extended Security Support         : Extended_Security_Not_Supported
14:28:43: Command Support                   : COMMAND_SUPPORT
14:28:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A630>, <py_sfcl.CommandDataDefinition object at 0x0642E420>) , Command count = 3997 ] 
14:28:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F450>, <py_sfcl.CommandDataDefinition object at 0x064214E0>) , Command count = 3998 ] 
14:28:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:43: [ SetBusWidth(0x4) , Command count = 3999 ] 
14:28:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4000 ] 
14:28:43: Protected Area Size 0x28000
14:28:43: Bus Width           2
14:28:43: Secure Mode         0
14:28:43: Speed  Class        4
14:28:43: Perf Move           0
14:28:43: Au Size             9
14:28:43: Erase Size          15
14:28:43: Erase Timeout       1
14:28:43: Erase offset        1
14:28:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4001 ] 
14:28:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:43: Host Frequency set to 100000 KHz
14:28:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:43: ####CSD Registe 2.0 Values####
14:28:43: CSD_STRUCTURE                                 :0x1
14:28:43: Reserv1                                       :0x0
14:28:43: Time Access 1 TAAC                            :0xe
14:28:43: Time Access 2 NSAC*100                        :0x0
14:28:43: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:43: Card Command Classess CCC                     :0x5b5
14:28:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:43: DSR(driver stage register)  DSR_IMP           :0x0
14:28:43: Reserv2                                       :0x0
14:28:43: Device Size C_SIZE                            :0xedc8
14:28:43: Reserv3                                       :0x0
14:28:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:43: Reserv4                                       :0x0
14:28:43: Write Speed Factor R2W_FACTOR                 :0x2
14:28:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:43: FILE_FORMAT_GRP                               :0x0
14:28:43: COPY flag                                     :0x1
14:28:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:43: File_Format                                   :0x0
14:28:43: CRC                                           :0x0
14:28:43: ####CSD Registe Values####  

14:28:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E330>, <py_sfcl.CommandDataDefinition object at 0x0641FAB0>) , Command count = 4002 ] 
14:28:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467510>, <py_sfcl.CommandDataDefinition object at 0x0642E210>) , Command count = 4003 ] 
14:28:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E180>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642AD20>, <None>, <py_sfcl.Command23 object at 0x0642A7E0>) , Command count = 4004 ] 
14:28:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 16
14:28:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AB70>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AED0>, <py_sfcl.PySEnhancedCmdData object at 0x0642E660>, <None>, <py_sfcl.Command23 object at 0x0642AE10>) , Command count = 4005 ] 
14:28:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064672A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421300>, <py_sfcl.PySEnhancedCmdData object at 0x0645B5D0>, <None>, <py_sfcl.Command23 object at 0x0642E1B0>) , Command count = 4006 ] 
14:28:43: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:43: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:45: Host Frequency set to 25000 KHz
14:28:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:45: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EA20>, 0x0, True) , Command count = 4007 ] 
14:28:45: [GO18_globalSetVolt]### Host voltage value is set.
14:28:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467C30>, 0x0, False) , Command count = 4008 ] 
14:28:45: [GO18_globalSetVolt]### Host voltage value is set.
14:28:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4009 ] 
14:28:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4010 ] 
14:28:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4011 ] 
14:28:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E9C0>, <py_sfcl.CommandDataDefinition object at 0x0642AE70>) , Command count = 4012 ] 
14:28:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A9F0>, <py_sfcl.CommandDataDefinition object at 0x0642AA50>) , Command count = 4013 ] 
14:28:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:46: [ SetCardRCA(0x1, 0xD555) , Command count = 4014 ] 
14:28:46: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:46: Host Frequency set to 25000 KHz
14:28:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:46: ####CSD Registe 2.0 Values####
14:28:46: CSD_STRUCTURE                                 :0x1
14:28:46: Reserv1                                       :0x0
14:28:46: Time Access 1 TAAC                            :0xe
14:28:46: Time Access 2 NSAC*100                        :0x0
14:28:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:46: Card Command Classess CCC                     :0x5b5
14:28:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:46: DSR(driver stage register)  DSR_IMP           :0x0
14:28:46: Reserv2                                       :0x0
14:28:46: Device Size C_SIZE                            :0xedc8
14:28:46: Reserv3                                       :0x0
14:28:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:46: Reserv4                                       :0x0
14:28:46: Write Speed Factor R2W_FACTOR                 :0x2
14:28:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:46: FILE_FORMAT_GRP                               :0x0
14:28:46: COPY flag                                     :0x1
14:28:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:46: File_Format                                   :0x0
14:28:46: CRC                                           :0x0
14:28:46: ####CSD Registe Values####  

14:28:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:46: [GetSCRRegisterEntry] Passed
14:28:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:46: Data_Status_After Erases          : 0
14:28:46: CPRM Security Support             : No Security
14:28:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:46: Spec. Version                     : Version 3.0X
14:28:46: Extended Security Support         : Extended_Security_Not_Supported
14:28:46: Command Support                   : COMMAND_SUPPORT
14:28:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ECC0>, <py_sfcl.CommandDataDefinition object at 0x0642A8D0>) , Command count = 4015 ] 
14:28:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FE40>, <py_sfcl.CommandDataDefinition object at 0x0642A180>) , Command count = 4016 ] 
14:28:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:46: [ SetBusWidth(0x4) , Command count = 4017 ] 
14:28:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4018 ] 
14:28:46: Protected Area Size 0x28000
14:28:46: Bus Width           2
14:28:46: Secure Mode         0
14:28:46: Speed  Class        4
14:28:46: Perf Move           0
14:28:46: Au Size             9
14:28:46: Erase Size          15
14:28:46: Erase Timeout       1
14:28:46: Erase offset        1
14:28:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4019 ] 
14:28:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:46: Host Frequency set to 100000 KHz
14:28:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:46: ####CSD Registe 2.0 Values####
14:28:46: CSD_STRUCTURE                                 :0x1
14:28:46: Reserv1                                       :0x0
14:28:46: Time Access 1 TAAC                            :0xe
14:28:46: Time Access 2 NSAC*100                        :0x0
14:28:46: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:46: Card Command Classess CCC                     :0x5b5
14:28:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:46: DSR(driver stage register)  DSR_IMP           :0x0
14:28:46: Reserv2                                       :0x0
14:28:46: Device Size C_SIZE                            :0xedc8
14:28:46: Reserv3                                       :0x0
14:28:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:46: Reserv4                                       :0x0
14:28:46: Write Speed Factor R2W_FACTOR                 :0x2
14:28:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:46: FILE_FORMAT_GRP                               :0x0
14:28:46: COPY flag                                     :0x1
14:28:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:46: File_Format                                   :0x0
14:28:46: CRC                                           :0x0
14:28:46: ####CSD Registe Values####  

14:28:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EED0>, <py_sfcl.CommandDataDefinition object at 0x0642EBA0>) , Command count = 4020 ] 
14:28:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FB40>, <py_sfcl.CommandDataDefinition object at 0x0642A720>) , Command count = 4021 ] 
14:28:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642ECF0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EB10>, <py_sfcl.PySEnhancedCmdData object at 0x0642A660>, <None>, <py_sfcl.Command23 object at 0x0642A1B0>) , Command count = 4022 ] 
14:28:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 15
14:28:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064310F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642EF30>, <None>, <py_sfcl.Command23 object at 0x0642A690>) , Command count = 4023 ] 
14:28:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467B40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A240>, <py_sfcl.PySEnhancedCmdData object at 0x0645B960>, <None>, <py_sfcl.Command23 object at 0x0642A810>) , Command count = 4024 ] 
14:28:46: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:46: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:48: Host Frequency set to 25000 KHz
14:28:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:48: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431300>, 0x0, True) , Command count = 4025 ] 
14:28:48: [GO18_globalSetVolt]### Host voltage value is set.
14:28:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x064676F0>, 0x0, False) , Command count = 4026 ] 
14:28:48: [GO18_globalSetVolt]### Host voltage value is set.
14:28:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4027 ] 
14:28:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4028 ] 
14:28:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4029 ] 
14:28:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312A0>, <py_sfcl.CommandDataDefinition object at 0x06431270>) , Command count = 4030 ] 
14:28:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C40B70>, <py_sfcl.CommandDataDefinition object at 0x0642E2D0>) , Command count = 4031 ] 
14:28:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:48: [ SetCardRCA(0x1, 0xD555) , Command count = 4032 ] 
14:28:48: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:48: Host Frequency set to 25000 KHz
14:28:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:48: ####CSD Registe 2.0 Values####
14:28:48: CSD_STRUCTURE                                 :0x1
14:28:48: Reserv1                                       :0x0
14:28:48: Time Access 1 TAAC                            :0xe
14:28:48: Time Access 2 NSAC*100                        :0x0
14:28:48: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:48: Card Command Classess CCC                     :0x5b5
14:28:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:48: DSR(driver stage register)  DSR_IMP           :0x0
14:28:48: Reserv2                                       :0x0
14:28:48: Device Size C_SIZE                            :0xedc8
14:28:48: Reserv3                                       :0x0
14:28:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:48: Reserv4                                       :0x0
14:28:48: Write Speed Factor R2W_FACTOR                 :0x2
14:28:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:48: FILE_FORMAT_GRP                               :0x0
14:28:48: COPY flag                                     :0x1
14:28:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:48: File_Format                                   :0x0
14:28:48: CRC                                           :0x0
14:28:48: ####CSD Registe Values####  

14:28:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:48: [GetSCRRegisterEntry] Passed
14:28:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:48: Data_Status_After Erases          : 0
14:28:48: CPRM Security Support             : No Security
14:28:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:48: Spec. Version                     : Version 3.0X
14:28:48: Extended Security Support         : Extended_Security_Not_Supported
14:28:48: Command Support                   : COMMAND_SUPPORT
14:28:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431570>, <py_sfcl.CommandDataDefinition object at 0x0642E8A0>) , Command count = 4033 ] 
14:28:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467810>, <py_sfcl.CommandDataDefinition object at 0x0642A480>) , Command count = 4034 ] 
14:28:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:48: [ SetBusWidth(0x4) , Command count = 4035 ] 
14:28:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B3C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4036 ] 
14:28:49: Protected Area Size 0x28000
14:28:49: Bus Width           2
14:28:49: Secure Mode         0
14:28:49: Speed  Class        4
14:28:49: Perf Move           0
14:28:49: Au Size             9
14:28:49: Erase Size          15
14:28:49: Erase Timeout       1
14:28:49: Erase offset        1
14:28:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4037 ] 
14:28:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:49: Host Frequency set to 100000 KHz
14:28:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:49: ####CSD Registe 2.0 Values####
14:28:49: CSD_STRUCTURE                                 :0x1
14:28:49: Reserv1                                       :0x0
14:28:49: Time Access 1 TAAC                            :0xe
14:28:49: Time Access 2 NSAC*100                        :0x0
14:28:49: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:49: Card Command Classess CCC                     :0x5b5
14:28:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:49: DSR(driver stage register)  DSR_IMP           :0x0
14:28:49: Reserv2                                       :0x0
14:28:49: Device Size C_SIZE                            :0xedc8
14:28:49: Reserv3                                       :0x0
14:28:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:49: Reserv4                                       :0x0
14:28:49: Write Speed Factor R2W_FACTOR                 :0x2
14:28:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:49: FILE_FORMAT_GRP                               :0x0
14:28:49: COPY flag                                     :0x1
14:28:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:49: File_Format                                   :0x0
14:28:49: CRC                                           :0x0
14:28:49: ####CSD Registe Values####  

14:28:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7BD0>, <py_sfcl.CommandDataDefinition object at 0x05D7E1E0>) , Command count = 4038 ] 
14:28:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AE40>, <py_sfcl.CommandDataDefinition object at 0x0642A300>) , Command count = 4039 ] 
14:28:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A450>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A7B0>, <py_sfcl.PySEnhancedCmdData object at 0x0642AC00>, <None>, <py_sfcl.Command23 object at 0x0642E8D0>) , Command count = 4040 ] 
14:28:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 14
14:28:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7C30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E750>, <py_sfcl.PySEnhancedCmdData object at 0x0642A750>, <None>, <py_sfcl.Command23 object at 0x0642EAB0>) , Command count = 4041 ] 
14:28:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F060>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431390>, <py_sfcl.PySEnhancedCmdData object at 0x0645B450>, <None>, <py_sfcl.Command23 object at 0x06431630>) , Command count = 4042 ] 
14:28:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:49: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:51: Host Frequency set to 25000 KHz
14:28:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAD180>, 0x0, True) , Command count = 4043 ] 
14:28:51: [GO18_globalSetVolt]### Host voltage value is set.
14:28:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467D50>, 0x0, False) , Command count = 4044 ] 
14:28:51: [GO18_globalSetVolt]### Host voltage value is set.
14:28:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4045 ] 
14:28:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4046 ] 
14:28:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4047 ] 
14:28:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F90>, <py_sfcl.CommandDataDefinition object at 0x05DA7960>) , Command count = 4048 ] 
14:28:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADD50>, <py_sfcl.CommandDataDefinition object at 0x0642A9C0>) , Command count = 4049 ] 
14:28:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:51: [ SetCardRCA(0x1, 0xD555) , Command count = 4050 ] 
14:28:51: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:51: Host Frequency set to 25000 KHz
14:28:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:51: ####CSD Registe 2.0 Values####
14:28:51: CSD_STRUCTURE                                 :0x1
14:28:51: Reserv1                                       :0x0
14:28:51: Time Access 1 TAAC                            :0xe
14:28:51: Time Access 2 NSAC*100                        :0x0
14:28:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:51: Card Command Classess CCC                     :0x5b5
14:28:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:51: DSR(driver stage register)  DSR_IMP           :0x0
14:28:51: Reserv2                                       :0x0
14:28:51: Device Size C_SIZE                            :0xedc8
14:28:51: Reserv3                                       :0x0
14:28:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:51: Reserv4                                       :0x0
14:28:51: Write Speed Factor R2W_FACTOR                 :0x2
14:28:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:51: FILE_FORMAT_GRP                               :0x0
14:28:51: COPY flag                                     :0x1
14:28:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:51: File_Format                                   :0x0
14:28:51: CRC                                           :0x0
14:28:51: ####CSD Registe Values####  

14:28:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:51: [GetSCRRegisterEntry] Passed
14:28:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:51: Data_Status_After Erases          : 0
14:28:51: CPRM Security Support             : No Security
14:28:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:51: Spec. Version                     : Version 3.0X
14:28:51: Extended Security Support         : Extended_Security_Not_Supported
14:28:51: Command Support                   : COMMAND_SUPPORT
14:28:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8A80>, <py_sfcl.CommandDataDefinition object at 0x06431A80>) , Command count = 4051 ] 
14:28:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421120>, <py_sfcl.CommandDataDefinition object at 0x0642E5D0>) , Command count = 4052 ] 
14:28:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:51: [ SetBusWidth(0x4) , Command count = 4053 ] 
14:28:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BC30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4054 ] 
14:28:51: Protected Area Size 0x28000
14:28:51: Bus Width           2
14:28:51: Secure Mode         0
14:28:51: Speed  Class        4
14:28:51: Perf Move           0
14:28:51: Au Size             9
14:28:51: Erase Size          15
14:28:51: Erase Timeout       1
14:28:51: Erase offset        1
14:28:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4055 ] 
14:28:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:51: Host Frequency set to 100000 KHz
14:28:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:51: ####CSD Registe 2.0 Values####
14:28:51: CSD_STRUCTURE                                 :0x1
14:28:51: Reserv1                                       :0x0
14:28:51: Time Access 1 TAAC                            :0xe
14:28:51: Time Access 2 NSAC*100                        :0x0
14:28:51: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:51: Card Command Classess CCC                     :0x5b5
14:28:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:51: DSR(driver stage register)  DSR_IMP           :0x0
14:28:51: Reserv2                                       :0x0
14:28:51: Device Size C_SIZE                            :0xedc8
14:28:51: Reserv3                                       :0x0
14:28:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:51: Reserv4                                       :0x0
14:28:51: Write Speed Factor R2W_FACTOR                 :0x2
14:28:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:51: FILE_FORMAT_GRP                               :0x0
14:28:51: COPY flag                                     :0x1
14:28:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:51: File_Format                                   :0x0
14:28:51: CRC                                           :0x0
14:28:51: ####CSD Registe Values####  

14:28:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D91180>, <py_sfcl.CommandDataDefinition object at 0x05D91210>) , Command count = 4056 ] 
14:28:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467D20>, <py_sfcl.CommandDataDefinition object at 0x0642E630>) , Command count = 4057 ] 
14:28:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF7E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431660>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6F0>, <None>, <py_sfcl.Command23 object at 0x0642E2A0>) , Command count = 4058 ] 
14:28:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 13
14:28:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF810>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431B40>, <py_sfcl.PySEnhancedCmdData object at 0x06431B70>, <None>, <py_sfcl.Command23 object at 0x0642E450>) , Command count = 4059 ] 
14:28:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421180>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B270>, <py_sfcl.PySEnhancedCmdData object at 0x0645B450>, <None>, <py_sfcl.Command23 object at 0x0642EBD0>) , Command count = 4060 ] 
14:28:51: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:54: Host Frequency set to 25000 KHz
14:28:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:54: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF960>, 0x0, True) , Command count = 4061 ] 
14:28:54: [GO18_globalSetVolt]### Host voltage value is set.
14:28:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421AB0>, 0x0, False) , Command count = 4062 ] 
14:28:54: [GO18_globalSetVolt]### Host voltage value is set.
14:28:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4063 ] 
14:28:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4064 ] 
14:28:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4065 ] 
14:28:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB10>, <py_sfcl.CommandDataDefinition object at 0x05DA7C60>) , Command count = 4066 ] 
14:28:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFBA0>, <py_sfcl.CommandDataDefinition object at 0x0642EEA0>) , Command count = 4067 ] 
14:28:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:54: [ SetCardRCA(0x1, 0xD555) , Command count = 4068 ] 
14:28:54: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:54: Host Frequency set to 25000 KHz
14:28:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:54: ####CSD Registe 2.0 Values####
14:28:54: CSD_STRUCTURE                                 :0x1
14:28:54: Reserv1                                       :0x0
14:28:54: Time Access 1 TAAC                            :0xe
14:28:54: Time Access 2 NSAC*100                        :0x0
14:28:54: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:54: Card Command Classess CCC                     :0x5b5
14:28:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:54: DSR(driver stage register)  DSR_IMP           :0x0
14:28:54: Reserv2                                       :0x0
14:28:54: Device Size C_SIZE                            :0xedc8
14:28:54: Reserv3                                       :0x0
14:28:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:54: Reserv4                                       :0x0
14:28:54: Write Speed Factor R2W_FACTOR                 :0x2
14:28:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:54: FILE_FORMAT_GRP                               :0x0
14:28:54: COPY flag                                     :0x1
14:28:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:54: File_Format                                   :0x0
14:28:54: CRC                                           :0x0
14:28:54: ####CSD Registe Values####  

14:28:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:54: [GetSCRRegisterEntry] Passed
14:28:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:54: Data_Status_After Erases          : 0
14:28:54: CPRM Security Support             : No Security
14:28:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:54: Spec. Version                     : Version 3.0X
14:28:54: Extended Security Support         : Extended_Security_Not_Supported
14:28:54: Command Support                   : COMMAND_SUPPORT
14:28:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB40>, <py_sfcl.CommandDataDefinition object at 0x06431FC0>) , Command count = 4069 ] 
14:28:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421990>, <py_sfcl.CommandDataDefinition object at 0x0642EFC0>) , Command count = 4070 ] 
14:28:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:54: [ SetBusWidth(0x4) , Command count = 4071 ] 
14:28:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BBD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4072 ] 
14:28:54: Protected Area Size 0x28000
14:28:54: Bus Width           2
14:28:54: Secure Mode         0
14:28:54: Speed  Class        4
14:28:54: Perf Move           0
14:28:54: Au Size             9
14:28:54: Erase Size          15
14:28:54: Erase Timeout       1
14:28:54: Erase offset        1
14:28:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4073 ] 
14:28:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:54: Host Frequency set to 100000 KHz
14:28:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:54: ####CSD Registe 2.0 Values####
14:28:54: CSD_STRUCTURE                                 :0x1
14:28:54: Reserv1                                       :0x0
14:28:54: Time Access 1 TAAC                            :0xe
14:28:54: Time Access 2 NSAC*100                        :0x0
14:28:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:54: Card Command Classess CCC                     :0x5b5
14:28:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:54: DSR(driver stage register)  DSR_IMP           :0x0
14:28:54: Reserv2                                       :0x0
14:28:54: Device Size C_SIZE                            :0xedc8
14:28:54: Reserv3                                       :0x0
14:28:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:54: Reserv4                                       :0x0
14:28:54: Write Speed Factor R2W_FACTOR                 :0x2
14:28:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:54: FILE_FORMAT_GRP                               :0x0
14:28:54: COPY flag                                     :0x1
14:28:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:54: File_Format                                   :0x0
14:28:54: CRC                                           :0x0
14:28:54: ####CSD Registe Values####  

14:28:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E14B0>, <py_sfcl.CommandDataDefinition object at 0x05DEFE10>) , Command count = 4074 ] 
14:28:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421600>, <py_sfcl.CommandDataDefinition object at 0x0642AA80>) , Command count = 4075 ] 
14:28:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431E40>, <py_sfcl.PySEnhancedCmdData object at 0x06431750>, <None>, <py_sfcl.Command23 object at 0x0642EE40>) , Command count = 4076 ] 
14:28:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 12
14:28:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DAD3F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AB10>, <py_sfcl.PySEnhancedCmdData object at 0x06431E10>, <None>, <py_sfcl.Command23 object at 0x0642E7E0>) , Command count = 4077 ] 
14:28:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421A20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B840>, <py_sfcl.PySEnhancedCmdData object at 0x0645B210>, <None>, <py_sfcl.Command23 object at 0x0642E720>) , Command count = 4078 ] 
14:28:54: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:54: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:56: Host Frequency set to 25000 KHz
14:28:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:56: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x064140F0>, 0x0, True) , Command count = 4079 ] 
14:28:56: [GO18_globalSetVolt]### Host voltage value is set.
14:28:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x064313C0>, 0x0, False) , Command count = 4080 ] 
14:28:56: [GO18_globalSetVolt]### Host voltage value is set.
14:28:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4081 ] 
14:28:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4082 ] 
14:28:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4083 ] 
14:28:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414690>, <py_sfcl.CommandDataDefinition object at 0x06414B40>) , Command count = 4084 ] 
14:28:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E0C0>, <py_sfcl.CommandDataDefinition object at 0x06421600>) , Command count = 4085 ] 
14:28:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:57: [ SetCardRCA(0x1, 0xD555) , Command count = 4086 ] 
14:28:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:57: Host Frequency set to 25000 KHz
14:28:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:57: ####CSD Registe 2.0 Values####
14:28:57: CSD_STRUCTURE                                 :0x1
14:28:57: Reserv1                                       :0x0
14:28:57: Time Access 1 TAAC                            :0xe
14:28:57: Time Access 2 NSAC*100                        :0x0
14:28:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:57: Card Command Classess CCC                     :0x5b5
14:28:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:57: DSR(driver stage register)  DSR_IMP           :0x0
14:28:57: Reserv2                                       :0x0
14:28:57: Device Size C_SIZE                            :0xedc8
14:28:57: Reserv3                                       :0x0
14:28:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:57: Reserv4                                       :0x0
14:28:57: Write Speed Factor R2W_FACTOR                 :0x2
14:28:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:57: FILE_FORMAT_GRP                               :0x0
14:28:57: COPY flag                                     :0x1
14:28:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:57: File_Format                                   :0x0
14:28:57: CRC                                           :0x0
14:28:57: ####CSD Registe Values####  

14:28:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:57: [GetSCRRegisterEntry] Passed
14:28:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:57: Data_Status_After Erases          : 0
14:28:57: CPRM Security Support             : No Security
14:28:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:57: Spec. Version                     : Version 3.0X
14:28:57: Extended Security Support         : Extended_Security_Not_Supported
14:28:57: Command Support                   : COMMAND_SUPPORT
14:28:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414360>, <py_sfcl.CommandDataDefinition object at 0x0642E990>) , Command count = 4087 ] 
14:28:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A270>, <py_sfcl.CommandDataDefinition object at 0x06431CF0>) , Command count = 4088 ] 
14:28:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:57: [ SetBusWidth(0x4) , Command count = 4089 ] 
14:28:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4090 ] 
14:28:57: Protected Area Size 0x28000
14:28:57: Bus Width           2
14:28:57: Secure Mode         0
14:28:57: Speed  Class        4
14:28:57: Perf Move           0
14:28:57: Au Size             9
14:28:57: Erase Size          15
14:28:57: Erase Timeout       1
14:28:57: Erase offset        1
14:28:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4091 ] 
14:28:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:57: Host Frequency set to 100000 KHz
14:28:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:57: ####CSD Registe 2.0 Values####
14:28:57: CSD_STRUCTURE                                 :0x1
14:28:57: Reserv1                                       :0x0
14:28:57: Time Access 1 TAAC                            :0xe
14:28:57: Time Access 2 NSAC*100                        :0x0
14:28:57: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:57: Card Command Classess CCC                     :0x5b5
14:28:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:57: DSR(driver stage register)  DSR_IMP           :0x0
14:28:57: Reserv2                                       :0x0
14:28:57: Device Size C_SIZE                            :0xedc8
14:28:57: Reserv3                                       :0x0
14:28:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:57: Reserv4                                       :0x0
14:28:57: Write Speed Factor R2W_FACTOR                 :0x2
14:28:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:57: FILE_FORMAT_GRP                               :0x0
14:28:57: COPY flag                                     :0x1
14:28:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:57: File_Format                                   :0x0
14:28:57: CRC                                           :0x0
14:28:57: ####CSD Registe Values####  

14:28:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431960>, <py_sfcl.CommandDataDefinition object at 0x06431AE0>) , Command count = 4092 ] 
14:28:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421EA0>, <py_sfcl.CommandDataDefinition object at 0x06431F90>) , Command count = 4093 ] 
14:28:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414300>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F60>, <py_sfcl.PySEnhancedCmdData object at 0x064316C0>, <None>, <py_sfcl.Command23 object at 0x064317B0>) , Command count = 4094 ] 
14:28:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 11
14:28:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:28:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E1060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414900>, <py_sfcl.PySEnhancedCmdData object at 0x06431C60>, <None>, <py_sfcl.Command23 object at 0x06431F00>) , Command count = 4095 ] 
14:28:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:28:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:28:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B240>, <py_sfcl.PySEnhancedCmdData object at 0x0645B390>, <None>, <py_sfcl.Command23 object at 0x06431900>) , Command count = 4096 ] 
14:28:57: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:28:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:59: Host Frequency set to 25000 KHz
14:28:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x064517B0>, 0x0, True) , Command count = 4097 ] 
14:28:59: [GO18_globalSetVolt]### Host voltage value is set.
14:28:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645B060>, 0x0, False) , Command count = 4098 ] 
14:28:59: [GO18_globalSetVolt]### Host voltage value is set.
14:28:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4099 ] 
14:28:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4100 ] 
14:28:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4101 ] 
14:28:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414DE0>, <py_sfcl.CommandDataDefinition object at 0x06451540>) , Command count = 4102 ] 
14:28:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414060>, <py_sfcl.CommandDataDefinition object at 0x06421E10>) , Command count = 4103 ] 
14:28:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:59: [ SetCardRCA(0x1, 0xD555) , Command count = 4104 ] 
14:28:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:59: Host Frequency set to 25000 KHz
14:28:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:59: ####CSD Registe 2.0 Values####
14:28:59: CSD_STRUCTURE                                 :0x1
14:28:59: Reserv1                                       :0x0
14:28:59: Time Access 1 TAAC                            :0xe
14:28:59: Time Access 2 NSAC*100                        :0x0
14:28:59: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:59: Card Command Classess CCC                     :0x5b5
14:28:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:59: DSR(driver stage register)  DSR_IMP           :0x0
14:28:59: Reserv2                                       :0x0
14:28:59: Device Size C_SIZE                            :0xedc8
14:28:59: Reserv3                                       :0x0
14:28:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:59: Reserv4                                       :0x0
14:28:59: Write Speed Factor R2W_FACTOR                 :0x2
14:28:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:59: FILE_FORMAT_GRP                               :0x0
14:28:59: COPY flag                                     :0x1
14:28:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:59: File_Format                                   :0x0
14:28:59: CRC                                           :0x0
14:28:59: ####CSD Registe Values####  

14:28:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:59: [GetSCRRegisterEntry] Passed
14:28:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:59: Data_Status_After Erases          : 0
14:28:59: CPRM Security Support             : No Security
14:28:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:59: Spec. Version                     : Version 3.0X
14:28:59: Extended Security Support         : Extended_Security_Not_Supported
14:28:59: Command Support                   : COMMAND_SUPPORT
14:28:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1A80>, <py_sfcl.CommandDataDefinition object at 0x064149F0>) , Command count = 4105 ] 
14:28:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E300>, <py_sfcl.CommandDataDefinition object at 0x06431930>) , Command count = 4106 ] 
14:29:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:00: [ SetBusWidth(0x4) , Command count = 4107 ] 
14:29:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0642A330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4108 ] 
14:29:00: Protected Area Size 0x28000
14:29:00: Bus Width           2
14:29:00: Secure Mode         0
14:29:00: Speed  Class        4
14:29:00: Perf Move           0
14:29:00: Au Size             9
14:29:00: Erase Size          15
14:29:00: Erase Timeout       1
14:29:00: Erase offset        1
14:29:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4109 ] 
14:29:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:00: Host Frequency set to 100000 KHz
14:29:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:00: ####CSD Registe 2.0 Values####
14:29:00: CSD_STRUCTURE                                 :0x1
14:29:00: Reserv1                                       :0x0
14:29:00: Time Access 1 TAAC                            :0xe
14:29:00: Time Access 2 NSAC*100                        :0x0
14:29:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:00: Card Command Classess CCC                     :0x5b5
14:29:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:00: DSR(driver stage register)  DSR_IMP           :0x0
14:29:00: Reserv2                                       :0x0
14:29:00: Device Size C_SIZE                            :0xedc8
14:29:00: Reserv3                                       :0x0
14:29:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:00: Reserv4                                       :0x0
14:29:00: Write Speed Factor R2W_FACTOR                 :0x2
14:29:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:00: FILE_FORMAT_GRP                               :0x0
14:29:00: COPY flag                                     :0x1
14:29:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:00: File_Format                                   :0x0
14:29:00: CRC                                           :0x0
14:29:00: ####CSD Registe Values####  

14:29:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431D50>, <py_sfcl.CommandDataDefinition object at 0x06431C00>) , Command count = 4110 ] 
14:29:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EA50>, <py_sfcl.CommandDataDefinition object at 0x06431A50>) , Command count = 4111 ] 
14:29:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E11E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064144B0>, <py_sfcl.PySEnhancedCmdData object at 0x06451B10>, <None>, <py_sfcl.Command23 object at 0x06431DE0>) , Command count = 4112 ] 
14:29:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 10
14:29:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431D80>, <py_sfcl.PySEnhancedCmdData object at 0x06431B10>, <None>, <py_sfcl.Command23 object at 0x06431870>) , Command count = 4113 ] 
14:29:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642ABA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B7B0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BD20>, <None>, <py_sfcl.Command23 object at 0x06431C90>) , Command count = 4114 ] 
14:29:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:02: Host Frequency set to 25000 KHz
14:29:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:02: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x064516C0>, 0x0, True) , Command count = 4115 ] 
14:29:02: [GO18_globalSetVolt]### Host voltage value is set.
14:29:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431510>, 0x0, False) , Command count = 4116 ] 
14:29:02: [GO18_globalSetVolt]### Host voltage value is set.
14:29:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4117 ] 
14:29:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4118 ] 
14:29:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4119 ] 
14:29:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F120>, <py_sfcl.CommandDataDefinition object at 0x064519C0>) , Command count = 4120 ] 
14:29:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451BA0>, <py_sfcl.CommandDataDefinition object at 0x06431060>) , Command count = 4121 ] 
14:29:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:02: [ SetCardRCA(0x1, 0xD555) , Command count = 4122 ] 
14:29:02: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:02: Host Frequency set to 25000 KHz
14:29:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:02: ####CSD Registe 2.0 Values####
14:29:02: CSD_STRUCTURE                                 :0x1
14:29:02: Reserv1                                       :0x0
14:29:02: Time Access 1 TAAC                            :0xe
14:29:02: Time Access 2 NSAC*100                        :0x0
14:29:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:02: Card Command Classess CCC                     :0x5b5
14:29:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:02: DSR(driver stage register)  DSR_IMP           :0x0
14:29:02: Reserv2                                       :0x0
14:29:02: Device Size C_SIZE                            :0xedc8
14:29:02: Reserv3                                       :0x0
14:29:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:02: Reserv4                                       :0x0
14:29:02: Write Speed Factor R2W_FACTOR                 :0x2
14:29:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:02: FILE_FORMAT_GRP                               :0x0
14:29:02: COPY flag                                     :0x1
14:29:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:02: File_Format                                   :0x0
14:29:02: CRC                                           :0x0
14:29:02: ####CSD Registe Values####  

14:29:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:02: [GetSCRRegisterEntry] Passed
14:29:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:02: Data_Status_After Erases          : 0
14:29:02: CPRM Security Support             : No Security
14:29:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:02: Spec. Version                     : Version 3.0X
14:29:02: Extended Security Support         : Extended_Security_Not_Supported
14:29:02: Command Support                   : COMMAND_SUPPORT
14:29:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451780>, <py_sfcl.CommandDataDefinition object at 0x06451D20>) , Command count = 4123 ] 
14:29:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E3F0>, <py_sfcl.CommandDataDefinition object at 0x064146C0>) , Command count = 4124 ] 
14:29:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:02: [ SetBusWidth(0x4) , Command count = 4125 ] 
14:29:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B6F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4126 ] 
14:29:02: Protected Area Size 0x28000
14:29:02: Bus Width           2
14:29:02: Secure Mode         0
14:29:02: Speed  Class        4
14:29:02: Perf Move           0
14:29:02: Au Size             9
14:29:02: Erase Size          15
14:29:02: Erase Timeout       1
14:29:02: Erase offset        1
14:29:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4127 ] 
14:29:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:02: Host Frequency set to 100000 KHz
14:29:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:02: ####CSD Registe 2.0 Values####
14:29:02: CSD_STRUCTURE                                 :0x1
14:29:02: Reserv1                                       :0x0
14:29:02: Time Access 1 TAAC                            :0xe
14:29:02: Time Access 2 NSAC*100                        :0x0
14:29:02: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:02: Card Command Classess CCC                     :0x5b5
14:29:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:02: DSR(driver stage register)  DSR_IMP           :0x0
14:29:02: Reserv2                                       :0x0
14:29:02: Device Size C_SIZE                            :0xedc8
14:29:02: Reserv3                                       :0x0
14:29:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:02: Reserv4                                       :0x0
14:29:02: Write Speed Factor R2W_FACTOR                 :0x2
14:29:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:02: FILE_FORMAT_GRP                               :0x0
14:29:02: COPY flag                                     :0x1
14:29:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:02: File_Format                                   :0x0
14:29:02: CRC                                           :0x0
14:29:02: ####CSD Registe Values####  

14:29:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431BD0>, <py_sfcl.CommandDataDefinition object at 0x06431AB0>) , Command count = 4128 ] 
14:29:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064145A0>, <py_sfcl.CommandDataDefinition object at 0x06431840>) , Command count = 4129 ] 
14:29:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F1E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E510>, <py_sfcl.PySEnhancedCmdData object at 0x0642ED50>, <None>, <py_sfcl.Command23 object at 0x06431180>) , Command count = 4130 ] 
14:29:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 9
14:29:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F4B0>, <py_sfcl.PySEnhancedCmdData object at 0x06414A50>, <None>, <py_sfcl.Command23 object at 0x06431450>) , Command count = 4131 ] 
14:29:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE8690>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06451630>, <py_sfcl.PySEnhancedCmdData object at 0x0645B4E0>, <None>, <py_sfcl.Command23 object at 0x0642E870>) , Command count = 4132 ] 
14:29:02: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:02: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:05: Host Frequency set to 25000 KHz
14:29:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB10>, 0x0, True) , Command count = 4133 ] 
14:29:05: [GO18_globalSetVolt]### Host voltage value is set.
14:29:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642ABD0>, 0x0, False) , Command count = 4134 ] 
14:29:05: [GO18_globalSetVolt]### Host voltage value is set.
14:29:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4135 ] 
14:29:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4136 ] 
14:29:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4137 ] 
14:29:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FFC0>, <py_sfcl.CommandDataDefinition object at 0x06451E40>) , Command count = 4138 ] 
14:29:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451840>, <py_sfcl.CommandDataDefinition object at 0x064315A0>) , Command count = 4139 ] 
14:29:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:05: [ SetCardRCA(0x1, 0xD555) , Command count = 4140 ] 
14:29:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:05: Host Frequency set to 25000 KHz
14:29:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:05: ####CSD Registe 2.0 Values####
14:29:05: CSD_STRUCTURE                                 :0x1
14:29:05: Reserv1                                       :0x0
14:29:05: Time Access 1 TAAC                            :0xe
14:29:05: Time Access 2 NSAC*100                        :0x0
14:29:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:05: Card Command Classess CCC                     :0x5b5
14:29:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:05: DSR(driver stage register)  DSR_IMP           :0x0
14:29:05: Reserv2                                       :0x0
14:29:05: Device Size C_SIZE                            :0xedc8
14:29:05: Reserv3                                       :0x0
14:29:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:05: Reserv4                                       :0x0
14:29:05: Write Speed Factor R2W_FACTOR                 :0x2
14:29:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:05: FILE_FORMAT_GRP                               :0x0
14:29:05: COPY flag                                     :0x1
14:29:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:05: File_Format                                   :0x0
14:29:05: CRC                                           :0x0
14:29:05: ####CSD Registe Values####  

14:29:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:05: [GetSCRRegisterEntry] Passed
14:29:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:05: Data_Status_After Erases          : 0
14:29:05: CPRM Security Support             : No Security
14:29:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:05: Spec. Version                     : Version 3.0X
14:29:05: Extended Security Support         : Extended_Security_Not_Supported
14:29:05: Command Support                   : COMMAND_SUPPORT
14:29:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451600>, <py_sfcl.CommandDataDefinition object at 0x0641FB70>) , Command count = 4141 ] 
14:29:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EC90>, <py_sfcl.CommandDataDefinition object at 0x064142A0>) , Command count = 4142 ] 
14:29:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:05: [ SetBusWidth(0x4) , Command count = 4143 ] 
14:29:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4144 ] 
14:29:05: Protected Area Size 0x28000
14:29:05: Bus Width           2
14:29:05: Secure Mode         0
14:29:05: Speed  Class        4
14:29:05: Perf Move           0
14:29:05: Au Size             9
14:29:05: Erase Size          15
14:29:05: Erase Timeout       1
14:29:05: Erase offset        1
14:29:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4145 ] 
14:29:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:05: Host Frequency set to 100000 KHz
14:29:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:05: ####CSD Registe 2.0 Values####
14:29:05: CSD_STRUCTURE                                 :0x1
14:29:05: Reserv1                                       :0x0
14:29:05: Time Access 1 TAAC                            :0xe
14:29:05: Time Access 2 NSAC*100                        :0x0
14:29:05: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:05: Card Command Classess CCC                     :0x5b5
14:29:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:05: DSR(driver stage register)  DSR_IMP           :0x0
14:29:05: Reserv2                                       :0x0
14:29:05: Device Size C_SIZE                            :0xedc8
14:29:05: Reserv3                                       :0x0
14:29:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:05: Reserv4                                       :0x0
14:29:05: Write Speed Factor R2W_FACTOR                 :0x2
14:29:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:05: FILE_FORMAT_GRP                               :0x0
14:29:05: COPY flag                                     :0x1
14:29:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:05: File_Format                                   :0x0
14:29:05: CRC                                           :0x0
14:29:05: ####CSD Registe Values####  

14:29:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467060>, <py_sfcl.CommandDataDefinition object at 0x06451BD0>) , Command count = 4146 ] 
14:29:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467450>, <py_sfcl.CommandDataDefinition object at 0x0641F480>) , Command count = 4147 ] 
14:29:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064671E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467210>, <py_sfcl.PySEnhancedCmdData object at 0x06467240>, <None>, <py_sfcl.Command23 object at 0x06414AE0>) , Command count = 4148 ] 
14:29:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 8
14:29:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064670C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064670F0>, <py_sfcl.PySEnhancedCmdData object at 0x06467120>, <None>, <py_sfcl.Command23 object at 0x0641FCF0>) , Command count = 4149 ] 
14:29:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05D7E2A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414C60>, <py_sfcl.PySEnhancedCmdData object at 0x0645B570>, <None>, <py_sfcl.Command23 object at 0x0641F180>) , Command count = 4150 ] 
14:29:05: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:05: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:07: Host Frequency set to 25000 KHz
14:29:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:07: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x064675A0>, 0x0, True) , Command count = 4151 ] 
14:29:07: [GO18_globalSetVolt]### Host voltage value is set.
14:29:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E4E0>, 0x0, False) , Command count = 4152 ] 
14:29:07: [GO18_globalSetVolt]### Host voltage value is set.
14:29:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4153 ] 
14:29:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4154 ] 
14:29:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:08: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4155 ] 
14:29:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467540>, <py_sfcl.CommandDataDefinition object at 0x064674E0>) , Command count = 4156 ] 
14:29:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467840>, <py_sfcl.CommandDataDefinition object at 0x0642E090>) , Command count = 4157 ] 
14:29:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:08: [ SetCardRCA(0x1, 0xD555) , Command count = 4158 ] 
14:29:08: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:08: Host Frequency set to 25000 KHz
14:29:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:08: ####CSD Registe 2.0 Values####
14:29:08: CSD_STRUCTURE                                 :0x1
14:29:08: Reserv1                                       :0x0
14:29:08: Time Access 1 TAAC                            :0xe
14:29:08: Time Access 2 NSAC*100                        :0x0
14:29:08: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:08: Card Command Classess CCC                     :0x5b5
14:29:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:08: DSR(driver stage register)  DSR_IMP           :0x0
14:29:08: Reserv2                                       :0x0
14:29:08: Device Size C_SIZE                            :0xedc8
14:29:08: Reserv3                                       :0x0
14:29:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:08: Reserv4                                       :0x0
14:29:08: Write Speed Factor R2W_FACTOR                 :0x2
14:29:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:08: FILE_FORMAT_GRP                               :0x0
14:29:08: COPY flag                                     :0x1
14:29:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:08: File_Format                                   :0x0
14:29:08: CRC                                           :0x0
14:29:08: ####CSD Registe Values####  

14:29:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:08: [GetSCRRegisterEntry] Passed
14:29:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:08: Data_Status_After Erases          : 0
14:29:08: CPRM Security Support             : No Security
14:29:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:08: Spec. Version                     : Version 3.0X
14:29:08: Extended Security Support         : Extended_Security_Not_Supported
14:29:08: Command Support                   : COMMAND_SUPPORT
14:29:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467660>, <py_sfcl.CommandDataDefinition object at 0x064313F0>) , Command count = 4159 ] 
14:29:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AFC0>, <py_sfcl.CommandDataDefinition object at 0x0641FF00>) , Command count = 4160 ] 
14:29:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:08: [ SetBusWidth(0x4) , Command count = 4161 ] 
14:29:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4162 ] 
14:29:08: Protected Area Size 0x28000
14:29:08: Bus Width           2
14:29:08: Secure Mode         0
14:29:08: Speed  Class        4
14:29:08: Perf Move           0
14:29:08: Au Size             9
14:29:08: Erase Size          15
14:29:08: Erase Timeout       1
14:29:08: Erase offset        1
14:29:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4163 ] 
14:29:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:08: Host Frequency set to 100000 KHz
14:29:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:08: ####CSD Registe 2.0 Values####
14:29:08: CSD_STRUCTURE                                 :0x1
14:29:08: Reserv1                                       :0x0
14:29:08: Time Access 1 TAAC                            :0xe
14:29:08: Time Access 2 NSAC*100                        :0x0
14:29:08: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:08: Card Command Classess CCC                     :0x5b5
14:29:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:08: DSR(driver stage register)  DSR_IMP           :0x0
14:29:08: Reserv2                                       :0x0
14:29:08: Device Size C_SIZE                            :0xedc8
14:29:08: Reserv3                                       :0x0
14:29:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:08: Reserv4                                       :0x0
14:29:08: Write Speed Factor R2W_FACTOR                 :0x2
14:29:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:08: FILE_FORMAT_GRP                               :0x0
14:29:08: COPY flag                                     :0x1
14:29:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:08: File_Format                                   :0x0
14:29:08: CRC                                           :0x0
14:29:08: ####CSD Registe Values####  

14:29:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467A50>, <py_sfcl.CommandDataDefinition object at 0x0641F030>) , Command count = 4164 ] 
14:29:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8C30>, <py_sfcl.CommandDataDefinition object at 0x0641FCC0>) , Command count = 4165 ] 
14:29:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467990>, <py_sfcl.PySEnhancedCmdData object at 0x064679C0>, <None>, <py_sfcl.Command23 object at 0x0641F210>) , Command count = 4166 ] 
14:29:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 7
14:29:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06467AE0>, <None>, <py_sfcl.Command23 object at 0x0641FC90>) , Command count = 4167 ] 
14:29:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414420>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641FAE0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B420>, <None>, <py_sfcl.Command23 object at 0x0641F2D0>) , Command count = 4168 ] 
14:29:08: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:10: Host Frequency set to 25000 KHz
14:29:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467E40>, 0x0, True) , Command count = 4169 ] 
14:29:10: [GO18_globalSetVolt]### Host voltage value is set.
14:29:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DA7FC0>, 0x0, False) , Command count = 4170 ] 
14:29:10: [GO18_globalSetVolt]### Host voltage value is set.
14:29:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4171 ] 
14:29:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4172 ] 
14:29:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4173 ] 
14:29:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467DE0>, <py_sfcl.CommandDataDefinition object at 0x06431DB0>) , Command count = 4174 ] 
14:29:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FC00>, <py_sfcl.CommandDataDefinition object at 0x0641F510>) , Command count = 4175 ] 
14:29:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:10: [ SetCardRCA(0x1, 0xD555) , Command count = 4176 ] 
14:29:10: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:11: Host Frequency set to 25000 KHz
14:29:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:11: ####CSD Registe 2.0 Values####
14:29:11: CSD_STRUCTURE                                 :0x1
14:29:11: Reserv1                                       :0x0
14:29:11: Time Access 1 TAAC                            :0xe
14:29:11: Time Access 2 NSAC*100                        :0x0
14:29:11: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:11: Card Command Classess CCC                     :0x5b5
14:29:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:11: DSR(driver stage register)  DSR_IMP           :0x0
14:29:11: Reserv2                                       :0x0
14:29:11: Device Size C_SIZE                            :0xedc8
14:29:11: Reserv3                                       :0x0
14:29:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:11: Reserv4                                       :0x0
14:29:11: Write Speed Factor R2W_FACTOR                 :0x2
14:29:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:11: FILE_FORMAT_GRP                               :0x0
14:29:11: COPY flag                                     :0x1
14:29:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:11: File_Format                                   :0x0
14:29:11: CRC                                           :0x0
14:29:11: ####CSD Registe Values####  

14:29:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:11: [GetSCRRegisterEntry] Passed
14:29:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:11: Data_Status_After Erases          : 0
14:29:11: CPRM Security Support             : No Security
14:29:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:11: Spec. Version                     : Version 3.0X
14:29:11: Extended Security Support         : Extended_Security_Not_Supported
14:29:11: Command Support                   : COMMAND_SUPPORT
14:29:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421030>, <py_sfcl.CommandDataDefinition object at 0x06467F00>) , Command count = 4177 ] 
14:29:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EA80>, <py_sfcl.CommandDataDefinition object at 0x06467ED0>) , Command count = 4178 ] 
14:29:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:11: [ SetBusWidth(0x4) , Command count = 4179 ] 
14:29:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4180 ] 
14:29:11: Protected Area Size 0x28000
14:29:11: Bus Width           2
14:29:11: Secure Mode         0
14:29:11: Speed  Class        4
14:29:11: Perf Move           0
14:29:11: Au Size             9
14:29:11: Erase Size          15
14:29:11: Erase Timeout       1
14:29:11: Erase offset        1
14:29:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4181 ] 
14:29:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:11: Host Frequency set to 100000 KHz
14:29:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:11: ####CSD Registe 2.0 Values####
14:29:11: CSD_STRUCTURE                                 :0x1
14:29:11: Reserv1                                       :0x0
14:29:11: Time Access 1 TAAC                            :0xe
14:29:11: Time Access 2 NSAC*100                        :0x0
14:29:11: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:11: Card Command Classess CCC                     :0x5b5
14:29:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:11: DSR(driver stage register)  DSR_IMP           :0x0
14:29:11: Reserv2                                       :0x0
14:29:11: Device Size C_SIZE                            :0xedc8
14:29:11: Reserv3                                       :0x0
14:29:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:11: Reserv4                                       :0x0
14:29:11: Write Speed Factor R2W_FACTOR                 :0x2
14:29:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:11: FILE_FORMAT_GRP                               :0x0
14:29:11: COPY flag                                     :0x1
14:29:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:11: File_Format                                   :0x0
14:29:11: CRC                                           :0x0
14:29:11: ####CSD Registe Values####  

14:29:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F330>, <py_sfcl.CommandDataDefinition object at 0x06467F90>) , Command count = 4182 ] 
14:29:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x01D7FDB0>, <py_sfcl.CommandDataDefinition object at 0x0641F0C0>) , Command count = 4183 ] 
14:29:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064212A0>, <py_sfcl.PySEnhancedCmdData object at 0x06467C00>, <None>, <py_sfcl.Command23 object at 0x0645B600>) , Command count = 4184 ] 
14:29:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 6
14:29:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421360>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421390>, <py_sfcl.PySEnhancedCmdData object at 0x064679F0>, <None>, <py_sfcl.Command23 object at 0x06467DB0>) , Command count = 4185 ] 
14:29:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064319C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B540>, <py_sfcl.PySEnhancedCmdData object at 0x0645B630>, <None>, <py_sfcl.Command23 object at 0x06467870>) , Command count = 4186 ] 
14:29:11: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:13: Host Frequency set to 25000 KHz
14:29:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421720>, 0x0, True) , Command count = 4187 ] 
14:29:13: [GO18_globalSetVolt]### Host voltage value is set.
14:29:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEFAE0>, 0x0, False) , Command count = 4188 ] 
14:29:13: [GO18_globalSetVolt]### Host voltage value is set.
14:29:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4189 ] 
14:29:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4190 ] 
14:29:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4191 ] 
14:29:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216C0>, <py_sfcl.CommandDataDefinition object at 0x06421660>) , Command count = 4192 ] 
14:29:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467480>, <py_sfcl.CommandDataDefinition object at 0x0641FD80>) , Command count = 4193 ] 
14:29:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:13: [ SetCardRCA(0x1, 0xD555) , Command count = 4194 ] 
14:29:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:13: Host Frequency set to 25000 KHz
14:29:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:13: ####CSD Registe 2.0 Values####
14:29:13: CSD_STRUCTURE                                 :0x1
14:29:13: Reserv1                                       :0x0
14:29:13: Time Access 1 TAAC                            :0xe
14:29:13: Time Access 2 NSAC*100                        :0x0
14:29:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:13: Card Command Classess CCC                     :0x5b5
14:29:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:13: DSR(driver stage register)  DSR_IMP           :0x0
14:29:13: Reserv2                                       :0x0
14:29:13: Device Size C_SIZE                            :0xedc8
14:29:13: Reserv3                                       :0x0
14:29:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:13: Reserv4                                       :0x0
14:29:13: Write Speed Factor R2W_FACTOR                 :0x2
14:29:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:13: FILE_FORMAT_GRP                               :0x0
14:29:13: COPY flag                                     :0x1
14:29:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:13: File_Format                                   :0x0
14:29:13: CRC                                           :0x0
14:29:13: ####CSD Registe Values####  

14:29:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:13: [GetSCRRegisterEntry] Passed
14:29:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:13: Data_Status_After Erases          : 0
14:29:13: CPRM Security Support             : No Security
14:29:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:13: Spec. Version                     : Version 3.0X
14:29:13: Extended Security Support         : Extended_Security_Not_Supported
14:29:13: Command Support                   : COMMAND_SUPPORT
14:29:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064219C0>, <py_sfcl.CommandDataDefinition object at 0x06467C60>) , Command count = 4195 ] 
14:29:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064311E0>, <py_sfcl.CommandDataDefinition object at 0x06467BA0>) , Command count = 4196 ] 
14:29:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:13: [ SetBusWidth(0x4) , Command count = 4197 ] 
14:29:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4198 ] 
14:29:13: Protected Area Size 0x28000
14:29:13: Bus Width           2
14:29:13: Secure Mode         0
14:29:13: Speed  Class        4
14:29:13: Perf Move           0
14:29:13: Au Size             9
14:29:13: Erase Size          15
14:29:13: Erase Timeout       1
14:29:13: Erase offset        1
14:29:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4199 ] 
14:29:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:13: Host Frequency set to 100000 KHz
14:29:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:13: ####CSD Registe 2.0 Values####
14:29:13: CSD_STRUCTURE                                 :0x1
14:29:13: Reserv1                                       :0x0
14:29:13: Time Access 1 TAAC                            :0xe
14:29:13: Time Access 2 NSAC*100                        :0x0
14:29:13: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:13: Card Command Classess CCC                     :0x5b5
14:29:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:13: DSR(driver stage register)  DSR_IMP           :0x0
14:29:13: Reserv2                                       :0x0
14:29:13: Device Size C_SIZE                            :0xedc8
14:29:13: Reserv3                                       :0x0
14:29:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:13: Reserv4                                       :0x0
14:29:13: Write Speed Factor R2W_FACTOR                 :0x2
14:29:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:13: FILE_FORMAT_GRP                               :0x0
14:29:13: COPY flag                                     :0x1
14:29:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:13: File_Format                                   :0x0
14:29:13: CRC                                           :0x0
14:29:13: ####CSD Registe Values####  

14:29:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064217E0>, <py_sfcl.CommandDataDefinition object at 0x064216F0>) , Command count = 4200 ] 
14:29:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFA80>, <py_sfcl.CommandDataDefinition object at 0x06467E70>) , Command count = 4201 ] 
14:29:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421B10>, <py_sfcl.PySEnhancedCmdData object at 0x06421B40>, <None>, <py_sfcl.Command23 object at 0x064676C0>) , Command count = 4202 ] 
14:29:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 5
14:29:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421C30>, <py_sfcl.PySEnhancedCmdData object at 0x06421C60>, <None>, <py_sfcl.Command23 object at 0x06467420>) , Command count = 4203 ] 
14:29:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEFAB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B720>, <py_sfcl.PySEnhancedCmdData object at 0x0645B540>, <None>, <py_sfcl.Command23 object at 0x06467BD0>) , Command count = 4204 ] 
14:29:13: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:16: Host Frequency set to 25000 KHz
14:29:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:16: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421FC0>, 0x0, True) , Command count = 4205 ] 
14:29:16: [GO18_globalSetVolt]### Host voltage value is set.
14:29:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641F150>, 0x0, False) , Command count = 4206 ] 
14:29:16: [GO18_globalSetVolt]### Host voltage value is set.
14:29:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4207 ] 
14:29:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4208 ] 
14:29:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4209 ] 
14:29:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A060>, <py_sfcl.CommandDataDefinition object at 0x06421F60>) , Command count = 4210 ] 
14:29:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A030>, <py_sfcl.CommandDataDefinition object at 0x06467FC0>) , Command count = 4211 ] 
14:29:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:16: [ SetCardRCA(0x1, 0xD555) , Command count = 4212 ] 
14:29:16: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:16: Host Frequency set to 25000 KHz
14:29:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:16: ####CSD Registe 2.0 Values####
14:29:16: CSD_STRUCTURE                                 :0x1
14:29:16: Reserv1                                       :0x0
14:29:16: Time Access 1 TAAC                            :0xe
14:29:16: Time Access 2 NSAC*100                        :0x0
14:29:16: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:16: Card Command Classess CCC                     :0x5b5
14:29:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:16: DSR(driver stage register)  DSR_IMP           :0x0
14:29:16: Reserv2                                       :0x0
14:29:16: Device Size C_SIZE                            :0xedc8
14:29:16: Reserv3                                       :0x0
14:29:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:16: Reserv4                                       :0x0
14:29:16: Write Speed Factor R2W_FACTOR                 :0x2
14:29:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:16: FILE_FORMAT_GRP                               :0x0
14:29:16: COPY flag                                     :0x1
14:29:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:16: File_Format                                   :0x0
14:29:16: CRC                                           :0x0
14:29:16: ####CSD Registe Values####  

14:29:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:16: [GetSCRRegisterEntry] Passed
14:29:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:16: Data_Status_After Erases          : 0
14:29:16: CPRM Security Support             : No Security
14:29:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:16: Spec. Version                     : Version 3.0X
14:29:16: Extended Security Support         : Extended_Security_Not_Supported
14:29:16: Command Support                   : COMMAND_SUPPORT
14:29:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A2A0>, <py_sfcl.CommandDataDefinition object at 0x0642A0C0>) , Command count = 4213 ] 
14:29:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1300>, <py_sfcl.CommandDataDefinition object at 0x064674B0>) , Command count = 4214 ] 
14:29:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:16: [ SetBusWidth(0x4) , Command count = 4215 ] 
14:29:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BA80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4216 ] 
14:29:16: Protected Area Size 0x28000
14:29:16: Bus Width           2
14:29:16: Secure Mode         0
14:29:16: Speed  Class        4
14:29:16: Perf Move           0
14:29:16: Au Size             9
14:29:16: Erase Size          15
14:29:16: Erase Timeout       1
14:29:16: Erase offset        1
14:29:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4217 ] 
14:29:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:16: Host Frequency set to 100000 KHz
14:29:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:16: ####CSD Registe 2.0 Values####
14:29:16: CSD_STRUCTURE                                 :0x1
14:29:16: Reserv1                                       :0x0
14:29:16: Time Access 1 TAAC                            :0xe
14:29:16: Time Access 2 NSAC*100                        :0x0
14:29:16: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:16: Card Command Classess CCC                     :0x5b5
14:29:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:16: DSR(driver stage register)  DSR_IMP           :0x0
14:29:16: Reserv2                                       :0x0
14:29:16: Device Size C_SIZE                            :0xedc8
14:29:16: Reserv3                                       :0x0
14:29:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:16: Reserv4                                       :0x0
14:29:16: Write Speed Factor R2W_FACTOR                 :0x2
14:29:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:16: FILE_FORMAT_GRP                               :0x0
14:29:16: COPY flag                                     :0x1
14:29:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:16: File_Format                                   :0x0
14:29:16: CRC                                           :0x0
14:29:16: ####CSD Registe Values####  

14:29:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A090>, <py_sfcl.CommandDataDefinition object at 0x06421F00>) , Command count = 4218 ] 
14:29:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414750>, <py_sfcl.CommandDataDefinition object at 0x06421F30>) , Command count = 4219 ] 
14:29:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421D80>, <py_sfcl.PySEnhancedCmdData object at 0x06421BA0>, <None>, <py_sfcl.Command23 object at 0x064675D0>) , Command count = 4220 ] 
14:29:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 4
14:29:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A510>, <py_sfcl.PySEnhancedCmdData object at 0x0642A540>, <None>, <py_sfcl.Command23 object at 0x06421D50>) , Command count = 4221 ] 
14:29:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467630>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B2D0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B150>, <None>, <py_sfcl.Command23 object at 0x06421330>) , Command count = 4222 ] 
14:29:16: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:18: Host Frequency set to 25000 KHz
14:29:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:18: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A8A0>, 0x0, True) , Command count = 4223 ] 
14:29:18: [GO18_globalSetVolt]### Host voltage value is set.
14:29:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x063FFD50>, 0x0, False) , Command count = 4224 ] 
14:29:18: [GO18_globalSetVolt]### Host voltage value is set.
14:29:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4225 ] 
14:29:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4226 ] 
14:29:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4227 ] 
14:29:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A840>, <py_sfcl.CommandDataDefinition object at 0x05DEF7B0>) , Command count = 4228 ] 
14:29:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421750>, <py_sfcl.CommandDataDefinition object at 0x06421D20>) , Command count = 4229 ] 
14:29:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:19: [ SetCardRCA(0x1, 0xD555) , Command count = 4230 ] 
14:29:19: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:19: Host Frequency set to 25000 KHz
14:29:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:19: ####CSD Registe 2.0 Values####
14:29:19: CSD_STRUCTURE                                 :0x1
14:29:19: Reserv1                                       :0x0
14:29:19: Time Access 1 TAAC                            :0xe
14:29:19: Time Access 2 NSAC*100                        :0x0
14:29:19: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:19: Card Command Classess CCC                     :0x5b5
14:29:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:19: DSR(driver stage register)  DSR_IMP           :0x0
14:29:19: Reserv2                                       :0x0
14:29:19: Device Size C_SIZE                            :0xedc8
14:29:19: Reserv3                                       :0x0
14:29:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:19: Reserv4                                       :0x0
14:29:19: Write Speed Factor R2W_FACTOR                 :0x2
14:29:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:19: FILE_FORMAT_GRP                               :0x0
14:29:19: COPY flag                                     :0x1
14:29:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:19: File_Format                                   :0x0
14:29:19: CRC                                           :0x0
14:29:19: ####CSD Registe Values####  

14:29:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:19: [GetSCRRegisterEntry] Passed
14:29:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:19: Data_Status_After Erases          : 0
14:29:19: CPRM Security Support             : No Security
14:29:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:19: Spec. Version                     : Version 3.0X
14:29:19: Extended Security Support         : Extended_Security_Not_Supported
14:29:19: Command Support                   : COMMAND_SUPPORT
14:29:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AB40>, <py_sfcl.CommandDataDefinition object at 0x06421840>) , Command count = 4231 ] 
14:29:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431E70>, <py_sfcl.CommandDataDefinition object at 0x06421E40>) , Command count = 4232 ] 
14:29:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:19: [ SetBusWidth(0x4) , Command count = 4233 ] 
14:29:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06421DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4234 ] 
14:29:19: Protected Area Size 0x28000
14:29:19: Bus Width           2
14:29:19: Secure Mode         0
14:29:19: Speed  Class        4
14:29:19: Perf Move           0
14:29:19: Au Size             9
14:29:19: Erase Size          15
14:29:19: Erase Timeout       1
14:29:19: Erase offset        1
14:29:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4235 ] 
14:29:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:19: Host Frequency set to 100000 KHz
14:29:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:19: ####CSD Registe 2.0 Values####
14:29:19: CSD_STRUCTURE                                 :0x1
14:29:19: Reserv1                                       :0x0
14:29:19: Time Access 1 TAAC                            :0xe
14:29:19: Time Access 2 NSAC*100                        :0x0
14:29:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:19: Card Command Classess CCC                     :0x5b5
14:29:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:19: DSR(driver stage register)  DSR_IMP           :0x0
14:29:19: Reserv2                                       :0x0
14:29:19: Device Size C_SIZE                            :0xedc8
14:29:19: Reserv3                                       :0x0
14:29:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:19: Reserv4                                       :0x0
14:29:19: Write Speed Factor R2W_FACTOR                 :0x2
14:29:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:19: FILE_FORMAT_GRP                               :0x0
14:29:19: COPY flag                                     :0x1
14:29:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:19: File_Format                                   :0x0
14:29:19: CRC                                           :0x0
14:29:19: ####CSD Registe Values####  

14:29:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AA20>, <py_sfcl.CommandDataDefinition object at 0x0642A870>) , Command count = 4236 ] 
14:29:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F300>, <py_sfcl.CommandDataDefinition object at 0x06421540>) , Command count = 4237 ] 
14:29:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AC60>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC90>, <py_sfcl.PySEnhancedCmdData object at 0x0642A930>, <None>, <py_sfcl.Command23 object at 0x064217B0>) , Command count = 4238 ] 
14:29:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 3
14:29:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642ADB0>, <py_sfcl.PySEnhancedCmdData object at 0x0642ADE0>, <None>, <py_sfcl.Command23 object at 0x064213C0>) , Command count = 4239 ] 
14:29:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641FC60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BCC0>, <py_sfcl.PySEnhancedCmdData object at 0x0645BE40>, <None>, <py_sfcl.Command23 object at 0x06421A80>) , Command count = 4240 ] 
14:29:19: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:21: Host Frequency set to 25000 KHz
14:29:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E030>, 0x0, True) , Command count = 4241 ] 
14:29:21: [GO18_globalSetVolt]### Host voltage value is set.
14:29:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451FC0>, 0x0, False) , Command count = 4242 ] 
14:29:21: [GO18_globalSetVolt]### Host voltage value is set.
14:29:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4243 ] 
14:29:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4244 ] 
14:29:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4245 ] 
14:29:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E150>, <py_sfcl.CommandDataDefinition object at 0x0642E0F0>) , Command count = 4246 ] 
14:29:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421780>, <py_sfcl.CommandDataDefinition object at 0x064213F0>) , Command count = 4247 ] 
14:29:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:21: [ SetCardRCA(0x1, 0xD555) , Command count = 4248 ] 
14:29:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:22: Host Frequency set to 25000 KHz
14:29:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:22: ####CSD Registe 2.0 Values####
14:29:22: CSD_STRUCTURE                                 :0x1
14:29:22: Reserv1                                       :0x0
14:29:22: Time Access 1 TAAC                            :0xe
14:29:22: Time Access 2 NSAC*100                        :0x0
14:29:22: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:22: Card Command Classess CCC                     :0x5b5
14:29:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:22: DSR(driver stage register)  DSR_IMP           :0x0
14:29:22: Reserv2                                       :0x0
14:29:22: Device Size C_SIZE                            :0xedc8
14:29:22: Reserv3                                       :0x0
14:29:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:22: Reserv4                                       :0x0
14:29:22: Write Speed Factor R2W_FACTOR                 :0x2
14:29:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:22: FILE_FORMAT_GRP                               :0x0
14:29:22: COPY flag                                     :0x1
14:29:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:22: File_Format                                   :0x0
14:29:22: CRC                                           :0x0
14:29:22: ####CSD Registe Values####  

14:29:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:22: [GetSCRRegisterEntry] Passed
14:29:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:22: Data_Status_After Erases          : 0
14:29:22: CPRM Security Support             : No Security
14:29:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:22: Spec. Version                     : Version 3.0X
14:29:22: Extended Security Support         : Extended_Security_Not_Supported
14:29:22: Command Support                   : COMMAND_SUPPORT
14:29:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A630>, <py_sfcl.CommandDataDefinition object at 0x0642E420>) , Command count = 4249 ] 
14:29:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414AB0>, <py_sfcl.CommandDataDefinition object at 0x064214B0>) , Command count = 4250 ] 
14:29:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:22: [ SetBusWidth(0x4) , Command count = 4251 ] 
14:29:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4252 ] 
14:29:22: Protected Area Size 0x28000
14:29:22: Bus Width           2
14:29:22: Secure Mode         0
14:29:22: Speed  Class        4
14:29:22: Perf Move           0
14:29:22: Au Size             9
14:29:22: Erase Size          15
14:29:22: Erase Timeout       1
14:29:22: Erase offset        1
14:29:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4253 ] 
14:29:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:22: Host Frequency set to 100000 KHz
14:29:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:22: ####CSD Registe 2.0 Values####
14:29:22: CSD_STRUCTURE                                 :0x1
14:29:22: Reserv1                                       :0x0
14:29:22: Time Access 1 TAAC                            :0xe
14:29:22: Time Access 2 NSAC*100                        :0x0
14:29:22: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:22: Card Command Classess CCC                     :0x5b5
14:29:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:22: DSR(driver stage register)  DSR_IMP           :0x0
14:29:22: Reserv2                                       :0x0
14:29:22: Device Size C_SIZE                            :0xedc8
14:29:22: Reserv3                                       :0x0
14:29:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:22: Reserv4                                       :0x0
14:29:22: Write Speed Factor R2W_FACTOR                 :0x2
14:29:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:22: FILE_FORMAT_GRP                               :0x0
14:29:22: COPY flag                                     :0x1
14:29:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:22: File_Format                                   :0x0
14:29:22: CRC                                           :0x0
14:29:22: ####CSD Registe Values####  

14:29:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E330>, <py_sfcl.CommandDataDefinition object at 0x0642E240>) , Command count = 4254 ] 
14:29:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064211E0>, <py_sfcl.CommandDataDefinition object at 0x06421510>) , Command count = 4255 ] 
14:29:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E180>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064214E0>, <py_sfcl.PySEnhancedCmdData object at 0x0641F450>, <None>, <py_sfcl.Command23 object at 0x0642AD20>) , Command count = 4256 ] 
14:29:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 2
14:29:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AB70>, <py_sfcl.PySEnhancedCmdData object at 0x0642AED0>, <None>, <py_sfcl.Command23 object at 0x0642AF00>) , Command count = 4257 ] 
14:29:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFEA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642ACC0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B360>, <None>, <py_sfcl.Command23 object at 0x0642AE10>) , Command count = 4258 ] 
14:29:22: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:24: Host Frequency set to 25000 KHz
14:29:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:24: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EA20>, 0x0, True) , Command count = 4259 ] 
14:29:24: [GO18_globalSetVolt]### Host voltage value is set.
14:29:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x064678A0>, 0x0, False) , Command count = 4260 ] 
14:29:24: [GO18_globalSetVolt]### Host voltage value is set.
14:29:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4261 ] 
14:29:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4262 ] 
14:29:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4263 ] 
14:29:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E9C0>, <py_sfcl.CommandDataDefinition object at 0x0642E210>) , Command count = 4264 ] 
14:29:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AF60>, <py_sfcl.CommandDataDefinition object at 0x0642AEA0>) , Command count = 4265 ] 
14:29:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:24: [ SetCardRCA(0x1, 0xD555) , Command count = 4266 ] 
14:29:24: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:24: Host Frequency set to 25000 KHz
14:29:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:24: ####CSD Registe 2.0 Values####
14:29:24: CSD_STRUCTURE                                 :0x1
14:29:24: Reserv1                                       :0x0
14:29:24: Time Access 1 TAAC                            :0xe
14:29:24: Time Access 2 NSAC*100                        :0x0
14:29:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:24: Card Command Classess CCC                     :0x5b5
14:29:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:24: DSR(driver stage register)  DSR_IMP           :0x0
14:29:24: Reserv2                                       :0x0
14:29:24: Device Size C_SIZE                            :0xedc8
14:29:24: Reserv3                                       :0x0
14:29:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:24: Reserv4                                       :0x0
14:29:24: Write Speed Factor R2W_FACTOR                 :0x2
14:29:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:24: FILE_FORMAT_GRP                               :0x0
14:29:24: COPY flag                                     :0x1
14:29:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:24: File_Format                                   :0x0
14:29:24: CRC                                           :0x0
14:29:24: ####CSD Registe Values####  

14:29:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:24: [GetSCRRegisterEntry] Passed
14:29:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:24: Data_Status_After Erases          : 0
14:29:24: CPRM Security Support             : No Security
14:29:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:24: Spec. Version                     : Version 3.0X
14:29:24: Extended Security Support         : Extended_Security_Not_Supported
14:29:24: Command Support                   : COMMAND_SUPPORT
14:29:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ECC0>, <py_sfcl.CommandDataDefinition object at 0x0642A8D0>) , Command count = 4267 ] 
14:29:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414D80>, <py_sfcl.CommandDataDefinition object at 0x0642AA50>) , Command count = 4268 ] 
14:29:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:24: [ SetBusWidth(0x4) , Command count = 4269 ] 
14:29:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B8D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4270 ] 
14:29:24: Protected Area Size 0x28000
14:29:24: Bus Width           2
14:29:24: Secure Mode         0
14:29:24: Speed  Class        4
14:29:24: Perf Move           0
14:29:24: Au Size             9
14:29:24: Erase Size          15
14:29:24: Erase Timeout       1
14:29:24: Erase offset        1
14:29:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4271 ] 
14:29:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:24: Host Frequency set to 100000 KHz
14:29:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:24: ####CSD Registe 2.0 Values####
14:29:24: CSD_STRUCTURE                                 :0x1
14:29:24: Reserv1                                       :0x0
14:29:24: Time Access 1 TAAC                            :0xe
14:29:24: Time Access 2 NSAC*100                        :0x0
14:29:24: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:24: Card Command Classess CCC                     :0x5b5
14:29:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:24: DSR(driver stage register)  DSR_IMP           :0x0
14:29:24: Reserv2                                       :0x0
14:29:24: Device Size C_SIZE                            :0xedc8
14:29:24: Reserv3                                       :0x0
14:29:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:24: Reserv4                                       :0x0
14:29:24: Write Speed Factor R2W_FACTOR                 :0x2
14:29:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:24: FILE_FORMAT_GRP                               :0x0
14:29:24: COPY flag                                     :0x1
14:29:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:24: File_Format                                   :0x0
14:29:24: CRC                                           :0x0
14:29:24: ####CSD Registe Values####  

14:29:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EED0>, <py_sfcl.CommandDataDefinition object at 0x0642EBA0>) , Command count = 4272 ] 
14:29:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064672A0>, <py_sfcl.CommandDataDefinition object at 0x06421300>) , Command count = 4273 ] 
14:29:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642ECF0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EB10>, <py_sfcl.PySEnhancedCmdData object at 0x0642A660>, <None>, <py_sfcl.Command23 object at 0x0642A1E0>) , Command count = 4274 ] 
14:29:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 1
14:29:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064310F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642EF30>, <None>, <py_sfcl.Command23 object at 0x0642A1B0>) , Command count = 4275 ] 
14:29:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:24: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467C30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A180>, <py_sfcl.PySEnhancedCmdData object at 0x0645B510>, <None>, <py_sfcl.Command23 object at 0x0642A690>) , Command count = 4276 ] 
14:29:25: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:25: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:27: Host Frequency set to 25000 KHz
14:29:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431300>, 0x0, True) , Command count = 4277 ] 
14:29:27: [GO18_globalSetVolt]### Host voltage value is set.
14:29:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467B10>, 0x0, False) , Command count = 4278 ] 
14:29:27: [GO18_globalSetVolt]### Host voltage value is set.
14:29:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4279 ] 
14:29:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4280 ] 
14:29:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4281 ] 
14:29:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312A0>, <py_sfcl.CommandDataDefinition object at 0x06431270>) , Command count = 4282 ] 
14:29:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E960>, <py_sfcl.CommandDataDefinition object at 0x0642A720>) , Command count = 4283 ] 
14:29:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:27: [ SetCardRCA(0x1, 0xD555) , Command count = 4284 ] 
14:29:27: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:27: Host Frequency set to 25000 KHz
14:29:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:27: ####CSD Registe 2.0 Values####
14:29:27: CSD_STRUCTURE                                 :0x1
14:29:27: Reserv1                                       :0x0
14:29:27: Time Access 1 TAAC                            :0xe
14:29:27: Time Access 2 NSAC*100                        :0x0
14:29:27: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:27: Card Command Classess CCC                     :0x5b5
14:29:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:27: DSR(driver stage register)  DSR_IMP           :0x0
14:29:27: Reserv2                                       :0x0
14:29:27: Device Size C_SIZE                            :0xedc8
14:29:27: Reserv3                                       :0x0
14:29:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:27: Reserv4                                       :0x0
14:29:27: Write Speed Factor R2W_FACTOR                 :0x2
14:29:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:27: FILE_FORMAT_GRP                               :0x0
14:29:27: COPY flag                                     :0x1
14:29:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:27: File_Format                                   :0x0
14:29:27: CRC                                           :0x0
14:29:27: ####CSD Registe Values####  

14:29:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:27: [GetSCRRegisterEntry] Passed
14:29:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:27: Data_Status_After Erases          : 0
14:29:27: CPRM Security Support             : No Security
14:29:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:27: Spec. Version                     : Version 3.0X
14:29:27: Extended Security Support         : Extended_Security_Not_Supported
14:29:27: Command Support                   : COMMAND_SUPPORT
14:29:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431570>, <py_sfcl.CommandDataDefinition object at 0x0642A420>) , Command count = 4285 ] 
14:29:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F390>, <py_sfcl.CommandDataDefinition object at 0x0642E2D0>) , Command count = 4286 ] 
14:29:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:27: [ SetBusWidth(0x4) , Command count = 4287 ] 
14:29:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B6C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4288 ] 
14:29:27: Protected Area Size 0x28000
14:29:27: Bus Width           2
14:29:27: Secure Mode         0
14:29:27: Speed  Class        4
14:29:27: Perf Move           0
14:29:27: Au Size             9
14:29:27: Erase Size          15
14:29:27: Erase Timeout       1
14:29:27: Erase offset        1
14:29:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4289 ] 
14:29:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:27: Host Frequency set to 100000 KHz
14:29:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:27: ####CSD Registe 2.0 Values####
14:29:27: CSD_STRUCTURE                                 :0x1
14:29:27: Reserv1                                       :0x0
14:29:27: Time Access 1 TAAC                            :0xe
14:29:27: Time Access 2 NSAC*100                        :0x0
14:29:27: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:27: Card Command Classess CCC                     :0x5b5
14:29:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:27: DSR(driver stage register)  DSR_IMP           :0x0
14:29:27: Reserv2                                       :0x0
14:29:27: Device Size C_SIZE                            :0xedc8
14:29:27: Reserv3                                       :0x0
14:29:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:27: Reserv4                                       :0x0
14:29:27: Write Speed Factor R2W_FACTOR                 :0x2
14:29:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:27: FILE_FORMAT_GRP                               :0x0
14:29:27: COPY flag                                     :0x1
14:29:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:27: File_Format                                   :0x0
14:29:27: CRC                                           :0x0
14:29:27: ####CSD Registe Values####  

14:29:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7BD0>, <py_sfcl.CommandDataDefinition object at 0x05D7E1E0>) , Command count = 4290 ] 
14:29:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467B40>, <py_sfcl.CommandDataDefinition object at 0x0642EE10>) , Command count = 4291 ] 
14:29:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E8D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431360>, <py_sfcl.PySEnhancedCmdData object at 0x0642A450>, <None>, <py_sfcl.Command23 object at 0x0642AC00>) , Command count = 4292 ] 
14:29:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Outer loop Count 1016
14:29:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 29
14:29:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7C30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E750>, <py_sfcl.PySEnhancedCmdData object at 0x0642EAB0>, <None>, <py_sfcl.Command23 object at 0x0642A7B0>) , Command count = 4293 ] 
14:29:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064676F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A600>, <py_sfcl.PySEnhancedCmdData object at 0x0645BE10>, <None>, <py_sfcl.Command23 object at 0x0642A750>) , Command count = 4294 ] 
14:29:27: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:29: Host Frequency set to 25000 KHz
14:29:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAD180>, 0x0, True) , Command count = 4295 ] 
14:29:29: [GO18_globalSetVolt]### Host voltage value is set.
14:29:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x064678D0>, 0x0, False) , Command count = 4296 ] 
14:29:29: [GO18_globalSetVolt]### Host voltage value is set.
14:29:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4297 ] 
14:29:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4298 ] 
14:29:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4299 ] 
14:29:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F90>, <py_sfcl.CommandDataDefinition object at 0x05DA7960>) , Command count = 4300 ] 
14:29:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DADCC0>, <py_sfcl.CommandDataDefinition object at 0x0642AE40>) , Command count = 4301 ] 
14:29:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:30: [ SetCardRCA(0x1, 0xD555) , Command count = 4302 ] 
14:29:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:30: Host Frequency set to 25000 KHz
14:29:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:30: ####CSD Registe 2.0 Values####
14:29:30: CSD_STRUCTURE                                 :0x1
14:29:30: Reserv1                                       :0x0
14:29:30: Time Access 1 TAAC                            :0xe
14:29:30: Time Access 2 NSAC*100                        :0x0
14:29:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:30: Card Command Classess CCC                     :0x5b5
14:29:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:30: DSR(driver stage register)  DSR_IMP           :0x0
14:29:30: Reserv2                                       :0x0
14:29:30: Device Size C_SIZE                            :0xedc8
14:29:30: Reserv3                                       :0x0
14:29:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:30: Reserv4                                       :0x0
14:29:30: Write Speed Factor R2W_FACTOR                 :0x2
14:29:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:30: FILE_FORMAT_GRP                               :0x0
14:29:30: COPY flag                                     :0x1
14:29:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:30: File_Format                                   :0x0
14:29:30: CRC                                           :0x0
14:29:30: ####CSD Registe Values####  

14:29:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:30: [GetSCRRegisterEntry] Passed
14:29:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:30: Data_Status_After Erases          : 0
14:29:30: CPRM Security Support             : No Security
14:29:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:30: Spec. Version                     : Version 3.0X
14:29:30: Extended Security Support         : Extended_Security_Not_Supported
14:29:30: Command Support                   : COMMAND_SUPPORT
14:29:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8A80>, <py_sfcl.CommandDataDefinition object at 0x06431A80>) , Command count = 4303 ] 
14:29:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FDB0>, <py_sfcl.CommandDataDefinition object at 0x0642A9C0>) , Command count = 4304 ] 
14:29:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:30: [ SetBusWidth(0x4) , Command count = 4305 ] 
14:29:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4306 ] 
14:29:30: Protected Area Size 0x28000
14:29:30: Bus Width           2
14:29:30: Secure Mode         0
14:29:30: Speed  Class        4
14:29:30: Perf Move           0
14:29:30: Au Size             9
14:29:30: Erase Size          15
14:29:30: Erase Timeout       1
14:29:30: Erase offset        1
14:29:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4307 ] 
14:29:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:30: Host Frequency set to 100000 KHz
14:29:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:30: ####CSD Registe 2.0 Values####
14:29:30: CSD_STRUCTURE                                 :0x1
14:29:30: Reserv1                                       :0x0
14:29:30: Time Access 1 TAAC                            :0xe
14:29:30: Time Access 2 NSAC*100                        :0x0
14:29:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:30: Card Command Classess CCC                     :0x5b5
14:29:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:30: DSR(driver stage register)  DSR_IMP           :0x0
14:29:30: Reserv2                                       :0x0
14:29:30: Device Size C_SIZE                            :0xedc8
14:29:30: Reserv3                                       :0x0
14:29:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:30: Reserv4                                       :0x0
14:29:30: Write Speed Factor R2W_FACTOR                 :0x2
14:29:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:30: FILE_FORMAT_GRP                               :0x0
14:29:30: COPY flag                                     :0x1
14:29:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:30: File_Format                                   :0x0
14:29:30: CRC                                           :0x0
14:29:30: ####CSD Registe Values####  

14:29:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D91180>, <py_sfcl.CommandDataDefinition object at 0x05D91210>) , Command count = 4308 ] 
14:29:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F060>, <py_sfcl.CommandDataDefinition object at 0x06431390>) , Command count = 4309 ] 
14:29:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF7E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431660>, <py_sfcl.PySEnhancedCmdData object at 0x0642E6F0>, <None>, <py_sfcl.Command23 object at 0x0642E060>) , Command count = 4310 ] 
14:29:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 28
14:29:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEF810>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431B40>, <py_sfcl.PySEnhancedCmdData object at 0x06431B70>, <None>, <py_sfcl.Command23 object at 0x0642E2A0>) , Command count = 4311 ] 
14:29:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467D50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B990>, <py_sfcl.PySEnhancedCmdData object at 0x0645BBA0>, <None>, <py_sfcl.Command23 object at 0x0642E450>) , Command count = 4312 ] 
14:29:30: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:32: Host Frequency set to 25000 KHz
14:29:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:32: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEF960>, 0x0, True) , Command count = 4313 ] 
14:29:32: [GO18_globalSetVolt]### Host voltage value is set.
14:29:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x064211B0>, 0x0, False) , Command count = 4314 ] 
14:29:32: [GO18_globalSetVolt]### Host voltage value is set.
14:29:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4315 ] 
14:29:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4316 ] 
14:29:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4317 ] 
14:29:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB10>, <py_sfcl.CommandDataDefinition object at 0x05DA7C60>) , Command count = 4318 ] 
14:29:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D7EAE0>, <py_sfcl.CommandDataDefinition object at 0x0642E630>) , Command count = 4319 ] 
14:29:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:32: [ SetCardRCA(0x1, 0xD555) , Command count = 4320 ] 
14:29:32: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:33: Host Frequency set to 25000 KHz
14:29:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:33: ####CSD Registe 2.0 Values####
14:29:33: CSD_STRUCTURE                                 :0x1
14:29:33: Reserv1                                       :0x0
14:29:33: Time Access 1 TAAC                            :0xe
14:29:33: Time Access 2 NSAC*100                        :0x0
14:29:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:33: Card Command Classess CCC                     :0x5b5
14:29:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:33: DSR(driver stage register)  DSR_IMP           :0x0
14:29:33: Reserv2                                       :0x0
14:29:33: Device Size C_SIZE                            :0xedc8
14:29:33: Reserv3                                       :0x0
14:29:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:33: Reserv4                                       :0x0
14:29:33: Write Speed Factor R2W_FACTOR                 :0x2
14:29:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:33: FILE_FORMAT_GRP                               :0x0
14:29:33: COPY flag                                     :0x1
14:29:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:33: File_Format                                   :0x0
14:29:33: CRC                                           :0x0
14:29:33: ####CSD Registe Values####  

14:29:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:33: [GetSCRRegisterEntry] Passed
14:29:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:33: Data_Status_After Erases          : 0
14:29:33: CPRM Security Support             : No Security
14:29:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:33: Spec. Version                     : Version 3.0X
14:29:33: Extended Security Support         : Extended_Security_Not_Supported
14:29:33: Command Support                   : COMMAND_SUPPORT
14:29:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB40>, <py_sfcl.CommandDataDefinition object at 0x06431FC0>) , Command count = 4321 ] 
14:29:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064677E0>, <py_sfcl.CommandDataDefinition object at 0x0642EEA0>) , Command count = 4322 ] 
14:29:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:33: [ SetBusWidth(0x4) , Command count = 4323 ] 
14:29:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4324 ] 
14:29:33: Protected Area Size 0x28000
14:29:33: Bus Width           2
14:29:33: Secure Mode         0
14:29:33: Speed  Class        4
14:29:33: Perf Move           0
14:29:33: Au Size             9
14:29:33: Erase Size          15
14:29:33: Erase Timeout       1
14:29:33: Erase offset        1
14:29:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4325 ] 
14:29:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:33: Host Frequency set to 100000 KHz
14:29:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:33: ####CSD Registe 2.0 Values####
14:29:33: CSD_STRUCTURE                                 :0x1
14:29:33: Reserv1                                       :0x0
14:29:33: Time Access 1 TAAC                            :0xe
14:29:33: Time Access 2 NSAC*100                        :0x0
14:29:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:33: Card Command Classess CCC                     :0x5b5
14:29:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:33: DSR(driver stage register)  DSR_IMP           :0x0
14:29:33: Reserv2                                       :0x0
14:29:33: Device Size C_SIZE                            :0xedc8
14:29:33: Reserv3                                       :0x0
14:29:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:33: Reserv4                                       :0x0
14:29:33: Write Speed Factor R2W_FACTOR                 :0x2
14:29:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:33: FILE_FORMAT_GRP                               :0x0
14:29:33: COPY flag                                     :0x1
14:29:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:33: File_Format                                   :0x0
14:29:33: CRC                                           :0x0
14:29:33: ####CSD Registe Values####  

14:29:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E14B0>, <py_sfcl.CommandDataDefinition object at 0x05DEFE10>) , Command count = 4326 ] 
14:29:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421180>, <py_sfcl.CommandDataDefinition object at 0x0642EBD0>) , Command count = 4327 ] 
14:29:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431E40>, <py_sfcl.PySEnhancedCmdData object at 0x06431750>, <None>, <py_sfcl.Command23 object at 0x0642EF60>) , Command count = 4328 ] 
14:29:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 27
14:29:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DAD3F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AB10>, <py_sfcl.PySEnhancedCmdData object at 0x06431E10>, <None>, <py_sfcl.Command23 object at 0x0642EE40>) , Command count = 4329 ] 
14:29:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BB70>, <py_sfcl.PySEnhancedCmdData object at 0x0645B450>, <None>, <py_sfcl.Command23 object at 0x0642E7E0>) , Command count = 4330 ] 
14:29:33: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:33: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:35: Host Frequency set to 25000 KHz
14:29:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x064140F0>, 0x0, True) , Command count = 4331 ] 
14:29:35: [GO18_globalSetVolt]### Host voltage value is set.
14:29:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FE10>, 0x0, False) , Command count = 4332 ] 
14:29:35: [GO18_globalSetVolt]### Host voltage value is set.
14:29:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4333 ] 
14:29:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4334 ] 
14:29:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4335 ] 
14:29:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414690>, <py_sfcl.CommandDataDefinition object at 0x06414B40>) , Command count = 4336 ] 
14:29:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E600>, <py_sfcl.CommandDataDefinition object at 0x0642E5A0>) , Command count = 4337 ] 
14:29:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:35: [ SetCardRCA(0x1, 0xD555) , Command count = 4338 ] 
14:29:35: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:35: Host Frequency set to 25000 KHz
14:29:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:35: ####CSD Registe 2.0 Values####
14:29:35: CSD_STRUCTURE                                 :0x1
14:29:35: Reserv1                                       :0x0
14:29:35: Time Access 1 TAAC                            :0xe
14:29:35: Time Access 2 NSAC*100                        :0x0
14:29:35: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:35: Card Command Classess CCC                     :0x5b5
14:29:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:35: DSR(driver stage register)  DSR_IMP           :0x0
14:29:35: Reserv2                                       :0x0
14:29:35: Device Size C_SIZE                            :0xedc8
14:29:35: Reserv3                                       :0x0
14:29:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:35: Reserv4                                       :0x0
14:29:35: Write Speed Factor R2W_FACTOR                 :0x2
14:29:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:35: FILE_FORMAT_GRP                               :0x0
14:29:35: COPY flag                                     :0x1
14:29:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:35: File_Format                                   :0x0
14:29:35: CRC                                           :0x0
14:29:35: ####CSD Registe Values####  

14:29:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:35: [GetSCRRegisterEntry] Passed
14:29:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:35: Data_Status_After Erases          : 0
14:29:35: CPRM Security Support             : No Security
14:29:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:35: Spec. Version                     : Version 3.0X
14:29:35: Extended Security Support         : Extended_Security_Not_Supported
14:29:35: Command Support                   : COMMAND_SUPPORT
14:29:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414360>, <py_sfcl.CommandDataDefinition object at 0x06431EA0>) , Command count = 4339 ] 
14:29:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421210>, <py_sfcl.CommandDataDefinition object at 0x0642E0C0>) , Command count = 4340 ] 
14:29:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:35: [ SetBusWidth(0x4) , Command count = 4341 ] 
14:29:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BD50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4342 ] 
14:29:35: Protected Area Size 0x28000
14:29:35: Bus Width           2
14:29:35: Secure Mode         0
14:29:35: Speed  Class        4
14:29:35: Perf Move           0
14:29:35: Au Size             9
14:29:35: Erase Size          15
14:29:35: Erase Timeout       1
14:29:35: Erase offset        1
14:29:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4343 ] 
14:29:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:35: Host Frequency set to 100000 KHz
14:29:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:35: ####CSD Registe 2.0 Values####
14:29:35: CSD_STRUCTURE                                 :0x1
14:29:35: Reserv1                                       :0x0
14:29:35: Time Access 1 TAAC                            :0xe
14:29:35: Time Access 2 NSAC*100                        :0x0
14:29:35: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:35: Card Command Classess CCC                     :0x5b5
14:29:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:35: DSR(driver stage register)  DSR_IMP           :0x0
14:29:35: Reserv2                                       :0x0
14:29:35: Device Size C_SIZE                            :0xedc8
14:29:35: Reserv3                                       :0x0
14:29:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:35: Reserv4                                       :0x0
14:29:35: Write Speed Factor R2W_FACTOR                 :0x2
14:29:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:35: FILE_FORMAT_GRP                               :0x0
14:29:35: COPY flag                                     :0x1
14:29:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:35: File_Format                                   :0x0
14:29:36: CRC                                           :0x0
14:29:36: ####CSD Registe Values####  

14:29:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431960>, <py_sfcl.CommandDataDefinition object at 0x06431AE0>) , Command count = 4344 ] 
14:29:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421A20>, <py_sfcl.CommandDataDefinition object at 0x0642E720>) , Command count = 4345 ] 
14:29:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06414300>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431F60>, <py_sfcl.PySEnhancedCmdData object at 0x064316C0>, <None>, <py_sfcl.Command23 object at 0x06431600>) , Command count = 4346 ] 
14:29:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 26
14:29:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E1060>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06414900>, <py_sfcl.PySEnhancedCmdData object at 0x06431C60>, <None>, <py_sfcl.Command23 object at 0x064317B0>) , Command count = 4347 ] 
14:29:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064313C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BDE0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B210>, <None>, <py_sfcl.Command23 object at 0x06431F00>) , Command count = 4348 ] 
14:29:36: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:36: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:38: Host Frequency set to 25000 KHz
14:29:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:38: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x064517B0>, 0x0, True) , Command count = 4349 ] 
14:29:38: [GO18_globalSetVolt]### Host voltage value is set.
14:29:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x064215D0>, 0x0, False) , Command count = 4350 ] 
14:29:38: [GO18_globalSetVolt]### Host voltage value is set.
14:29:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4351 ] 
14:29:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4352 ] 
14:29:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4353 ] 
14:29:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414DE0>, <py_sfcl.CommandDataDefinition object at 0x0642AC30>) , Command count = 4354 ] 
14:29:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064519F0>, <py_sfcl.CommandDataDefinition object at 0x06451540>) , Command count = 4355 ] 
14:29:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:38: [ SetCardRCA(0x1, 0xD555) , Command count = 4356 ] 
14:29:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:38: Host Frequency set to 25000 KHz
14:29:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:38: ####CSD Registe 2.0 Values####
14:29:38: CSD_STRUCTURE                                 :0x1
14:29:38: Reserv1                                       :0x0
14:29:38: Time Access 1 TAAC                            :0xe
14:29:38: Time Access 2 NSAC*100                        :0x0
14:29:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:38: Card Command Classess CCC                     :0x5b5
14:29:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:38: DSR(driver stage register)  DSR_IMP           :0x0
14:29:38: Reserv2                                       :0x0
14:29:38: Device Size C_SIZE                            :0xedc8
14:29:38: Reserv3                                       :0x0
14:29:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:38: Reserv4                                       :0x0
14:29:38: Write Speed Factor R2W_FACTOR                 :0x2
14:29:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:38: FILE_FORMAT_GRP                               :0x0
14:29:38: COPY flag                                     :0x1
14:29:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:38: File_Format                                   :0x0
14:29:38: CRC                                           :0x0
14:29:38: ####CSD Registe Values####  

14:29:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:38: [GetSCRRegisterEntry] Passed
14:29:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:38: Data_Status_After Erases          : 0
14:29:38: CPRM Security Support             : No Security
14:29:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:38: Spec. Version                     : Version 3.0X
14:29:38: Extended Security Support         : Extended_Security_Not_Supported
14:29:38: Command Support                   : COMMAND_SUPPORT
14:29:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1A80>, <py_sfcl.CommandDataDefinition object at 0x064149F0>) , Command count = 4357 ] 
14:29:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421960>, <py_sfcl.CommandDataDefinition object at 0x0642E120>) , Command count = 4358 ] 
14:29:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:38: [ SetBusWidth(0x4) , Command count = 4359 ] 
14:29:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06431F90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4360 ] 
14:29:38: Protected Area Size 0x28000
14:29:38: Bus Width           2
14:29:38: Secure Mode         0
14:29:38: Speed  Class        4
14:29:38: Perf Move           0
14:29:38: Au Size             9
14:29:38: Erase Size          15
14:29:38: Erase Timeout       1
14:29:38: Erase offset        1
14:29:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4361 ] 
14:29:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:38: Host Frequency set to 100000 KHz
14:29:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:38: ####CSD Registe 2.0 Values####
14:29:38: CSD_STRUCTURE                                 :0x1
14:29:38: Reserv1                                       :0x0
14:29:38: Time Access 1 TAAC                            :0xe
14:29:38: Time Access 2 NSAC*100                        :0x0
14:29:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:38: Card Command Classess CCC                     :0x5b5
14:29:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:38: DSR(driver stage register)  DSR_IMP           :0x0
14:29:38: Reserv2                                       :0x0
14:29:38: Device Size C_SIZE                            :0xedc8
14:29:38: Reserv3                                       :0x0
14:29:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:38: Reserv4                                       :0x0
14:29:38: Write Speed Factor R2W_FACTOR                 :0x2
14:29:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:38: FILE_FORMAT_GRP                               :0x0
14:29:38: COPY flag                                     :0x1
14:29:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:38: File_Format                                   :0x0
14:29:38: CRC                                           :0x0
14:29:38: ####CSD Registe Values####  

14:29:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431D50>, <py_sfcl.CommandDataDefinition object at 0x06431C00>) , Command count = 4362 ] 
14:29:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E270>, <py_sfcl.CommandDataDefinition object at 0x06431900>) , Command count = 4363 ] 
14:29:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x062E11E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064144B0>, <py_sfcl.PySEnhancedCmdData object at 0x06451B10>, <None>, <py_sfcl.Command23 object at 0x06431720>) , Command count = 4364 ] 
14:29:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 25
14:29:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431D80>, <py_sfcl.PySEnhancedCmdData object at 0x06431B10>, <None>, <py_sfcl.Command23 object at 0x06431DE0>) , Command count = 4365 ] 
14:29:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0645B060>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BC30>, <py_sfcl.PySEnhancedCmdData object at 0x0645B390>, <None>, <py_sfcl.Command23 object at 0x06431870>) , Command count = 4366 ] 
14:29:38: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:38: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:40: Host Frequency set to 25000 KHz
14:29:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:40: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x064516C0>, 0x0, True) , Command count = 4367 ] 
14:29:40: [GO18_globalSetVolt]### Host voltage value is set.
14:29:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431690>, 0x0, False) , Command count = 4368 ] 
14:29:40: [GO18_globalSetVolt]### Host voltage value is set.
14:29:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4369 ] 
14:29:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4370 ] 
14:29:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4371 ] 
14:29:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F120>, <py_sfcl.CommandDataDefinition object at 0x064519C0>) , Command count = 4372 ] 
14:29:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451390>, <py_sfcl.CommandDataDefinition object at 0x06431A50>) , Command count = 4373 ] 
14:29:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:41: [ SetCardRCA(0x1, 0xD555) , Command count = 4374 ] 
14:29:41: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:41: Host Frequency set to 25000 KHz
14:29:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:41: ####CSD Registe 2.0 Values####
14:29:41: CSD_STRUCTURE                                 :0x1
14:29:41: Reserv1                                       :0x0
14:29:41: Time Access 1 TAAC                            :0xe
14:29:41: Time Access 2 NSAC*100                        :0x0
14:29:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:41: Card Command Classess CCC                     :0x5b5
14:29:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:41: DSR(driver stage register)  DSR_IMP           :0x0
14:29:41: Reserv2                                       :0x0
14:29:41: Device Size C_SIZE                            :0xedc8
14:29:41: Reserv3                                       :0x0
14:29:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:41: Reserv4                                       :0x0
14:29:41: Write Speed Factor R2W_FACTOR                 :0x2
14:29:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:41: FILE_FORMAT_GRP                               :0x0
14:29:41: COPY flag                                     :0x1
14:29:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:41: File_Format                                   :0x0
14:29:41: CRC                                           :0x0
14:29:41: ####CSD Registe Values####  

14:29:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:41: [GetSCRRegisterEntry] Passed
14:29:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:41: Data_Status_After Erases          : 0
14:29:41: CPRM Security Support             : No Security
14:29:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:41: Spec. Version                     : Version 3.0X
14:29:41: Extended Security Support         : Extended_Security_Not_Supported
14:29:41: Command Support                   : COMMAND_SUPPORT
14:29:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451780>, <py_sfcl.CommandDataDefinition object at 0x06451D20>) , Command count = 4375 ] 
14:29:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421900>, <py_sfcl.CommandDataDefinition object at 0x06431060>) , Command count = 4376 ] 
14:29:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:41: [ SetBusWidth(0x4) , Command count = 4377 ] 
14:29:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B270>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4378 ] 
14:29:41: Protected Area Size 0x28000
14:29:41: Bus Width           2
14:29:41: Secure Mode         0
14:29:41: Speed  Class        4
14:29:41: Perf Move           0
14:29:41: Au Size             9
14:29:41: Erase Size          15
14:29:41: Erase Timeout       1
14:29:41: Erase offset        1
14:29:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4379 ] 
14:29:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:41: Host Frequency set to 100000 KHz
14:29:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:41: ####CSD Registe 2.0 Values####
14:29:41: CSD_STRUCTURE                                 :0x1
14:29:41: Reserv1                                       :0x0
14:29:41: Time Access 1 TAAC                            :0xe
14:29:41: Time Access 2 NSAC*100                        :0x0
14:29:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:41: Card Command Classess CCC                     :0x5b5
14:29:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:41: DSR(driver stage register)  DSR_IMP           :0x0
14:29:41: Reserv2                                       :0x0
14:29:41: Device Size C_SIZE                            :0xedc8
14:29:41: Reserv3                                       :0x0
14:29:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:41: Reserv4                                       :0x0
14:29:41: Write Speed Factor R2W_FACTOR                 :0x2
14:29:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:41: FILE_FORMAT_GRP                               :0x0
14:29:41: COPY flag                                     :0x1
14:29:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:41: File_Format                                   :0x0
14:29:41: CRC                                           :0x0
14:29:41: ####CSD Registe Values####  

14:29:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064146C0>, <py_sfcl.CommandDataDefinition object at 0x06431BD0>) , Command count = 4380 ] 
14:29:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ABA0>, <py_sfcl.CommandDataDefinition object at 0x06451750>) , Command count = 4381 ] 
14:29:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F1E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E510>, <py_sfcl.PySEnhancedCmdData object at 0x0642ED50>, <None>, <py_sfcl.Command23 object at 0x06431180>) , Command count = 4382 ] 
14:29:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 24
14:29:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F4B0>, <py_sfcl.PySEnhancedCmdData object at 0x06414A50>, <None>, <py_sfcl.Command23 object at 0x06451570>) , Command count = 4383 ] 
14:29:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06431510>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BAE0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B7B0>, <None>, <py_sfcl.Command23 object at 0x06431450>) , Command count = 4384 ] 
14:29:41: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:43: Host Frequency set to 25000 KHz
14:29:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0641FB10>, 0x0, True) , Command count = 4385 ] 
14:29:43: [GO18_globalSetVolt]### Host voltage value is set.
14:29:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A6C0>, 0x0, False) , Command count = 4386 ] 
14:29:43: [GO18_globalSetVolt]### Host voltage value is set.
14:29:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4387 ] 
14:29:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4388 ] 
14:29:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4389 ] 
14:29:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FFC0>, <py_sfcl.CommandDataDefinition object at 0x06451E40>) , Command count = 4390 ] 
14:29:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064515A0>, <py_sfcl.CommandDataDefinition object at 0x06467180>) , Command count = 4391 ] 
14:29:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:43: [ SetCardRCA(0x1, 0xD555) , Command count = 4392 ] 
14:29:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:44: Host Frequency set to 25000 KHz
14:29:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:44: ####CSD Registe 2.0 Values####
14:29:44: CSD_STRUCTURE                                 :0x1
14:29:44: Reserv1                                       :0x0
14:29:44: Time Access 1 TAAC                            :0xe
14:29:44: Time Access 2 NSAC*100                        :0x0
14:29:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:44: Card Command Classess CCC                     :0x5b5
14:29:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:44: DSR(driver stage register)  DSR_IMP           :0x0
14:29:44: Reserv2                                       :0x0
14:29:44: Device Size C_SIZE                            :0xedc8
14:29:44: Reserv3                                       :0x0
14:29:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:44: Reserv4                                       :0x0
14:29:44: Write Speed Factor R2W_FACTOR                 :0x2
14:29:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:44: FILE_FORMAT_GRP                               :0x0
14:29:44: COPY flag                                     :0x1
14:29:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:44: File_Format                                   :0x0
14:29:44: CRC                                           :0x0
14:29:44: ####CSD Registe Values####  

14:29:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:44: [GetSCRRegisterEntry] Passed
14:29:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:44: Data_Status_After Erases          : 0
14:29:44: CPRM Security Support             : No Security
14:29:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:44: Spec. Version                     : Version 3.0X
14:29:44: Extended Security Support         : Extended_Security_Not_Supported
14:29:44: Command Support                   : COMMAND_SUPPORT
14:29:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451600>, <py_sfcl.CommandDataDefinition object at 0x0641FB70>) , Command count = 4393 ] 
14:29:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x062E1330>, <py_sfcl.CommandDataDefinition object at 0x06414FC0>) , Command count = 4394 ] 
14:29:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:44: [ SetBusWidth(0x4) , Command count = 4395 ] 
14:29:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x064145A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4396 ] 
14:29:44: Protected Area Size 0x28000
14:29:44: Bus Width           2
14:29:44: Secure Mode         0
14:29:44: Speed  Class        4
14:29:44: Perf Move           0
14:29:44: Au Size             9
14:29:44: Erase Size          15
14:29:44: Erase Timeout       1
14:29:44: Erase offset        1
14:29:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4397 ] 
14:29:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:44: Host Frequency set to 100000 KHz
14:29:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:44: ####CSD Registe 2.0 Values####
14:29:44: CSD_STRUCTURE                                 :0x1
14:29:44: Reserv1                                       :0x0
14:29:44: Time Access 1 TAAC                            :0xe
14:29:44: Time Access 2 NSAC*100                        :0x0
14:29:44: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:44: Card Command Classess CCC                     :0x5b5
14:29:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:44: DSR(driver stage register)  DSR_IMP           :0x0
14:29:44: Reserv2                                       :0x0
14:29:44: Device Size C_SIZE                            :0xedc8
14:29:44: Reserv3                                       :0x0
14:29:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:44: Reserv4                                       :0x0
14:29:44: Write Speed Factor R2W_FACTOR                 :0x2
14:29:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:44: FILE_FORMAT_GRP                               :0x0
14:29:44: COPY flag                                     :0x1
14:29:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:44: File_Format                                   :0x0
14:29:44: CRC                                           :0x0
14:29:44: ####CSD Registe Values####  

14:29:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467060>, <py_sfcl.CommandDataDefinition object at 0x06451BD0>) , Command count = 4398 ] 
14:29:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE8690>, <py_sfcl.CommandDataDefinition object at 0x06451630>) , Command count = 4399 ] 
14:29:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064671E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467210>, <py_sfcl.PySEnhancedCmdData object at 0x06467240>, <None>, <py_sfcl.Command23 object at 0x064142D0>) , Command count = 4400 ] 
14:29:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 23
14:29:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064670C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064670F0>, <py_sfcl.PySEnhancedCmdData object at 0x06467120>, <None>, <py_sfcl.Command23 object at 0x06414AE0>) , Command count = 4401 ] 
14:29:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642ABD0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BBD0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B4E0>, <None>, <py_sfcl.Command23 object at 0x0641FCF0>) , Command count = 4402 ] 
14:29:44: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:44: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:46: Host Frequency set to 25000 KHz
14:29:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:46: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x064675A0>, 0x0, True) , Command count = 4403 ] 
14:29:46: [GO18_globalSetVolt]### Host voltage value is set.
14:29:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451870>, 0x0, False) , Command count = 4404 ] 
14:29:46: [GO18_globalSetVolt]### Host voltage value is set.
14:29:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4405 ] 
14:29:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4406 ] 
14:29:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4407 ] 
14:29:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467540>, <py_sfcl.CommandDataDefinition object at 0x064674E0>) , Command count = 4408 ] 
14:29:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064148A0>, <py_sfcl.CommandDataDefinition object at 0x06451630>) , Command count = 4409 ] 
14:29:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:46: [ SetCardRCA(0x1, 0xD555) , Command count = 4410 ] 
14:29:46: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:46: Host Frequency set to 25000 KHz
14:29:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:46: ####CSD Registe 2.0 Values####
14:29:46: CSD_STRUCTURE                                 :0x1
14:29:46: Reserv1                                       :0x0
14:29:46: Time Access 1 TAAC                            :0xe
14:29:46: Time Access 2 NSAC*100                        :0x0
14:29:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:46: Card Command Classess CCC                     :0x5b5
14:29:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:46: DSR(driver stage register)  DSR_IMP           :0x0
14:29:46: Reserv2                                       :0x0
14:29:46: Device Size C_SIZE                            :0xedc8
14:29:46: Reserv3                                       :0x0
14:29:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:46: Reserv4                                       :0x0
14:29:46: Write Speed Factor R2W_FACTOR                 :0x2
14:29:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:46: FILE_FORMAT_GRP                               :0x0
14:29:46: COPY flag                                     :0x1
14:29:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:46: File_Format                                   :0x0
14:29:46: CRC                                           :0x0
14:29:46: ####CSD Registe Values####  

14:29:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:46: [GetSCRRegisterEntry] Passed
14:29:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:46: Data_Status_After Erases          : 0
14:29:46: CPRM Security Support             : No Security
14:29:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:46: Spec. Version                     : Version 3.0X
14:29:46: Extended Security Support         : Extended_Security_Not_Supported
14:29:46: Command Support                   : COMMAND_SUPPORT
14:29:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467660>, <py_sfcl.CommandDataDefinition object at 0x064313F0>) , Command count = 4411 ] 
14:29:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A570>, <py_sfcl.CommandDataDefinition object at 0x06451630>) , Command count = 4412 ] 
14:29:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:46: [ SetBusWidth(0x4) , Command count = 4413 ] 
14:29:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4414 ] 
14:29:46: Protected Area Size 0x28000
14:29:46: Bus Width           2
14:29:46: Secure Mode         0
14:29:46: Speed  Class        4
14:29:46: Perf Move           0
14:29:46: Au Size             9
14:29:46: Erase Size          15
14:29:46: Erase Timeout       1
14:29:46: Erase offset        1
14:29:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4415 ] 
14:29:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:47: Host Frequency set to 100000 KHz
14:29:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:47: ####CSD Registe 2.0 Values####
14:29:47: CSD_STRUCTURE                                 :0x1
14:29:47: Reserv1                                       :0x0
14:29:47: Time Access 1 TAAC                            :0xe
14:29:47: Time Access 2 NSAC*100                        :0x0
14:29:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:47: Card Command Classess CCC                     :0x5b5
14:29:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:47: DSR(driver stage register)  DSR_IMP           :0x0
14:29:47: Reserv2                                       :0x0
14:29:47: Device Size C_SIZE                            :0xedc8
14:29:47: Reserv3                                       :0x0
14:29:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:47: Reserv4                                       :0x0
14:29:47: Write Speed Factor R2W_FACTOR                 :0x2
14:29:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:47: FILE_FORMAT_GRP                               :0x0
14:29:47: COPY flag                                     :0x1
14:29:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:47: File_Format                                   :0x0
14:29:47: CRC                                           :0x0
14:29:47: ####CSD Registe Values####  

14:29:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467A50>, <py_sfcl.CommandDataDefinition object at 0x0642AFC0>) , Command count = 4416 ] 
14:29:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D7E2A0>, <py_sfcl.CommandDataDefinition object at 0x06414C60>) , Command count = 4417 ] 
14:29:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467990>, <py_sfcl.PySEnhancedCmdData object at 0x064679C0>, <None>, <py_sfcl.Command23 object at 0x0641FDE0>) , Command count = 4418 ] 
14:29:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 22
14:29:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06467AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06467AE0>, <None>, <py_sfcl.Command23 object at 0x0641F210>) , Command count = 4419 ] 
14:29:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E4E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0641F660>, <py_sfcl.PySEnhancedCmdData object at 0x0645BEA0>, <None>, <py_sfcl.Command23 object at 0x0641FC90>) , Command count = 4420 ] 
14:29:47: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:49: Host Frequency set to 25000 KHz
14:29:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467E40>, 0x0, True) , Command count = 4421 ] 
14:29:49: [GO18_globalSetVolt]### Host voltage value is set.
14:29:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E780>, 0x0, False) , Command count = 4422 ] 
14:29:49: [GO18_globalSetVolt]### Host voltage value is set.
14:29:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4423 ] 
14:29:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4424 ] 
14:29:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4425 ] 
14:29:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467DE0>, <py_sfcl.CommandDataDefinition object at 0x06431DB0>) , Command count = 4426 ] 
14:29:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F540>, <py_sfcl.CommandDataDefinition object at 0x0641FD20>) , Command count = 4427 ] 
14:29:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:49: [ SetCardRCA(0x1, 0xD555) , Command count = 4428 ] 
14:29:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:49: Host Frequency set to 25000 KHz
14:29:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:49: ####CSD Registe 2.0 Values####
14:29:49: CSD_STRUCTURE                                 :0x1
14:29:49: Reserv1                                       :0x0
14:29:49: Time Access 1 TAAC                            :0xe
14:29:49: Time Access 2 NSAC*100                        :0x0
14:29:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:49: Card Command Classess CCC                     :0x5b5
14:29:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:49: DSR(driver stage register)  DSR_IMP           :0x0
14:29:49: Reserv2                                       :0x0
14:29:49: Device Size C_SIZE                            :0xedc8
14:29:49: Reserv3                                       :0x0
14:29:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:49: Reserv4                                       :0x0
14:29:49: Write Speed Factor R2W_FACTOR                 :0x2
14:29:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:49: FILE_FORMAT_GRP                               :0x0
14:29:49: COPY flag                                     :0x1
14:29:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:49: File_Format                                   :0x0
14:29:49: CRC                                           :0x0
14:29:49: ####CSD Registe Values####  

14:29:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:49: [GetSCRRegisterEntry] Passed
14:29:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:49: Data_Status_After Erases          : 0
14:29:49: CPRM Security Support             : No Security
14:29:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:49: Spec. Version                     : Version 3.0X
14:29:49: Extended Security Support         : Extended_Security_Not_Supported
14:29:49: Command Support                   : COMMAND_SUPPORT
14:29:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421030>, <py_sfcl.CommandDataDefinition object at 0x0641F510>) , Command count = 4429 ] 
14:29:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E900>, <py_sfcl.CommandDataDefinition object at 0x06467F30>) , Command count = 4430 ] 
14:29:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:49: [ SetBusWidth(0x4) , Command count = 4431 ] 
14:29:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B6F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4432 ] 
14:29:49: Protected Area Size 0x28000
14:29:49: Bus Width           2
14:29:49: Secure Mode         0
14:29:49: Speed  Class        4
14:29:49: Perf Move           0
14:29:49: Au Size             9
14:29:49: Erase Size          15
14:29:49: Erase Timeout       1
14:29:49: Erase offset        1
14:29:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4433 ] 
14:29:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:49: Host Frequency set to 100000 KHz
14:29:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:49: ####CSD Registe 2.0 Values####
14:29:49: CSD_STRUCTURE                                 :0x1
14:29:49: Reserv1                                       :0x0
14:29:49: Time Access 1 TAAC                            :0xe
14:29:49: Time Access 2 NSAC*100                        :0x0
14:29:49: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:49: Card Command Classess CCC                     :0x5b5
14:29:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:49: DSR(driver stage register)  DSR_IMP           :0x0
14:29:49: Reserv2                                       :0x0
14:29:49: Device Size C_SIZE                            :0xedc8
14:29:49: Reserv3                                       :0x0
14:29:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:49: Reserv4                                       :0x0
14:29:49: Write Speed Factor R2W_FACTOR                 :0x2
14:29:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:49: FILE_FORMAT_GRP                               :0x0
14:29:49: COPY flag                                     :0x1
14:29:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:49: File_Format                                   :0x0
14:29:49: CRC                                           :0x0
14:29:49: ####CSD Registe Values####  

14:29:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F330>, <py_sfcl.CommandDataDefinition object at 0x06467F90>) , Command count = 4434 ] 
14:29:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414420>, <py_sfcl.CommandDataDefinition object at 0x0641FAE0>) , Command count = 4435 ] 
14:29:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x064212A0>, <py_sfcl.PySEnhancedCmdData object at 0x06467C00>, <None>, <py_sfcl.Command23 object at 0x06467D80>) , Command count = 4436 ] 
14:29:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 21
14:29:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421360>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421390>, <py_sfcl.PySEnhancedCmdData object at 0x064679F0>, <None>, <py_sfcl.Command23 object at 0x06467ED0>) , Command count = 4437 ] 
14:29:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7FC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B2A0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B600>, <None>, <py_sfcl.Command23 object at 0x06467DB0>) , Command count = 4438 ] 
14:29:49: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:49: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:51: Host Frequency set to 25000 KHz
14:29:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421720>, 0x0, True) , Command count = 4439 ] 
14:29:51: [GO18_globalSetVolt]### Host voltage value is set.
14:29:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431480>, 0x0, False) , Command count = 4440 ] 
14:29:51: [GO18_globalSetVolt]### Host voltage value is set.
14:29:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4441 ] 
14:29:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4442 ] 
14:29:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4443 ] 
14:29:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064216C0>, <py_sfcl.CommandDataDefinition object at 0x06421660>) , Command count = 4444 ] 
14:29:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641F090>, <py_sfcl.CommandDataDefinition object at 0x0641F240>) , Command count = 4445 ] 
14:29:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:52: [ SetCardRCA(0x1, 0xD555) , Command count = 4446 ] 
14:29:52: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:52: Host Frequency set to 25000 KHz
14:29:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:52: ####CSD Registe 2.0 Values####
14:29:52: CSD_STRUCTURE                                 :0x1
14:29:52: Reserv1                                       :0x0
14:29:52: Time Access 1 TAAC                            :0xe
14:29:52: Time Access 2 NSAC*100                        :0x0
14:29:52: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:52: Card Command Classess CCC                     :0x5b5
14:29:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:52: DSR(driver stage register)  DSR_IMP           :0x0
14:29:52: Reserv2                                       :0x0
14:29:52: Device Size C_SIZE                            :0xedc8
14:29:52: Reserv3                                       :0x0
14:29:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:52: Reserv4                                       :0x0
14:29:52: Write Speed Factor R2W_FACTOR                 :0x2
14:29:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:52: FILE_FORMAT_GRP                               :0x0
14:29:52: COPY flag                                     :0x1
14:29:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:52: File_Format                                   :0x0
14:29:52: CRC                                           :0x0
14:29:52: ####CSD Registe Values####  

14:29:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:52: [GetSCRRegisterEntry] Passed
14:29:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:52: Data_Status_After Erases          : 0
14:29:52: CPRM Security Support             : No Security
14:29:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:52: Spec. Version                     : Version 3.0X
14:29:52: Extended Security Support         : Extended_Security_Not_Supported
14:29:52: Command Support                   : COMMAND_SUPPORT
14:29:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064219C0>, <py_sfcl.CommandDataDefinition object at 0x06467C60>) , Command count = 4447 ] 
14:29:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06451450>, <py_sfcl.CommandDataDefinition object at 0x06467480>) , Command count = 4448 ] 
14:29:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:52: [ SetBusWidth(0x4) , Command count = 4449 ] 
14:29:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4450 ] 
14:29:52: Protected Area Size 0x28000
14:29:52: Bus Width           2
14:29:52: Secure Mode         0
14:29:52: Speed  Class        4
14:29:52: Perf Move           0
14:29:52: Au Size             9
14:29:52: Erase Size          15
14:29:52: Erase Timeout       1
14:29:52: Erase offset        1
14:29:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4451 ] 
14:29:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:52: Host Frequency set to 100000 KHz
14:29:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:52: ####CSD Registe 2.0 Values####
14:29:52: CSD_STRUCTURE                                 :0x1
14:29:52: Reserv1                                       :0x0
14:29:52: Time Access 1 TAAC                            :0xe
14:29:52: Time Access 2 NSAC*100                        :0x0
14:29:52: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:52: Card Command Classess CCC                     :0x5b5
14:29:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:52: DSR(driver stage register)  DSR_IMP           :0x0
14:29:52: Reserv2                                       :0x0
14:29:52: Device Size C_SIZE                            :0xedc8
14:29:52: Reserv3                                       :0x0
14:29:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:52: Reserv4                                       :0x0
14:29:52: Write Speed Factor R2W_FACTOR                 :0x2
14:29:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:52: FILE_FORMAT_GRP                               :0x0
14:29:52: COPY flag                                     :0x1
14:29:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:52: File_Format                                   :0x0
14:29:52: CRC                                           :0x0
14:29:52: ####CSD Registe Values####  

14:29:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064217E0>, <py_sfcl.CommandDataDefinition object at 0x064216F0>) , Command count = 4452 ] 
14:29:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064319C0>, <py_sfcl.CommandDataDefinition object at 0x06467870>) , Command count = 4453 ] 
14:29:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421AE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421B10>, <py_sfcl.PySEnhancedCmdData object at 0x06421B40>, <None>, <py_sfcl.Command23 object at 0x06467030>) , Command count = 4454 ] 
14:29:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 20
14:29:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06421C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421C30>, <py_sfcl.PySEnhancedCmdData object at 0x06421C60>, <None>, <py_sfcl.Command23 object at 0x064676C0>) , Command count = 4455 ] 
14:29:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DEFAE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B240>, <py_sfcl.PySEnhancedCmdData object at 0x0645B2A0>, <None>, <py_sfcl.Command23 object at 0x06467420>) , Command count = 4456 ] 
14:29:52: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:52: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:54: Host Frequency set to 25000 KHz
14:29:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:54: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x06421FC0>, 0x0, True) , Command count = 4457 ] 
14:29:54: [GO18_globalSetVolt]### Host voltage value is set.
14:29:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x064515D0>, 0x0, False) , Command count = 4458 ] 
14:29:54: [GO18_globalSetVolt]### Host voltage value is set.
14:29:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4459 ] 
14:29:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4460 ] 
14:29:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4461 ] 
14:29:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A060>, <py_sfcl.CommandDataDefinition object at 0x06421F60>) , Command count = 4462 ] 
14:29:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A0F0>, <py_sfcl.CommandDataDefinition object at 0x06467690>) , Command count = 4463 ] 
14:29:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:54: [ SetCardRCA(0x1, 0xD555) , Command count = 4464 ] 
14:29:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:55: Host Frequency set to 25000 KHz
14:29:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:55: ####CSD Registe 2.0 Values####
14:29:55: CSD_STRUCTURE                                 :0x1
14:29:55: Reserv1                                       :0x0
14:29:55: Time Access 1 TAAC                            :0xe
14:29:55: Time Access 2 NSAC*100                        :0x0
14:29:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:55: Card Command Classess CCC                     :0x5b5
14:29:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:55: DSR(driver stage register)  DSR_IMP           :0x0
14:29:55: Reserv2                                       :0x0
14:29:55: Device Size C_SIZE                            :0xedc8
14:29:55: Reserv3                                       :0x0
14:29:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:55: Reserv4                                       :0x0
14:29:55: Write Speed Factor R2W_FACTOR                 :0x2
14:29:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:55: FILE_FORMAT_GRP                               :0x0
14:29:55: COPY flag                                     :0x1
14:29:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:55: File_Format                                   :0x0
14:29:55: CRC                                           :0x0
14:29:55: ####CSD Registe Values####  

14:29:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:55: [GetSCRRegisterEntry] Passed
14:29:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:55: Data_Status_After Erases          : 0
14:29:55: CPRM Security Support             : No Security
14:29:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:55: Spec. Version                     : Version 3.0X
14:29:55: Extended Security Support         : Extended_Security_Not_Supported
14:29:55: Command Support                   : COMMAND_SUPPORT
14:29:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A2A0>, <py_sfcl.CommandDataDefinition object at 0x0642A0C0>) , Command count = 4465 ] 
14:29:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFB70>, <py_sfcl.CommandDataDefinition object at 0x06467570>) , Command count = 4466 ] 
14:29:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:55: [ SetBusWidth(0x4) , Command count = 4467 ] 
14:29:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4468 ] 
14:29:55: Protected Area Size 0x28000
14:29:55: Bus Width           2
14:29:55: Secure Mode         0
14:29:55: Speed  Class        4
14:29:55: Perf Move           0
14:29:55: Au Size             9
14:29:55: Erase Size          15
14:29:55: Erase Timeout       1
14:29:55: Erase offset        1
14:29:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4469 ] 
14:29:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:55: Host Frequency set to 100000 KHz
14:29:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:55: ####CSD Registe 2.0 Values####
14:29:55: CSD_STRUCTURE                                 :0x1
14:29:55: Reserv1                                       :0x0
14:29:55: Time Access 1 TAAC                            :0xe
14:29:55: Time Access 2 NSAC*100                        :0x0
14:29:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:55: Card Command Classess CCC                     :0x5b5
14:29:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:55: DSR(driver stage register)  DSR_IMP           :0x0
14:29:55: Reserv2                                       :0x0
14:29:55: Device Size C_SIZE                            :0xedc8
14:29:55: Reserv3                                       :0x0
14:29:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:55: Reserv4                                       :0x0
14:29:55: Write Speed Factor R2W_FACTOR                 :0x2
14:29:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:55: FILE_FORMAT_GRP                               :0x0
14:29:55: COPY flag                                     :0x1
14:29:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:55: File_Format                                   :0x0
14:29:55: CRC                                           :0x0
14:29:55: ####CSD Registe Values####  

14:29:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A090>, <py_sfcl.CommandDataDefinition object at 0x06421F00>) , Command count = 4470 ] 
14:29:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEFAB0>, <py_sfcl.CommandDataDefinition object at 0x06467BD0>) , Command count = 4471 ] 
14:29:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06421D80>, <py_sfcl.PySEnhancedCmdData object at 0x06421BA0>, <None>, <py_sfcl.Command23 object at 0x064673C0>) , Command count = 4472 ] 
14:29:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 19
14:29:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642A4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642A510>, <py_sfcl.PySEnhancedCmdData object at 0x0642A540>, <None>, <py_sfcl.Command23 object at 0x064675D0>) , Command count = 4473 ] 
14:29:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0641F150>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B840>, <py_sfcl.PySEnhancedCmdData object at 0x0645B540>, <None>, <py_sfcl.Command23 object at 0x06421D50>) , Command count = 4474 ] 
14:29:55: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:57: Host Frequency set to 25000 KHz
14:29:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642A8A0>, 0x0, True) , Command count = 4475 ] 
14:29:57: [GO18_globalSetVolt]### Host voltage value is set.
14:29:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x0645B8A0>, 0x0, False) , Command count = 4476 ] 
14:29:57: [GO18_globalSetVolt]### Host voltage value is set.
14:29:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4477 ] 
14:29:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4478 ] 
14:29:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4479 ] 
14:29:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A840>, <py_sfcl.CommandDataDefinition object at 0x05DEF7B0>) , Command count = 4480 ] 
14:29:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421870>, <py_sfcl.CommandDataDefinition object at 0x06421060>) , Command count = 4481 ] 
14:29:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:57: [ SetCardRCA(0x1, 0xD555) , Command count = 4482 ] 
14:29:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:57: Host Frequency set to 25000 KHz
14:29:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:57: ####CSD Registe 2.0 Values####
14:29:57: CSD_STRUCTURE                                 :0x1
14:29:57: Reserv1                                       :0x0
14:29:57: Time Access 1 TAAC                            :0xe
14:29:57: Time Access 2 NSAC*100                        :0x0
14:29:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:57: Card Command Classess CCC                     :0x5b5
14:29:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:57: DSR(driver stage register)  DSR_IMP           :0x0
14:29:57: Reserv2                                       :0x0
14:29:57: Device Size C_SIZE                            :0xedc8
14:29:57: Reserv3                                       :0x0
14:29:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:57: Reserv4                                       :0x0
14:29:57: Write Speed Factor R2W_FACTOR                 :0x2
14:29:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:57: FILE_FORMAT_GRP                               :0x0
14:29:57: COPY flag                                     :0x1
14:29:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:57: File_Format                                   :0x0
14:29:57: CRC                                           :0x0
14:29:57: ####CSD Registe Values####  

14:29:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:57: [GetSCRRegisterEntry] Passed
14:29:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:57: Data_Status_After Erases          : 0
14:29:57: CPRM Security Support             : No Security
14:29:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:57: Spec. Version                     : Version 3.0X
14:29:57: Extended Security Support         : Extended_Security_Not_Supported
14:29:57: Command Support                   : COMMAND_SUPPORT
14:29:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AB40>, <py_sfcl.CommandDataDefinition object at 0x06421840>) , Command count = 4483 ] 
14:29:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431ED0>, <py_sfcl.CommandDataDefinition object at 0x06421D20>) , Command count = 4484 ] 
14:29:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:57: [ SetBusWidth(0x4) , Command count = 4485 ] 
14:29:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4486 ] 
14:29:57: Protected Area Size 0x28000
14:29:57: Bus Width           2
14:29:57: Secure Mode         0
14:29:57: Speed  Class        4
14:29:57: Perf Move           0
14:29:57: Au Size             9
14:29:57: Erase Size          15
14:29:57: Erase Timeout       1
14:29:57: Erase offset        1
14:29:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4487 ] 
14:29:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:58: Host Frequency set to 100000 KHz
14:29:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:58: ####CSD Registe 2.0 Values####
14:29:58: CSD_STRUCTURE                                 :0x1
14:29:58: Reserv1                                       :0x0
14:29:58: Time Access 1 TAAC                            :0xe
14:29:58: Time Access 2 NSAC*100                        :0x0
14:29:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:58: Card Command Classess CCC                     :0x5b5
14:29:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:58: DSR(driver stage register)  DSR_IMP           :0x0
14:29:58: Reserv2                                       :0x0
14:29:58: Device Size C_SIZE                            :0xedc8
14:29:58: Reserv3                                       :0x0
14:29:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:58: Reserv4                                       :0x0
14:29:58: Write Speed Factor R2W_FACTOR                 :0x2
14:29:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:58: FILE_FORMAT_GRP                               :0x0
14:29:58: COPY flag                                     :0x1
14:29:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:58: File_Format                                   :0x0
14:29:58: CRC                                           :0x0
14:29:58: ####CSD Registe Values####  

14:29:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642AA20>, <py_sfcl.CommandDataDefinition object at 0x0642A870>) , Command count = 4488 ] 
14:29:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467630>, <py_sfcl.CommandDataDefinition object at 0x06421330>) , Command count = 4489 ] 
14:29:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AC60>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AC90>, <py_sfcl.PySEnhancedCmdData object at 0x0642A930>, <None>, <py_sfcl.Command23 object at 0x06421270>) , Command count = 4490 ] 
14:29:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 18
14:29:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642AD80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642ADB0>, <py_sfcl.PySEnhancedCmdData object at 0x0642ADE0>, <None>, <py_sfcl.Command23 object at 0x064217B0>) , Command count = 4491 ] 
14:29:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x063FFD50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BD20>, <py_sfcl.PySEnhancedCmdData object at 0x0645B150>, <None>, <py_sfcl.Command23 object at 0x064213C0>) , Command count = 4492 ] 
14:29:58: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:00: Host Frequency set to 25000 KHz
14:30:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642E030>, 0x0, True) , Command count = 4493 ] 
14:30:00: [GO18_globalSetVolt]### Host voltage value is set.
14:30:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x06451ED0>, 0x0, False) , Command count = 4494 ] 
14:30:00: [GO18_globalSetVolt]### Host voltage value is set.
14:30:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4495 ] 
14:30:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4496 ] 
14:30:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4497 ] 
14:30:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E150>, <py_sfcl.CommandDataDefinition object at 0x0642E0F0>) , Command count = 4498 ] 
14:30:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06421B70>, <py_sfcl.CommandDataDefinition object at 0x06421F90>) , Command count = 4499 ] 
14:30:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:00: [ SetCardRCA(0x1, 0xD555) , Command count = 4500 ] 
14:30:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:00: Host Frequency set to 25000 KHz
14:30:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:00: ####CSD Registe 2.0 Values####
14:30:00: CSD_STRUCTURE                                 :0x1
14:30:00: Reserv1                                       :0x0
14:30:00: Time Access 1 TAAC                            :0xe
14:30:00: Time Access 2 NSAC*100                        :0x0
14:30:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:00: Card Command Classess CCC                     :0x5b5
14:30:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:00: DSR(driver stage register)  DSR_IMP           :0x0
14:30:00: Reserv2                                       :0x0
14:30:00: Device Size C_SIZE                            :0xedc8
14:30:00: Reserv3                                       :0x0
14:30:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:00: Reserv4                                       :0x0
14:30:00: Write Speed Factor R2W_FACTOR                 :0x2
14:30:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:00: FILE_FORMAT_GRP                               :0x0
14:30:00: COPY flag                                     :0x1
14:30:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:00: File_Format                                   :0x0
14:30:00: CRC                                           :0x0
14:30:00: ####CSD Registe Values####  

14:30:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:00: [GetSCRRegisterEntry] Passed
14:30:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:00: Data_Status_After Erases          : 0
14:30:00: CPRM Security Support             : No Security
14:30:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:00: Spec. Version                     : Version 3.0X
14:30:00: Extended Security Support         : Extended_Security_Not_Supported
14:30:00: Command Support                   : COMMAND_SUPPORT
14:30:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A630>, <py_sfcl.CommandDataDefinition object at 0x0642E420>) , Command count = 4501 ] 
14:30:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414570>, <py_sfcl.CommandDataDefinition object at 0x064213F0>) , Command count = 4502 ] 
14:30:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:00: [ SetBusWidth(0x4) , Command count = 4503 ] 
14:30:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B630>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4504 ] 
14:30:00: Protected Area Size 0x28000
14:30:00: Bus Width           2
14:30:00: Secure Mode         0
14:30:00: Speed  Class        4
14:30:00: Perf Move           0
14:30:00: Au Size             9
14:30:00: Erase Size          15
14:30:00: Erase Timeout       1
14:30:00: Erase offset        1
14:30:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4505 ] 
14:30:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:00: Host Frequency set to 100000 KHz
14:30:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:00: ####CSD Registe 2.0 Values####
14:30:00: CSD_STRUCTURE                                 :0x1
14:30:00: Reserv1                                       :0x0
14:30:00: Time Access 1 TAAC                            :0xe
14:30:00: Time Access 2 NSAC*100                        :0x0
14:30:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:00: Card Command Classess CCC                     :0x5b5
14:30:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:00: DSR(driver stage register)  DSR_IMP           :0x0
14:30:00: Reserv2                                       :0x0
14:30:00: Device Size C_SIZE                            :0xedc8
14:30:00: Reserv3                                       :0x0
14:30:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:00: Reserv4                                       :0x0
14:30:00: Write Speed Factor R2W_FACTOR                 :0x2
14:30:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:00: FILE_FORMAT_GRP                               :0x0
14:30:00: COPY flag                                     :0x1
14:30:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:00: File_Format                                   :0x0
14:30:00: CRC                                           :0x0
14:30:00: ####CSD Registe Values####  

14:30:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E330>, <py_sfcl.CommandDataDefinition object at 0x0642E240>) , Command count = 4506 ] 
14:30:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A7E0>, <py_sfcl.CommandDataDefinition object at 0x0642AD50>) , Command count = 4507 ] 
14:30:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:30:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E180>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AD20>, <py_sfcl.PySEnhancedCmdData object at 0x0642A150>, <None>, <py_sfcl.Command23 object at 0x06421A80>) , Command count = 4508 ] 
14:30:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:30:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 17
14:30:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:30:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E660>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642AB70>, <py_sfcl.PySEnhancedCmdData object at 0x0642AED0>, <None>, <py_sfcl.Command23 object at 0x064214E0>) , Command count = 4509 ] 
14:30:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:30:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06451FC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645BE70>, <py_sfcl.PySEnhancedCmdData object at 0x0645BCC0>, <None>, <py_sfcl.Command23 object at 0x0642AF00>) , Command count = 4510 ] 
14:30:00: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:02: Host Frequency set to 25000 KHz
14:30:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:02: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x0642EA20>, 0x0, True) , Command count = 4511 ] 
14:30:02: [GO18_globalSetVolt]### Host voltage value is set.
14:30:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467720>, 0x0, False) , Command count = 4512 ] 
14:30:03: [GO18_globalSetVolt]### Host voltage value is set.
14:30:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4513 ] 
14:30:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4514 ] 
14:30:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4515 ] 
14:30:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642E9C0>, <py_sfcl.CommandDataDefinition object at 0x0642E210>) , Command count = 4516 ] 
14:30:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642A9F0>, <py_sfcl.CommandDataDefinition object at 0x0642AF90>) , Command count = 4517 ] 
14:30:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:03: [ SetCardRCA(0x1, 0xD555) , Command count = 4518 ] 
14:30:03: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:03: Host Frequency set to 25000 KHz
14:30:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:03: ####CSD Registe 2.0 Values####
14:30:03: CSD_STRUCTURE                                 :0x1
14:30:03: Reserv1                                       :0x0
14:30:03: Time Access 1 TAAC                            :0xe
14:30:03: Time Access 2 NSAC*100                        :0x0
14:30:03: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:03: Card Command Classess CCC                     :0x5b5
14:30:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:03: DSR(driver stage register)  DSR_IMP           :0x0
14:30:03: Reserv2                                       :0x0
14:30:03: Device Size C_SIZE                            :0xedc8
14:30:03: Reserv3                                       :0x0
14:30:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:03: Reserv4                                       :0x0
14:30:03: Write Speed Factor R2W_FACTOR                 :0x2
14:30:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:03: FILE_FORMAT_GRP                               :0x0
14:30:03: COPY flag                                     :0x1
14:30:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:03: File_Format                                   :0x0
14:30:03: CRC                                           :0x0
14:30:03: ####CSD Registe Values####  

14:30:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:03: [GetSCRRegisterEntry] Passed
14:30:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:03: Data_Status_After Erases          : 0
14:30:03: CPRM Security Support             : No Security
14:30:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:03: Spec. Version                     : Version 3.0X
14:30:03: Extended Security Support         : Extended_Security_Not_Supported
14:30:03: Command Support                   : COMMAND_SUPPORT
14:30:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642ECC0>, <py_sfcl.CommandDataDefinition object at 0x0642A8D0>) , Command count = 4519 ] 
14:30:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06414A80>, <py_sfcl.CommandDataDefinition object at 0x0642AEA0>) , Command count = 4520 ] 
14:30:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:03: [ SetBusWidth(0x4) , Command count = 4521 ] 
14:30:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645BA80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4522 ] 
14:30:03: Protected Area Size 0x28000
14:30:03: Bus Width           2
14:30:03: Secure Mode         0
14:30:03: Speed  Class        4
14:30:03: Perf Move           0
14:30:03: Au Size             9
14:30:03: Erase Size          15
14:30:03: Erase Timeout       1
14:30:03: Erase offset        1
14:30:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4523 ] 
14:30:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:03: Host Frequency set to 100000 KHz
14:30:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:03: ####CSD Registe 2.0 Values####
14:30:03: CSD_STRUCTURE                                 :0x1
14:30:03: Reserv1                                       :0x0
14:30:03: Time Access 1 TAAC                            :0xe
14:30:03: Time Access 2 NSAC*100                        :0x0
14:30:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:03: Card Command Classess CCC                     :0x5b5
14:30:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:03: DSR(driver stage register)  DSR_IMP           :0x0
14:30:03: Reserv2                                       :0x0
14:30:03: Device Size C_SIZE                            :0xedc8
14:30:03: Reserv3                                       :0x0
14:30:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:03: Reserv4                                       :0x0
14:30:03: Write Speed Factor R2W_FACTOR                 :0x2
14:30:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:03: FILE_FORMAT_GRP                               :0x0
14:30:03: COPY flag                                     :0x1
14:30:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:03: File_Format                                   :0x0
14:30:03: CRC                                           :0x0
14:30:03: ####CSD Registe Values####  

14:30:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0642EED0>, <py_sfcl.CommandDataDefinition object at 0x0642EBA0>) , Command count = 4524 ] 
14:30:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x063FFEA0>, <py_sfcl.CommandDataDefinition object at 0x0642ACC0>) , Command count = 4525 ] 
14:30:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:30:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642ECF0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EB10>, <py_sfcl.PySEnhancedCmdData object at 0x0642A660>, <None>, <py_sfcl.Command23 object at 0x0642ACF0>) , Command count = 4526 ] 
14:30:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:30:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 16
14:30:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:30:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064310F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642EF00>, <py_sfcl.PySEnhancedCmdData object at 0x0642EF30>, <None>, <py_sfcl.Command23 object at 0x0642A1E0>) , Command count = 4527 ] 
14:30:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:30:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x064678A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B9C0>, <py_sfcl.PySEnhancedCmdData object at 0x0645B360>, <None>, <py_sfcl.Command23 object at 0x0642A1B0>) , Command count = 4528 ] 
14:30:03: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:05: Host Frequency set to 25000 KHz
14:30:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x06431300>, 0x0, True) , Command count = 4529 ] 
14:30:05: [GO18_globalSetVolt]### Host voltage value is set.
14:30:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467600>, 0x0, False) , Command count = 4530 ] 
14:30:05: [GO18_globalSetVolt]### Host voltage value is set.
14:30:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4531 ] 
14:30:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4532 ] 
14:30:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4533 ] 
14:30:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064312A0>, <py_sfcl.CommandDataDefinition object at 0x06431270>) , Command count = 4534 ] 
14:30:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C40B70>, <py_sfcl.CommandDataDefinition object at 0x06421300>) , Command count = 4535 ] 
14:30:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:06: [ SetCardRCA(0x1, 0xD555) , Command count = 4536 ] 
14:30:06: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:06: Host Frequency set to 25000 KHz
14:30:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:06: ####CSD Registe 2.0 Values####
14:30:06: CSD_STRUCTURE                                 :0x1
14:30:06: Reserv1                                       :0x0
14:30:06: Time Access 1 TAAC                            :0xe
14:30:06: Time Access 2 NSAC*100                        :0x0
14:30:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:06: Card Command Classess CCC                     :0x5b5
14:30:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:06: DSR(driver stage register)  DSR_IMP           :0x0
14:30:06: Reserv2                                       :0x0
14:30:06: Device Size C_SIZE                            :0xedc8
14:30:06: Reserv3                                       :0x0
14:30:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:06: Reserv4                                       :0x0
14:30:06: Write Speed Factor R2W_FACTOR                 :0x2
14:30:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:06: FILE_FORMAT_GRP                               :0x0
14:30:06: COPY flag                                     :0x1
14:30:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:06: File_Format                                   :0x0
14:30:06: CRC                                           :0x0
14:30:06: ####CSD Registe Values####  

14:30:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:06: [GetSCRRegisterEntry] Passed
14:30:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:06: Data_Status_After Erases          : 0
14:30:06: CPRM Security Support             : No Security
14:30:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:06: Spec. Version                     : Version 3.0X
14:30:06: Extended Security Support         : Extended_Security_Not_Supported
14:30:06: Command Support                   : COMMAND_SUPPORT
14:30:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06431570>, <py_sfcl.CommandDataDefinition object at 0x0642A420>) , Command count = 4537 ] 
14:30:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0641FF60>, <py_sfcl.CommandDataDefinition object at 0x0642E960>) , Command count = 4538 ] 
14:30:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:06: [ SetBusWidth(0x4) , Command count = 4539 ] 
14:30:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0645B750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4540 ] 
14:30:06: Protected Area Size 0x28000
14:30:06: Bus Width           2
14:30:06: Secure Mode         0
14:30:06: Speed  Class        4
14:30:06: Perf Move           0
14:30:06: Au Size             9
14:30:06: Erase Size          15
14:30:06: Erase Timeout       1
14:30:06: Erase offset        1
14:30:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4541 ] 
14:30:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:06: Host Frequency set to 100000 KHz
14:30:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:06: ####CSD Registe 2.0 Values####
14:30:06: CSD_STRUCTURE                                 :0x1
14:30:06: Reserv1                                       :0x0
14:30:06: Time Access 1 TAAC                            :0xe
14:30:06: Time Access 2 NSAC*100                        :0x0
14:30:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:06: Card Command Classess CCC                     :0x5b5
14:30:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:06: DSR(driver stage register)  DSR_IMP           :0x0
14:30:06: Reserv2                                       :0x0
14:30:06: Device Size C_SIZE                            :0xedc8
14:30:06: Reserv3                                       :0x0
14:30:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:06: Reserv4                                       :0x0
14:30:06: Write Speed Factor R2W_FACTOR                 :0x2
14:30:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:06: FILE_FORMAT_GRP                               :0x0
14:30:06: COPY flag                                     :0x1
14:30:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:06: File_Format                                   :0x0
14:30:06: CRC                                           :0x0
14:30:06: ####CSD Registe Values####  

14:30:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7BD0>, <py_sfcl.CommandDataDefinition object at 0x05D7E1E0>) , Command count = 4542 ] 
14:30:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06467C30>, <py_sfcl.CommandDataDefinition object at 0x0642E2D0>) , Command count = 4543 ] 
14:30:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:30:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0642E8D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06431360>, <py_sfcl.PySEnhancedCmdData object at 0x0642A450>, <None>, <py_sfcl.Command23 object at 0x0642A480>) , Command count = 4544 ] 
14:30:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:30:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Inner loop Count 15
14:30:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:30:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DA7C30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0642E750>, <py_sfcl.PySEnhancedCmdData object at 0x0642EAB0>, <None>, <py_sfcl.Command23 object at 0x0642AC00>) , Command count = 4545 ] 
14:30:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:30:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06467B10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0645B030>, <py_sfcl.PySEnhancedCmdData object at 0x0645B510>, <None>, <py_sfcl.Command23 object at 0x0642A7B0>) , Command count = 4546 ] 
14:30:06: STPTRNSABRTST35_DVT_ST_CMD0_2_13_Before_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:08: Host Frequency set to 25000 KHz
14:30:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:08: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DAD180>, 0x0, True) , Command count = 4547 ] 
14:30:08: [GO18_globalSetVolt]### Host voltage value is set.
14:30:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x06467300>, 0x0, False) , Command count = 4548 ] 
14:30:08: [GO18_globalSetVolt]### Host voltage value is set.
14:30:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4549 ] 
14:30:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
