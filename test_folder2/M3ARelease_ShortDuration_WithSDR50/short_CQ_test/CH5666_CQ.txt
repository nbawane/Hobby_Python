15:39:59: Sata Disconnector Board found in COM1.
15:40:03: ***************************************************** 

15:40:03: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   * 

15:40:03: *                                                   * 

15:40:03: *  Compatibility with this version is not verified! * 

15:40:03: ***************************************************** 

15:40:06: [ DeviceSetupCompletion() , Command count = 7 ] 
15:40:06: Testname Mapping: ScriptName=[CH5666_CallAll_SCR_SDStatus] -> TestId=[CH5666]
15:40:06: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 8 ] 
15:40:06: [ GetPhysicalChipsInfo() , Command count = 9 ] 
15:40:06: [ GetFileSize(0xEA) , Command count = 10 ] 
15:40:06: [ ReadFile(<0xA00/0x200, Arb>, 0xEA, 0x1) , Command count = 11 ] 
15:40:06: [ GetFileSize(0x16) , Command count = 12 ] 
15:40:06: [ GetCardStatus() , Command count = 13 ] 
15:40:06: [ GetFileSize(0x18) , Command count = 14 ] 
15:40:06: [ ReadFile(<0x1000/0x200, Arb>, 0x18, 0x8) , Command count = 15 ] 
15:40:06: [ GetFileSize(0x15) , Command count = 16 ] 
15:40:06: [ ReadFile(<0x1000/0x200, Arb>, 0x15, 0x1) , Command count = 17 ] 
15:40:08: Can not find revision of File 21 in file 'config.xml' or card is in the ROM mode
15:40:08: [ GetFileSize(0xE) , Command count = 18 ] 
15:40:08: [ ReadFile(<0x1000/0x200, Arb>, 0xE, 0x1) , Command count = 19 ] 
15:40:08: [ GetFileSize(0x1E) , Command count = 20 ] 
15:40:08: [ GetCardStatus() , Command count = 21 ] 
15:40:08: [ GetFileSize(0x21) , Command count = 22 ] 
15:40:08: [ GetCardStatus() , Command count = 23 ] 
15:40:08: [ GetFileSize(0x33) , Command count = 24 ] 
15:40:08: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x33, 0x1) , Command count = 25 ] 
15:40:08: [ GetFileSize(0x1F) , Command count = 26 ] 
15:40:08: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x1F, 0x1) , Command count = 27 ] 
15:40:08: [ GetFileSize(0x2A) , Command count = 28 ] 
15:40:08: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x2A, 0x1) , Command count = 29 ] 
15:40:08: [ ReadCfgConf(<0x1000/0x200, Spc, pat:0x0>, 0x1) , Command count = 30 ] 
15:40:08: [ ReadFirmwareParameter(<0x1000/0x200, Spc, pat:0x0>, 0x2) , Command count = 31 ] 
15:40:08: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_BE) , Command count = 32 ] 
15:40:08: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_PRODUCT) , Command count = 33 ] 
15:40:08: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_FE_SD) , Command count = 34 ] 
15:40:08: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, 0x0) , Command count = 35 ] 
15:40:08: [ GetFileSize(0x33) , Command count = 36 ] 
15:40:08: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 37 ] 
15:40:08: [ GetFileSize(0x33) , Command count = 38 ] 
15:40:08: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 39 ] 
15:40:09: [ GetIpVersionInfo() , Command count = 40 ] 
15:40:09: [ GetPhysicalChipsInfo() , Command count = 41 ] 
15:40:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05C829F0>, <0x200/0x200, Arb>) , Command count = 42 ] 
15:40:09: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 43 ] 

<<<<<<<<<<<<<<<         TEST HEADER          >>>>>>>>>>>>>>>

Application                :  TestRunner.py
Application version        :  SD_DVT_CQ_Spec 6.0.0
Application folder         :  C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT
Command line               :  --protocol=sd --sdtestid=CH5666 --dbconnection=none --adapter=SD05771_ASVU --sdConfiguration=SDR50 --projectconfig=C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB --paramsfile=C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB\Colibri_SD_HC_I059_SDR104_Prem_C10_U1.txt --logfilename=C:\Results\CH5666_CQ.txt --CQ=1
Protocol                   :  sd
Serial number (CInfo)      :  sdin1091
Adapter                    :  SDR Tester (S#: SD05771_ASVU): (Slot#:0)
Adapter serial number      :  SD05771_ASVU
Adapter type               :  USD
Capacity                   :  32G
Firmware revision          :  6RB C030
Flashware revision         :  6RB C030
IP Version Info            :  '' 01.04.00... ID 0x20
                           :  '' 00.01.00... ID 0x10
Memory ID                  :  453CA9A27A510B140000000000000000
Controller                 :  81
Trim settings              :  <Unavailable>
Model revision             :  <Unavailable>
Stream name                :  <Unavailable>
FE IP                      :  1
Romware revision           :  RRBZ1152
Architecture               :  Gen 6
Model                      :  SanDisk   COLIBRI
Memory type                :  Unknown Device Type-2LC x 1
ASIC id                    :  81
Controller type            :  Unknown Controller   UMC-J
Driver version (actual)    :  10.0.0.1 (0x a.0.0.1)
Driver version (released)  :  7.1.4.3 (0x 7.1.4.3)
Date and time              :  2016-11-29 15:40:09
Host name                  :  SDDVT_Test2
Host IP address            :  10.65.153.121
Operating system           :  Microsoft Windows [Version 6.1.7601] Service Pack 1
SanDisk Python version     :  1.17.5rc3
CTF/PySFCL build number    :  1.3.217491.217491
PySFCL version             :  1.3.217491
CTF version                :  1.3
Python version             :  2.4.2
Project Name(Validation)   :  <None>


<<<<<<<<<<<<<<<      SFCL CONFIGURATION      >>>>>>>>>>>>>>>

[SD enumeration]
cmdtiming=0
useRelay=0
autocompare=0
relayPolarity=1
relaySleep=500
measureCmdLatency=1
logicalChunkSize=0
diagDisabled=0
diagCmdTimeout=800
useVddf=on
nethostloglevel=
nethostautoCompare=on
CmdManShowProgress=off
nethostsendtimeout=240000
nethostreceivetimeout=240000
countOfRetryCmdIfCrc=3
enableOORPatch=
lbaForSctpCommands=0x100
subProtocol=0
doDle=0
diagnosticChunkSize=128
logmsgformat=timeMessage
logtimeformat=time
relaySlot=0
unloadDll=on
hardTimeoutUnloadDll=on
minDuration=7200
remoteDevice=
skipProduction=0
ishighspeedmode=0
highfreqinhz=500
modeldelaytimeindiagnostic=0
cqDataTransferPollingShortInterval=1000
cqDataStatusPollingLongInterval=1800000
sataPort0ToRelaySlot=0
sataPort1ToRelaySlot=0
sataPort2ToRelaySlot=0
sataPort3ToRelaySlot=0
relayToComportMapping=1
sdbToComportMapping=1
sataAdapterPort0=0
sataAdapterPort1=0
sataAdapterPort2=0
sataAdapterPort3=0
sataPort0ToMubIndx=1
sataPort1ToMubIndx=1
sataPort2ToMubIndx=1
sataPort3ToMubIndx=1

[Common]
enableChunkTraces=off
enablePythonTraceback=1
sctpPhaseDelay=0
printcommandcount=on
debugfilepath=
initXMLPath=\\regression.lab.sandisk.com\shared\configurations
delayBeforePwrCycle=0
delayAfterPwrCycle=0
reportCountStatistics=1
reportPackage=0
sfclConfig=Common

<<<<<<<<<<<<<<<          CARD INFO           >>>>>>>>>>>>>>>

Number Of LBAs  :  0x3b72400
Card Is Locked  :  No
Secure Area     :  0x28000
Card Secure     :  No
WP map          :

<<<<<<<<<<<<<<<           CID INFO           >>>>>>>>>>>>>>>

Manufacturer Id  :  0x3
Card/BGA         :  0
Application Id   :  0x5344
ProductName      :  AGGCD
ProductRev       :  0x80
SerialNumber     :  0x23482900
Reserved         :  0x23482900
Year             :  2000
Month            :  11
CRC Check Sum    :  0x5
Not Used         :

<<<<<<<<<<<<<<<           CSD INFO           >>>>>>>>>>>>>>>

CSD Structure                     :  0x1
reserv. 1                         :  0x0
TAAC                              :  0xe
NSAC*100                          :  0x0
data transfer rate                :  0x32
card command classes CCC          :  0x5b5
max. read data Blk. length        :  0x9
partial blocks for read allowed   :  0x0
write block misalignment          :  0x0
read block misalignment           :  0x0
DSR implemented                   :  0x0
reserved 2                        :  0x0
device size                       :  0xedc8
Reserv3                           :  0x0
SD Erase Blk Len En               :  0x1
SD Sec Size                       :  0x7f
write protect group size          :  0x0
write protect group enable        :  0x0
Reserv4                           :  0x0
write speed factor                :  0x2
max. write data blk. length       :  0x9
partial blocks for write allowed  :  0x0
File Format Group                 :  0x0
copy flag(OTP)                    :  0x1
permanent write protection        :  0x0
temporary write protection        :  0x0
File Format                       :  0x0
CRC                               :  0x0
<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165964
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165964
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

<<<<<<<<<<<<<<<    COMMAND LINE ARGUMENTS    >>>>>>>>>>>>>>>


Processed command-line options:
   --protocol                                       : sd
   --adapterspecifier                               : ain:-1,desc:SD05771_ASVU
   --extcmdset                                      : FBCC
   --sdtestid                                       : CH5666
   --sdconfiguration                                : SDR50
   --cyclecount                                     : 1
   --testduration                                   : 20h
   --writereadpercent                               : 100
   --paramsfile                                     : 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB\Colibri_SD_HC_I059_SDR104_Prem_C10_U1.txt'
   --randomseed                                     : 79377158376
   --projectconfig                                  : C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB
   --logfiledir                                     : C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\DvtTestLogs
   --hostlog                                        : 0
   --cq                                             : 1
   --dbconnection                                   : 'none'
   --temperature                                    : 25
   --voltage                                        : 0.00
   --logfilename                                    : 'C:\Results\CH5666_CQ.txt'
   --logtostdout                                    : Y
   --overwriteexistinglogfile                       : Y
   --logrotationspecifier                           : NoRotation
   --loglevel                                       : <4, INFO>
   --testcomment                                    : None
   --dbproject                                      : CTFW_QA
   --mdfwprojectid                                  : None
   --mdconfigid                                     : None
   --mdtestid                                       : None
   --valid                                          : True
   --waitTime                                       : None
   --jitter                                         : F
   --testlimits                                     : <None>-<None>
   --LabID                                          : None
   --DutID                                          : None
   --LaunchId                                       : None
   --TestQueueId                                    : None
   --xfermode                                       : <N>
   --networkperiod                                  : <N>
   --networkpath                                    : <N>
   --dumpfile                                       : 
   --printcommandcount                              : N
   --debugfilepath                                  : <N>
   --chpfilename                                    : <N>
   --enablecmdhistory                               : Y
   --cmdhistextfilename                             : <N>
   --cmdhistcsvfilename                             : <N>
   --histdisplaysizes                               : 0,250
   --stoponcommands                                 : <N>
   --notifyemailid                                  : <N>
   --spyoncommands                                  : <N>
   --notifyoncommands                               : <N>
   --CmdManShowProgress                             : 'off'
   --enablePowerCycle                               : '1'
   --measureCmdLatency                              : '1'
   --useVddf                                        : 'on'
   --gvi                                            : 'off'
   --gviOnFly                                       : 'off'
   --gviEncryption                                  : '0'
   --remoteDevice                                   : ''
   --skipProduction                                 : '0'
   --forceMultipleMode                              : 'off'
   --countOfRetryCmdIfCrc                           : '3'
   --enableOORPatch                                 : 'on'
   --connectonly                                    : 'off'
   --nethostautocompare                             : 'on'
   --nethostpowercycle                              : '0'
   --nethostloglevel                                : '3'
   --nethostlogconsole                              : '0'
   --nethostsanitychecks                            : '0'
   --nethostsendtimeout                             : '240000'
   --nethostreceivetimeout                          : '240000'
   --subProtocol                                    : '0'
   --useVccq                                        : '3.3'
   --maxprotocoloverhead                            : '0'
   --maxprotocoltimingmode                          : '0'
   --isHighSpeedMode                                : '0'
   --highFreqInHz                                   : '500'
   --doDle                                          : '0'
   --lbaForSctpCommands                             : '0x100'
   --cmdfilename                                    : ''
   --cmdtofilewrites                                : '0'
   --cmdtiming                                      : '0'
   --cmdtocsv                                       : '0'
   --logicalChunkSize                               : '0'
   --diagnosticChunkSize                            : '128'
   --readChunkSize                                  : '0'
   --writeChunkSize                                 : '0'
   --useRelay                                       : '0'
   --sataPort0ToRelaySlot                           : '0'
   --sataPort1ToRelaySlot                           : '0'
   --sataPort2ToRelaySlot                           : '0'
   --sataPort3ToRelaySlot                           : '0'
   --relayToComportMapping                          : '1'
   --useSDB                                         : '0'
   --sdbToComportMapping                            : '1'
   --sataAdapterPort0                               : '0'
   --sataAdapterPort1                               : '0'
   --sataAdapterPort2                               : '0'
   --sataAdapterPort3                               : '0'
   --relayPolarity                                  : '1'
   --relaySleep                                     : '500'
   --diagCmdTimeout                                 : '800'
   --diagDisabled                                   : '0'
   --hardTimeout                                    : '30000'
   --commandscriptfolder                            : ''
   --commandscriptstart                             : '0'
   --logmsgformat                                   : 'timeMessage'
   --logtimeformat                                  : 'time'
   --relaySlot                                      : '0'
   --atbuRelaySlot                                  : '3'
   --diskCacheStore                                 : ''
   --stopOnStart                                    : '0'
   --notifyserver                                   : ''
   --notifyretry                                    : '2'
   --notifytimeout                                  : '60'
   --failonnotifytimeout                            : '0'
   --revertactions                                  : ''
   --timechangedetection                            : '0'
   --timechangecondition                            : '600'
   --timechangecheckinterval                        : '1000'
   --inputmonitor                                   : '1'
   --logtimeprecision                               : '2'
   --nonSndkDevEnumeration                          : '0'
   --modelini                                       : 'C:\Program Files\SanDisk\CTF\Dlls\model.ini'
   --sfclini                                        : 'C:\Program Files\SanDisk\CTF\Dlls\sfcl.ini'
   --relayForceDownload                             : 'off'
   --powercycleoninit                               : 'off'
   --stopBgOperationOnFail                          : 'off'
   --autocompare                                    : '0'
   --autocompareRandomseed                          : '12345678'
   --modeldelaytimeindiagnostic                     : '0'
   --ForceDownloadMechanism                         : '0'
   --EnableUARTDebugLog                             : '0'
   --UARTBaudRate                                   : '230400'
   --SerialUARTToCom                                : '0'
   --UARTDebugFilePath                              : ''
   --sataPort0ToMubIndx                             : '1'
   --sataPort1ToMubIndx                             : '1'
   --sataPort2ToMubIndx                             : '1'
   --sataPort3ToMubIndx                             : '1'
   --fclStep                                        : '0'
   --fclCollectReads                                : '0'
   --fclCollectWrites                               : '0'
   --fclCollectErases                               : '0'
   --fclCollectAOMReads                             : '0'
   --fclAomBase                                     : '10'
   --aomStep                                        : '0'
   --aomMapFile                                     : '0'
   --fclAomSaveFilesStep                            : '1000'
   --gfa                                            : '0'
   --atbuSoftwareLocation                           : ''
   --atbuMemoryName                                 : ''
   --atbuProfilesLocation                           : ''
   --atbuThresholdValue                             : '0'
   --atbuTransitionTime                             : '0'
   --atbuDcCompensation                             : ''


<<<<<<<<<<<<<<< RUNNING TEST: CH5666_CallAll_SCR_SDStatus >>>>>>>>>>>>>>>



15:40:09: MaxLba of the card: 0x3B72400 
15:40:10: ###### Running CallAll_SCR_SDStatus scripts  ######
15:40:10: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables STARTED
15:40:10: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

15:40:10: Perform Power Off and On.
15:40:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:40:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 44 ] 
15:40:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:40:12: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
15:40:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:40:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:40:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:40:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:40:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D381B0>, <py_sfcl.CommandDataDefinition object at 0x05D381E0>) , Command count = 45 ] 
15:40:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:40:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D38300>, <py_sfcl.CommandDataDefinition object at 0x05D38330>) , Command count = 46 ] 
15:40:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
15:40:12: [ SetCardRCA(0x1, 0xD555) , Command count = 47 ] 
15:40:12: [DVTCommonLib]### Identification :Idenfication of card completed 

15:40:18: FPGA Image Downloaded Is:C:\Program Files\SanDisk\CTF\FPGA\SD_CQ_SDR2_2-20-00-0002.bin
15:40:18: [GO7_globalPreTestingSettings]### Default Initialization Start
15:40:18: [DVTCommonLib]###  SwitchHostVoltageRegion called
15:40:19: [ SwitchHostVoltageRegion(False) , Command count = 48 ] 
15:40:19: [DVTCommonLib]###  SwitchHostVoltageRegion Completed 

15:40:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 49 ] 
15:40:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 50 ] 
15:40:21: [ CardInit() , Command count = 51 ] 
15:40:21: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 52 ] 

<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165964
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165964
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

15:40:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:40:21: ####CSD Registe 2.0 Values####
15:40:21: CSD_STRUCTURE                                 :0x1
15:40:21: Reserv1                                       :0x0
15:40:21: Time Access 1 TAAC                            :0xe
15:40:21: Time Access 2 NSAC*100                        :0x0
15:40:21: Data Transfer Rate TRAN_SPEED                 :0x32
15:40:21: Card Command Classess CCC                     :0x5b5
15:40:21: Max Read Data Block Length  READ_BL_LEN       :0x9
15:40:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:40:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:40:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:40:21: DSR(driver stage register)  DSR_IMP           :0x0
15:40:21: Reserv2                                       :0x0
15:40:21: Device Size C_SIZE                            :0xedc8
15:40:21: Reserv3                                       :0x0
15:40:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:40:21: Erase Sector Size SECTOR_SIZE                 :0x7f
15:40:21: Write Protect Group Size WP_GRP_SIZE          :0x0
15:40:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:40:21: Reserv4                                       :0x0
15:40:21: Write Speed Factor R2W_FACTOR                 :0x2
15:40:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:40:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:40:21: FILE_FORMAT_GRP                               :0x0
15:40:21: COPY flag                                     :0x1
15:40:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:40:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:40:21: File_Format                                   :0x0
15:40:21: CRC                                           :0x0
15:40:21: ####CSD Registe Values####  

15:40:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
15:40:21: ProductSerialNumber = 0x23482900
15:40:21: CardMaximumLBA      = 0x3b72400
15:40:21: CardCapacity        = 32G
15:40:21: Is card secure      = 0
15:40:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

15:40:21: [GO7_globalPreTestingSettings]### Default Initialization Completed 


15:40:21: [GO4_globalInitCard]### Switch to Specify Card Type
15:40:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:40:23: Host Frequency set to 25000 KHz
15:40:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:40:23: [GO18_globalSetVolt]### Set Host Voltage value.
15:40:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
15:40:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D40CF0>, 0x0, True) , Command count = 53 ] 
15:40:23: [GO18_globalSetVolt]### Host voltage value is set.
15:40:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
15:40:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D40E10>, 0x0, False) , Command count = 54 ] 
15:40:23: [GO18_globalSetVolt]### Host voltage value is set.
15:40:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 55 ] 
15:40:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:40:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 56 ] 
15:40:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:40:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:40:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:40:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:40:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:40:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 57 ] 
15:40:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:40:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:40:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D98030>, <py_sfcl.CommandDataDefinition object at 0x05D98060>) , Command count = 58 ] 
15:40:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:40:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D980C0>, <py_sfcl.CommandDataDefinition object at 0x05D980F0>) , Command count = 59 ] 
15:40:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:40:23: [ SetCardRCA(0x1, 0xD555) , Command count = 60 ] 
15:40:23: [DVTCommonLib]### Identification :Idenfication of card completed 

15:40:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:40:24: Host Frequency set to 25000 KHz
15:40:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:40:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:40:24: ####CSD Registe 2.0 Values####
15:40:24: CSD_STRUCTURE                                 :0x1
15:40:24: Reserv1                                       :0x0
15:40:24: Time Access 1 TAAC                            :0xe
15:40:24: Time Access 2 NSAC*100                        :0x0
15:40:24: Data Transfer Rate TRAN_SPEED                 :0x32
15:40:24: Card Command Classess CCC                     :0x5b5
15:40:24: Max Read Data Block Length  READ_BL_LEN       :0x9
15:40:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:40:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:40:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:40:24: DSR(driver stage register)  DSR_IMP           :0x0
15:40:24: Reserv2                                       :0x0
15:40:24: Device Size C_SIZE                            :0xedc8
15:40:24: Reserv3                                       :0x0
15:40:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:40:24: Erase Sector Size SECTOR_SIZE                 :0x7f
15:40:24: Write Protect Group Size WP_GRP_SIZE          :0x0
15:40:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:40:24: Reserv4                                       :0x0
15:40:24: Write Speed Factor R2W_FACTOR                 :0x2
15:40:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:40:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:40:24: FILE_FORMAT_GRP                               :0x0
15:40:24: COPY flag                                     :0x1
15:40:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:40:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:40:24: File_Format                                   :0x0
15:40:24: CRC                                           :0x0
15:40:24: ####CSD Registe Values####  

15:40:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:40:24: [GetSCRRegisterEntry] Passed
15:40:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:40:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:40:24: Data_Status_After Erases          : 0
15:40:24: CPRM Security Support             : No Security
15:40:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:40:24: Spec. Version                     : Version 3.0X
15:40:24: Extended Security Support         : Extended_Security_Not_Supported
15:40:24: Command Support                   : COMMAND_SUPPORT
15:40:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:40:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D98360>, <py_sfcl.CommandDataDefinition object at 0x05D98180>) , Command count = 61 ] 
15:40:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:40:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D981E0>, <py_sfcl.CommandDataDefinition object at 0x05D98210>) , Command count = 62 ] 
15:40:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:40:24: [ SetBusWidth(0x4) , Command count = 63 ] 
15:40:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:40:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05D98330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 64 ] 
15:40:24: Protected Area Size 0x28000
15:40:24: Bus Width           2
15:40:24: Secure Mode         0
15:40:24: Speed  Class        4
15:40:24: Perf Move           0
15:40:24: Au Size             9
15:40:24: Erase Size          15
15:40:24: Erase Timeout       1
15:40:24: Erase offset        1
15:40:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:40:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
15:40:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:40:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 65 ] 
15:40:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
15:40:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:40:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
15:40:24: Host Frequency set to 100000 KHz
15:40:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
15:40:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:40:24: ####CSD Registe 2.0 Values####
15:40:24: CSD_STRUCTURE                                 :0x1
15:40:24: Reserv1                                       :0x0
15:40:24: Time Access 1 TAAC                            :0xe
15:40:24: Time Access 2 NSAC*100                        :0x0
15:40:24: Data Transfer Rate TRAN_SPEED                 :0xb
15:40:24: Card Command Classess CCC                     :0x5b5
15:40:24: Max Read Data Block Length  READ_BL_LEN       :0x9
15:40:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:40:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:40:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:40:24: DSR(driver stage register)  DSR_IMP           :0x0
15:40:24: Reserv2                                       :0x0
15:40:24: Device Size C_SIZE                            :0xedc8
15:40:24: Reserv3                                       :0x0
15:40:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:40:24: Erase Sector Size SECTOR_SIZE                 :0x7f
15:40:24: Write Protect Group Size WP_GRP_SIZE          :0x0
15:40:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:40:24: Reserv4                                       :0x0
15:40:24: Write Speed Factor R2W_FACTOR                 :0x2
15:40:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:40:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:40:24: FILE_FORMAT_GRP                               :0x0
15:40:24: COPY flag                                     :0x1
15:40:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:40:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:40:24: File_Format                                   :0x0
15:40:24: CRC                                           :0x0
15:40:24: ####CSD Registe Values####  

15:40:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D98720>, <py_sfcl.CommandDataDefinition object at 0x05D98540>) , Command count = 66 ] 
15:40:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:40:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D985A0>, <py_sfcl.CommandDataDefinition object at 0x05D985D0>) , Command count = 67 ] 
15:40:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:40:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:40:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05D98660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 68 ] 
15:40:24: Protected Area Size 0x28000
15:40:24: Bus Width           2
15:40:24: Secure Mode         0
15:40:24: Speed  Class        4
15:40:24: Perf Move           0
15:40:24: Au Size             9
15:40:24: Erase Size          15
15:40:24: Erase Timeout       1
15:40:24: Erase offset        1
15:40:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:40:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


15:40:24: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
15:40:24: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

15:40:24: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables COMPLETED
15:40:24: ########################################
15:40:24: Stated Running script CH502_DVT_SD300_3_6_1_1_SCR_SDStatus_StructureTest 
15:40:24: ########################################
15:40:24: [CH502_DVT_SD3.00_3_6_1_1_SCR_SDStatus_StructureTest.py]###### SCR SD Status Structure test.  ######
15:40:24: [CH502_DVT_SD3.00_3_6_1_1_SCR_SDStatus_StructureTest] TEST SCRIPT EXECUTION IS STARTED.
15:40:24: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

15:40:24: Perform Power Off and On.
15:40:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:40:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 69 ] 
15:40:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:40:26: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
15:40:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:40:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:40:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:40:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:40:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D98F90>, <py_sfcl.CommandDataDefinition object at 0x05D98E70>) , Command count = 70 ] 
15:40:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:40:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D98F00>, <py_sfcl.CommandDataDefinition object at 0x05D98FC0>) , Command count = 71 ] 
15:40:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
15:40:26: [ SetCardRCA(0x1, 0xD555) , Command count = 72 ] 
15:40:26: [DVTCommonLib]### Identification :Idenfication of card completed 

15:40:26: [GO4_globalInitCard]### Switch to Specify Card Type
15:40:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:40:28: Host Frequency set to 25000 KHz
15:40:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:40:28: [GO18_globalSetVolt]### Set Host Voltage value.
15:40:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
15:40:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DA3240>, 0x0, True) , Command count = 73 ] 
15:40:28: [GO18_globalSetVolt]### Host voltage value is set.
15:40:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
15:40:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DA3090>, 0x0, False) , Command count = 74 ] 
15:40:28: [GO18_globalSetVolt]### Host voltage value is set.
15:40:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 75 ] 
15:40:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:40:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 76 ] 
15:40:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:40:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:40:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:40:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:40:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:40:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 77 ] 
15:40:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:40:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:40:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3210>, <py_sfcl.CommandDataDefinition object at 0x05DA31B0>) , Command count = 78 ] 
15:40:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:40:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3270>, <py_sfcl.CommandDataDefinition object at 0x05DA32A0>) , Command count = 79 ] 
15:40:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:40:28: [ SetCardRCA(0x1, 0xD555) , Command count = 80 ] 
15:40:29: [DVTCommonLib]### Identification :Idenfication of card completed 

15:40:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:40:29: Host Frequency set to 25000 KHz
15:40:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:40:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:40:29: ####CSD Registe 2.0 Values####
15:40:29: CSD_STRUCTURE                                 :0x1
15:40:29: Reserv1                                       :0x0
15:40:29: Time Access 1 TAAC                            :0xe
15:40:29: Time Access 2 NSAC*100                        :0x0
15:40:29: Data Transfer Rate TRAN_SPEED                 :0x32
15:40:29: Card Command Classess CCC                     :0x5b5
15:40:29: Max Read Data Block Length  READ_BL_LEN       :0x9
15:40:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:40:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:40:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:40:29: DSR(driver stage register)  DSR_IMP           :0x0
15:40:29: Reserv2                                       :0x0
15:40:29: Device Size C_SIZE                            :0xedc8
15:40:29: Reserv3                                       :0x0
15:40:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:40:29: Erase Sector Size SECTOR_SIZE                 :0x7f
15:40:29: Write Protect Group Size WP_GRP_SIZE          :0x0
15:40:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:40:29: Reserv4                                       :0x0
15:40:29: Write Speed Factor R2W_FACTOR                 :0x2
15:40:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:40:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:40:29: FILE_FORMAT_GRP                               :0x0
15:40:29: COPY flag                                     :0x1
15:40:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:40:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:40:29: File_Format                                   :0x0
15:40:29: CRC                                           :0x0
15:40:29: ####CSD Registe Values####  

15:40:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:40:29: [GetSCRRegisterEntry] Passed
15:40:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:40:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:40:29: Data_Status_After Erases          : 0
15:40:29: CPRM Security Support             : No Security
15:40:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:40:29: Spec. Version                     : Version 3.0X
15:40:29: Extended Security Support         : Extended_Security_Not_Supported
15:40:29: Command Support                   : COMMAND_SUPPORT
15:40:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:40:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3510>, <py_sfcl.CommandDataDefinition object at 0x05DA3330>) , Command count = 81 ] 
15:40:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:40:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3390>, <py_sfcl.CommandDataDefinition object at 0x05DA33C0>) , Command count = 82 ] 
15:40:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:40:29: [ SetBusWidth(0x4) , Command count = 83 ] 
15:40:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:40:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DA3480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 84 ] 
15:40:29: Protected Area Size 0x28000
15:40:29: Bus Width           2
15:40:29: Secure Mode         0
15:40:29: Speed  Class        4
15:40:29: Perf Move           0
15:40:29: Au Size             9
15:40:29: Erase Size          15
15:40:29: Erase Timeout       1
15:40:29: Erase offset        1
15:40:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:40:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
15:40:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:40:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 85 ] 
15:40:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
15:40:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:40:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
15:40:29: Host Frequency set to 100000 KHz
15:40:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
15:40:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:40:29: ####CSD Registe 2.0 Values####
15:40:29: CSD_STRUCTURE                                 :0x1
15:40:29: Reserv1                                       :0x0
15:40:29: Time Access 1 TAAC                            :0xe
15:40:29: Time Access 2 NSAC*100                        :0x0
15:40:29: Data Transfer Rate TRAN_SPEED                 :0xb
15:40:29: Card Command Classess CCC                     :0x5b5
15:40:29: Max Read Data Block Length  READ_BL_LEN       :0x9
15:40:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:40:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:40:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:40:29: DSR(driver stage register)  DSR_IMP           :0x0
15:40:29: Reserv2                                       :0x0
15:40:29: Device Size C_SIZE                            :0xedc8
15:40:29: Reserv3                                       :0x0
15:40:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:40:29: Erase Sector Size SECTOR_SIZE                 :0x7f
15:40:29: Write Protect Group Size WP_GRP_SIZE          :0x0
15:40:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:40:29: Reserv4                                       :0x0
15:40:29: Write Speed Factor R2W_FACTOR                 :0x2
15:40:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:40:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:40:29: FILE_FORMAT_GRP                               :0x0
15:40:29: COPY flag                                     :0x1
15:40:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:40:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:40:29: File_Format                                   :0x0
15:40:29: CRC                                           :0x0
15:40:29: ####CSD Registe Values####  

15:40:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3750>, <py_sfcl.CommandDataDefinition object at 0x05DA3570>) , Command count = 86 ] 
15:40:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:40:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA35D0>, <py_sfcl.CommandDataDefinition object at 0x05DA3600>) , Command count = 87 ] 
15:40:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:40:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


15:40:29: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
15:40:29: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

15:40:29: [CH502_DVT_SD3.00_3_6_1_1_SCR_SDStatus_StructureTest] LOOP NUMBER 0 IS STARTED.
15:40:29: [GetSCRRegisterEntry] Passed
15:40:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:40:29: [GetSCRRegisterEntry] Passed
15:40:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:40:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:40:29: Data_Status_After Erases          : 0
15:40:29: CPRM Security Support             : No Security
15:40:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:40:29: Spec. Version                     : Version 3.0X
15:40:29: Extended Security Support         : Extended_Security_Not_Supported
15:40:29: Command Support                   : COMMAND_SUPPORT
15:40:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:40:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D98F60>, <py_sfcl.CommandDataDefinition object at 0x05DA3720>) , Command count = 88 ] 
15:40:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:40:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA37B0>, <py_sfcl.CommandDataDefinition object at 0x05DA37E0>) , Command count = 89 ] 
15:40:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:40:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3660>, <py_sfcl.CommandDataDefinition object at 0x05DA3840>) , Command count = 90 ] 
15:40:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:40:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA38A0>, <py_sfcl.CommandDataDefinition object at 0x05DA38D0>) , Command count = 91 ] 
15:40:29: ACMD13[ SD_STATUS ] Passed with R1 type response:[13, 0, 0, 9, 32, 11]
15:40:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA36C0>, <py_sfcl.CommandDataDefinition object at 0x05DA3930>) , Command count = 92 ] 
15:40:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:40:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3990>, <py_sfcl.CommandDataDefinition object at 0x05DA39C0>) , Command count = 93 ] 
15:40:29: ACMD13[ SD_STATUS ] Passed with R1 type response:[13, 0, 0, 9, 32, 11]
15:40:29: Bus Width is set to 4.
15:40:29: Bus Width is set to 4
15:40:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3A20>, <py_sfcl.CommandDataDefinition object at 0x05DA3A50>) , Command count = 94 ] 
15:40:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:40:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3AB0>, <py_sfcl.CommandDataDefinition object at 0x05DA3AE0>) , Command count = 95 ] 
15:40:29: ACMD13[ SD_STATUS ] Passed with R1 type response:[13, 0, 0, 9, 32, 11]
15:40:29: [CH5025_Utility_RandomCommandBlock]##### Single Write to the card from startLba:0x18EA22B to endSector:0x18EA32B
15:40:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :SingleWrite from StartLba: 0x18EA22B to EndLba:0x18EA32B with Increment Pattern
15:40:29: [ WrLbaNoData(0x18EA22B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 96 ] 
15:40:29: [ WrLbaNoData(0x18EA22C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 97 ] 
15:40:29: [ WrLbaNoData(0x18EA22D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 98 ] 
15:40:29: [ WrLbaNoData(0x18EA22E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 99 ] 
15:40:29: [ WrLbaNoData(0x18EA22F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 100 ] 
15:40:29: [ WrLbaNoData(0x18EA230, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 101 ] 
15:40:29: [ WrLbaNoData(0x18EA231, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 102 ] 
15:40:29: [ WrLbaNoData(0x18EA232, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 103 ] 
15:40:29: [ WrLbaNoData(0x18EA233, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 104 ] 
15:40:29: [ WrLbaNoData(0x18EA234, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 105 ] 
15:40:29: [ WrLbaNoData(0x18EA235, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 106 ] 
15:40:29: [ WrLbaNoData(0x18EA236, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 107 ] 
15:40:29: [ WrLbaNoData(0x18EA237, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 108 ] 
15:40:29: [ WrLbaNoData(0x18EA238, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 109 ] 
15:40:29: [ WrLbaNoData(0x18EA239, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 110 ] 
15:40:29: [ WrLbaNoData(0x18EA23A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 111 ] 
15:40:29: [ WrLbaNoData(0x18EA23B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 112 ] 
15:40:29: [ WrLbaNoData(0x18EA23C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 113 ] 
15:40:29: [ WrLbaNoData(0x18EA23D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 114 ] 
15:40:29: [ WrLbaNoData(0x18EA23E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 115 ] 
15:40:29: [ WrLbaNoData(0x18EA23F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 116 ] 
15:40:29: [ WrLbaNoData(0x18EA240, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 117 ] 
15:40:29: [ WrLbaNoData(0x18EA241, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 118 ] 
15:40:29: [ WrLbaNoData(0x18EA242, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 119 ] 
15:40:29: [ WrLbaNoData(0x18EA243, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 120 ] 
15:40:29: [ WrLbaNoData(0x18EA244, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 121 ] 
15:40:29: [ WrLbaNoData(0x18EA245, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 122 ] 
15:40:29: [ WrLbaNoData(0x18EA246, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 123 ] 
15:40:29: [ WrLbaNoData(0x18EA247, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 124 ] 
15:40:29: [ WrLbaNoData(0x18EA248, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 125 ] 
15:40:29: [ WrLbaNoData(0x18EA249, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 126 ] 
15:40:29: [ WrLbaNoData(0x18EA24A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 127 ] 
15:40:29: [ WrLbaNoData(0x18EA24B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 128 ] 
15:40:29: [ WrLbaNoData(0x18EA24C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 129 ] 
15:40:29: [ WrLbaNoData(0x18EA24D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 130 ] 
15:40:29: [ WrLbaNoData(0x18EA24E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 131 ] 
15:40:29: [ WrLbaNoData(0x18EA24F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 132 ] 
15:40:29: [ WrLbaNoData(0x18EA250, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 133 ] 
15:40:29: [ WrLbaNoData(0x18EA251, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 134 ] 
15:40:29: [ WrLbaNoData(0x18EA252, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 135 ] 
15:40:29: [ WrLbaNoData(0x18EA253, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 136 ] 
15:40:29: [ WrLbaNoData(0x18EA254, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 137 ] 
15:40:29: [ WrLbaNoData(0x18EA255, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 138 ] 
15:40:29: [ WrLbaNoData(0x18EA256, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 139 ] 
15:40:29: [ WrLbaNoData(0x18EA257, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 140 ] 
15:40:29: [ WrLbaNoData(0x18EA258, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 141 ] 
15:40:29: [ WrLbaNoData(0x18EA259, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 142 ] 
15:40:29: [ WrLbaNoData(0x18EA25A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 143 ] 
15:40:29: [ WrLbaNoData(0x18EA25B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 144 ] 
15:40:29: [ WrLbaNoData(0x18EA25C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 145 ] 
15:40:29: [ WrLbaNoData(0x18EA25D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 146 ] 
15:40:29: [ WrLbaNoData(0x18EA25E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 147 ] 
15:40:29: [ WrLbaNoData(0x18EA25F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 148 ] 
15:40:29: [ WrLbaNoData(0x18EA260, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 149 ] 
15:40:29: [ WrLbaNoData(0x18EA261, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 150 ] 
15:40:29: [ WrLbaNoData(0x18EA262, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 151 ] 
15:40:29: [ WrLbaNoData(0x18EA263, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 152 ] 
15:40:29: [ WrLbaNoData(0x18EA264, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 153 ] 
15:40:29: [ WrLbaNoData(0x18EA265, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 154 ] 
15:40:29: [ WrLbaNoData(0x18EA266, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 155 ] 
15:40:30: [ WrLbaNoData(0x18EA267, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 156 ] 
15:40:30: [ WrLbaNoData(0x18EA268, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 157 ] 
15:40:30: [ WrLbaNoData(0x18EA269, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 158 ] 
15:40:30: [ WrLbaNoData(0x18EA26A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 159 ] 
15:40:30: [ WrLbaNoData(0x18EA26B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 160 ] 
15:40:30: [ WrLbaNoData(0x18EA26C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 161 ] 
15:40:30: [ WrLbaNoData(0x18EA26D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 162 ] 
15:40:30: [ WrLbaNoData(0x18EA26E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 163 ] 
15:40:30: [ WrLbaNoData(0x18EA26F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 164 ] 
15:40:30: [ WrLbaNoData(0x18EA270, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 165 ] 
15:40:30: [ WrLbaNoData(0x18EA271, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 166 ] 
15:40:30: [ WrLbaNoData(0x18EA272, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 167 ] 
15:40:30: [ WrLbaNoData(0x18EA273, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 168 ] 
15:40:30: [ WrLbaNoData(0x18EA274, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 169 ] 
15:40:30: [ WrLbaNoData(0x18EA275, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 170 ] 
15:40:30: [ WrLbaNoData(0x18EA276, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 171 ] 
15:40:30: [ WrLbaNoData(0x18EA277, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 172 ] 
15:40:30: [ WrLbaNoData(0x18EA278, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 173 ] 
15:40:30: [ WrLbaNoData(0x18EA279, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 174 ] 
15:40:30: [ WrLbaNoData(0x18EA27A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 175 ] 
15:40:30: [ WrLbaNoData(0x18EA27B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 176 ] 
15:40:30: [ WrLbaNoData(0x18EA27C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 177 ] 
15:40:30: [ WrLbaNoData(0x18EA27D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 178 ] 
15:40:30: [ WrLbaNoData(0x18EA27E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 179 ] 
15:40:30: [ WrLbaNoData(0x18EA27F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 180 ] 
15:40:30: [ WrLbaNoData(0x18EA280, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 181 ] 
15:40:30: [ WrLbaNoData(0x18EA281, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 182 ] 
15:40:30: [ WrLbaNoData(0x18EA282, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 183 ] 
15:40:30: [ WrLbaNoData(0x18EA283, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 184 ] 
15:40:30: [ WrLbaNoData(0x18EA284, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 185 ] 
15:40:30: [ WrLbaNoData(0x18EA285, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 186 ] 
15:40:30: [ WrLbaNoData(0x18EA286, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 187 ] 
15:40:30: [ WrLbaNoData(0x18EA287, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 188 ] 
15:40:30: [ WrLbaNoData(0x18EA288, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 189 ] 
15:40:30: [ WrLbaNoData(0x18EA289, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 190 ] 
15:40:30: [ WrLbaNoData(0x18EA28A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 191 ] 
15:40:30: [ WrLbaNoData(0x18EA28B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 192 ] 
15:40:30: [ WrLbaNoData(0x18EA28C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 193 ] 
15:40:30: [ WrLbaNoData(0x18EA28D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 194 ] 
15:40:30: [ WrLbaNoData(0x18EA28E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 195 ] 
15:40:30: [ WrLbaNoData(0x18EA28F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 196 ] 
15:40:30: [ WrLbaNoData(0x18EA290, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 197 ] 
15:40:30: [ WrLbaNoData(0x18EA291, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 198 ] 
15:40:30: [ WrLbaNoData(0x18EA292, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 199 ] 
15:40:30: [ WrLbaNoData(0x18EA293, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 200 ] 
15:40:30: [ WrLbaNoData(0x18EA294, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 201 ] 
15:40:30: [ WrLbaNoData(0x18EA295, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 202 ] 
15:40:30: [ WrLbaNoData(0x18EA296, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 203 ] 
15:40:30: [ WrLbaNoData(0x18EA297, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 204 ] 
15:40:30: [ WrLbaNoData(0x18EA298, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 205 ] 
15:40:30: [ WrLbaNoData(0x18EA299, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 206 ] 
15:40:31: [ WrLbaNoData(0x18EA29A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 207 ] 
15:40:31: [ WrLbaNoData(0x18EA29B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 208 ] 
15:40:31: [ WrLbaNoData(0x18EA29C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 209 ] 
15:40:31: [ WrLbaNoData(0x18EA29D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 210 ] 
15:40:31: [ WrLbaNoData(0x18EA29E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 211 ] 
15:40:31: [ WrLbaNoData(0x18EA29F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 212 ] 
15:40:31: [ WrLbaNoData(0x18EA2A0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 213 ] 
15:40:31: [ WrLbaNoData(0x18EA2A1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 214 ] 
15:40:31: [ WrLbaNoData(0x18EA2A2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 215 ] 
15:40:31: [ WrLbaNoData(0x18EA2A3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 216 ] 
15:40:31: [ WrLbaNoData(0x18EA2A4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 217 ] 
15:40:31: [ WrLbaNoData(0x18EA2A5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 218 ] 
15:40:31: [ WrLbaNoData(0x18EA2A6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 219 ] 
15:40:31: [ WrLbaNoData(0x18EA2A7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 220 ] 
15:40:31: [ WrLbaNoData(0x18EA2A8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 221 ] 
15:40:31: [ WrLbaNoData(0x18EA2A9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 222 ] 
15:40:31: [ WrLbaNoData(0x18EA2AA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 223 ] 
15:40:31: [ WrLbaNoData(0x18EA2AB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 224 ] 
15:40:31: [ WrLbaNoData(0x18EA2AC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 225 ] 
15:40:31: [ WrLbaNoData(0x18EA2AD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 226 ] 
15:40:31: [ WrLbaNoData(0x18EA2AE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 227 ] 
15:40:31: [ WrLbaNoData(0x18EA2AF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 228 ] 
15:40:31: [ WrLbaNoData(0x18EA2B0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 229 ] 
15:40:31: [ WrLbaNoData(0x18EA2B1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 230 ] 
15:40:31: [ WrLbaNoData(0x18EA2B2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 231 ] 
15:40:31: [ WrLbaNoData(0x18EA2B3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 232 ] 
15:40:31: [ WrLbaNoData(0x18EA2B4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 233 ] 
15:40:31: [ WrLbaNoData(0x18EA2B5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 234 ] 
15:40:31: [ WrLbaNoData(0x18EA2B6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 235 ] 
15:40:31: [ WrLbaNoData(0x18EA2B7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 236 ] 
15:40:31: [ WrLbaNoData(0x18EA2B8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 237 ] 
15:40:31: [ WrLbaNoData(0x18EA2B9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 238 ] 
15:40:31: [ WrLbaNoData(0x18EA2BA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 239 ] 
15:40:31: [ WrLbaNoData(0x18EA2BB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 240 ] 
15:40:31: [ WrLbaNoData(0x18EA2BC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 241 ] 
15:40:31: [ WrLbaNoData(0x18EA2BD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 242 ] 
15:40:31: [ WrLbaNoData(0x18EA2BE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 243 ] 
15:40:31: [ WrLbaNoData(0x18EA2BF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 244 ] 
15:40:31: [ WrLbaNoData(0x18EA2C0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 245 ] 
15:40:31: [ WrLbaNoData(0x18EA2C1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 246 ] 
15:40:31: [ WrLbaNoData(0x18EA2C2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 247 ] 
15:40:31: [ WrLbaNoData(0x18EA2C3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 248 ] 
15:40:31: [ WrLbaNoData(0x18EA2C4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 249 ] 
15:40:31: [ WrLbaNoData(0x18EA2C5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 250 ] 
15:40:31: [ WrLbaNoData(0x18EA2C6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 251 ] 
15:40:31: [ WrLbaNoData(0x18EA2C7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 252 ] 
15:40:31: [ WrLbaNoData(0x18EA2C8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 253 ] 
15:40:31: [ WrLbaNoData(0x18EA2C9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 254 ] 
15:40:31: [ WrLbaNoData(0x18EA2CA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 255 ] 
15:40:31: [ WrLbaNoData(0x18EA2CB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 256 ] 
15:40:31: [ WrLbaNoData(0x18EA2CC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 257 ] 
15:40:31: [ WrLbaNoData(0x18EA2CD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 258 ] 
15:40:31: [ WrLbaNoData(0x18EA2CE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 259 ] 
15:40:31: [ WrLbaNoData(0x18EA2CF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 260 ] 
15:40:31: [ WrLbaNoData(0x18EA2D0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 261 ] 
15:40:31: [ WrLbaNoData(0x18EA2D1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 262 ] 
15:40:31: [ WrLbaNoData(0x18EA2D2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 263 ] 
15:40:31: [ WrLbaNoData(0x18EA2D3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 264 ] 
15:40:31: [ WrLbaNoData(0x18EA2D4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 265 ] 
15:40:31: [ WrLbaNoData(0x18EA2D5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 266 ] 
15:40:31: [ WrLbaNoData(0x18EA2D6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 267 ] 
15:40:31: [ WrLbaNoData(0x18EA2D7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 268 ] 
15:40:31: [ WrLbaNoData(0x18EA2D8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 269 ] 
15:40:31: [ WrLbaNoData(0x18EA2D9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 270 ] 
15:40:31: [ WrLbaNoData(0x18EA2DA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 271 ] 
15:40:31: [ WrLbaNoData(0x18EA2DB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 272 ] 
15:40:31: [ WrLbaNoData(0x18EA2DC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 273 ] 
15:40:31: [ WrLbaNoData(0x18EA2DD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 274 ] 
15:40:31: [ WrLbaNoData(0x18EA2DE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 275 ] 
15:40:31: [ WrLbaNoData(0x18EA2DF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 276 ] 
15:40:31: [ WrLbaNoData(0x18EA2E0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 277 ] 
15:40:31: [ WrLbaNoData(0x18EA2E1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 278 ] 
15:40:31: [ WrLbaNoData(0x18EA2E2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 279 ] 
15:40:31: [ WrLbaNoData(0x18EA2E3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 280 ] 
15:40:31: [ WrLbaNoData(0x18EA2E4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 281 ] 
15:40:31: [ WrLbaNoData(0x18EA2E5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 282 ] 
15:40:31: [ WrLbaNoData(0x18EA2E6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 283 ] 
15:40:31: [ WrLbaNoData(0x18EA2E7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 284 ] 
15:40:31: [ WrLbaNoData(0x18EA2E8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 285 ] 
15:40:31: [ WrLbaNoData(0x18EA2E9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 286 ] 
15:40:31: [ WrLbaNoData(0x18EA2EA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 287 ] 
15:40:31: [ WrLbaNoData(0x18EA2EB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 288 ] 
15:40:31: [ WrLbaNoData(0x18EA2EC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 289 ] 
15:40:31: [ WrLbaNoData(0x18EA2ED, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 290 ] 
15:40:31: [ WrLbaNoData(0x18EA2EE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 291 ] 
15:40:31: [ WrLbaNoData(0x18EA2EF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 292 ] 
15:40:31: [ WrLbaNoData(0x18EA2F0, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 293 ] 
15:40:31: [ WrLbaNoData(0x18EA2F1, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 294 ] 
15:40:31: [ WrLbaNoData(0x18EA2F2, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 295 ] 
15:40:31: [ WrLbaNoData(0x18EA2F3, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 296 ] 
15:40:31: [ WrLbaNoData(0x18EA2F4, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 297 ] 
15:40:31: [ WrLbaNoData(0x18EA2F5, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 298 ] 
15:40:31: [ WrLbaNoData(0x18EA2F6, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 299 ] 
15:40:31: [ WrLbaNoData(0x18EA2F7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 300 ] 
15:40:31: [ WrLbaNoData(0x18EA2F8, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 301 ] 
15:40:31: [ WrLbaNoData(0x18EA2F9, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 302 ] 
15:40:31: [ WrLbaNoData(0x18EA2FA, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 303 ] 
15:40:31: [ WrLbaNoData(0x18EA2FB, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 304 ] 
15:40:31: [ WrLbaNoData(0x18EA2FC, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 305 ] 
15:40:31: [ WrLbaNoData(0x18EA2FD, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 306 ] 
15:40:31: [ WrLbaNoData(0x18EA2FE, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 307 ] 
15:40:31: [ WrLbaNoData(0x18EA2FF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 308 ] 
15:40:31: [ WrLbaNoData(0x18EA300, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 309 ] 
15:40:31: [ WrLbaNoData(0x18EA301, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 310 ] 
15:40:31: [ WrLbaNoData(0x18EA302, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 311 ] 
15:40:31: [ WrLbaNoData(0x18EA303, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 312 ] 
15:40:31: [ WrLbaNoData(0x18EA304, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 313 ] 
15:40:31: [ WrLbaNoData(0x18EA305, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 314 ] 
15:40:31: [ WrLbaNoData(0x18EA306, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 315 ] 
15:40:31: [ WrLbaNoData(0x18EA307, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 316 ] 
15:40:31: [ WrLbaNoData(0x18EA308, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 317 ] 
15:40:31: [ WrLbaNoData(0x18EA309, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 318 ] 
15:40:31: [ WrLbaNoData(0x18EA30A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 319 ] 
15:40:31: [ WrLbaNoData(0x18EA30B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 320 ] 
15:40:31: [ WrLbaNoData(0x18EA30C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 321 ] 
15:40:31: [ WrLbaNoData(0x18EA30D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 322 ] 
15:40:31: [ WrLbaNoData(0x18EA30E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 323 ] 
15:40:31: [ WrLbaNoData(0x18EA30F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 324 ] 
15:40:31: [ WrLbaNoData(0x18EA310, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 325 ] 
15:40:31: [ WrLbaNoData(0x18EA311, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 326 ] 
15:40:32: [ WrLbaNoData(0x18EA312, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 327 ] 
15:40:32: [ WrLbaNoData(0x18EA313, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 328 ] 
15:40:32: [ WrLbaNoData(0x18EA314, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 329 ] 
15:40:32: [ WrLbaNoData(0x18EA315, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 330 ] 
15:40:32: [ WrLbaNoData(0x18EA316, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 331 ] 
15:40:32: [ WrLbaNoData(0x18EA317, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 332 ] 
15:40:32: [ WrLbaNoData(0x18EA318, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 333 ] 
15:40:32: [ WrLbaNoData(0x18EA319, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 334 ] 
15:40:32: [ WrLbaNoData(0x18EA31A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 335 ] 
15:40:32: [ WrLbaNoData(0x18EA31B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 336 ] 
15:40:32: [ WrLbaNoData(0x18EA31C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 337 ] 
15:40:32: [ WrLbaNoData(0x18EA31D, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 338 ] 
15:40:32: [ WrLbaNoData(0x18EA31E, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 339 ] 
15:40:32: [ WrLbaNoData(0x18EA31F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 340 ] 
15:40:32: [ WrLbaNoData(0x18EA320, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 341 ] 
15:40:32: [ WrLbaNoData(0x18EA321, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 342 ] 
15:40:32: [ WrLbaNoData(0x18EA322, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 343 ] 
15:40:32: [ WrLbaNoData(0x18EA323, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 344 ] 
15:40:32: [ WrLbaNoData(0x18EA324, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 345 ] 
15:40:32: [ WrLbaNoData(0x18EA325, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 346 ] 
15:40:32: [ WrLbaNoData(0x18EA326, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 347 ] 
15:40:32: [ WrLbaNoData(0x18EA327, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 348 ] 
15:40:32: [ WrLbaNoData(0x18EA328, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 349 ] 
15:40:32: [ WrLbaNoData(0x18EA329, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 350 ] 
15:40:32: [ WrLbaNoData(0x18EA32A, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 351 ] 
15:40:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done SingleWrite from StartLba: 0x18EA22B to EndLba:0x18EA32B with Increment Pattern 

15:40:32: [CH5025_Utility_RandomCommandBlock]##### Single Read to the card from startLba:0x18EA22B to endSector:0x18EA32B
15:40:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :SingleRead from StartLba: 0x18EA22B to EndLba:0x18EA32B with Increment Pattern
15:40:32: [ RdLbaNoData(0x18EA22B, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0, True) , Command count = 352 ] 
15:40:32: [ RdLbaNoData(0x18EA22C, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0, True) , Command count = 353 ] 
15:40:32: [ GetCardStatus() , Command count = 354 ] 
15:40:32: [DVTCommonLib]### ReadWithFPGAPattern[ERROR] :SingleRead Failed from StartLba:0x18EA22C to EndLba:0x18EA32B with Increment Pattern
15:40:32: [DVTCommonLib]### Exception_Details :Data Miscompare Error
15:40:32: [DVTCommonLib]### Exception_Details :Error Mesaage :
MiscompareError:                                   
   Buffer 1 - 512 sectors (Expected buffer)
   Buffer 2 - 512 sectors (Derived buffer)

   Miscompare started:
   	Location Sector:Byte - 0x0:0x0 (0:0)
   		Data miscompared: 0x2C (44) != 0x2D (45)

   Sector 0 : Wrong data:
      Content miscompare bytes count   : 512   
      Content miscompare bits count    : 1020  



   Expected buffer around miscompare:
   Rel. Abs.| 00 01 02 03 04 05 06 07  08 09 0A 0B 0C 0D 0E 0F
   =========|=================================================
   0000 0000| 2c 2d 2e 2f 30 31 32 33  34 35 36 37 38 39 3a 3b  ,-./0123456789:;
   0010 0010| 3c 3d 3e 3f 40 41 42 43  44 45 46 47 48 49 4a 4b  <=>?@ABCDEFGHIJK
   0020 0020| 4c 4d 4e 4f 50 51 52 53  54 55 56 57 58 59 5a 5b  LMNOPQRSTUVWXYZ[
   0030 0030| 5c 5d 5e 5f 60 61 62 63  64 65 66 67 68 69 6a 6b  \]^_`abcdefghijk
   0040 0040| 6c 6d 6e 6f 70 71 72 73  74 75 76 77 78 79 7a 7b  lmnopqrstuvwxyz{
   0050 0050| 7c 7d 7e 7f 80 81 82 83  84 85 86 87 88 89 8a 8b  |}~.............
   0060 0060| 8c 8d 8e 8f 90 91 92 93  94 95 96 97 98 99 9a 9b  ................
   0070 0070| 9c 9d 9e 9f a0 a1 a2 a3  a4 a5 a6 a7 a8 a9 aa ab  ................
   0080 0080| ac ad ae af b0 b1 b2 b3  b4 b5 b6 b7 b8 b9 ba bb  ................
   0090 0090| bc bd be bf c0 c1 c2 c3  c4 c5 c6 c7 c8 c9 ca cb  ................
   00a0 00a0| cc cd ce cf d0 d1 d2 d3  d4 d5 d6 d7 d8 d9 da db  ................
   00b0 00b0| dc dd de df e0 e1 e2 e3  e4 e5 e6 e7 e8 e9 ea eb  ................
   00c0 00c0| ec ed ee ef f0 f1 f2 f3  f4 f5 f6 f7 f8 f9 fa fb  ................
   00d0 00d0| fc fd fe ff 00 01 02 03  04 05 06 07 08 09 0a 0b  ................
   00e0 00e0| 0c 0d 0e 0f 10 11 12 13  14 15 16 17 18 19 1a 1b  ................
   00f0 00f0| 1c 1d 1e 1f 20 21 22 23  24 25 26 27 28 29 2a 2b  .... !"#$%&'()*+
   0100 0100| 2c 2d 2e 2f 30 31 32 33  34 35 36 37 38 39 3a 3b  ,-./0123456789:;
   0110 0110| 3c 3d 3e 3f 40 41 42 43  44 45 46 47 48 49 4a 4b  <=>?@ABCDEFGHIJK
   0120 0120| 4c 4d 4e 4f 50 51 52 53  54 55 56 57 58 59 5a 5b  LMNOPQRSTUVWXYZ[
   0130 0130| 5c 5d 5e 5f 60 61 62 63  64 65 66 67 68 69 6a 6b  \]^_`abcdefghijk
   0140 0140| 6c 6d 6e 6f 70 71 72 73  74 75 76 77 78 79 7a 7b  lmnopqrstuvwxyz{
   0150 0150| 7c 7d 7e 7f 80 81 82 83  84 85 86 87 88 89 8a 8b  |}~.............
   0160 0160| 8c 8d 8e 8f 90 91 92 93  94 95 96 97 98 99 9a 9b  ................
   0170 0170| 9c 9d 9e 9f a0 a1 a2 a3  a4 a5 a6 a7 a8 a9 aa ab  ................
   0180 0180| ac ad ae af b0 b1 b2 b3  b4 b5 b6 b7 b8 b9 ba bb  ................
   0190 0190| bc bd be bf c0 c1 c2 c3  c4 c5 c6 c7 c8 c9 ca cb  ................
   01a0 01a0| cc cd ce cf d0 d1 d2 d3  d4 d5 d6 d7 d8 d9 da db  ................
   01b0 01b0| dc dd de df e0 e1 e2 e3  e4 e5 e6 e7 e8 e9 ea eb  ................
   01c0 01c0| ec ed ee ef f0 f1 f2 f3  f4 f5 f6 f7 f8 f9 fa fb  ................
   01d0 01d0| fc fd fe ff 00 01 02 03  04 05 06 07 08 09 0a 0b  ................
   01e0 01e0| 0c 0d 0e 0f 10 11 12 13  14 15 16 17 18 19 1a 1b  ................
   01f0 01f0| 1c 1d 1e 1f 20 21 22 23  24 25 26 27 28 29 2a 2b  .... !"#$%&'()*+

   Derived buffer around miscompare:
   Rel. Abs.| 00 01 02 03 04 05 06 07  08 09 0A 0B 0C 0D 0E 0F
   =========|=================================================
   0000 0000| 2d 2e 2f 30 31 32 33 34  35 36 37 38 39 3a 3b 3c  -./0123456789:;<
   0010 0010| 3d 3e 3f 40 41 42 43 44  45 46 47 48 49 4a 4b 4c  =>?@ABCDEFGHIJKL
   0020 0020| 4d 4e 4f 50 51 52 53 54  55 56 57 58 59 5a 5b 5c  MNOPQRSTUVWXYZ[\
   0030 0030| 5d 5e 5f 60 61 62 63 64  65 66 67 68 69 6a 6b 6c  ]^_`abcdefghijkl
   0040 0040| 6d 6e 6f 70 71 72 73 74  75 76 77 78 79 7a 7b 7c  mnopqrstuvwxyz{|
   0050 0050| 7d 7e 7f 80 81 82 83 84  85 86 87 88 89 8a 8b 8c  }~..............
   0060 0060| 8d 8e 8f 90 91 92 93 94  95 96 97 98 99 9a 9b 9c  ................
   0070 0070| 9d 9e 9f a0 a1 a2 a3 a4  a5 a6 a7 a8 a9 aa ab ac  ................
   0080 0080| ad ae af b0 b1 b2 b3 b4  b5 b6 b7 b8 b9 ba bb bc  ................
   0090 0090| bd be bf c0 c1 c2 c3 c4  c5 c6 c7 c8 c9 ca cb cc  ................
   00a0 00a0| cd ce cf d0 d1 d2 d3 d4  d5 d6 d7 d8 d9 da db dc  ................
   00b0 00b0| dd de df e0 e1 e2 e3 e4  e5 e6 e7 e8 e9 ea eb ec  ................
   00c0 00c0| ed ee ef f0 f1 f2 f3 f4  f5 f6 f7 f8 f9 fa fb fc  ................
   00d0 00d0| fd fe ff 00 01 02 03 04  05 06 07 08 09 0a 0b 0c  ................
   00e0 00e0| 0d 0e 0f 10 11 12 13 14  15 16 17 18 19 1a 1b 1c  ................
   00f0 00f0| 1d 1e 1f 20 21 22 23 24  25 26 27 28 29 2a 2b 2c  ... !"#$%&'()*+,
   0100 0100| 2d 2e 2f 30 31 32 33 34  35 36 37 38 39 3a 3b 3c  -./0123456789:;<
   0110 0110| 3d 3e 3f 40 41 42 43 44  45 46 47 48 49 4a 4b 4c  =>?@ABCDEFGHIJKL
   0120 0120| 4d 4e 4f 50 51 52 53 54  55 56 57 58 59 5a 5b 5c  MNOPQRSTUVWXYZ[\
   0130 0130| 5d 5e 5f 60 61 62 63 64  65 66 67 68 69 6a 6b 6c  ]^_`abcdefghijkl
   0140 0140| 6d 6e 6f 70 71 72 73 74  75 76 77 78 79 7a 7b 7c  mnopqrstuvwxyz{|
   0150 0150| 7d 7e 7f 80 81 82 83 84  85 86 87 88 89 8a 8b 8c  }~..............
   0160 0160| 8d 8e 8f 90 91 92 93 94  95 96 97 98 99 9a 9b 9c  ................
   0170 0170| 9d 9e 9f a0 a1 a2 a3 a4  a5 a6 a7 a8 a9 aa ab ac  ................
   0180 0180| ad ae af b0 b1 b2 b3 b4  b5 b6 b7 b8 b9 ba bb bc  ................
   0190 0190| bd be bf c0 c1 c2 c3 c4  c5 c6 c7 c8 c9 ca cb cc  ................
   01a0 01a0| cd ce cf d0 d1 d2 d3 d4  d5 d6 d7 d8 d9 da db dc  ................
   01b0 01b0| dd de df e0 e1 e2 e3 e4  e5 e6 e7 e8 e9 ea eb ec  ................
   01c0 01c0| ed ee ef f0 f1 f2 f3 f4  f5 f6 f7 f8 f9 fa fb fc  ................
   01d0 01d0| fd fe ff 00 01 02 03 04  05 06 07 08 09 0a 0b 0c  ................
   01e0 01e0| 0d 0e 0f 10 11 12 13 14  15 16 17 18 19 1a 1b 1c  ................
   01f0 01f0| 1d 1e 1f 20 21 22 23 24  25 26 27 28 29 2a 2b 2c  ... !"#$%&'()*+,
 
15:40:32: Failed Running script <module 'CH502_DVT_SD300_3_6_1_1_SCR_SDStatus_StructureTest' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Chapter_5\CH502_DVT_SD300_3_6_1_1_SCR_SDStatus_StructureTest.py'> with error 
MiscompareError:                                   
   Buffer 1 - 512 sectors (Expected buffer)
   Buffer 2 - 512 sectors (Derived buffer)

   Miscompare started:
   	Location Sector:Byte - 0x0:0x0 (0:0)
   		Data miscompared: 0x2C (44) != 0x2D (45)

   Sector 0 : Wrong data:
      Content miscompare bytes count   : 512   
      Content miscompare bits count    : 1020  



   Expected buffer around miscompare:
   Rel. Abs.| 00 01 02 03 04 05 06 07  08 09 0A 0B 0C 0D 0E 0F
   =========|=================================================
   0000 0000| 2c 2d 2e 2f 30 31 32 33  34 35 36 37 38 39 3a 3b  ,-./0123456789:;
   0010 0010| 3c 3d 3e 3f 40 41 42 43  44 45 46 47 48 49 4a 4b  <=>?@ABCDEFGHIJK
   0020 0020| 4c 4d 4e 4f 50 51 52 53  54 55 56 57 58 59 5a 5b  LMNOPQRSTUVWXYZ[
   0030 0030| 5c 5d 5e 5f 60 61 62 63  64 65 66 67 68 69 6a 6b  \]^_`abcdefghijk
   0040 0040| 6c 6d 6e 6f 70 71 72 73  74 75 76 77 78 79 7a 7b  lmnopqrstuvwxyz{
   0050 0050| 7c 7d 7e 7f 80 81 82 83  84 85 86 87 88 89 8a 8b  |}~.............
   0060 0060| 8c 8d 8e 8f 90 91 92 93  94 95 96 97 98 99 9a 9b  ................
   0070 0070| 9c 9d 9e 9f a0 a1 a2 a3  a4 a5 a6 a7 a8 a9 aa ab  ................
   0080 0080| ac ad ae af b0 b1 b2 b3  b4 b5 b6 b7 b8 b9 ba bb  ................
   0090 0090| bc bd be bf c0 c1 c2 c3  c4 c5 c6 c7 c8 c9 ca cb  ................
   00a0 00a0| cc cd ce cf d0 d1 d2 d3  d4 d5 d6 d7 d8 d9 da db  ................
   00b0 00b0| dc dd de df e0 e1 e2 e3  e4 e5 e6 e7 e8 e9 ea eb  ................
   00c0 00c0| ec ed ee ef f0 f1 f2 f3  f4 f5 f6 f7 f8 f9 fa fb  ................
   00d0 00d0| fc fd fe ff 00 01 02 03  04 05 06 07 08 09 0a 0b  ................
   00e0 00e0| 0c 0d 0e 0f 10 11 12 13  14 15 16 17 18 19 1a 1b  ................
   00f0 00f0| 1c 1d 1e 1f 20 21 22 23  24 25 26 27 28 29 2a 2b  .... !"#$%&'()*+
   0100 0100| 2c 2d 2e 2f 30 31 32 33  34 35 36 37 38 39 3a 3b  ,-./0123456789:;
   0110 0110| 3c 3d 3e 3f 40 41 42 43  44 45 46 47 48 49 4a 4b  <=>?@ABCDEFGHIJK
   0120 0120| 4c 4d 4e 4f 50 51 52 53  54 55 56 57 58 59 5a 5b  LMNOPQRSTUVWXYZ[
   0130 0130| 5c 5d 5e 5f 60 61 62 63  64 65 66 67 68 69 6a 6b  \]^_`abcdefghijk
   0140 0140| 6c 6d 6e 6f 70 71 72 73  74 75 76 77 78 79 7a 7b  lmnopqrstuvwxyz{
   0150 0150| 7c 7d 7e 7f 80 81 82 83  84 85 86 87 88 89 8a 8b  |}~.............
   0160 0160| 8c 8d 8e 8f 90 91 92 93  94 95 96 97 98 99 9a 9b  ................
   0170 0170| 9c 9d 9e 9f a0 a1 a2 a3  a4 a5 a6 a7 a8 a9 aa ab  ................
   0180 0180| ac ad ae af b0 b1 b2 b3  b4 b5 b6 b7 b8 b9 ba bb  ................
   0190 0190| bc bd be bf c0 c1 c2 c3  c4 c5 c6 c7 c8 c9 ca cb  ................
   01a0 01a0| cc cd ce cf d0 d1 d2 d3  d4 d5 d6 d7 d8 d9 da db  ................
   01b0 01b0| dc dd de df e0 e1 e2 e3  e4 e5 e6 e7 e8 e9 ea eb  ................
   01c0 01c0| ec ed ee ef f0 f1 f2 f3  f4 f5 f6 f7 f8 f9 fa fb  ................
   01d0 01d0| fc fd fe ff 00 01 02 03  04 05 06 07 08 09 0a 0b  ................
   01e0 01e0| 0c 0d 0e 0f 10 11 12 13  14 15 16 17 18 19 1a 1b  ................
   01f0 01f0| 1c 1d 1e 1f 20 21 22 23  24 25 26 27 28 29 2a 2b  .... !"#$%&'()*+

   Derived buffer around miscompare:
   Rel. Abs.| 00 01 02 03 04 05 06 07  08 09 0A 0B 0C 0D 0E 0F
   =========|=================================================
   0000 0000| 2d 2e 2f 30 31 32 33 34  35 36 37 38 39 3a 3b 3c  -./0123456789:;<
   0010 0010| 3d 3e 3f 40 41 42 43 44  45 46 47 48 49 4a 4b 4c  =>?@ABCDEFGHIJKL
   0020 0020| 4d 4e 4f 50 51 52 53 54  55 56 57 58 59 5a 5b 5c  MNOPQRSTUVWXYZ[\
   0030 0030| 5d 5e 5f 60 61 62 63 64  65 66 67 68 69 6a 6b 6c  ]^_`abcdefghijkl
   0040 0040| 6d 6e 6f 70 71 72 73 74  75 76 77 78 79 7a 7b 7c  mnopqrstuvwxyz{|
   0050 0050| 7d 7e 7f 80 81 82 83 84  85 86 87 88 89 8a 8b 8c  }~..............
   0060 0060| 8d 8e 8f 90 91 92 93 94  95 96 97 98 99 9a 9b 9c  ................
   0070 0070| 9d 9e 9f a0 a1 a2 a3 a4  a5 a6 a7 a8 a9 aa ab ac  ................
   0080 0080| ad ae af b0 b1 b2 b3 b4  b5 b6 b7 b8 b9 ba bb bc  ................
   0090 0090| bd be bf c0 c1 c2 c3 c4  c5 c6 c7 c8 c9 ca cb cc  ................
   00a0 00a0| cd ce cf d0 d1 d2 d3 d4  d5 d6 d7 d8 d9 da db dc  ................
   00b0 00b0| dd de df e0 e1 e2 e3 e4  e5 e6 e7 e8 e9 ea eb ec  ................
   00c0 00c0| ed ee ef f0 f1 f2 f3 f4  f5 f6 f7 f8 f9 fa fb fc  ................
   00d0 00d0| fd fe ff 00 01 02 03 04  05 06 07 08 09 0a 0b 0c  ................
   00e0 00e0| 0d 0e 0f 10 11 12 13 14  15 16 17 18 19 1a 1b 1c  ................
   00f0 00f0| 1d 1e 1f 20 21 22 23 24  25 26 27 28 29 2a 2b 2c  ... !"#$%&'()*+,
   0100 0100| 2d 2e 2f 30 31 32 33 34  35 36 37 38 39 3a 3b 3c  -./0123456789:;<
   0110 0110| 3d 3e 3f 40 41 42 43 44  45 46 47 48 49 4a 4b 4c  =>?@ABCDEFGHIJKL
   0120 0120| 4d 4e 4f 50 51 52 53 54  55 56 57 58 59 5a 5b 5c  MNOPQRSTUVWXYZ[\
   0130 0130| 5d 5e 5f 60 61 62 63 64  65 66 67 68 69 6a 6b 6c  ]^_`abcdefghijkl
   0140 0140| 6d 6e 6f 70 71 72 73 74  75 76 77 78 79 7a 7b 7c  mnopqrstuvwxyz{|
   0150 0150| 7d 7e 7f 80 81 82 83 84  85 86 87 88 89 8a 8b 8c  }~..............
   0160 0160| 8d 8e 8f 90 91 92 93 94  95 96 97 98 99 9a 9b 9c  ................
   0170 0170| 9d 9e 9f a0 a1 a2 a3 a4  a5 a6 a7 a8 a9 aa ab ac  ................
   0180 0180| ad ae af b0 b1 b2 b3 b4  b5 b6 b7 b8 b9 ba bb bc  ................
   0190 0190| bd be bf c0 c1 c2 c3 c4  c5 c6 c7 c8 c9 ca cb cc  ................
   01a0 01a0| cd ce cf d0 d1 d2 d3 d4  d5 d6 d7 d8 d9 da db dc  ................
   01b0 01b0| dd de df e0 e1 e2 e3 e4  e5 e6 e7 e8 e9 ea eb ec  ................
   01c0 01c0| ed ee ef f0 f1 f2 f3 f4  f5 f6 f7 f8 f9 fa fb fc  ................
   01d0 01d0| fd fe ff 00 01 02 03 04  05 06 07 08 09 0a 0b 0c  ................
   01e0 01e0| 0d 0e 0f 10 11 12 13 14  15 16 17 18 19 1a 1b 1c  ................
   01f0 01f0| 1d 1e 1f 20 21 22 23 24  25 26 27 28 29 2a 2b 2c  ... !"#$%&'()*+,
 
15:40:32: ########################################
15:40:32: ########################################
15:40:32: Stated Running script CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest 
15:40:32: ########################################
15:40:32: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]###### Test to verify ACMD51 and ACMD13 according to state diagram ###### 
15:40:32: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ### TEST SCRIPT EXECUTION IS STARTED. 

15:40:32: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Do card initialization
15:40:32: [GO4_globalInitCard]### Switch to Specify Card Type
15:40:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:40:34: Host Frequency set to 25000 KHz
15:40:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:40:34: [GO18_globalSetVolt]### Set Host Voltage value.
15:40:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
15:40:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4D450>, 0x0, True) , Command count = 355 ] 
15:40:34: [GO18_globalSetVolt]### Host voltage value is set.
15:40:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
15:40:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D40DE0>, 0x0, False) , Command count = 356 ] 
15:40:34: [GO18_globalSetVolt]### Host voltage value is set.
15:40:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 357 ] 
15:40:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:40:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 358 ] 
15:40:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:40:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:40:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:40:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:40:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:40:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 359 ] 
15:40:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:40:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:40:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3DE0>, <py_sfcl.CommandDataDefinition object at 0x05DA3D50>) , Command count = 360 ] 
15:40:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:40:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3E10>, <py_sfcl.CommandDataDefinition object at 0x05E4D450>) , Command count = 361 ] 
15:40:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:40:34: [ SetCardRCA(0x1, 0xD555) , Command count = 362 ] 
15:40:34: [DVTCommonLib]### Identification :Idenfication of card completed 

15:40:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:40:34: Host Frequency set to 25000 KHz
15:40:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:40:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:40:34: ####CSD Registe 2.0 Values####
15:40:34: CSD_STRUCTURE                                 :0x1
15:40:34: Reserv1                                       :0x0
15:40:34: Time Access 1 TAAC                            :0xe
15:40:34: Time Access 2 NSAC*100                        :0x0
15:40:34: Data Transfer Rate TRAN_SPEED                 :0x32
15:40:34: Card Command Classess CCC                     :0x5b5
15:40:34: Max Read Data Block Length  READ_BL_LEN       :0x9
15:40:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:40:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:40:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:40:34: DSR(driver stage register)  DSR_IMP           :0x0
15:40:34: Reserv2                                       :0x0
15:40:34: Device Size C_SIZE                            :0xedc8
15:40:34: Reserv3                                       :0x0
15:40:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:40:34: Erase Sector Size SECTOR_SIZE                 :0x7f
15:40:34: Write Protect Group Size WP_GRP_SIZE          :0x0
15:40:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:40:34: Reserv4                                       :0x0
15:40:34: Write Speed Factor R2W_FACTOR                 :0x2
15:40:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:40:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:40:34: FILE_FORMAT_GRP                               :0x0
15:40:34: COPY flag                                     :0x1
15:40:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:40:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:40:34: File_Format                                   :0x0
15:40:34: CRC                                           :0x0
15:40:34: ####CSD Registe Values####  

15:40:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:40:34: [GetSCRRegisterEntry] Passed
15:40:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:40:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:40:34: Data_Status_After Erases          : 0
15:40:34: CPRM Security Support             : No Security
15:40:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:40:34: Spec. Version                     : Version 3.0X
15:40:34: Extended Security Support         : Extended_Security_Not_Supported
15:40:34: Command Support                   : COMMAND_SUPPORT
15:40:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:40:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3E70>, <py_sfcl.CommandDataDefinition object at 0x05E4DF90>) , Command count = 363 ] 
15:40:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:40:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3EA0>, <py_sfcl.CommandDataDefinition object at 0x05E4D2D0>) , Command count = 364 ] 
15:40:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:40:35: [ SetBusWidth(0x4) , Command count = 365 ] 
15:40:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:40:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4D300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 366 ] 
15:40:35: Protected Area Size 0x28000
15:40:35: Bus Width           2
15:40:35: Secure Mode         0
15:40:35: Speed  Class        4
15:40:35: Perf Move           0
15:40:35: Au Size             9
15:40:35: Erase Size          15
15:40:35: Erase Timeout       1
15:40:35: Erase offset        1
15:40:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:40:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
15:40:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:40:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 367 ] 
15:40:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
15:40:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:40:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
15:40:35: Host Frequency set to 100000 KHz
15:40:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
15:40:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:40:35: ####CSD Registe 2.0 Values####
15:40:35: CSD_STRUCTURE                                 :0x1
15:40:35: Reserv1                                       :0x0
15:40:35: Time Access 1 TAAC                            :0xe
15:40:35: Time Access 2 NSAC*100                        :0x0
15:40:35: Data Transfer Rate TRAN_SPEED                 :0xb
15:40:35: Card Command Classess CCC                     :0x5b5
15:40:35: Max Read Data Block Length  READ_BL_LEN       :0x9
15:40:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:40:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:40:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:40:35: DSR(driver stage register)  DSR_IMP           :0x0
15:40:35: Reserv2                                       :0x0
15:40:35: Device Size C_SIZE                            :0xedc8
15:40:35: Reserv3                                       :0x0
15:40:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:40:35: Erase Sector Size SECTOR_SIZE                 :0x7f
15:40:35: Write Protect Group Size WP_GRP_SIZE          :0x0
15:40:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:40:35: Reserv4                                       :0x0
15:40:35: Write Speed Factor R2W_FACTOR                 :0x2
15:40:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:40:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:40:35: FILE_FORMAT_GRP                               :0x0
15:40:35: COPY flag                                     :0x1
15:40:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:40:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:40:35: File_Format                                   :0x0
15:40:35: CRC                                           :0x0
15:40:35: ####CSD Registe Values####  

15:40:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3F60>, <py_sfcl.CommandDataDefinition object at 0x05E4D630>) , Command count = 368 ] 
15:40:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:40:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3F90>, <py_sfcl.CommandDataDefinition object at 0x05E4D120>) , Command count = 369 ] 
15:40:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:40:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


15:40:35: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values
15:40:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:40:35: [GetSCRRegisterEntry] Passed
15:40:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:40:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:40:35: Data_Status_After Erases          : 0
15:40:35: CPRM Security Support             : No Security
15:40:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:40:35: Spec. Version                     : Version 3.0X
15:40:35: Extended Security Support         : Extended_Security_Not_Supported
15:40:35: Command Support                   : COMMAND_SUPPORT
15:40:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:40:35: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
15:40:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:40:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4DE10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 370 ] 
15:40:35: Protected Area Size 0x28000
15:40:35: Bus Width           2
15:40:35: Secure Mode         0
15:40:35: Speed  Class        4
15:40:35: Perf Move           0
15:40:35: Au Size             9
15:40:35: Erase Size          15
15:40:35: Erase Timeout       1
15:40:35: Erase offset        1
15:40:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:40:35: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_Load_SCR_SDStatus_Variables
15:40:35: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

15:40:35: Perform Power Off and On.
15:40:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:40:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 371 ] 
15:40:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:40:37: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
15:40:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:40:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:40:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:40:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:40:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05206480>, <py_sfcl.CommandDataDefinition object at 0x05DA7060>) , Command count = 372 ] 
15:40:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:40:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7090>, <py_sfcl.CommandDataDefinition object at 0x05E4D750>) , Command count = 373 ] 
15:40:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
15:40:37: [ SetCardRCA(0x1, 0xD555) , Command count = 374 ] 
15:40:37: [DVTCommonLib]### Identification :Idenfication of card completed 

15:40:37: [GO4_globalInitCard]### Switch to Specify Card Type
15:40:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:40:39: Host Frequency set to 25000 KHz
15:40:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:40:39: [GO18_globalSetVolt]### Set Host Voltage value.
15:40:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
15:40:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DA70F0>, 0x0, True) , Command count = 375 ] 
15:40:39: [GO18_globalSetVolt]### Host voltage value is set.
15:40:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
15:40:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DA7120>, 0x0, False) , Command count = 376 ] 
15:40:39: [GO18_globalSetVolt]### Host voltage value is set.
15:40:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 377 ] 
15:40:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:40:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 378 ] 
15:40:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:40:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:40:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:40:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:40:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:40:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 379 ] 
15:40:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:40:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:40:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA71E0>, <py_sfcl.CommandDataDefinition object at 0x05DA71B0>) , Command count = 380 ] 
15:40:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:40:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7210>, <py_sfcl.CommandDataDefinition object at 0x05E4D4B0>) , Command count = 381 ] 
15:40:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:40:39: [ SetCardRCA(0x1, 0xD555) , Command count = 382 ] 
15:40:39: [DVTCommonLib]### Identification :Idenfication of card completed 

15:40:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:40:40: Host Frequency set to 25000 KHz
15:40:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:40:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:40:40: ####CSD Registe 2.0 Values####
15:40:40: CSD_STRUCTURE                                 :0x1
15:40:40: Reserv1                                       :0x0
15:40:40: Time Access 1 TAAC                            :0xe
15:40:40: Time Access 2 NSAC*100                        :0x0
15:40:40: Data Transfer Rate TRAN_SPEED                 :0x32
15:40:40: Card Command Classess CCC                     :0x5b5
15:40:40: Max Read Data Block Length  READ_BL_LEN       :0x9
15:40:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:40:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:40:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:40:40: DSR(driver stage register)  DSR_IMP           :0x0
15:40:40: Reserv2                                       :0x0
15:40:40: Device Size C_SIZE                            :0xedc8
15:40:40: Reserv3                                       :0x0
15:40:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:40:40: Erase Sector Size SECTOR_SIZE                 :0x7f
15:40:40: Write Protect Group Size WP_GRP_SIZE          :0x0
15:40:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:40:40: Reserv4                                       :0x0
15:40:40: Write Speed Factor R2W_FACTOR                 :0x2
15:40:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:40:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:40:40: FILE_FORMAT_GRP                               :0x0
15:40:40: COPY flag                                     :0x1
15:40:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:40:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:40:40: File_Format                                   :0x0
15:40:40: CRC                                           :0x0
15:40:40: ####CSD Registe Values####  

15:40:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:40:40: [GetSCRRegisterEntry] Passed
15:40:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:40:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:40:40: Data_Status_After Erases          : 0
15:40:40: CPRM Security Support             : No Security
15:40:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:40:40: Spec. Version                     : Version 3.0X
15:40:40: Extended Security Support         : Extended_Security_Not_Supported
15:40:40: Command Support                   : COMMAND_SUPPORT
15:40:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:40:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7270>, <py_sfcl.CommandDataDefinition object at 0x05E4D510>) , Command count = 383 ] 
15:40:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:40:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA72A0>, <py_sfcl.CommandDataDefinition object at 0x05E4D210>) , Command count = 384 ] 
15:40:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:40:40: [ SetBusWidth(0x4) , Command count = 385 ] 
15:40:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:40:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4DCF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 386 ] 
15:40:40: Protected Area Size 0x28000
15:40:40: Bus Width           2
15:40:40: Secure Mode         0
15:40:40: Speed  Class        4
15:40:40: Perf Move           0
15:40:40: Au Size             9
15:40:40: Erase Size          15
15:40:40: Erase Timeout       1
15:40:40: Erase offset        1
15:40:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:40:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
15:40:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:40:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 387 ] 
15:40:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
15:40:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:40:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
15:40:40: Host Frequency set to 100000 KHz
15:40:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
15:40:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:40:40: ####CSD Registe 2.0 Values####
15:40:40: CSD_STRUCTURE                                 :0x1
15:40:40: Reserv1                                       :0x0
15:40:40: Time Access 1 TAAC                            :0xe
15:40:40: Time Access 2 NSAC*100                        :0x0
15:40:40: Data Transfer Rate TRAN_SPEED                 :0xb
15:40:40: Card Command Classess CCC                     :0x5b5
15:40:40: Max Read Data Block Length  READ_BL_LEN       :0x9
15:40:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:40:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:40:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:40:40: DSR(driver stage register)  DSR_IMP           :0x0
15:40:40: Reserv2                                       :0x0
15:40:40: Device Size C_SIZE                            :0xedc8
15:40:40: Reserv3                                       :0x0
15:40:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:40:40: Erase Sector Size SECTOR_SIZE                 :0x7f
15:40:40: Write Protect Group Size WP_GRP_SIZE          :0x0
15:40:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:40:40: Reserv4                                       :0x0
15:40:40: Write Speed Factor R2W_FACTOR                 :0x2
15:40:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:40:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:40:40: FILE_FORMAT_GRP                               :0x0
15:40:40: COPY flag                                     :0x1
15:40:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:40:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:40:40: File_Format                                   :0x0
15:40:40: CRC                                           :0x0
15:40:40: ####CSD Registe Values####  

15:40:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7360>, <py_sfcl.CommandDataDefinition object at 0x05E4D810>) , Command count = 388 ] 
15:40:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:40:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7390>, <py_sfcl.CommandDataDefinition object at 0x05E4DAE0>) , Command count = 389 ] 
15:40:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:40:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


15:40:40: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
15:40:40: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

15:40:40: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ############ ACMD51, ACMD13 are valid only in Trans state #########
15:40:40: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 31 

15:40:40: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

15:40:42: [ HostReset(False) , Command count = 390 ] 
15:40:42: [ SetSpecialModes(0x5, True) , Command count = 391 ] 
15:40:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7420>, <py_sfcl.CommandDataDefinition object at 0x05E4D600>) , Command count = 392 ] 
15:40:42: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
15:40:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7450>, <py_sfcl.CommandDataDefinition object at 0x05E4DF30>) , Command count = 393 ] 
15:40:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:40:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7480>, <py_sfcl.CommandDataDefinition object at 0x05E4D4E0>) , Command count = 394 ] 
15:40:42: [ GetCardStatus() , Command count = 395 ] 
15:40:42: ACmd51[ SEND_SCR ] Failed with an exception
15:40:42: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:40:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA74B0>, <py_sfcl.CommandDataDefinition object at 0x05DA74E0>) , Command count = 396 ] 
15:40:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:40:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7510>, <py_sfcl.CommandDataDefinition object at 0x05E4D7E0>) , Command count = 397 ] 
15:40:42: [ GetCardStatus() , Command count = 398 ] 
15:40:42: ACMD13[ SD_STATUS ] Failed with an exception
15:40:42: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

15:40:42: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

15:40:44: [ HostReset(False) , Command count = 399 ] 
15:40:44: [ SetSpecialModes(0x5, True) , Command count = 400 ] 
15:40:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D40E70>, <py_sfcl.CommandDataDefinition object at 0x05DA75D0>) , Command count = 401 ] 
15:40:44: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
15:40:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7600>, <py_sfcl.CommandDataDefinition object at 0x05DA3240>) , Command count = 402 ] 
15:40:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:40:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7630>, <py_sfcl.CommandDataDefinition object at 0x05E4D1E0>) , Command count = 403 ] 
15:40:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
15:40:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7660>, <py_sfcl.CommandDataDefinition object at 0x05E4D660>) , Command count = 404 ] 
15:40:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:40:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7690>, <py_sfcl.CommandDataDefinition object at 0x05E4D330>) , Command count = 405 ] 
15:40:44: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
15:40:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4DBA0>, <py_sfcl.CommandDataDefinition object at 0x05E4D720>) , Command count = 406 ] 
15:40:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:40:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA76F0>, <py_sfcl.CommandDataDefinition object at 0x05E4D3F0>) , Command count = 407 ] 
15:40:45: [ GetCardStatus() , Command count = 408 ] 
15:40:45: ACmd51[ SEND_SCR ] Failed with an exception
15:40:45: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:40:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7510>, <py_sfcl.CommandDataDefinition object at 0x05DA7720>) , Command count = 409 ] 
15:40:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:40:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7780>, <py_sfcl.CommandDataDefinition object at 0x05E4D5A0>) , Command count = 410 ] 
15:40:45: [ GetCardStatus() , Command count = 411 ] 
15:40:45: ACMD13[ SD_STATUS ] Failed with an exception
15:40:45: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

15:40:45: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

15:40:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:40:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 412 ] 
15:40:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:40:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:40:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:40:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:40:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:40:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 413 ] 
15:40:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:40:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7840>, <py_sfcl.CommandDataDefinition object at 0x05DA77B0>) , Command count = 414 ] 
15:40:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:40:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:40:47: [GetSCRRegisterEntry] Failed
15:40:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

15:40:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
15:40:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:40:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4D5D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 415 ] 
15:40:47: [ GetCardStatus() , Command count = 416 ] 
15:40:47: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
15:40:47: [DVTCommonLib]### Exception_Details :Time out error on card response
15:40:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

15:40:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7780>, <py_sfcl.CommandDataDefinition object at 0x05DA78A0>) , Command count = 417 ] 
15:40:47: [ GetCardStatus() , Command count = 418 ] 
15:40:47: CMD55[ APP_CMD ] Failed with an exception
15:40:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:40:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7900>, <py_sfcl.CommandDataDefinition object at 0x05DA7930>) , Command count = 419 ] 
15:40:47: [ GetCardStatus() , Command count = 420 ] 
15:40:47: ACmd51[ SEND_SCR ] Failed with an exception
15:40:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:40:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA78A0>, <py_sfcl.CommandDataDefinition object at 0x05DA7780>) , Command count = 421 ] 
15:40:47: [ GetCardStatus() , Command count = 422 ] 
15:40:47: CMD55[ APP_CMD ] Failed with an exception
15:40:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:40:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7930>, <py_sfcl.CommandDataDefinition object at 0x05DA7900>) , Command count = 423 ] 
15:40:47: [ GetCardStatus() , Command count = 424 ] 
15:40:47: ACMD13[ SD_STATUS ] Failed with an exception
15:40:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

15:40:47: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

15:40:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:40:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 425 ] 
15:40:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:40:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:40:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:40:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:40:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:40:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 426 ] 
15:40:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:40:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:40:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7AB0>, <py_sfcl.CommandDataDefinition object at 0x05DA7A20>) , Command count = 427 ] 
15:40:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:40:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7AE0>, <py_sfcl.CommandDataDefinition object at 0x05E4DC30>) , Command count = 428 ] 
15:40:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:40:50: [ SetCardRCA(0x1, 0xD555) , Command count = 429 ] 
15:40:50: [DVTCommonLib]### Identification :Idenfication of card completed 

15:40:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7B40>, <py_sfcl.CommandDataDefinition object at 0x05E4DC00>) , Command count = 430 ] 
15:40:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:40:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:40:50: [GetSCRRegisterEntry] Passed
15:40:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:40:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:40:50: Data_Status_After Erases          : 0
15:40:50: CPRM Security Support             : No Security
15:40:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:40:50: Spec. Version                     : Version 3.0X
15:40:50: Extended Security Support         : Extended_Security_Not_Supported
15:40:50: Command Support                   : COMMAND_SUPPORT
15:40:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:40:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:40:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE9060>, <0x200/0x200, Spc, pat:0x0>) , Command count = 431 ] 
15:40:50: Protected Area Size 0x28000
15:40:50: Bus Width           0
15:40:50: Secure Mode         0
15:40:50: Speed  Class        4
15:40:50: Perf Move           0
15:40:50: Au Size             9
15:40:50: Erase Size          15
15:40:50: Erase Timeout       1
15:40:50: Erase offset        1
15:40:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:40:50: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

15:40:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:40:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 432 ] 
15:40:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:40:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:40:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:40:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:40:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:40:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 433 ] 
15:40:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:40:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:40:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7C00>, <py_sfcl.CommandDataDefinition object at 0x05DA7BD0>) , Command count = 434 ] 
15:40:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:40:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7C30>, <py_sfcl.CommandDataDefinition object at 0x05DE90C0>) , Command count = 435 ] 
15:40:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:40:52: [ SetCardRCA(0x1, 0xD555) , Command count = 436 ] 
15:40:52: [DVTCommonLib]### Identification :Idenfication of card completed 

15:40:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7C90>, <py_sfcl.CommandDataDefinition object at 0x05DE9120>) , Command count = 437 ] 
15:40:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:40:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7CC0>, <py_sfcl.CommandDataDefinition object at 0x05DE9180>) , Command count = 438 ] 
15:40:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:40:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
15:40:52: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
15:40:52: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
15:40:52: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

15:40:52: Perform Power Off and On.
15:40:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:40:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 439 ] 
15:40:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:40:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
15:40:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:40:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:40:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:40:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:40:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D40960>, <py_sfcl.CommandDataDefinition object at 0x05DA7D20>) , Command count = 440 ] 
15:40:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:40:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7D50>, <py_sfcl.CommandDataDefinition object at 0x05DE9210>) , Command count = 441 ] 
15:40:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
15:40:54: [ SetCardRCA(0x1, 0xD555) , Command count = 442 ] 
15:40:55: [DVTCommonLib]### Identification :Idenfication of card completed 

15:40:55: [GO4_globalInitCard]### Switch to Specify Card Type
15:40:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:40:57: Host Frequency set to 25000 KHz
15:40:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:40:57: [GO18_globalSetVolt]### Set Host Voltage value.
15:40:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
15:40:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DA7DB0>, 0x0, True) , Command count = 443 ] 
15:40:57: [GO18_globalSetVolt]### Host voltage value is set.
15:40:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
15:40:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DA7DE0>, 0x0, False) , Command count = 444 ] 
15:40:57: [GO18_globalSetVolt]### Host voltage value is set.
15:40:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 445 ] 
15:40:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:40:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 446 ] 
15:40:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:40:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:40:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:40:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:40:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:40:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 447 ] 
15:40:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:40:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:40:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7EA0>, <py_sfcl.CommandDataDefinition object at 0x05DA7E70>) , Command count = 448 ] 
15:40:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:40:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7ED0>, <py_sfcl.CommandDataDefinition object at 0x05DE9300>) , Command count = 449 ] 
15:40:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:40:57: [ SetCardRCA(0x1, 0xD555) , Command count = 450 ] 
15:40:57: [DVTCommonLib]### Identification :Idenfication of card completed 

15:40:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:40:57: Host Frequency set to 25000 KHz
15:40:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:40:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:40:57: ####CSD Registe 2.0 Values####
15:40:57: CSD_STRUCTURE                                 :0x1
15:40:57: Reserv1                                       :0x0
15:40:57: Time Access 1 TAAC                            :0xe
15:40:57: Time Access 2 NSAC*100                        :0x0
15:40:57: Data Transfer Rate TRAN_SPEED                 :0x32
15:40:57: Card Command Classess CCC                     :0x5b5
15:40:57: Max Read Data Block Length  READ_BL_LEN       :0x9
15:40:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:40:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:40:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:40:57: DSR(driver stage register)  DSR_IMP           :0x0
15:40:57: Reserv2                                       :0x0
15:40:57: Device Size C_SIZE                            :0xedc8
15:40:57: Reserv3                                       :0x0
15:40:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:40:57: Erase Sector Size SECTOR_SIZE                 :0x7f
15:40:57: Write Protect Group Size WP_GRP_SIZE          :0x0
15:40:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:40:57: Reserv4                                       :0x0
15:40:57: Write Speed Factor R2W_FACTOR                 :0x2
15:40:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:40:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:40:57: FILE_FORMAT_GRP                               :0x0
15:40:57: COPY flag                                     :0x1
15:40:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:40:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:40:57: File_Format                                   :0x0
15:40:57: CRC                                           :0x0
15:40:57: ####CSD Registe Values####  

15:40:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:40:57: [GetSCRRegisterEntry] Passed
15:40:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:40:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:40:57: Data_Status_After Erases          : 0
15:40:57: CPRM Security Support             : No Security
15:40:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:40:57: Spec. Version                     : Version 3.0X
15:40:57: Extended Security Support         : Extended_Security_Not_Supported
15:40:57: Command Support                   : COMMAND_SUPPORT
15:40:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:40:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F30>, <py_sfcl.CommandDataDefinition object at 0x05DE9540>) , Command count = 451 ] 
15:40:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:40:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F60>, <py_sfcl.CommandDataDefinition object at 0x05DE9390>) , Command count = 452 ] 
15:40:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:40:57: [ SetBusWidth(0x4) , Command count = 453 ] 
15:40:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:40:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE93F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 454 ] 
15:40:57: Protected Area Size 0x28000
15:40:57: Bus Width           2
15:40:57: Secure Mode         0
15:40:57: Speed  Class        4
15:40:57: Perf Move           0
15:40:57: Au Size             9
15:40:57: Erase Size          15
15:40:57: Erase Timeout       1
15:40:57: Erase offset        1
15:40:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:40:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
15:40:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:40:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 455 ] 
15:40:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
15:40:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:40:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
15:40:57: Host Frequency set to 100000 KHz
15:40:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
15:40:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:40:57: ####CSD Registe 2.0 Values####
15:40:57: CSD_STRUCTURE                                 :0x1
15:40:57: Reserv1                                       :0x0
15:40:57: Time Access 1 TAAC                            :0xe
15:40:57: Time Access 2 NSAC*100                        :0x0
15:40:57: Data Transfer Rate TRAN_SPEED                 :0xb
15:40:57: Card Command Classess CCC                     :0x5b5
15:40:57: Max Read Data Block Length  READ_BL_LEN       :0x9
15:40:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:40:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:40:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:40:57: DSR(driver stage register)  DSR_IMP           :0x0
15:40:57: Reserv2                                       :0x0
15:40:57: Device Size C_SIZE                            :0xedc8
15:40:57: Reserv3                                       :0x0
15:40:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:40:57: Erase Sector Size SECTOR_SIZE                 :0x7f
15:40:57: Write Protect Group Size WP_GRP_SIZE          :0x0
15:40:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:40:57: Reserv4                                       :0x0
15:40:57: Write Speed Factor R2W_FACTOR                 :0x2
15:40:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:40:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:40:57: FILE_FORMAT_GRP                               :0x0
15:40:57: COPY flag                                     :0x1
15:40:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:40:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:40:57: File_Format                                   :0x0
15:40:57: CRC                                           :0x0
15:40:57: ####CSD Registe Values####  

15:40:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5060>, <py_sfcl.CommandDataDefinition object at 0x05DE9660>) , Command count = 456 ] 
15:40:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:40:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5090>, <py_sfcl.CommandDataDefinition object at 0x05DE94B0>) , Command count = 457 ] 
15:40:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:40:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


15:40:57: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
15:40:57: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

15:40:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:40:57: [GetSCRRegisterEntry] Passed
15:40:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:40:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:40:57: Data_Status_After Erases          : 0
15:40:57: CPRM Security Support             : No Security
15:40:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:40:57: Spec. Version                     : Version 3.0X
15:40:57: Extended Security Support         : Extended_Security_Not_Supported
15:40:57: Command Support                   : COMMAND_SUPPORT
15:40:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:40:57: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

15:40:57: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

15:40:57: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

15:40:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:40:57: [GetSCRRegisterEntry] Passed
15:40:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:40:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:40:57: Data_Status_After Erases          : 0
15:40:57: CPRM Security Support             : No Security
15:40:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:40:57: Spec. Version                     : Version 3.0X
15:40:57: Extended Security Support         : Extended_Security_Not_Supported
15:40:57: Command Support                   : COMMAND_SUPPORT
15:40:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:40:57: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

15:40:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:40:57: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 458 ] 
15:40:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

15:40:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:40:57: [GO4_globalInitCard]### Switch to Specify Card Type
15:40:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:40:59: Host Frequency set to 25000 KHz
15:40:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:40:59: [GO18_globalSetVolt]### Set Host Voltage value.
15:40:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
15:40:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DB50F0>, 0x0, True) , Command count = 459 ] 
15:40:59: [GO18_globalSetVolt]### Host voltage value is set.
15:40:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
15:40:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DB5120>, 0x0, False) , Command count = 460 ] 
15:40:59: [GO18_globalSetVolt]### Host voltage value is set.
15:40:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 461 ] 
15:40:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:41:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 462 ] 
15:41:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:41:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:41:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:41:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:41:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:41:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 463 ] 
15:41:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:41:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB51E0>, <py_sfcl.CommandDataDefinition object at 0x05DE9510>) , Command count = 464 ] 
15:41:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5210>, <py_sfcl.CommandDataDefinition object at 0x05DE95A0>) , Command count = 465 ] 
15:41:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:41:00: [ SetCardRCA(0x1, 0xD555) , Command count = 466 ] 
15:41:00: [DVTCommonLib]### Identification :Idenfication of card completed 

15:41:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:41:00: Host Frequency set to 25000 KHz
15:41:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:41:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:41:00: ####CSD Registe 2.0 Values####
15:41:00: CSD_STRUCTURE                                 :0x1
15:41:00: Reserv1                                       :0x0
15:41:00: Time Access 1 TAAC                            :0xe
15:41:00: Time Access 2 NSAC*100                        :0x0
15:41:00: Data Transfer Rate TRAN_SPEED                 :0x32
15:41:00: Card Command Classess CCC                     :0x5b5
15:41:00: Max Read Data Block Length  READ_BL_LEN       :0x9
15:41:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:41:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:41:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:41:00: DSR(driver stage register)  DSR_IMP           :0x0
15:41:00: Reserv2                                       :0x0
15:41:00: Device Size C_SIZE                            :0xedc8
15:41:00: Reserv3                                       :0x0
15:41:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:41:00: Erase Sector Size SECTOR_SIZE                 :0x7f
15:41:00: Write Protect Group Size WP_GRP_SIZE          :0x0
15:41:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:41:00: Reserv4                                       :0x0
15:41:00: Write Speed Factor R2W_FACTOR                 :0x2
15:41:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:41:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:41:00: FILE_FORMAT_GRP                               :0x0
15:41:00: COPY flag                                     :0x1
15:41:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:41:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:41:00: File_Format                                   :0x0
15:41:00: CRC                                           :0x0
15:41:00: ####CSD Registe Values####  

15:41:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:00: [GetSCRRegisterEntry] Passed
15:41:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:00: Data_Status_After Erases          : 0
15:41:00: CPRM Security Support             : No Security
15:41:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:00: Spec. Version                     : Version 3.0X
15:41:00: Extended Security Support         : Extended_Security_Not_Supported
15:41:00: Command Support                   : COMMAND_SUPPORT
15:41:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5270>, <py_sfcl.CommandDataDefinition object at 0x05DE9840>) , Command count = 467 ] 
15:41:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB52A0>, <py_sfcl.CommandDataDefinition object at 0x05DE9690>) , Command count = 468 ] 
15:41:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:41:00: [ SetBusWidth(0x4) , Command count = 469 ] 
15:41:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE96F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 470 ] 
15:41:00: Protected Area Size 0x28000
15:41:00: Bus Width           2
15:41:00: Secure Mode         0
15:41:00: Speed  Class        4
15:41:00: Perf Move           0
15:41:00: Au Size             9
15:41:00: Erase Size          15
15:41:00: Erase Timeout       1
15:41:00: Erase offset        1
15:41:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
15:41:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:41:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 471 ] 
15:41:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
15:41:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:41:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
15:41:00: Host Frequency set to 100000 KHz
15:41:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
15:41:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:41:00: ####CSD Registe 2.0 Values####
15:41:00: CSD_STRUCTURE                                 :0x1
15:41:00: Reserv1                                       :0x0
15:41:00: Time Access 1 TAAC                            :0xe
15:41:00: Time Access 2 NSAC*100                        :0x0
15:41:00: Data Transfer Rate TRAN_SPEED                 :0xb
15:41:00: Card Command Classess CCC                     :0x5b5
15:41:00: Max Read Data Block Length  READ_BL_LEN       :0x9
15:41:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:41:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:41:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:41:00: DSR(driver stage register)  DSR_IMP           :0x0
15:41:00: Reserv2                                       :0x0
15:41:00: Device Size C_SIZE                            :0xedc8
15:41:00: Reserv3                                       :0x0
15:41:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:41:00: Erase Sector Size SECTOR_SIZE                 :0x7f
15:41:00: Write Protect Group Size WP_GRP_SIZE          :0x0
15:41:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:41:00: Reserv4                                       :0x0
15:41:00: Write Speed Factor R2W_FACTOR                 :0x2
15:41:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:41:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:41:00: FILE_FORMAT_GRP                               :0x0
15:41:00: COPY flag                                     :0x1
15:41:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:41:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:41:00: File_Format                                   :0x0
15:41:00: CRC                                           :0x0
15:41:00: ####CSD Registe Values####  

15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5360>, <py_sfcl.CommandDataDefinition object at 0x05DE9960>) , Command count = 472 ] 
15:41:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5390>, <py_sfcl.CommandDataDefinition object at 0x05DE97B0>) , Command count = 473 ] 
15:41:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:41:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB53C0>, <py_sfcl.CommandDataDefinition object at 0x05DE9810>) , Command count = 474 ] 
15:41:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE98A0>, <py_sfcl.CommandDataDefinition object at 0x05DE98D0>) , Command count = 475 ] 
15:41:00: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5420>, <py_sfcl.CommandDataDefinition object at 0x05DE9930>) , Command count = 476 ] 
15:41:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB53F0>, <py_sfcl.CommandDataDefinition object at 0x05DB5450>) , Command count = 477 ] 
15:41:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE99F0>, <py_sfcl.CommandDataDefinition object at 0x05DE9A20>) , Command count = 478 ] 
15:41:00: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB54B0>, <py_sfcl.CommandDataDefinition object at 0x05DE9A80>) , Command count = 479 ] 
15:41:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5480>, <py_sfcl.CommandDataDefinition object at 0x05DB54E0>) , Command count = 480 ] 
15:41:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:00: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5510>, <py_sfcl.CommandDataDefinition object at 0x05DE9B10>) , Command count = 481 ] 
15:41:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9B70>, <py_sfcl.CommandDataDefinition object at 0x05DE9BA0>) , Command count = 482 ] 
15:41:00: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5570>, <py_sfcl.CommandDataDefinition object at 0x05DE9C00>) , Command count = 483 ] 
15:41:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5540>, <py_sfcl.CommandDataDefinition object at 0x05DB55A0>) , Command count = 484 ] 
15:41:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9C90>, <py_sfcl.CommandDataDefinition object at 0x05DE9CC0>) , Command count = 485 ] 
15:41:00: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5600>, <py_sfcl.CommandDataDefinition object at 0x05DE9D20>) , Command count = 486 ] 
15:41:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB55D0>, <py_sfcl.CommandDataDefinition object at 0x05DB5630>) , Command count = 487 ] 
15:41:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:00: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

15:41:00: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

15:41:00: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
15:41:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:00: [GetSCRRegisterEntry] Passed
15:41:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:00: Data_Status_After Erases          : 0
15:41:00: CPRM Security Support             : No Security
15:41:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:00: Spec. Version                     : Version 3.0X
15:41:00: Extended Security Support         : Extended_Security_Not_Supported
15:41:00: Command Support                   : COMMAND_SUPPORT
15:41:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:00: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

15:41:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:00: [GetSCRRegisterEntry] Passed
15:41:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:00: Data_Status_After Erases          : 0
15:41:00: CPRM Security Support             : No Security
15:41:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:00: Spec. Version                     : Version 3.0X
15:41:00: Extended Security Support         : Extended_Security_Not_Supported
15:41:00: Command Support                   : COMMAND_SUPPORT
15:41:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:00: [GetSCRRegisterEntry] Passed
15:41:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:00: Data_Status_After Erases          : 0
15:41:00: CPRM Security Support             : No Security
15:41:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:00: Spec. Version                     : Version 3.0X
15:41:00: Extended Security Support         : Extended_Security_Not_Supported
15:41:00: Command Support                   : COMMAND_SUPPORT
15:41:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:00: [GetSCRRegisterEntry] Passed
15:41:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:00: Data_Status_After Erases          : 0
15:41:00: CPRM Security Support             : No Security
15:41:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:00: Spec. Version                     : Version 3.0X
15:41:00: Extended Security Support         : Extended_Security_Not_Supported
15:41:00: Command Support                   : COMMAND_SUPPORT
15:41:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:00: [GetSCRRegisterEntry] Passed
15:41:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:00: Data_Status_After Erases          : 0
15:41:00: CPRM Security Support             : No Security
15:41:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:00: Spec. Version                     : Version 3.0X
15:41:00: Extended Security Support         : Extended_Security_Not_Supported
15:41:00: Command Support                   : COMMAND_SUPPORT
15:41:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:00: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

15:41:00: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
15:41:00: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

15:41:00: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

15:41:00: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

15:41:00: Perform Power Off and On.
15:41:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:41:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 488 ] 
15:41:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:41:02: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
15:41:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:41:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:41:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:41:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:41:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D40A80>, <py_sfcl.CommandDataDefinition object at 0x05DB5690>) , Command count = 489 ] 
15:41:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:41:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB56C0>, <py_sfcl.CommandDataDefinition object at 0x05DE9DE0>) , Command count = 490 ] 
15:41:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
15:41:02: [ SetCardRCA(0x1, 0xD555) , Command count = 491 ] 
15:41:02: [DVTCommonLib]### Identification :Idenfication of card completed 

15:41:02: [GO4_globalInitCard]### Switch to Specify Card Type
15:41:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:41:05: Host Frequency set to 25000 KHz
15:41:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:41:05: [GO18_globalSetVolt]### Set Host Voltage value.
15:41:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
15:41:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DB5720>, 0x0, True) , Command count = 492 ] 
15:41:05: [GO18_globalSetVolt]### Host voltage value is set.
15:41:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
15:41:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DB5750>, 0x0, False) , Command count = 493 ] 
15:41:05: [GO18_globalSetVolt]### Host voltage value is set.
15:41:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 494 ] 
15:41:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:41:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 495 ] 
15:41:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:41:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:41:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:41:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:41:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:41:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 496 ] 
15:41:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:41:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5810>, <py_sfcl.CommandDataDefinition object at 0x05DE9F00>) , Command count = 497 ] 
15:41:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5840>, <py_sfcl.CommandDataDefinition object at 0x05DE9EA0>) , Command count = 498 ] 
15:41:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:41:05: [ SetCardRCA(0x1, 0xD555) , Command count = 499 ] 
15:41:05: [DVTCommonLib]### Identification :Idenfication of card completed 

15:41:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:41:05: Host Frequency set to 25000 KHz
15:41:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:41:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:41:05: ####CSD Registe 2.0 Values####
15:41:05: CSD_STRUCTURE                                 :0x1
15:41:05: Reserv1                                       :0x0
15:41:05: Time Access 1 TAAC                            :0xe
15:41:05: Time Access 2 NSAC*100                        :0x0
15:41:05: Data Transfer Rate TRAN_SPEED                 :0x32
15:41:05: Card Command Classess CCC                     :0x5b5
15:41:05: Max Read Data Block Length  READ_BL_LEN       :0x9
15:41:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:41:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:41:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:41:05: DSR(driver stage register)  DSR_IMP           :0x0
15:41:05: Reserv2                                       :0x0
15:41:05: Device Size C_SIZE                            :0xedc8
15:41:05: Reserv3                                       :0x0
15:41:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:41:05: Erase Sector Size SECTOR_SIZE                 :0x7f
15:41:05: Write Protect Group Size WP_GRP_SIZE          :0x0
15:41:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:41:05: Reserv4                                       :0x0
15:41:05: Write Speed Factor R2W_FACTOR                 :0x2
15:41:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:41:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:41:05: FILE_FORMAT_GRP                               :0x0
15:41:05: COPY flag                                     :0x1
15:41:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:41:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:41:05: File_Format                                   :0x0
15:41:05: CRC                                           :0x0
15:41:05: ####CSD Registe Values####  

15:41:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:05: [GetSCRRegisterEntry] Passed
15:41:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:05: Data_Status_After Erases          : 0
15:41:05: CPRM Security Support             : No Security
15:41:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:05: Spec. Version                     : Version 3.0X
15:41:05: Extended Security Support         : Extended_Security_Not_Supported
15:41:05: Command Support                   : COMMAND_SUPPORT
15:41:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB58A0>, <py_sfcl.CommandDataDefinition object at 0x05DE9F90>) , Command count = 500 ] 
15:41:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB58D0>, <py_sfcl.CommandDataDefinition object at 0x05DEB030>) , Command count = 501 ] 
15:41:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:41:05: [ SetBusWidth(0x4) , Command count = 502 ] 
15:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DEB090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 503 ] 
15:41:05: Protected Area Size 0x28000
15:41:05: Bus Width           2
15:41:05: Secure Mode         0
15:41:05: Speed  Class        4
15:41:05: Perf Move           0
15:41:05: Au Size             9
15:41:05: Erase Size          15
15:41:05: Erase Timeout       1
15:41:05: Erase offset        1
15:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
15:41:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:41:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 504 ] 
15:41:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
15:41:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:41:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
15:41:05: Host Frequency set to 100000 KHz
15:41:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
15:41:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:41:05: ####CSD Registe 2.0 Values####
15:41:05: CSD_STRUCTURE                                 :0x1
15:41:05: Reserv1                                       :0x0
15:41:05: Time Access 1 TAAC                            :0xe
15:41:05: Time Access 2 NSAC*100                        :0x0
15:41:05: Data Transfer Rate TRAN_SPEED                 :0xb
15:41:05: Card Command Classess CCC                     :0x5b5
15:41:05: Max Read Data Block Length  READ_BL_LEN       :0x9
15:41:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:41:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:41:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:41:05: DSR(driver stage register)  DSR_IMP           :0x0
15:41:05: Reserv2                                       :0x0
15:41:05: Device Size C_SIZE                            :0xedc8
15:41:05: Reserv3                                       :0x0
15:41:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:41:05: Erase Sector Size SECTOR_SIZE                 :0x7f
15:41:05: Write Protect Group Size WP_GRP_SIZE          :0x0
15:41:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:41:05: Reserv4                                       :0x0
15:41:05: Write Speed Factor R2W_FACTOR                 :0x2
15:41:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:41:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:41:05: FILE_FORMAT_GRP                               :0x0
15:41:05: COPY flag                                     :0x1
15:41:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:41:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:41:05: File_Format                                   :0x0
15:41:05: CRC                                           :0x0
15:41:05: ####CSD Registe Values####  

15:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5960>, <py_sfcl.CommandDataDefinition object at 0x05DEB2A0>) , Command count = 505 ] 
15:41:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x051E0AE0>, <py_sfcl.CommandDataDefinition object at 0x05DEB120>) , Command count = 506 ] 
15:41:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:41:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


15:41:05: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
15:41:05: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

15:41:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
15:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x051D7330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 507 ] 
15:41:05: Protected Area Size 0x28000
15:41:05: Bus Width           2
15:41:05: Secure Mode         0
15:41:05: Speed  Class        4
15:41:05: Perf Move           0
15:41:05: Au Size             9
15:41:05: Erase Size          15
15:41:05: Erase Timeout       1
15:41:05: Erase offset        1
15:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

15:41:05: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
15:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DEB240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 508 ] 
15:41:05: Protected Area Size 0x28000
15:41:05: Bus Width           2
15:41:05: Secure Mode         0
15:41:05: Speed  Class        4
15:41:05: Perf Move           0
15:41:05: Au Size             9
15:41:05: Erase Size          15
15:41:05: Erase Timeout       1
15:41:05: Erase offset        1
15:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
15:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x051F7720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 509 ] 
15:41:05: Protected Area Size 0x28000
15:41:05: Bus Width           2
15:41:05: Secure Mode         0
15:41:05: Speed  Class        4
15:41:05: Perf Move           0
15:41:05: Au Size             9
15:41:05: Erase Size          15
15:41:05: Erase Timeout       1
15:41:05: Erase offset        1
15:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
15:41:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
15:41:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

15:41:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

15:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DEB240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 510 ] 
15:41:05: Protected Area Size 0x28000
15:41:05: Bus Width           2
15:41:05: Secure Mode         0
15:41:05: Speed  Class        4
15:41:05: Perf Move           0
15:41:05: Au Size             9
15:41:05: Erase Size          15
15:41:05: Erase Timeout       1
15:41:05: Erase offset        1
15:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
15:41:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
15:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x051D7480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 511 ] 
15:41:05: Protected Area Size 0x28000
15:41:05: Bus Width           2
15:41:05: Secure Mode         0
15:41:05: Speed  Class        4
15:41:05: Perf Move           0
15:41:05: Au Size             9
15:41:05: Erase Size          15
15:41:05: Erase Timeout       1
15:41:05: Erase offset        1
15:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
15:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DEB240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 512 ] 
15:41:05: Protected Area Size 0x28000
15:41:05: Bus Width           2
15:41:05: Secure Mode         0
15:41:05: Speed  Class        4
15:41:05: Perf Move           0
15:41:05: Au Size             9
15:41:05: Erase Size          15
15:41:05: Erase Timeout       1
15:41:05: Erase offset        1
15:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
15:41:05: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
15:41:05: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 30 

15:41:05: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

15:41:07: [ HostReset(False) , Command count = 513 ] 
15:41:07: [ SetSpecialModes(0x5, True) , Command count = 514 ] 
15:41:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB59C0>, <py_sfcl.CommandDataDefinition object at 0x05206540>) , Command count = 515 ] 
15:41:07: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
15:41:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05206F90>, <py_sfcl.CommandDataDefinition object at 0x05DEB330>) , Command count = 516 ] 
15:41:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:41:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052065D0>, <py_sfcl.CommandDataDefinition object at 0x05DEB390>) , Command count = 517 ] 
15:41:08: [ GetCardStatus() , Command count = 518 ] 
15:41:08: ACmd51[ SEND_SCR ] Failed with an exception
15:41:08: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:41:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7900>, <py_sfcl.CommandDataDefinition object at 0x05DA7930>) , Command count = 519 ] 
15:41:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:41:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0520F030>, <py_sfcl.CommandDataDefinition object at 0x05DEB450>) , Command count = 520 ] 
15:41:08: [ GetCardStatus() , Command count = 521 ] 
15:41:08: ACMD13[ SD_STATUS ] Failed with an exception
15:41:08: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

15:41:08: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

15:41:10: [ HostReset(False) , Command count = 522 ] 
15:41:10: [ SetSpecialModes(0x5, True) , Command count = 523 ] 
15:41:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05215D20>, <py_sfcl.CommandDataDefinition object at 0x05D38180>) , Command count = 524 ] 
15:41:10: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
15:41:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05215DB0>, <py_sfcl.CommandDataDefinition object at 0x05DEB4E0>) , Command count = 525 ] 
15:41:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:41:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05215D50>, <py_sfcl.CommandDataDefinition object at 0x05DEB540>) , Command count = 526 ] 
15:41:10: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
15:41:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0520F1E0>, <py_sfcl.CommandDataDefinition object at 0x05DEB5A0>) , Command count = 527 ] 
15:41:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:41:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05215150>, <py_sfcl.CommandDataDefinition object at 0x05DEB600>) , Command count = 528 ] 
15:41:10: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
15:41:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05215F90>, <py_sfcl.CommandDataDefinition object at 0x05DEB660>) , Command count = 529 ] 
15:41:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:41:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05215FC0>, <py_sfcl.CommandDataDefinition object at 0x05DEB6C0>) , Command count = 530 ] 
15:41:10: [ GetCardStatus() , Command count = 531 ] 
15:41:10: ACmd51[ SEND_SCR ] Failed with an exception
15:41:10: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:41:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0520F030>, <py_sfcl.CommandDataDefinition object at 0x05C82030>) , Command count = 532 ] 
15:41:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:41:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C82180>, <py_sfcl.CommandDataDefinition object at 0x05DEB780>) , Command count = 533 ] 
15:41:10: [ GetCardStatus() , Command count = 534 ] 
15:41:10: ACMD13[ SD_STATUS ] Failed with an exception
15:41:10: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

15:41:10: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

15:41:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:41:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 535 ] 
15:41:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:41:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:41:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:41:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:41:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:41:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 536 ] 
15:41:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:41:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D40F00>, <py_sfcl.CommandDataDefinition object at 0x05C82300>) , Command count = 537 ] 
15:41:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:41:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:13: [GetSCRRegisterEntry] Failed
15:41:13: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

15:41:13: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
15:41:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DEB7E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 538 ] 
15:41:13: [ GetCardStatus() , Command count = 539 ] 
15:41:13: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
15:41:13: [DVTCommonLib]### Exception_Details :Time out error on card response
15:41:13: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

15:41:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x051EB7B0>, <py_sfcl.CommandDataDefinition object at 0x05C82180>) , Command count = 540 ] 
15:41:13: [ GetCardStatus() , Command count = 541 ] 
15:41:13: CMD55[ APP_CMD ] Failed with an exception
15:41:13: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:41:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C82360>, <py_sfcl.CommandDataDefinition object at 0x05C82390>) , Command count = 542 ] 
15:41:13: [ GetCardStatus() , Command count = 543 ] 
15:41:13: ACmd51[ SEND_SCR ] Failed with an exception
15:41:13: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:41:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x051EB7B0>, <py_sfcl.CommandDataDefinition object at 0x05D40C00>) , Command count = 544 ] 
15:41:13: [ GetCardStatus() , Command count = 545 ] 
15:41:13: CMD55[ APP_CMD ] Failed with an exception
15:41:13: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:41:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C82390>, <py_sfcl.CommandDataDefinition object at 0x05C82360>) , Command count = 546 ] 
15:41:13: [ GetCardStatus() , Command count = 547 ] 
15:41:13: ACMD13[ SD_STATUS ] Failed with an exception
15:41:13: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

15:41:13: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

15:41:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:41:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 548 ] 
15:41:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:41:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:41:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:41:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:41:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:41:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 549 ] 
15:41:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:41:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:41:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D38420>, <py_sfcl.CommandDataDefinition object at 0x05D38270>) , Command count = 550 ] 
15:41:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:41:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D381E0>, <py_sfcl.CommandDataDefinition object at 0x05DEB9C0>) , Command count = 551 ] 
15:41:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:41:15: [ SetCardRCA(0x1, 0xD555) , Command count = 552 ] 
15:41:15: [DVTCommonLib]### Identification :Idenfication of card completed 

15:41:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D38360>, <py_sfcl.CommandDataDefinition object at 0x05DEBA20>) , Command count = 553 ] 
15:41:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:41:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:15: [GetSCRRegisterEntry] Passed
15:41:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:15: Data_Status_After Erases          : 0
15:41:15: CPRM Security Support             : No Security
15:41:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:15: Spec. Version                     : Version 3.0X
15:41:15: Extended Security Support         : Extended_Security_Not_Supported
15:41:15: Command Support                   : COMMAND_SUPPORT
15:41:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DEBA80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 554 ] 
15:41:15: Protected Area Size 0x28000
15:41:15: Bus Width           0
15:41:15: Secure Mode         0
15:41:15: Speed  Class        4
15:41:15: Perf Move           0
15:41:15: Au Size             9
15:41:15: Erase Size          15
15:41:15: Erase Timeout       1
15:41:15: Erase offset        1
15:41:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:15: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

15:41:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:41:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 555 ] 
15:41:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:41:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:41:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:41:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:41:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:41:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 556 ] 
15:41:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:41:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:41:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5AB0>, <py_sfcl.CommandDataDefinition object at 0x05DEBAE0>) , Command count = 557 ] 
15:41:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:41:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D40AB0>, <py_sfcl.CommandDataDefinition object at 0x05DEBAB0>) , Command count = 558 ] 
15:41:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:41:18: [ SetCardRCA(0x1, 0xD555) , Command count = 559 ] 
15:41:18: [DVTCommonLib]### Identification :Idenfication of card completed 

15:41:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D40FC0>, <py_sfcl.CommandDataDefinition object at 0x05DEBB70>) , Command count = 560 ] 
15:41:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:41:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D38300>, <py_sfcl.CommandDataDefinition object at 0x05DEBBD0>) , Command count = 561 ] 
15:41:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:18: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
15:41:18: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
15:41:18: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
15:41:18: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

15:41:18: Perform Power Off and On.
15:41:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:41:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 562 ] 
15:41:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:41:20: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
15:41:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:41:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:41:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:41:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:41:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D98150>, <py_sfcl.CommandDataDefinition object at 0x05DEBC30>) , Command count = 563 ] 
15:41:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:41:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D980C0>, <py_sfcl.CommandDataDefinition object at 0x05DEBC90>) , Command count = 564 ] 
15:41:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
15:41:20: [ SetCardRCA(0x1, 0xD555) , Command count = 565 ] 
15:41:20: [DVTCommonLib]### Identification :Idenfication of card completed 

15:41:20: [GO4_globalInitCard]### Switch to Specify Card Type
15:41:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:41:22: Host Frequency set to 25000 KHz
15:41:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:41:22: [GO18_globalSetVolt]### Set Host Voltage value.
15:41:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
15:41:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x05C829C0>, 0x0, True) , Command count = 566 ] 
15:41:22: [GO18_globalSetVolt]### Host voltage value is set.
15:41:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
15:41:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x05C829F0>, 0x0, False) , Command count = 567 ] 
15:41:22: [GO18_globalSetVolt]### Host voltage value is set.
15:41:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 568 ] 
15:41:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:41:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 569 ] 
15:41:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:41:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:41:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:41:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:41:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:41:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 570 ] 
15:41:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:41:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:41:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D98300>, <py_sfcl.CommandDataDefinition object at 0x05DEBD80>) , Command count = 571 ] 
15:41:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:41:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D98690>, <py_sfcl.CommandDataDefinition object at 0x05DEBD20>) , Command count = 572 ] 
15:41:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:41:22: [ SetCardRCA(0x1, 0xD555) , Command count = 573 ] 
15:41:23: [DVTCommonLib]### Identification :Idenfication of card completed 

15:41:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:41:23: Host Frequency set to 25000 KHz
15:41:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:41:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:41:23: ####CSD Registe 2.0 Values####
15:41:23: CSD_STRUCTURE                                 :0x1
15:41:23: Reserv1                                       :0x0
15:41:23: Time Access 1 TAAC                            :0xe
15:41:23: Time Access 2 NSAC*100                        :0x0
15:41:23: Data Transfer Rate TRAN_SPEED                 :0x32
15:41:23: Card Command Classess CCC                     :0x5b5
15:41:23: Max Read Data Block Length  READ_BL_LEN       :0x9
15:41:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:41:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:41:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:41:23: DSR(driver stage register)  DSR_IMP           :0x0
15:41:23: Reserv2                                       :0x0
15:41:23: Device Size C_SIZE                            :0xedc8
15:41:23: Reserv3                                       :0x0
15:41:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:41:23: Erase Sector Size SECTOR_SIZE                 :0x7f
15:41:23: Write Protect Group Size WP_GRP_SIZE          :0x0
15:41:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:41:23: Reserv4                                       :0x0
15:41:23: Write Speed Factor R2W_FACTOR                 :0x2
15:41:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:41:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:41:23: FILE_FORMAT_GRP                               :0x0
15:41:23: COPY flag                                     :0x1
15:41:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:41:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:41:23: File_Format                                   :0x0
15:41:23: CRC                                           :0x0
15:41:23: ####CSD Registe Values####  

15:41:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:23: [GetSCRRegisterEntry] Passed
15:41:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:23: Data_Status_After Erases          : 0
15:41:23: CPRM Security Support             : No Security
15:41:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:23: Spec. Version                     : Version 3.0X
15:41:23: Extended Security Support         : Extended_Security_Not_Supported
15:41:23: Command Support                   : COMMAND_SUPPORT
15:41:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D98F90>, <py_sfcl.CommandDataDefinition object at 0x05DEBE10>) , Command count = 574 ] 
15:41:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:41:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3030>, <py_sfcl.CommandDataDefinition object at 0x05DEBE70>) , Command count = 575 ] 
15:41:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:41:23: [ SetBusWidth(0x4) , Command count = 576 ] 
15:41:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DEBF00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 577 ] 
15:41:23: Protected Area Size 0x28000
15:41:23: Bus Width           2
15:41:23: Secure Mode         0
15:41:23: Speed  Class        4
15:41:23: Perf Move           0
15:41:23: Au Size             9
15:41:23: Erase Size          15
15:41:23: Erase Timeout       1
15:41:23: Erase offset        1
15:41:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
15:41:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:41:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 578 ] 
15:41:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
15:41:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:41:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
15:41:23: Host Frequency set to 100000 KHz
15:41:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
15:41:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:41:23: ####CSD Registe 2.0 Values####
15:41:23: CSD_STRUCTURE                                 :0x1
15:41:23: Reserv1                                       :0x0
15:41:23: Time Access 1 TAAC                            :0xe
15:41:23: Time Access 2 NSAC*100                        :0x0
15:41:23: Data Transfer Rate TRAN_SPEED                 :0xb
15:41:23: Card Command Classess CCC                     :0x5b5
15:41:23: Max Read Data Block Length  READ_BL_LEN       :0x9
15:41:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:41:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:41:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:41:23: DSR(driver stage register)  DSR_IMP           :0x0
15:41:23: Reserv2                                       :0x0
15:41:23: Device Size C_SIZE                            :0xedc8
15:41:23: Reserv3                                       :0x0
15:41:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:41:23: Erase Sector Size SECTOR_SIZE                 :0x7f
15:41:23: Write Protect Group Size WP_GRP_SIZE          :0x0
15:41:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:41:23: Reserv4                                       :0x0
15:41:23: Write Speed Factor R2W_FACTOR                 :0x2
15:41:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:41:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:41:23: FILE_FORMAT_GRP                               :0x0
15:41:23: COPY flag                                     :0x1
15:41:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:41:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:41:23: File_Format                                   :0x0
15:41:23: CRC                                           :0x0
15:41:23: ####CSD Registe Values####  

15:41:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D985D0>, <py_sfcl.CommandDataDefinition object at 0x05DEBF30>) , Command count = 579 ] 
15:41:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:41:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA31E0>, <py_sfcl.CommandDataDefinition object at 0x05DEBF90>) , Command count = 580 ] 
15:41:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:41:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


15:41:23: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
15:41:23: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

15:41:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:23: [GetSCRRegisterEntry] Passed
15:41:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:23: Data_Status_After Erases          : 0
15:41:23: CPRM Security Support             : No Security
15:41:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:23: Spec. Version                     : Version 3.0X
15:41:23: Extended Security Support         : Extended_Security_Not_Supported
15:41:23: Command Support                   : COMMAND_SUPPORT
15:41:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:23: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

15:41:23: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

15:41:23: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

15:41:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:23: [GetSCRRegisterEntry] Passed
15:41:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:23: Data_Status_After Erases          : 0
15:41:23: CPRM Security Support             : No Security
15:41:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:23: Spec. Version                     : Version 3.0X
15:41:23: Extended Security Support         : Extended_Security_Not_Supported
15:41:23: Command Support                   : COMMAND_SUPPORT
15:41:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:23: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

15:41:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:41:23: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 581 ] 
15:41:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

15:41:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:41:23: [GO4_globalInitCard]### Switch to Specify Card Type
15:41:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:41:25: Host Frequency set to 25000 KHz
15:41:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:41:25: [GO18_globalSetVolt]### Set Host Voltage value.
15:41:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
15:41:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DA3210>, 0x0, True) , Command count = 582 ] 
15:41:25: [GO18_globalSetVolt]### Host voltage value is set.
15:41:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
15:41:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DA3300>, 0x0, False) , Command count = 583 ] 
15:41:25: [GO18_globalSetVolt]### Host voltage value is set.
15:41:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 584 ] 
15:41:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:41:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 585 ] 
15:41:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:41:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:41:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:41:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:41:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:41:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 586 ] 
15:41:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:41:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:41:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3330>, <py_sfcl.CommandDataDefinition object at 0x05DEE060>) , Command count = 587 ] 
15:41:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:41:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3540>, <py_sfcl.CommandDataDefinition object at 0x05DEE090>) , Command count = 588 ] 
15:41:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:41:25: [ SetCardRCA(0x1, 0xD555) , Command count = 589 ] 
15:41:25: [DVTCommonLib]### Identification :Idenfication of card completed 

15:41:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:41:25: Host Frequency set to 25000 KHz
15:41:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:41:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:41:25: ####CSD Registe 2.0 Values####
15:41:25: CSD_STRUCTURE                                 :0x1
15:41:25: Reserv1                                       :0x0
15:41:25: Time Access 1 TAAC                            :0xe
15:41:25: Time Access 2 NSAC*100                        :0x0
15:41:25: Data Transfer Rate TRAN_SPEED                 :0x32
15:41:25: Card Command Classess CCC                     :0x5b5
15:41:25: Max Read Data Block Length  READ_BL_LEN       :0x9
15:41:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:41:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:41:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:41:25: DSR(driver stage register)  DSR_IMP           :0x0
15:41:25: Reserv2                                       :0x0
15:41:25: Device Size C_SIZE                            :0xedc8
15:41:25: Reserv3                                       :0x0
15:41:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:41:25: Erase Sector Size SECTOR_SIZE                 :0x7f
15:41:25: Write Protect Group Size WP_GRP_SIZE          :0x0
15:41:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:41:25: Reserv4                                       :0x0
15:41:25: Write Speed Factor R2W_FACTOR                 :0x2
15:41:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:41:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:41:25: FILE_FORMAT_GRP                               :0x0
15:41:25: COPY flag                                     :0x1
15:41:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:41:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:41:25: File_Format                                   :0x0
15:41:25: CRC                                           :0x0
15:41:25: ####CSD Registe Values####  

15:41:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:25: [GetSCRRegisterEntry] Passed
15:41:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:25: Data_Status_After Erases          : 0
15:41:25: CPRM Security Support             : No Security
15:41:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:25: Spec. Version                     : Version 3.0X
15:41:25: Extended Security Support         : Extended_Security_Not_Supported
15:41:25: Command Support                   : COMMAND_SUPPORT
15:41:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3750>, <py_sfcl.CommandDataDefinition object at 0x05DEE300>) , Command count = 590 ] 
15:41:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:41:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA35D0>, <py_sfcl.CommandDataDefinition object at 0x05DEE150>) , Command count = 591 ] 
15:41:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:41:26: [ SetBusWidth(0x4) , Command count = 592 ] 
15:41:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DEE1B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 593 ] 
15:41:26: Protected Area Size 0x28000
15:41:26: Bus Width           2
15:41:26: Secure Mode         0
15:41:26: Speed  Class        4
15:41:26: Perf Move           0
15:41:26: Au Size             9
15:41:26: Erase Size          15
15:41:26: Erase Timeout       1
15:41:26: Erase offset        1
15:41:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
15:41:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:41:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 594 ] 
15:41:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
15:41:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:41:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
15:41:26: Host Frequency set to 100000 KHz
15:41:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
15:41:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:41:26: ####CSD Registe 2.0 Values####
15:41:26: CSD_STRUCTURE                                 :0x1
15:41:26: Reserv1                                       :0x0
15:41:26: Time Access 1 TAAC                            :0xe
15:41:26: Time Access 2 NSAC*100                        :0x0
15:41:26: Data Transfer Rate TRAN_SPEED                 :0xb
15:41:26: Card Command Classess CCC                     :0x5b5
15:41:26: Max Read Data Block Length  READ_BL_LEN       :0x9
15:41:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:41:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:41:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:41:26: DSR(driver stage register)  DSR_IMP           :0x0
15:41:26: Reserv2                                       :0x0
15:41:26: Device Size C_SIZE                            :0xedc8
15:41:26: Reserv3                                       :0x0
15:41:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:41:26: Erase Sector Size SECTOR_SIZE                 :0x7f
15:41:26: Write Protect Group Size WP_GRP_SIZE          :0x0
15:41:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:41:26: Reserv4                                       :0x0
15:41:26: Write Speed Factor R2W_FACTOR                 :0x2
15:41:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:41:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:41:26: FILE_FORMAT_GRP                               :0x0
15:41:26: COPY flag                                     :0x1
15:41:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:41:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:41:26: File_Format                                   :0x0
15:41:26: CRC                                           :0x0
15:41:26: ####CSD Registe Values####  

15:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA38A0>, <py_sfcl.CommandDataDefinition object at 0x05DEE420>) , Command count = 595 ] 
15:41:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA36C0>, <py_sfcl.CommandDataDefinition object at 0x05DEE270>) , Command count = 596 ] 
15:41:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:41:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


15:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3990>, <py_sfcl.CommandDataDefinition object at 0x05DEE2D0>) , Command count = 597 ] 
15:41:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEE360>, <py_sfcl.CommandDataDefinition object at 0x05DEE390>) , Command count = 598 ] 
15:41:26: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
15:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3BA0>, <py_sfcl.CommandDataDefinition object at 0x05DEE3F0>) , Command count = 599 ] 
15:41:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3A20>, <py_sfcl.CommandDataDefinition object at 0x05DA3690>) , Command count = 600 ] 
15:41:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEE4B0>, <py_sfcl.CommandDataDefinition object at 0x05DEE4E0>) , Command count = 601 ] 
15:41:26: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
15:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3C00>, <py_sfcl.CommandDataDefinition object at 0x05DEE540>) , Command count = 602 ] 
15:41:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3BD0>, <py_sfcl.CommandDataDefinition object at 0x05DA39C0>) , Command count = 603 ] 
15:41:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:26: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
15:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEE5D0>, <py_sfcl.CommandDataDefinition object at 0x05DEE600>) , Command count = 604 ] 
15:41:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEE660>, <py_sfcl.CommandDataDefinition object at 0x05DEE690>) , Command count = 605 ] 
15:41:26: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
15:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3090>, <py_sfcl.CommandDataDefinition object at 0x05E4D360>) , Command count = 606 ] 
15:41:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D40A50>, <py_sfcl.CommandDataDefinition object at 0x05DA3CC0>) , Command count = 607 ] 
15:41:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEE720>, <py_sfcl.CommandDataDefinition object at 0x05DEE750>) , Command count = 608 ] 
15:41:26: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
15:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEE7B0>, <py_sfcl.CommandDataDefinition object at 0x05DEE7E0>) , Command count = 609 ] 
15:41:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D40E10>, <py_sfcl.CommandDataDefinition object at 0x05DA3DB0>) , Command count = 610 ] 
15:41:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:26: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

15:41:26: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

15:41:26: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
15:41:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:26: [GetSCRRegisterEntry] Passed
15:41:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:26: Data_Status_After Erases          : 0
15:41:26: CPRM Security Support             : No Security
15:41:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:26: Spec. Version                     : Version 3.0X
15:41:26: Extended Security Support         : Extended_Security_Not_Supported
15:41:26: Command Support                   : COMMAND_SUPPORT
15:41:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:26: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

15:41:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:26: [GetSCRRegisterEntry] Passed
15:41:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:26: Data_Status_After Erases          : 0
15:41:26: CPRM Security Support             : No Security
15:41:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:26: Spec. Version                     : Version 3.0X
15:41:26: Extended Security Support         : Extended_Security_Not_Supported
15:41:26: Command Support                   : COMMAND_SUPPORT
15:41:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:26: [GetSCRRegisterEntry] Passed
15:41:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:26: Data_Status_After Erases          : 0
15:41:26: CPRM Security Support             : No Security
15:41:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:26: Spec. Version                     : Version 3.0X
15:41:26: Extended Security Support         : Extended_Security_Not_Supported
15:41:26: Command Support                   : COMMAND_SUPPORT
15:41:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:26: [GetSCRRegisterEntry] Passed
15:41:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:26: Data_Status_After Erases          : 0
15:41:26: CPRM Security Support             : No Security
15:41:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:26: Spec. Version                     : Version 3.0X
15:41:26: Extended Security Support         : Extended_Security_Not_Supported
15:41:26: Command Support                   : COMMAND_SUPPORT
15:41:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:26: [GetSCRRegisterEntry] Passed
15:41:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:26: Data_Status_After Erases          : 0
15:41:26: CPRM Security Support             : No Security
15:41:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:26: Spec. Version                     : Version 3.0X
15:41:26: Extended Security Support         : Extended_Security_Not_Supported
15:41:26: Command Support                   : COMMAND_SUPPORT
15:41:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:26: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

15:41:26: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
15:41:26: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

15:41:26: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

15:41:26: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

15:41:26: Perform Power Off and On.
15:41:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:41:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 611 ] 
15:41:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:41:28: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
15:41:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:41:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:41:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:41:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:41:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4DBD0>, <py_sfcl.CommandDataDefinition object at 0x05DA3DE0>) , Command count = 612 ] 
15:41:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:41:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3E40>, <py_sfcl.CommandDataDefinition object at 0x05DA3AE0>) , Command count = 613 ] 
15:41:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
15:41:28: [ SetCardRCA(0x1, 0xD555) , Command count = 614 ] 
15:41:28: [DVTCommonLib]### Identification :Idenfication of card completed 

15:41:28: [GO4_globalInitCard]### Switch to Specify Card Type
15:41:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:41:30: Host Frequency set to 25000 KHz
15:41:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:41:30: [GO18_globalSetVolt]### Set Host Voltage value.
15:41:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
15:41:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DA3E70>, 0x0, True) , Command count = 615 ] 
15:41:30: [GO18_globalSetVolt]### Host voltage value is set.
15:41:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
15:41:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DA3ED0>, 0x0, False) , Command count = 616 ] 
15:41:30: [GO18_globalSetVolt]### Host voltage value is set.
15:41:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 617 ] 
15:41:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:41:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 618 ] 
15:41:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:41:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:41:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:41:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:41:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:41:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 619 ] 
15:41:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:41:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:41:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3F60>, <py_sfcl.CommandDataDefinition object at 0x05E4D630>) , Command count = 620 ] 
15:41:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:41:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3F00>, <py_sfcl.CommandDataDefinition object at 0x05E4DE40>) , Command count = 621 ] 
15:41:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:41:30: [ SetCardRCA(0x1, 0xD555) , Command count = 622 ] 
15:41:31: [DVTCommonLib]### Identification :Idenfication of card completed 

15:41:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:41:31: Host Frequency set to 25000 KHz
15:41:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:41:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:41:31: ####CSD Registe 2.0 Values####
15:41:31: CSD_STRUCTURE                                 :0x1
15:41:31: Reserv1                                       :0x0
15:41:31: Time Access 1 TAAC                            :0xe
15:41:31: Time Access 2 NSAC*100                        :0x0
15:41:31: Data Transfer Rate TRAN_SPEED                 :0x32
15:41:31: Card Command Classess CCC                     :0x5b5
15:41:31: Max Read Data Block Length  READ_BL_LEN       :0x9
15:41:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:41:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:41:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:41:31: DSR(driver stage register)  DSR_IMP           :0x0
15:41:31: Reserv2                                       :0x0
15:41:31: Device Size C_SIZE                            :0xedc8
15:41:31: Reserv3                                       :0x0
15:41:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:41:31: Erase Sector Size SECTOR_SIZE                 :0x7f
15:41:31: Write Protect Group Size WP_GRP_SIZE          :0x0
15:41:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:41:31: Reserv4                                       :0x0
15:41:31: Write Speed Factor R2W_FACTOR                 :0x2
15:41:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:41:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:41:31: FILE_FORMAT_GRP                               :0x0
15:41:31: COPY flag                                     :0x1
15:41:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:41:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:41:31: File_Format                                   :0x0
15:41:31: CRC                                           :0x0
15:41:31: ####CSD Registe Values####  

15:41:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:31: [GetSCRRegisterEntry] Passed
15:41:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:31: Data_Status_After Erases          : 0
15:41:31: CPRM Security Support             : No Security
15:41:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:31: Spec. Version                     : Version 3.0X
15:41:31: Extended Security Support         : Extended_Security_Not_Supported
15:41:31: Command Support                   : COMMAND_SUPPORT
15:41:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3F90>, <py_sfcl.CommandDataDefinition object at 0x05E4D120>) , Command count = 623 ] 
15:41:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:41:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05206480>, <py_sfcl.CommandDataDefinition object at 0x05DA7060>) , Command count = 624 ] 
15:41:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:41:31: [ SetBusWidth(0x4) , Command count = 625 ] 
15:41:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4D780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 626 ] 
15:41:31: Protected Area Size 0x28000
15:41:31: Bus Width           2
15:41:31: Secure Mode         0
15:41:31: Speed  Class        4
15:41:31: Perf Move           0
15:41:31: Au Size             9
15:41:31: Erase Size          15
15:41:31: Erase Timeout       1
15:41:31: Erase offset        1
15:41:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
15:41:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:41:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 627 ] 
15:41:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
15:41:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:41:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
15:41:31: Host Frequency set to 100000 KHz
15:41:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
15:41:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:41:31: ####CSD Registe 2.0 Values####
15:41:31: CSD_STRUCTURE                                 :0x1
15:41:31: Reserv1                                       :0x0
15:41:31: Time Access 1 TAAC                            :0xe
15:41:31: Time Access 2 NSAC*100                        :0x0
15:41:31: Data Transfer Rate TRAN_SPEED                 :0xb
15:41:31: Card Command Classess CCC                     :0x5b5
15:41:31: Max Read Data Block Length  READ_BL_LEN       :0x9
15:41:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:41:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:41:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:41:31: DSR(driver stage register)  DSR_IMP           :0x0
15:41:31: Reserv2                                       :0x0
15:41:31: Device Size C_SIZE                            :0xedc8
15:41:31: Reserv3                                       :0x0
15:41:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:41:31: Erase Sector Size SECTOR_SIZE                 :0x7f
15:41:31: Write Protect Group Size WP_GRP_SIZE          :0x0
15:41:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:41:31: Reserv4                                       :0x0
15:41:31: Write Speed Factor R2W_FACTOR                 :0x2
15:41:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:41:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:41:31: FILE_FORMAT_GRP                               :0x0
15:41:31: COPY flag                                     :0x1
15:41:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:41:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:41:31: File_Format                                   :0x0
15:41:31: CRC                                           :0x0
15:41:31: ####CSD Registe Values####  

15:41:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x051135D0>, <py_sfcl.CommandDataDefinition object at 0x05E4DF00>) , Command count = 628 ] 
15:41:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:41:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7150>, <py_sfcl.CommandDataDefinition object at 0x05DEE990>) , Command count = 629 ] 
15:41:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:41:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


15:41:31: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
15:41:31: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

15:41:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
15:41:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05D40F30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 630 ] 
15:41:31: Protected Area Size 0x28000
15:41:31: Bus Width           2
15:41:31: Secure Mode         0
15:41:31: Speed  Class        4
15:41:31: Perf Move           0
15:41:31: Au Size             9
15:41:31: Erase Size          15
15:41:31: Erase Timeout       1
15:41:31: Erase offset        1
15:41:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

15:41:31: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
15:41:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4D750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 631 ] 
15:41:31: Protected Area Size 0x28000
15:41:31: Bus Width           2
15:41:31: Secure Mode         0
15:41:31: Speed  Class        4
15:41:31: Perf Move           0
15:41:31: Au Size             9
15:41:31: Erase Size          15
15:41:31: Erase Timeout       1
15:41:31: Erase offset        1
15:41:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
15:41:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DA71E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 632 ] 
15:41:31: Protected Area Size 0x28000
15:41:31: Bus Width           2
15:41:31: Secure Mode         0
15:41:31: Speed  Class        4
15:41:31: Perf Move           0
15:41:31: Au Size             9
15:41:31: Erase Size          15
15:41:31: Erase Timeout       1
15:41:31: Erase offset        1
15:41:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
15:41:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
15:41:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

15:41:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

15:41:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4D750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 633 ] 
15:41:31: Protected Area Size 0x28000
15:41:31: Bus Width           2
15:41:31: Secure Mode         0
15:41:31: Speed  Class        4
15:41:31: Perf Move           0
15:41:31: Au Size             9
15:41:31: Erase Size          15
15:41:31: Erase Timeout       1
15:41:31: Erase offset        1
15:41:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
15:41:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
15:41:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DA7210>, <0x200/0x200, Spc, pat:0x0>) , Command count = 634 ] 
15:41:31: Protected Area Size 0x28000
15:41:31: Bus Width           2
15:41:31: Secure Mode         0
15:41:31: Speed  Class        4
15:41:31: Perf Move           0
15:41:31: Au Size             9
15:41:31: Erase Size          15
15:41:31: Erase Timeout       1
15:41:31: Erase offset        1
15:41:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
15:41:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4D750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 635 ] 
15:41:31: Protected Area Size 0x28000
15:41:31: Bus Width           2
15:41:31: Secure Mode         0
15:41:31: Speed  Class        4
15:41:31: Perf Move           0
15:41:31: Au Size             9
15:41:31: Erase Size          15
15:41:31: Erase Timeout       1
15:41:31: Erase offset        1
15:41:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
15:41:31: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
15:41:31: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 29 

15:41:31: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

15:41:33: [ HostReset(False) , Command count = 636 ] 
15:41:33: [ SetSpecialModes(0x5, True) , Command count = 637 ] 
15:41:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3480>, <py_sfcl.CommandDataDefinition object at 0x05DA72D0>) , Command count = 638 ] 
15:41:33: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
15:41:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA72A0>, <py_sfcl.CommandDataDefinition object at 0x05E4D210>) , Command count = 639 ] 
15:41:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:41:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7360>, <py_sfcl.CommandDataDefinition object at 0x05E4D810>) , Command count = 640 ] 
15:41:33: [ GetCardStatus() , Command count = 641 ] 
15:41:33: ACmd51[ SEND_SCR ] Failed with an exception
15:41:33: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:41:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C82360>, <py_sfcl.CommandDataDefinition object at 0x05C82390>) , Command count = 642 ] 
15:41:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:41:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7390>, <py_sfcl.CommandDataDefinition object at 0x05E4DAE0>) , Command count = 643 ] 
15:41:33: [ GetCardStatus() , Command count = 644 ] 
15:41:33: ACMD13[ SD_STATUS ] Failed with an exception
15:41:33: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

15:41:33: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

15:41:35: [ HostReset(False) , Command count = 645 ] 
15:41:35: [ SetSpecialModes(0x5, True) , Command count = 646 ] 
15:41:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4DB70>, <py_sfcl.CommandDataDefinition object at 0x05E4DDE0>) , Command count = 647 ] 
15:41:35: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
15:41:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA74B0>, <py_sfcl.CommandDataDefinition object at 0x05DA74E0>) , Command count = 648 ] 
15:41:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:41:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA30C0>, <py_sfcl.CommandDataDefinition object at 0x05E4D690>) , Command count = 649 ] 
15:41:35: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
15:41:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7480>, <py_sfcl.CommandDataDefinition object at 0x05DEE930>) , Command count = 650 ] 
15:41:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:41:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D40CF0>, <py_sfcl.CommandDataDefinition object at 0x05DEE8A0>) , Command count = 651 ] 
15:41:36: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
15:41:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA75A0>, <py_sfcl.CommandDataDefinition object at 0x05DA7540>) , Command count = 652 ] 
15:41:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:41:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D40E70>, <py_sfcl.CommandDataDefinition object at 0x05DA75D0>) , Command count = 653 ] 
15:41:36: [ GetCardStatus() , Command count = 654 ] 
15:41:36: ACmd51[ SEND_SCR ] Failed with an exception
15:41:36: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:41:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7390>, <py_sfcl.CommandDataDefinition object at 0x05DA7600>) , Command count = 655 ] 
15:41:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:41:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7660>, <py_sfcl.CommandDataDefinition object at 0x05E4D660>) , Command count = 656 ] 
15:41:36: [ GetCardStatus() , Command count = 657 ] 
15:41:36: ACMD13[ SD_STATUS ] Failed with an exception
15:41:36: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

15:41:36: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

15:41:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:41:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 658 ] 
15:41:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:41:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:41:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:41:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:41:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:41:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 659 ] 
15:41:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:41:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7750>, <py_sfcl.CommandDataDefinition object at 0x05E4D7E0>) , Command count = 660 ] 
15:41:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:41:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:38: [GetSCRRegisterEntry] Failed
15:41:38: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

15:41:38: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
15:41:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DA7720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 661 ] 
15:41:38: [ GetCardStatus() , Command count = 662 ] 
15:41:38: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
15:41:38: [DVTCommonLib]### Exception_Details :Time out error on card response
15:41:38: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

15:41:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7660>, <py_sfcl.CommandDataDefinition object at 0x05DA7180>) , Command count = 663 ] 
15:41:38: [ GetCardStatus() , Command count = 664 ] 
15:41:38: CMD55[ APP_CMD ] Failed with an exception
15:41:38: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:41:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7810>, <py_sfcl.CommandDataDefinition object at 0x05DA77E0>) , Command count = 665 ] 
15:41:38: [ GetCardStatus() , Command count = 666 ] 
15:41:38: ACmd51[ SEND_SCR ] Failed with an exception
15:41:38: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:41:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7180>, <py_sfcl.CommandDataDefinition object at 0x05DA7660>) , Command count = 667 ] 
15:41:38: [ GetCardStatus() , Command count = 668 ] 
15:41:38: CMD55[ APP_CMD ] Failed with an exception
15:41:38: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:41:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA77E0>, <py_sfcl.CommandDataDefinition object at 0x05DA7810>) , Command count = 669 ] 
15:41:39: [ GetCardStatus() , Command count = 670 ] 
15:41:39: ACMD13[ SD_STATUS ] Failed with an exception
15:41:39: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

15:41:39: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

15:41:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:41:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 671 ] 
15:41:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:41:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:41:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:41:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:41:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:41:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 672 ] 
15:41:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:41:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:41:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7990>, <py_sfcl.CommandDataDefinition object at 0x05DA7180>) , Command count = 673 ] 
15:41:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:41:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA79C0>, <py_sfcl.CommandDataDefinition object at 0x05DA79F0>) , Command count = 674 ] 
15:41:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:41:41: [ SetCardRCA(0x1, 0xD555) , Command count = 675 ] 
15:41:41: [DVTCommonLib]### Identification :Idenfication of card completed 

15:41:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA76F0>, <py_sfcl.CommandDataDefinition object at 0x05E4D840>) , Command count = 676 ] 
15:41:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:41:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:41: [GetSCRRegisterEntry] Passed
15:41:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:41: Data_Status_After Erases          : 0
15:41:41: CPRM Security Support             : No Security
15:41:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:41: Spec. Version                     : Version 3.0X
15:41:41: Extended Security Support         : Extended_Security_Not_Supported
15:41:41: Command Support                   : COMMAND_SUPPORT
15:41:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4DF60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 677 ] 
15:41:41: Protected Area Size 0x28000
15:41:41: Bus Width           0
15:41:41: Secure Mode         0
15:41:41: Speed  Class        4
15:41:41: Perf Move           0
15:41:41: Au Size             9
15:41:41: Erase Size          15
15:41:41: Erase Timeout       1
15:41:41: Erase offset        1
15:41:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:41: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

15:41:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:41:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 678 ] 
15:41:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:41:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:41:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:41:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:41:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:41:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 679 ] 
15:41:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:41:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:41:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7B10>, <py_sfcl.CommandDataDefinition object at 0x05DA7A20>) , Command count = 680 ] 
15:41:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:41:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4DC30>, <py_sfcl.CommandDataDefinition object at 0x05DE9030>) , Command count = 681 ] 
15:41:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:41:43: [ SetCardRCA(0x1, 0xD555) , Command count = 682 ] 
15:41:43: [DVTCommonLib]### Identification :Idenfication of card completed 

15:41:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7870>, <py_sfcl.CommandDataDefinition object at 0x05DA7AB0>) , Command count = 683 ] 
15:41:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:41:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05206510>, <py_sfcl.CommandDataDefinition object at 0x05DEE9C0>) , Command count = 684 ] 
15:41:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:44: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
15:41:44: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
15:41:44: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
15:41:44: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

15:41:44: Perform Power Off and On.
15:41:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:41:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 685 ] 
15:41:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:41:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
15:41:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:41:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:41:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:41:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:41:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7C00>, <py_sfcl.CommandDataDefinition object at 0x05DA7BD0>) , Command count = 686 ] 
15:41:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:41:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7C60>, <py_sfcl.CommandDataDefinition object at 0x05DE9090>) , Command count = 687 ] 
15:41:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
15:41:46: [ SetCardRCA(0x1, 0xD555) , Command count = 688 ] 
15:41:46: [DVTCommonLib]### Identification :Idenfication of card completed 

15:41:46: [GO4_globalInitCard]### Switch to Specify Card Type
15:41:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:41:48: Host Frequency set to 25000 KHz
15:41:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:41:48: [GO18_globalSetVolt]### Set Host Voltage value.
15:41:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
15:41:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DA7C90>, 0x0, True) , Command count = 689 ] 
15:41:48: [GO18_globalSetVolt]### Host voltage value is set.
15:41:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
15:41:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE91B0>, 0x0, False) , Command count = 690 ] 
15:41:48: [GO18_globalSetVolt]### Host voltage value is set.
15:41:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 691 ] 
15:41:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:41:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 692 ] 
15:41:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:41:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:41:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:41:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:41:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:41:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 693 ] 
15:41:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:41:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:41:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7120>, <py_sfcl.CommandDataDefinition object at 0x05DE9420>) , Command count = 694 ] 
15:41:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:41:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7DB0>, <py_sfcl.CommandDataDefinition object at 0x05DE9270>) , Command count = 695 ] 
15:41:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:41:48: [ SetCardRCA(0x1, 0xD555) , Command count = 696 ] 
15:41:48: [DVTCommonLib]### Identification :Idenfication of card completed 

15:41:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:41:48: Host Frequency set to 25000 KHz
15:41:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:41:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:41:48: ####CSD Registe 2.0 Values####
15:41:48: CSD_STRUCTURE                                 :0x1
15:41:48: Reserv1                                       :0x0
15:41:48: Time Access 1 TAAC                            :0xe
15:41:48: Time Access 2 NSAC*100                        :0x0
15:41:48: Data Transfer Rate TRAN_SPEED                 :0x32
15:41:48: Card Command Classess CCC                     :0x5b5
15:41:48: Max Read Data Block Length  READ_BL_LEN       :0x9
15:41:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:41:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:41:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:41:48: DSR(driver stage register)  DSR_IMP           :0x0
15:41:48: Reserv2                                       :0x0
15:41:48: Device Size C_SIZE                            :0xedc8
15:41:48: Reserv3                                       :0x0
15:41:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:41:48: Erase Sector Size SECTOR_SIZE                 :0x7f
15:41:48: Write Protect Group Size WP_GRP_SIZE          :0x0
15:41:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:41:48: Reserv4                                       :0x0
15:41:48: Write Speed Factor R2W_FACTOR                 :0x2
15:41:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:41:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:41:48: FILE_FORMAT_GRP                               :0x0
15:41:48: COPY flag                                     :0x1
15:41:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:41:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:41:48: File_Format                                   :0x0
15:41:48: CRC                                           :0x0
15:41:48: ####CSD Registe Values####  

15:41:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:48: [GetSCRRegisterEntry] Passed
15:41:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:48: Data_Status_After Erases          : 0
15:41:48: CPRM Security Support             : No Security
15:41:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:48: Spec. Version                     : Version 3.0X
15:41:48: Extended Security Support         : Extended_Security_Not_Supported
15:41:48: Command Support                   : COMMAND_SUPPORT
15:41:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE91E0>, <py_sfcl.CommandDataDefinition object at 0x05DE9150>) , Command count = 697 ] 
15:41:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:41:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D40F60>, <py_sfcl.CommandDataDefinition object at 0x05DEEB10>) , Command count = 698 ] 
15:41:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:41:48: [ SetBusWidth(0x4) , Command count = 699 ] 
15:41:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DA7E70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 700 ] 
15:41:48: Protected Area Size 0x28000
15:41:48: Bus Width           2
15:41:48: Secure Mode         0
15:41:48: Speed  Class        4
15:41:48: Perf Move           0
15:41:48: Au Size             9
15:41:48: Erase Size          15
15:41:48: Erase Timeout       1
15:41:48: Erase offset        1
15:41:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
15:41:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:41:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 701 ] 
15:41:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
15:41:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:41:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
15:41:49: Host Frequency set to 100000 KHz
15:41:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
15:41:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:41:49: ####CSD Registe 2.0 Values####
15:41:49: CSD_STRUCTURE                                 :0x1
15:41:49: Reserv1                                       :0x0
15:41:49: Time Access 1 TAAC                            :0xe
15:41:49: Time Access 2 NSAC*100                        :0x0
15:41:49: Data Transfer Rate TRAN_SPEED                 :0xb
15:41:49: Card Command Classess CCC                     :0x5b5
15:41:49: Max Read Data Block Length  READ_BL_LEN       :0x9
15:41:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:41:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:41:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:41:49: DSR(driver stage register)  DSR_IMP           :0x0
15:41:49: Reserv2                                       :0x0
15:41:49: Device Size C_SIZE                            :0xedc8
15:41:49: Reserv3                                       :0x0
15:41:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:41:49: Erase Sector Size SECTOR_SIZE                 :0x7f
15:41:49: Write Protect Group Size WP_GRP_SIZE          :0x0
15:41:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:41:49: Reserv4                                       :0x0
15:41:49: Write Speed Factor R2W_FACTOR                 :0x2
15:41:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:41:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:41:49: FILE_FORMAT_GRP                               :0x0
15:41:49: COPY flag                                     :0x1
15:41:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:41:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:41:49: File_Format                                   :0x0
15:41:49: CRC                                           :0x0
15:41:49: ####CSD Registe Values####  

15:41:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7ED0>, <py_sfcl.CommandDataDefinition object at 0x05DA7F00>) , Command count = 702 ] 
15:41:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:41:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7F30>, <py_sfcl.CommandDataDefinition object at 0x05DE9540>) , Command count = 703 ] 
15:41:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:41:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


15:41:49: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
15:41:49: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

15:41:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:49: [GetSCRRegisterEntry] Passed
15:41:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:49: Data_Status_After Erases          : 0
15:41:49: CPRM Security Support             : No Security
15:41:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:49: Spec. Version                     : Version 3.0X
15:41:49: Extended Security Support         : Extended_Security_Not_Supported
15:41:49: Command Support                   : COMMAND_SUPPORT
15:41:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:49: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

15:41:49: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

15:41:49: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

15:41:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:49: [GetSCRRegisterEntry] Passed
15:41:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:49: Data_Status_After Erases          : 0
15:41:49: CPRM Security Support             : No Security
15:41:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:49: Spec. Version                     : Version 3.0X
15:41:49: Extended Security Support         : Extended_Security_Not_Supported
15:41:49: Command Support                   : COMMAND_SUPPORT
15:41:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:49: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

15:41:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:41:49: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 704 ] 
15:41:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

15:41:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:41:49: [GO4_globalInitCard]### Switch to Specify Card Type
15:41:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:41:51: Host Frequency set to 25000 KHz
15:41:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:41:51: [GO18_globalSetVolt]### Set Host Voltage value.
15:41:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
15:41:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DA7B70>, 0x0, True) , Command count = 705 ] 
15:41:51: [GO18_globalSetVolt]### Host voltage value is set.
15:41:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
15:41:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9450>, 0x0, False) , Command count = 706 ] 
15:41:51: [GO18_globalSetVolt]### Host voltage value is set.
15:41:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 707 ] 
15:41:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:41:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 708 ] 
15:41:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:41:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:41:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:41:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:41:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:41:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 709 ] 
15:41:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:41:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7DE0>, <py_sfcl.CommandDataDefinition object at 0x05DE9720>) , Command count = 710 ] 
15:41:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB50F0>, <py_sfcl.CommandDataDefinition object at 0x05DE9630>) , Command count = 711 ] 
15:41:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:41:51: [ SetCardRCA(0x1, 0xD555) , Command count = 712 ] 
15:41:51: [DVTCommonLib]### Identification :Idenfication of card completed 

15:41:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:41:51: Host Frequency set to 25000 KHz
15:41:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:41:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:41:51: ####CSD Registe 2.0 Values####
15:41:51: CSD_STRUCTURE                                 :0x1
15:41:51: Reserv1                                       :0x0
15:41:51: Time Access 1 TAAC                            :0xe
15:41:51: Time Access 2 NSAC*100                        :0x0
15:41:51: Data Transfer Rate TRAN_SPEED                 :0x32
15:41:51: Card Command Classess CCC                     :0x5b5
15:41:51: Max Read Data Block Length  READ_BL_LEN       :0x9
15:41:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:41:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:41:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:41:51: DSR(driver stage register)  DSR_IMP           :0x0
15:41:51: Reserv2                                       :0x0
15:41:51: Device Size C_SIZE                            :0xedc8
15:41:51: Reserv3                                       :0x0
15:41:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:41:51: Erase Sector Size SECTOR_SIZE                 :0x7f
15:41:51: Write Protect Group Size WP_GRP_SIZE          :0x0
15:41:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:41:51: Reserv4                                       :0x0
15:41:51: Write Speed Factor R2W_FACTOR                 :0x2
15:41:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:41:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:41:51: FILE_FORMAT_GRP                               :0x0
15:41:51: COPY flag                                     :0x1
15:41:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:41:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:41:51: File_Format                                   :0x0
15:41:51: CRC                                           :0x0
15:41:51: ####CSD Registe Values####  

15:41:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:51: [GetSCRRegisterEntry] Passed
15:41:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:51: Data_Status_After Erases          : 0
15:41:51: CPRM Security Support             : No Security
15:41:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:51: Spec. Version                     : Version 3.0X
15:41:51: Extended Security Support         : Extended_Security_Not_Supported
15:41:51: Command Support                   : COMMAND_SUPPORT
15:41:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9660>, <py_sfcl.CommandDataDefinition object at 0x05DE9390>) , Command count = 713 ] 
15:41:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB51B0>, <py_sfcl.CommandDataDefinition object at 0x05DE9060>) , Command count = 714 ] 
15:41:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:41:51: [ SetBusWidth(0x4) , Command count = 715 ] 
15:41:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE9510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 716 ] 
15:41:51: Protected Area Size 0x28000
15:41:51: Bus Width           2
15:41:51: Secure Mode         0
15:41:51: Speed  Class        4
15:41:51: Perf Move           0
15:41:51: Au Size             9
15:41:51: Erase Size          15
15:41:51: Erase Timeout       1
15:41:51: Erase offset        1
15:41:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
15:41:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:41:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 717 ] 
15:41:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
15:41:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:41:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
15:41:51: Host Frequency set to 100000 KHz
15:41:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
15:41:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:41:51: ####CSD Registe 2.0 Values####
15:41:51: CSD_STRUCTURE                                 :0x1
15:41:51: Reserv1                                       :0x0
15:41:51: Time Access 1 TAAC                            :0xe
15:41:51: Time Access 2 NSAC*100                        :0x0
15:41:51: Data Transfer Rate TRAN_SPEED                 :0xb
15:41:51: Card Command Classess CCC                     :0x5b5
15:41:51: Max Read Data Block Length  READ_BL_LEN       :0x9
15:41:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:41:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:41:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:41:51: DSR(driver stage register)  DSR_IMP           :0x0
15:41:51: Reserv2                                       :0x0
15:41:51: Device Size C_SIZE                            :0xedc8
15:41:51: Reserv3                                       :0x0
15:41:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:41:51: Erase Sector Size SECTOR_SIZE                 :0x7f
15:41:51: Write Protect Group Size WP_GRP_SIZE          :0x0
15:41:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:41:51: Reserv4                                       :0x0
15:41:51: Write Speed Factor R2W_FACTOR                 :0x2
15:41:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:41:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:41:51: FILE_FORMAT_GRP                               :0x0
15:41:51: COPY flag                                     :0x1
15:41:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:41:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:41:51: File_Format                                   :0x0
15:41:51: CRC                                           :0x0
15:41:51: ####CSD Registe Values####  

15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5210>, <py_sfcl.CommandDataDefinition object at 0x05DB5240>) , Command count = 718 ] 
15:41:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5270>, <py_sfcl.CommandDataDefinition object at 0x05DE9840>) , Command count = 719 ] 
15:41:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:41:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB52D0>, <py_sfcl.CommandDataDefinition object at 0x05DE9570>) , Command count = 720 ] 
15:41:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9750>, <py_sfcl.CommandDataDefinition object at 0x05DE95D0>) , Command count = 721 ] 
15:41:51: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE93F0>, <py_sfcl.CommandDataDefinition object at 0x05DEEB40>) , Command count = 722 ] 
15:41:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7FC0>, <py_sfcl.CommandDataDefinition object at 0x05DB52A0>) , Command count = 723 ] 
15:41:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9960>, <py_sfcl.CommandDataDefinition object at 0x05DE97E0>) , Command count = 724 ] 
15:41:51: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5390>, <py_sfcl.CommandDataDefinition object at 0x05DE97B0>) , Command count = 725 ] 
15:41:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5360>, <py_sfcl.CommandDataDefinition object at 0x05DB53C0>) , Command count = 726 ] 
15:41:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:51: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE98A0>, <py_sfcl.CommandDataDefinition object at 0x05DE98D0>) , Command count = 727 ] 
15:41:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9930>, <py_sfcl.CommandDataDefinition object at 0x05DE99C0>) , Command count = 728 ] 
15:41:51: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB53F0>, <py_sfcl.CommandDataDefinition object at 0x05DB5450>) , Command count = 729 ] 
15:41:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5420>, <py_sfcl.CommandDataDefinition object at 0x05DE99F0>) , Command count = 730 ] 
15:41:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9A80>, <py_sfcl.CommandDataDefinition object at 0x05DE9AE0>) , Command count = 731 ] 
15:41:51: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5480>, <py_sfcl.CommandDataDefinition object at 0x05DB54E0>) , Command count = 732 ] 
15:41:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB54B0>, <py_sfcl.CommandDataDefinition object at 0x05DB5510>) , Command count = 733 ] 
15:41:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:41:51: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

15:41:51: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

15:41:51: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
15:41:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:51: [GetSCRRegisterEntry] Passed
15:41:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:51: Data_Status_After Erases          : 0
15:41:51: CPRM Security Support             : No Security
15:41:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:51: Spec. Version                     : Version 3.0X
15:41:51: Extended Security Support         : Extended_Security_Not_Supported
15:41:51: Command Support                   : COMMAND_SUPPORT
15:41:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:51: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

15:41:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:51: [GetSCRRegisterEntry] Passed
15:41:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:51: Data_Status_After Erases          : 0
15:41:51: CPRM Security Support             : No Security
15:41:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:51: Spec. Version                     : Version 3.0X
15:41:51: Extended Security Support         : Extended_Security_Not_Supported
15:41:51: Command Support                   : COMMAND_SUPPORT
15:41:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:51: [GetSCRRegisterEntry] Passed
15:41:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:51: Data_Status_After Erases          : 0
15:41:51: CPRM Security Support             : No Security
15:41:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:51: Spec. Version                     : Version 3.0X
15:41:51: Extended Security Support         : Extended_Security_Not_Supported
15:41:51: Command Support                   : COMMAND_SUPPORT
15:41:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:51: [GetSCRRegisterEntry] Passed
15:41:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:51: Data_Status_After Erases          : 0
15:41:51: CPRM Security Support             : No Security
15:41:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:51: Spec. Version                     : Version 3.0X
15:41:51: Extended Security Support         : Extended_Security_Not_Supported
15:41:51: Command Support                   : COMMAND_SUPPORT
15:41:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:52: [GetSCRRegisterEntry] Passed
15:41:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:52: Data_Status_After Erases          : 0
15:41:52: CPRM Security Support             : No Security
15:41:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:52: Spec. Version                     : Version 3.0X
15:41:52: Extended Security Support         : Extended_Security_Not_Supported
15:41:52: Command Support                   : COMMAND_SUPPORT
15:41:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:52: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

15:41:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
15:41:52: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

15:41:52: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

15:41:52: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

15:41:52: Perform Power Off and On.
15:41:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:41:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 734 ] 
15:41:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:41:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
15:41:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:41:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:41:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:41:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:41:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4D390>, <py_sfcl.CommandDataDefinition object at 0x05E4D9C0>) , Command count = 735 ] 
15:41:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:41:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5540>, <py_sfcl.CommandDataDefinition object at 0x05DB55A0>) , Command count = 736 ] 
15:41:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
15:41:54: [ SetCardRCA(0x1, 0xD555) , Command count = 737 ] 
15:41:54: [DVTCommonLib]### Identification :Idenfication of card completed 

15:41:54: [GO4_globalInitCard]### Switch to Specify Card Type
15:41:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:41:56: Host Frequency set to 25000 KHz
15:41:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:41:56: [GO18_globalSetVolt]### Set Host Voltage value.
15:41:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
15:41:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DB5600>, 0x0, True) , Command count = 738 ] 
15:41:56: [GO18_globalSetVolt]### Host voltage value is set.
15:41:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
15:41:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DB5180>, 0x0, False) , Command count = 739 ] 
15:41:56: [GO18_globalSetVolt]### Host voltage value is set.
15:41:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 740 ] 
15:41:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:41:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 741 ] 
15:41:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:41:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:41:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:41:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:41:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:41:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 742 ] 
15:41:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:41:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:41:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5120>, <py_sfcl.CommandDataDefinition object at 0x05DB5630>) , Command count = 743 ] 
15:41:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:41:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5720>, <py_sfcl.CommandDataDefinition object at 0x05DE9E70>) , Command count = 744 ] 
15:41:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:41:56: [ SetCardRCA(0x1, 0xD555) , Command count = 745 ] 
15:41:56: [DVTCommonLib]### Identification :Idenfication of card completed 

15:41:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:41:56: Host Frequency set to 25000 KHz
15:41:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:41:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:41:56: ####CSD Registe 2.0 Values####
15:41:56: CSD_STRUCTURE                                 :0x1
15:41:56: Reserv1                                       :0x0
15:41:56: Time Access 1 TAAC                            :0xe
15:41:56: Time Access 2 NSAC*100                        :0x0
15:41:56: Data Transfer Rate TRAN_SPEED                 :0x32
15:41:56: Card Command Classess CCC                     :0x5b5
15:41:56: Max Read Data Block Length  READ_BL_LEN       :0x9
15:41:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:41:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:41:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:41:56: DSR(driver stage register)  DSR_IMP           :0x0
15:41:56: Reserv2                                       :0x0
15:41:56: Device Size C_SIZE                            :0xedc8
15:41:56: Reserv3                                       :0x0
15:41:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:41:56: Erase Sector Size SECTOR_SIZE                 :0x7f
15:41:56: Write Protect Group Size WP_GRP_SIZE          :0x0
15:41:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:41:56: Reserv4                                       :0x0
15:41:56: Write Speed Factor R2W_FACTOR                 :0x2
15:41:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:41:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:41:56: FILE_FORMAT_GRP                               :0x0
15:41:56: COPY flag                                     :0x1
15:41:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:41:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:41:56: File_Format                                   :0x0
15:41:56: CRC                                           :0x0
15:41:56: ####CSD Registe Values####  

15:41:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:41:56: [GetSCRRegisterEntry] Passed
15:41:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:41:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:41:56: Data_Status_After Erases          : 0
15:41:56: CPRM Security Support             : No Security
15:41:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:41:56: Spec. Version                     : Version 3.0X
15:41:56: Extended Security Support         : Extended_Security_Not_Supported
15:41:56: Command Support                   : COMMAND_SUPPORT
15:41:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:41:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9DB0>, <py_sfcl.CommandDataDefinition object at 0x05DE9D80>) , Command count = 746 ] 
15:41:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:41:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB57E0>, <py_sfcl.CommandDataDefinition object at 0x05DE9D50>) , Command count = 747 ] 
15:41:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:41:56: [ SetBusWidth(0x4) , Command count = 748 ] 
15:41:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE9F00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 749 ] 
15:41:56: Protected Area Size 0x28000
15:41:56: Bus Width           2
15:41:56: Secure Mode         0
15:41:56: Speed  Class        4
15:41:56: Perf Move           0
15:41:56: Au Size             9
15:41:56: Erase Size          15
15:41:56: Erase Timeout       1
15:41:56: Erase offset        1
15:41:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
15:41:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:41:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 750 ] 
15:41:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
15:41:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:41:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
15:41:57: Host Frequency set to 100000 KHz
15:41:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
15:41:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:41:57: ####CSD Registe 2.0 Values####
15:41:57: CSD_STRUCTURE                                 :0x1
15:41:57: Reserv1                                       :0x0
15:41:57: Time Access 1 TAAC                            :0xe
15:41:57: Time Access 2 NSAC*100                        :0x0
15:41:57: Data Transfer Rate TRAN_SPEED                 :0xb
15:41:57: Card Command Classess CCC                     :0x5b5
15:41:57: Max Read Data Block Length  READ_BL_LEN       :0x9
15:41:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:41:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:41:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:41:57: DSR(driver stage register)  DSR_IMP           :0x0
15:41:57: Reserv2                                       :0x0
15:41:57: Device Size C_SIZE                            :0xedc8
15:41:57: Reserv3                                       :0x0
15:41:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:41:57: Erase Sector Size SECTOR_SIZE                 :0x7f
15:41:57: Write Protect Group Size WP_GRP_SIZE          :0x0
15:41:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:41:57: Reserv4                                       :0x0
15:41:57: Write Speed Factor R2W_FACTOR                 :0x2
15:41:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:41:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:41:57: FILE_FORMAT_GRP                               :0x0
15:41:57: COPY flag                                     :0x1
15:41:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:41:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:41:57: File_Format                                   :0x0
15:41:57: CRC                                           :0x0
15:41:57: ####CSD Registe Values####  

15:41:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5840>, <py_sfcl.CommandDataDefinition object at 0x05DE9EA0>) , Command count = 751 ] 
15:41:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:41:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB58A0>, <py_sfcl.CommandDataDefinition object at 0x05DEB060>) , Command count = 752 ] 
15:41:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:41:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


15:41:57: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
15:41:57: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

15:41:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
15:41:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE9DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 753 ] 
15:41:57: Protected Area Size 0x28000
15:41:57: Bus Width           2
15:41:57: Secure Mode         0
15:41:57: Speed  Class        4
15:41:57: Perf Move           0
15:41:57: Au Size             9
15:41:57: Erase Size          15
15:41:57: Erase Timeout       1
15:41:57: Erase offset        1
15:41:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

15:41:57: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
15:41:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DEB0C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 754 ] 
15:41:57: Protected Area Size 0x28000
15:41:57: Bus Width           2
15:41:57: Secure Mode         0
15:41:57: Speed  Class        4
15:41:57: Perf Move           0
15:41:57: Au Size             9
15:41:57: Erase Size          15
15:41:57: Erase Timeout       1
15:41:57: Erase offset        1
15:41:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
15:41:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE9DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 755 ] 
15:41:57: Protected Area Size 0x28000
15:41:57: Bus Width           2
15:41:57: Secure Mode         0
15:41:57: Speed  Class        4
15:41:57: Perf Move           0
15:41:57: Au Size             9
15:41:57: Erase Size          15
15:41:57: Erase Timeout       1
15:41:57: Erase offset        1
15:41:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
15:41:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
15:41:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

15:41:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

15:41:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DEB0C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 756 ] 
15:41:57: Protected Area Size 0x28000
15:41:57: Bus Width           2
15:41:57: Secure Mode         0
15:41:57: Speed  Class        4
15:41:57: Perf Move           0
15:41:57: Au Size             9
15:41:57: Erase Size          15
15:41:57: Erase Timeout       1
15:41:57: Erase offset        1
15:41:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
15:41:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
15:41:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DEB2A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 757 ] 
15:41:57: Protected Area Size 0x28000
15:41:57: Bus Width           2
15:41:57: Secure Mode         0
15:41:57: Speed  Class        4
15:41:57: Perf Move           0
15:41:57: Au Size             9
15:41:57: Erase Size          15
15:41:57: Erase Timeout       1
15:41:57: Erase offset        1
15:41:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
15:41:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:41:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DEB0C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 758 ] 
15:41:57: Protected Area Size 0x28000
15:41:57: Bus Width           2
15:41:57: Secure Mode         0
15:41:57: Speed  Class        4
15:41:57: Perf Move           0
15:41:57: Au Size             9
15:41:57: Erase Size          15
15:41:57: Erase Timeout       1
15:41:57: Erase offset        1
15:41:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:41:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
15:41:57: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
15:41:57: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 28 

15:41:57: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

15:41:59: [ HostReset(False) , Command count = 759 ] 
15:41:59: [ SetSpecialModes(0x5, True) , Command count = 760 ] 
15:41:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x051D7330>, <py_sfcl.CommandDataDefinition object at 0x05DEB210>) , Command count = 761 ] 
15:41:59: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
15:41:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x051FFA50>, <py_sfcl.CommandDataDefinition object at 0x05DEB270>) , Command count = 762 ] 
15:41:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:41:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x051F7720>, <py_sfcl.CommandDataDefinition object at 0x05DEB2D0>) , Command count = 763 ] 
15:41:59: [ GetCardStatus() , Command count = 764 ] 
15:41:59: ACmd51[ SEND_SCR ] Failed with an exception
15:41:59: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:41:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7810>, <py_sfcl.CommandDataDefinition object at 0x05DA77E0>) , Command count = 765 ] 
15:41:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:41:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x051E0AE0>, <py_sfcl.CommandDataDefinition object at 0x05DEB120>) , Command count = 766 ] 
15:41:59: [ GetCardStatus() , Command count = 767 ] 
15:41:59: ACMD13[ SD_STATUS ] Failed with an exception
15:41:59: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

15:41:59: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

15:42:01: [ HostReset(False) , Command count = 768 ] 
15:42:01: [ SetSpecialModes(0x5, True) , Command count = 769 ] 
15:42:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB59F0>, <py_sfcl.CommandDataDefinition object at 0x05206FC0>) , Command count = 770 ] 
15:42:01: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
15:42:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7900>, <py_sfcl.CommandDataDefinition object at 0x05DA7930>) , Command count = 771 ] 
15:42:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:42:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0520FE40>, <py_sfcl.CommandDataDefinition object at 0x05DEB2D0>) , Command count = 772 ] 
15:42:01: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
15:42:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052065D0>, <py_sfcl.CommandDataDefinition object at 0x05DEB3C0>) , Command count = 773 ] 
15:42:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:42:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05215300>, <py_sfcl.CommandDataDefinition object at 0x05DE9F30>) , Command count = 774 ] 
15:42:01: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
15:42:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0520F330>, <py_sfcl.CommandDataDefinition object at 0x05DEB390>) , Command count = 775 ] 
15:42:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:42:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05215D20>, <py_sfcl.CommandDataDefinition object at 0x05D38180>) , Command count = 776 ] 
15:42:01: [ GetCardStatus() , Command count = 777 ] 
15:42:01: ACmd51[ SEND_SCR ] Failed with an exception
15:42:01: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:42:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x051E0AE0>, <py_sfcl.CommandDataDefinition object at 0x05215DB0>) , Command count = 778 ] 
15:42:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:42:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0520F1E0>, <py_sfcl.CommandDataDefinition object at 0x05DEB5A0>) , Command count = 779 ] 
15:42:02: [ GetCardStatus() , Command count = 780 ] 
15:42:02: ACMD13[ SD_STATUS ] Failed with an exception
15:42:02: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

15:42:02: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

15:42:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:42:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 781 ] 
15:42:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:42:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:42:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:42:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:42:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:42:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 782 ] 
15:42:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:42:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C82060>, <py_sfcl.CommandDataDefinition object at 0x05215150>) , Command count = 783 ] 
15:42:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:42:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:04: [GetSCRRegisterEntry] Failed
15:42:04: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

15:42:04: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
15:42:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05C82030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 784 ] 
15:42:04: [ GetCardStatus() , Command count = 785 ] 
15:42:04: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
15:42:04: [DVTCommonLib]### Exception_Details :Time out error on card response
15:42:04: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

15:42:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0520F1E0>, <py_sfcl.CommandDataDefinition object at 0x05C82210>) , Command count = 786 ] 
15:42:04: [ GetCardStatus() , Command count = 787 ] 
15:42:04: CMD55[ APP_CMD ] Failed with an exception
15:42:04: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:42:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C822A0>, <py_sfcl.CommandDataDefinition object at 0x05C822D0>) , Command count = 788 ] 
15:42:04: [ GetCardStatus() , Command count = 789 ] 
15:42:04: ACmd51[ SEND_SCR ] Failed with an exception
15:42:04: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:42:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C82210>, <py_sfcl.CommandDataDefinition object at 0x0520F1E0>) , Command count = 790 ] 
15:42:04: [ GetCardStatus() , Command count = 791 ] 
15:42:04: CMD55[ APP_CMD ] Failed with an exception
15:42:04: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:42:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D40F00>, <py_sfcl.CommandDataDefinition object at 0x05C822D0>) , Command count = 792 ] 
15:42:04: [ GetCardStatus() , Command count = 793 ] 
15:42:04: ACMD13[ SD_STATUS ] Failed with an exception
15:42:04: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

15:42:04: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

15:42:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:42:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 794 ] 
15:42:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:42:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:42:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:42:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:42:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:42:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 795 ] 
15:42:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:42:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:42:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C82630>, <py_sfcl.CommandDataDefinition object at 0x05C82180>) , Command count = 796 ] 
15:42:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:42:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C82B10>, <py_sfcl.CommandDataDefinition object at 0x05DB5A20>) , Command count = 797 ] 
15:42:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:42:07: [ SetCardRCA(0x1, 0xD555) , Command count = 798 ] 
15:42:07: [DVTCommonLib]### Identification :Idenfication of card completed 

15:42:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEB840>, <py_sfcl.CommandDataDefinition object at 0x05DEB8A0>) , Command count = 799 ] 
15:42:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:42:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:07: [GetSCRRegisterEntry] Passed
15:42:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:07: Data_Status_After Erases          : 0
15:42:07: CPRM Security Support             : No Security
15:42:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:07: Spec. Version                     : Version 3.0X
15:42:07: Extended Security Support         : Extended_Security_Not_Supported
15:42:07: Command Support                   : COMMAND_SUPPORT
15:42:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DEB5D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 800 ] 
15:42:07: Protected Area Size 0x28000
15:42:07: Bus Width           0
15:42:07: Secure Mode         0
15:42:07: Speed  Class        4
15:42:07: Perf Move           0
15:42:07: Au Size             9
15:42:07: Erase Size          15
15:42:07: Erase Timeout       1
15:42:07: Erase offset        1
15:42:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:07: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

15:42:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:42:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 801 ] 
15:42:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:42:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:42:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:42:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:42:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:42:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 802 ] 
15:42:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:42:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:42:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D409C0>, <py_sfcl.CommandDataDefinition object at 0x05D38270>) , Command count = 803 ] 
15:42:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:42:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D381E0>, <py_sfcl.CommandDataDefinition object at 0x05DEB9C0>) , Command count = 804 ] 
15:42:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:42:09: [ SetCardRCA(0x1, 0xD555) , Command count = 805 ] 
15:42:09: [DVTCommonLib]### Identification :Idenfication of card completed 

15:42:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D40C00>, <py_sfcl.CommandDataDefinition object at 0x05DEB7E0>) , Command count = 806 ] 
15:42:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:42:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5A80>, <py_sfcl.CommandDataDefinition object at 0x05DEB570>) , Command count = 807 ] 
15:42:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:09: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
15:42:09: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
15:42:09: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
15:42:09: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

15:42:09: Perform Power Off and On.
15:42:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:42:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 808 ] 
15:42:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:42:11: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
15:42:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:42:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:42:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:42:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:42:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5AB0>, <py_sfcl.CommandDataDefinition object at 0x05DEBAE0>) , Command count = 809 ] 
15:42:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:42:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5AE0>, <py_sfcl.CommandDataDefinition object at 0x05DEBA20>) , Command count = 810 ] 
15:42:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
15:42:11: [ SetCardRCA(0x1, 0xD555) , Command count = 811 ] 
15:42:11: [DVTCommonLib]### Identification :Idenfication of card completed 

15:42:11: [GO4_globalInitCard]### Switch to Specify Card Type
15:42:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:42:14: Host Frequency set to 25000 KHz
15:42:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:42:14: [GO18_globalSetVolt]### Set Host Voltage value.
15:42:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
15:42:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D40FC0>, 0x0, True) , Command count = 812 ] 
15:42:14: [GO18_globalSetVolt]### Host voltage value is set.
15:42:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
15:42:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DB5A50>, 0x0, False) , Command count = 813 ] 
15:42:14: [GO18_globalSetVolt]### Host voltage value is set.
15:42:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 814 ] 
15:42:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:42:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 815 ] 
15:42:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:42:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:42:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:42:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:42:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:42:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 816 ] 
15:42:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:42:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:42:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5750>, <py_sfcl.CommandDataDefinition object at 0x05E4DD80>) , Command count = 817 ] 
15:42:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:42:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C829C0>, <py_sfcl.CommandDataDefinition object at 0x05DEBCF0>) , Command count = 818 ] 
15:42:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:42:14: [ SetCardRCA(0x1, 0xD555) , Command count = 819 ] 
15:42:14: [DVTCommonLib]### Identification :Idenfication of card completed 

15:42:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:42:14: Host Frequency set to 25000 KHz
15:42:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:42:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:42:14: ####CSD Registe 2.0 Values####
15:42:14: CSD_STRUCTURE                                 :0x1
15:42:14: Reserv1                                       :0x0
15:42:14: Time Access 1 TAAC                            :0xe
15:42:14: Time Access 2 NSAC*100                        :0x0
15:42:14: Data Transfer Rate TRAN_SPEED                 :0x32
15:42:14: Card Command Classess CCC                     :0x5b5
15:42:14: Max Read Data Block Length  READ_BL_LEN       :0x9
15:42:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:42:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:42:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:42:14: DSR(driver stage register)  DSR_IMP           :0x0
15:42:14: Reserv2                                       :0x0
15:42:14: Device Size C_SIZE                            :0xedc8
15:42:14: Reserv3                                       :0x0
15:42:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:42:14: Erase Sector Size SECTOR_SIZE                 :0x7f
15:42:14: Write Protect Group Size WP_GRP_SIZE          :0x0
15:42:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:42:14: Reserv4                                       :0x0
15:42:14: Write Speed Factor R2W_FACTOR                 :0x2
15:42:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:42:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:42:14: FILE_FORMAT_GRP                               :0x0
15:42:14: COPY flag                                     :0x1
15:42:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:42:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:42:14: File_Format                                   :0x0
15:42:14: CRC                                           :0x0
15:42:14: ####CSD Registe Values####  

15:42:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:14: [GetSCRRegisterEntry] Passed
15:42:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:14: Data_Status_After Erases          : 0
15:42:14: CPRM Security Support             : No Security
15:42:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:14: Spec. Version                     : Version 3.0X
15:42:14: Extended Security Support         : Extended_Security_Not_Supported
15:42:14: Command Support                   : COMMAND_SUPPORT
15:42:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEBEA0>, <py_sfcl.CommandDataDefinition object at 0x05DEBCC0>) , Command count = 820 ] 
15:42:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:42:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D98720>, <py_sfcl.CommandDataDefinition object at 0x05DEBBD0>) , Command count = 821 ] 
15:42:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:42:14: [ SetBusWidth(0x4) , Command count = 822 ] 
15:42:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DEBD80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 823 ] 
15:42:14: Protected Area Size 0x28000
15:42:14: Bus Width           2
15:42:14: Secure Mode         0
15:42:14: Speed  Class        4
15:42:14: Perf Move           0
15:42:14: Au Size             9
15:42:14: Erase Size          15
15:42:14: Erase Timeout       1
15:42:14: Erase offset        1
15:42:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
15:42:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:42:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 824 ] 
15:42:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
15:42:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:42:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
15:42:14: Host Frequency set to 100000 KHz
15:42:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
15:42:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:42:14: ####CSD Registe 2.0 Values####
15:42:14: CSD_STRUCTURE                                 :0x1
15:42:14: Reserv1                                       :0x0
15:42:14: Time Access 1 TAAC                            :0xe
15:42:14: Time Access 2 NSAC*100                        :0x0
15:42:14: Data Transfer Rate TRAN_SPEED                 :0xb
15:42:14: Card Command Classess CCC                     :0x5b5
15:42:14: Max Read Data Block Length  READ_BL_LEN       :0x9
15:42:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:42:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:42:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:42:14: DSR(driver stage register)  DSR_IMP           :0x0
15:42:14: Reserv2                                       :0x0
15:42:14: Device Size C_SIZE                            :0xedc8
15:42:14: Reserv3                                       :0x0
15:42:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:42:14: Erase Sector Size SECTOR_SIZE                 :0x7f
15:42:14: Write Protect Group Size WP_GRP_SIZE          :0x0
15:42:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:42:14: Reserv4                                       :0x0
15:42:14: Write Speed Factor R2W_FACTOR                 :0x2
15:42:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:42:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:42:14: FILE_FORMAT_GRP                               :0x0
15:42:14: COPY flag                                     :0x1
15:42:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:42:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:42:14: File_Format                                   :0x0
15:42:14: CRC                                           :0x0
15:42:14: ####CSD Registe Values####  

15:42:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D98690>, <py_sfcl.CommandDataDefinition object at 0x05DEBD20>) , Command count = 825 ] 
15:42:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:42:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D98F90>, <py_sfcl.CommandDataDefinition object at 0x05DEBE10>) , Command count = 826 ] 
15:42:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:42:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


15:42:14: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
15:42:14: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

15:42:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:14: [GetSCRRegisterEntry] Passed
15:42:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:14: Data_Status_After Erases          : 0
15:42:14: CPRM Security Support             : No Security
15:42:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:14: Spec. Version                     : Version 3.0X
15:42:14: Extended Security Support         : Extended_Security_Not_Supported
15:42:14: Command Support                   : COMMAND_SUPPORT
15:42:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:14: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

15:42:14: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

15:42:14: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

15:42:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:14: [GetSCRRegisterEntry] Passed
15:42:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:14: Data_Status_After Erases          : 0
15:42:14: CPRM Security Support             : No Security
15:42:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:14: Spec. Version                     : Version 3.0X
15:42:14: Extended Security Support         : Extended_Security_Not_Supported
15:42:14: Command Support                   : COMMAND_SUPPORT
15:42:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:14: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

15:42:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:42:14: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 827 ] 
15:42:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

15:42:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:42:14: [GO4_globalInitCard]### Switch to Specify Card Type
15:42:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:42:16: Host Frequency set to 25000 KHz
15:42:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:42:16: [GO18_globalSetVolt]### Set Host Voltage value.
15:42:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
15:42:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x05D382D0>, 0x0, True) , Command count = 828 ] 
15:42:16: [GO18_globalSetVolt]### Host voltage value is set.
15:42:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
15:42:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEB090>, 0x0, False) , Command count = 829 ] 
15:42:16: [GO18_globalSetVolt]### Host voltage value is set.
15:42:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 830 ] 
15:42:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:42:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 831 ] 
15:42:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:42:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:42:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:42:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:42:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:42:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 832 ] 
15:42:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:42:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C829F0>, <py_sfcl.CommandDataDefinition object at 0x05DEBF30>) , Command count = 833 ] 
15:42:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3210>, <py_sfcl.CommandDataDefinition object at 0x05DEBDE0>) , Command count = 834 ] 
15:42:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:42:17: [ SetCardRCA(0x1, 0xD555) , Command count = 835 ] 
15:42:17: [DVTCommonLib]### Identification :Idenfication of card completed 

15:42:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:42:17: Host Frequency set to 25000 KHz
15:42:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:42:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:42:17: ####CSD Registe 2.0 Values####
15:42:17: CSD_STRUCTURE                                 :0x1
15:42:17: Reserv1                                       :0x0
15:42:17: Time Access 1 TAAC                            :0xe
15:42:17: Time Access 2 NSAC*100                        :0x0
15:42:17: Data Transfer Rate TRAN_SPEED                 :0x32
15:42:17: Card Command Classess CCC                     :0x5b5
15:42:17: Max Read Data Block Length  READ_BL_LEN       :0x9
15:42:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:42:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:42:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:42:17: DSR(driver stage register)  DSR_IMP           :0x0
15:42:17: Reserv2                                       :0x0
15:42:17: Device Size C_SIZE                            :0xedc8
15:42:17: Reserv3                                       :0x0
15:42:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:42:17: Erase Sector Size SECTOR_SIZE                 :0x7f
15:42:17: Write Protect Group Size WP_GRP_SIZE          :0x0
15:42:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:42:17: Reserv4                                       :0x0
15:42:17: Write Speed Factor R2W_FACTOR                 :0x2
15:42:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:42:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:42:17: FILE_FORMAT_GRP                               :0x0
15:42:17: COPY flag                                     :0x1
15:42:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:42:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:42:17: File_Format                                   :0x0
15:42:17: CRC                                           :0x0
15:42:17: ####CSD Registe Values####  

15:42:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:17: [GetSCRRegisterEntry] Passed
15:42:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:17: Data_Status_After Erases          : 0
15:42:17: CPRM Security Support             : No Security
15:42:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:17: Spec. Version                     : Version 3.0X
15:42:17: Extended Security Support         : Extended_Security_Not_Supported
15:42:17: Command Support                   : COMMAND_SUPPORT
15:42:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D98F90>, <py_sfcl.CommandDataDefinition object at 0x05D98150>) , Command count = 836 ] 
15:42:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3420>, <py_sfcl.CommandDataDefinition object at 0x05D98E70>) , Command count = 837 ] 
15:42:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:42:17: [ SetBusWidth(0x4) , Command count = 838 ] 
15:42:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DEBF90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 839 ] 
15:42:17: Protected Area Size 0x28000
15:42:17: Bus Width           2
15:42:17: Secure Mode         0
15:42:17: Speed  Class        4
15:42:17: Perf Move           0
15:42:17: Au Size             9
15:42:17: Erase Size          15
15:42:17: Erase Timeout       1
15:42:17: Erase offset        1
15:42:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
15:42:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:42:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 840 ] 
15:42:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
15:42:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:42:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
15:42:17: Host Frequency set to 100000 KHz
15:42:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
15:42:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:42:17: ####CSD Registe 2.0 Values####
15:42:17: CSD_STRUCTURE                                 :0x1
15:42:17: Reserv1                                       :0x0
15:42:17: Time Access 1 TAAC                            :0xe
15:42:17: Time Access 2 NSAC*100                        :0x0
15:42:17: Data Transfer Rate TRAN_SPEED                 :0xb
15:42:17: Card Command Classess CCC                     :0x5b5
15:42:17: Max Read Data Block Length  READ_BL_LEN       :0x9
15:42:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:42:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:42:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:42:17: DSR(driver stage register)  DSR_IMP           :0x0
15:42:17: Reserv2                                       :0x0
15:42:17: Device Size C_SIZE                            :0xedc8
15:42:17: Reserv3                                       :0x0
15:42:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:42:17: Erase Sector Size SECTOR_SIZE                 :0x7f
15:42:17: Write Protect Group Size WP_GRP_SIZE          :0x0
15:42:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:42:17: Reserv4                                       :0x0
15:42:17: Write Speed Factor R2W_FACTOR                 :0x2
15:42:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:42:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:42:17: FILE_FORMAT_GRP                               :0x0
15:42:17: COPY flag                                     :0x1
15:42:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:42:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:42:17: File_Format                                   :0x0
15:42:17: CRC                                           :0x0
15:42:17: ####CSD Registe Values####  

15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3540>, <py_sfcl.CommandDataDefinition object at 0x05DA3390>) , Command count = 841 ] 
15:42:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3750>, <py_sfcl.CommandDataDefinition object at 0x05DEE300>) , Command count = 842 ] 
15:42:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:42:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3720>, <py_sfcl.CommandDataDefinition object at 0x05DEE1E0>) , Command count = 843 ] 
15:42:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEE210>, <py_sfcl.CommandDataDefinition object at 0x05DEE030>) , Command count = 844 ] 
15:42:17: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3660>, <py_sfcl.CommandDataDefinition object at 0x05DEE0F0>) , Command count = 845 ] 
15:42:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D98EA0>, <py_sfcl.CommandDataDefinition object at 0x05DA35D0>) , Command count = 846 ] 
15:42:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEE420>, <py_sfcl.CommandDataDefinition object at 0x05DEE2A0>) , Command count = 847 ] 
15:42:17: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA36C0>, <py_sfcl.CommandDataDefinition object at 0x05DEE270>) , Command count = 848 ] 
15:42:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA38A0>, <py_sfcl.CommandDataDefinition object at 0x05DA3990>) , Command count = 849 ] 
15:42:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:17: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEE360>, <py_sfcl.CommandDataDefinition object at 0x05DEE390>) , Command count = 850 ] 
15:42:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEE3F0>, <py_sfcl.CommandDataDefinition object at 0x05DEE480>) , Command count = 851 ] 
15:42:17: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3A20>, <py_sfcl.CommandDataDefinition object at 0x05DA3690>) , Command count = 852 ] 
15:42:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3BA0>, <py_sfcl.CommandDataDefinition object at 0x05DEE4B0>) , Command count = 853 ] 
15:42:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEE540>, <py_sfcl.CommandDataDefinition object at 0x05DEE5A0>) , Command count = 854 ] 
15:42:17: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3BD0>, <py_sfcl.CommandDataDefinition object at 0x05DA39C0>) , Command count = 855 ] 
15:42:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3C00>, <py_sfcl.CommandDataDefinition object at 0x05DEE5D0>) , Command count = 856 ] 
15:42:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:17: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

15:42:17: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

15:42:17: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
15:42:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:17: [GetSCRRegisterEntry] Passed
15:42:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:17: Data_Status_After Erases          : 0
15:42:17: CPRM Security Support             : No Security
15:42:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:17: Spec. Version                     : Version 3.0X
15:42:17: Extended Security Support         : Extended_Security_Not_Supported
15:42:17: Command Support                   : COMMAND_SUPPORT
15:42:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:17: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

15:42:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:17: [GetSCRRegisterEntry] Passed
15:42:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:17: Data_Status_After Erases          : 0
15:42:17: CPRM Security Support             : No Security
15:42:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:17: Spec. Version                     : Version 3.0X
15:42:17: Extended Security Support         : Extended_Security_Not_Supported
15:42:17: Command Support                   : COMMAND_SUPPORT
15:42:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:17: [GetSCRRegisterEntry] Passed
15:42:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:17: Data_Status_After Erases          : 0
15:42:17: CPRM Security Support             : No Security
15:42:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:17: Spec. Version                     : Version 3.0X
15:42:17: Extended Security Support         : Extended_Security_Not_Supported
15:42:17: Command Support                   : COMMAND_SUPPORT
15:42:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:17: [GetSCRRegisterEntry] Passed
15:42:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:17: Data_Status_After Erases          : 0
15:42:17: CPRM Security Support             : No Security
15:42:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:17: Spec. Version                     : Version 3.0X
15:42:17: Extended Security Support         : Extended_Security_Not_Supported
15:42:17: Command Support                   : COMMAND_SUPPORT
15:42:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:17: [GetSCRRegisterEntry] Passed
15:42:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:17: Data_Status_After Erases          : 0
15:42:17: CPRM Security Support             : No Security
15:42:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:17: Spec. Version                     : Version 3.0X
15:42:17: Extended Security Support         : Extended_Security_Not_Supported
15:42:17: Command Support                   : COMMAND_SUPPORT
15:42:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:17: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

15:42:17: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
15:42:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

15:42:17: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

15:42:17: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

15:42:17: Perform Power Off and On.
15:42:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:42:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 857 ] 
15:42:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:42:19: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
15:42:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:42:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:42:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:42:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:42:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4D360>, <py_sfcl.CommandDataDefinition object at 0x05DA3090>) , Command count = 858 ] 
15:42:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:42:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D40A50>, <py_sfcl.CommandDataDefinition object at 0x05DA3CC0>) , Command count = 859 ] 
15:42:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
15:42:19: [ SetCardRCA(0x1, 0xD555) , Command count = 860 ] 
15:42:19: [DVTCommonLib]### Identification :Idenfication of card completed 

15:42:19: [GO4_globalInitCard]### Switch to Specify Card Type
15:42:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:42:21: Host Frequency set to 25000 KHz
15:42:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:42:21: [GO18_globalSetVolt]### Set Host Voltage value.
15:42:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
15:42:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEEB10>, 0x0, True) , Command count = 861 ] 
15:42:21: [GO18_globalSetVolt]### Host voltage value is set.
15:42:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
15:42:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DEE7E0>, 0x0, False) , Command count = 862 ] 
15:42:22: [GO18_globalSetVolt]### Host voltage value is set.
15:42:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 863 ] 
15:42:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:42:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 864 ] 
15:42:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:42:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:42:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:42:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:42:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:42:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 865 ] 
15:42:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:42:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:42:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4DF90>, <py_sfcl.CommandDataDefinition object at 0x05DA3300>) , Command count = 866 ] 
15:42:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:42:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4DD50>, <py_sfcl.CommandDataDefinition object at 0x05DA3E70>) , Command count = 867 ] 
15:42:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:42:22: [ SetCardRCA(0x1, 0xD555) , Command count = 868 ] 
15:42:22: [DVTCommonLib]### Identification :Idenfication of card completed 

15:42:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:42:22: Host Frequency set to 25000 KHz
15:42:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:42:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:42:22: ####CSD Registe 2.0 Values####
15:42:22: CSD_STRUCTURE                                 :0x1
15:42:22: Reserv1                                       :0x0
15:42:22: Time Access 1 TAAC                            :0xe
15:42:22: Time Access 2 NSAC*100                        :0x0
15:42:22: Data Transfer Rate TRAN_SPEED                 :0x32
15:42:22: Card Command Classess CCC                     :0x5b5
15:42:22: Max Read Data Block Length  READ_BL_LEN       :0x9
15:42:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:42:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:42:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:42:22: DSR(driver stage register)  DSR_IMP           :0x0
15:42:22: Reserv2                                       :0x0
15:42:22: Device Size C_SIZE                            :0xedc8
15:42:22: Reserv3                                       :0x0
15:42:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:42:22: Erase Sector Size SECTOR_SIZE                 :0x7f
15:42:22: Write Protect Group Size WP_GRP_SIZE          :0x0
15:42:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:42:22: Reserv4                                       :0x0
15:42:22: Write Speed Factor R2W_FACTOR                 :0x2
15:42:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:42:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:42:22: FILE_FORMAT_GRP                               :0x0
15:42:22: COPY flag                                     :0x1
15:42:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:42:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:42:22: File_Format                                   :0x0
15:42:22: CRC                                           :0x0
15:42:22: ####CSD Registe Values####  

15:42:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:22: [GetSCRRegisterEntry] Passed
15:42:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:22: Data_Status_After Erases          : 0
15:42:22: CPRM Security Support             : No Security
15:42:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:22: Spec. Version                     : Version 3.0X
15:42:22: Extended Security Support         : Extended_Security_Not_Supported
15:42:22: Command Support                   : COMMAND_SUPPORT
15:42:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4DB40>, <py_sfcl.CommandDataDefinition object at 0x05DA3E10>) , Command count = 869 ] 
15:42:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:42:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3EA0>, <py_sfcl.CommandDataDefinition object at 0x05DEEA50>) , Command count = 870 ] 
15:42:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:42:22: [ SetBusWidth(0x4) , Command count = 871 ] 
15:42:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DA3AE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 872 ] 
15:42:22: Protected Area Size 0x28000
15:42:22: Bus Width           2
15:42:22: Secure Mode         0
15:42:22: Speed  Class        4
15:42:22: Perf Move           0
15:42:22: Au Size             9
15:42:22: Erase Size          15
15:42:22: Erase Timeout       1
15:42:22: Erase offset        1
15:42:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
15:42:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:42:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 873 ] 
15:42:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
15:42:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:42:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
15:42:22: Host Frequency set to 100000 KHz
15:42:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
15:42:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:42:22: ####CSD Registe 2.0 Values####
15:42:22: CSD_STRUCTURE                                 :0x1
15:42:22: Reserv1                                       :0x0
15:42:22: Time Access 1 TAAC                            :0xe
15:42:22: Time Access 2 NSAC*100                        :0x0
15:42:22: Data Transfer Rate TRAN_SPEED                 :0xb
15:42:22: Card Command Classess CCC                     :0x5b5
15:42:22: Max Read Data Block Length  READ_BL_LEN       :0x9
15:42:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:42:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:42:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:42:22: DSR(driver stage register)  DSR_IMP           :0x0
15:42:22: Reserv2                                       :0x0
15:42:22: Device Size C_SIZE                            :0xedc8
15:42:22: Reserv3                                       :0x0
15:42:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:42:22: Erase Sector Size SECTOR_SIZE                 :0x7f
15:42:22: Write Protect Group Size WP_GRP_SIZE          :0x0
15:42:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:42:22: Reserv4                                       :0x0
15:42:22: Write Speed Factor R2W_FACTOR                 :0x2
15:42:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:42:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:42:22: FILE_FORMAT_GRP                               :0x0
15:42:22: COPY flag                                     :0x1
15:42:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:42:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:42:22: File_Format                                   :0x0
15:42:22: CRC                                           :0x0
15:42:22: ####CSD Registe Values####  

15:42:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3F00>, <py_sfcl.CommandDataDefinition object at 0x05E4DE40>) , Command count = 874 ] 
15:42:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:42:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3F90>, <py_sfcl.CommandDataDefinition object at 0x05E4D120>) , Command count = 875 ] 
15:42:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:42:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


15:42:22: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
15:42:22: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

15:42:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
15:42:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4D240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 876 ] 
15:42:22: Protected Area Size 0x28000
15:42:22: Bus Width           2
15:42:22: Secure Mode         0
15:42:22: Speed  Class        4
15:42:22: Perf Move           0
15:42:22: Au Size             9
15:42:22: Erase Size          15
15:42:22: Erase Timeout       1
15:42:22: Erase offset        1
15:42:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

15:42:22: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
15:42:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E4D2D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 877 ] 
15:42:22: Protected Area Size 0x28000
15:42:22: Bus Width           2
15:42:22: Secure Mode         0
15:42:22: Speed  Class        4
15:42:22: Perf Move           0
15:42:22: Au Size             9
15:42:22: Erase Size          15
15:42:22: Erase Timeout       1
15:42:22: Erase offset        1
15:42:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
15:42:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DEBF00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 878 ] 
15:42:22: Protected Area Size 0x28000
15:42:22: Bus Width           2
15:42:22: Secure Mode         0
15:42:22: Speed  Class        4
15:42:22: Perf Move           0
15:42:22: Au Size             9
15:42:22: Erase Size          15
15:42:22: Erase Timeout       1
15:42:22: Erase offset        1
15:42:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
15:42:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
15:42:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

15:42:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

15:42:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DA7060>, <0x200/0x200, Spc, pat:0x0>) , Command count = 879 ] 
15:42:22: Protected Area Size 0x28000
15:42:22: Bus Width           2
15:42:22: Secure Mode         0
15:42:22: Speed  Class        4
15:42:22: Perf Move           0
15:42:22: Au Size             9
15:42:22: Erase Size          15
15:42:22: Erase Timeout       1
15:42:22: Erase offset        1
15:42:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
15:42:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
15:42:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x051135D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 880 ] 
15:42:22: Protected Area Size 0x28000
15:42:22: Bus Width           2
15:42:22: Secure Mode         0
15:42:22: Speed  Class        4
15:42:22: Perf Move           0
15:42:22: Au Size             9
15:42:22: Erase Size          15
15:42:22: Erase Timeout       1
15:42:22: Erase offset        1
15:42:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
15:42:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05D40DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 881 ] 
15:42:22: Protected Area Size 0x28000
15:42:22: Bus Width           2
15:42:22: Secure Mode         0
15:42:22: Speed  Class        4
15:42:22: Perf Move           0
15:42:22: Au Size             9
15:42:22: Erase Size          15
15:42:22: Erase Timeout       1
15:42:22: Erase offset        1
15:42:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
15:42:22: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
15:42:22: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 27 

15:42:22: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

15:42:24: [ HostReset(False) , Command count = 882 ] 
15:42:24: [ SetSpecialModes(0x5, True) , Command count = 883 ] 
15:42:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D40F30>, <py_sfcl.CommandDataDefinition object at 0x05DA71B0>) , Command count = 884 ] 
15:42:24: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
15:42:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7240>, <py_sfcl.CommandDataDefinition object at 0x05E4D4B0>) , Command count = 885 ] 
15:42:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:42:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA71E0>, <py_sfcl.CommandDataDefinition object at 0x05E4D510>) , Command count = 886 ] 
15:42:25: [ GetCardStatus() , Command count = 887 ] 
15:42:25: ACmd51[ SEND_SCR ] Failed with an exception
15:42:25: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:42:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C822D0>, <py_sfcl.CommandDataDefinition object at 0x05D40F00>) , Command count = 888 ] 
15:42:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:42:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7150>, <py_sfcl.CommandDataDefinition object at 0x05E4DE10>) , Command count = 889 ] 
15:42:25: [ GetCardStatus() , Command count = 890 ] 
15:42:25: ACMD13[ SD_STATUS ] Failed with an exception
15:42:25: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

15:42:25: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

15:42:27: [ HostReset(False) , Command count = 891 ] 
15:42:27: [ SetSpecialModes(0x5, True) , Command count = 892 ] 
15:42:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA72A0>, <py_sfcl.CommandDataDefinition object at 0x05E4DC60>) , Command count = 893 ] 
15:42:27: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
15:42:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C82360>, <py_sfcl.CommandDataDefinition object at 0x05C82390>) , Command count = 894 ] 
15:42:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:42:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4D600>, <py_sfcl.CommandDataDefinition object at 0x05E4D210>) , Command count = 895 ] 
15:42:27: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
15:42:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7360>, <py_sfcl.CommandDataDefinition object at 0x05E4D300>) , Command count = 896 ] 
15:42:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:42:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7420>, <py_sfcl.CommandDataDefinition object at 0x05DEEA50>) , Command count = 897 ] 
15:42:27: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
15:42:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4D3C0>, <py_sfcl.CommandDataDefinition object at 0x05E4DFC0>) , Command count = 898 ] 
15:42:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:42:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4DB70>, <py_sfcl.CommandDataDefinition object at 0x05E4DDE0>) , Command count = 899 ] 
15:42:27: [ GetCardStatus() , Command count = 900 ] 
15:42:27: ACmd51[ SEND_SCR ] Failed with an exception
15:42:27: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:42:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4DE10>, <py_sfcl.CommandDataDefinition object at 0x05E4D690>) , Command count = 901 ] 
15:42:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:42:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7480>, <py_sfcl.CommandDataDefinition object at 0x05DEE930>) , Command count = 902 ] 
15:42:27: [ GetCardStatus() , Command count = 903 ] 
15:42:27: ACMD13[ SD_STATUS ] Failed with an exception
15:42:27: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

15:42:27: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

15:42:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:42:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 904 ] 
15:42:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:42:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:42:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:42:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:42:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:42:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 905 ] 
15:42:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:42:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7630>, <py_sfcl.CommandDataDefinition object at 0x05D40CF0>) , Command count = 906 ] 
15:42:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:42:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:30: [GetSCRRegisterEntry] Failed
15:42:30: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

15:42:30: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
15:42:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DA7600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 907 ] 
15:42:30: [ GetCardStatus() , Command count = 908 ] 
15:42:30: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
15:42:30: [DVTCommonLib]### Exception_Details :Time out error on card response
15:42:30: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

15:42:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7480>, <py_sfcl.CommandDataDefinition object at 0x05DA75D0>) , Command count = 909 ] 
15:42:30: [ GetCardStatus() , Command count = 910 ] 
15:42:30: CMD55[ APP_CMD ] Failed with an exception
15:42:30: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:42:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7690>, <py_sfcl.CommandDataDefinition object at 0x05E4D870>) , Command count = 911 ] 
15:42:30: [ GetCardStatus() , Command count = 912 ] 
15:42:30: ACmd51[ SEND_SCR ] Failed with an exception
15:42:30: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:42:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4D4E0>, <py_sfcl.CommandDataDefinition object at 0x05E4D900>) , Command count = 913 ] 
15:42:30: [ GetCardStatus() , Command count = 914 ] 
15:42:30: CMD55[ APP_CMD ] Failed with an exception
15:42:30: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:42:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4D870>, <py_sfcl.CommandDataDefinition object at 0x05E4D660>) , Command count = 915 ] 
15:42:30: [ GetCardStatus() , Command count = 916 ] 
15:42:30: ACMD13[ SD_STATUS ] Failed with an exception
15:42:30: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

15:42:30: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

15:42:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:42:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 917 ] 
15:42:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:42:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:42:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:42:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:42:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:42:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 918 ] 
15:42:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:42:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:42:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4D900>, <py_sfcl.CommandDataDefinition object at 0x05E4DEA0>) , Command count = 919 ] 
15:42:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:42:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4D5A0>, <py_sfcl.CommandDataDefinition object at 0x05DA7840>) , Command count = 920 ] 
15:42:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:42:32: [ SetCardRCA(0x1, 0xD555) , Command count = 921 ] 
15:42:32: [DVTCommonLib]### Identification :Idenfication of card completed 

15:42:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7540>, <py_sfcl.CommandDataDefinition object at 0x05DA7300>) , Command count = 922 ] 
15:42:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:42:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:32: [GetSCRRegisterEntry] Passed
15:42:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:32: Data_Status_After Erases          : 0
15:42:32: CPRM Security Support             : No Security
15:42:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:32: Spec. Version                     : Version 3.0X
15:42:32: Extended Security Support         : Extended_Security_Not_Supported
15:42:32: Command Support                   : COMMAND_SUPPORT
15:42:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DEE8A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 923 ] 
15:42:32: Protected Area Size 0x28000
15:42:32: Bus Width           0
15:42:32: Secure Mode         0
15:42:32: Speed  Class        4
15:42:32: Perf Move           0
15:42:32: Au Size             9
15:42:32: Erase Size          15
15:42:32: Erase Timeout       1
15:42:32: Erase offset        1
15:42:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:32: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

15:42:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:42:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 924 ] 
15:42:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:42:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:42:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:42:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:42:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:42:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 925 ] 
15:42:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:42:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:42:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7180>, <py_sfcl.CommandDataDefinition object at 0x05E4DA20>) , Command count = 926 ] 
15:42:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:42:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA79C0>, <py_sfcl.CommandDataDefinition object at 0x05DA79F0>) , Command count = 927 ] 
15:42:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:42:35: [ SetCardRCA(0x1, 0xD555) , Command count = 928 ] 
15:42:35: [DVTCommonLib]### Identification :Idenfication of card completed 

15:42:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7510>, <py_sfcl.CommandDataDefinition object at 0x05E4DED0>) , Command count = 929 ] 
15:42:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:42:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4D570>, <py_sfcl.CommandDataDefinition object at 0x05DEE870>) , Command count = 930 ] 
15:42:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:35: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SCR_Verify - to Verify SCR fields one by one 
15:42:35: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.
15:42:35: [CH5026_Utility_SCR_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables
15:42:35: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

15:42:35: Perform Power Off and On.
15:42:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:42:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 931 ] 
15:42:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:42:37: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
15:42:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:42:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:42:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:42:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:42:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7B10>, <py_sfcl.CommandDataDefinition object at 0x05DA7A20>) , Command count = 932 ] 
15:42:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:42:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4D5D0>, <py_sfcl.CommandDataDefinition object at 0x05DA7A80>) , Command count = 933 ] 
15:42:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
15:42:37: [ SetCardRCA(0x1, 0xD555) , Command count = 934 ] 
15:42:37: [DVTCommonLib]### Identification :Idenfication of card completed 

15:42:37: [GO4_globalInitCard]### Switch to Specify Card Type
15:42:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:42:39: Host Frequency set to 25000 KHz
15:42:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:42:39: [GO18_globalSetVolt]### Set Host Voltage value.
15:42:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
15:42:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9030>, 0x0, True) , Command count = 935 ] 
15:42:39: [GO18_globalSetVolt]### Host voltage value is set.
15:42:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
15:42:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DA7780>, 0x0, False) , Command count = 936 ] 
15:42:39: [GO18_globalSetVolt]### Host voltage value is set.
15:42:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 937 ] 
15:42:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:42:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 938 ] 
15:42:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:42:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:42:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:42:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:42:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:42:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 939 ] 
15:42:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:42:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:42:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3ED0>, <py_sfcl.CommandDataDefinition object at 0x05DE9120>) , Command count = 940 ] 
15:42:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:42:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE90C0>, <py_sfcl.CommandDataDefinition object at 0x05DA7C90>) , Command count = 941 ] 
15:42:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:42:39: [ SetCardRCA(0x1, 0xD555) , Command count = 942 ] 
15:42:39: [DVTCommonLib]### Identification :Idenfication of card completed 

15:42:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:42:40: Host Frequency set to 25000 KHz
15:42:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:42:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:42:40: ####CSD Registe 2.0 Values####
15:42:40: CSD_STRUCTURE                                 :0x1
15:42:40: Reserv1                                       :0x0
15:42:40: Time Access 1 TAAC                            :0xe
15:42:40: Time Access 2 NSAC*100                        :0x0
15:42:40: Data Transfer Rate TRAN_SPEED                 :0x32
15:42:40: Card Command Classess CCC                     :0x5b5
15:42:40: Max Read Data Block Length  READ_BL_LEN       :0x9
15:42:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:42:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:42:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:42:40: DSR(driver stage register)  DSR_IMP           :0x0
15:42:40: Reserv2                                       :0x0
15:42:40: Device Size C_SIZE                            :0xedc8
15:42:40: Reserv3                                       :0x0
15:42:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:42:40: Erase Sector Size SECTOR_SIZE                 :0x7f
15:42:40: Write Protect Group Size WP_GRP_SIZE          :0x0
15:42:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:42:40: Reserv4                                       :0x0
15:42:40: Write Speed Factor R2W_FACTOR                 :0x2
15:42:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:42:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:42:40: FILE_FORMAT_GRP                               :0x0
15:42:40: COPY flag                                     :0x1
15:42:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:42:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:42:40: File_Format                                   :0x0
15:42:40: CRC                                           :0x0
15:42:40: ####CSD Registe Values####  

15:42:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:40: [GetSCRRegisterEntry] Passed
15:42:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:40: Data_Status_After Erases          : 0
15:42:40: CPRM Security Support             : No Security
15:42:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:40: Spec. Version                     : Version 3.0X
15:42:40: Extended Security Support         : Extended_Security_Not_Supported
15:42:40: Command Support                   : COMMAND_SUPPORT
15:42:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEEC90>, <py_sfcl.CommandDataDefinition object at 0x05DEE9C0>) , Command count = 943 ] 
15:42:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:42:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7D80>, <py_sfcl.CommandDataDefinition object at 0x05DEE9F0>) , Command count = 944 ] 
15:42:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:42:40: [ SetBusWidth(0x4) , Command count = 945 ] 
15:42:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE9420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 946 ] 
15:42:40: Protected Area Size 0x28000
15:42:40: Bus Width           2
15:42:40: Secure Mode         0
15:42:40: Speed  Class        4
15:42:40: Perf Move           0
15:42:40: Au Size             9
15:42:40: Erase Size          15
15:42:40: Erase Timeout       1
15:42:40: Erase offset        1
15:42:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
15:42:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:42:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 947 ] 
15:42:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
15:42:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:42:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
15:42:40: Host Frequency set to 100000 KHz
15:42:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
15:42:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:42:40: ####CSD Registe 2.0 Values####
15:42:40: CSD_STRUCTURE                                 :0x1
15:42:40: Reserv1                                       :0x0
15:42:40: Time Access 1 TAAC                            :0xe
15:42:40: Time Access 2 NSAC*100                        :0x0
15:42:40: Data Transfer Rate TRAN_SPEED                 :0xb
15:42:40: Card Command Classess CCC                     :0x5b5
15:42:40: Max Read Data Block Length  READ_BL_LEN       :0x9
15:42:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:42:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:42:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:42:40: DSR(driver stage register)  DSR_IMP           :0x0
15:42:40: Reserv2                                       :0x0
15:42:40: Device Size C_SIZE                            :0xedc8
15:42:40: Reserv3                                       :0x0
15:42:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:42:40: Erase Sector Size SECTOR_SIZE                 :0x7f
15:42:40: Write Protect Group Size WP_GRP_SIZE          :0x0
15:42:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:42:40: Reserv4                                       :0x0
15:42:40: Write Speed Factor R2W_FACTOR                 :0x2
15:42:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:42:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:42:40: FILE_FORMAT_GRP                               :0x0
15:42:40: COPY flag                                     :0x1
15:42:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:42:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:42:40: File_Format                                   :0x0
15:42:40: CRC                                           :0x0
15:42:40: ####CSD Registe Values####  

15:42:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7DB0>, <py_sfcl.CommandDataDefinition object at 0x05DA7E10>) , Command count = 948 ] 
15:42:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:42:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE91E0>, <py_sfcl.CommandDataDefinition object at 0x05DE9150>) , Command count = 949 ] 
15:42:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:42:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


15:42:40: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
15:42:40: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

15:42:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:40: [GetSCRRegisterEntry] Passed
15:42:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:40: Data_Status_After Erases          : 0
15:42:40: CPRM Security Support             : No Security
15:42:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:40: Spec. Version                     : Version 3.0X
15:42:40: Extended Security Support         : Extended_Security_Not_Supported
15:42:40: Command Support                   : COMMAND_SUPPORT
15:42:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:40: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC & SD_SPEC3 

15:42:40: [CH5026_Utility_SCR_Verify]###[INFO]   SD SPEC VERSION SD 3.00 

15:42:40: IF SPEC Version 3.00 : 
 1. SD_SPEC=2 and SD_SPEC3=1 
 2. The card shall support CMD6 
 3. The card shall support CMD8 
 4. The card shall support CMD42 
 5. User area capacity shall be up to 2GB (SDSC) or 32GB (SDHC) 
 6. User area capacity shall be more than or equal to 32GB and up to 2TB (SDXC) 

15:42:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:40: [GetSCRRegisterEntry] Passed
15:42:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:40: Data_Status_After Erases          : 0
15:42:40: CPRM Security Support             : No Security
15:42:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:40: Spec. Version                     : Version 3.0X
15:42:40: Extended Security Support         : Extended_Security_Not_Supported
15:42:40: Command Support                   : COMMAND_SUPPORT
15:42:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:40: [CH5026_Utility_SCR_Verify]###[INFO] SD_SPEC_Value :SPEC VERSION 2.00 or 3.0X and Is SD3.0_Newer : Enabled 

15:42:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:42:40: [ CardSwitchCmd(False, [0xF, 0xF, 0xF, 0xF, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 950 ] 
15:42:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250', 'SDR12 SUPPORTED', 'SDR25/HIGH SPEED SUPPORTED', 'SDR50 SUPPORTED', 'SDR104 SUPPORTED', 'DDR50 SUPPORTED', 'Current: 200mA SUPPORTED', 'Current: 400mA SUPPORTED', 'Current: 600mA SUPPORTED', 'Current: 800mA SUPPORTED'] 

15:42:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:42:40: [GO4_globalInitCard]### Switch to Specify Card Type
15:42:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:42:42: Host Frequency set to 25000 KHz
15:42:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:42:42: [GO18_globalSetVolt]### Set Host Voltage value.
15:42:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
15:42:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E4DF60>, 0x0, True) , Command count = 951 ] 
15:42:42: [GO18_globalSetVolt]### Host voltage value is set.
15:42:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
15:42:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DA70F0>, 0x0, False) , Command count = 952 ] 
15:42:42: [GO18_globalSetVolt]### Host voltage value is set.
15:42:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 953 ] 
15:42:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:42:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 954 ] 
15:42:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:42:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:42:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:42:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:42:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:42:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 955 ] 
15:42:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:42:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE91B0>, <py_sfcl.CommandDataDefinition object at 0x05DE9210>) , Command count = 956 ] 
15:42:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7B70>, <py_sfcl.CommandDataDefinition object at 0x05DE9330>) , Command count = 957 ] 
15:42:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:42:42: [ SetCardRCA(0x1, 0xD555) , Command count = 958 ] 
15:42:42: [DVTCommonLib]### Identification :Idenfication of card completed 

15:42:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:42:42: Host Frequency set to 25000 KHz
15:42:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:42:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:42:42: ####CSD Registe 2.0 Values####
15:42:42: CSD_STRUCTURE                                 :0x1
15:42:42: Reserv1                                       :0x0
15:42:42: Time Access 1 TAAC                            :0xe
15:42:42: Time Access 2 NSAC*100                        :0x0
15:42:42: Data Transfer Rate TRAN_SPEED                 :0x32
15:42:42: Card Command Classess CCC                     :0x5b5
15:42:42: Max Read Data Block Length  READ_BL_LEN       :0x9
15:42:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:42:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:42:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:42:42: DSR(driver stage register)  DSR_IMP           :0x0
15:42:42: Reserv2                                       :0x0
15:42:42: Device Size C_SIZE                            :0xedc8
15:42:42: Reserv3                                       :0x0
15:42:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:42:42: Erase Sector Size SECTOR_SIZE                 :0x7f
15:42:42: Write Protect Group Size WP_GRP_SIZE          :0x0
15:42:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:42:42: Reserv4                                       :0x0
15:42:42: Write Speed Factor R2W_FACTOR                 :0x2
15:42:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:42:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:42:42: FILE_FORMAT_GRP                               :0x0
15:42:42: COPY flag                                     :0x1
15:42:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:42:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:42:42: File_Format                                   :0x0
15:42:42: CRC                                           :0x0
15:42:42: ####CSD Registe Values####  

15:42:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:42: [GetSCRRegisterEntry] Passed
15:42:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:42: Data_Status_After Erases          : 0
15:42:42: CPRM Security Support             : No Security
15:42:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:42: Spec. Version                     : Version 3.0X
15:42:42: Extended Security Support         : Extended_Security_Not_Supported
15:42:42: Command Support                   : COMMAND_SUPPORT
15:42:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D40960>, <py_sfcl.CommandDataDefinition object at 0x05DE90F0>) , Command count = 959 ] 
15:42:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB50C0>, <py_sfcl.CommandDataDefinition object at 0x05DEE6C0>) , Command count = 960 ] 
15:42:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:42:42: [ SetBusWidth(0x4) , Command count = 961 ] 
15:42:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE9720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 962 ] 
15:42:42: Protected Area Size 0x28000
15:42:42: Bus Width           2
15:42:42: Secure Mode         0
15:42:42: Speed  Class        4
15:42:42: Perf Move           0
15:42:42: Au Size             9
15:42:42: Erase Size          15
15:42:42: Erase Timeout       1
15:42:42: Erase offset        1
15:42:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
15:42:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:42:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 963 ] 
15:42:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
15:42:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:42:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
15:42:42: Host Frequency set to 100000 KHz
15:42:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
15:42:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:42:42: ####CSD Registe 2.0 Values####
15:42:42: CSD_STRUCTURE                                 :0x1
15:42:42: Reserv1                                       :0x0
15:42:42: Time Access 1 TAAC                            :0xe
15:42:42: Time Access 2 NSAC*100                        :0x0
15:42:42: Data Transfer Rate TRAN_SPEED                 :0xb
15:42:42: Card Command Classess CCC                     :0x5b5
15:42:42: Max Read Data Block Length  READ_BL_LEN       :0x9
15:42:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:42:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:42:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:42:42: DSR(driver stage register)  DSR_IMP           :0x0
15:42:42: Reserv2                                       :0x0
15:42:42: Device Size C_SIZE                            :0xedc8
15:42:42: Reserv3                                       :0x0
15:42:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:42:42: Erase Sector Size SECTOR_SIZE                 :0x7f
15:42:42: Write Protect Group Size WP_GRP_SIZE          :0x0
15:42:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:42:42: Reserv4                                       :0x0
15:42:42: Write Speed Factor R2W_FACTOR                 :0x2
15:42:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:42:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:42:42: FILE_FORMAT_GRP                               :0x0
15:42:42: COPY flag                                     :0x1
15:42:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:42:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:42:42: File_Format                                   :0x0
15:42:42: CRC                                           :0x0
15:42:42: ####CSD Registe Values####  

15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB50F0>, <py_sfcl.CommandDataDefinition object at 0x05DE9630>) , Command count = 964 ] 
15:42:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9660>, <py_sfcl.CommandDataDefinition object at 0x05DE9390>) , Command count = 965 ] 
15:42:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:42:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5090>, <py_sfcl.CommandDataDefinition object at 0x05DE94E0>) , Command count = 966 ] 
15:42:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9600>, <py_sfcl.CommandDataDefinition object at 0x05DEE6C0>) , Command count = 967 ] 
15:42:42: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7B40>, <py_sfcl.CommandDataDefinition object at 0x05DEEBA0>) , Command count = 968 ] 
15:42:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7EA0>, <py_sfcl.CommandDataDefinition object at 0x05DB51B0>) , Command count = 969 ] 
15:42:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5240>, <py_sfcl.CommandDataDefinition object at 0x05DE96C0>) , Command count = 970 ] 
15:42:42: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5270>, <py_sfcl.CommandDataDefinition object at 0x05DE9840>) , Command count = 971 ] 
15:42:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5210>, <py_sfcl.CommandDataDefinition object at 0x05DB52D0>) , Command count = 972 ] 
15:42:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:42: [CH5026_Utility_SCR_Verify]###[INFO] CARD IS LOCKED and Ready for Data as expected.
15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9750>, <py_sfcl.CommandDataDefinition object at 0x05DE95D0>) , Command count = 973 ] 
15:42:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CARD_IS_LOCKED', 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9690>, <py_sfcl.CommandDataDefinition object at 0x05DE9780>) , Command count = 974 ] 
15:42:42: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 2, 0, 9, 0, 13]
15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7FC0>, <py_sfcl.CommandDataDefinition object at 0x05DB52A0>) , Command count = 975 ] 
15:42:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE93F0>, <py_sfcl.CommandDataDefinition object at 0x05DE9960>) , Command count = 976 ] 
15:42:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE97B0>, <py_sfcl.CommandDataDefinition object at 0x05DE9810>) , Command count = 977 ] 
15:42:42: CMD42[ LOCK_UNLOCK ] Passed with R1 type response:[42, 0, 0, 9, 0, 12]
15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5360>, <py_sfcl.CommandDataDefinition object at 0x05DB53C0>) , Command count = 978 ] 
15:42:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5390>, <py_sfcl.CommandDataDefinition object at 0x05DE98A0>) , Command count = 979 ] 
15:42:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Tran', 'READY_FOR_DATA']
15:42:42: [CH5026_Utility_SCR_Verify]###[INFO]   Card is not locked and Ready for Data as expected.

15:42:42: [CH5026_Utility_SCR_Verify]###[INFO] User area capacity shall be up to 2GB (LC) or BETWEEN 2GB AND 32GB (HC) 

15:42:42: [CH5026_Utility_SCR_Verify]###[ERROR]  Failed - Wrong capacity information.
15:42:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:42: [GetSCRRegisterEntry] Passed
15:42:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:42: Data_Status_After Erases          : 0
15:42:42: CPRM Security Support             : No Security
15:42:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:42: Spec. Version                     : Version 3.0X
15:42:42: Extended Security Support         : Extended_Security_Not_Supported
15:42:42: Command Support                   : COMMAND_SUPPORT
15:42:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:42: [CH5026_Utility_SCR_Verify]###[INFO] DATA_STAT_AFTER_ERASE_Value is disabled as expected 

15:42:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:42: [GetSCRRegisterEntry] Passed
15:42:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:42: Data_Status_After Erases          : 0
15:42:42: CPRM Security Support             : No Security
15:42:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:42: Spec. Version                     : Version 3.0X
15:42:42: Extended Security Support         : Extended_Security_Not_Supported
15:42:42: Command Support                   : COMMAND_SUPPORT
15:42:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:42: [GetSCRRegisterEntry] Passed
15:42:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:42: Data_Status_After Erases          : 0
15:42:42: CPRM Security Support             : No Security
15:42:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:42: Spec. Version                     : Version 3.0X
15:42:42: Extended Security Support         : Extended_Security_Not_Supported
15:42:42: Command Support                   : COMMAND_SUPPORT
15:42:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:42: [GetSCRRegisterEntry] Passed
15:42:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:42: Data_Status_After Erases          : 0
15:42:42: CPRM Security Support             : No Security
15:42:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:42: Spec. Version                     : Version 3.0X
15:42:42: Extended Security Support         : Extended_Security_Not_Supported
15:42:42: Command Support                   : COMMAND_SUPPORT
15:42:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:42: [GetSCRRegisterEntry] Passed
15:42:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:42: Data_Status_After Erases          : 0
15:42:42: CPRM Security Support             : No Security
15:42:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:42: Spec. Version                     : Version 3.0X
15:42:42: Extended Security Support         : Extended_Security_Not_Supported
15:42:42: Command Support                   : COMMAND_SUPPORT
15:42:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:42: [CH5026_Utility_SCR_Verify]###[INFO] TEST SCRIPT EXECUTION IS ENDED.

15:42:42: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Call Utility_SD_STATUS_Verify - to Verify SCR fields one by one 
15:42:42: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS STARTED.

15:42:42: [CH5027_Utility_SD_STATUS_Verify]###[INFO] Call Utility_Load_SCR_SDStatus_Variables 

15:42:42: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

15:42:42: Perform Power Off and On.
15:42:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:42:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 980 ] 
15:42:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:42:45: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
15:42:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:42:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:42:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:42:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:42:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB53F0>, <py_sfcl.CommandDataDefinition object at 0x05DB5450>) , Command count = 981 ] 
15:42:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:42:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5420>, <py_sfcl.CommandDataDefinition object at 0x05DE99F0>) , Command count = 982 ] 
15:42:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
15:42:45: [ SetCardRCA(0x1, 0xD555) , Command count = 983 ] 
15:42:45: [DVTCommonLib]### Identification :Idenfication of card completed 

15:42:45: [GO4_globalInitCard]### Switch to Specify Card Type
15:42:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:42:47: Host Frequency set to 25000 KHz
15:42:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:42:47: [GO18_globalSetVolt]### Set Host Voltage value.
15:42:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
15:42:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DB5480>, 0x0, True) , Command count = 984 ] 
15:42:47: [GO18_globalSetVolt]### Host voltage value is set.
15:42:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
15:42:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9B10>, 0x0, False) , Command count = 985 ] 
15:42:47: [GO18_globalSetVolt]### Host voltage value is set.
15:42:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 986 ] 
15:42:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:42:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 987 ] 
15:42:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:42:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:42:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:42:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:42:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:42:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 988 ] 
15:42:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:42:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:42:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5570>, <py_sfcl.CommandDataDefinition object at 0x05DB54B0>) , Command count = 989 ] 
15:42:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:42:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5600>, <py_sfcl.CommandDataDefinition object at 0x05DE9D20>) , Command count = 990 ] 
15:42:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:42:47: [ SetCardRCA(0x1, 0xD555) , Command count = 991 ] 
15:42:47: [DVTCommonLib]### Identification :Idenfication of card completed 

15:42:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
15:42:47: Host Frequency set to 25000 KHz
15:42:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
15:42:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:42:47: ####CSD Registe 2.0 Values####
15:42:47: CSD_STRUCTURE                                 :0x1
15:42:47: Reserv1                                       :0x0
15:42:47: Time Access 1 TAAC                            :0xe
15:42:47: Time Access 2 NSAC*100                        :0x0
15:42:47: Data Transfer Rate TRAN_SPEED                 :0x32
15:42:47: Card Command Classess CCC                     :0x5b5
15:42:47: Max Read Data Block Length  READ_BL_LEN       :0x9
15:42:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:42:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:42:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:42:47: DSR(driver stage register)  DSR_IMP           :0x0
15:42:47: Reserv2                                       :0x0
15:42:47: Device Size C_SIZE                            :0xedc8
15:42:47: Reserv3                                       :0x0
15:42:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:42:47: Erase Sector Size SECTOR_SIZE                 :0x7f
15:42:47: Write Protect Group Size WP_GRP_SIZE          :0x0
15:42:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:42:47: Reserv4                                       :0x0
15:42:47: Write Speed Factor R2W_FACTOR                 :0x2
15:42:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:42:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:42:47: FILE_FORMAT_GRP                               :0x0
15:42:47: COPY flag                                     :0x1
15:42:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:42:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:42:47: File_Format                                   :0x0
15:42:47: CRC                                           :0x0
15:42:47: ####CSD Registe Values####  

15:42:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:47: [GetSCRRegisterEntry] Passed
15:42:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:47: Data_Status_After Erases          : 0
15:42:47: CPRM Security Support             : No Security
15:42:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:47: Spec. Version                     : Version 3.0X
15:42:47: Extended Security Support         : Extended_Security_Not_Supported
15:42:47: Command Support                   : COMMAND_SUPPORT
15:42:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5690>, <py_sfcl.CommandDataDefinition object at 0x05DE9C90>) , Command count = 992 ] 
15:42:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
15:42:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB56F0>, <py_sfcl.CommandDataDefinition object at 0x05DE99C0>) , Command count = 993 ] 
15:42:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
15:42:47: [ SetBusWidth(0x4) , Command count = 994 ] 
15:42:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DB5630>, <0x200/0x200, Spc, pat:0x0>) , Command count = 995 ] 
15:42:47: Protected Area Size 0x28000
15:42:47: Bus Width           2
15:42:47: Secure Mode         0
15:42:47: Speed  Class        4
15:42:47: Perf Move           0
15:42:47: Au Size             9
15:42:47: Erase Size          15
15:42:47: Erase Timeout       1
15:42:47: Erase offset        1
15:42:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
15:42:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
15:42:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 996 ] 
15:42:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
15:42:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

15:42:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
15:42:47: Host Frequency set to 100000 KHz
15:42:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
15:42:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
15:42:47: ####CSD Registe 2.0 Values####
15:42:47: CSD_STRUCTURE                                 :0x1
15:42:47: Reserv1                                       :0x0
15:42:47: Time Access 1 TAAC                            :0xe
15:42:47: Time Access 2 NSAC*100                        :0x0
15:42:47: Data Transfer Rate TRAN_SPEED                 :0xb
15:42:47: Card Command Classess CCC                     :0x5b5
15:42:47: Max Read Data Block Length  READ_BL_LEN       :0x9
15:42:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
15:42:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
15:42:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
15:42:47: DSR(driver stage register)  DSR_IMP           :0x0
15:42:47: Reserv2                                       :0x0
15:42:47: Device Size C_SIZE                            :0xedc8
15:42:47: Reserv3                                       :0x0
15:42:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
15:42:47: Erase Sector Size SECTOR_SIZE                 :0x7f
15:42:47: Write Protect Group Size WP_GRP_SIZE          :0x0
15:42:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
15:42:47: Reserv4                                       :0x0
15:42:47: Write Speed Factor R2W_FACTOR                 :0x2
15:42:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
15:42:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
15:42:47: FILE_FORMAT_GRP                               :0x0
15:42:47: COPY flag                                     :0x1
15:42:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
15:42:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
15:42:47: File_Format                                   :0x0
15:42:47: CRC                                           :0x0
15:42:47: ####CSD Registe Values####  

15:42:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5720>, <py_sfcl.CommandDataDefinition object at 0x05DE9E70>) , Command count = 997 ] 
15:42:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:42:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9DB0>, <py_sfcl.CommandDataDefinition object at 0x05DE9D80>) , Command count = 998 ] 
15:42:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
15:42:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


15:42:47: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Card Capacity is : 32.000000 GB
15:42:47: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] call completed 

15:42:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD_BUS_WIDTHS 
15:42:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE9E40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 999 ] 
15:42:47: Protected Area Size 0x28000
15:42:47: Bus Width           2
15:42:47: Secure Mode         0
15:42:47: Speed  Class        4
15:42:47: Perf Move           0
15:42:47: Au Size             9
15:42:47: Erase Size          15
15:42:47: Erase Timeout       1
15:42:47: Erase offset        1
15:42:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Bus width is 4 

15:42:47: [CH5027_Utility_SD_STATUS_Verify]#### SD_CARD_TYPE 
15:42:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE9F60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1000 ] 
15:42:47: Protected Area Size 0x28000
15:42:47: Bus Width           2
15:42:47: Secure Mode         0
15:42:47: Speed  Class        4
15:42:47: Perf Move           0
15:42:47: Au Size             9
15:42:47: Erase Size          15
15:42:47: Erase Timeout       1
15:42:47: Erase offset        1
15:42:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Card Type : 0
15:42:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE9E40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1001 ] 
15:42:47: Protected Area Size 0x28000
15:42:47: Bus Width           2
15:42:47: Secure Mode         0
15:42:47: Speed  Class        4
15:42:47: Perf Move           0
15:42:47: Au Size             9
15:42:47: Erase Size          15
15:42:47: Erase Timeout       1
15:42:47: Erase offset        1
15:42:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Passed - Protected Area Size is 163840 as expected.
15:42:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO]Start Formula for SDSC Card.
15:42:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO] SD SPEED_CLASS 

15:42:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO] PERFORMANCE_MOVE 

15:42:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE9F60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1002 ] 
15:42:47: Protected Area Size 0x28000
15:42:47: Bus Width           2
15:42:47: Secure Mode         0
15:42:47: Speed  Class        4
15:42:47: Perf Move           0
15:42:47: Au Size             9
15:42:47: Erase Size          15
15:42:47: Erase Timeout       1
15:42:47: Erase offset        1
15:42:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO]PERFORMANCE_Move value is : 0 ,Expected 
15:42:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO] AU_SIZE 
15:42:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE9E40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1003 ] 
15:42:47: Protected Area Size 0x28000
15:42:47: Bus Width           2
15:42:47: Secure Mode         0
15:42:47: Speed  Class        4
15:42:47: Perf Move           0
15:42:47: Au Size             9
15:42:47: Erase Size          15
15:42:47: Erase Timeout       1
15:42:47: Erase offset        1
15:42:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:47: [CH5027_Utility_SD_STATUS_Verify]###[INFO] - AU Size is in the limit of 4 MB.
15:42:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE9F60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1004 ] 
15:42:47: Protected Area Size 0x28000
15:42:47: Bus Width           2
15:42:47: Secure Mode         0
15:42:48: Speed  Class        4
15:42:48: Perf Move           0
15:42:48: Au Size             9
15:42:48: Erase Size          15
15:42:48: Erase Timeout       1
15:42:48: Erase offset        1
15:42:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:48: [CH5027_Utility_SD_STATUS_Verify]###[INFO]  Erase_Size value is : 15
15:42:48: [CH5027_Utility_SD_STATUS_Verify]###[INFO] TEST SCRIPT EXECUTION IS COMPLETED.
15:42:48: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] LoopSize1 26 

15:42:48: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in idle state 

15:42:50: [ HostReset(False) , Command count = 1005 ] 
15:42:50: [ SetSpecialModes(0x5, True) , Command count = 1006 ] 
15:42:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05113330>, <py_sfcl.CommandDataDefinition object at 0x05DEB030>) , Command count = 1007 ] 
15:42:50: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
15:42:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB58D0>, <py_sfcl.CommandDataDefinition object at 0x05DEB150>) , Command count = 1008 ] 
15:42:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:42:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5960>, <py_sfcl.CommandDataDefinition object at 0x05DEB1B0>) , Command count = 1009 ] 
15:42:50: [ GetCardStatus() , Command count = 1010 ] 
15:42:50: ACmd51[ SEND_SCR ] Failed with an exception
15:42:50: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:42:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E4D660>, <py_sfcl.CommandDataDefinition object at 0x05E4D870>) , Command count = 1011 ] 
15:42:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:42:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB58A0>, <py_sfcl.CommandDataDefinition object at 0x05DEB060>) , Command count = 1012 ] 
15:42:50: [ GetCardStatus() , Command count = 1013 ] 
15:42:50: ACMD13[ SD_STATUS ] Failed with an exception
15:42:50: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

15:42:50: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in ready state 

15:42:52: [ HostReset(False) , Command count = 1014 ] 
15:42:52: [ SetSpecialModes(0x5, True) , Command count = 1015 ] 
15:42:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x051D7480>, <py_sfcl.CommandDataDefinition object at 0x052065A0>) , Command count = 1016 ] 
15:42:52: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
15:42:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA7810>, <py_sfcl.CommandDataDefinition object at 0x05DA77E0>) , Command count = 1017 ] 
15:42:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:42:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05206540>, <py_sfcl.CommandDataDefinition object at 0x05DEB270>) , Command count = 1018 ] 
15:42:52: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
15:42:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x051F7720>, <py_sfcl.CommandDataDefinition object at 0x05DEB2A0>) , Command count = 1019 ] 
15:42:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:42:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB59C0>, <py_sfcl.CommandDataDefinition object at 0x05DE9900>) , Command count = 1020 ] 
15:42:52: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
15:42:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05206F90>, <py_sfcl.CommandDataDefinition object at 0x05DEB420>) , Command count = 1021 ] 
15:42:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:42:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB59F0>, <py_sfcl.CommandDataDefinition object at 0x05206FC0>) , Command count = 1022 ] 
15:42:52: [ GetCardStatus() , Command count = 1023 ] 
15:42:52: ACmd51[ SEND_SCR ] Failed with an exception
15:42:52: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:42:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB58A0>, <py_sfcl.CommandDataDefinition object at 0x05DA7900>) , Command count = 1024 ] 
15:42:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'ILLEGAL_COMMAND', 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
15:42:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052065D0>, <py_sfcl.CommandDataDefinition object at 0x05DE9C00>) , Command count = 1025 ] 
15:42:53: [ GetCardStatus() , Command count = 1026 ] 
15:42:53: ACMD13[ SD_STATUS ] Failed with an exception
15:42:53: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

15:42:53: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Ident state 

15:42:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:42:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1027 ] 
15:42:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:42:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:42:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:42:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:42:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:42:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1028 ] 
15:42:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:42:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05215D50>, <py_sfcl.CommandDataDefinition object at 0x0520F330>) , Command count = 1029 ] 
15:42:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:42:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:55: [GetSCRRegisterEntry] Failed
15:42:55: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GET_SCR_Reg_Values API  - Failed with time our error: Expected 

15:42:55: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] Check SD Status Verify expect OK
15:42:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05215DB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1030 ] 
15:42:55: [ GetCardStatus() , Command count = 1031 ] 
15:42:55: [DVTCommonLib]### GetSDStatus[Error] :Failed to get card SD status
15:42:55: [DVTCommonLib]### Exception_Details :Time out error on card response
15:42:55: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] GetSDStatus API - Failed with time our error: Expected 

15:42:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9C00>, <py_sfcl.CommandDataDefinition object at 0x052065D0>) , Command count = 1032 ] 
15:42:55: [ GetCardStatus() , Command count = 1033 ] 
15:42:55: CMD55[ APP_CMD ] Failed with an exception
15:42:55: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:42:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05215D20>, <py_sfcl.CommandDataDefinition object at 0x05215F90>) , Command count = 1034 ] 
15:42:55: [ GetCardStatus() , Command count = 1035 ] 
15:42:55: ACmd51[ SEND_SCR ] Failed with an exception
15:42:55: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:42:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052065D0>, <py_sfcl.CommandDataDefinition object at 0x05DE9C00>) , Command count = 1036 ] 
15:42:55: [ GetCardStatus() , Command count = 1037 ] 
15:42:55: CMD55[ APP_CMD ] Failed with an exception
15:42:55: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD51 - Failed with time our error: Expected 

15:42:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05215F90>, <py_sfcl.CommandDataDefinition object at 0x05215D20>) , Command count = 1038 ] 
15:42:55: [ GetCardStatus() , Command count = 1039 ] 
15:42:55: ACMD13[ SD_STATUS ] Failed with an exception
15:42:55: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest] ACMD13 - Failed with time our error: Expected 

15:42:55: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Stby state 

15:42:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
15:42:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1040 ] 
15:42:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
15:42:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
15:42:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
15:42:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
15:42:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
15:42:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1041 ] 
15:42:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
15:42:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
15:42:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C82300>, <py_sfcl.CommandDataDefinition object at 0x052065D0>) , Command count = 1042 ] 
15:42:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
15:42:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C822A0>, <py_sfcl.CommandDataDefinition object at 0x05C823C0>) , Command count = 1043 ] 
15:42:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
15:42:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1044 ] 
15:42:58: [DVTCommonLib]### Identification :Idenfication of card completed 

15:42:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05D38180>, <py_sfcl.CommandDataDefinition object at 0x05DEB240>) , Command count = 1045 ] 
15:42:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
15:42:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
15:42:58: [GetSCRRegisterEntry] Passed
15:42:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
15:42:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
15:42:58: Data_Status_After Erases          : 0
15:42:58: CPRM Security Support             : No Security
15:42:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
15:42:58: Spec. Version                     : Version 3.0X
15:42:58: Extended Security Support         : Extended_Security_Not_Supported
15:42:58: Command Support                   : COMMAND_SUPPORT
15:42:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

15:42:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
15:42:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DEB510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1046 ] 
15:42:58: Protected Area Size 0x28000
15:42:58: Bus Width           0
15:42:58: Secure Mode         0
15:42:58: Speed  Class        4
15:42:58: Perf Move           0
15:42:58: Au Size             9
15:42:58: Erase Size          15
15:42:58: Erase Timeout       1
15:42:58: Erase offset        1
15:42:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

15:42:58: [CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest]### [INFO] Check ACMD51 and ACMD13 behaviour in Trans state 

15:42:58: Failed Running script <module 'CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Chapter_5\CH504_DVT_SD300_3_6_1_2_SCR_SDStatus_StateTest.py'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
15:42:58: ########################################
15:42:58: ########################################
15:42:58: Stated Running script CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest 
15:42:58: ########################################
15:42:58: [CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest]###### Running SCRVerify Test 
15:42:58: [CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest] ### TEST SCRIPT EXECUTION IS STARTED.
15:42:58: [CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest] Call Utility_Load_SCR_SDStatus_Variables
15:42:58: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

15:42:58: Perform Power Off and On.
15:42:58: Failed Running script <module 'CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Chapter_5\CH505_DVT_SD300_3_6_1_3_SCR_SDStatus_SCRfieldsTest.py'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
15:42:58: ########################################
15:42:58: ########################################
15:42:58: Stated Running script CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest 
15:42:58: ########################################
15:42:58: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest]###### Running SCRVerify Test 
15:42:58: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest] ### TEST SCRIPT EXECUTION IS STARTED.
15:42:58: [CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest] Call Utility_Load_SCR_SDStatus_Variables
15:42:58: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

15:42:58: Perform Power Off and On.
15:42:58: Failed Running script <module 'CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Chapter_5\CH506_DVT_SD300_3_6_1_4_SCR_SDStatus_SDStatusfieldsTest.py'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
15:42:58: ########################################
15:42:58: ########################################
15:42:58: Stated Running script CH507_DVT_SD300_3_6_1_5_SCR_SDStatus_InSpeedClassTest 
15:42:58: ########################################
15:42:58: CH507_DVT_SD300_3_6_1_5_SCR_SDStatus_InSpeedClassTest Skipped as CARD_CAPACITY <=2028 and > 32  

15:42:58: ########################################
15:42:58: ########################################
15:42:58: Stated Running script CH509_DVT_SD300_3_6_1_7_SCR_SDStatus_WriteProtectTest 
15:42:58: ########################################
15:42:58: CH509_DVT_SD300_3_6_1_7_SCR_SDStatus_WriteProtectTest Skipped as CARD_CAPACITY <=2028 and > 32 

15:42:58: ########################################
15:42:58: ########################################
15:42:58: Stated Running script CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest 
15:42:58: ########################################
15:42:58: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest]###### Running SCR_SDStatus_LockUnlockTest Test 
15:42:58: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] ### TEST SCRIPT EXECUTION IS STARTED.
15:42:58: [CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest] Call Utility_Load_SCR_SDStatus_Variables
15:42:58: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

15:42:58: Perform Power Off and On.
15:42:58: Failed Running script <module 'CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Chapter_5\CH508_DVT_SD300_3_6_1_6_SCR_SDStatus_LockUnlockTest.py'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
15:42:58: ########################################
15:42:58: ########################################
15:42:58: Stated Running script CH5010_DVT_SD300_3_6_1_8_SCR_SDStatus_AllResetTypesTest 
15:42:58: ########################################
15:42:58: [CH5010_DVT_SD300_3_6_1_8_SCR_SDStatus_AllResetTypesTest]###### Running SCR_SDStatus_AllResetTypesTest Test 
15:42:58: [CH5010_DVT_SD300_3_6_1_8_SCR_SDStatus_AllResetTypesTest] ### TEST SCRIPT EXECUTION IS STARTED.
15:42:58: [CH5010_DVT_SD300_3_6_1_8_SCR_SDStatus_AllResetTypesTest] Call Utility_Load_SCR_SDStatus_Variables
15:42:58: CH5ULSSV_Utility_Load_SCR_SDStatus_Variables###[INFO] Called 

15:42:58: Perform Power Off and On.
15:42:58: Failed Running script <module 'CH5010_DVT_SD300_3_6_1_8_SCR_SDStatus_AllResetTypesTest' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Chapter_5\CH5010_DVT_SD300_3_6_1_8_SCR_SDStatus_AllResetTypesTest.py'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
15:42:58: ########################################
15:42:58: ########################################
15:42:58: Stated Running script CH5011_DVT_SD300_3_6_1_9_SCR_SDStatus_SPIandSDModeTest 
15:42:58: ########################################
15:42:58: [CH5011_DVT_SD300_3_6_1_9_SCR_SDStatus_SPIandSDModeTest]###### Running SCRSDStatusSPISD Test 
15:42:58: [CH5011_DVT_SD300_3_6_1_9_SCR_SDStatus_SPIandSDModeTest] Started Execution 

15:42:58: [CH5011_DVT_SD300_3_6_1_9_SCR_SDStatus_SPIandSDModeTest]No SPI mode. Exiting the test! 

15:42:58: ########################################
15:42:58: Finished Running script CH5011_DVT_SD300_3_6_1_9_SCR_SDStatus_SPIandSDModeTest 
15:42:58: ########################################
15:42:58: ########################################
15:42:58: The Script <class 'CH5666_CallAll_SCR_SDStatus.CallAll_SCR_SDStatus'> has 6 error on running 
15:42:58: ########################################

2016-11-29 15:42:58: 


<<<<<<<<<<<<<<<       PYTHON TRACEBACK       >>>>>>>>>>>>>>>

   File "C:\Program Files\SanDisk\CTF\Libs\General\AppDriver.py", line 269, in _DoRunApp
     returnData = appMainFunction( *functionArgs, **functionKwArgs )
   File "C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\TestRunner.py", line 122, in Main
     testProcedureObj.RunTestProcedure(randomObj)
   File "C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Chapter_5\CH5666_CallAll_SCR_SDStatus.py", line 129, in RunTestProcedure
     self.CallAll_SCR_SDStatusObj.Run(randomObj)
   File "C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Chapter_5\CH5666_CallAll_SCR_SDStatus.py", line 100, in Run
     raise TestError.TestFailedError("The Script %s has %d error on running "%(self.__class__,ScriptsStatus))



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  



<<<<<<<<<<<<<<<        ERROR SUMMARY         >>>>>>>>>>>>>>>


 Test reported an error
    The Script <class 'CH<NUM>_CallAll_SCR_SDStatus.CallAll_SCR_SDStatus'> has <NUM> error on running 



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 TestFailedError:                                   
    The Script <class 'CH5666_CallAll_SCR_SDStatus.CallAll_SCR_SDStatus'> has 6 error on running



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  


<<<<<<<<<<<<<<<       COMMAND HISTORY        >>>>>>>>>>>>>>>

The command history may not capture all of the commands going
to the card so use this information with caution. This is not meant
to be a replacement for a logic or protocol analyzer.

Last 20 commands before error:
      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   1027 CardReset(py_sfcl.CARD_MODE.SD, 41FF8000, 1, T, <200/200, 0>, 1, 0, 1,      175.641       213.2   read=  0, write=  0                 C1FF8000
   1028 SwitchVolt_CMD11(T, 0, 5)                                                   175.856         8.5   read=  0, write=  0                 0       
   1029 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05206FC0>, <py      175.864         4.1   read=  0, write=  0                 0       
   1030 CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE9F60>, <200/20      175.873         3.6   read=  0, write=  0                 1       
   1031 GetCardStatus()                                                             175.876         5.3   read=  0, write=  0                 'Obj'   
   1032 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05215D50>, <py      175.883         4.4   read=  0, write=  0                 1       
   1033 GetCardStatus()                                                             175.888         5.4   read=  0, write=  0                 'Obj'   
   1034 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DEB450>, <py      175.895       209.6   read=  0, write=  0                 1       
   1035 GetCardStatus()                                                             176.105         5.3   read=  0, write=  0                 'Obj'   
   1036 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DB5930>, <py      176.112         4.5   read=  0, write=  0                 1       
   1037 GetCardStatus()                                                             176.116         5.4   read=  0, write=  0                 'Obj'   
   1038 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C82060>, <py      176.123       208.3   read=  0, write=  0                 1       
   1039 GetCardStatus()                                                             176.332         5.3   read=  0, write=  0                 'Obj'   
   1040 CardReset(py_sfcl.CARD_MODE.SD, 41FF8000, 1, T, <200/200, 0>, 1, 0, 1,      178.386       203.1   read=  0, write=  0                 C1FF8000
   1041 SwitchVolt_CMD11(T, 0, 5)                                                   178.591         8.5   read=  0, write=  0                 0       
   1042 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DA3180>, <py      178.600         4.3   read=  0, write=  0                 0       
   1043 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C82300>, <py      178.605         3.6   read=  0, write=  0                 0       
   1044 SetCardRCA(1, D555)                                                         178.609         1.4   read=  0, write=  0                 'Obj'   
   1045 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05C822A0>, <py      178.692         3.2   read=  0, write=  0                 0       
   1046 CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05215DB0>, <200/20      178.704         5.0   read=  0, write=  0                 0       

      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   ------------------------------------------------------------------------------------------------------------------------------------------------
   20 commands.  Total time 00:02:58


Start LBA: 0xffffffff Transferred block amount: 0xffffffff

Latency data
--------------------------------------------------
Time Interval  Reset        Read         Write        
  0 -   8 :    0            103          48           
  8 -  13 :    0            0            0            
 13 -  17 :    0            0            0            
 17 -  21 :    0            0            0            
 21 -  26 :    0            0            0            
 26 -  30 :    0            0            0            
 30 -  34 :    0            0            0            
 34 -  39 :    0            0            0            
 39 -  43 :    0            0            0            
 43 -  48 :    0            0            0            
 48 -  52 :    0            0            0            
 52 -  56 :    0            0            0            
 56 -  61 :    0            0            0            
 61 -  65 :    0            0            0            
 65 -  69 :    0            0            0            
 69 -  74 :    0            0            0            
 74 -  78 :    0            0            0            
 78 -  82 :    0            0            0            
 82 -  87 :    0            0            0            
 87 -  91 :    0            0            0            
 91 -  96 :    0            0            0            
 96 - 100 :    0            0            0            
100 - 104 :    0            0            0            
104 - 109 :    0            0            0            
109 - 113 :    1            0            0            
113 - 117 :    0            0            0            
117 - 122 :    0            0            0            
122 - 126 :    0            0            0            
126 - 131 :    0            0            0            
131 - 135 :    0            0            0            
135 - 139 :    0            0            0            
139 - 144 :    0            0            0            
144 - 148 :    0            0            0            
148 - 152 :    0            0            0            
152 - 157 :    0            0            0            
157 - 161 :    0            0            0            
161 - 165 :    0            0            0            
165 - 170 :    0            0            0            
170 - 174 :    0            0            0            
174 - 179 :    0            0            0            
179 - 183 :    0            0            0            
183 - 187 :    0            0            0            
187 - 192 :    0            0            0            
192 - 196 :    0            0            0            
196 - 200 :    0            0            0            
200 - 205 :    0            0            0            
205 - 209 :    0            0            0            
209 - 214 :    0            0            0            
214 - 218 :    0            0            0            
--------------------------------------------------


List of commands that took the most time to execute:
----------------------------------------------------
      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

    155 WrLbaNoData(0x18EA266, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREM           NA  711.660360   NA                                  0       
    250 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  215.399002   NA                                  3254747136
    250 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  215.134888   NA                                  3254747136
    250 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  215.019282   NA                                  3254747136
    250 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  214.778712   NA                                  3254747136
    250 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  214.103487   NA                                  3254747136
    250 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  213.979731   NA                                  3254747136
    250 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  213.858389   NA                                  3254747136
    250 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  213.826092   NA                                  3254747136
    250 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  213.759988   NA                                  3254747136
    250 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  213.750027   NA                                  3254747136
    250 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  213.727389   NA                                  3254747136
    250 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  213.726483   NA                                  3254747136
    250 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  213.688753   NA                                  3254747136
    250 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  213.673962   NA                                  3254747136
    250 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  213.670038   NA                                  3254747136
    250 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  213.656154   NA                                  3254747136
    250 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  213.638043   NA                                  3254747136
    250 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  213.621140   NA                                  3254747136
    250 CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, S           NA  213.618121   NA                                  3254747136

      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

Last resetup command number: 1045


<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  

TestFailedError error at 00:02:59.


<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 TestFailedError:                                   
    The Script <class 'CH5666_CallAll_SCR_SDStatus.CallAll_SCR_SDStatus'> has 6 error on running



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




   #######    ##     ####  ####    
    ##   #   ####     ##    ##     
    ## #    ##  ##    ##    ##     
    ####    ##  ##    ##    ##     
    ## #    ######    ##    ##     
    ##      ##  ##    ##    ##  ## 
   ####     ##  ##   ####  ####### 
                                   

 

