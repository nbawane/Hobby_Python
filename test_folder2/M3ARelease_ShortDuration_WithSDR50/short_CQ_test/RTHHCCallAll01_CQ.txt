10:01:42: Sata Disconnector Board found in COM1.
10:01:47: ***************************************************** 

10:01:47: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   * 

10:01:47: *                                                   * 

10:01:47: *  Compatibility with this version is not verified! * 

10:01:47: ***************************************************** 

10:01:49: [ DeviceSetupCompletion() , Command count = 7 ] 
10:01:49: Testname Mapping: ScriptName=[RTHHCCallAll01_CallAllReset_1] -> TestId=[RTHHCCallAll01]
10:01:49: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 8 ] 
10:01:49: [ GetPhysicalChipsInfo() , Command count = 9 ] 
10:01:49: [ GetFileSize(0xEA) , Command count = 10 ] 
10:01:49: [ ReadFile(<0xA00/0x200, Arb>, 0xEA, 0x1) , Command count = 11 ] 
10:01:49: [ GetFileSize(0x16) , Command count = 12 ] 
10:01:49: [ GetCardStatus() , Command count = 13 ] 
10:01:49: [ GetFileSize(0x18) , Command count = 14 ] 
10:01:49: [ ReadFile(<0x1000/0x200, Arb>, 0x18, 0x8) , Command count = 15 ] 
10:01:49: [ GetFileSize(0x15) , Command count = 16 ] 
10:01:49: [ ReadFile(<0x1000/0x200, Arb>, 0x15, 0x1) , Command count = 17 ] 
10:01:52: Can not find revision of File 21 in file 'config.xml' or card is in the ROM mode
10:01:52: [ GetFileSize(0xE) , Command count = 18 ] 
10:01:52: [ ReadFile(<0x1000/0x200, Arb>, 0xE, 0x1) , Command count = 19 ] 
10:01:52: [ GetFileSize(0x1E) , Command count = 20 ] 
10:01:52: [ GetCardStatus() , Command count = 21 ] 
10:01:52: [ GetFileSize(0x21) , Command count = 22 ] 
10:01:52: [ GetCardStatus() , Command count = 23 ] 
10:01:52: [ GetFileSize(0x33) , Command count = 24 ] 
10:01:52: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x33, 0x1) , Command count = 25 ] 
10:01:52: [ GetFileSize(0x1F) , Command count = 26 ] 
10:01:52: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x1F, 0x1) , Command count = 27 ] 
10:01:52: [ GetFileSize(0x2A) , Command count = 28 ] 
10:01:52: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x2A, 0x1) , Command count = 29 ] 
10:01:52: [ ReadCfgConf(<0x1000/0x200, Spc, pat:0x0>, 0x1) , Command count = 30 ] 
10:01:52: [ ReadFirmwareParameter(<0x1000/0x200, Spc, pat:0x0>, 0x2) , Command count = 31 ] 
10:01:52: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_BE) , Command count = 32 ] 
10:01:52: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_PRODUCT) , Command count = 33 ] 
10:01:52: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_FE_SD) , Command count = 34 ] 
10:01:52: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, 0x0) , Command count = 35 ] 
10:01:52: [ GetFileSize(0x33) , Command count = 36 ] 
10:01:52: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 37 ] 
10:01:52: [ GetFileSize(0x33) , Command count = 38 ] 
10:01:52: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 39 ] 
10:01:53: [ GetIpVersionInfo() , Command count = 40 ] 
10:01:53: [ GetPhysicalChipsInfo() , Command count = 41 ] 
10:01:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x065920C0>, <0x200/0x200, Arb>) , Command count = 42 ] 
10:01:53: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 43 ] 

<<<<<<<<<<<<<<<         TEST HEADER          >>>>>>>>>>>>>>>

Application                :  TestRunner.py
Application version        :  SD_DVT_CQ_Spec 6.0.0
Application folder         :  C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT
Command line               :  --protocol=sd --sdtestid=RTHHCCallAll01 --dbconnection=none --adapter=SD05412_9ADT --sdConfiguration=SDR50 --projectconfig=C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB --paramsfile=C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB\Colibri_SD_HC_I059_SDR104_Prem_C10_U1.txt --logfilename=C:\Results\RTHHCCallAll01_CQ.txt --CQ=1
Protocol                   :  sd
Serial number (CInfo)      :  sdin1091
Adapter                    :  SDR Tester (S#: SD05412_9ADT): (Slot#:0)
Adapter serial number      :  SD05412_9ADT
Adapter type               :  USD
Capacity                   :  32G
Firmware revision          :  6RB C030
Flashware revision         :  6RB C030
IP Version Info            :  '' 01.04.00... ID 0x20
                           :  '' 00.01.00... ID 0x10
Memory ID                  :  453CA9A27A510B140000000000000000
Controller                 :  81
Trim settings              :  <Unavailable>
Model revision             :  <Unavailable>
Stream name                :  <Unavailable>
FE IP                      :  1
Romware revision           :  RRBZ1152
Architecture               :  Gen 6
Model                      :  SanDisk   COLIBRI
Memory type                :  Unknown Device Type-2LC x 1
ASIC id                    :  81
Controller type            :  Unknown Controller   UMC-J
Driver version (actual)    :  10.0.0.1 (0x a.0.0.1)
Driver version (released)  :  7.1.4.3 (0x 7.1.4.3)
Date and time              :  2016-11-29 10:01:53
Host name                  :  SDDVT_Test2
Host IP address            :  10.65.153.121
Operating system           :  Microsoft Windows [Version 6.1.7601] Service Pack 1
SanDisk Python version     :  1.17.5rc3
CTF/PySFCL build number    :  1.3.217491.217491
PySFCL version             :  1.3.217491
CTF version                :  1.3
Python version             :  2.4.2
Project Name(Validation)   :  <None>


<<<<<<<<<<<<<<<      SFCL CONFIGURATION      >>>>>>>>>>>>>>>

[SD enumeration]
cmdtiming=0
useRelay=0
autocompare=0
relayPolarity=1
relaySleep=500
measureCmdLatency=1
logicalChunkSize=0
diagDisabled=0
diagCmdTimeout=800
useVddf=on
nethostloglevel=
nethostautoCompare=on
CmdManShowProgress=off
nethostsendtimeout=240000
nethostreceivetimeout=240000
countOfRetryCmdIfCrc=3
enableOORPatch=
lbaForSctpCommands=0x100
subProtocol=0
doDle=0
diagnosticChunkSize=128
logmsgformat=timeMessage
logtimeformat=time
relaySlot=0
unloadDll=on
hardTimeoutUnloadDll=on
minDuration=7200
remoteDevice=
skipProduction=0
ishighspeedmode=0
highfreqinhz=500
modeldelaytimeindiagnostic=0
cqDataTransferPollingShortInterval=1000
cqDataStatusPollingLongInterval=1800000
sataPort0ToRelaySlot=0
sataPort1ToRelaySlot=0
sataPort2ToRelaySlot=0
sataPort3ToRelaySlot=0
relayToComportMapping=1
sdbToComportMapping=1
sataAdapterPort0=0
sataAdapterPort1=0
sataAdapterPort2=0
sataAdapterPort3=0
sataPort0ToMubIndx=1
sataPort1ToMubIndx=1
sataPort2ToMubIndx=1
sataPort3ToMubIndx=1

[Common]
enableChunkTraces=off
enablePythonTraceback=1
sctpPhaseDelay=0
printcommandcount=on
debugfilepath=
initXMLPath=\\regression.lab.sandisk.com\shared\configurations
delayBeforePwrCycle=0
delayAfterPwrCycle=0
reportCountStatistics=1
reportPackage=0
sfclConfig=Common

<<<<<<<<<<<<<<<          CARD INFO           >>>>>>>>>>>>>>>

Number Of LBAs  :  0x3b72400
Card Is Locked  :  No
Secure Area     :  0x28000
Card Secure     :  No
WP map          :

<<<<<<<<<<<<<<<           CID INFO           >>>>>>>>>>>>>>>

Manufacturer Id  :  0x3
Card/BGA         :  0
Application Id   :  0x5344
ProductName      :  AGGCD
ProductRev       :  0x80
SerialNumber     :  0x23482900
Reserved         :  0x23482900
Year             :  2000
Month            :  11
CRC Check Sum    :  0x5
Not Used         :

<<<<<<<<<<<<<<<           CSD INFO           >>>>>>>>>>>>>>>

CSD Structure                     :  0x1
reserv. 1                         :  0x0
TAAC                              :  0xe
NSAC*100                          :  0x0
data transfer rate                :  0x32
card command classes CCC          :  0x5b5
max. read data Blk. length        :  0x9
partial blocks for read allowed   :  0x0
write block misalignment          :  0x0
read block misalignment           :  0x0
DSR implemented                   :  0x0
reserved 2                        :  0x0
device size                       :  0xedc8
Reserv3                           :  0x0
SD Erase Blk Len En               :  0x1
SD Sec Size                       :  0x7f
write protect group size          :  0x0
write protect group enable        :  0x0
Reserv4                           :  0x0
write speed factor                :  0x2
max. write data blk. length       :  0x9
partial blocks for write allowed  :  0x0
File Format Group                 :  0x0
copy flag(OTP)                    :  0x1
permanent write protection        :  0x0
temporary write protection        :  0x0
File Format                       :  0x0
CRC                               :  0x0
<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

<<<<<<<<<<<<<<<    COMMAND LINE ARGUMENTS    >>>>>>>>>>>>>>>


Processed command-line options:
   --protocol                                       : sd
   --adapterspecifier                               : ain:-1,desc:SD05412_9ADT
   --extcmdset                                      : FBCC
   --sdtestid                                       : RTHHCCallAll01
   --sdconfiguration                                : SDR50
   --cyclecount                                     : 1
   --testduration                                   : 20h
   --writereadpercent                               : 100
   --paramsfile                                     : 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB\Colibri_SD_HC_I059_SDR104_Prem_C10_U1.txt'
   --randomseed                                     : 59930735508
   --projectconfig                                  : C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB
   --logfiledir                                     : C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\DvtTestLogs
   --hostlog                                        : 0
   --cq                                             : 1
   --dbconnection                                   : 'none'
   --temperature                                    : 25
   --voltage                                        : 0.00
   --logfilename                                    : 'C:\Results\RTHHCCallAll01_CQ.txt'
   --logtostdout                                    : Y
   --overwriteexistinglogfile                       : Y
   --logrotationspecifier                           : NoRotation
   --loglevel                                       : <4, INFO>
   --testcomment                                    : None
   --dbproject                                      : CTFW_QA
   --mdfwprojectid                                  : None
   --mdconfigid                                     : None
   --mdtestid                                       : None
   --valid                                          : True
   --waitTime                                       : None
   --jitter                                         : F
   --testlimits                                     : <None>-<None>
   --LabID                                          : None
   --DutID                                          : None
   --LaunchId                                       : None
   --TestQueueId                                    : None
   --xfermode                                       : <N>
   --networkperiod                                  : <N>
   --networkpath                                    : <N>
   --dumpfile                                       : 
   --printcommandcount                              : N
   --debugfilepath                                  : <N>
   --chpfilename                                    : <N>
   --enablecmdhistory                               : Y
   --cmdhistextfilename                             : <N>
   --cmdhistcsvfilename                             : <N>
   --histdisplaysizes                               : 0,250
   --stoponcommands                                 : <N>
   --notifyemailid                                  : <N>
   --spyoncommands                                  : <N>
   --notifyoncommands                               : <N>
   --CmdManShowProgress                             : 'off'
   --enablePowerCycle                               : '1'
   --measureCmdLatency                              : '1'
   --useVddf                                        : 'on'
   --gvi                                            : 'off'
   --gviOnFly                                       : 'off'
   --gviEncryption                                  : '0'
   --remoteDevice                                   : ''
   --skipProduction                                 : '0'
   --forceMultipleMode                              : 'off'
   --countOfRetryCmdIfCrc                           : '3'
   --enableOORPatch                                 : 'on'
   --connectonly                                    : 'off'
   --nethostautocompare                             : 'on'
   --nethostpowercycle                              : '0'
   --nethostloglevel                                : '3'
   --nethostlogconsole                              : '0'
   --nethostsanitychecks                            : '0'
   --nethostsendtimeout                             : '240000'
   --nethostreceivetimeout                          : '240000'
   --subProtocol                                    : '0'
   --useVccq                                        : '3.3'
   --maxprotocoloverhead                            : '0'
   --maxprotocoltimingmode                          : '0'
   --isHighSpeedMode                                : '0'
   --highFreqInHz                                   : '500'
   --doDle                                          : '0'
   --lbaForSctpCommands                             : '0x100'
   --cmdfilename                                    : ''
   --cmdtofilewrites                                : '0'
   --cmdtiming                                      : '0'
   --cmdtocsv                                       : '0'
   --logicalChunkSize                               : '0'
   --diagnosticChunkSize                            : '128'
   --readChunkSize                                  : '0'
   --writeChunkSize                                 : '0'
   --useRelay                                       : '0'
   --sataPort0ToRelaySlot                           : '0'
   --sataPort1ToRelaySlot                           : '0'
   --sataPort2ToRelaySlot                           : '0'
   --sataPort3ToRelaySlot                           : '0'
   --relayToComportMapping                          : '1'
   --useSDB                                         : '0'
   --sdbToComportMapping                            : '1'
   --sataAdapterPort0                               : '0'
   --sataAdapterPort1                               : '0'
   --sataAdapterPort2                               : '0'
   --sataAdapterPort3                               : '0'
   --relayPolarity                                  : '1'
   --relaySleep                                     : '500'
   --diagCmdTimeout                                 : '800'
   --diagDisabled                                   : '0'
   --hardTimeout                                    : '30000'
   --commandscriptfolder                            : ''
   --commandscriptstart                             : '0'
   --logmsgformat                                   : 'timeMessage'
   --logtimeformat                                  : 'time'
   --relaySlot                                      : '0'
   --atbuRelaySlot                                  : '3'
   --diskCacheStore                                 : ''
   --stopOnStart                                    : '0'
   --notifyserver                                   : ''
   --notifyretry                                    : '2'
   --notifytimeout                                  : '60'
   --failonnotifytimeout                            : '0'
   --revertactions                                  : ''
   --timechangedetection                            : '0'
   --timechangecondition                            : '600'
   --timechangecheckinterval                        : '1000'
   --inputmonitor                                   : '1'
   --logtimeprecision                               : '2'
   --nonSndkDevEnumeration                          : '0'
   --modelini                                       : 'C:\Program Files\SanDisk\CTF\Dlls\model.ini'
   --sfclini                                        : 'C:\Program Files\SanDisk\CTF\Dlls\sfcl.ini'
   --relayForceDownload                             : 'off'
   --powercycleoninit                               : 'off'
   --stopBgOperationOnFail                          : 'off'
   --autocompare                                    : '0'
   --autocompareRandomseed                          : '12345678'
   --modeldelaytimeindiagnostic                     : '0'
   --ForceDownloadMechanism                         : '0'
   --EnableUARTDebugLog                             : '0'
   --UARTBaudRate                                   : '230400'
   --SerialUARTToCom                                : '0'
   --UARTDebugFilePath                              : ''
   --sataPort0ToMubIndx                             : '1'
   --sataPort1ToMubIndx                             : '1'
   --sataPort2ToMubIndx                             : '1'
   --sataPort3ToMubIndx                             : '1'
   --fclStep                                        : '0'
   --fclCollectReads                                : '0'
   --fclCollectWrites                               : '0'
   --fclCollectErases                               : '0'
   --fclCollectAOMReads                             : '0'
   --fclAomBase                                     : '10'
   --aomStep                                        : '0'
   --aomMapFile                                     : '0'
   --fclAomSaveFilesStep                            : '1000'
   --gfa                                            : '0'
   --atbuSoftwareLocation                           : ''
   --atbuMemoryName                                 : ''
   --atbuProfilesLocation                           : ''
   --atbuThresholdValue                             : '0'
   --atbuTransitionTime                             : '0'
   --atbuDcCompensation                             : ''


<<<<<<<<<<<<<<< RUNNING TEST: RTHHCCallAll01_CallAllReset_1 >>>>>>>>>>>>>>>



10:01:53: [RTHHCCallAll01_CallAllReset_1.py]###### Test to run callAllReset_2
10:01:53: [RTHHCCallAll01_CallAllReset_1]### TEST SCRIPT IS STARTED.
10:01:53: [RT2HCSD02_CallAllHighCapacityCardOverHighCapacityHostInSDMode.py] ##########
10:01:53: MaxLba of the card: 0x3B72400 
10:01:55: [GO7_globalPreTestingSettings]### Default Initialization Start
10:01:55: [DVTCommonLib]###  SwitchHostVoltageRegion called
10:01:55: [ SwitchHostVoltageRegion(False) , Command count = 44 ] 
10:01:55: [DVTCommonLib]###  SwitchHostVoltageRegion Completed 

10:01:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 45 ] 
10:01:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 46 ] 
10:01:57: [ CardInit() , Command count = 47 ] 
10:01:57: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 48 ] 

<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

10:01:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:01:57: ####CSD Registe 2.0 Values####
10:01:57: CSD_STRUCTURE                                 :0x1
10:01:57: Reserv1                                       :0x0
10:01:57: Time Access 1 TAAC                            :0xe
10:01:57: Time Access 2 NSAC*100                        :0x0
10:01:57: Data Transfer Rate TRAN_SPEED                 :0x32
10:01:57: Card Command Classess CCC                     :0x5b5
10:01:57: Max Read Data Block Length  READ_BL_LEN       :0x9
10:01:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:01:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:01:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:01:57: DSR(driver stage register)  DSR_IMP           :0x0
10:01:57: Reserv2                                       :0x0
10:01:57: Device Size C_SIZE                            :0xedc8
10:01:57: Reserv3                                       :0x0
10:01:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:01:57: Erase Sector Size SECTOR_SIZE                 :0x7f
10:01:57: Write Protect Group Size WP_GRP_SIZE          :0x0
10:01:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:01:57: Reserv4                                       :0x0
10:01:57: Write Speed Factor R2W_FACTOR                 :0x2
10:01:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:01:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:01:57: FILE_FORMAT_GRP                               :0x0
10:01:57: COPY flag                                     :0x1
10:01:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:01:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:01:57: File_Format                                   :0x0
10:01:57: CRC                                           :0x0
10:01:57: ####CSD Registe Values####  

10:01:57: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:01:57: ProductSerialNumber = 0x23482900
10:01:57: CardMaximumLBA      = 0x3b72400
10:01:57: CardCapacity        = 32G
10:01:57: Is card secure      = 0
10:01:57: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:01:57: [GO7_globalPreTestingSettings]### Default Initialization Completed 


10:01:57: Stated Running SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode RT2HCSD02_CallAllHighCapacityCardOverHighCapacityHostInSDMode Scripts 

10:01:57: ########################################
10:01:57: Stated Running script RT2HCSD09_1_1_1_1 
10:01:57: ########################################
10:01:57: [RT2HCSD09_1_1_1_1]###### Set Card Time Out values test. 
10:02:04: FPGA Image Downloaded Is:C:\Program Files\SanDisk\CTF\FPGA\SD_CQ_SDR2_2-20-00-0002.bin
10:02:04: [GO4_globalInitCard]### Switch to Specify Card Type
10:02:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:02:06: Host Frequency set to 25000 KHz
10:02:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:02:06: [GO18_globalSetVolt]### Set Host Voltage value.
10:02:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
10:02:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x0662DE40>, 0x0, True) , Command count = 49 ] 
10:02:06: [GO18_globalSetVolt]### Host voltage value is set.
10:02:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
10:02:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x0662DCF0>, 0x0, False) , Command count = 50 ] 
10:02:06: [GO18_globalSetVolt]### Host voltage value is set.
10:02:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 51 ] 
10:02:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:02:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 52 ] 
10:02:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:02:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:02:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:02:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:02:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
10:02:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 53 ] 
10:02:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
10:02:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:02:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DDE0>, <py_sfcl.CommandDataDefinition object at 0x0662DF60>) , Command count = 54 ] 
10:02:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:02:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DF30>, <py_sfcl.CommandDataDefinition object at 0x0662DFC0>) , Command count = 55 ] 
10:02:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
10:02:06: [ SetCardRCA(0x1, 0xD555) , Command count = 56 ] 
10:02:06: [DVTCommonLib]### Identification :Idenfication of card completed 

10:02:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:02:06: Host Frequency set to 25000 KHz
10:02:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:02:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:02:06: ####CSD Registe 2.0 Values####
10:02:06: CSD_STRUCTURE                                 :0x1
10:02:06: Reserv1                                       :0x0
10:02:06: Time Access 1 TAAC                            :0xe
10:02:06: Time Access 2 NSAC*100                        :0x0
10:02:06: Data Transfer Rate TRAN_SPEED                 :0x32
10:02:06: Card Command Classess CCC                     :0x5b5
10:02:06: Max Read Data Block Length  READ_BL_LEN       :0x9
10:02:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:02:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:02:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:02:06: DSR(driver stage register)  DSR_IMP           :0x0
10:02:06: Reserv2                                       :0x0
10:02:06: Device Size C_SIZE                            :0xedc8
10:02:06: Reserv3                                       :0x0
10:02:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:02:06: Erase Sector Size SECTOR_SIZE                 :0x7f
10:02:06: Write Protect Group Size WP_GRP_SIZE          :0x0
10:02:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:02:06: Reserv4                                       :0x0
10:02:06: Write Speed Factor R2W_FACTOR                 :0x2
10:02:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:02:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:02:06: FILE_FORMAT_GRP                               :0x0
10:02:06: COPY flag                                     :0x1
10:02:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:02:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:02:06: File_Format                                   :0x0
10:02:06: CRC                                           :0x0
10:02:06: ####CSD Registe Values####  

10:02:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
10:02:07: [GetSCRRegisterEntry] Passed
10:02:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
10:02:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
10:02:07: Data_Status_After Erases          : 0
10:02:07: CPRM Security Support             : No Security
10:02:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
10:02:07: Spec. Version                     : Version 3.0X
10:02:07: Extended Security Support         : Extended_Security_Not_Supported
10:02:07: Command Support                   : COMMAND_SUPPORT
10:02:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

10:02:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662D690>, <py_sfcl.CommandDataDefinition object at 0x0662D330>) , Command count = 57 ] 
10:02:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
10:02:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A0F0>, <py_sfcl.CommandDataDefinition object at 0x0663A120>) , Command count = 58 ] 
10:02:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
10:02:07: [ SetBusWidth(0x4) , Command count = 59 ] 
10:02:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
10:02:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0663A240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 60 ] 
10:02:07: Protected Area Size 0x28000
10:02:07: Bus Width           2
10:02:07: Secure Mode         0
10:02:07: Speed  Class        4
10:02:07: Perf Move           0
10:02:07: Au Size             9
10:02:07: Erase Size          15
10:02:07: Erase Timeout       1
10:02:07: Erase offset        1
10:02:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

10:02:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
10:02:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
10:02:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 61 ] 
10:02:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
10:02:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

10:02:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
10:02:07: Host Frequency set to 100000 KHz
10:02:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
10:02:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:02:07: ####CSD Registe 2.0 Values####
10:02:07: CSD_STRUCTURE                                 :0x1
10:02:07: Reserv1                                       :0x0
10:02:07: Time Access 1 TAAC                            :0xe
10:02:07: Time Access 2 NSAC*100                        :0x0
10:02:07: Data Transfer Rate TRAN_SPEED                 :0xb
10:02:07: Card Command Classess CCC                     :0x5b5
10:02:07: Max Read Data Block Length  READ_BL_LEN       :0x9
10:02:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:02:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:02:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:02:07: DSR(driver stage register)  DSR_IMP           :0x0
10:02:07: Reserv2                                       :0x0
10:02:07: Device Size C_SIZE                            :0xedc8
10:02:07: Reserv3                                       :0x0
10:02:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:02:07: Erase Sector Size SECTOR_SIZE                 :0x7f
10:02:07: Write Protect Group Size WP_GRP_SIZE          :0x0
10:02:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:02:07: Reserv4                                       :0x0
10:02:07: Write Speed Factor R2W_FACTOR                 :0x2
10:02:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:02:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:02:07: FILE_FORMAT_GRP                               :0x0
10:02:07: COPY flag                                     :0x1
10:02:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:02:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:02:07: File_Format                                   :0x0
10:02:07: CRC                                           :0x0
10:02:07: ####CSD Registe Values####  

10:02:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A630>, <py_sfcl.CommandDataDefinition object at 0x0663A450>) , Command count = 62 ] 
10:02:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
10:02:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A4B0>, <py_sfcl.CommandDataDefinition object at 0x0663A4E0>) , Command count = 63 ] 
10:02:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
10:02:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
10:02:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0663A570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 64 ] 
10:02:07: Protected Area Size 0x28000
10:02:07: Bus Width           2
10:02:07: Secure Mode         0
10:02:07: Speed  Class        4
10:02:07: Perf Move           0
10:02:07: Au Size             9
10:02:07: Erase Size          15
10:02:07: Erase Timeout       1
10:02:07: Erase offset        1
10:02:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

10:02:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


10:02:07: [RT2HCSD09_1_1_1_1.py]CALL : globalSetTO
10:02:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 65 ] 
10:02:07: [RT2HCSD09_1_1_1_1.py]CALL : globalSetVolt
10:02:07: [GO18_globalSetVolt]### Set Host Voltage value.
10:02:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
10:02:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x0663A600>, 0x0, True) , Command count = 66 ] 
10:02:07: [GO18_globalSetVolt]### Host voltage value is set.
10:02:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
10:02:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x0663A660>, 0x0, False) , Command count = 67 ] 
10:02:07: [GO18_globalSetVolt]### Host voltage value is set.
10:02:07: [RT2HCSD09_1_1_1_1.py]CALL : globalSetLSHostFreq
10:02:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:02:07: Host Frequency set to 25000 KHz
10:02:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:02:07: [RT2HCSD09_1_1_1_1]*********Soft Reset*********
10:02:07: [RT2HCSD09_1_1_1_1]RESET card and IDENTIFICATION of the card 

10:02:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:02:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 68 ] 
10:02:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
10:02:07: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:02:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:02:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:02:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:02:07: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
10:02:07: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD09_1_1_1_1' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD09_1_1_1_1.pyc'> with error 
TestFailedError:                                   
   [RT2HCSD09_1_1_1_1] Compare error on card response
 
10:02:07: ########################################
10:02:07: ########################################
10:02:07: Stated Running script RT2HCSD24_1_1_1_2 
10:02:07: ########################################
10:02:07: [RT2HCSD24_1_1_1_2.py]###### Set Card Time Out values test. 
10:02:07: [GO4_globalInitCard]### Switch to Specify Card Type
10:02:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:02:09: Host Frequency set to 25000 KHz
10:02:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:02:09: [GO18_globalSetVolt]### Set Host Voltage value.
10:02:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
10:02:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x0663AED0>, 0x0, True) , Command count = 69 ] 
10:02:09: [GO18_globalSetVolt]### Host voltage value is set.
10:02:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
10:02:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x0663ADB0>, 0x0, False) , Command count = 70 ] 
10:02:09: [GO18_globalSetVolt]### Host voltage value is set.
10:02:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 71 ] 
10:02:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:02:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 72 ] 
10:02:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:02:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:02:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:02:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:02:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
10:02:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 73 ] 
10:02:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
10:02:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:02:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AE70>, <py_sfcl.CommandDataDefinition object at 0x0663AF60>) , Command count = 74 ] 
10:02:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:02:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AD50>, <py_sfcl.CommandDataDefinition object at 0x0663ACC0>) , Command count = 75 ] 
10:02:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
10:02:09: [ SetCardRCA(0x1, 0xD555) , Command count = 76 ] 
10:02:09: [DVTCommonLib]### Identification :Idenfication of card completed 

10:02:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:02:10: Host Frequency set to 25000 KHz
10:02:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:02:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:02:10: ####CSD Registe 2.0 Values####
10:02:10: CSD_STRUCTURE                                 :0x1
10:02:10: Reserv1                                       :0x0
10:02:10: Time Access 1 TAAC                            :0xe
10:02:10: Time Access 2 NSAC*100                        :0x0
10:02:10: Data Transfer Rate TRAN_SPEED                 :0x32
10:02:10: Card Command Classess CCC                     :0x5b5
10:02:10: Max Read Data Block Length  READ_BL_LEN       :0x9
10:02:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:02:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:02:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:02:10: DSR(driver stage register)  DSR_IMP           :0x0
10:02:10: Reserv2                                       :0x0
10:02:10: Device Size C_SIZE                            :0xedc8
10:02:10: Reserv3                                       :0x0
10:02:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:02:10: Erase Sector Size SECTOR_SIZE                 :0x7f
10:02:10: Write Protect Group Size WP_GRP_SIZE          :0x0
10:02:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:02:10: Reserv4                                       :0x0
10:02:10: Write Speed Factor R2W_FACTOR                 :0x2
10:02:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:02:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:02:10: FILE_FORMAT_GRP                               :0x0
10:02:10: COPY flag                                     :0x1
10:02:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:02:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:02:10: File_Format                                   :0x0
10:02:10: CRC                                           :0x0
10:02:10: ####CSD Registe Values####  

10:02:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
10:02:10: [GetSCRRegisterEntry] Passed
10:02:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
10:02:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
10:02:10: Data_Status_After Erases          : 0
10:02:10: CPRM Security Support             : No Security
10:02:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
10:02:10: Spec. Version                     : Version 3.0X
10:02:10: Extended Security Support         : Extended_Security_Not_Supported
10:02:10: Command Support                   : COMMAND_SUPPORT
10:02:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

10:02:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AE10>, <py_sfcl.CommandDataDefinition object at 0x0663AFC0>) , Command count = 77 ] 
10:02:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
10:02:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E030>, <py_sfcl.CommandDataDefinition object at 0x0663E060>) , Command count = 78 ] 
10:02:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
10:02:10: [ SetBusWidth(0x4) , Command count = 79 ] 
10:02:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
10:02:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0663E120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 80 ] 
10:02:10: Protected Area Size 0x28000
10:02:10: Bus Width           2
10:02:10: Secure Mode         0
10:02:10: Speed  Class        4
10:02:10: Perf Move           0
10:02:10: Au Size             9
10:02:10: Erase Size          15
10:02:10: Erase Timeout       1
10:02:10: Erase offset        1
10:02:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

10:02:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
10:02:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
10:02:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 81 ] 
10:02:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
10:02:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

10:02:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
10:02:10: Host Frequency set to 100000 KHz
10:02:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
10:02:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:02:10: ####CSD Registe 2.0 Values####
10:02:10: CSD_STRUCTURE                                 :0x1
10:02:10: Reserv1                                       :0x0
10:02:10: Time Access 1 TAAC                            :0xe
10:02:10: Time Access 2 NSAC*100                        :0x0
10:02:10: Data Transfer Rate TRAN_SPEED                 :0xb
10:02:10: Card Command Classess CCC                     :0x5b5
10:02:10: Max Read Data Block Length  READ_BL_LEN       :0x9
10:02:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:02:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:02:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:02:10: DSR(driver stage register)  DSR_IMP           :0x0
10:02:10: Reserv2                                       :0x0
10:02:10: Device Size C_SIZE                            :0xedc8
10:02:10: Reserv3                                       :0x0
10:02:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:02:10: Erase Sector Size SECTOR_SIZE                 :0x7f
10:02:10: Write Protect Group Size WP_GRP_SIZE          :0x0
10:02:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:02:10: Reserv4                                       :0x0
10:02:10: Write Speed Factor R2W_FACTOR                 :0x2
10:02:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:02:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:02:10: FILE_FORMAT_GRP                               :0x0
10:02:10: COPY flag                                     :0x1
10:02:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:02:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:02:10: File_Format                                   :0x0
10:02:10: CRC                                           :0x0
10:02:10: ####CSD Registe Values####  

10:02:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E390>, <py_sfcl.CommandDataDefinition object at 0x0663E180>) , Command count = 82 ] 
10:02:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
10:02:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E210>, <py_sfcl.CommandDataDefinition object at 0x0663E240>) , Command count = 83 ] 
10:02:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
10:02:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


10:02:10: [RT2HCSD24_1_1_1_2.py]CALL : globalSetTO
10:02:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 84 ] 
10:02:10: [RT2HCSD24_1_1_1_2.py]CALL : globalSetVolt
10:02:10: [GO18_globalSetVolt]### Set Host Voltage value.
10:02:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
10:02:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0663E300>, 0x0, True) , Command count = 85 ] 
10:02:10: [GO18_globalSetVolt]### Host voltage value is set.
10:02:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
10:02:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0663E330>, 0x0, False) , Command count = 86 ] 
10:02:10: [GO18_globalSetVolt]### Host voltage value is set.
10:02:10: [RT2HCSD24_1_1_1_2.py]CALL : globalSetResetFreq
10:02:10: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
10:02:10: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
10:02:10: [RT2HCSD24_1_1_1_2.py]***Test Sequential of CMD 8' s during Soft Reset***
10:02:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E3C0>, <py_sfcl.CommandDataDefinition object at 0x0663E3F0>) , Command count = 87 ] 
10:02:10: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
10:02:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E450>, <py_sfcl.CommandDataDefinition object at 0x0663E480>) , Command count = 88 ] 
10:02:10: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 170, 66]
10:02:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E4E0>, <py_sfcl.CommandDataDefinition object at 0x0663E510>) , Command count = 89 ] 
10:02:10: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 170, 66]
10:02:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E570>, <py_sfcl.CommandDataDefinition object at 0x0663E5A0>) , Command count = 90 ] 
10:02:10: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 170, 66]
10:02:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E600>, <py_sfcl.CommandDataDefinition object at 0x0663E630>) , Command count = 91 ] 
10:02:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E690>, <py_sfcl.CommandDataDefinition object at 0x0663E6C0>) , Command count = 92 ] 
10:02:10: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 65, 255, 128, 0, 255]
10:02:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E720>, <py_sfcl.CommandDataDefinition object at 0x0663E750>) , Command count = 93 ] 
10:02:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E7B0>, <py_sfcl.CommandDataDefinition object at 0x0663E7E0>) , Command count = 94 ] 
10:02:10: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 64, 255, 128, 0, 255]
10:02:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E840>, <py_sfcl.CommandDataDefinition object at 0x0663E870>) , Command count = 95 ] 
10:02:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E8D0>, <py_sfcl.CommandDataDefinition object at 0x0663E900>) , Command count = 96 ] 
10:02:10: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 192, 255, 128, 0, 255]
10:02:10: [ SetCardCap(True) , Command count = 97 ] 
10:02:10: [ SetSdMmcCardMode(0x2, True) , Command count = 98 ] 
10:02:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:02:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663EA80>, <py_sfcl.CommandDataDefinition object at 0x0663EAB0>) , Command count = 99 ] 
10:02:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:02:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663EB10>, <py_sfcl.CommandDataDefinition object at 0x0663EB40>) , Command count = 100 ] 
10:02:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:02:10: [ SetCardRCA(0x1, 0xD555) , Command count = 101 ] 
10:02:10: [DVTCommonLib]### Identification :Idenfication of card completed 

10:02:10: [RT2HCSD24_1_1_1_2.py]CALL : globalSetLSHostFreq
10:02:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:02:10: Host Frequency set to 25000 KHz
10:02:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:02:10: [RT2HCSD24_1_1_1_2.py]CALL : AddressForWriteRead
10:02:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:02:10: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:02:10: [ SetBusWidth(0x1) , Command count = 102 ] 
10:02:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:02:10: ####CSD Registe 2.0 Values####
10:02:10: CSD_STRUCTURE                                 :0x1
10:02:10: Reserv1                                       :0x0
10:02:10: Time Access 1 TAAC                            :0xe
10:02:10: Time Access 2 NSAC*100                        :0x0
10:02:10: Data Transfer Rate TRAN_SPEED                 :0x32
10:02:10: Card Command Classess CCC                     :0x5b5
10:02:10: Max Read Data Block Length  READ_BL_LEN       :0x9
10:02:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:02:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:02:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:02:10: DSR(driver stage register)  DSR_IMP           :0x0
10:02:10: Reserv2                                       :0x0
10:02:10: Device Size C_SIZE                            :0xedc8
10:02:10: Reserv3                                       :0x0
10:02:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:02:10: Erase Sector Size SECTOR_SIZE                 :0x7f
10:02:10: Write Protect Group Size WP_GRP_SIZE          :0x0
10:02:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:02:10: Reserv4                                       :0x0
10:02:10: Write Speed Factor R2W_FACTOR                 :0x2
10:02:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:02:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:02:10: FILE_FORMAT_GRP                               :0x0
10:02:10: COPY flag                                     :0x1
10:02:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:02:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:02:10: File_Format                                   :0x0
10:02:10: CRC                                           :0x0
10:02:10: ####CSD Registe Values####  

10:02:10: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:02:10: ProductSerialNumber = 0x23482900
10:02:10: CardMaximumLBA      = 0x3b72400
10:02:10: CardCapacity        = 32G
10:02:10: Is card secure      = 0
10:02:10: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:02:10: [DVTCommonLib]###  LogicalWrite called
10:02:12: [ WriteLba(0x149E39B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 103 ] 
10:02:12: [DVTCommonLib]###  LogicalWrite Completed 

10:02:12: [DVTCommonLib]###  LogicalRead called
10:02:13: [ ReadLba(0x149E39B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 104 ] 
10:02:13: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:02:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:02:13: [RT2HCSD24_1_1_1_2.py]***Test Sequential of CMD 8' s during Power Cycle Reset***
10:02:13: [RT2HCSD24_1_1_1_2.py]POWER : OFF and ON
10:02:15: [RT2HCSD24_1_1_1_2.py]CALL : globalSetResetFreq
10:02:15: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
10:02:15: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B0F0>, <py_sfcl.CommandDataDefinition object at 0x0669B120>) , Command count = 105 ] 
10:02:15: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 170, 66]
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B1B0>, <py_sfcl.CommandDataDefinition object at 0x0669B1E0>) , Command count = 106 ] 
10:02:15: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 170, 66]
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B240>, <py_sfcl.CommandDataDefinition object at 0x0669B270>) , Command count = 107 ] 
10:02:15: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 170, 66]
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B2D0>, <py_sfcl.CommandDataDefinition object at 0x0669B300>) , Command count = 108 ] 
10:02:15: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 170, 66]
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B360>, <py_sfcl.CommandDataDefinition object at 0x0669B390>) , Command count = 109 ] 
10:02:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B3F0>, <py_sfcl.CommandDataDefinition object at 0x0669B420>) , Command count = 110 ] 
10:02:15: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B480>, <py_sfcl.CommandDataDefinition object at 0x0669B4B0>) , Command count = 111 ] 
10:02:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B510>, <py_sfcl.CommandDataDefinition object at 0x0669B540>) , Command count = 112 ] 
10:02:15: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B5A0>, <py_sfcl.CommandDataDefinition object at 0x0669B5D0>) , Command count = 113 ] 
10:02:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B630>, <py_sfcl.CommandDataDefinition object at 0x0669B660>) , Command count = 114 ] 
10:02:15: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B6C0>, <py_sfcl.CommandDataDefinition object at 0x0669B6F0>) , Command count = 115 ] 
10:02:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B750>, <py_sfcl.CommandDataDefinition object at 0x0669B780>) , Command count = 116 ] 
10:02:15: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B7E0>, <py_sfcl.CommandDataDefinition object at 0x0669B810>) , Command count = 117 ] 
10:02:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B870>, <py_sfcl.CommandDataDefinition object at 0x0669B8A0>) , Command count = 118 ] 
10:02:15: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B900>, <py_sfcl.CommandDataDefinition object at 0x0669B930>) , Command count = 119 ] 
10:02:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B990>, <py_sfcl.CommandDataDefinition object at 0x0669B9C0>) , Command count = 120 ] 
10:02:15: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669BA20>, <py_sfcl.CommandDataDefinition object at 0x0669BA50>) , Command count = 121 ] 
10:02:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669BAB0>, <py_sfcl.CommandDataDefinition object at 0x0669BAE0>) , Command count = 122 ] 
10:02:15: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663EED0>, <py_sfcl.CommandDataDefinition object at 0x0663EF60>) , Command count = 123 ] 
10:02:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669BB40>, <py_sfcl.CommandDataDefinition object at 0x0669BB70>) , Command count = 124 ] 
10:02:15: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669BBD0>, <py_sfcl.CommandDataDefinition object at 0x0669BC00>) , Command count = 125 ] 
10:02:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669BC60>, <py_sfcl.CommandDataDefinition object at 0x0669BC90>) , Command count = 126 ] 
10:02:15: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669BCF0>, <py_sfcl.CommandDataDefinition object at 0x0669BD20>) , Command count = 127 ] 
10:02:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669BD80>, <py_sfcl.CommandDataDefinition object at 0x0669BDB0>) , Command count = 128 ] 
10:02:15: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669BE10>, <py_sfcl.CommandDataDefinition object at 0x0669BE40>) , Command count = 129 ] 
10:02:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669BEA0>, <py_sfcl.CommandDataDefinition object at 0x0669BED0>) , Command count = 130 ] 
10:02:16: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669BF30>, <py_sfcl.CommandDataDefinition object at 0x0669BF60>) , Command count = 131 ] 
10:02:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669BFC0>, <py_sfcl.CommandDataDefinition object at 0x066A0030>) , Command count = 132 ] 
10:02:16: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0090>, <py_sfcl.CommandDataDefinition object at 0x066A00C0>) , Command count = 133 ] 
10:02:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0120>, <py_sfcl.CommandDataDefinition object at 0x066A0150>) , Command count = 134 ] 
10:02:16: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A01B0>, <py_sfcl.CommandDataDefinition object at 0x066A01E0>) , Command count = 135 ] 
10:02:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0240>, <py_sfcl.CommandDataDefinition object at 0x066A0270>) , Command count = 136 ] 
10:02:16: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A02D0>, <py_sfcl.CommandDataDefinition object at 0x066A0300>) , Command count = 137 ] 
10:02:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0360>, <py_sfcl.CommandDataDefinition object at 0x066A0390>) , Command count = 138 ] 
10:02:16: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A03F0>, <py_sfcl.CommandDataDefinition object at 0x066A0420>) , Command count = 139 ] 
10:02:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0480>, <py_sfcl.CommandDataDefinition object at 0x066A04B0>) , Command count = 140 ] 
10:02:16: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
10:02:16: [ SetCardCap(True) , Command count = 141 ] 
10:02:16: [ SetSdMmcCardMode(0x2, True) , Command count = 142 ] 
10:02:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:02:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0570>, <py_sfcl.CommandDataDefinition object at 0x066A05A0>) , Command count = 143 ] 
10:02:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:02:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0600>, <py_sfcl.CommandDataDefinition object at 0x066A0630>) , Command count = 144 ] 
10:02:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:02:16: [ SetCardRCA(0x1, 0xD555) , Command count = 145 ] 
10:02:16: [DVTCommonLib]### Identification :Idenfication of card completed 

10:02:16: [RT2HCSD24_1_1_1_2.py]CALL : globalSetLSHostFreq
10:02:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:02:16: Host Frequency set to 25000 KHz
10:02:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:02:16: [RT2HCSD24_1_1_1_2.py]CALL : AddressForWriteRead
10:02:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:02:16: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:02:16: [ SetBusWidth(0x1) , Command count = 146 ] 
10:02:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:02:16: ####CSD Registe 2.0 Values####
10:02:16: CSD_STRUCTURE                                 :0x1
10:02:16: Reserv1                                       :0x0
10:02:16: Time Access 1 TAAC                            :0xe
10:02:16: Time Access 2 NSAC*100                        :0x0
10:02:16: Data Transfer Rate TRAN_SPEED                 :0x32
10:02:16: Card Command Classess CCC                     :0x5b5
10:02:16: Max Read Data Block Length  READ_BL_LEN       :0x9
10:02:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:02:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:02:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:02:16: DSR(driver stage register)  DSR_IMP           :0x0
10:02:16: Reserv2                                       :0x0
10:02:16: Device Size C_SIZE                            :0xedc8
10:02:16: Reserv3                                       :0x0
10:02:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:02:16: Erase Sector Size SECTOR_SIZE                 :0x7f
10:02:16: Write Protect Group Size WP_GRP_SIZE          :0x0
10:02:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:02:16: Reserv4                                       :0x0
10:02:16: Write Speed Factor R2W_FACTOR                 :0x2
10:02:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:02:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:02:16: FILE_FORMAT_GRP                               :0x0
10:02:16: COPY flag                                     :0x1
10:02:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:02:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:02:16: File_Format                                   :0x0
10:02:16: CRC                                           :0x0
10:02:16: ####CSD Registe Values####  

10:02:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:02:16: ProductSerialNumber = 0x23482900
10:02:16: CardMaximumLBA      = 0x3b72400
10:02:16: CardCapacity        = 32G
10:02:16: Is card secure      = 0
10:02:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:02:16: [DVTCommonLib]###  LogicalWrite called
10:02:17: [ WriteLba(0x101F8E7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 147 ] 
10:02:17: [DVTCommonLib]###  LogicalWrite Completed 

10:02:17: [DVTCommonLib]###  LogicalRead called
10:02:19: [ ReadLba(0x101F8E7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 148 ] 
10:02:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:02:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:02:19: ***Test Sequential of CMD 8' s during Power Cycle & CMD 0 Reset***
10:02:19: [RT2HCSD24_1_1_1_2.py]POWER : OFF and ON
10:02:21: [RT2HCSD24_1_1_1_2.py]CALL : globalSetResetFreq
10:02:21: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
10:02:21: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0750>, <py_sfcl.CommandDataDefinition object at 0x066A07B0>) , Command count = 149 ] 
10:02:21: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0810>, <py_sfcl.CommandDataDefinition object at 0x066A0840>) , Command count = 150 ] 
10:02:21: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 170, 66]
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A08D0>, <py_sfcl.CommandDataDefinition object at 0x066A0900>) , Command count = 151 ] 
10:02:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0960>, <py_sfcl.CommandDataDefinition object at 0x066A0990>) , Command count = 152 ] 
10:02:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A09F0>, <py_sfcl.CommandDataDefinition object at 0x066A0A20>) , Command count = 153 ] 
10:02:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0A80>, <py_sfcl.CommandDataDefinition object at 0x066A0AB0>) , Command count = 154 ] 
10:02:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0B10>, <py_sfcl.CommandDataDefinition object at 0x066A0B40>) , Command count = 155 ] 
10:02:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0BA0>, <py_sfcl.CommandDataDefinition object at 0x066A0BD0>) , Command count = 156 ] 
10:02:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0C30>, <py_sfcl.CommandDataDefinition object at 0x066A0C60>) , Command count = 157 ] 
10:02:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0CC0>, <py_sfcl.CommandDataDefinition object at 0x066A0CF0>) , Command count = 158 ] 
10:02:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0D50>, <py_sfcl.CommandDataDefinition object at 0x066A0D80>) , Command count = 159 ] 
10:02:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0DE0>, <py_sfcl.CommandDataDefinition object at 0x066A0E10>) , Command count = 160 ] 
10:02:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0E70>, <py_sfcl.CommandDataDefinition object at 0x066A0EA0>) , Command count = 161 ] 
10:02:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0F00>, <py_sfcl.CommandDataDefinition object at 0x066A0F30>) , Command count = 162 ] 
10:02:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0F90>, <py_sfcl.CommandDataDefinition object at 0x066A0FC0>) , Command count = 163 ] 
10:02:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A4060>, <py_sfcl.CommandDataDefinition object at 0x066A4090>) , Command count = 164 ] 
10:02:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A40F0>, <py_sfcl.CommandDataDefinition object at 0x066A4120>) , Command count = 165 ] 
10:02:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A4180>, <py_sfcl.CommandDataDefinition object at 0x066A41B0>) , Command count = 166 ] 
10:02:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A4210>, <py_sfcl.CommandDataDefinition object at 0x066A4240>) , Command count = 167 ] 
10:02:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A42A0>, <py_sfcl.CommandDataDefinition object at 0x066A42D0>) , Command count = 168 ] 
10:02:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A4330>, <py_sfcl.CommandDataDefinition object at 0x066A4360>) , Command count = 169 ] 
10:02:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A43C0>, <py_sfcl.CommandDataDefinition object at 0x066A43F0>) , Command count = 170 ] 
10:02:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A4450>, <py_sfcl.CommandDataDefinition object at 0x066A4480>) , Command count = 171 ] 
10:02:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A44E0>, <py_sfcl.CommandDataDefinition object at 0x066A4510>) , Command count = 172 ] 
10:02:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A4570>, <py_sfcl.CommandDataDefinition object at 0x066A45A0>) , Command count = 173 ] 
10:02:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A4600>, <py_sfcl.CommandDataDefinition object at 0x066A4630>) , Command count = 174 ] 
10:02:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A4690>, <py_sfcl.CommandDataDefinition object at 0x066A46C0>) , Command count = 175 ] 
10:02:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A4720>, <py_sfcl.CommandDataDefinition object at 0x066A4750>) , Command count = 176 ] 
10:02:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A47B0>, <py_sfcl.CommandDataDefinition object at 0x066A47E0>) , Command count = 177 ] 
10:02:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A4840>, <py_sfcl.CommandDataDefinition object at 0x066A4870>) , Command count = 178 ] 
10:02:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A48D0>, <py_sfcl.CommandDataDefinition object at 0x066A4900>) , Command count = 179 ] 
10:02:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A4960>, <py_sfcl.CommandDataDefinition object at 0x066A4990>) , Command count = 180 ] 
10:02:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
10:02:21: [ SetCardCap(True) , Command count = 181 ] 
10:02:21: [ SetSdMmcCardMode(0x2, True) , Command count = 182 ] 
10:02:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A4A50>, <py_sfcl.CommandDataDefinition object at 0x066A4A80>) , Command count = 183 ] 
10:02:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:02:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A4AE0>, <py_sfcl.CommandDataDefinition object at 0x066A4B10>) , Command count = 184 ] 
10:02:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:02:21: [ SetCardRCA(0x1, 0xD555) , Command count = 185 ] 
10:02:21: [DVTCommonLib]### Identification :Idenfication of card completed 

10:02:21: [RT2HCSD24_1_1_1_2.py]CALL : globalSetLSHostFreq
10:02:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:02:21: Host Frequency set to 25000 KHz
10:02:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:02:21: [RT2HCSD24_1_1_1_2.py]CALL : AddressForWriteRead
10:02:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:02:21: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:02:21: [ SetBusWidth(0x1) , Command count = 186 ] 
10:02:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:02:21: ####CSD Registe 2.0 Values####
10:02:21: CSD_STRUCTURE                                 :0x1
10:02:21: Reserv1                                       :0x0
10:02:21: Time Access 1 TAAC                            :0xe
10:02:21: Time Access 2 NSAC*100                        :0x0
10:02:21: Data Transfer Rate TRAN_SPEED                 :0x32
10:02:21: Card Command Classess CCC                     :0x5b5
10:02:21: Max Read Data Block Length  READ_BL_LEN       :0x9
10:02:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:02:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:02:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:02:21: DSR(driver stage register)  DSR_IMP           :0x0
10:02:21: Reserv2                                       :0x0
10:02:21: Device Size C_SIZE                            :0xedc8
10:02:21: Reserv3                                       :0x0
10:02:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:02:21: Erase Sector Size SECTOR_SIZE                 :0x7f
10:02:21: Write Protect Group Size WP_GRP_SIZE          :0x0
10:02:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:02:21: Reserv4                                       :0x0
10:02:21: Write Speed Factor R2W_FACTOR                 :0x2
10:02:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:02:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:02:21: FILE_FORMAT_GRP                               :0x0
10:02:21: COPY flag                                     :0x1
10:02:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:02:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:02:21: File_Format                                   :0x0
10:02:21: CRC                                           :0x0
10:02:21: ####CSD Registe Values####  

10:02:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:02:21: ProductSerialNumber = 0x23482900
10:02:21: CardMaximumLBA      = 0x3b72400
10:02:21: CardCapacity        = 32G
10:02:21: Is card secure      = 0
10:02:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:02:21: [DVTCommonLib]###  LogicalWrite called
10:02:23: [ WriteLba(0x2574B9B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 187 ] 
10:02:23: [DVTCommonLib]###  LogicalWrite Completed 

10:02:23: [DVTCommonLib]###  LogicalRead called
10:02:25: [ ReadLba(0x2574B9B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 188 ] 
10:02:25: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:02:25: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:02:25: ########################################
10:02:25: Finished Running script RT2HCSD24_1_1_1_2 
10:02:25: ########################################
10:02:25: ########################################
10:02:25: Stated Running script RT2HCSD34_1_1_1_2a 
10:02:25: ########################################
10:02:25: [RT2HCSD34_1_1_1_2a.py]###### Set Card Time Out values test. 
10:02:25: [GO4_globalInitCard]### Switch to Specify Card Type
10:02:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:02:27: Host Frequency set to 25000 KHz
10:02:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:02:27: [GO18_globalSetVolt]### Set Host Voltage value.
10:02:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
10:02:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x066A4FC0>, 0x0, True) , Command count = 189 ] 
10:02:27: [GO18_globalSetVolt]### Host voltage value is set.
10:02:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
10:02:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x066A6090>, 0x0, False) , Command count = 190 ] 
10:02:27: [GO18_globalSetVolt]### Host voltage value is set.
10:02:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 191 ] 
10:02:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:02:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 192 ] 
10:02:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:02:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:02:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:02:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:02:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
10:02:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 193 ] 
10:02:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
10:02:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:02:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6210>, <py_sfcl.CommandDataDefinition object at 0x066A6180>) , Command count = 194 ] 
10:02:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:02:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6240>, <py_sfcl.CommandDataDefinition object at 0x066A6270>) , Command count = 195 ] 
10:02:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
10:02:27: [ SetCardRCA(0x1, 0xD555) , Command count = 196 ] 
10:02:27: [DVTCommonLib]### Identification :Idenfication of card completed 

10:02:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:02:27: Host Frequency set to 25000 KHz
10:02:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:02:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:02:27: ####CSD Registe 2.0 Values####
10:02:27: CSD_STRUCTURE                                 :0x1
10:02:27: Reserv1                                       :0x0
10:02:27: Time Access 1 TAAC                            :0xe
10:02:27: Time Access 2 NSAC*100                        :0x0
10:02:27: Data Transfer Rate TRAN_SPEED                 :0x32
10:02:27: Card Command Classess CCC                     :0x5b5
10:02:27: Max Read Data Block Length  READ_BL_LEN       :0x9
10:02:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:02:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:02:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:02:27: DSR(driver stage register)  DSR_IMP           :0x0
10:02:27: Reserv2                                       :0x0
10:02:27: Device Size C_SIZE                            :0xedc8
10:02:27: Reserv3                                       :0x0
10:02:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:02:27: Erase Sector Size SECTOR_SIZE                 :0x7f
10:02:27: Write Protect Group Size WP_GRP_SIZE          :0x0
10:02:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:02:27: Reserv4                                       :0x0
10:02:27: Write Speed Factor R2W_FACTOR                 :0x2
10:02:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:02:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:02:27: FILE_FORMAT_GRP                               :0x0
10:02:27: COPY flag                                     :0x1
10:02:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:02:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:02:27: File_Format                                   :0x0
10:02:27: CRC                                           :0x0
10:02:27: ####CSD Registe Values####  

10:02:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
10:02:27: [GetSCRRegisterEntry] Passed
10:02:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
10:02:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
10:02:27: Data_Status_After Erases          : 0
10:02:27: CPRM Security Support             : No Security
10:02:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
10:02:27: Spec. Version                     : Version 3.0X
10:02:27: Extended Security Support         : Extended_Security_Not_Supported
10:02:27: Command Support                   : COMMAND_SUPPORT
10:02:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

10:02:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A64E0>, <py_sfcl.CommandDataDefinition object at 0x066A6300>) , Command count = 197 ] 
10:02:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
10:02:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6360>, <py_sfcl.CommandDataDefinition object at 0x066A6390>) , Command count = 198 ] 
10:02:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
10:02:27: [ SetBusWidth(0x4) , Command count = 199 ] 
10:02:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
10:02:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066A6450>, <0x200/0x200, Spc, pat:0x0>) , Command count = 200 ] 
10:02:27: Protected Area Size 0x28000
10:02:27: Bus Width           2
10:02:27: Secure Mode         0
10:02:27: Speed  Class        4
10:02:27: Perf Move           0
10:02:27: Au Size             9
10:02:27: Erase Size          15
10:02:27: Erase Timeout       1
10:02:27: Erase offset        1
10:02:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

10:02:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
10:02:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
10:02:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 201 ] 
10:02:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
10:02:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

10:02:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
10:02:27: Host Frequency set to 100000 KHz
10:02:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
10:02:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:02:27: ####CSD Registe 2.0 Values####
10:02:27: CSD_STRUCTURE                                 :0x1
10:02:27: Reserv1                                       :0x0
10:02:27: Time Access 1 TAAC                            :0xe
10:02:27: Time Access 2 NSAC*100                        :0x0
10:02:27: Data Transfer Rate TRAN_SPEED                 :0xb
10:02:27: Card Command Classess CCC                     :0x5b5
10:02:27: Max Read Data Block Length  READ_BL_LEN       :0x9
10:02:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:02:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:02:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:02:27: DSR(driver stage register)  DSR_IMP           :0x0
10:02:27: Reserv2                                       :0x0
10:02:27: Device Size C_SIZE                            :0xedc8
10:02:27: Reserv3                                       :0x0
10:02:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:02:27: Erase Sector Size SECTOR_SIZE                 :0x7f
10:02:27: Write Protect Group Size WP_GRP_SIZE          :0x0
10:02:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:02:27: Reserv4                                       :0x0
10:02:27: Write Speed Factor R2W_FACTOR                 :0x2
10:02:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:02:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:02:27: FILE_FORMAT_GRP                               :0x0
10:02:27: COPY flag                                     :0x1
10:02:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:02:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:02:27: File_Format                                   :0x0
10:02:27: CRC                                           :0x0
10:02:27: ####CSD Registe Values####  

10:02:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6750>, <py_sfcl.CommandDataDefinition object at 0x066A6570>) , Command count = 202 ] 
10:02:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
10:02:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A65D0>, <py_sfcl.CommandDataDefinition object at 0x066A6600>) , Command count = 203 ] 
10:02:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
10:02:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


10:02:27: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetTO
10:02:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 204 ] 
10:02:27: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetVolt
10:02:27: [GO18_globalSetVolt]### Set Host Voltage value.
10:02:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
10:02:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x066A66C0>, 0x0, True) , Command count = 205 ] 
10:02:27: [GO18_globalSetVolt]### Host voltage value is set.
10:02:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
10:02:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x066A66F0>, 0x0, False) , Command count = 206 ] 
10:02:27: [GO18_globalSetVolt]### Host voltage value is set.
10:02:27: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetResetFreq
10:02:27: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
10:02:27: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
10:02:27: [RT2HCSD34_1_1_1_2a.py]***Test Sequential of CMD 8' s during Soft Reset***
10:02:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6780>, <py_sfcl.CommandDataDefinition object at 0x066A67B0>) , Command count = 207 ] 
10:02:27: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
10:02:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6810>, <py_sfcl.CommandDataDefinition object at 0x066A6840>) , Command count = 208 ] 
10:02:27: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 254, 212]
10:02:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A68A0>, <py_sfcl.CommandDataDefinition object at 0x066A68D0>) , Command count = 209 ] 
10:02:28: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 59, 118]
10:02:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6930>, <py_sfcl.CommandDataDefinition object at 0x066A6960>) , Command count = 210 ] 
10:02:28: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 225, 47]
10:02:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A69C0>, <py_sfcl.CommandDataDefinition object at 0x066A69F0>) , Command count = 211 ] 
10:02:28: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 89, 39]
10:02:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6A50>, <py_sfcl.CommandDataDefinition object at 0x066A6A80>) , Command count = 212 ] 
10:02:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6AE0>, <py_sfcl.CommandDataDefinition object at 0x066A6B10>) , Command count = 213 ] 
10:02:28: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 65, 255, 128, 0, 255]
10:02:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6B70>, <py_sfcl.CommandDataDefinition object at 0x066A6BA0>) , Command count = 214 ] 
10:02:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6C00>, <py_sfcl.CommandDataDefinition object at 0x066A6C30>) , Command count = 215 ] 
10:02:28: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 64, 255, 128, 0, 255]
10:02:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6C90>, <py_sfcl.CommandDataDefinition object at 0x066A6CC0>) , Command count = 216 ] 
10:02:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6D20>, <py_sfcl.CommandDataDefinition object at 0x066A6D50>) , Command count = 217 ] 
10:02:28: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 192, 255, 128, 0, 255]
10:02:28: [ SetCardCap(True) , Command count = 218 ] 
10:02:28: [ SetSdMmcCardMode(0x2, True) , Command count = 219 ] 
10:02:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:02:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6E10>, <py_sfcl.CommandDataDefinition object at 0x066A6E40>) , Command count = 220 ] 
10:02:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:02:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6EA0>, <py_sfcl.CommandDataDefinition object at 0x066A6ED0>) , Command count = 221 ] 
10:02:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:02:28: [ SetCardRCA(0x1, 0xD555) , Command count = 222 ] 
10:02:28: [DVTCommonLib]### Identification :Idenfication of card completed 

10:02:28: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetLSHostFreq
10:02:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:02:28: Host Frequency set to 25000 KHz
10:02:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:02:28: [RT2HCSD34_1_1_1_2a.py]CALL : AddressForWriteRead
10:02:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:02:28: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:02:28: [ SetBusWidth(0x1) , Command count = 223 ] 
10:02:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:02:28: ####CSD Registe 2.0 Values####
10:02:28: CSD_STRUCTURE                                 :0x1
10:02:28: Reserv1                                       :0x0
10:02:28: Time Access 1 TAAC                            :0xe
10:02:28: Time Access 2 NSAC*100                        :0x0
10:02:28: Data Transfer Rate TRAN_SPEED                 :0x32
10:02:28: Card Command Classess CCC                     :0x5b5
10:02:28: Max Read Data Block Length  READ_BL_LEN       :0x9
10:02:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:02:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:02:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:02:28: DSR(driver stage register)  DSR_IMP           :0x0
10:02:28: Reserv2                                       :0x0
10:02:28: Device Size C_SIZE                            :0xedc8
10:02:28: Reserv3                                       :0x0
10:02:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:02:28: Erase Sector Size SECTOR_SIZE                 :0x7f
10:02:28: Write Protect Group Size WP_GRP_SIZE          :0x0
10:02:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:02:28: Reserv4                                       :0x0
10:02:28: Write Speed Factor R2W_FACTOR                 :0x2
10:02:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:02:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:02:28: FILE_FORMAT_GRP                               :0x0
10:02:28: COPY flag                                     :0x1
10:02:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:02:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:02:28: File_Format                                   :0x0
10:02:28: CRC                                           :0x0
10:02:28: ####CSD Registe Values####  

10:02:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:02:28: ProductSerialNumber = 0x23482900
10:02:28: CardMaximumLBA      = 0x3b72400
10:02:28: CardCapacity        = 32G
10:02:28: Is card secure      = 0
10:02:28: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:02:28: [DVTCommonLib]###  LogicalWrite called
10:02:30: [ WriteLba(0x27D20E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 224 ] 
10:02:30: [DVTCommonLib]###  LogicalWrite Completed 

10:02:30: [DVTCommonLib]###  LogicalRead called
10:02:31: [ ReadLba(0x27D20E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 225 ] 
10:02:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:02:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:02:31: [RT2HCSD34_1_1_1_2a.py]***Test Sequential of CMD 8' s during Power Cycle Reset***
10:02:31: [RT2HCSD34_1_1_1_2a.py]POWER : OFF and ON
10:02:33: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetResetFreq
10:02:33: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
10:02:33: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE090>, <py_sfcl.CommandDataDefinition object at 0x066AE030>) , Command count = 226 ] 
10:02:33: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 123, 111]
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE0C0>, <py_sfcl.CommandDataDefinition object at 0x066AE0F0>) , Command count = 227 ] 
10:02:33: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 155, 106]
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE150>, <py_sfcl.CommandDataDefinition object at 0x066AE180>) , Command count = 228 ] 
10:02:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE1E0>, <py_sfcl.CommandDataDefinition object at 0x066AE210>) , Command count = 229 ] 
10:02:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE270>, <py_sfcl.CommandDataDefinition object at 0x066AE2A0>) , Command count = 230 ] 
10:02:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE300>, <py_sfcl.CommandDataDefinition object at 0x066AE330>) , Command count = 231 ] 
10:02:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE390>, <py_sfcl.CommandDataDefinition object at 0x066AE3C0>) , Command count = 232 ] 
10:02:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE420>, <py_sfcl.CommandDataDefinition object at 0x066AE450>) , Command count = 233 ] 
10:02:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE4B0>, <py_sfcl.CommandDataDefinition object at 0x066AE4E0>) , Command count = 234 ] 
10:02:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE540>, <py_sfcl.CommandDataDefinition object at 0x066AE570>) , Command count = 235 ] 
10:02:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE5D0>, <py_sfcl.CommandDataDefinition object at 0x066AE600>) , Command count = 236 ] 
10:02:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE660>, <py_sfcl.CommandDataDefinition object at 0x066AE690>) , Command count = 237 ] 
10:02:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE6F0>, <py_sfcl.CommandDataDefinition object at 0x066AE720>) , Command count = 238 ] 
10:02:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE780>, <py_sfcl.CommandDataDefinition object at 0x066AE7B0>) , Command count = 239 ] 
10:02:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE810>, <py_sfcl.CommandDataDefinition object at 0x066AE840>) , Command count = 240 ] 
10:02:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE8A0>, <py_sfcl.CommandDataDefinition object at 0x066AE8D0>) , Command count = 241 ] 
10:02:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE930>, <py_sfcl.CommandDataDefinition object at 0x066AE960>) , Command count = 242 ] 
10:02:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE9C0>, <py_sfcl.CommandDataDefinition object at 0x066AE9F0>) , Command count = 243 ] 
10:02:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEA50>, <py_sfcl.CommandDataDefinition object at 0x066AEA80>) , Command count = 244 ] 
10:02:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEAE0>, <py_sfcl.CommandDataDefinition object at 0x066AEB10>) , Command count = 245 ] 
10:02:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEB70>, <py_sfcl.CommandDataDefinition object at 0x066AEBA0>) , Command count = 246 ] 
10:02:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEC00>, <py_sfcl.CommandDataDefinition object at 0x066AEC30>) , Command count = 247 ] 
10:02:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEC90>, <py_sfcl.CommandDataDefinition object at 0x066AECC0>) , Command count = 248 ] 
10:02:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AED20>, <py_sfcl.CommandDataDefinition object at 0x066AED50>) , Command count = 249 ] 
10:02:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEDB0>, <py_sfcl.CommandDataDefinition object at 0x066AEDE0>) , Command count = 250 ] 
10:02:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEE40>, <py_sfcl.CommandDataDefinition object at 0x066AEE70>) , Command count = 251 ] 
10:02:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05EC0A20>, <py_sfcl.CommandDataDefinition object at 0x066AEED0>) , Command count = 252 ] 
10:02:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEF30>, <py_sfcl.CommandDataDefinition object at 0x066AEF60>) , Command count = 253 ] 
10:02:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC5090>, <py_sfcl.CommandDataDefinition object at 0x066AEFC0>) , Command count = 254 ] 
10:02:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC5300>, <py_sfcl.CommandDataDefinition object at 0x05FC51B0>) , Command count = 255 ] 
10:02:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDBC60>, <py_sfcl.CommandDataDefinition object at 0x066B1090>) , Command count = 256 ] 
10:02:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDBDB0>, <py_sfcl.CommandDataDefinition object at 0x066B10F0>) , Command count = 257 ] 
10:02:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
10:02:33: [ SetCardCap(True) , Command count = 258 ] 
10:02:33: [ SetSdMmcCardMode(0x2, True) , Command count = 259 ] 
10:02:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1150>, <py_sfcl.CommandDataDefinition object at 0x066B1180>) , Command count = 260 ] 
10:02:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:02:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE7330>, <py_sfcl.CommandDataDefinition object at 0x066B11E0>) , Command count = 261 ] 
10:02:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:02:33: [ SetCardRCA(0x1, 0xD555) , Command count = 262 ] 
10:02:33: [DVTCommonLib]### Identification :Idenfication of card completed 

10:02:33: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetLSHostFreq
10:02:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:02:33: Host Frequency set to 25000 KHz
10:02:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:02:33: [RT2HCSD34_1_1_1_2a.py]CALL : AddressForWriteRead
10:02:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:02:33: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:02:33: [ SetBusWidth(0x1) , Command count = 263 ] 
10:02:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:02:33: ####CSD Registe 2.0 Values####
10:02:33: CSD_STRUCTURE                                 :0x1
10:02:33: Reserv1                                       :0x0
10:02:33: Time Access 1 TAAC                            :0xe
10:02:33: Time Access 2 NSAC*100                        :0x0
10:02:33: Data Transfer Rate TRAN_SPEED                 :0x32
10:02:33: Card Command Classess CCC                     :0x5b5
10:02:33: Max Read Data Block Length  READ_BL_LEN       :0x9
10:02:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:02:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:02:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:02:33: DSR(driver stage register)  DSR_IMP           :0x0
10:02:33: Reserv2                                       :0x0
10:02:33: Device Size C_SIZE                            :0xedc8
10:02:33: Reserv3                                       :0x0
10:02:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:02:33: Erase Sector Size SECTOR_SIZE                 :0x7f
10:02:33: Write Protect Group Size WP_GRP_SIZE          :0x0
10:02:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:02:33: Reserv4                                       :0x0
10:02:33: Write Speed Factor R2W_FACTOR                 :0x2
10:02:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:02:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:02:33: FILE_FORMAT_GRP                               :0x0
10:02:33: COPY flag                                     :0x1
10:02:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:02:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:02:33: File_Format                                   :0x0
10:02:33: CRC                                           :0x0
10:02:33: ####CSD Registe Values####  

10:02:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:02:33: ProductSerialNumber = 0x23482900
10:02:33: CardMaximumLBA      = 0x3b72400
10:02:33: CardCapacity        = 32G
10:02:33: Is card secure      = 0
10:02:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:02:33: [DVTCommonLib]###  LogicalWrite called
10:02:35: [ WriteLba(0x3649B61, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 264 ] 
10:02:35: [DVTCommonLib]###  LogicalWrite Completed 

10:02:35: [DVTCommonLib]###  LogicalRead called
10:02:37: [ ReadLba(0x3649B61, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 265 ] 
10:02:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:02:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:02:37: ***Test Sequential of CMD 8' s during Power Cycle & CMD 0 Reset***
10:02:37: [RT2HCSD34_1_1_1_2a.py]POWER : OFF and ON
10:02:39: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetResetFreq
10:02:39: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
10:02:39: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE73F0>, <py_sfcl.CommandDataDefinition object at 0x05FE7C30>) , Command count = 266 ] 
10:02:39: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FCB210>, <py_sfcl.CommandDataDefinition object at 0x066B1240>) , Command count = 267 ] 
10:02:39: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 98, 89]
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05EC0CF0>, <py_sfcl.CommandDataDefinition object at 0x066B12A0>) , Command count = 268 ] 
10:02:39: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 240, 11]
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05F8E780>, <py_sfcl.CommandDataDefinition object at 0x066B1330>) , Command count = 269 ] 
10:02:39: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 141, 161]
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0200FC00>, <py_sfcl.CommandDataDefinition object at 0x066B1390>) , Command count = 270 ] 
10:02:39: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 85, 188]
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEFBD0>, <py_sfcl.CommandDataDefinition object at 0x066B13F0>) , Command count = 271 ] 
10:02:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06033540>, <py_sfcl.CommandDataDefinition object at 0x066B1480>) , Command count = 272 ] 
10:02:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06033C90>, <py_sfcl.CommandDataDefinition object at 0x066B14E0>) , Command count = 273 ] 
10:02:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06033930>, <py_sfcl.CommandDataDefinition object at 0x066B1540>) , Command count = 274 ] 
10:02:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEFC00>, <py_sfcl.CommandDataDefinition object at 0x066B15A0>) , Command count = 275 ] 
10:02:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEF2A0>, <py_sfcl.CommandDataDefinition object at 0x066B1600>) , Command count = 276 ] 
10:02:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038660>, <py_sfcl.CommandDataDefinition object at 0x066B1660>) , Command count = 277 ] 
10:02:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038690>, <py_sfcl.CommandDataDefinition object at 0x066B16C0>) , Command count = 278 ] 
10:02:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060386C0>, <py_sfcl.CommandDataDefinition object at 0x066B1720>) , Command count = 279 ] 
10:02:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060386F0>, <py_sfcl.CommandDataDefinition object at 0x066B1780>) , Command count = 280 ] 
10:02:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038810>, <py_sfcl.CommandDataDefinition object at 0x066B17E0>) , Command count = 281 ] 
10:02:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060388A0>, <py_sfcl.CommandDataDefinition object at 0x066B1840>) , Command count = 282 ] 
10:02:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038930>, <py_sfcl.CommandDataDefinition object at 0x066B18A0>) , Command count = 283 ] 
10:02:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038960>, <py_sfcl.CommandDataDefinition object at 0x066B1900>) , Command count = 284 ] 
10:02:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038990>, <py_sfcl.CommandDataDefinition object at 0x066B1960>) , Command count = 285 ] 
10:02:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060389C0>, <py_sfcl.CommandDataDefinition object at 0x066B19C0>) , Command count = 286 ] 
10:02:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDBBD0>, <py_sfcl.CommandDataDefinition object at 0x066B1A20>) , Command count = 287 ] 
10:02:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038A50>, <py_sfcl.CommandDataDefinition object at 0x066B1A80>) , Command count = 288 ] 
10:02:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060389F0>, <py_sfcl.CommandDataDefinition object at 0x066B1AE0>) , Command count = 289 ] 
10:02:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038A20>, <py_sfcl.CommandDataDefinition object at 0x066B1B40>) , Command count = 290 ] 
10:02:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038CC0>, <py_sfcl.CommandDataDefinition object at 0x066B1BA0>) , Command count = 291 ] 
10:02:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1C00>, <py_sfcl.CommandDataDefinition object at 0x066B1C30>) , Command count = 292 ] 
10:02:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065921B0>, <py_sfcl.CommandDataDefinition object at 0x065921E0>) , Command count = 293 ] 
10:02:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06592360>, <py_sfcl.CommandDataDefinition object at 0x066B1CC0>) , Command count = 294 ] 
10:02:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661D5D0>, <py_sfcl.CommandDataDefinition object at 0x066B1D20>) , Command count = 295 ] 
10:02:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661D900>, <py_sfcl.CommandDataDefinition object at 0x066B1D80>) , Command count = 296 ] 
10:02:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1DE0>, <py_sfcl.CommandDataDefinition object at 0x066B1E10>) , Command count = 297 ] 
10:02:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1E70>, <py_sfcl.CommandDataDefinition object at 0x066B1EA0>) , Command count = 298 ] 
10:02:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661DCF0>, <py_sfcl.CommandDataDefinition object at 0x066B1F00>) , Command count = 299 ] 
10:02:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DC00>, <py_sfcl.CommandDataDefinition object at 0x0662DB10>) , Command count = 300 ] 
10:02:39: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
10:02:39: [ SetCardCap(True) , Command count = 301 ] 
10:02:39: [ SetSdMmcCardMode(0x2, True) , Command count = 302 ] 
10:02:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DC60>, <py_sfcl.CommandDataDefinition object at 0x066B1F90>) , Command count = 303 ] 
10:02:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:02:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DBD0>, <py_sfcl.CommandDataDefinition object at 0x066B2030>) , Command count = 304 ] 
10:02:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:02:39: [ SetCardRCA(0x1, 0xD555) , Command count = 305 ] 
10:02:39: [DVTCommonLib]### Identification :Idenfication of card completed 

10:02:39: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetLSHostFreq
10:02:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:02:39: Host Frequency set to 25000 KHz
10:02:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:02:39: [RT2HCSD34_1_1_1_2a.py]CALL : AddressForWriteRead
10:02:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:02:39: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:02:39: [ SetBusWidth(0x1) , Command count = 306 ] 
10:02:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:02:39: ####CSD Registe 2.0 Values####
10:02:39: CSD_STRUCTURE                                 :0x1
10:02:39: Reserv1                                       :0x0
10:02:39: Time Access 1 TAAC                            :0xe
10:02:39: Time Access 2 NSAC*100                        :0x0
10:02:39: Data Transfer Rate TRAN_SPEED                 :0x32
10:02:39: Card Command Classess CCC                     :0x5b5
10:02:39: Max Read Data Block Length  READ_BL_LEN       :0x9
10:02:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:02:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:02:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:02:39: DSR(driver stage register)  DSR_IMP           :0x0
10:02:39: Reserv2                                       :0x0
10:02:39: Device Size C_SIZE                            :0xedc8
10:02:39: Reserv3                                       :0x0
10:02:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:02:39: Erase Sector Size SECTOR_SIZE                 :0x7f
10:02:39: Write Protect Group Size WP_GRP_SIZE          :0x0
10:02:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:02:39: Reserv4                                       :0x0
10:02:39: Write Speed Factor R2W_FACTOR                 :0x2
10:02:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:02:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:02:39: FILE_FORMAT_GRP                               :0x0
10:02:39: COPY flag                                     :0x1
10:02:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:02:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:02:39: File_Format                                   :0x0
10:02:39: CRC                                           :0x0
10:02:39: ####CSD Registe Values####  

10:02:39: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:02:39: ProductSerialNumber = 0x23482900
10:02:39: CardMaximumLBA      = 0x3b72400
10:02:39: CardCapacity        = 32G
10:02:39: Is card secure      = 0
10:02:39: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:02:39: [DVTCommonLib]###  LogicalWrite called
10:02:41: [ WriteLba(0x333B9EA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 307 ] 
10:02:41: [DVTCommonLib]###  LogicalWrite Completed 

10:02:41: [DVTCommonLib]###  LogicalRead called
10:02:42: [ ReadLba(0x333B9EA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 308 ] 
10:02:42: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:02:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:02:42: ########################################
10:02:42: Finished Running script RT2HCSD34_1_1_1_2a 
10:02:42: ########################################
10:02:42: ########################################
10:02:42: Stated Running script RT2HCSD35_1_1_1_3 
10:02:42: ########################################
10:02:43: [RT2HCSD35_1_1_1_3.py]###### Set Card Time Out values test. 
10:02:43: [GO4_globalInitCard]### Switch to Specify Card Type
10:02:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:02:45: Host Frequency set to 25000 KHz
10:02:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:02:45: [GO18_globalSetVolt]### Set Host Voltage value.
10:02:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
10:02:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x066B25D0>, 0x0, True) , Command count = 309 ] 
10:02:45: [GO18_globalSetVolt]### Host voltage value is set.
10:02:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
10:02:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0663A1E0>, 0x0, False) , Command count = 310 ] 
10:02:45: [GO18_globalSetVolt]### Host voltage value is set.
10:02:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 311 ] 
10:02:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:02:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 312 ] 
10:02:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:02:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:02:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:02:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:02:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
10:02:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 313 ] 
10:02:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
10:02:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:02:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A630>, <py_sfcl.CommandDataDefinition object at 0x0663A450>) , Command count = 314 ] 
10:02:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:02:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A210>, <py_sfcl.CommandDataDefinition object at 0x0663A5A0>) , Command count = 315 ] 
10:02:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
10:02:45: [ SetCardRCA(0x1, 0xD555) , Command count = 316 ] 
10:02:45: [DVTCommonLib]### Identification :Idenfication of card completed 

10:02:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:02:45: Host Frequency set to 25000 KHz
10:02:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:02:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:02:45: ####CSD Registe 2.0 Values####
10:02:45: CSD_STRUCTURE                                 :0x1
10:02:45: Reserv1                                       :0x0
10:02:45: Time Access 1 TAAC                            :0xe
10:02:45: Time Access 2 NSAC*100                        :0x0
10:02:45: Data Transfer Rate TRAN_SPEED                 :0x32
10:02:45: Card Command Classess CCC                     :0x5b5
10:02:45: Max Read Data Block Length  READ_BL_LEN       :0x9
10:02:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:02:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:02:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:02:45: DSR(driver stage register)  DSR_IMP           :0x0
10:02:45: Reserv2                                       :0x0
10:02:45: Device Size C_SIZE                            :0xedc8
10:02:45: Reserv3                                       :0x0
10:02:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:02:45: Erase Sector Size SECTOR_SIZE                 :0x7f
10:02:45: Write Protect Group Size WP_GRP_SIZE          :0x0
10:02:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:02:45: Reserv4                                       :0x0
10:02:45: Write Speed Factor R2W_FACTOR                 :0x2
10:02:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:02:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:02:45: FILE_FORMAT_GRP                               :0x0
10:02:45: COPY flag                                     :0x1
10:02:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:02:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:02:45: File_Format                                   :0x0
10:02:45: CRC                                           :0x0
10:02:45: ####CSD Registe Values####  

10:02:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
10:02:45: [GetSCRRegisterEntry] Passed
10:02:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
10:02:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
10:02:45: Data_Status_After Erases          : 0
10:02:45: CPRM Security Support             : No Security
10:02:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
10:02:45: Spec. Version                     : Version 3.0X
10:02:45: Extended Security Support         : Extended_Security_Not_Supported
10:02:45: Command Support                   : COMMAND_SUPPORT
10:02:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

10:02:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DCF0>, <py_sfcl.CommandDataDefinition object at 0x0663A5D0>) , Command count = 317 ] 
10:02:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
10:02:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A600>, <py_sfcl.CommandDataDefinition object at 0x0663A690>) , Command count = 318 ] 
10:02:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
10:02:45: [ SetBusWidth(0x4) , Command count = 319 ] 
10:02:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
10:02:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0663AF90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 320 ] 
10:02:45: Protected Area Size 0x28000
10:02:45: Bus Width           2
10:02:45: Secure Mode         0
10:02:45: Speed  Class        4
10:02:45: Perf Move           0
10:02:45: Au Size             9
10:02:45: Erase Size          15
10:02:45: Erase Timeout       1
10:02:45: Erase offset        1
10:02:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

10:02:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
10:02:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
10:02:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 321 ] 
10:02:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
10:02:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

10:02:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
10:02:45: Host Frequency set to 100000 KHz
10:02:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
10:02:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:02:45: ####CSD Registe 2.0 Values####
10:02:45: CSD_STRUCTURE                                 :0x1
10:02:45: Reserv1                                       :0x0
10:02:45: Time Access 1 TAAC                            :0xe
10:02:45: Time Access 2 NSAC*100                        :0x0
10:02:45: Data Transfer Rate TRAN_SPEED                 :0xb
10:02:45: Card Command Classess CCC                     :0x5b5
10:02:45: Max Read Data Block Length  READ_BL_LEN       :0x9
10:02:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:02:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:02:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:02:45: DSR(driver stage register)  DSR_IMP           :0x0
10:02:45: Reserv2                                       :0x0
10:02:45: Device Size C_SIZE                            :0xedc8
10:02:45: Reserv3                                       :0x0
10:02:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:02:45: Erase Sector Size SECTOR_SIZE                 :0x7f
10:02:45: Write Protect Group Size WP_GRP_SIZE          :0x0
10:02:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:02:45: Reserv4                                       :0x0
10:02:45: Write Speed Factor R2W_FACTOR                 :0x2
10:02:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:02:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:02:45: FILE_FORMAT_GRP                               :0x0
10:02:45: COPY flag                                     :0x1
10:02:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:02:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:02:45: File_Format                                   :0x0
10:02:45: CRC                                           :0x0
10:02:45: ####CSD Registe Values####  

10:02:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663ADE0>, <py_sfcl.CommandDataDefinition object at 0x0663AED0>) , Command count = 322 ] 
10:02:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
10:02:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B26F0>, <py_sfcl.CommandDataDefinition object at 0x066B23C0>) , Command count = 323 ] 
10:02:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
10:02:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


10:02:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 324 ] 
10:02:45: [GO18_globalSetVolt]### Set Host Voltage value.
10:02:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
10:02:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0663A4B0>, 0x0, True) , Command count = 325 ] 
10:02:45: [GO18_globalSetVolt]### Host voltage value is set.
10:02:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
10:02:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0663AE70>, 0x0, False) , Command count = 326 ] 
10:02:45: [GO18_globalSetVolt]### Host voltage value is set.
10:02:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:02:45: Host Frequency set to 25000 KHz
10:02:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:02:45: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]*********Soft Reset*********
10:02:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:02:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 327 ] 
10:02:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
10:02:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:02:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:02:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:02:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:02:46: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
10:02:46: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py] ###[INFO] : Reset Compared Passed

10:02:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:02:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE73C0>, <py_sfcl.CommandDataDefinition object at 0x0663E1B0>) , Command count = 328 ] 
10:02:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:02:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E090>, <py_sfcl.CommandDataDefinition object at 0x0663AE10>) , Command count = 329 ] 
10:02:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:02:46: [ SetCardRCA(0x1, 0xD555) , Command count = 330 ] 
10:02:46: [DVTCommonLib]### Identification :Idenfication of card completed 

10:02:46: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : AddressForWriteRead
10:02:46: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:02:46: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:02:46: [ SetBusWidth(0x1) , Command count = 331 ] 
10:02:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:02:46: ####CSD Registe 2.0 Values####
10:02:46: CSD_STRUCTURE                                 :0x1
10:02:46: Reserv1                                       :0x0
10:02:46: Time Access 1 TAAC                            :0xe
10:02:46: Time Access 2 NSAC*100                        :0x0
10:02:46: Data Transfer Rate TRAN_SPEED                 :0x32
10:02:46: Card Command Classess CCC                     :0x5b5
10:02:46: Max Read Data Block Length  READ_BL_LEN       :0x9
10:02:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:02:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:02:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:02:46: DSR(driver stage register)  DSR_IMP           :0x0
10:02:46: Reserv2                                       :0x0
10:02:46: Device Size C_SIZE                            :0xedc8
10:02:46: Reserv3                                       :0x0
10:02:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:02:46: Erase Sector Size SECTOR_SIZE                 :0x7f
10:02:46: Write Protect Group Size WP_GRP_SIZE          :0x0
10:02:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:02:46: Reserv4                                       :0x0
10:02:46: Write Speed Factor R2W_FACTOR                 :0x2
10:02:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:02:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:02:46: FILE_FORMAT_GRP                               :0x0
10:02:46: COPY flag                                     :0x1
10:02:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:02:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:02:46: File_Format                                   :0x0
10:02:46: CRC                                           :0x0
10:02:46: ####CSD Registe Values####  

10:02:46: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:02:46: ProductSerialNumber = 0x23482900
10:02:46: CardMaximumLBA      = 0x3b72400
10:02:46: CardCapacity        = 32G
10:02:46: Is card secure      = 0
10:02:46: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:02:46: [DVTCommonLib]###  LogicalWrite called
10:02:47: [ WriteLba(0xB2904A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 332 ] 
10:02:47: [DVTCommonLib]###  LogicalWrite Completed 

10:02:47: [DVTCommonLib]###  LogicalRead called
10:02:49: [ ReadLba(0xB2904A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 333 ] 
10:02:49: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:02:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:02:49: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]*********Power Cycle Reset*********
10:02:49: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]POWER : OFF and ON
10:02:51: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : globalSetResetFreq
10:02:51: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
10:02:51: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
10:02:51: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]RUNNING Cmd8, Cmd55, ACmd41 
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DCC0>, <py_sfcl.CommandDataDefinition object at 0x0663E390>) , Command count = 334 ] 
10:02:51: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E060>, <py_sfcl.CommandDataDefinition object at 0x0663E1E0>) , Command count = 335 ] 
10:02:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E2A0>, <py_sfcl.CommandDataDefinition object at 0x0663ADB0>) , Command count = 336 ] 
10:02:51: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E300>, <py_sfcl.CommandDataDefinition object at 0x0663E360>) , Command count = 337 ] 
10:02:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E210>, <py_sfcl.CommandDataDefinition object at 0x0663E240>) , Command count = 338 ] 
10:02:51: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E3C0>, <py_sfcl.CommandDataDefinition object at 0x0663E3F0>) , Command count = 339 ] 
10:02:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E450>, <py_sfcl.CommandDataDefinition object at 0x0663E480>) , Command count = 340 ] 
10:02:51: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E4E0>, <py_sfcl.CommandDataDefinition object at 0x0663E510>) , Command count = 341 ] 
10:02:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E570>, <py_sfcl.CommandDataDefinition object at 0x0663E5A0>) , Command count = 342 ] 
10:02:51: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E600>, <py_sfcl.CommandDataDefinition object at 0x0663E630>) , Command count = 343 ] 
10:02:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E690>, <py_sfcl.CommandDataDefinition object at 0x0663E6C0>) , Command count = 344 ] 
10:02:51: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E720>, <py_sfcl.CommandDataDefinition object at 0x0663E750>) , Command count = 345 ] 
10:02:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E7B0>, <py_sfcl.CommandDataDefinition object at 0x0663E7E0>) , Command count = 346 ] 
10:02:51: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E840>, <py_sfcl.CommandDataDefinition object at 0x0663E870>) , Command count = 347 ] 
10:02:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E9C0>, <py_sfcl.CommandDataDefinition object at 0x0663AEA0>) , Command count = 348 ] 
10:02:51: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663EA50>, <py_sfcl.CommandDataDefinition object at 0x066B26F0>) , Command count = 349 ] 
10:02:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E8D0>, <py_sfcl.CommandDataDefinition object at 0x0663E900>) , Command count = 350 ] 
10:02:51: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663EA80>, <py_sfcl.CommandDataDefinition object at 0x0663EAB0>) , Command count = 351 ] 
10:02:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663EBA0>, <py_sfcl.CommandDataDefinition object at 0x066B23F0>) , Command count = 352 ] 
10:02:51: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663EDB0>, <py_sfcl.CommandDataDefinition object at 0x066B2900>) , Command count = 353 ] 
10:02:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B2630>, <py_sfcl.CommandDataDefinition object at 0x066B2C30>) , Command count = 354 ] 
10:02:51: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B2330>, <py_sfcl.CommandDataDefinition object at 0x066B2540>) , Command count = 355 ] 
10:02:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663EB40>, <py_sfcl.CommandDataDefinition object at 0x0669B150>) , Command count = 356 ] 
10:02:51: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B0F0>, <py_sfcl.CommandDataDefinition object at 0x0669B120>) , Command count = 357 ] 
10:02:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B1B0>, <py_sfcl.CommandDataDefinition object at 0x0669B1E0>) , Command count = 358 ] 
10:02:51: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B240>, <py_sfcl.CommandDataDefinition object at 0x0669B270>) , Command count = 359 ] 
10:02:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B2D0>, <py_sfcl.CommandDataDefinition object at 0x0669B300>) , Command count = 360 ] 
10:02:51: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B360>, <py_sfcl.CommandDataDefinition object at 0x0669B390>) , Command count = 361 ] 
10:02:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B3F0>, <py_sfcl.CommandDataDefinition object at 0x0669B420>) , Command count = 362 ] 
10:02:51: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B480>, <py_sfcl.CommandDataDefinition object at 0x0669B4B0>) , Command count = 363 ] 
10:02:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B510>, <py_sfcl.CommandDataDefinition object at 0x0669B540>) , Command count = 364 ] 
10:02:51: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 1, 255, 128, 0, 255]
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B5A0>, <py_sfcl.CommandDataDefinition object at 0x0669B5D0>) , Command count = 365 ] 
10:02:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B630>, <py_sfcl.CommandDataDefinition object at 0x0669B660>) , Command count = 366 ] 
10:02:51: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
10:02:51: [ SetCardCap(True) , Command count = 367 ] 
10:02:51: [ SetSdMmcCardMode(0x2, True) , Command count = 368 ] 
10:02:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B7E0>, <py_sfcl.CommandDataDefinition object at 0x0669B810>) , Command count = 369 ] 
10:02:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:02:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669B870>, <py_sfcl.CommandDataDefinition object at 0x0669B8A0>) , Command count = 370 ] 
10:02:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:02:51: [ SetCardRCA(0x1, 0xD555) , Command count = 371 ] 
10:02:51: [DVTCommonLib]### Identification :Idenfication of card completed 

10:02:51: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : globalSetLSHostFreq
10:02:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:02:51: Host Frequency set to 25000 KHz
10:02:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:02:51: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : AddressForWriteRead
10:02:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:02:51: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:02:51: [ SetBusWidth(0x1) , Command count = 372 ] 
10:02:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:02:51: ####CSD Registe 2.0 Values####
10:02:51: CSD_STRUCTURE                                 :0x1
10:02:51: Reserv1                                       :0x0
10:02:51: Time Access 1 TAAC                            :0xe
10:02:51: Time Access 2 NSAC*100                        :0x0
10:02:51: Data Transfer Rate TRAN_SPEED                 :0x32
10:02:51: Card Command Classess CCC                     :0x5b5
10:02:51: Max Read Data Block Length  READ_BL_LEN       :0x9
10:02:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:02:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:02:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:02:51: DSR(driver stage register)  DSR_IMP           :0x0
10:02:51: Reserv2                                       :0x0
10:02:51: Device Size C_SIZE                            :0xedc8
10:02:51: Reserv3                                       :0x0
10:02:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:02:51: Erase Sector Size SECTOR_SIZE                 :0x7f
10:02:51: Write Protect Group Size WP_GRP_SIZE          :0x0
10:02:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:02:51: Reserv4                                       :0x0
10:02:51: Write Speed Factor R2W_FACTOR                 :0x2
10:02:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:02:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:02:51: FILE_FORMAT_GRP                               :0x0
10:02:51: COPY flag                                     :0x1
10:02:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:02:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:02:51: File_Format                                   :0x0
10:02:51: CRC                                           :0x0
10:02:51: ####CSD Registe Values####  

10:02:51: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:02:51: ProductSerialNumber = 0x23482900
10:02:51: CardMaximumLBA      = 0x3b72400
10:02:51: CardCapacity        = 32G
10:02:51: Is card secure      = 0
10:02:51: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:02:51: [DVTCommonLib]###  LogicalWrite called
10:02:53: [ WriteLba(0x2FC914, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 373 ] 
10:02:53: [DVTCommonLib]###  LogicalWrite Completed 

10:02:53: [DVTCommonLib]###  LogicalRead called
10:02:54: [ ReadLba(0x2FC914, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 374 ] 
10:02:54: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:02:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:02:54: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]*********Power Cycle & CMD 0 Reset*********
10:02:54: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]POWER : OFF and ON
10:02:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:02:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 375 ] 
10:02:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:02:57: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:02:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:02:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:02:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:02:57: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py] ###[INFO] : Reset Compared Passed

10:02:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:02:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AF00>, <py_sfcl.CommandDataDefinition object at 0x0663EF60>) , Command count = 376 ] 
10:02:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:02:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0669BBD0>, <py_sfcl.CommandDataDefinition object at 0x0669BC00>) , Command count = 377 ] 
10:02:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:02:57: [ SetCardRCA(0x1, 0xD555) , Command count = 378 ] 
10:02:57: [DVTCommonLib]### Identification :Idenfication of card completed 

10:02:57: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : AddressForWriteRead
10:02:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:02:57: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:02:57: [ SetBusWidth(0x1) , Command count = 379 ] 
10:02:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:02:57: ####CSD Registe 2.0 Values####
10:02:57: CSD_STRUCTURE                                 :0x1
10:02:57: Reserv1                                       :0x0
10:02:57: Time Access 1 TAAC                            :0xe
10:02:57: Time Access 2 NSAC*100                        :0x0
10:02:57: Data Transfer Rate TRAN_SPEED                 :0x32
10:02:57: Card Command Classess CCC                     :0x5b5
10:02:57: Max Read Data Block Length  READ_BL_LEN       :0x9
10:02:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:02:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:02:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:02:57: DSR(driver stage register)  DSR_IMP           :0x0
10:02:57: Reserv2                                       :0x0
10:02:57: Device Size C_SIZE                            :0xedc8
10:02:57: Reserv3                                       :0x0
10:02:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:02:57: Erase Sector Size SECTOR_SIZE                 :0x7f
10:02:57: Write Protect Group Size WP_GRP_SIZE          :0x0
10:02:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:02:57: Reserv4                                       :0x0
10:02:57: Write Speed Factor R2W_FACTOR                 :0x2
10:02:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:02:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:02:57: FILE_FORMAT_GRP                               :0x0
10:02:57: COPY flag                                     :0x1
10:02:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:02:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:02:57: File_Format                                   :0x0
10:02:57: CRC                                           :0x0
10:02:57: ####CSD Registe Values####  

10:02:57: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:02:57: ProductSerialNumber = 0x23482900
10:02:57: CardMaximumLBA      = 0x3b72400
10:02:57: CardCapacity        = 32G
10:02:57: Is card secure      = 0
10:02:57: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:02:57: [DVTCommonLib]###  LogicalWrite called
10:02:58: [ WriteLba(0x2FDE7CE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 380 ] 
10:02:58: [DVTCommonLib]###  LogicalWrite Completed 

10:02:58: [DVTCommonLib]###  LogicalRead called
10:03:00: [ ReadLba(0x2FDE7CE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 381 ] 
10:03:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:03:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:03:00: [RT2HCSD35_1_1_1_3.py]***Test Pattern Filed in Soft Reset***
10:03:00: [RT2HCSD35_1_1_1_3.py]CALL : globalSetLSHostFreq
10:03:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
10:03:00: Host Frequency set to 25000 KHz
10:03:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
10:03:00: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 0 times 

10:03:00: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:03:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:03:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 382 ] 
10:03:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:03:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:03:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:03:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:03:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:03:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:03:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0060>, <py_sfcl.CommandDataDefinition object at 0x0669BF30>) , Command count = 383 ] 
10:03:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:03:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0030>, <py_sfcl.CommandDataDefinition object at 0x066A00F0>) , Command count = 384 ] 
10:03:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:03:00: [ SetCardRCA(0x1, 0xD555) , Command count = 385 ] 
10:03:00: [DVTCommonLib]### Identification :Idenfication of card completed 

10:03:00: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:03:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:03:00: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:03:00: [ SetBusWidth(0x1) , Command count = 386 ] 
10:03:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:03:00: ####CSD Registe 2.0 Values####
10:03:00: CSD_STRUCTURE                                 :0x1
10:03:00: Reserv1                                       :0x0
10:03:00: Time Access 1 TAAC                            :0xe
10:03:00: Time Access 2 NSAC*100                        :0x0
10:03:00: Data Transfer Rate TRAN_SPEED                 :0x32
10:03:00: Card Command Classess CCC                     :0x5b5
10:03:00: Max Read Data Block Length  READ_BL_LEN       :0x9
10:03:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:03:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:03:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:03:00: DSR(driver stage register)  DSR_IMP           :0x0
10:03:00: Reserv2                                       :0x0
10:03:00: Device Size C_SIZE                            :0xedc8
10:03:00: Reserv3                                       :0x0
10:03:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:03:00: Erase Sector Size SECTOR_SIZE                 :0x7f
10:03:00: Write Protect Group Size WP_GRP_SIZE          :0x0
10:03:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:03:00: Reserv4                                       :0x0
10:03:00: Write Speed Factor R2W_FACTOR                 :0x2
10:03:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:03:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:03:00: FILE_FORMAT_GRP                               :0x0
10:03:00: COPY flag                                     :0x1
10:03:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:03:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:03:00: File_Format                                   :0x0
10:03:00: CRC                                           :0x0
10:03:00: ####CSD Registe Values####  

10:03:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:03:00: ProductSerialNumber = 0x23482900
10:03:00: CardMaximumLBA      = 0x3b72400
10:03:00: CardCapacity        = 32G
10:03:00: Is card secure      = 0
10:03:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:03:00: [DVTCommonLib]###  LogicalWrite called
10:03:02: [ WriteLba(0x3136AC0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 387 ] 
10:03:02: [DVTCommonLib]###  LogicalWrite Completed 

10:03:02: [DVTCommonLib]###  LogicalRead called
10:03:03: [ ReadLba(0x3136AC0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 388 ] 
10:03:03: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:03:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:03:03: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 1 times 

10:03:03: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:03:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:03:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 389 ] 
10:03:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:03:04: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:03:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:03:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:03:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:03:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:03:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661DBA0>, <py_sfcl.CommandDataDefinition object at 0x066A0360>) , Command count = 390 ] 
10:03:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:03:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A03F0>, <py_sfcl.CommandDataDefinition object at 0x066A0420>) , Command count = 391 ] 
10:03:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:03:04: [ SetCardRCA(0x1, 0xD555) , Command count = 392 ] 
10:03:04: [DVTCommonLib]### Identification :Idenfication of card completed 

10:03:04: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:03:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:03:04: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:03:04: [ SetBusWidth(0x1) , Command count = 393 ] 
10:03:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:03:04: ####CSD Registe 2.0 Values####
10:03:04: CSD_STRUCTURE                                 :0x1
10:03:04: Reserv1                                       :0x0
10:03:04: Time Access 1 TAAC                            :0xe
10:03:04: Time Access 2 NSAC*100                        :0x0
10:03:04: Data Transfer Rate TRAN_SPEED                 :0x32
10:03:04: Card Command Classess CCC                     :0x5b5
10:03:04: Max Read Data Block Length  READ_BL_LEN       :0x9
10:03:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:03:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:03:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:03:04: DSR(driver stage register)  DSR_IMP           :0x0
10:03:04: Reserv2                                       :0x0
10:03:04: Device Size C_SIZE                            :0xedc8
10:03:04: Reserv3                                       :0x0
10:03:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:03:04: Erase Sector Size SECTOR_SIZE                 :0x7f
10:03:04: Write Protect Group Size WP_GRP_SIZE          :0x0
10:03:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:03:04: Reserv4                                       :0x0
10:03:04: Write Speed Factor R2W_FACTOR                 :0x2
10:03:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:03:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:03:04: FILE_FORMAT_GRP                               :0x0
10:03:04: COPY flag                                     :0x1
10:03:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:03:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:03:04: File_Format                                   :0x0
10:03:04: CRC                                           :0x0
10:03:04: ####CSD Registe Values####  

10:03:04: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:03:04: ProductSerialNumber = 0x23482900
10:03:04: CardMaximumLBA      = 0x3b72400
10:03:04: CardCapacity        = 32G
10:03:04: Is card secure      = 0
10:03:04: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:03:04: [DVTCommonLib]###  LogicalWrite called
10:03:05: [ WriteLba(0x250AC82, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 394 ] 
10:03:05: [DVTCommonLib]###  LogicalWrite Completed 

10:03:05: [DVTCommonLib]###  LogicalRead called
10:03:07: [ ReadLba(0x250AC82, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 395 ] 
10:03:07: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:03:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:03:07: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 2 times 

10:03:07: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:03:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:03:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 396 ] 
10:03:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:03:07: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:03:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:03:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:03:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:03:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:03:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A02D0>, <py_sfcl.CommandDataDefinition object at 0x066A08A0>) , Command count = 397 ] 
10:03:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:03:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0660>, <py_sfcl.CommandDataDefinition object at 0x066A0480>) , Command count = 398 ] 
10:03:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:03:07: [ SetCardRCA(0x1, 0xD555) , Command count = 399 ] 
10:03:07: [DVTCommonLib]### Identification :Idenfication of card completed 

10:03:07: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:03:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:03:07: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:03:07: [ SetBusWidth(0x1) , Command count = 400 ] 
10:03:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:03:07: ####CSD Registe 2.0 Values####
10:03:07: CSD_STRUCTURE                                 :0x1
10:03:07: Reserv1                                       :0x0
10:03:07: Time Access 1 TAAC                            :0xe
10:03:07: Time Access 2 NSAC*100                        :0x0
10:03:07: Data Transfer Rate TRAN_SPEED                 :0x32
10:03:07: Card Command Classess CCC                     :0x5b5
10:03:07: Max Read Data Block Length  READ_BL_LEN       :0x9
10:03:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:03:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:03:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:03:07: DSR(driver stage register)  DSR_IMP           :0x0
10:03:07: Reserv2                                       :0x0
10:03:07: Device Size C_SIZE                            :0xedc8
10:03:07: Reserv3                                       :0x0
10:03:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:03:07: Erase Sector Size SECTOR_SIZE                 :0x7f
10:03:07: Write Protect Group Size WP_GRP_SIZE          :0x0
10:03:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:03:07: Reserv4                                       :0x0
10:03:07: Write Speed Factor R2W_FACTOR                 :0x2
10:03:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:03:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:03:07: FILE_FORMAT_GRP                               :0x0
10:03:07: COPY flag                                     :0x1
10:03:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:03:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:03:07: File_Format                                   :0x0
10:03:07: CRC                                           :0x0
10:03:07: ####CSD Registe Values####  

10:03:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:03:07: ProductSerialNumber = 0x23482900
10:03:07: CardMaximumLBA      = 0x3b72400
10:03:07: CardCapacity        = 32G
10:03:07: Is card secure      = 0
10:03:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:03:07: [DVTCommonLib]###  LogicalWrite called
10:03:09: [ WriteLba(0x2CCF426, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 401 ] 
10:03:09: [DVTCommonLib]###  LogicalWrite Completed 

10:03:09: [DVTCommonLib]###  LogicalRead called
10:03:10: [ ReadLba(0x2CCF426, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 402 ] 
10:03:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:03:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:03:10: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 3 times 

10:03:10: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:03:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:03:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 403 ] 
10:03:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:03:10: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:03:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:03:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:03:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:03:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:03:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663ED80>, <py_sfcl.CommandDataDefinition object at 0x066A0960>) , Command count = 404 ] 
10:03:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:03:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A09F0>, <py_sfcl.CommandDataDefinition object at 0x066A0A20>) , Command count = 405 ] 
10:03:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:03:10: [ SetCardRCA(0x1, 0xD555) , Command count = 406 ] 
10:03:10: [DVTCommonLib]### Identification :Idenfication of card completed 

10:03:10: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:03:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:03:10: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:03:10: [ SetBusWidth(0x1) , Command count = 407 ] 
10:03:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:03:10: ####CSD Registe 2.0 Values####
10:03:10: CSD_STRUCTURE                                 :0x1
10:03:10: Reserv1                                       :0x0
10:03:10: Time Access 1 TAAC                            :0xe
10:03:10: Time Access 2 NSAC*100                        :0x0
10:03:10: Data Transfer Rate TRAN_SPEED                 :0x32
10:03:10: Card Command Classess CCC                     :0x5b5
10:03:10: Max Read Data Block Length  READ_BL_LEN       :0x9
10:03:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:03:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:03:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:03:10: DSR(driver stage register)  DSR_IMP           :0x0
10:03:10: Reserv2                                       :0x0
10:03:10: Device Size C_SIZE                            :0xedc8
10:03:10: Reserv3                                       :0x0
10:03:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:03:10: Erase Sector Size SECTOR_SIZE                 :0x7f
10:03:10: Write Protect Group Size WP_GRP_SIZE          :0x0
10:03:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:03:10: Reserv4                                       :0x0
10:03:10: Write Speed Factor R2W_FACTOR                 :0x2
10:03:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:03:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:03:10: FILE_FORMAT_GRP                               :0x0
10:03:10: COPY flag                                     :0x1
10:03:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:03:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:03:10: File_Format                                   :0x0
10:03:10: CRC                                           :0x0
10:03:10: ####CSD Registe Values####  

10:03:10: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:03:10: ProductSerialNumber = 0x23482900
10:03:10: CardMaximumLBA      = 0x3b72400
10:03:10: CardCapacity        = 32G
10:03:10: Is card secure      = 0
10:03:10: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:03:10: [DVTCommonLib]###  LogicalWrite called
10:03:12: [ WriteLba(0x2E67C00, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 408 ] 
10:03:12: [DVTCommonLib]###  LogicalWrite Completed 

10:03:12: [DVTCommonLib]###  LogicalRead called
10:03:14: [ ReadLba(0x2E67C00, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 409 ] 
10:03:14: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:03:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:03:14: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 4 times 

10:03:14: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:03:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:03:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 410 ] 
10:03:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:03:14: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:03:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:03:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:03:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:03:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:03:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A08D0>, <py_sfcl.CommandDataDefinition object at 0x066A0D50>) , Command count = 411 ] 
10:03:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:03:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A0DE0>, <py_sfcl.CommandDataDefinition object at 0x066A0E10>) , Command count = 412 ] 
10:03:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:03:14: [ SetCardRCA(0x1, 0xD555) , Command count = 413 ] 
10:03:14: [DVTCommonLib]### Identification :Idenfication of card completed 

10:03:14: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:03:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:03:14: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:03:14: [ SetBusWidth(0x1) , Command count = 414 ] 
10:03:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:03:14: ####CSD Registe 2.0 Values####
10:03:14: CSD_STRUCTURE                                 :0x1
10:03:14: Reserv1                                       :0x0
10:03:14: Time Access 1 TAAC                            :0xe
10:03:14: Time Access 2 NSAC*100                        :0x0
10:03:14: Data Transfer Rate TRAN_SPEED                 :0x32
10:03:14: Card Command Classess CCC                     :0x5b5
10:03:14: Max Read Data Block Length  READ_BL_LEN       :0x9
10:03:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:03:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:03:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:03:14: DSR(driver stage register)  DSR_IMP           :0x0
10:03:14: Reserv2                                       :0x0
10:03:14: Device Size C_SIZE                            :0xedc8
10:03:14: Reserv3                                       :0x0
10:03:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:03:14: Erase Sector Size SECTOR_SIZE                 :0x7f
10:03:14: Write Protect Group Size WP_GRP_SIZE          :0x0
10:03:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:03:14: Reserv4                                       :0x0
10:03:14: Write Speed Factor R2W_FACTOR                 :0x2
10:03:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:03:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:03:14: FILE_FORMAT_GRP                               :0x0
10:03:14: COPY flag                                     :0x1
10:03:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:03:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:03:14: File_Format                                   :0x0
10:03:14: CRC                                           :0x0
10:03:14: ####CSD Registe Values####  

10:03:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:03:14: ProductSerialNumber = 0x23482900
10:03:14: CardMaximumLBA      = 0x3b72400
10:03:14: CardCapacity        = 32G
10:03:14: Is card secure      = 0
10:03:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:03:14: [DVTCommonLib]###  LogicalWrite called
10:03:15: [ WriteLba(0x2990C77, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 415 ] 
10:03:15: [DVTCommonLib]###  LogicalWrite Completed 

10:03:15: [DVTCommonLib]###  LogicalRead called
10:03:17: [ ReadLba(0x2990C77, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 416 ] 
10:03:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:03:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:03:17: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 5 times 

10:03:17: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:03:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:03:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 417 ] 
10:03:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:03:17: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:03:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:03:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:03:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:03:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:03:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A4180>, <py_sfcl.CommandDataDefinition object at 0x066A41B0>) , Command count = 418 ] 
10:03:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:03:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A4210>, <py_sfcl.CommandDataDefinition object at 0x066A4240>) , Command count = 419 ] 
10:03:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:03:17: [ SetCardRCA(0x1, 0xD555) , Command count = 420 ] 
10:03:17: [DVTCommonLib]### Identification :Idenfication of card completed 

10:03:17: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:03:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:03:17: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:03:17: [ SetBusWidth(0x1) , Command count = 421 ] 
10:03:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:03:17: ####CSD Registe 2.0 Values####
10:03:17: CSD_STRUCTURE                                 :0x1
10:03:17: Reserv1                                       :0x0
10:03:17: Time Access 1 TAAC                            :0xe
10:03:17: Time Access 2 NSAC*100                        :0x0
10:03:17: Data Transfer Rate TRAN_SPEED                 :0x32
10:03:17: Card Command Classess CCC                     :0x5b5
10:03:17: Max Read Data Block Length  READ_BL_LEN       :0x9
10:03:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:03:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:03:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:03:17: DSR(driver stage register)  DSR_IMP           :0x0
10:03:17: Reserv2                                       :0x0
10:03:17: Device Size C_SIZE                            :0xedc8
10:03:17: Reserv3                                       :0x0
10:03:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:03:17: Erase Sector Size SECTOR_SIZE                 :0x7f
10:03:17: Write Protect Group Size WP_GRP_SIZE          :0x0
10:03:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:03:17: Reserv4                                       :0x0
10:03:17: Write Speed Factor R2W_FACTOR                 :0x2
10:03:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:03:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:03:17: FILE_FORMAT_GRP                               :0x0
10:03:17: COPY flag                                     :0x1
10:03:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:03:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:03:17: File_Format                                   :0x0
10:03:17: CRC                                           :0x0
10:03:17: ####CSD Registe Values####  

10:03:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:03:17: ProductSerialNumber = 0x23482900
10:03:17: CardMaximumLBA      = 0x3b72400
10:03:17: CardCapacity        = 32G
10:03:17: Is card secure      = 0
10:03:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:03:17: [DVTCommonLib]###  LogicalWrite called
10:03:19: [ WriteLba(0x35BFF5C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 422 ] 
10:03:19: [DVTCommonLib]###  LogicalWrite Completed 

10:03:19: [DVTCommonLib]###  LogicalRead called
10:03:20: [ ReadLba(0x35BFF5C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 423 ] 
10:03:20: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:03:20: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:03:20: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 6 times 

10:03:20: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:03:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:03:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 424 ] 
10:03:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:03:20: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:03:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:03:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:03:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:03:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:03:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A40F0>, <py_sfcl.CommandDataDefinition object at 0x066A4570>) , Command count = 425 ] 
10:03:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:03:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A4600>, <py_sfcl.CommandDataDefinition object at 0x066A4630>) , Command count = 426 ] 
10:03:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:03:21: [ SetCardRCA(0x1, 0xD555) , Command count = 427 ] 
10:03:21: [DVTCommonLib]### Identification :Idenfication of card completed 

10:03:21: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:03:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:03:21: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:03:21: [ SetBusWidth(0x1) , Command count = 428 ] 
10:03:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:03:21: ####CSD Registe 2.0 Values####
10:03:21: CSD_STRUCTURE                                 :0x1
10:03:21: Reserv1                                       :0x0
10:03:21: Time Access 1 TAAC                            :0xe
10:03:21: Time Access 2 NSAC*100                        :0x0
10:03:21: Data Transfer Rate TRAN_SPEED                 :0x32
10:03:21: Card Command Classess CCC                     :0x5b5
10:03:21: Max Read Data Block Length  READ_BL_LEN       :0x9
10:03:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:03:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:03:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:03:21: DSR(driver stage register)  DSR_IMP           :0x0
10:03:21: Reserv2                                       :0x0
10:03:21: Device Size C_SIZE                            :0xedc8
10:03:21: Reserv3                                       :0x0
10:03:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:03:21: Erase Sector Size SECTOR_SIZE                 :0x7f
10:03:21: Write Protect Group Size WP_GRP_SIZE          :0x0
10:03:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:03:21: Reserv4                                       :0x0
10:03:21: Write Speed Factor R2W_FACTOR                 :0x2
10:03:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:03:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:03:21: FILE_FORMAT_GRP                               :0x0
10:03:21: COPY flag                                     :0x1
10:03:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:03:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:03:21: File_Format                                   :0x0
10:03:21: CRC                                           :0x0
10:03:21: ####CSD Registe Values####  

10:03:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:03:21: ProductSerialNumber = 0x23482900
10:03:21: CardMaximumLBA      = 0x3b72400
10:03:21: CardCapacity        = 32G
10:03:21: Is card secure      = 0
10:03:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:03:21: [DVTCommonLib]###  LogicalWrite called
10:03:22: [ WriteLba(0x2217714, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 429 ] 
10:03:22: [DVTCommonLib]###  LogicalWrite Completed 

10:03:22: [DVTCommonLib]###  LogicalRead called
10:03:24: [ ReadLba(0x2217714, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 430 ] 
10:03:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:03:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:03:24: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 7 times 

10:03:24: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:03:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:03:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 431 ] 
10:03:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:03:24: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:03:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:03:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:03:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:03:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:03:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A44E0>, <py_sfcl.CommandDataDefinition object at 0x066A49F0>) , Command count = 432 ] 
10:03:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:03:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A4A20>, <py_sfcl.CommandDataDefinition object at 0x066A4870>) , Command count = 433 ] 
10:03:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:03:24: [ SetCardRCA(0x1, 0xD555) , Command count = 434 ] 
10:03:24: [DVTCommonLib]### Identification :Idenfication of card completed 

10:03:24: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:03:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:03:24: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:03:24: [ SetBusWidth(0x1) , Command count = 435 ] 
10:03:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:03:24: ####CSD Registe 2.0 Values####
10:03:24: CSD_STRUCTURE                                 :0x1
10:03:24: Reserv1                                       :0x0
10:03:24: Time Access 1 TAAC                            :0xe
10:03:24: Time Access 2 NSAC*100                        :0x0
10:03:24: Data Transfer Rate TRAN_SPEED                 :0x32
10:03:24: Card Command Classess CCC                     :0x5b5
10:03:24: Max Read Data Block Length  READ_BL_LEN       :0x9
10:03:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:03:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:03:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:03:24: DSR(driver stage register)  DSR_IMP           :0x0
10:03:24: Reserv2                                       :0x0
10:03:24: Device Size C_SIZE                            :0xedc8
10:03:24: Reserv3                                       :0x0
10:03:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:03:24: Erase Sector Size SECTOR_SIZE                 :0x7f
10:03:24: Write Protect Group Size WP_GRP_SIZE          :0x0
10:03:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:03:24: Reserv4                                       :0x0
10:03:24: Write Speed Factor R2W_FACTOR                 :0x2
10:03:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:03:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:03:24: FILE_FORMAT_GRP                               :0x0
10:03:24: COPY flag                                     :0x1
10:03:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:03:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:03:24: File_Format                                   :0x0
10:03:24: CRC                                           :0x0
10:03:24: ####CSD Registe Values####  

10:03:24: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:03:24: ProductSerialNumber = 0x23482900
10:03:24: CardMaximumLBA      = 0x3b72400
10:03:24: CardCapacity        = 32G
10:03:24: Is card secure      = 0
10:03:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:03:24: [DVTCommonLib]###  LogicalWrite called
10:03:26: [ WriteLba(0x3562CF8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 436 ] 
10:03:26: [DVTCommonLib]###  LogicalWrite Completed 

10:03:26: [DVTCommonLib]###  LogicalRead called
10:03:27: [ ReadLba(0x3562CF8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 437 ] 
10:03:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:03:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:03:27: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 8 times 

10:03:27: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:03:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:03:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 438 ] 
10:03:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:03:27: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:03:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:03:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:03:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:03:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:03:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A48D0>, <py_sfcl.CommandDataDefinition object at 0x066A4B40>) , Command count = 439 ] 
10:03:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:03:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6030>, <py_sfcl.CommandDataDefinition object at 0x066A6060>) , Command count = 440 ] 
10:03:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:03:27: [ SetCardRCA(0x1, 0xD555) , Command count = 441 ] 
10:03:27: [DVTCommonLib]### Identification :Idenfication of card completed 

10:03:27: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:03:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:03:27: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:03:27: [ SetBusWidth(0x1) , Command count = 442 ] 
10:03:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:03:27: ####CSD Registe 2.0 Values####
10:03:27: CSD_STRUCTURE                                 :0x1
10:03:27: Reserv1                                       :0x0
10:03:27: Time Access 1 TAAC                            :0xe
10:03:27: Time Access 2 NSAC*100                        :0x0
10:03:27: Data Transfer Rate TRAN_SPEED                 :0x32
10:03:27: Card Command Classess CCC                     :0x5b5
10:03:27: Max Read Data Block Length  READ_BL_LEN       :0x9
10:03:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:03:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:03:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:03:27: DSR(driver stage register)  DSR_IMP           :0x0
10:03:27: Reserv2                                       :0x0
10:03:27: Device Size C_SIZE                            :0xedc8
10:03:27: Reserv3                                       :0x0
10:03:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:03:27: Erase Sector Size SECTOR_SIZE                 :0x7f
10:03:27: Write Protect Group Size WP_GRP_SIZE          :0x0
10:03:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:03:27: Reserv4                                       :0x0
10:03:27: Write Speed Factor R2W_FACTOR                 :0x2
10:03:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:03:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:03:27: FILE_FORMAT_GRP                               :0x0
10:03:27: COPY flag                                     :0x1
10:03:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:03:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:03:27: File_Format                                   :0x0
10:03:27: CRC                                           :0x0
10:03:27: ####CSD Registe Values####  

10:03:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:03:27: ProductSerialNumber = 0x23482900
10:03:27: CardMaximumLBA      = 0x3b72400
10:03:27: CardCapacity        = 32G
10:03:27: Is card secure      = 0
10:03:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:03:27: [DVTCommonLib]###  LogicalWrite called
10:03:29: [ WriteLba(0x27D3B22, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 443 ] 
10:03:29: [DVTCommonLib]###  LogicalWrite Completed 

10:03:29: [DVTCommonLib]###  LogicalRead called
10:03:31: [ ReadLba(0x27D3B22, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 444 ] 
10:03:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:03:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:03:31: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 9 times 

10:03:31: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:03:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:03:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 445 ] 
10:03:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:03:31: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:03:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:03:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:03:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:03:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:03:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6210>, <py_sfcl.CommandDataDefinition object at 0x066A6180>) , Command count = 446 ] 
10:03:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:03:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A62D0>, <py_sfcl.CommandDataDefinition object at 0x066A4B70>) , Command count = 447 ] 
10:03:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:03:31: [ SetCardRCA(0x1, 0xD555) , Command count = 448 ] 
10:03:31: [DVTCommonLib]### Identification :Idenfication of card completed 

10:03:31: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:03:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:03:31: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:03:31: [ SetBusWidth(0x1) , Command count = 449 ] 
10:03:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:03:31: ####CSD Registe 2.0 Values####
10:03:31: CSD_STRUCTURE                                 :0x1
10:03:31: Reserv1                                       :0x0
10:03:31: Time Access 1 TAAC                            :0xe
10:03:31: Time Access 2 NSAC*100                        :0x0
10:03:31: Data Transfer Rate TRAN_SPEED                 :0x32
10:03:31: Card Command Classess CCC                     :0x5b5
10:03:31: Max Read Data Block Length  READ_BL_LEN       :0x9
10:03:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:03:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:03:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:03:31: DSR(driver stage register)  DSR_IMP           :0x0
10:03:31: Reserv2                                       :0x0
10:03:31: Device Size C_SIZE                            :0xedc8
10:03:31: Reserv3                                       :0x0
10:03:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:03:31: Erase Sector Size SECTOR_SIZE                 :0x7f
10:03:31: Write Protect Group Size WP_GRP_SIZE          :0x0
10:03:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:03:31: Reserv4                                       :0x0
10:03:31: Write Speed Factor R2W_FACTOR                 :0x2
10:03:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:03:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:03:31: FILE_FORMAT_GRP                               :0x0
10:03:31: COPY flag                                     :0x1
10:03:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:03:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:03:31: File_Format                                   :0x0
10:03:31: CRC                                           :0x0
10:03:31: ####CSD Registe Values####  

10:03:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:03:31: ProductSerialNumber = 0x23482900
10:03:31: CardMaximumLBA      = 0x3b72400
10:03:31: CardCapacity        = 32G
10:03:31: Is card secure      = 0
10:03:31: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:03:31: [DVTCommonLib]###  LogicalWrite called
10:03:32: [ WriteLba(0x1FC9D9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 450 ] 
10:03:32: [DVTCommonLib]###  LogicalWrite Completed 

10:03:32: [DVTCommonLib]###  LogicalRead called
10:03:34: [ ReadLba(0x1FC9D9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 451 ] 
10:03:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:03:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:03:34: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 10 times 

10:03:34: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:03:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:03:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 452 ] 
10:03:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:03:34: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:03:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:03:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:03:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:03:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:03:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A61B0>, <py_sfcl.CommandDataDefinition object at 0x066A6360>) , Command count = 453 ] 
10:03:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:03:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6750>, <py_sfcl.CommandDataDefinition object at 0x066A6570>) , Command count = 454 ] 
10:03:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:03:34: [ SetCardRCA(0x1, 0xD555) , Command count = 455 ] 
10:03:34: [DVTCommonLib]### Identification :Idenfication of card completed 

10:03:34: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:03:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:03:34: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:03:34: [ SetBusWidth(0x1) , Command count = 456 ] 
10:03:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:03:34: ####CSD Registe 2.0 Values####
10:03:34: CSD_STRUCTURE                                 :0x1
10:03:34: Reserv1                                       :0x0
10:03:34: Time Access 1 TAAC                            :0xe
10:03:34: Time Access 2 NSAC*100                        :0x0
10:03:34: Data Transfer Rate TRAN_SPEED                 :0x32
10:03:34: Card Command Classess CCC                     :0x5b5
10:03:34: Max Read Data Block Length  READ_BL_LEN       :0x9
10:03:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:03:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:03:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:03:34: DSR(driver stage register)  DSR_IMP           :0x0
10:03:34: Reserv2                                       :0x0
10:03:34: Device Size C_SIZE                            :0xedc8
10:03:34: Reserv3                                       :0x0
10:03:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:03:34: Erase Sector Size SECTOR_SIZE                 :0x7f
10:03:34: Write Protect Group Size WP_GRP_SIZE          :0x0
10:03:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:03:34: Reserv4                                       :0x0
10:03:34: Write Speed Factor R2W_FACTOR                 :0x2
10:03:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:03:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:03:34: FILE_FORMAT_GRP                               :0x0
10:03:34: COPY flag                                     :0x1
10:03:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:03:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:03:34: File_Format                                   :0x0
10:03:34: CRC                                           :0x0
10:03:34: ####CSD Registe Values####  

10:03:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:03:34: ProductSerialNumber = 0x23482900
10:03:34: CardMaximumLBA      = 0x3b72400
10:03:34: CardCapacity        = 32G
10:03:34: Is card secure      = 0
10:03:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:03:34: [DVTCommonLib]###  LogicalWrite called
10:03:36: [ WriteLba(0x3415D81, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 457 ] 
10:03:36: [DVTCommonLib]###  LogicalWrite Completed 

10:03:36: [DVTCommonLib]###  LogicalRead called
10:03:37: [ ReadLba(0x3415D81, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 458 ] 
10:03:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:03:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:03:37: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 11 times 

10:03:37: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:03:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:03:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 459 ] 
10:03:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:03:37: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:03:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:03:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:03:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:03:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:03:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6540>, <py_sfcl.CommandDataDefinition object at 0x066A6810>) , Command count = 460 ] 
10:03:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:03:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A68A0>, <py_sfcl.CommandDataDefinition object at 0x066A68D0>) , Command count = 461 ] 
10:03:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:03:37: [ SetCardRCA(0x1, 0xD555) , Command count = 462 ] 
10:03:38: [DVTCommonLib]### Identification :Idenfication of card completed 

10:03:38: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:03:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:03:38: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:03:38: [ SetBusWidth(0x1) , Command count = 463 ] 
10:03:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:03:38: ####CSD Registe 2.0 Values####
10:03:38: CSD_STRUCTURE                                 :0x1
10:03:38: Reserv1                                       :0x0
10:03:38: Time Access 1 TAAC                            :0xe
10:03:38: Time Access 2 NSAC*100                        :0x0
10:03:38: Data Transfer Rate TRAN_SPEED                 :0x32
10:03:38: Card Command Classess CCC                     :0x5b5
10:03:38: Max Read Data Block Length  READ_BL_LEN       :0x9
10:03:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:03:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:03:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:03:38: DSR(driver stage register)  DSR_IMP           :0x0
10:03:38: Reserv2                                       :0x0
10:03:38: Device Size C_SIZE                            :0xedc8
10:03:38: Reserv3                                       :0x0
10:03:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:03:38: Erase Sector Size SECTOR_SIZE                 :0x7f
10:03:38: Write Protect Group Size WP_GRP_SIZE          :0x0
10:03:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:03:38: Reserv4                                       :0x0
10:03:38: Write Speed Factor R2W_FACTOR                 :0x2
10:03:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:03:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:03:38: FILE_FORMAT_GRP                               :0x0
10:03:38: COPY flag                                     :0x1
10:03:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:03:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:03:38: File_Format                                   :0x0
10:03:38: CRC                                           :0x0
10:03:38: ####CSD Registe Values####  

10:03:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:03:38: ProductSerialNumber = 0x23482900
10:03:38: CardMaximumLBA      = 0x3b72400
10:03:38: CardCapacity        = 32G
10:03:38: Is card secure      = 0
10:03:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:03:38: [DVTCommonLib]###  LogicalWrite called
10:03:39: [ WriteLba(0x14B3BBC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 464 ] 
10:03:39: [DVTCommonLib]###  LogicalWrite Completed 

10:03:39: [DVTCommonLib]###  LogicalRead called
10:03:41: [ ReadLba(0x14B3BBC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 465 ] 
10:03:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:03:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:03:41: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 12 times 

10:03:41: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:03:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:03:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 466 ] 
10:03:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:03:41: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:03:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:03:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:03:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:03:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:03:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6780>, <py_sfcl.CommandDataDefinition object at 0x066A6C00>) , Command count = 467 ] 
10:03:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:03:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6C90>, <py_sfcl.CommandDataDefinition object at 0x066A6CC0>) , Command count = 468 ] 
10:03:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:03:41: [ SetCardRCA(0x1, 0xD555) , Command count = 469 ] 
10:03:41: [DVTCommonLib]### Identification :Idenfication of card completed 

10:03:41: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:03:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:03:41: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:03:41: [ SetBusWidth(0x1) , Command count = 470 ] 
10:03:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:03:41: ####CSD Registe 2.0 Values####
10:03:41: CSD_STRUCTURE                                 :0x1
10:03:41: Reserv1                                       :0x0
10:03:41: Time Access 1 TAAC                            :0xe
10:03:41: Time Access 2 NSAC*100                        :0x0
10:03:41: Data Transfer Rate TRAN_SPEED                 :0x32
10:03:41: Card Command Classess CCC                     :0x5b5
10:03:41: Max Read Data Block Length  READ_BL_LEN       :0x9
10:03:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:03:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:03:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:03:41: DSR(driver stage register)  DSR_IMP           :0x0
10:03:41: Reserv2                                       :0x0
10:03:41: Device Size C_SIZE                            :0xedc8
10:03:41: Reserv3                                       :0x0
10:03:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:03:41: Erase Sector Size SECTOR_SIZE                 :0x7f
10:03:41: Write Protect Group Size WP_GRP_SIZE          :0x0
10:03:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:03:41: Reserv4                                       :0x0
10:03:41: Write Speed Factor R2W_FACTOR                 :0x2
10:03:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:03:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:03:41: FILE_FORMAT_GRP                               :0x0
10:03:41: COPY flag                                     :0x1
10:03:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:03:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:03:41: File_Format                                   :0x0
10:03:41: CRC                                           :0x0
10:03:41: ####CSD Registe Values####  

10:03:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:03:41: ProductSerialNumber = 0x23482900
10:03:41: CardMaximumLBA      = 0x3b72400
10:03:41: CardCapacity        = 32G
10:03:41: Is card secure      = 0
10:03:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:03:41: [DVTCommonLib]###  LogicalWrite called
10:03:43: [ WriteLba(0x352789E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 471 ] 
10:03:43: [DVTCommonLib]###  LogicalWrite Completed 

10:03:43: [DVTCommonLib]###  LogicalRead called
10:03:44: [ ReadLba(0x352789E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 472 ] 
10:03:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:03:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:03:44: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 13 times 

10:03:44: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:03:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:03:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 473 ] 
10:03:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:03:44: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:03:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:03:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:03:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:03:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:03:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6B70>, <py_sfcl.CommandDataDefinition object at 0x066A6F60>) , Command count = 474 ] 
10:03:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:03:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6D20>, <py_sfcl.CommandDataDefinition object at 0x066A6D50>) , Command count = 475 ] 
10:03:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:03:44: [ SetCardRCA(0x1, 0xD555) , Command count = 476 ] 
10:03:44: [DVTCommonLib]### Identification :Idenfication of card completed 

10:03:44: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:03:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:03:44: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:03:44: [ SetBusWidth(0x1) , Command count = 477 ] 
10:03:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:03:44: ####CSD Registe 2.0 Values####
10:03:44: CSD_STRUCTURE                                 :0x1
10:03:44: Reserv1                                       :0x0
10:03:44: Time Access 1 TAAC                            :0xe
10:03:44: Time Access 2 NSAC*100                        :0x0
10:03:44: Data Transfer Rate TRAN_SPEED                 :0x32
10:03:44: Card Command Classess CCC                     :0x5b5
10:03:44: Max Read Data Block Length  READ_BL_LEN       :0x9
10:03:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:03:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:03:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:03:44: DSR(driver stage register)  DSR_IMP           :0x0
10:03:44: Reserv2                                       :0x0
10:03:44: Device Size C_SIZE                            :0xedc8
10:03:44: Reserv3                                       :0x0
10:03:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:03:44: Erase Sector Size SECTOR_SIZE                 :0x7f
10:03:44: Write Protect Group Size WP_GRP_SIZE          :0x0
10:03:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:03:44: Reserv4                                       :0x0
10:03:44: Write Speed Factor R2W_FACTOR                 :0x2
10:03:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:03:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:03:44: FILE_FORMAT_GRP                               :0x0
10:03:44: COPY flag                                     :0x1
10:03:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:03:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:03:44: File_Format                                   :0x0
10:03:44: CRC                                           :0x0
10:03:44: ####CSD Registe Values####  

10:03:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:03:44: ProductSerialNumber = 0x23482900
10:03:44: CardMaximumLBA      = 0x3b72400
10:03:44: CardCapacity        = 32G
10:03:44: Is card secure      = 0
10:03:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:03:44: [DVTCommonLib]###  LogicalWrite called
10:03:46: [ WriteLba(0x2DD0AD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 478 ] 
10:03:46: [DVTCommonLib]###  LogicalWrite Completed 

10:03:46: [DVTCommonLib]###  LogicalRead called
10:03:48: [ ReadLba(0x2DD0AD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 479 ] 
10:03:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:03:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:03:48: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 14 times 

10:03:48: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:03:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:03:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 480 ] 
10:03:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:03:48: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:03:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:03:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:03:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:03:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:03:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE1E0>, <py_sfcl.CommandDataDefinition object at 0x066AE210>) , Command count = 481 ] 
10:03:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:03:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE270>, <py_sfcl.CommandDataDefinition object at 0x066AE2A0>) , Command count = 482 ] 
10:03:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:03:48: [ SetCardRCA(0x1, 0xD555) , Command count = 483 ] 
10:03:48: [DVTCommonLib]### Identification :Idenfication of card completed 

10:03:48: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:03:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:03:48: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:03:48: [ SetBusWidth(0x1) , Command count = 484 ] 
10:03:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:03:48: ####CSD Registe 2.0 Values####
10:03:48: CSD_STRUCTURE                                 :0x1
10:03:48: Reserv1                                       :0x0
10:03:48: Time Access 1 TAAC                            :0xe
10:03:48: Time Access 2 NSAC*100                        :0x0
10:03:48: Data Transfer Rate TRAN_SPEED                 :0x32
10:03:48: Card Command Classess CCC                     :0x5b5
10:03:48: Max Read Data Block Length  READ_BL_LEN       :0x9
10:03:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:03:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:03:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:03:48: DSR(driver stage register)  DSR_IMP           :0x0
10:03:48: Reserv2                                       :0x0
10:03:48: Device Size C_SIZE                            :0xedc8
10:03:48: Reserv3                                       :0x0
10:03:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:03:48: Erase Sector Size SECTOR_SIZE                 :0x7f
10:03:48: Write Protect Group Size WP_GRP_SIZE          :0x0
10:03:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:03:48: Reserv4                                       :0x0
10:03:48: Write Speed Factor R2W_FACTOR                 :0x2
10:03:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:03:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:03:48: FILE_FORMAT_GRP                               :0x0
10:03:48: COPY flag                                     :0x1
10:03:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:03:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:03:48: File_Format                                   :0x0
10:03:48: CRC                                           :0x0
10:03:48: ####CSD Registe Values####  

10:03:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:03:48: ProductSerialNumber = 0x23482900
10:03:48: CardMaximumLBA      = 0x3b72400
10:03:48: CardCapacity        = 32G
10:03:48: Is card secure      = 0
10:03:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:03:48: [DVTCommonLib]###  LogicalWrite called
10:03:50: [ WriteLba(0x1A01153, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 485 ] 
10:03:50: [DVTCommonLib]###  LogicalWrite Completed 

10:03:50: [DVTCommonLib]###  LogicalRead called
10:03:51: [ ReadLba(0x1A01153, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 486 ] 
10:03:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:03:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:03:51: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 15 times 

10:03:51: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:03:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:03:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 487 ] 
10:03:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:03:51: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:03:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:03:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:03:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:03:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:03:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE150>, <py_sfcl.CommandDataDefinition object at 0x066AE5D0>) , Command count = 488 ] 
10:03:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:03:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE660>, <py_sfcl.CommandDataDefinition object at 0x066AE690>) , Command count = 489 ] 
10:03:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:03:51: [ SetCardRCA(0x1, 0xD555) , Command count = 490 ] 
10:03:51: [DVTCommonLib]### Identification :Idenfication of card completed 

10:03:51: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:03:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:03:51: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:03:51: [ SetBusWidth(0x1) , Command count = 491 ] 
10:03:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:03:51: ####CSD Registe 2.0 Values####
10:03:51: CSD_STRUCTURE                                 :0x1
10:03:51: Reserv1                                       :0x0
10:03:51: Time Access 1 TAAC                            :0xe
10:03:51: Time Access 2 NSAC*100                        :0x0
10:03:51: Data Transfer Rate TRAN_SPEED                 :0x32
10:03:51: Card Command Classess CCC                     :0x5b5
10:03:51: Max Read Data Block Length  READ_BL_LEN       :0x9
10:03:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:03:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:03:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:03:51: DSR(driver stage register)  DSR_IMP           :0x0
10:03:51: Reserv2                                       :0x0
10:03:51: Device Size C_SIZE                            :0xedc8
10:03:51: Reserv3                                       :0x0
10:03:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:03:51: Erase Sector Size SECTOR_SIZE                 :0x7f
10:03:51: Write Protect Group Size WP_GRP_SIZE          :0x0
10:03:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:03:51: Reserv4                                       :0x0
10:03:51: Write Speed Factor R2W_FACTOR                 :0x2
10:03:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:03:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:03:51: FILE_FORMAT_GRP                               :0x0
10:03:51: COPY flag                                     :0x1
10:03:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:03:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:03:51: File_Format                                   :0x0
10:03:51: CRC                                           :0x0
10:03:51: ####CSD Registe Values####  

10:03:51: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:03:51: ProductSerialNumber = 0x23482900
10:03:51: CardMaximumLBA      = 0x3b72400
10:03:51: CardCapacity        = 32G
10:03:51: Is card secure      = 0
10:03:51: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:03:51: [DVTCommonLib]###  LogicalWrite called
10:03:53: [ WriteLba(0x2241D45, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 492 ] 
10:03:53: [DVTCommonLib]###  LogicalWrite Completed 

10:03:53: [DVTCommonLib]###  LogicalRead called
10:03:55: [ ReadLba(0x2241D45, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 493 ] 
10:03:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:03:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:03:55: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 16 times 

10:03:55: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:03:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:03:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 494 ] 
10:03:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:03:55: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:03:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:03:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:03:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:03:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:03:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE540>, <py_sfcl.CommandDataDefinition object at 0x066AE9C0>) , Command count = 495 ] 
10:03:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:03:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEA50>, <py_sfcl.CommandDataDefinition object at 0x066AEA80>) , Command count = 496 ] 
10:03:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:03:55: [ SetCardRCA(0x1, 0xD555) , Command count = 497 ] 
10:03:55: [DVTCommonLib]### Identification :Idenfication of card completed 

10:03:55: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:03:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:03:55: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:03:55: [ SetBusWidth(0x1) , Command count = 498 ] 
10:03:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:03:55: ####CSD Registe 2.0 Values####
10:03:55: CSD_STRUCTURE                                 :0x1
10:03:55: Reserv1                                       :0x0
10:03:55: Time Access 1 TAAC                            :0xe
10:03:55: Time Access 2 NSAC*100                        :0x0
10:03:55: Data Transfer Rate TRAN_SPEED                 :0x32
10:03:55: Card Command Classess CCC                     :0x5b5
10:03:55: Max Read Data Block Length  READ_BL_LEN       :0x9
10:03:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:03:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:03:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:03:55: DSR(driver stage register)  DSR_IMP           :0x0
10:03:55: Reserv2                                       :0x0
10:03:55: Device Size C_SIZE                            :0xedc8
10:03:55: Reserv3                                       :0x0
10:03:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:03:55: Erase Sector Size SECTOR_SIZE                 :0x7f
10:03:55: Write Protect Group Size WP_GRP_SIZE          :0x0
10:03:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:03:55: Reserv4                                       :0x0
10:03:55: Write Speed Factor R2W_FACTOR                 :0x2
10:03:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:03:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:03:55: FILE_FORMAT_GRP                               :0x0
10:03:55: COPY flag                                     :0x1
10:03:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:03:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:03:55: File_Format                                   :0x0
10:03:55: CRC                                           :0x0
10:03:55: ####CSD Registe Values####  

10:03:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:03:55: ProductSerialNumber = 0x23482900
10:03:55: CardMaximumLBA      = 0x3b72400
10:03:55: CardCapacity        = 32G
10:03:55: Is card secure      = 0
10:03:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:03:55: [DVTCommonLib]###  LogicalWrite called
10:03:57: [ WriteLba(0x32D8265, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 499 ] 
10:03:57: [DVTCommonLib]###  LogicalWrite Completed 

10:03:57: [DVTCommonLib]###  LogicalRead called
10:03:58: [ ReadLba(0x32D8265, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 500 ] 
10:03:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:03:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:03:58: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 17 times 

10:03:58: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:03:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:03:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 501 ] 
10:03:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:03:58: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:03:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:03:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:03:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:03:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:03:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE930>, <py_sfcl.CommandDataDefinition object at 0x066AEDB0>) , Command count = 502 ] 
10:03:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:03:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEE40>, <py_sfcl.CommandDataDefinition object at 0x066AEE70>) , Command count = 503 ] 
10:03:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:03:58: [ SetCardRCA(0x1, 0xD555) , Command count = 504 ] 
10:03:58: [DVTCommonLib]### Identification :Idenfication of card completed 

10:03:58: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:03:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:03:58: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:03:58: [ SetBusWidth(0x1) , Command count = 505 ] 
10:03:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:03:58: ####CSD Registe 2.0 Values####
10:03:58: CSD_STRUCTURE                                 :0x1
10:03:58: Reserv1                                       :0x0
10:03:58: Time Access 1 TAAC                            :0xe
10:03:58: Time Access 2 NSAC*100                        :0x0
10:03:58: Data Transfer Rate TRAN_SPEED                 :0x32
10:03:58: Card Command Classess CCC                     :0x5b5
10:03:58: Max Read Data Block Length  READ_BL_LEN       :0x9
10:03:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:03:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:03:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:03:58: DSR(driver stage register)  DSR_IMP           :0x0
10:03:58: Reserv2                                       :0x0
10:03:58: Device Size C_SIZE                            :0xedc8
10:03:58: Reserv3                                       :0x0
10:03:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:03:58: Erase Sector Size SECTOR_SIZE                 :0x7f
10:03:58: Write Protect Group Size WP_GRP_SIZE          :0x0
10:03:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:03:58: Reserv4                                       :0x0
10:03:58: Write Speed Factor R2W_FACTOR                 :0x2
10:03:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:03:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:03:58: FILE_FORMAT_GRP                               :0x0
10:03:58: COPY flag                                     :0x1
10:03:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:03:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:03:58: File_Format                                   :0x0
10:03:58: CRC                                           :0x0
10:03:58: ####CSD Registe Values####  

10:03:58: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:03:58: ProductSerialNumber = 0x23482900
10:03:58: CardMaximumLBA      = 0x3b72400
10:03:58: CardCapacity        = 32G
10:03:58: Is card secure      = 0
10:03:58: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:03:58: [DVTCommonLib]###  LogicalWrite called
10:04:00: [ WriteLba(0x2AF6CF9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 506 ] 
10:04:00: [DVTCommonLib]###  LogicalWrite Completed 

10:04:00: [DVTCommonLib]###  LogicalRead called
10:04:02: [ ReadLba(0x2AF6CF9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 507 ] 
10:04:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:04:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:04:02: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 18 times 

10:04:02: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:04:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:04:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 508 ] 
10:04:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:04:02: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:04:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:04:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:04:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:04:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:04:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE7A80>, <py_sfcl.CommandDataDefinition object at 0x066B1120>) , Command count = 509 ] 
10:04:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:04:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE7540>, <py_sfcl.CommandDataDefinition object at 0x066AED20>) , Command count = 510 ] 
10:04:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:04:02: [ SetCardRCA(0x1, 0xD555) , Command count = 511 ] 
10:04:02: [DVTCommonLib]### Identification :Idenfication of card completed 

10:04:02: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:04:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:04:02: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:04:02: [ SetBusWidth(0x1) , Command count = 512 ] 
10:04:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:04:02: ####CSD Registe 2.0 Values####
10:04:02: CSD_STRUCTURE                                 :0x1
10:04:02: Reserv1                                       :0x0
10:04:02: Time Access 1 TAAC                            :0xe
10:04:02: Time Access 2 NSAC*100                        :0x0
10:04:02: Data Transfer Rate TRAN_SPEED                 :0x32
10:04:02: Card Command Classess CCC                     :0x5b5
10:04:02: Max Read Data Block Length  READ_BL_LEN       :0x9
10:04:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:04:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:04:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:04:02: DSR(driver stage register)  DSR_IMP           :0x0
10:04:02: Reserv2                                       :0x0
10:04:02: Device Size C_SIZE                            :0xedc8
10:04:02: Reserv3                                       :0x0
10:04:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:04:02: Erase Sector Size SECTOR_SIZE                 :0x7f
10:04:02: Write Protect Group Size WP_GRP_SIZE          :0x0
10:04:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:04:02: Reserv4                                       :0x0
10:04:02: Write Speed Factor R2W_FACTOR                 :0x2
10:04:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:04:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:04:02: FILE_FORMAT_GRP                               :0x0
10:04:02: COPY flag                                     :0x1
10:04:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:04:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:04:02: File_Format                                   :0x0
10:04:02: CRC                                           :0x0
10:04:02: ####CSD Registe Values####  

10:04:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:04:02: ProductSerialNumber = 0x23482900
10:04:02: CardMaximumLBA      = 0x3b72400
10:04:02: CardCapacity        = 32G
10:04:02: Is card secure      = 0
10:04:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:04:02: [DVTCommonLib]###  LogicalWrite called
10:04:03: [ WriteLba(0x322948, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 513 ] 
10:04:03: [DVTCommonLib]###  LogicalWrite Completed 

10:04:03: [DVTCommonLib]###  LogicalRead called
10:04:05: [ ReadLba(0x322948, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 514 ] 
10:04:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:04:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:04:05: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 19 times 

10:04:05: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:04:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:04:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 515 ] 
10:04:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:04:05: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:04:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:04:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:04:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:04:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:04:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDBC60>, <py_sfcl.CommandDataDefinition object at 0x066B1210>) , Command count = 516 ] 
10:04:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:04:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE7330>, <py_sfcl.CommandDataDefinition object at 0x066B11E0>) , Command count = 517 ] 
10:04:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:04:05: [ SetCardRCA(0x1, 0xD555) , Command count = 518 ] 
10:04:05: [DVTCommonLib]### Identification :Idenfication of card completed 

10:04:05: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:04:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:04:05: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:04:05: [ SetBusWidth(0x1) , Command count = 519 ] 
10:04:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:04:05: ####CSD Registe 2.0 Values####
10:04:05: CSD_STRUCTURE                                 :0x1
10:04:05: Reserv1                                       :0x0
10:04:05: Time Access 1 TAAC                            :0xe
10:04:05: Time Access 2 NSAC*100                        :0x0
10:04:05: Data Transfer Rate TRAN_SPEED                 :0x32
10:04:05: Card Command Classess CCC                     :0x5b5
10:04:05: Max Read Data Block Length  READ_BL_LEN       :0x9
10:04:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:04:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:04:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:04:05: DSR(driver stage register)  DSR_IMP           :0x0
10:04:05: Reserv2                                       :0x0
10:04:05: Device Size C_SIZE                            :0xedc8
10:04:05: Reserv3                                       :0x0
10:04:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:04:05: Erase Sector Size SECTOR_SIZE                 :0x7f
10:04:05: Write Protect Group Size WP_GRP_SIZE          :0x0
10:04:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:04:05: Reserv4                                       :0x0
10:04:05: Write Speed Factor R2W_FACTOR                 :0x2
10:04:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:04:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:04:05: FILE_FORMAT_GRP                               :0x0
10:04:05: COPY flag                                     :0x1
10:04:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:04:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:04:05: File_Format                                   :0x0
10:04:05: CRC                                           :0x0
10:04:05: ####CSD Registe Values####  

10:04:05: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:04:05: ProductSerialNumber = 0x23482900
10:04:05: CardMaximumLBA      = 0x3b72400
10:04:05: CardCapacity        = 32G
10:04:05: Is card secure      = 0
10:04:05: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:04:05: [DVTCommonLib]###  LogicalWrite called
10:04:07: [ WriteLba(0x2946D45, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 520 ] 
10:04:07: [DVTCommonLib]###  LogicalWrite Completed 

10:04:07: [DVTCommonLib]###  LogicalRead called
10:04:08: [ ReadLba(0x2946D45, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 521 ] 
10:04:08: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:04:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:04:08: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 20 times 

10:04:08: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:04:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:04:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 522 ] 
10:04:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:04:08: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:04:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:04:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:04:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:04:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:04:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEFBD0>, <py_sfcl.CommandDataDefinition object at 0x066B11B0>) , Command count = 523 ] 
10:04:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:04:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06033540>, <py_sfcl.CommandDataDefinition object at 0x066B1480>) , Command count = 524 ] 
10:04:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:04:08: [ SetCardRCA(0x1, 0xD555) , Command count = 525 ] 
10:04:08: [DVTCommonLib]### Identification :Idenfication of card completed 

10:04:08: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:04:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:04:08: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:04:08: [ SetBusWidth(0x1) , Command count = 526 ] 
10:04:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:04:08: ####CSD Registe 2.0 Values####
10:04:08: CSD_STRUCTURE                                 :0x1
10:04:08: Reserv1                                       :0x0
10:04:08: Time Access 1 TAAC                            :0xe
10:04:08: Time Access 2 NSAC*100                        :0x0
10:04:08: Data Transfer Rate TRAN_SPEED                 :0x32
10:04:08: Card Command Classess CCC                     :0x5b5
10:04:08: Max Read Data Block Length  READ_BL_LEN       :0x9
10:04:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:04:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:04:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:04:08: DSR(driver stage register)  DSR_IMP           :0x0
10:04:08: Reserv2                                       :0x0
10:04:08: Device Size C_SIZE                            :0xedc8
10:04:08: Reserv3                                       :0x0
10:04:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:04:08: Erase Sector Size SECTOR_SIZE                 :0x7f
10:04:08: Write Protect Group Size WP_GRP_SIZE          :0x0
10:04:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:04:08: Reserv4                                       :0x0
10:04:08: Write Speed Factor R2W_FACTOR                 :0x2
10:04:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:04:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:04:08: FILE_FORMAT_GRP                               :0x0
10:04:08: COPY flag                                     :0x1
10:04:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:04:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:04:08: File_Format                                   :0x0
10:04:08: CRC                                           :0x0
10:04:08: ####CSD Registe Values####  

10:04:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:04:09: ProductSerialNumber = 0x23482900
10:04:09: CardMaximumLBA      = 0x3b72400
10:04:09: CardCapacity        = 32G
10:04:09: Is card secure      = 0
10:04:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:04:09: [DVTCommonLib]###  LogicalWrite called
10:04:10: [ WriteLba(0x2A4EC0A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 527 ] 
10:04:10: [DVTCommonLib]###  LogicalWrite Completed 

10:04:10: [DVTCommonLib]###  LogicalRead called
10:04:12: [ ReadLba(0x2A4EC0A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 528 ] 
10:04:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:04:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:04:12: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 21 times 

10:04:12: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:04:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:04:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 529 ] 
10:04:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:04:12: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:04:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:04:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:04:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:04:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:04:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0200FC00>, <py_sfcl.CommandDataDefinition object at 0x06038690>) , Command count = 530 ] 
10:04:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:04:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060386C0>, <py_sfcl.CommandDataDefinition object at 0x066B1720>) , Command count = 531 ] 
10:04:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:04:12: [ SetCardRCA(0x1, 0xD555) , Command count = 532 ] 
10:04:12: [DVTCommonLib]### Identification :Idenfication of card completed 

10:04:12: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:04:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:04:12: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:04:12: [ SetBusWidth(0x1) , Command count = 533 ] 
10:04:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:04:12: ####CSD Registe 2.0 Values####
10:04:12: CSD_STRUCTURE                                 :0x1
10:04:12: Reserv1                                       :0x0
10:04:12: Time Access 1 TAAC                            :0xe
10:04:12: Time Access 2 NSAC*100                        :0x0
10:04:12: Data Transfer Rate TRAN_SPEED                 :0x32
10:04:12: Card Command Classess CCC                     :0x5b5
10:04:12: Max Read Data Block Length  READ_BL_LEN       :0x9
10:04:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:04:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:04:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:04:12: DSR(driver stage register)  DSR_IMP           :0x0
10:04:12: Reserv2                                       :0x0
10:04:12: Device Size C_SIZE                            :0xedc8
10:04:12: Reserv3                                       :0x0
10:04:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:04:12: Erase Sector Size SECTOR_SIZE                 :0x7f
10:04:12: Write Protect Group Size WP_GRP_SIZE          :0x0
10:04:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:04:12: Reserv4                                       :0x0
10:04:12: Write Speed Factor R2W_FACTOR                 :0x2
10:04:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:04:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:04:12: FILE_FORMAT_GRP                               :0x0
10:04:12: COPY flag                                     :0x1
10:04:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:04:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:04:12: File_Format                                   :0x0
10:04:12: CRC                                           :0x0
10:04:12: ####CSD Registe Values####  

10:04:12: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:04:12: ProductSerialNumber = 0x23482900
10:04:12: CardMaximumLBA      = 0x3b72400
10:04:12: CardCapacity        = 32G
10:04:12: Is card secure      = 0
10:04:12: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:04:12: [DVTCommonLib]###  LogicalWrite called
10:04:14: [ WriteLba(0x9FAF3A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 534 ] 
10:04:14: [DVTCommonLib]###  LogicalWrite Completed 

10:04:14: [DVTCommonLib]###  LogicalRead called
10:04:15: [ ReadLba(0x9FAF3A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 535 ] 
10:04:15: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:04:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:04:15: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 22 times 

10:04:15: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:04:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:04:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 536 ] 
10:04:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:04:15: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:04:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:04:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:04:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:04:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:04:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038660>, <py_sfcl.CommandDataDefinition object at 0x06038990>) , Command count = 537 ] 
10:04:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:04:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060389C0>, <py_sfcl.CommandDataDefinition object at 0x066B19C0>) , Command count = 538 ] 
10:04:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:04:15: [ SetCardRCA(0x1, 0xD555) , Command count = 539 ] 
10:04:15: [DVTCommonLib]### Identification :Idenfication of card completed 

10:04:15: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:04:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:04:15: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:04:15: [ SetBusWidth(0x1) , Command count = 540 ] 
10:04:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:04:15: ####CSD Registe 2.0 Values####
10:04:15: CSD_STRUCTURE                                 :0x1
10:04:15: Reserv1                                       :0x0
10:04:15: Time Access 1 TAAC                            :0xe
10:04:15: Time Access 2 NSAC*100                        :0x0
10:04:15: Data Transfer Rate TRAN_SPEED                 :0x32
10:04:15: Card Command Classess CCC                     :0x5b5
10:04:15: Max Read Data Block Length  READ_BL_LEN       :0x9
10:04:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:04:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:04:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:04:15: DSR(driver stage register)  DSR_IMP           :0x0
10:04:15: Reserv2                                       :0x0
10:04:15: Device Size C_SIZE                            :0xedc8
10:04:15: Reserv3                                       :0x0
10:04:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:04:15: Erase Sector Size SECTOR_SIZE                 :0x7f
10:04:15: Write Protect Group Size WP_GRP_SIZE          :0x0
10:04:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:04:15: Reserv4                                       :0x0
10:04:15: Write Speed Factor R2W_FACTOR                 :0x2
10:04:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:04:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:04:15: FILE_FORMAT_GRP                               :0x0
10:04:15: COPY flag                                     :0x1
10:04:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:04:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:04:15: File_Format                                   :0x0
10:04:15: CRC                                           :0x0
10:04:15: ####CSD Registe Values####  

10:04:15: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:04:15: ProductSerialNumber = 0x23482900
10:04:15: CardMaximumLBA      = 0x3b72400
10:04:15: CardCapacity        = 32G
10:04:15: Is card secure      = 0
10:04:15: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:04:15: [DVTCommonLib]###  LogicalWrite called
10:04:17: [ WriteLba(0x212E4C9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 541 ] 
10:04:17: [DVTCommonLib]###  LogicalWrite Completed 

10:04:17: [DVTCommonLib]###  LogicalRead called
10:04:19: [ ReadLba(0x212E4C9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 542 ] 
10:04:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:04:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:04:19: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 23 times 

10:04:19: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:04:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:04:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 543 ] 
10:04:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:04:19: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:04:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:04:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:04:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:04:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:04:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038960>, <py_sfcl.CommandDataDefinition object at 0x066B1C00>) , Command count = 544 ] 
10:04:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:04:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065921B0>, <py_sfcl.CommandDataDefinition object at 0x065921E0>) , Command count = 545 ] 
10:04:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:04:19: [ SetCardRCA(0x1, 0xD555) , Command count = 546 ] 
10:04:19: [DVTCommonLib]### Identification :Idenfication of card completed 

10:04:19: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:04:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:04:19: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:04:19: [ SetBusWidth(0x1) , Command count = 547 ] 
10:04:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:04:19: ####CSD Registe 2.0 Values####
10:04:19: CSD_STRUCTURE                                 :0x1
10:04:19: Reserv1                                       :0x0
10:04:19: Time Access 1 TAAC                            :0xe
10:04:19: Time Access 2 NSAC*100                        :0x0
10:04:19: Data Transfer Rate TRAN_SPEED                 :0x32
10:04:19: Card Command Classess CCC                     :0x5b5
10:04:19: Max Read Data Block Length  READ_BL_LEN       :0x9
10:04:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:04:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:04:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:04:19: DSR(driver stage register)  DSR_IMP           :0x0
10:04:19: Reserv2                                       :0x0
10:04:19: Device Size C_SIZE                            :0xedc8
10:04:19: Reserv3                                       :0x0
10:04:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:04:19: Erase Sector Size SECTOR_SIZE                 :0x7f
10:04:19: Write Protect Group Size WP_GRP_SIZE          :0x0
10:04:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:04:19: Reserv4                                       :0x0
10:04:19: Write Speed Factor R2W_FACTOR                 :0x2
10:04:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:04:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:04:19: FILE_FORMAT_GRP                               :0x0
10:04:19: COPY flag                                     :0x1
10:04:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:04:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:04:19: File_Format                                   :0x0
10:04:19: CRC                                           :0x0
10:04:19: ####CSD Registe Values####  

10:04:19: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:04:19: ProductSerialNumber = 0x23482900
10:04:19: CardMaximumLBA      = 0x3b72400
10:04:19: CardCapacity        = 32G
10:04:19: Is card secure      = 0
10:04:19: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:04:19: [DVTCommonLib]###  LogicalWrite called
10:04:20: [ WriteLba(0x1811CB4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 548 ] 
10:04:20: [DVTCommonLib]###  LogicalWrite Completed 

10:04:21: [DVTCommonLib]###  LogicalRead called
10:04:22: [ ReadLba(0x1811CB4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 549 ] 
10:04:22: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:04:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:04:22: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 24 times 

10:04:22: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:04:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:04:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 550 ] 
10:04:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:04:22: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:04:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:04:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:04:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:04:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:04:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038CC0>, <py_sfcl.CommandDataDefinition object at 0x0661DCF0>) , Command count = 551 ] 
10:04:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:04:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DE40>, <py_sfcl.CommandDataDefinition object at 0x066B1F60>) , Command count = 552 ] 
10:04:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:04:22: [ SetCardRCA(0x1, 0xD555) , Command count = 553 ] 
10:04:22: [DVTCommonLib]### Identification :Idenfication of card completed 

10:04:22: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:04:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:04:22: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:04:22: [ SetBusWidth(0x1) , Command count = 554 ] 
10:04:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:04:22: ####CSD Registe 2.0 Values####
10:04:22: CSD_STRUCTURE                                 :0x1
10:04:22: Reserv1                                       :0x0
10:04:22: Time Access 1 TAAC                            :0xe
10:04:22: Time Access 2 NSAC*100                        :0x0
10:04:22: Data Transfer Rate TRAN_SPEED                 :0x32
10:04:22: Card Command Classess CCC                     :0x5b5
10:04:22: Max Read Data Block Length  READ_BL_LEN       :0x9
10:04:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:04:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:04:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:04:22: DSR(driver stage register)  DSR_IMP           :0x0
10:04:22: Reserv2                                       :0x0
10:04:22: Device Size C_SIZE                            :0xedc8
10:04:22: Reserv3                                       :0x0
10:04:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:04:22: Erase Sector Size SECTOR_SIZE                 :0x7f
10:04:22: Write Protect Group Size WP_GRP_SIZE          :0x0
10:04:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:04:22: Reserv4                                       :0x0
10:04:22: Write Speed Factor R2W_FACTOR                 :0x2
10:04:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:04:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:04:22: FILE_FORMAT_GRP                               :0x0
10:04:22: COPY flag                                     :0x1
10:04:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:04:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:04:22: File_Format                                   :0x0
10:04:22: CRC                                           :0x0
10:04:22: ####CSD Registe Values####  

10:04:22: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:04:22: ProductSerialNumber = 0x23482900
10:04:22: CardMaximumLBA      = 0x3b72400
10:04:22: CardCapacity        = 32G
10:04:22: Is card secure      = 0
10:04:22: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:04:22: [DVTCommonLib]###  LogicalWrite called
10:04:24: [ WriteLba(0x1BFF1A1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 555 ] 
10:04:24: [DVTCommonLib]###  LogicalWrite Completed 

10:04:24: [DVTCommonLib]###  LogicalRead called
10:04:26: [ ReadLba(0x1BFF1A1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 556 ] 
10:04:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:04:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:04:26: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 25 times 

10:04:26: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:04:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:04:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 557 ] 
10:04:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:04:26: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:04:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:04:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:04:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:04:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:04:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1E70>, <py_sfcl.CommandDataDefinition object at 0x066B1E10>) , Command count = 558 ] 
10:04:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:04:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEF030>, <py_sfcl.CommandDataDefinition object at 0x066B1FC0>) , Command count = 559 ] 
10:04:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:04:26: [ SetCardRCA(0x1, 0xD555) , Command count = 560 ] 
10:04:26: [DVTCommonLib]### Identification :Idenfication of card completed 

10:04:26: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:04:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:04:26: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:04:26: [ SetBusWidth(0x1) , Command count = 561 ] 
10:04:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:04:26: ####CSD Registe 2.0 Values####
10:04:26: CSD_STRUCTURE                                 :0x1
10:04:26: Reserv1                                       :0x0
10:04:26: Time Access 1 TAAC                            :0xe
10:04:26: Time Access 2 NSAC*100                        :0x0
10:04:26: Data Transfer Rate TRAN_SPEED                 :0x32
10:04:26: Card Command Classess CCC                     :0x5b5
10:04:26: Max Read Data Block Length  READ_BL_LEN       :0x9
10:04:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:04:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:04:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:04:26: DSR(driver stage register)  DSR_IMP           :0x0
10:04:26: Reserv2                                       :0x0
10:04:26: Device Size C_SIZE                            :0xedc8
10:04:26: Reserv3                                       :0x0
10:04:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:04:26: Erase Sector Size SECTOR_SIZE                 :0x7f
10:04:26: Write Protect Group Size WP_GRP_SIZE          :0x0
10:04:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:04:26: Reserv4                                       :0x0
10:04:26: Write Speed Factor R2W_FACTOR                 :0x2
10:04:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:04:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:04:26: FILE_FORMAT_GRP                               :0x0
10:04:26: COPY flag                                     :0x1
10:04:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:04:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:04:26: File_Format                                   :0x0
10:04:26: CRC                                           :0x0
10:04:26: ####CSD Registe Values####  

10:04:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:04:26: ProductSerialNumber = 0x23482900
10:04:26: CardMaximumLBA      = 0x3b72400
10:04:26: CardCapacity        = 32G
10:04:26: Is card secure      = 0
10:04:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:04:26: [DVTCommonLib]###  LogicalWrite called
10:04:28: [ WriteLba(0x222D439, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 562 ] 
10:04:28: [DVTCommonLib]###  LogicalWrite Completed 

10:04:28: [DVTCommonLib]###  LogicalRead called
10:04:29: [ ReadLba(0x222D439, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 563 ] 
10:04:29: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:04:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:04:29: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 26 times 

10:04:29: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:04:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:04:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 564 ] 
10:04:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:04:29: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:04:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:04:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:04:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:04:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:04:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DDE0>, <py_sfcl.CommandDataDefinition object at 0x0662DBD0>) , Command count = 565 ] 
10:04:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:04:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A630>, <py_sfcl.CommandDataDefinition object at 0x0663A450>) , Command count = 566 ] 
10:04:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:04:29: [ SetCardRCA(0x1, 0xD555) , Command count = 567 ] 
10:04:29: [DVTCommonLib]### Identification :Idenfication of card completed 

10:04:29: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:04:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:04:29: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:04:29: [ SetBusWidth(0x1) , Command count = 568 ] 
10:04:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:04:29: ####CSD Registe 2.0 Values####
10:04:29: CSD_STRUCTURE                                 :0x1
10:04:29: Reserv1                                       :0x0
10:04:29: Time Access 1 TAAC                            :0xe
10:04:29: Time Access 2 NSAC*100                        :0x0
10:04:29: Data Transfer Rate TRAN_SPEED                 :0x32
10:04:29: Card Command Classess CCC                     :0x5b5
10:04:29: Max Read Data Block Length  READ_BL_LEN       :0x9
10:04:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:04:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:04:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:04:29: DSR(driver stage register)  DSR_IMP           :0x0
10:04:29: Reserv2                                       :0x0
10:04:29: Device Size C_SIZE                            :0xedc8
10:04:29: Reserv3                                       :0x0
10:04:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:04:29: Erase Sector Size SECTOR_SIZE                 :0x7f
10:04:29: Write Protect Group Size WP_GRP_SIZE          :0x0
10:04:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:04:29: Reserv4                                       :0x0
10:04:29: Write Speed Factor R2W_FACTOR                 :0x2
10:04:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:04:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:04:29: FILE_FORMAT_GRP                               :0x0
10:04:29: COPY flag                                     :0x1
10:04:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:04:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:04:29: File_Format                                   :0x0
10:04:29: CRC                                           :0x0
10:04:29: ####CSD Registe Values####  

10:04:29: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:04:29: ProductSerialNumber = 0x23482900
10:04:29: CardMaximumLBA      = 0x3b72400
10:04:29: CardCapacity        = 32G
10:04:29: Is card secure      = 0
10:04:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:04:29: [DVTCommonLib]###  LogicalWrite called
10:04:31: [ WriteLba(0x2DF4370, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 569 ] 
10:04:31: [DVTCommonLib]###  LogicalWrite Completed 

10:04:31: [DVTCommonLib]###  LogicalRead called
10:04:33: [ ReadLba(0x2DF4370, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 570 ] 
10:04:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:04:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:04:33: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 27 times 

10:04:33: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:04:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:04:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 571 ] 
10:04:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:04:33: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:04:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:04:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:04:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:04:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:04:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038ED0>, <py_sfcl.CommandDataDefinition object at 0x0663E120>) , Command count = 572 ] 
10:04:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:04:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A600>, <py_sfcl.CommandDataDefinition object at 0x0663A690>) , Command count = 573 ] 
10:04:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:04:33: [ SetCardRCA(0x1, 0xD555) , Command count = 574 ] 
10:04:33: [DVTCommonLib]### Identification :Idenfication of card completed 

10:04:33: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:04:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:04:33: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:04:33: [ SetBusWidth(0x1) , Command count = 575 ] 
10:04:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:04:33: ####CSD Registe 2.0 Values####
10:04:33: CSD_STRUCTURE                                 :0x1
10:04:33: Reserv1                                       :0x0
10:04:33: Time Access 1 TAAC                            :0xe
10:04:33: Time Access 2 NSAC*100                        :0x0
10:04:33: Data Transfer Rate TRAN_SPEED                 :0x32
10:04:33: Card Command Classess CCC                     :0x5b5
10:04:33: Max Read Data Block Length  READ_BL_LEN       :0x9
10:04:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:04:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:04:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:04:33: DSR(driver stage register)  DSR_IMP           :0x0
10:04:33: Reserv2                                       :0x0
10:04:33: Device Size C_SIZE                            :0xedc8
10:04:33: Reserv3                                       :0x0
10:04:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:04:33: Erase Sector Size SECTOR_SIZE                 :0x7f
10:04:33: Write Protect Group Size WP_GRP_SIZE          :0x0
10:04:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:04:33: Reserv4                                       :0x0
10:04:33: Write Speed Factor R2W_FACTOR                 :0x2
10:04:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:04:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:04:33: FILE_FORMAT_GRP                               :0x0
10:04:33: COPY flag                                     :0x1
10:04:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:04:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:04:33: File_Format                                   :0x0
10:04:33: CRC                                           :0x0
10:04:33: ####CSD Registe Values####  

10:04:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:04:33: ProductSerialNumber = 0x23482900
10:04:33: CardMaximumLBA      = 0x3b72400
10:04:33: CardCapacity        = 32G
10:04:33: Is card secure      = 0
10:04:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:04:33: [DVTCommonLib]###  LogicalWrite called
10:04:34: [ WriteLba(0x10F0F54, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 576 ] 
10:04:34: [DVTCommonLib]###  LogicalWrite Completed 

10:04:34: [DVTCommonLib]###  LogicalRead called
10:04:36: [ ReadLba(0x10F0F54, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 577 ] 
10:04:36: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:04:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:04:36: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 28 times 

10:04:36: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:04:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:04:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 578 ] 
10:04:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:04:36: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:04:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:04:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:04:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:04:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:04:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A5D0>, <py_sfcl.CommandDataDefinition object at 0x0663AD50>) , Command count = 579 ] 
10:04:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:04:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE73C0>, <py_sfcl.CommandDataDefinition object at 0x0663E1B0>) , Command count = 580 ] 
10:04:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:04:36: [ SetCardRCA(0x1, 0xD555) , Command count = 581 ] 
10:04:36: [DVTCommonLib]### Identification :Idenfication of card completed 

10:04:36: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:04:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:04:36: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:04:36: [ SetBusWidth(0x1) , Command count = 582 ] 
10:04:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:04:36: ####CSD Registe 2.0 Values####
10:04:36: CSD_STRUCTURE                                 :0x1
10:04:36: Reserv1                                       :0x0
10:04:36: Time Access 1 TAAC                            :0xe
10:04:36: Time Access 2 NSAC*100                        :0x0
10:04:36: Data Transfer Rate TRAN_SPEED                 :0x32
10:04:36: Card Command Classess CCC                     :0x5b5
10:04:36: Max Read Data Block Length  READ_BL_LEN       :0x9
10:04:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:04:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:04:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:04:36: DSR(driver stage register)  DSR_IMP           :0x0
10:04:36: Reserv2                                       :0x0
10:04:36: Device Size C_SIZE                            :0xedc8
10:04:36: Reserv3                                       :0x0
10:04:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:04:36: Erase Sector Size SECTOR_SIZE                 :0x7f
10:04:36: Write Protect Group Size WP_GRP_SIZE          :0x0
10:04:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:04:36: Reserv4                                       :0x0
10:04:36: Write Speed Factor R2W_FACTOR                 :0x2
10:04:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:04:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:04:36: FILE_FORMAT_GRP                               :0x0
10:04:36: COPY flag                                     :0x1
10:04:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:04:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:04:36: File_Format                                   :0x0
10:04:36: CRC                                           :0x0
10:04:36: ####CSD Registe Values####  

10:04:36: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:04:36: ProductSerialNumber = 0x23482900
10:04:36: CardMaximumLBA      = 0x3b72400
10:04:36: CardCapacity        = 32G
10:04:36: Is card secure      = 0
10:04:36: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:04:36: [DVTCommonLib]###  LogicalWrite called
10:04:38: [ WriteLba(0x2EE4AD7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 583 ] 
10:04:38: [DVTCommonLib]###  LogicalWrite Completed 

10:04:38: [DVTCommonLib]###  LogicalRead called
10:04:39: [ ReadLba(0x2EE4AD7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 584 ] 
10:04:39: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:04:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:04:39: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 29 times 

10:04:39: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:04:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:04:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 585 ] 
10:04:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:04:39: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:04:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:04:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:04:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:04:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:04:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DCC0>, <py_sfcl.CommandDataDefinition object at 0x0663E390>) , Command count = 586 ] 
10:04:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:04:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E060>, <py_sfcl.CommandDataDefinition object at 0x0663E1E0>) , Command count = 587 ] 
10:04:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:04:39: [ SetCardRCA(0x1, 0xD555) , Command count = 588 ] 
10:04:39: [DVTCommonLib]### Identification :Idenfication of card completed 

10:04:39: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:04:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:04:39: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:04:39: [ SetBusWidth(0x1) , Command count = 589 ] 
10:04:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:04:39: ####CSD Registe 2.0 Values####
10:04:39: CSD_STRUCTURE                                 :0x1
10:04:39: Reserv1                                       :0x0
10:04:39: Time Access 1 TAAC                            :0xe
10:04:39: Time Access 2 NSAC*100                        :0x0
10:04:39: Data Transfer Rate TRAN_SPEED                 :0x32
10:04:39: Card Command Classess CCC                     :0x5b5
10:04:39: Max Read Data Block Length  READ_BL_LEN       :0x9
10:04:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:04:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:04:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:04:39: DSR(driver stage register)  DSR_IMP           :0x0
10:04:39: Reserv2                                       :0x0
10:04:39: Device Size C_SIZE                            :0xedc8
10:04:39: Reserv3                                       :0x0
10:04:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:04:39: Erase Sector Size SECTOR_SIZE                 :0x7f
10:04:39: Write Protect Group Size WP_GRP_SIZE          :0x0
10:04:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:04:39: Reserv4                                       :0x0
10:04:39: Write Speed Factor R2W_FACTOR                 :0x2
10:04:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:04:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:04:39: FILE_FORMAT_GRP                               :0x0
10:04:39: COPY flag                                     :0x1
10:04:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:04:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:04:39: File_Format                                   :0x0
10:04:39: CRC                                           :0x0
10:04:39: ####CSD Registe Values####  

10:04:39: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:04:39: ProductSerialNumber = 0x23482900
10:04:39: CardMaximumLBA      = 0x3b72400
10:04:39: CardCapacity        = 32G
10:04:39: Is card secure      = 0
10:04:39: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:04:39: [DVTCommonLib]###  LogicalWrite called
10:04:41: [ WriteLba(0x1055391, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 590 ] 
10:04:41: [DVTCommonLib]###  LogicalWrite Completed 

10:04:41: [DVTCommonLib]###  LogicalRead called
10:04:43: [ ReadLba(0x1055391, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 591 ] 
10:04:43: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:04:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:04:43: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 30 times 

10:04:43: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:04:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:04:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 592 ] 
10:04:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:04:43: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:04:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:04:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:04:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:04:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:04:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E090>, <py_sfcl.CommandDataDefinition object at 0x0663E4E0>) , Command count = 593 ] 
10:04:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:04:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E570>, <py_sfcl.CommandDataDefinition object at 0x0663E5A0>) , Command count = 594 ] 
10:04:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:04:43: [ SetCardRCA(0x1, 0xD555) , Command count = 595 ] 
10:04:43: [DVTCommonLib]### Identification :Idenfication of card completed 

10:04:43: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:04:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:04:43: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:04:43: [ SetBusWidth(0x1) , Command count = 596 ] 
10:04:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:04:43: ####CSD Registe 2.0 Values####
10:04:43: CSD_STRUCTURE                                 :0x1
10:04:43: Reserv1                                       :0x0
10:04:43: Time Access 1 TAAC                            :0xe
10:04:43: Time Access 2 NSAC*100                        :0x0
10:04:43: Data Transfer Rate TRAN_SPEED                 :0x32
10:04:43: Card Command Classess CCC                     :0x5b5
10:04:43: Max Read Data Block Length  READ_BL_LEN       :0x9
10:04:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:04:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:04:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:04:43: DSR(driver stage register)  DSR_IMP           :0x0
10:04:43: Reserv2                                       :0x0
10:04:43: Device Size C_SIZE                            :0xedc8
10:04:43: Reserv3                                       :0x0
10:04:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:04:43: Erase Sector Size SECTOR_SIZE                 :0x7f
10:04:43: Write Protect Group Size WP_GRP_SIZE          :0x0
10:04:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:04:43: Reserv4                                       :0x0
10:04:43: Write Speed Factor R2W_FACTOR                 :0x2
10:04:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:04:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:04:43: FILE_FORMAT_GRP                               :0x0
10:04:43: COPY flag                                     :0x1
10:04:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:04:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:04:43: File_Format                                   :0x0
10:04:43: CRC                                           :0x0
10:04:43: ####CSD Registe Values####  

10:04:43: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:04:43: ProductSerialNumber = 0x23482900
10:04:43: CardMaximumLBA      = 0x3b72400
10:04:43: CardCapacity        = 32G
10:04:43: Is card secure      = 0
10:04:43: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:04:43: [DVTCommonLib]###  LogicalWrite called
10:04:45: [ WriteLba(0x13AFDC2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 597 ] 
10:04:45: [DVTCommonLib]###  LogicalWrite Completed 

10:04:45: [DVTCommonLib]###  LogicalRead called
10:04:46: [ ReadLba(0x13AFDC2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 598 ] 
10:04:46: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:04:46: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:04:46: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 31 times 

10:04:46: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:04:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:04:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 599 ] 
10:04:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:04:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:04:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:04:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:04:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:04:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:04:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E450>, <py_sfcl.CommandDataDefinition object at 0x0663E9C0>) , Command count = 600 ] 
10:04:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:04:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663EA50>, <py_sfcl.CommandDataDefinition object at 0x0663EAE0>) , Command count = 601 ] 
10:04:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:04:46: [ SetCardRCA(0x1, 0xD555) , Command count = 602 ] 
10:04:46: [DVTCommonLib]### Identification :Idenfication of card completed 

10:04:46: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:04:46: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:04:46: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:04:46: [ SetBusWidth(0x1) , Command count = 603 ] 
10:04:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:04:46: ####CSD Registe 2.0 Values####
10:04:46: CSD_STRUCTURE                                 :0x1
10:04:46: Reserv1                                       :0x0
10:04:46: Time Access 1 TAAC                            :0xe
10:04:46: Time Access 2 NSAC*100                        :0x0
10:04:46: Data Transfer Rate TRAN_SPEED                 :0x32
10:04:46: Card Command Classess CCC                     :0x5b5
10:04:46: Max Read Data Block Length  READ_BL_LEN       :0x9
10:04:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:04:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:04:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:04:46: DSR(driver stage register)  DSR_IMP           :0x0
10:04:46: Reserv2                                       :0x0
10:04:46: Device Size C_SIZE                            :0xedc8
10:04:46: Reserv3                                       :0x0
10:04:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:04:46: Erase Sector Size SECTOR_SIZE                 :0x7f
10:04:46: Write Protect Group Size WP_GRP_SIZE          :0x0
10:04:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:04:46: Reserv4                                       :0x0
10:04:46: Write Speed Factor R2W_FACTOR                 :0x2
10:04:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:04:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:04:46: FILE_FORMAT_GRP                               :0x0
10:04:46: COPY flag                                     :0x1
10:04:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:04:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:04:46: File_Format                                   :0x0
10:04:46: CRC                                           :0x0
10:04:46: ####CSD Registe Values####  

10:04:46: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:04:46: ProductSerialNumber = 0x23482900
10:04:46: CardMaximumLBA      = 0x3b72400
10:04:46: CardCapacity        = 32G
10:04:46: Is card secure      = 0
10:04:46: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:04:46: [DVTCommonLib]###  LogicalWrite called
10:04:48: [ WriteLba(0x4DC467, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 604 ] 
10:04:48: [DVTCommonLib]###  LogicalWrite Completed 

10:04:48: [DVTCommonLib]###  LogicalRead called
10:04:49: [ ReadLba(0x4DC467, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 605 ] 
10:04:49: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:04:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:04:49: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 32 times 

10:04:50: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:04:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:04:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 606 ] 
10:04:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:04:50: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:04:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:04:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:04:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:04:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:04:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E840>, <py_sfcl.CommandDataDefinition object at 0x0663E900>) , Command count = 607 ] 
10:04:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:04:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663EB40>, <py_sfcl.CommandDataDefinition object at 0x0663E750>) , Command count = 608 ] 
10:04:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:04:50: [ SetCardRCA(0x1, 0xD555) , Command count = 609 ] 
10:04:50: [DVTCommonLib]### Identification :Idenfication of card completed 

10:04:50: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:04:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:04:50: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:04:50: [ SetBusWidth(0x1) , Command count = 610 ] 
10:04:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:04:50: ####CSD Registe 2.0 Values####
10:04:50: CSD_STRUCTURE                                 :0x1
10:04:50: Reserv1                                       :0x0
10:04:50: Time Access 1 TAAC                            :0xe
10:04:50: Time Access 2 NSAC*100                        :0x0
10:04:50: Data Transfer Rate TRAN_SPEED                 :0x32
10:04:50: Card Command Classess CCC                     :0x5b5
10:04:50: Max Read Data Block Length  READ_BL_LEN       :0x9
10:04:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:04:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:04:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:04:50: DSR(driver stage register)  DSR_IMP           :0x0
10:04:50: Reserv2                                       :0x0
10:04:50: Device Size C_SIZE                            :0xedc8
10:04:50: Reserv3                                       :0x0
10:04:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:04:50: Erase Sector Size SECTOR_SIZE                 :0x7f
10:04:50: Write Protect Group Size WP_GRP_SIZE          :0x0
10:04:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:04:50: Reserv4                                       :0x0
10:04:50: Write Speed Factor R2W_FACTOR                 :0x2
10:04:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:04:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:04:50: FILE_FORMAT_GRP                               :0x0
10:04:50: COPY flag                                     :0x1
10:04:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:04:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:04:50: File_Format                                   :0x0
10:04:50: CRC                                           :0x0
10:04:50: ####CSD Registe Values####  

10:04:50: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:04:50: ProductSerialNumber = 0x23482900
10:04:50: CardMaximumLBA      = 0x3b72400
10:04:50: CardCapacity        = 32G
10:04:50: Is card secure      = 0
10:04:50: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:04:50: [DVTCommonLib]###  LogicalWrite called
10:04:51: [ WriteLba(0x2A7AB7F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 611 ] 
10:04:51: [DVTCommonLib]###  LogicalWrite Completed 

10:04:51: [DVTCommonLib]###  LogicalRead called
10:04:53: [ ReadLba(0x2A7AB7F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 612 ] 
10:04:53: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:04:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:04:53: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 33 times 

10:04:53: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:04:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:04:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 613 ] 
10:04:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:04:53: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:04:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:04:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:04:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:04:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:04:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663EBA0>, <py_sfcl.CommandDataDefinition object at 0x0663E3F0>) , Command count = 614 ] 
10:04:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:04:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E4B0>, <py_sfcl.CommandDataDefinition object at 0x0663E360>) , Command count = 615 ] 
10:04:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:04:53: [ SetCardRCA(0x1, 0xD555) , Command count = 616 ] 
10:04:53: [DVTCommonLib]### Identification :Idenfication of card completed 

10:04:53: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:04:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:04:53: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:04:53: [ SetBusWidth(0x1) , Command count = 617 ] 
10:04:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:04:53: ####CSD Registe 2.0 Values####
10:04:53: CSD_STRUCTURE                                 :0x1
10:04:53: Reserv1                                       :0x0
10:04:53: Time Access 1 TAAC                            :0xe
10:04:53: Time Access 2 NSAC*100                        :0x0
10:04:53: Data Transfer Rate TRAN_SPEED                 :0x32
10:04:53: Card Command Classess CCC                     :0x5b5
10:04:53: Max Read Data Block Length  READ_BL_LEN       :0x9
10:04:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:04:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:04:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:04:53: DSR(driver stage register)  DSR_IMP           :0x0
10:04:53: Reserv2                                       :0x0
10:04:53: Device Size C_SIZE                            :0xedc8
10:04:53: Reserv3                                       :0x0
10:04:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:04:53: Erase Sector Size SECTOR_SIZE                 :0x7f
10:04:53: Write Protect Group Size WP_GRP_SIZE          :0x0
10:04:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:04:53: Reserv4                                       :0x0
10:04:53: Write Speed Factor R2W_FACTOR                 :0x2
10:04:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:04:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:04:53: FILE_FORMAT_GRP                               :0x0
10:04:53: COPY flag                                     :0x1
10:04:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:04:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:04:53: File_Format                                   :0x0
10:04:53: CRC                                           :0x0
10:04:53: ####CSD Registe Values####  

10:04:53: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:04:53: ProductSerialNumber = 0x23482900
10:04:53: CardMaximumLBA      = 0x3b72400
10:04:53: CardCapacity        = 32G
10:04:53: Is card secure      = 0
10:04:53: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:04:53: [DVTCommonLib]###  LogicalWrite called
10:04:55: [ WriteLba(0x28C628E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 618 ] 
10:04:55: [DVTCommonLib]###  LogicalWrite Completed 

10:04:55: [DVTCommonLib]###  LogicalRead called
10:04:56: [ ReadLba(0x28C628E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 619 ] 
10:04:56: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:04:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:04:56: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 34 times 

10:04:56: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:04:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:04:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 620 ] 
10:04:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:04:56: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:04:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:04:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:04:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:04:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:04:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E660>, <py_sfcl.CommandDataDefinition object at 0x0663A4E0>) , Command count = 621 ] 
10:04:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:04:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1D20>, <py_sfcl.CommandDataDefinition object at 0x066B1CC0>) , Command count = 622 ] 
10:04:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:04:56: [ SetCardRCA(0x1, 0xD555) , Command count = 623 ] 
10:04:56: [DVTCommonLib]### Identification :Idenfication of card completed 

10:04:56: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:04:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:04:56: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:04:56: [ SetBusWidth(0x1) , Command count = 624 ] 
10:04:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:04:56: ####CSD Registe 2.0 Values####
10:04:56: CSD_STRUCTURE                                 :0x1
10:04:56: Reserv1                                       :0x0
10:04:56: Time Access 1 TAAC                            :0xe
10:04:56: Time Access 2 NSAC*100                        :0x0
10:04:56: Data Transfer Rate TRAN_SPEED                 :0x32
10:04:56: Card Command Classess CCC                     :0x5b5
10:04:56: Max Read Data Block Length  READ_BL_LEN       :0x9
10:04:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:04:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:04:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:04:56: DSR(driver stage register)  DSR_IMP           :0x0
10:04:56: Reserv2                                       :0x0
10:04:56: Device Size C_SIZE                            :0xedc8
10:04:56: Reserv3                                       :0x0
10:04:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:04:56: Erase Sector Size SECTOR_SIZE                 :0x7f
10:04:56: Write Protect Group Size WP_GRP_SIZE          :0x0
10:04:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:04:56: Reserv4                                       :0x0
10:04:56: Write Speed Factor R2W_FACTOR                 :0x2
10:04:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:04:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:04:56: FILE_FORMAT_GRP                               :0x0
10:04:56: COPY flag                                     :0x1
10:04:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:04:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:04:56: File_Format                                   :0x0
10:04:56: CRC                                           :0x0
10:04:56: ####CSD Registe Values####  

10:04:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:04:56: ProductSerialNumber = 0x23482900
10:04:56: CardMaximumLBA      = 0x3b72400
10:04:56: CardCapacity        = 32G
10:04:56: Is card secure      = 0
10:04:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:04:56: [DVTCommonLib]###  LogicalWrite called
10:04:58: [ WriteLba(0x29C5554, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 625 ] 
10:04:58: [DVTCommonLib]###  LogicalWrite Completed 

10:04:58: [DVTCommonLib]###  LogicalRead called
10:05:00: [ ReadLba(0x29C5554, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 626 ] 
10:05:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:05:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:05:00: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 35 times 

10:05:00: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:05:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:05:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 627 ] 
10:05:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:05:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:05:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:05:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:05:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:05:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:05:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A420>, <py_sfcl.CommandDataDefinition object at 0x0663AF00>) , Command count = 628 ] 
10:05:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:05:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1BD0>, <py_sfcl.CommandDataDefinition object at 0x066B1B10>) , Command count = 629 ] 
10:05:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:05:00: [ SetCardRCA(0x1, 0xD555) , Command count = 630 ] 
10:05:00: [DVTCommonLib]### Identification :Idenfication of card completed 

10:05:00: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:05:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:05:00: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:05:00: [ SetBusWidth(0x1) , Command count = 631 ] 
10:05:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:05:00: ####CSD Registe 2.0 Values####
10:05:00: CSD_STRUCTURE                                 :0x1
10:05:00: Reserv1                                       :0x0
10:05:00: Time Access 1 TAAC                            :0xe
10:05:00: Time Access 2 NSAC*100                        :0x0
10:05:00: Data Transfer Rate TRAN_SPEED                 :0x32
10:05:00: Card Command Classess CCC                     :0x5b5
10:05:00: Max Read Data Block Length  READ_BL_LEN       :0x9
10:05:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:05:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:05:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:05:00: DSR(driver stage register)  DSR_IMP           :0x0
10:05:00: Reserv2                                       :0x0
10:05:00: Device Size C_SIZE                            :0xedc8
10:05:00: Reserv3                                       :0x0
10:05:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:05:00: Erase Sector Size SECTOR_SIZE                 :0x7f
10:05:00: Write Protect Group Size WP_GRP_SIZE          :0x0
10:05:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:05:00: Reserv4                                       :0x0
10:05:00: Write Speed Factor R2W_FACTOR                 :0x2
10:05:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:05:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:05:00: FILE_FORMAT_GRP                               :0x0
10:05:00: COPY flag                                     :0x1
10:05:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:05:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:05:00: File_Format                                   :0x0
10:05:00: CRC                                           :0x0
10:05:00: ####CSD Registe Values####  

10:05:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:05:00: ProductSerialNumber = 0x23482900
10:05:00: CardMaximumLBA      = 0x3b72400
10:05:00: CardCapacity        = 32G
10:05:00: Is card secure      = 0
10:05:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:05:00: [DVTCommonLib]###  LogicalWrite called
10:05:01: [ WriteLba(0x2F87224, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 632 ] 
10:05:01: [DVTCommonLib]###  LogicalWrite Completed 

10:05:01: [DVTCommonLib]###  LogicalRead called
10:05:03: [ ReadLba(0x2F87224, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 633 ] 
10:05:03: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:05:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:05:03: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 36 times 

10:05:03: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:05:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:05:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 634 ] 
10:05:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:05:03: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:05:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:05:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:05:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:05:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:05:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1AE0>, <py_sfcl.CommandDataDefinition object at 0x066B19F0>) , Command count = 635 ] 
10:05:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:05:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1930>, <py_sfcl.CommandDataDefinition object at 0x066B1870>) , Command count = 636 ] 
10:05:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:05:03: [ SetCardRCA(0x1, 0xD555) , Command count = 637 ] 
10:05:03: [DVTCommonLib]### Identification :Idenfication of card completed 

10:05:03: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:05:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:05:03: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:05:03: [ SetBusWidth(0x1) , Command count = 638 ] 
10:05:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:05:03: ####CSD Registe 2.0 Values####
10:05:03: CSD_STRUCTURE                                 :0x1
10:05:03: Reserv1                                       :0x0
10:05:03: Time Access 1 TAAC                            :0xe
10:05:03: Time Access 2 NSAC*100                        :0x0
10:05:03: Data Transfer Rate TRAN_SPEED                 :0x32
10:05:03: Card Command Classess CCC                     :0x5b5
10:05:03: Max Read Data Block Length  READ_BL_LEN       :0x9
10:05:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:05:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:05:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:05:03: DSR(driver stage register)  DSR_IMP           :0x0
10:05:03: Reserv2                                       :0x0
10:05:03: Device Size C_SIZE                            :0xedc8
10:05:03: Reserv3                                       :0x0
10:05:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:05:03: Erase Sector Size SECTOR_SIZE                 :0x7f
10:05:03: Write Protect Group Size WP_GRP_SIZE          :0x0
10:05:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:05:03: Reserv4                                       :0x0
10:05:03: Write Speed Factor R2W_FACTOR                 :0x2
10:05:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:05:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:05:03: FILE_FORMAT_GRP                               :0x0
10:05:03: COPY flag                                     :0x1
10:05:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:05:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:05:03: File_Format                                   :0x0
10:05:03: CRC                                           :0x0
10:05:03: ####CSD Registe Values####  

10:05:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:05:03: ProductSerialNumber = 0x23482900
10:05:03: CardMaximumLBA      = 0x3b72400
10:05:03: CardCapacity        = 32G
10:05:03: Is card secure      = 0
10:05:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:05:03: [DVTCommonLib]###  LogicalWrite called
10:05:05: [ WriteLba(0x37AA222, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 639 ] 
10:05:05: [DVTCommonLib]###  LogicalWrite Completed 

10:05:05: [DVTCommonLib]###  LogicalRead called
10:05:06: [ ReadLba(0x37AA222, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 640 ] 
10:05:06: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:05:06: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:05:06: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 37 times 

10:05:06: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:05:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:05:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 641 ] 
10:05:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:05:07: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:05:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:05:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:05:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:05:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:05:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661DBA0>, <py_sfcl.CommandDataDefinition object at 0x066B1A20>) , Command count = 642 ] 
10:05:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:05:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1690>, <py_sfcl.CommandDataDefinition object at 0x066B15D0>) , Command count = 643 ] 
10:05:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:05:07: [ SetCardRCA(0x1, 0xD555) , Command count = 644 ] 
10:05:07: [DVTCommonLib]### Identification :Idenfication of card completed 

10:05:07: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:05:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:05:07: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:05:07: [ SetBusWidth(0x1) , Command count = 645 ] 
10:05:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:05:07: ####CSD Registe 2.0 Values####
10:05:07: CSD_STRUCTURE                                 :0x1
10:05:07: Reserv1                                       :0x0
10:05:07: Time Access 1 TAAC                            :0xe
10:05:07: Time Access 2 NSAC*100                        :0x0
10:05:07: Data Transfer Rate TRAN_SPEED                 :0x32
10:05:07: Card Command Classess CCC                     :0x5b5
10:05:07: Max Read Data Block Length  READ_BL_LEN       :0x9
10:05:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:05:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:05:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:05:07: DSR(driver stage register)  DSR_IMP           :0x0
10:05:07: Reserv2                                       :0x0
10:05:07: Device Size C_SIZE                            :0xedc8
10:05:07: Reserv3                                       :0x0
10:05:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:05:07: Erase Sector Size SECTOR_SIZE                 :0x7f
10:05:07: Write Protect Group Size WP_GRP_SIZE          :0x0
10:05:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:05:07: Reserv4                                       :0x0
10:05:07: Write Speed Factor R2W_FACTOR                 :0x2
10:05:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:05:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:05:07: FILE_FORMAT_GRP                               :0x0
10:05:07: COPY flag                                     :0x1
10:05:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:05:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:05:07: File_Format                                   :0x0
10:05:07: CRC                                           :0x0
10:05:07: ####CSD Registe Values####  

10:05:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:05:07: ProductSerialNumber = 0x23482900
10:05:07: CardMaximumLBA      = 0x3b72400
10:05:07: CardCapacity        = 32G
10:05:07: Is card secure      = 0
10:05:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:05:07: [DVTCommonLib]###  LogicalWrite called
10:05:08: [ WriteLba(0x16CDC77, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 646 ] 
10:05:08: [DVTCommonLib]###  LogicalWrite Completed 

10:05:08: [DVTCommonLib]###  LogicalRead called
10:05:10: [ ReadLba(0x16CDC77, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 647 ] 
10:05:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:05:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:05:10: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 38 times 

10:05:10: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:05:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:05:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 648 ] 
10:05:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:05:10: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:05:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:05:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:05:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:05:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:05:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1810>, <py_sfcl.CommandDataDefinition object at 0x066B14B0>) , Command count = 649 ] 
10:05:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:05:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663ECC0>, <py_sfcl.CommandDataDefinition object at 0x066B1330>) , Command count = 650 ] 
10:05:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:05:10: [ SetCardRCA(0x1, 0xD555) , Command count = 651 ] 
10:05:10: [DVTCommonLib]### Identification :Idenfication of card completed 

10:05:10: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:05:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:05:10: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:05:10: [ SetBusWidth(0x1) , Command count = 652 ] 
10:05:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:05:10: ####CSD Registe 2.0 Values####
10:05:10: CSD_STRUCTURE                                 :0x1
10:05:10: Reserv1                                       :0x0
10:05:10: Time Access 1 TAAC                            :0xe
10:05:10: Time Access 2 NSAC*100                        :0x0
10:05:10: Data Transfer Rate TRAN_SPEED                 :0x32
10:05:10: Card Command Classess CCC                     :0x5b5
10:05:10: Max Read Data Block Length  READ_BL_LEN       :0x9
10:05:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:05:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:05:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:05:10: DSR(driver stage register)  DSR_IMP           :0x0
10:05:10: Reserv2                                       :0x0
10:05:10: Device Size C_SIZE                            :0xedc8
10:05:10: Reserv3                                       :0x0
10:05:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:05:10: Erase Sector Size SECTOR_SIZE                 :0x7f
10:05:10: Write Protect Group Size WP_GRP_SIZE          :0x0
10:05:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:05:10: Reserv4                                       :0x0
10:05:10: Write Speed Factor R2W_FACTOR                 :0x2
10:05:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:05:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:05:10: FILE_FORMAT_GRP                               :0x0
10:05:10: COPY flag                                     :0x1
10:05:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:05:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:05:10: File_Format                                   :0x0
10:05:10: CRC                                           :0x0
10:05:10: ####CSD Registe Values####  

10:05:10: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:05:10: ProductSerialNumber = 0x23482900
10:05:10: CardMaximumLBA      = 0x3b72400
10:05:10: CardCapacity        = 32G
10:05:10: Is card secure      = 0
10:05:10: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:05:10: [DVTCommonLib]###  LogicalWrite called
10:05:12: [ WriteLba(0x1DB3CA2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 653 ] 
10:05:12: [DVTCommonLib]###  LogicalWrite Completed 

10:05:12: [DVTCommonLib]###  LogicalRead called
10:05:13: [ ReadLba(0x1DB3CA2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 654 ] 
10:05:13: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:05:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:05:13: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 39 times 

10:05:13: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:05:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:05:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 655 ] 
10:05:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:05:13: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:05:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:05:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:05:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:05:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:05:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B14E0>, <py_sfcl.CommandDataDefinition object at 0x0663ED80>) , Command count = 656 ] 
10:05:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:05:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEFC0>, <py_sfcl.CommandDataDefinition object at 0x066AEF30>) , Command count = 657 ] 
10:05:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:05:13: [ SetCardRCA(0x1, 0xD555) , Command count = 658 ] 
10:05:13: [DVTCommonLib]### Identification :Idenfication of card completed 

10:05:13: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:05:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:05:13: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:05:13: [ SetBusWidth(0x1) , Command count = 659 ] 
10:05:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:05:13: ####CSD Registe 2.0 Values####
10:05:13: CSD_STRUCTURE                                 :0x1
10:05:13: Reserv1                                       :0x0
10:05:13: Time Access 1 TAAC                            :0xe
10:05:13: Time Access 2 NSAC*100                        :0x0
10:05:13: Data Transfer Rate TRAN_SPEED                 :0x32
10:05:13: Card Command Classess CCC                     :0x5b5
10:05:13: Max Read Data Block Length  READ_BL_LEN       :0x9
10:05:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:05:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:05:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:05:13: DSR(driver stage register)  DSR_IMP           :0x0
10:05:13: Reserv2                                       :0x0
10:05:13: Device Size C_SIZE                            :0xedc8
10:05:13: Reserv3                                       :0x0
10:05:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:05:13: Erase Sector Size SECTOR_SIZE                 :0x7f
10:05:13: Write Protect Group Size WP_GRP_SIZE          :0x0
10:05:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:05:13: Reserv4                                       :0x0
10:05:13: Write Speed Factor R2W_FACTOR                 :0x2
10:05:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:05:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:05:13: FILE_FORMAT_GRP                               :0x0
10:05:13: COPY flag                                     :0x1
10:05:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:05:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:05:13: File_Format                                   :0x0
10:05:13: CRC                                           :0x0
10:05:13: ####CSD Registe Values####  

10:05:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:05:13: ProductSerialNumber = 0x23482900
10:05:13: CardMaximumLBA      = 0x3b72400
10:05:13: CardCapacity        = 32G
10:05:13: Is card secure      = 0
10:05:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:05:13: [DVTCommonLib]###  LogicalWrite called
10:05:15: [ WriteLba(0x3812635, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 660 ] 
10:05:15: [DVTCommonLib]###  LogicalWrite Completed 

10:05:15: [DVTCommonLib]###  LogicalRead called
10:05:17: [ ReadLba(0x3812635, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 661 ] 
10:05:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:05:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:05:17: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 40 times 

10:05:17: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:05:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:05:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 662 ] 
10:05:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:05:17: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:05:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:05:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:05:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:05:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:05:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1270>, <py_sfcl.CommandDataDefinition object at 0x066AEC00>) , Command count = 663 ] 
10:05:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:05:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEBA0>, <py_sfcl.CommandDataDefinition object at 0x066AEB10>) , Command count = 664 ] 
10:05:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:05:17: [ SetCardRCA(0x1, 0xD555) , Command count = 665 ] 
10:05:17: [DVTCommonLib]### Identification :Idenfication of card completed 

10:05:17: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:05:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:05:17: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:05:17: [ SetBusWidth(0x1) , Command count = 666 ] 
10:05:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:05:17: ####CSD Registe 2.0 Values####
10:05:17: CSD_STRUCTURE                                 :0x1
10:05:17: Reserv1                                       :0x0
10:05:17: Time Access 1 TAAC                            :0xe
10:05:17: Time Access 2 NSAC*100                        :0x0
10:05:17: Data Transfer Rate TRAN_SPEED                 :0x32
10:05:17: Card Command Classess CCC                     :0x5b5
10:05:17: Max Read Data Block Length  READ_BL_LEN       :0x9
10:05:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:05:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:05:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:05:17: DSR(driver stage register)  DSR_IMP           :0x0
10:05:17: Reserv2                                       :0x0
10:05:17: Device Size C_SIZE                            :0xedc8
10:05:17: Reserv3                                       :0x0
10:05:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:05:17: Erase Sector Size SECTOR_SIZE                 :0x7f
10:05:17: Write Protect Group Size WP_GRP_SIZE          :0x0
10:05:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:05:17: Reserv4                                       :0x0
10:05:17: Write Speed Factor R2W_FACTOR                 :0x2
10:05:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:05:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:05:17: FILE_FORMAT_GRP                               :0x0
10:05:17: COPY flag                                     :0x1
10:05:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:05:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:05:17: File_Format                                   :0x0
10:05:17: CRC                                           :0x0
10:05:17: ####CSD Registe Values####  

10:05:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:05:17: ProductSerialNumber = 0x23482900
10:05:17: CardMaximumLBA      = 0x3b72400
10:05:17: CardCapacity        = 32G
10:05:17: Is card secure      = 0
10:05:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:05:17: [DVTCommonLib]###  LogicalWrite called
10:05:18: [ WriteLba(0xCA4A17, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 667 ] 
10:05:18: [DVTCommonLib]###  LogicalWrite Completed 

10:05:18: [DVTCommonLib]###  LogicalRead called
10:05:20: [ ReadLba(0xCA4A17, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 668 ] 
10:05:20: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:05:20: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:05:20: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 41 times 

10:05:20: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:05:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:05:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 669 ] 
10:05:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:05:20: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:05:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:05:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:05:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:05:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:05:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AECC0>, <py_sfcl.CommandDataDefinition object at 0x066AE840>) , Command count = 670 ] 
10:05:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:05:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE720>, <py_sfcl.CommandDataDefinition object at 0x066AE7E0>) , Command count = 671 ] 
10:05:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:05:20: [ SetCardRCA(0x1, 0xD555) , Command count = 672 ] 
10:05:20: [DVTCommonLib]### Identification :Idenfication of card completed 

10:05:20: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:05:20: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:05:20: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:05:20: [ SetBusWidth(0x1) , Command count = 673 ] 
10:05:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:05:20: ####CSD Registe 2.0 Values####
10:05:20: CSD_STRUCTURE                                 :0x1
10:05:20: Reserv1                                       :0x0
10:05:20: Time Access 1 TAAC                            :0xe
10:05:20: Time Access 2 NSAC*100                        :0x0
10:05:20: Data Transfer Rate TRAN_SPEED                 :0x32
10:05:20: Card Command Classess CCC                     :0x5b5
10:05:20: Max Read Data Block Length  READ_BL_LEN       :0x9
10:05:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:05:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:05:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:05:20: DSR(driver stage register)  DSR_IMP           :0x0
10:05:20: Reserv2                                       :0x0
10:05:20: Device Size C_SIZE                            :0xedc8
10:05:20: Reserv3                                       :0x0
10:05:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:05:20: Erase Sector Size SECTOR_SIZE                 :0x7f
10:05:20: Write Protect Group Size WP_GRP_SIZE          :0x0
10:05:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:05:20: Reserv4                                       :0x0
10:05:20: Write Speed Factor R2W_FACTOR                 :0x2
10:05:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:05:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:05:20: FILE_FORMAT_GRP                               :0x0
10:05:20: COPY flag                                     :0x1
10:05:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:05:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:05:20: File_Format                                   :0x0
10:05:20: CRC                                           :0x0
10:05:20: ####CSD Registe Values####  

10:05:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:05:20: ProductSerialNumber = 0x23482900
10:05:20: CardMaximumLBA      = 0x3b72400
10:05:20: CardCapacity        = 32G
10:05:20: Is card secure      = 0
10:05:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:05:20: [DVTCommonLib]###  LogicalWrite called
10:05:22: [ WriteLba(0x31618DE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 674 ] 
10:05:22: [DVTCommonLib]###  LogicalWrite Completed 

10:05:22: [DVTCommonLib]###  LogicalRead called
10:05:23: [ ReadLba(0x31618DE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 675 ] 
10:05:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:05:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:05:23: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 42 times 

10:05:23: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:05:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:05:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 676 ] 
10:05:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:05:24: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:05:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:05:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:05:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:05:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:05:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE990>, <py_sfcl.CommandDataDefinition object at 0x066AE510>) , Command count = 677 ] 
10:05:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:05:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE3F0>, <py_sfcl.CommandDataDefinition object at 0x066AE120>) , Command count = 678 ] 
10:05:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:05:24: [ SetCardRCA(0x1, 0xD555) , Command count = 679 ] 
10:05:24: [DVTCommonLib]### Identification :Idenfication of card completed 

10:05:24: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:05:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:05:24: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:05:24: [ SetBusWidth(0x1) , Command count = 680 ] 
10:05:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:05:24: ####CSD Registe 2.0 Values####
10:05:24: CSD_STRUCTURE                                 :0x1
10:05:24: Reserv1                                       :0x0
10:05:24: Time Access 1 TAAC                            :0xe
10:05:24: Time Access 2 NSAC*100                        :0x0
10:05:24: Data Transfer Rate TRAN_SPEED                 :0x32
10:05:24: Card Command Classess CCC                     :0x5b5
10:05:24: Max Read Data Block Length  READ_BL_LEN       :0x9
10:05:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:05:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:05:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:05:24: DSR(driver stage register)  DSR_IMP           :0x0
10:05:24: Reserv2                                       :0x0
10:05:24: Device Size C_SIZE                            :0xedc8
10:05:24: Reserv3                                       :0x0
10:05:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:05:24: Erase Sector Size SECTOR_SIZE                 :0x7f
10:05:24: Write Protect Group Size WP_GRP_SIZE          :0x0
10:05:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:05:24: Reserv4                                       :0x0
10:05:24: Write Speed Factor R2W_FACTOR                 :0x2
10:05:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:05:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:05:24: FILE_FORMAT_GRP                               :0x0
10:05:24: COPY flag                                     :0x1
10:05:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:05:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:05:24: File_Format                                   :0x0
10:05:24: CRC                                           :0x0
10:05:24: ####CSD Registe Values####  

10:05:24: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:05:24: ProductSerialNumber = 0x23482900
10:05:24: CardMaximumLBA      = 0x3b72400
10:05:24: CardCapacity        = 32G
10:05:24: Is card secure      = 0
10:05:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:05:24: [DVTCommonLib]###  LogicalWrite called
10:05:25: [ WriteLba(0x7A12DC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 681 ] 
10:05:25: [DVTCommonLib]###  LogicalWrite Completed 

10:05:25: [DVTCommonLib]###  LogicalRead called
10:05:27: [ ReadLba(0x7A12DC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 682 ] 
10:05:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:05:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:05:27: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 43 times 

10:05:27: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:05:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:05:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 683 ] 
10:05:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:05:27: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:05:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:05:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:05:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:05:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:05:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE420>, <py_sfcl.CommandDataDefinition object at 0x066A6F30>) , Command count = 684 ] 
10:05:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:05:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6ED0>, <py_sfcl.CommandDataDefinition object at 0x066A6EA0>) , Command count = 685 ] 
10:05:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:05:27: [ SetCardRCA(0x1, 0xD555) , Command count = 686 ] 
10:05:27: [DVTCommonLib]### Identification :Idenfication of card completed 

10:05:27: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:05:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:05:27: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:05:27: [ SetBusWidth(0x1) , Command count = 687 ] 
10:05:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:05:27: ####CSD Registe 2.0 Values####
10:05:27: CSD_STRUCTURE                                 :0x1
10:05:27: Reserv1                                       :0x0
10:05:27: Time Access 1 TAAC                            :0xe
10:05:27: Time Access 2 NSAC*100                        :0x0
10:05:27: Data Transfer Rate TRAN_SPEED                 :0x32
10:05:27: Card Command Classess CCC                     :0x5b5
10:05:27: Max Read Data Block Length  READ_BL_LEN       :0x9
10:05:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:05:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:05:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:05:27: DSR(driver stage register)  DSR_IMP           :0x0
10:05:27: Reserv2                                       :0x0
10:05:27: Device Size C_SIZE                            :0xedc8
10:05:27: Reserv3                                       :0x0
10:05:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:05:27: Erase Sector Size SECTOR_SIZE                 :0x7f
10:05:27: Write Protect Group Size WP_GRP_SIZE          :0x0
10:05:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:05:27: Reserv4                                       :0x0
10:05:27: Write Speed Factor R2W_FACTOR                 :0x2
10:05:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:05:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:05:27: FILE_FORMAT_GRP                               :0x0
10:05:27: COPY flag                                     :0x1
10:05:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:05:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:05:27: File_Format                                   :0x0
10:05:27: CRC                                           :0x0
10:05:27: ####CSD Registe Values####  

10:05:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:05:27: ProductSerialNumber = 0x23482900
10:05:27: CardMaximumLBA      = 0x3b72400
10:05:27: CardCapacity        = 32G
10:05:27: Is card secure      = 0
10:05:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:05:27: [DVTCommonLib]###  LogicalWrite called
10:05:29: [ WriteLba(0xE924F1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 688 ] 
10:05:29: [DVTCommonLib]###  LogicalWrite Completed 

10:05:29: [DVTCommonLib]###  LogicalRead called
10:05:30: [ ReadLba(0xE924F1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 689 ] 
10:05:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:05:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:05:30: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 44 times 

10:05:30: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:05:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:05:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 690 ] 
10:05:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:05:30: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:05:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:05:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:05:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:05:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:05:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6D20>, <py_sfcl.CommandDataDefinition object at 0x066A6960>) , Command count = 691 ] 
10:05:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:05:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A60C0>, <py_sfcl.CommandDataDefinition object at 0x066A6870>) , Command count = 692 ] 
10:05:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:05:30: [ SetCardRCA(0x1, 0xD555) , Command count = 693 ] 
10:05:30: [DVTCommonLib]### Identification :Idenfication of card completed 

10:05:30: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:05:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:05:30: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:05:30: [ SetBusWidth(0x1) , Command count = 694 ] 
10:05:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:05:30: ####CSD Registe 2.0 Values####
10:05:30: CSD_STRUCTURE                                 :0x1
10:05:30: Reserv1                                       :0x0
10:05:30: Time Access 1 TAAC                            :0xe
10:05:30: Time Access 2 NSAC*100                        :0x0
10:05:30: Data Transfer Rate TRAN_SPEED                 :0x32
10:05:30: Card Command Classess CCC                     :0x5b5
10:05:30: Max Read Data Block Length  READ_BL_LEN       :0x9
10:05:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:05:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:05:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:05:30: DSR(driver stage register)  DSR_IMP           :0x0
10:05:30: Reserv2                                       :0x0
10:05:30: Device Size C_SIZE                            :0xedc8
10:05:30: Reserv3                                       :0x0
10:05:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:05:30: Erase Sector Size SECTOR_SIZE                 :0x7f
10:05:30: Write Protect Group Size WP_GRP_SIZE          :0x0
10:05:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:05:30: Reserv4                                       :0x0
10:05:30: Write Speed Factor R2W_FACTOR                 :0x2
10:05:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:05:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:05:30: FILE_FORMAT_GRP                               :0x0
10:05:30: COPY flag                                     :0x1
10:05:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:05:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:05:30: File_Format                                   :0x0
10:05:30: CRC                                           :0x0
10:05:30: ####CSD Registe Values####  

10:05:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:05:30: ProductSerialNumber = 0x23482900
10:05:30: CardMaximumLBA      = 0x3b72400
10:05:30: CardCapacity        = 32G
10:05:30: Is card secure      = 0
10:05:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:05:30: [DVTCommonLib]###  LogicalWrite called
10:05:32: [ WriteLba(0x380BE4D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 695 ] 
10:05:32: [DVTCommonLib]###  LogicalWrite Completed 

10:05:32: [DVTCommonLib]###  LogicalRead called
10:05:34: [ ReadLba(0x380BE4D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 696 ] 
10:05:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:05:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:05:34: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 45 times 

10:05:34: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:05:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:05:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 697 ] 
10:05:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:05:34: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:05:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:05:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:05:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:05:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:05:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6B40>, <py_sfcl.CommandDataDefinition object at 0x066A6210>) , Command count = 698 ] 
10:05:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:05:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6240>, <py_sfcl.CommandDataDefinition object at 0x066A62A0>) , Command count = 699 ] 
10:05:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:05:34: [ SetCardRCA(0x1, 0xD555) , Command count = 700 ] 
10:05:34: [DVTCommonLib]### Identification :Idenfication of card completed 

10:05:34: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:05:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:05:34: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:05:34: [ SetBusWidth(0x1) , Command count = 701 ] 
10:05:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:05:34: ####CSD Registe 2.0 Values####
10:05:34: CSD_STRUCTURE                                 :0x1
10:05:34: Reserv1                                       :0x0
10:05:34: Time Access 1 TAAC                            :0xe
10:05:34: Time Access 2 NSAC*100                        :0x0
10:05:34: Data Transfer Rate TRAN_SPEED                 :0x32
10:05:34: Card Command Classess CCC                     :0x5b5
10:05:34: Max Read Data Block Length  READ_BL_LEN       :0x9
10:05:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:05:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:05:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:05:34: DSR(driver stage register)  DSR_IMP           :0x0
10:05:34: Reserv2                                       :0x0
10:05:34: Device Size C_SIZE                            :0xedc8
10:05:34: Reserv3                                       :0x0
10:05:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:05:34: Erase Sector Size SECTOR_SIZE                 :0x7f
10:05:34: Write Protect Group Size WP_GRP_SIZE          :0x0
10:05:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:05:34: Reserv4                                       :0x0
10:05:34: Write Speed Factor R2W_FACTOR                 :0x2
10:05:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:05:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:05:34: FILE_FORMAT_GRP                               :0x0
10:05:34: COPY flag                                     :0x1
10:05:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:05:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:05:34: File_Format                                   :0x0
10:05:34: CRC                                           :0x0
10:05:34: ####CSD Registe Values####  

10:05:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:05:34: ProductSerialNumber = 0x23482900
10:05:34: CardMaximumLBA      = 0x3b72400
10:05:34: CardCapacity        = 32G
10:05:34: Is card secure      = 0
10:05:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:05:34: [DVTCommonLib]###  LogicalWrite called
10:05:35: [ WriteLba(0xB3E304, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 702 ] 
10:05:35: [DVTCommonLib]###  LogicalWrite Completed 

10:05:35: [DVTCommonLib]###  LogicalRead called
10:05:37: [ ReadLba(0xB3E304, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 703 ] 
10:05:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:05:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:05:37: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 46 times 

10:05:37: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:05:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:05:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 704 ] 
10:05:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:05:37: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:05:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:05:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:05:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:05:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:05:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6030>, <py_sfcl.CommandDataDefinition object at 0x066A61B0>) , Command count = 705 ] 
10:05:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:05:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6690>, <py_sfcl.CommandDataDefinition object at 0x066A6630>) , Command count = 706 ] 
10:05:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:05:37: [ SetCardRCA(0x1, 0xD555) , Command count = 707 ] 
10:05:37: [DVTCommonLib]### Identification :Idenfication of card completed 

10:05:37: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:05:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:05:37: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:05:37: [ SetBusWidth(0x1) , Command count = 708 ] 
10:05:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:05:37: ####CSD Registe 2.0 Values####
10:05:37: CSD_STRUCTURE                                 :0x1
10:05:37: Reserv1                                       :0x0
10:05:37: Time Access 1 TAAC                            :0xe
10:05:37: Time Access 2 NSAC*100                        :0x0
10:05:37: Data Transfer Rate TRAN_SPEED                 :0x32
10:05:37: Card Command Classess CCC                     :0x5b5
10:05:37: Max Read Data Block Length  READ_BL_LEN       :0x9
10:05:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:05:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:05:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:05:37: DSR(driver stage register)  DSR_IMP           :0x0
10:05:37: Reserv2                                       :0x0
10:05:37: Device Size C_SIZE                            :0xedc8
10:05:37: Reserv3                                       :0x0
10:05:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:05:37: Erase Sector Size SECTOR_SIZE                 :0x7f
10:05:37: Write Protect Group Size WP_GRP_SIZE          :0x0
10:05:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:05:37: Reserv4                                       :0x0
10:05:37: Write Speed Factor R2W_FACTOR                 :0x2
10:05:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:05:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:05:37: FILE_FORMAT_GRP                               :0x0
10:05:37: COPY flag                                     :0x1
10:05:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:05:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:05:37: File_Format                                   :0x0
10:05:37: CRC                                           :0x0
10:05:37: ####CSD Registe Values####  

10:05:37: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:05:37: ProductSerialNumber = 0x23482900
10:05:37: CardMaximumLBA      = 0x3b72400
10:05:37: CardCapacity        = 32G
10:05:37: Is card secure      = 0
10:05:37: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:05:37: [DVTCommonLib]###  LogicalWrite called
10:05:39: [ WriteLba(0xB33F84, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 709 ] 
10:05:39: [DVTCommonLib]###  LogicalWrite Completed 

10:05:39: [DVTCommonLib]###  LogicalRead called
10:05:40: [ ReadLba(0xB33F84, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 710 ] 
10:05:40: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:05:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:05:40: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 47 times 

10:05:40: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:05:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:05:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 711 ] 
10:05:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:05:41: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:05:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:05:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:05:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:05:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:05:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A62D0>, <py_sfcl.CommandDataDefinition object at 0x066A6540>) , Command count = 712 ] 
10:05:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:05:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6930>, <py_sfcl.CommandDataDefinition object at 0x066A6990>) , Command count = 713 ] 
10:05:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:05:41: [ SetCardRCA(0x1, 0xD555) , Command count = 714 ] 
10:05:41: [DVTCommonLib]### Identification :Idenfication of card completed 

10:05:41: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:05:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:05:41: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:05:41: [ SetBusWidth(0x1) , Command count = 715 ] 
10:05:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:05:41: ####CSD Registe 2.0 Values####
10:05:41: CSD_STRUCTURE                                 :0x1
10:05:41: Reserv1                                       :0x0
10:05:41: Time Access 1 TAAC                            :0xe
10:05:41: Time Access 2 NSAC*100                        :0x0
10:05:41: Data Transfer Rate TRAN_SPEED                 :0x32
10:05:41: Card Command Classess CCC                     :0x5b5
10:05:41: Max Read Data Block Length  READ_BL_LEN       :0x9
10:05:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:05:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:05:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:05:41: DSR(driver stage register)  DSR_IMP           :0x0
10:05:41: Reserv2                                       :0x0
10:05:41: Device Size C_SIZE                            :0xedc8
10:05:41: Reserv3                                       :0x0
10:05:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:05:41: Erase Sector Size SECTOR_SIZE                 :0x7f
10:05:41: Write Protect Group Size WP_GRP_SIZE          :0x0
10:05:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:05:41: Reserv4                                       :0x0
10:05:41: Write Speed Factor R2W_FACTOR                 :0x2
10:05:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:05:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:05:41: FILE_FORMAT_GRP                               :0x0
10:05:41: COPY flag                                     :0x1
10:05:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:05:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:05:41: File_Format                                   :0x0
10:05:41: CRC                                           :0x0
10:05:41: ####CSD Registe Values####  

10:05:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:05:41: ProductSerialNumber = 0x23482900
10:05:41: CardMaximumLBA      = 0x3b72400
10:05:41: CardCapacity        = 32G
10:05:41: Is card secure      = 0
10:05:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:05:41: [DVTCommonLib]###  LogicalWrite called
10:05:42: [ WriteLba(0x21122E0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 716 ] 
10:05:42: [DVTCommonLib]###  LogicalWrite Completed 

10:05:42: [DVTCommonLib]###  LogicalRead called
10:05:44: [ ReadLba(0x21122E0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 717 ] 
10:05:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:05:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:05:44: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 48 times 

10:05:44: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:05:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:05:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 718 ] 
10:05:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:05:44: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:05:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:05:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:05:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:05:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:05:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6750>, <py_sfcl.CommandDataDefinition object at 0x066A6780>) , Command count = 719 ] 
10:05:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:05:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6DB0>, <py_sfcl.CommandDataDefinition object at 0x066A6D80>) , Command count = 720 ] 
10:05:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:05:44: [ SetCardRCA(0x1, 0xD555) , Command count = 721 ] 
10:05:44: [DVTCommonLib]### Identification :Idenfication of card completed 

10:05:44: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:05:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:05:44: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:05:44: [ SetBusWidth(0x1) , Command count = 722 ] 
10:05:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:05:44: ####CSD Registe 2.0 Values####
10:05:44: CSD_STRUCTURE                                 :0x1
10:05:44: Reserv1                                       :0x0
10:05:44: Time Access 1 TAAC                            :0xe
10:05:44: Time Access 2 NSAC*100                        :0x0
10:05:44: Data Transfer Rate TRAN_SPEED                 :0x32
10:05:44: Card Command Classess CCC                     :0x5b5
10:05:44: Max Read Data Block Length  READ_BL_LEN       :0x9
10:05:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:05:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:05:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:05:44: DSR(driver stage register)  DSR_IMP           :0x0
10:05:44: Reserv2                                       :0x0
10:05:44: Device Size C_SIZE                            :0xedc8
10:05:44: Reserv3                                       :0x0
10:05:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:05:44: Erase Sector Size SECTOR_SIZE                 :0x7f
10:05:44: Write Protect Group Size WP_GRP_SIZE          :0x0
10:05:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:05:44: Reserv4                                       :0x0
10:05:44: Write Speed Factor R2W_FACTOR                 :0x2
10:05:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:05:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:05:44: FILE_FORMAT_GRP                               :0x0
10:05:44: COPY flag                                     :0x1
10:05:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:05:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:05:44: File_Format                                   :0x0
10:05:44: CRC                                           :0x0
10:05:44: ####CSD Registe Values####  

10:05:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:05:44: ProductSerialNumber = 0x23482900
10:05:44: CardMaximumLBA      = 0x3b72400
10:05:44: CardCapacity        = 32G
10:05:44: Is card secure      = 0
10:05:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:05:44: [DVTCommonLib]###  LogicalWrite called
10:05:46: [ WriteLba(0x1FD9F0A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 723 ] 
10:05:46: [DVTCommonLib]###  LogicalWrite Completed 

10:05:46: [DVTCommonLib]###  LogicalRead called
10:05:47: [ ReadLba(0x1FD9F0A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 724 ] 
10:05:47: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:05:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:05:47: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 49 times 

10:05:47: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:05:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:05:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 725 ] 
10:05:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:05:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:05:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:05:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:05:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:05:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:05:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A68A0>, <py_sfcl.CommandDataDefinition object at 0x066A6B70>) , Command count = 726 ] 
10:05:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:05:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6CF0>, <py_sfcl.CommandDataDefinition object at 0x066A6E70>) , Command count = 727 ] 
10:05:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:05:47: [ SetCardRCA(0x1, 0xD555) , Command count = 728 ] 
10:05:47: [DVTCommonLib]### Identification :Idenfication of card completed 

10:05:47: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:05:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:05:47: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:05:47: [ SetBusWidth(0x1) , Command count = 729 ] 
10:05:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:05:47: ####CSD Registe 2.0 Values####
10:05:47: CSD_STRUCTURE                                 :0x1
10:05:47: Reserv1                                       :0x0
10:05:47: Time Access 1 TAAC                            :0xe
10:05:47: Time Access 2 NSAC*100                        :0x0
10:05:47: Data Transfer Rate TRAN_SPEED                 :0x32
10:05:47: Card Command Classess CCC                     :0x5b5
10:05:47: Max Read Data Block Length  READ_BL_LEN       :0x9
10:05:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:05:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:05:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:05:47: DSR(driver stage register)  DSR_IMP           :0x0
10:05:47: Reserv2                                       :0x0
10:05:47: Device Size C_SIZE                            :0xedc8
10:05:47: Reserv3                                       :0x0
10:05:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:05:47: Erase Sector Size SECTOR_SIZE                 :0x7f
10:05:47: Write Protect Group Size WP_GRP_SIZE          :0x0
10:05:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:05:47: Reserv4                                       :0x0
10:05:47: Write Speed Factor R2W_FACTOR                 :0x2
10:05:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:05:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:05:47: FILE_FORMAT_GRP                               :0x0
10:05:47: COPY flag                                     :0x1
10:05:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:05:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:05:47: File_Format                                   :0x0
10:05:47: CRC                                           :0x0
10:05:47: ####CSD Registe Values####  

10:05:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:05:47: ProductSerialNumber = 0x23482900
10:05:47: CardMaximumLBA      = 0x3b72400
10:05:47: CardCapacity        = 32G
10:05:47: Is card secure      = 0
10:05:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:05:47: [DVTCommonLib]###  LogicalWrite called
10:05:49: [ WriteLba(0x2DF2E5F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 730 ] 
10:05:49: [DVTCommonLib]###  LogicalWrite Completed 

10:05:49: [DVTCommonLib]###  LogicalRead called
10:05:51: [ ReadLba(0x2DF2E5F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 731 ] 
10:05:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:05:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:05:51: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 50 times 

10:05:51: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:05:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:05:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 732 ] 
10:05:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:05:51: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:05:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:05:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:05:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:05:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:05:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE1E0>, <py_sfcl.CommandDataDefinition object at 0x066AE210>) , Command count = 733 ] 
10:05:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:05:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE300>, <py_sfcl.CommandDataDefinition object at 0x066A6E70>) , Command count = 734 ] 
10:05:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:05:51: [ SetCardRCA(0x1, 0xD555) , Command count = 735 ] 
10:05:51: [DVTCommonLib]### Identification :Idenfication of card completed 

10:05:51: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:05:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:05:51: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:05:51: [ SetBusWidth(0x1) , Command count = 736 ] 
10:05:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:05:51: ####CSD Registe 2.0 Values####
10:05:51: CSD_STRUCTURE                                 :0x1
10:05:51: Reserv1                                       :0x0
10:05:51: Time Access 1 TAAC                            :0xe
10:05:51: Time Access 2 NSAC*100                        :0x0
10:05:51: Data Transfer Rate TRAN_SPEED                 :0x32
10:05:51: Card Command Classess CCC                     :0x5b5
10:05:51: Max Read Data Block Length  READ_BL_LEN       :0x9
10:05:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:05:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:05:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:05:51: DSR(driver stage register)  DSR_IMP           :0x0
10:05:51: Reserv2                                       :0x0
10:05:51: Device Size C_SIZE                            :0xedc8
10:05:51: Reserv3                                       :0x0
10:05:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:05:51: Erase Sector Size SECTOR_SIZE                 :0x7f
10:05:51: Write Protect Group Size WP_GRP_SIZE          :0x0
10:05:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:05:51: Reserv4                                       :0x0
10:05:51: Write Speed Factor R2W_FACTOR                 :0x2
10:05:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:05:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:05:51: FILE_FORMAT_GRP                               :0x0
10:05:51: COPY flag                                     :0x1
10:05:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:05:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:05:51: File_Format                                   :0x0
10:05:51: CRC                                           :0x0
10:05:51: ####CSD Registe Values####  

10:05:51: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:05:51: ProductSerialNumber = 0x23482900
10:05:51: CardMaximumLBA      = 0x3b72400
10:05:51: CardCapacity        = 32G
10:05:51: Is card secure      = 0
10:05:51: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:05:51: [DVTCommonLib]###  LogicalWrite called
10:05:53: [ WriteLba(0x1739000, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 737 ] 
10:05:53: [DVTCommonLib]###  LogicalWrite Completed 

10:05:53: [DVTCommonLib]###  LogicalRead called
10:05:54: [ ReadLba(0x1739000, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 738 ] 
10:05:54: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:05:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:05:54: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 51 times 

10:05:54: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:05:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:05:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 739 ] 
10:05:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:05:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:05:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:05:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:05:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:05:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:05:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE2D0>, <py_sfcl.CommandDataDefinition object at 0x066AE150>) , Command count = 740 ] 
10:05:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:05:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE6F0>, <py_sfcl.CommandDataDefinition object at 0x066AE600>) , Command count = 741 ] 
10:05:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:05:54: [ SetCardRCA(0x1, 0xD555) , Command count = 742 ] 
10:05:55: [DVTCommonLib]### Identification :Idenfication of card completed 

10:05:55: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:05:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:05:55: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:05:55: [ SetBusWidth(0x1) , Command count = 743 ] 
10:05:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:05:55: ####CSD Registe 2.0 Values####
10:05:55: CSD_STRUCTURE                                 :0x1
10:05:55: Reserv1                                       :0x0
10:05:55: Time Access 1 TAAC                            :0xe
10:05:55: Time Access 2 NSAC*100                        :0x0
10:05:55: Data Transfer Rate TRAN_SPEED                 :0x32
10:05:55: Card Command Classess CCC                     :0x5b5
10:05:55: Max Read Data Block Length  READ_BL_LEN       :0x9
10:05:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:05:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:05:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:05:55: DSR(driver stage register)  DSR_IMP           :0x0
10:05:55: Reserv2                                       :0x0
10:05:55: Device Size C_SIZE                            :0xedc8
10:05:55: Reserv3                                       :0x0
10:05:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:05:55: Erase Sector Size SECTOR_SIZE                 :0x7f
10:05:55: Write Protect Group Size WP_GRP_SIZE          :0x0
10:05:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:05:55: Reserv4                                       :0x0
10:05:55: Write Speed Factor R2W_FACTOR                 :0x2
10:05:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:05:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:05:55: FILE_FORMAT_GRP                               :0x0
10:05:55: COPY flag                                     :0x1
10:05:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:05:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:05:55: File_Format                                   :0x0
10:05:55: CRC                                           :0x0
10:05:55: ####CSD Registe Values####  

10:05:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:05:55: ProductSerialNumber = 0x23482900
10:05:55: CardMaximumLBA      = 0x3b72400
10:05:55: CardCapacity        = 32G
10:05:55: Is card secure      = 0
10:05:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:05:55: [DVTCommonLib]###  LogicalWrite called
10:05:56: [ WriteLba(0x1C2EA93, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 744 ] 
10:05:56: [DVTCommonLib]###  LogicalWrite Completed 

10:05:56: [DVTCommonLib]###  LogicalRead called
10:05:58: [ ReadLba(0x1C2EA93, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 745 ] 
10:05:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:05:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:05:58: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 52 times 

10:05:58: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:05:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:05:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 746 ] 
10:05:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:05:58: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:05:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:05:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:05:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:05:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:05:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE270>, <py_sfcl.CommandDataDefinition object at 0x066AE540>) , Command count = 747 ] 
10:05:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:05:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEAE0>, <py_sfcl.CommandDataDefinition object at 0x066AEB40>) , Command count = 748 ] 
10:05:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:05:58: [ SetCardRCA(0x1, 0xD555) , Command count = 749 ] 
10:05:58: [DVTCommonLib]### Identification :Idenfication of card completed 

10:05:58: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:05:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:05:58: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:05:58: [ SetBusWidth(0x1) , Command count = 750 ] 
10:05:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:05:58: ####CSD Registe 2.0 Values####
10:05:58: CSD_STRUCTURE                                 :0x1
10:05:58: Reserv1                                       :0x0
10:05:58: Time Access 1 TAAC                            :0xe
10:05:58: Time Access 2 NSAC*100                        :0x0
10:05:58: Data Transfer Rate TRAN_SPEED                 :0x32
10:05:58: Card Command Classess CCC                     :0x5b5
10:05:58: Max Read Data Block Length  READ_BL_LEN       :0x9
10:05:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:05:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:05:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:05:58: DSR(driver stage register)  DSR_IMP           :0x0
10:05:58: Reserv2                                       :0x0
10:05:58: Device Size C_SIZE                            :0xedc8
10:05:58: Reserv3                                       :0x0
10:05:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:05:58: Erase Sector Size SECTOR_SIZE                 :0x7f
10:05:58: Write Protect Group Size WP_GRP_SIZE          :0x0
10:05:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:05:58: Reserv4                                       :0x0
10:05:58: Write Speed Factor R2W_FACTOR                 :0x2
10:05:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:05:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:05:58: FILE_FORMAT_GRP                               :0x0
10:05:58: COPY flag                                     :0x1
10:05:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:05:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:05:58: File_Format                                   :0x0
10:05:58: CRC                                           :0x0
10:05:58: ####CSD Registe Values####  

10:05:58: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:05:58: ProductSerialNumber = 0x23482900
10:05:58: CardMaximumLBA      = 0x3b72400
10:05:58: CardCapacity        = 32G
10:05:58: Is card secure      = 0
10:05:58: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:05:58: [DVTCommonLib]###  LogicalWrite called
10:06:00: [ WriteLba(0x2CF5BEB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 751 ] 
10:06:00: [DVTCommonLib]###  LogicalWrite Completed 

10:06:00: [DVTCommonLib]###  LogicalRead called
10:06:01: [ ReadLba(0x2CF5BEB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 752 ] 
10:06:01: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:06:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:06:01: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 53 times 

10:06:01: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:06:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:06:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 753 ] 
10:06:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:06:01: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:06:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:06:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:06:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:06:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:06:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE660>, <py_sfcl.CommandDataDefinition object at 0x066AE930>) , Command count = 754 ] 
10:06:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:06:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05EC0A20>, <py_sfcl.CommandDataDefinition object at 0x066AEF00>) , Command count = 755 ] 
10:06:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:06:01: [ SetCardRCA(0x1, 0xD555) , Command count = 756 ] 
10:06:01: [DVTCommonLib]### Identification :Idenfication of card completed 

10:06:01: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:06:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:06:01: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:06:01: [ SetBusWidth(0x1) , Command count = 757 ] 
10:06:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:06:01: ####CSD Registe 2.0 Values####
10:06:01: CSD_STRUCTURE                                 :0x1
10:06:01: Reserv1                                       :0x0
10:06:01: Time Access 1 TAAC                            :0xe
10:06:01: Time Access 2 NSAC*100                        :0x0
10:06:01: Data Transfer Rate TRAN_SPEED                 :0x32
10:06:01: Card Command Classess CCC                     :0x5b5
10:06:01: Max Read Data Block Length  READ_BL_LEN       :0x9
10:06:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:06:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:06:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:06:01: DSR(driver stage register)  DSR_IMP           :0x0
10:06:01: Reserv2                                       :0x0
10:06:01: Device Size C_SIZE                            :0xedc8
10:06:01: Reserv3                                       :0x0
10:06:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:06:01: Erase Sector Size SECTOR_SIZE                 :0x7f
10:06:01: Write Protect Group Size WP_GRP_SIZE          :0x0
10:06:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:06:01: Reserv4                                       :0x0
10:06:01: Write Speed Factor R2W_FACTOR                 :0x2
10:06:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:06:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:06:01: FILE_FORMAT_GRP                               :0x0
10:06:01: COPY flag                                     :0x1
10:06:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:06:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:06:01: File_Format                                   :0x0
10:06:01: CRC                                           :0x0
10:06:01: ####CSD Registe Values####  

10:06:01: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:06:01: ProductSerialNumber = 0x23482900
10:06:01: CardMaximumLBA      = 0x3b72400
10:06:01: CardCapacity        = 32G
10:06:01: Is card secure      = 0
10:06:01: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:06:01: [DVTCommonLib]###  LogicalWrite called
10:06:03: [ WriteLba(0x244DDC2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 758 ] 
10:06:03: [DVTCommonLib]###  LogicalWrite Completed 

10:06:03: [DVTCommonLib]###  LogicalRead called
10:06:05: [ ReadLba(0x244DDC2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 759 ] 
10:06:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:06:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:06:05: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 54 times 

10:06:05: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:06:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:06:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 760 ] 
10:06:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:06:05: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:06:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:06:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:06:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:06:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:06:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE7A80>, <py_sfcl.CommandDataDefinition object at 0x066B1120>) , Command count = 761 ] 
10:06:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:06:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDBDB0>, <py_sfcl.CommandDataDefinition object at 0x066AEC90>) , Command count = 762 ] 
10:06:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:06:05: [ SetCardRCA(0x1, 0xD555) , Command count = 763 ] 
10:06:05: [DVTCommonLib]### Identification :Idenfication of card completed 

10:06:05: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:06:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:06:05: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:06:05: [ SetBusWidth(0x1) , Command count = 764 ] 
10:06:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:06:05: ####CSD Registe 2.0 Values####
10:06:05: CSD_STRUCTURE                                 :0x1
10:06:05: Reserv1                                       :0x0
10:06:05: Time Access 1 TAAC                            :0xe
10:06:05: Time Access 2 NSAC*100                        :0x0
10:06:05: Data Transfer Rate TRAN_SPEED                 :0x32
10:06:05: Card Command Classess CCC                     :0x5b5
10:06:05: Max Read Data Block Length  READ_BL_LEN       :0x9
10:06:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:06:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:06:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:06:05: DSR(driver stage register)  DSR_IMP           :0x0
10:06:05: Reserv2                                       :0x0
10:06:05: Device Size C_SIZE                            :0xedc8
10:06:05: Reserv3                                       :0x0
10:06:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:06:05: Erase Sector Size SECTOR_SIZE                 :0x7f
10:06:05: Write Protect Group Size WP_GRP_SIZE          :0x0
10:06:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:06:05: Reserv4                                       :0x0
10:06:05: Write Speed Factor R2W_FACTOR                 :0x2
10:06:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:06:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:06:05: FILE_FORMAT_GRP                               :0x0
10:06:05: COPY flag                                     :0x1
10:06:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:06:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:06:05: File_Format                                   :0x0
10:06:05: CRC                                           :0x0
10:06:05: ####CSD Registe Values####  

10:06:05: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:06:05: ProductSerialNumber = 0x23482900
10:06:05: CardMaximumLBA      = 0x3b72400
10:06:05: CardCapacity        = 32G
10:06:05: Is card secure      = 0
10:06:05: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:06:05: [DVTCommonLib]###  LogicalWrite called
10:06:06: [ WriteLba(0x18E8EF9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 765 ] 
10:06:06: [DVTCommonLib]###  LogicalWrite Completed 

10:06:06: [DVTCommonLib]###  LogicalRead called
10:06:08: [ ReadLba(0x18E8EF9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 766 ] 
10:06:08: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:06:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:06:08: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 55 times 

10:06:08: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:06:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:06:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 767 ] 
10:06:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:06:08: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:06:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:06:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:06:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:06:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:06:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDBC60>, <py_sfcl.CommandDataDefinition object at 0x066B10C0>) , Command count = 768 ] 
10:06:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:06:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE73F0>, <py_sfcl.CommandDataDefinition object at 0x066AEC90>) , Command count = 769 ] 
10:06:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:06:08: [ SetCardRCA(0x1, 0xD555) , Command count = 770 ] 
10:06:08: [DVTCommonLib]### Identification :Idenfication of card completed 

10:06:08: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:06:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:06:08: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:06:08: [ SetBusWidth(0x1) , Command count = 771 ] 
10:06:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:06:08: ####CSD Registe 2.0 Values####
10:06:08: CSD_STRUCTURE                                 :0x1
10:06:08: Reserv1                                       :0x0
10:06:08: Time Access 1 TAAC                            :0xe
10:06:08: Time Access 2 NSAC*100                        :0x0
10:06:08: Data Transfer Rate TRAN_SPEED                 :0x32
10:06:08: Card Command Classess CCC                     :0x5b5
10:06:08: Max Read Data Block Length  READ_BL_LEN       :0x9
10:06:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:06:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:06:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:06:08: DSR(driver stage register)  DSR_IMP           :0x0
10:06:08: Reserv2                                       :0x0
10:06:08: Device Size C_SIZE                            :0xedc8
10:06:08: Reserv3                                       :0x0
10:06:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:06:08: Erase Sector Size SECTOR_SIZE                 :0x7f
10:06:08: Write Protect Group Size WP_GRP_SIZE          :0x0
10:06:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:06:08: Reserv4                                       :0x0
10:06:08: Write Speed Factor R2W_FACTOR                 :0x2
10:06:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:06:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:06:08: FILE_FORMAT_GRP                               :0x0
10:06:08: COPY flag                                     :0x1
10:06:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:06:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:06:08: File_Format                                   :0x0
10:06:08: CRC                                           :0x0
10:06:08: ####CSD Registe Values####  

10:06:08: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:06:08: ProductSerialNumber = 0x23482900
10:06:08: CardMaximumLBA      = 0x3b72400
10:06:08: CardCapacity        = 32G
10:06:08: Is card secure      = 0
10:06:08: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:06:08: [DVTCommonLib]###  LogicalWrite called
10:06:10: [ WriteLba(0x3563BC5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 772 ] 
10:06:10: [DVTCommonLib]###  LogicalWrite Completed 

10:06:10: [DVTCommonLib]###  LogicalRead called
10:06:11: [ ReadLba(0x3563BC5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 773 ] 
10:06:11: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:06:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:06:11: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 56 times 

10:06:11: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:06:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:06:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 774 ] 
10:06:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:06:11: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:06:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:06:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:06:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:06:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:06:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE7540>, <py_sfcl.CommandDataDefinition object at 0x05FEFBD0>) , Command count = 775 ] 
10:06:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:06:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06033C90>, <py_sfcl.CommandDataDefinition object at 0x066B1510>) , Command count = 776 ] 
10:06:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:06:12: [ SetCardRCA(0x1, 0xD555) , Command count = 777 ] 
10:06:12: [DVTCommonLib]### Identification :Idenfication of card completed 

10:06:12: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:06:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:06:12: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:06:12: [ SetBusWidth(0x1) , Command count = 778 ] 
10:06:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:06:12: ####CSD Registe 2.0 Values####
10:06:12: CSD_STRUCTURE                                 :0x1
10:06:12: Reserv1                                       :0x0
10:06:12: Time Access 1 TAAC                            :0xe
10:06:12: Time Access 2 NSAC*100                        :0x0
10:06:12: Data Transfer Rate TRAN_SPEED                 :0x32
10:06:12: Card Command Classess CCC                     :0x5b5
10:06:12: Max Read Data Block Length  READ_BL_LEN       :0x9
10:06:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:06:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:06:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:06:12: DSR(driver stage register)  DSR_IMP           :0x0
10:06:12: Reserv2                                       :0x0
10:06:12: Device Size C_SIZE                            :0xedc8
10:06:12: Reserv3                                       :0x0
10:06:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:06:12: Erase Sector Size SECTOR_SIZE                 :0x7f
10:06:12: Write Protect Group Size WP_GRP_SIZE          :0x0
10:06:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:06:12: Reserv4                                       :0x0
10:06:12: Write Speed Factor R2W_FACTOR                 :0x2
10:06:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:06:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:06:12: FILE_FORMAT_GRP                               :0x0
10:06:12: COPY flag                                     :0x1
10:06:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:06:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:06:12: File_Format                                   :0x0
10:06:12: CRC                                           :0x0
10:06:12: ####CSD Registe Values####  

10:06:12: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:06:12: ProductSerialNumber = 0x23482900
10:06:12: CardMaximumLBA      = 0x3b72400
10:06:12: CardCapacity        = 32G
10:06:12: Is card secure      = 0
10:06:12: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:06:12: [DVTCommonLib]###  LogicalWrite called
10:06:13: [ WriteLba(0x2C8D70, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 779 ] 
10:06:13: [DVTCommonLib]###  LogicalWrite Completed 

10:06:13: [DVTCommonLib]###  LogicalRead called
10:06:15: [ ReadLba(0x2C8D70, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 780 ] 
10:06:15: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:06:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:06:15: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 57 times 

10:06:15: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:06:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:06:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 781 ] 
10:06:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:06:15: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:06:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:06:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:06:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:06:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:06:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE7330>, <py_sfcl.CommandDataDefinition object at 0x0200FC00>) , Command count = 782 ] 
10:06:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:06:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060386F0>, <py_sfcl.CommandDataDefinition object at 0x066B17B0>) , Command count = 783 ] 
10:06:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:06:15: [ SetCardRCA(0x1, 0xD555) , Command count = 784 ] 
10:06:15: [DVTCommonLib]### Identification :Idenfication of card completed 

10:06:15: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:06:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:06:15: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:06:15: [ SetBusWidth(0x1) , Command count = 785 ] 
10:06:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:06:15: ####CSD Registe 2.0 Values####
10:06:15: CSD_STRUCTURE                                 :0x1
10:06:15: Reserv1                                       :0x0
10:06:15: Time Access 1 TAAC                            :0xe
10:06:15: Time Access 2 NSAC*100                        :0x0
10:06:15: Data Transfer Rate TRAN_SPEED                 :0x32
10:06:15: Card Command Classess CCC                     :0x5b5
10:06:15: Max Read Data Block Length  READ_BL_LEN       :0x9
10:06:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:06:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:06:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:06:15: DSR(driver stage register)  DSR_IMP           :0x0
10:06:15: Reserv2                                       :0x0
10:06:15: Device Size C_SIZE                            :0xedc8
10:06:15: Reserv3                                       :0x0
10:06:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:06:15: Erase Sector Size SECTOR_SIZE                 :0x7f
10:06:15: Write Protect Group Size WP_GRP_SIZE          :0x0
10:06:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:06:15: Reserv4                                       :0x0
10:06:15: Write Speed Factor R2W_FACTOR                 :0x2
10:06:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:06:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:06:15: FILE_FORMAT_GRP                               :0x0
10:06:15: COPY flag                                     :0x1
10:06:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:06:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:06:15: File_Format                                   :0x0
10:06:15: CRC                                           :0x0
10:06:15: ####CSD Registe Values####  

10:06:15: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:06:15: ProductSerialNumber = 0x23482900
10:06:15: CardMaximumLBA      = 0x3b72400
10:06:15: CardCapacity        = 32G
10:06:15: Is card secure      = 0
10:06:15: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:06:15: [DVTCommonLib]###  LogicalWrite called
10:06:17: [ WriteLba(0x2D05F25, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 786 ] 
10:06:17: [DVTCommonLib]###  LogicalWrite Completed 

10:06:17: [DVTCommonLib]###  LogicalRead called
10:06:18: [ ReadLba(0x2D05F25, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 787 ] 
10:06:18: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:06:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:06:18: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 58 times 

10:06:18: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:06:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:06:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 788 ] 
10:06:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:06:18: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:06:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:06:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:06:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:06:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:06:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06033540>, <py_sfcl.CommandDataDefinition object at 0x06038660>) , Command count = 789 ] 
10:06:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:06:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDBBD0>, <py_sfcl.CommandDataDefinition object at 0x066B1A50>) , Command count = 790 ] 
10:06:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:06:18: [ SetCardRCA(0x1, 0xD555) , Command count = 791 ] 
10:06:18: [DVTCommonLib]### Identification :Idenfication of card completed 

10:06:18: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:06:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:06:18: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:06:18: [ SetBusWidth(0x1) , Command count = 792 ] 
10:06:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:06:18: ####CSD Registe 2.0 Values####
10:06:18: CSD_STRUCTURE                                 :0x1
10:06:18: Reserv1                                       :0x0
10:06:18: Time Access 1 TAAC                            :0xe
10:06:18: Time Access 2 NSAC*100                        :0x0
10:06:18: Data Transfer Rate TRAN_SPEED                 :0x32
10:06:18: Card Command Classess CCC                     :0x5b5
10:06:18: Max Read Data Block Length  READ_BL_LEN       :0x9
10:06:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:06:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:06:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:06:18: DSR(driver stage register)  DSR_IMP           :0x0
10:06:18: Reserv2                                       :0x0
10:06:18: Device Size C_SIZE                            :0xedc8
10:06:18: Reserv3                                       :0x0
10:06:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:06:18: Erase Sector Size SECTOR_SIZE                 :0x7f
10:06:18: Write Protect Group Size WP_GRP_SIZE          :0x0
10:06:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:06:18: Reserv4                                       :0x0
10:06:18: Write Speed Factor R2W_FACTOR                 :0x2
10:06:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:06:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:06:18: FILE_FORMAT_GRP                               :0x0
10:06:18: COPY flag                                     :0x1
10:06:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:06:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:06:18: File_Format                                   :0x0
10:06:18: CRC                                           :0x0
10:06:18: ####CSD Registe Values####  

10:06:18: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:06:18: ProductSerialNumber = 0x23482900
10:06:18: CardMaximumLBA      = 0x3b72400
10:06:18: CardCapacity        = 32G
10:06:18: Is card secure      = 0
10:06:18: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:06:18: [DVTCommonLib]###  LogicalWrite called
10:06:20: [ WriteLba(0x506987, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 793 ] 
10:06:20: [DVTCommonLib]###  LogicalWrite Completed 

10:06:20: [DVTCommonLib]###  LogicalRead called
10:06:22: [ ReadLba(0x506987, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 794 ] 
10:06:22: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:06:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:06:22: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 59 times 

10:06:22: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:06:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:06:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 795 ] 
10:06:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:06:22: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:06:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:06:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:06:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:06:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:06:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060386C0>, <py_sfcl.CommandDataDefinition object at 0x06038960>) , Command count = 796 ] 
10:06:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:06:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06592360>, <py_sfcl.CommandDataDefinition object at 0x066B1CF0>) , Command count = 797 ] 
10:06:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:06:22: [ SetCardRCA(0x1, 0xD555) , Command count = 798 ] 
10:06:22: [DVTCommonLib]### Identification :Idenfication of card completed 

10:06:22: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:06:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:06:22: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:06:22: [ SetBusWidth(0x1) , Command count = 799 ] 
10:06:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:06:22: ####CSD Registe 2.0 Values####
10:06:22: CSD_STRUCTURE                                 :0x1
10:06:22: Reserv1                                       :0x0
10:06:22: Time Access 1 TAAC                            :0xe
10:06:22: Time Access 2 NSAC*100                        :0x0
10:06:22: Data Transfer Rate TRAN_SPEED                 :0x32
10:06:22: Card Command Classess CCC                     :0x5b5
10:06:22: Max Read Data Block Length  READ_BL_LEN       :0x9
10:06:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:06:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:06:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:06:22: DSR(driver stage register)  DSR_IMP           :0x0
10:06:22: Reserv2                                       :0x0
10:06:22: Device Size C_SIZE                            :0xedc8
10:06:22: Reserv3                                       :0x0
10:06:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:06:22: Erase Sector Size SECTOR_SIZE                 :0x7f
10:06:22: Write Protect Group Size WP_GRP_SIZE          :0x0
10:06:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:06:22: Reserv4                                       :0x0
10:06:22: Write Speed Factor R2W_FACTOR                 :0x2
10:06:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:06:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:06:22: FILE_FORMAT_GRP                               :0x0
10:06:22: COPY flag                                     :0x1
10:06:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:06:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:06:22: File_Format                                   :0x0
10:06:22: CRC                                           :0x0
10:06:22: ####CSD Registe Values####  

10:06:22: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:06:22: ProductSerialNumber = 0x23482900
10:06:22: CardMaximumLBA      = 0x3b72400
10:06:22: CardCapacity        = 32G
10:06:22: Is card secure      = 0
10:06:22: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:06:22: [DVTCommonLib]###  LogicalWrite called
10:06:23: [ WriteLba(0x2EBAD71, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 800 ] 
10:06:23: [DVTCommonLib]###  LogicalWrite Completed 

10:06:23: [DVTCommonLib]###  LogicalRead called
10:06:25: [ ReadLba(0x2EBAD71, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 801 ] 
10:06:25: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:06:25: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:06:25: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 60 times 

10:06:25: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:06:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:06:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 802 ] 
10:06:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:06:25: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:06:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:06:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:06:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:06:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:06:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060389C0>, <py_sfcl.CommandDataDefinition object at 0x06038CC0>) , Command count = 803 ] 
10:06:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:06:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DD80>, <py_sfcl.CommandDataDefinition object at 0x066B1F30>) , Command count = 804 ] 
10:06:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:06:25: [ SetCardRCA(0x1, 0xD555) , Command count = 805 ] 
10:06:25: [DVTCommonLib]### Identification :Idenfication of card completed 

10:06:25: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:06:25: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:06:25: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:06:25: [ SetBusWidth(0x1) , Command count = 806 ] 
10:06:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:06:25: ####CSD Registe 2.0 Values####
10:06:25: CSD_STRUCTURE                                 :0x1
10:06:25: Reserv1                                       :0x0
10:06:25: Time Access 1 TAAC                            :0xe
10:06:25: Time Access 2 NSAC*100                        :0x0
10:06:25: Data Transfer Rate TRAN_SPEED                 :0x32
10:06:25: Card Command Classess CCC                     :0x5b5
10:06:25: Max Read Data Block Length  READ_BL_LEN       :0x9
10:06:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:06:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:06:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:06:25: DSR(driver stage register)  DSR_IMP           :0x0
10:06:25: Reserv2                                       :0x0
10:06:25: Device Size C_SIZE                            :0xedc8
10:06:25: Reserv3                                       :0x0
10:06:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:06:25: Erase Sector Size SECTOR_SIZE                 :0x7f
10:06:25: Write Protect Group Size WP_GRP_SIZE          :0x0
10:06:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:06:25: Reserv4                                       :0x0
10:06:25: Write Speed Factor R2W_FACTOR                 :0x2
10:06:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:06:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:06:25: FILE_FORMAT_GRP                               :0x0
10:06:25: COPY flag                                     :0x1
10:06:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:06:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:06:25: File_Format                                   :0x0
10:06:25: CRC                                           :0x0
10:06:25: ####CSD Registe Values####  

10:06:25: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:06:25: ProductSerialNumber = 0x23482900
10:06:25: CardMaximumLBA      = 0x3b72400
10:06:25: CardCapacity        = 32G
10:06:25: Is card secure      = 0
10:06:25: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:06:25: [DVTCommonLib]###  LogicalWrite called
10:06:27: [ WriteLba(0x121C84A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 807 ] 
10:06:27: [DVTCommonLib]###  LogicalWrite Completed 

10:06:27: [DVTCommonLib]###  LogicalRead called
10:06:28: [ ReadLba(0x121C84A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 808 ] 
10:06:28: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:06:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:06:28: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 61 times 

10:06:28: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:06:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:06:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 809 ] 
10:06:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:06:28: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:06:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:06:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:06:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:06:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:06:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065921B0>, <py_sfcl.CommandDataDefinition object at 0x066B1E70>) , Command count = 810 ] 
10:06:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:06:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1DB0>, <py_sfcl.CommandDataDefinition object at 0x066B1ED0>) , Command count = 811 ] 
10:06:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:06:28: [ SetCardRCA(0x1, 0xD555) , Command count = 812 ] 
10:06:29: [DVTCommonLib]### Identification :Idenfication of card completed 

10:06:29: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:06:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:06:29: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:06:29: [ SetBusWidth(0x1) , Command count = 813 ] 
10:06:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:06:29: ####CSD Registe 2.0 Values####
10:06:29: CSD_STRUCTURE                                 :0x1
10:06:29: Reserv1                                       :0x0
10:06:29: Time Access 1 TAAC                            :0xe
10:06:29: Time Access 2 NSAC*100                        :0x0
10:06:29: Data Transfer Rate TRAN_SPEED                 :0x32
10:06:29: Card Command Classess CCC                     :0x5b5
10:06:29: Max Read Data Block Length  READ_BL_LEN       :0x9
10:06:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:06:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:06:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:06:29: DSR(driver stage register)  DSR_IMP           :0x0
10:06:29: Reserv2                                       :0x0
10:06:29: Device Size C_SIZE                            :0xedc8
10:06:29: Reserv3                                       :0x0
10:06:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:06:29: Erase Sector Size SECTOR_SIZE                 :0x7f
10:06:29: Write Protect Group Size WP_GRP_SIZE          :0x0
10:06:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:06:29: Reserv4                                       :0x0
10:06:29: Write Speed Factor R2W_FACTOR                 :0x2
10:06:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:06:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:06:29: FILE_FORMAT_GRP                               :0x0
10:06:29: COPY flag                                     :0x1
10:06:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:06:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:06:29: File_Format                                   :0x0
10:06:29: CRC                                           :0x0
10:06:29: ####CSD Registe Values####  

10:06:29: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:06:29: ProductSerialNumber = 0x23482900
10:06:29: CardMaximumLBA      = 0x3b72400
10:06:29: CardCapacity        = 32G
10:06:29: Is card secure      = 0
10:06:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:06:29: [DVTCommonLib]###  LogicalWrite called
10:06:30: [ WriteLba(0x2A8C660, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 814 ] 
10:06:30: [DVTCommonLib]###  LogicalWrite Completed 

10:06:30: [DVTCommonLib]###  LogicalRead called
10:06:32: [ ReadLba(0x2A8C660, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 815 ] 
10:06:32: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:06:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:06:32: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 62 times 

10:06:32: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:06:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:06:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 816 ] 
10:06:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:06:32: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:06:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:06:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:06:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:06:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:06:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DE40>, <py_sfcl.CommandDataDefinition object at 0x0662DDE0>) , Command count = 817 ] 
10:06:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:06:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661DC30>, <py_sfcl.CommandDataDefinition object at 0x0663A480>) , Command count = 818 ] 
10:06:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:06:32: [ SetCardRCA(0x1, 0xD555) , Command count = 819 ] 
10:06:32: [DVTCommonLib]### Identification :Idenfication of card completed 

10:06:32: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:06:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:06:32: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:06:32: [ SetBusWidth(0x1) , Command count = 820 ] 
10:06:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:06:32: ####CSD Registe 2.0 Values####
10:06:32: CSD_STRUCTURE                                 :0x1
10:06:32: Reserv1                                       :0x0
10:06:32: Time Access 1 TAAC                            :0xe
10:06:32: Time Access 2 NSAC*100                        :0x0
10:06:32: Data Transfer Rate TRAN_SPEED                 :0x32
10:06:32: Card Command Classess CCC                     :0x5b5
10:06:32: Max Read Data Block Length  READ_BL_LEN       :0x9
10:06:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:06:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:06:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:06:32: DSR(driver stage register)  DSR_IMP           :0x0
10:06:32: Reserv2                                       :0x0
10:06:32: Device Size C_SIZE                            :0xedc8
10:06:32: Reserv3                                       :0x0
10:06:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:06:32: Erase Sector Size SECTOR_SIZE                 :0x7f
10:06:32: Write Protect Group Size WP_GRP_SIZE          :0x0
10:06:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:06:32: Reserv4                                       :0x0
10:06:32: Write Speed Factor R2W_FACTOR                 :0x2
10:06:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:06:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:06:32: FILE_FORMAT_GRP                               :0x0
10:06:32: COPY flag                                     :0x1
10:06:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:06:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:06:32: File_Format                                   :0x0
10:06:32: CRC                                           :0x0
10:06:32: ####CSD Registe Values####  

10:06:32: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:06:32: ProductSerialNumber = 0x23482900
10:06:32: CardMaximumLBA      = 0x3b72400
10:06:32: CardCapacity        = 32G
10:06:32: Is card secure      = 0
10:06:32: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:06:32: [DVTCommonLib]###  LogicalWrite called
10:06:34: [ WriteLba(0x24D3102, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 821 ] 
10:06:34: [DVTCommonLib]###  LogicalWrite Completed 

10:06:34: [DVTCommonLib]###  LogicalRead called
10:06:35: [ ReadLba(0x24D3102, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 822 ] 
10:06:35: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:06:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:06:35: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 63 times 

10:06:35: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:06:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:06:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 823 ] 
10:06:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:06:35: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:06:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:06:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:06:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:06:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:06:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEF030>, <py_sfcl.CommandDataDefinition object at 0x06038ED0>) , Command count = 824 ] 
10:06:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:06:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663ADE0>, <py_sfcl.CommandDataDefinition object at 0x0663AC60>) , Command count = 825 ] 
10:06:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:06:35: [ SetCardRCA(0x1, 0xD555) , Command count = 826 ] 
10:06:35: [DVTCommonLib]### Identification :Idenfication of card completed 

10:06:35: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:06:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:06:35: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:06:35: [ SetBusWidth(0x1) , Command count = 827 ] 
10:06:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:06:35: ####CSD Registe 2.0 Values####
10:06:35: CSD_STRUCTURE                                 :0x1
10:06:35: Reserv1                                       :0x0
10:06:35: Time Access 1 TAAC                            :0xe
10:06:35: Time Access 2 NSAC*100                        :0x0
10:06:35: Data Transfer Rate TRAN_SPEED                 :0x32
10:06:35: Card Command Classess CCC                     :0x5b5
10:06:35: Max Read Data Block Length  READ_BL_LEN       :0x9
10:06:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:06:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:06:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:06:35: DSR(driver stage register)  DSR_IMP           :0x0
10:06:35: Reserv2                                       :0x0
10:06:35: Device Size C_SIZE                            :0xedc8
10:06:35: Reserv3                                       :0x0
10:06:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:06:35: Erase Sector Size SECTOR_SIZE                 :0x7f
10:06:35: Write Protect Group Size WP_GRP_SIZE          :0x0
10:06:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:06:35: Reserv4                                       :0x0
10:06:35: Write Speed Factor R2W_FACTOR                 :0x2
10:06:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:06:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:06:35: FILE_FORMAT_GRP                               :0x0
10:06:35: COPY flag                                     :0x1
10:06:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:06:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:06:35: File_Format                                   :0x0
10:06:35: CRC                                           :0x0
10:06:35: ####CSD Registe Values####  

10:06:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:06:35: ProductSerialNumber = 0x23482900
10:06:35: CardMaximumLBA      = 0x3b72400
10:06:35: CardCapacity        = 32G
10:06:35: Is card secure      = 0
10:06:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:06:35: [DVTCommonLib]###  LogicalWrite called
10:06:37: [ WriteLba(0x2C8F57A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 828 ] 
10:06:37: [DVTCommonLib]###  LogicalWrite Completed 

10:06:37: [DVTCommonLib]###  LogicalRead called
10:06:39: [ ReadLba(0x2C8F57A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 829 ] 
10:06:39: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:06:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:06:39: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 64 times 

10:06:39: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:06:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:06:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 830 ] 
10:06:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:06:39: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:06:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:06:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:06:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:06:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:06:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A630>, <py_sfcl.CommandDataDefinition object at 0x0663A5D0>) , Command count = 831 ] 
10:06:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:06:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E0C0>, <py_sfcl.CommandDataDefinition object at 0x0663AFC0>) , Command count = 832 ] 
10:06:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:06:39: [ SetCardRCA(0x1, 0xD555) , Command count = 833 ] 
10:06:39: [DVTCommonLib]### Identification :Idenfication of card completed 

10:06:39: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:06:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:06:39: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:06:39: [ SetBusWidth(0x1) , Command count = 834 ] 
10:06:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:06:39: ####CSD Registe 2.0 Values####
10:06:39: CSD_STRUCTURE                                 :0x1
10:06:39: Reserv1                                       :0x0
10:06:39: Time Access 1 TAAC                            :0xe
10:06:39: Time Access 2 NSAC*100                        :0x0
10:06:39: Data Transfer Rate TRAN_SPEED                 :0x32
10:06:39: Card Command Classess CCC                     :0x5b5
10:06:39: Max Read Data Block Length  READ_BL_LEN       :0x9
10:06:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:06:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:06:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:06:39: DSR(driver stage register)  DSR_IMP           :0x0
10:06:39: Reserv2                                       :0x0
10:06:39: Device Size C_SIZE                            :0xedc8
10:06:39: Reserv3                                       :0x0
10:06:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:06:39: Erase Sector Size SECTOR_SIZE                 :0x7f
10:06:39: Write Protect Group Size WP_GRP_SIZE          :0x0
10:06:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:06:39: Reserv4                                       :0x0
10:06:39: Write Speed Factor R2W_FACTOR                 :0x2
10:06:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:06:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:06:39: FILE_FORMAT_GRP                               :0x0
10:06:39: COPY flag                                     :0x1
10:06:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:06:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:06:39: File_Format                                   :0x0
10:06:39: CRC                                           :0x0
10:06:39: ####CSD Registe Values####  

10:06:39: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:06:39: ProductSerialNumber = 0x23482900
10:06:39: CardMaximumLBA      = 0x3b72400
10:06:39: CardCapacity        = 32G
10:06:39: Is card secure      = 0
10:06:39: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:06:39: [DVTCommonLib]###  LogicalWrite called
10:06:40: [ WriteLba(0x2E50BE2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 835 ] 
10:06:40: [DVTCommonLib]###  LogicalWrite Completed 

10:06:40: [DVTCommonLib]###  LogicalRead called
10:06:42: [ ReadLba(0x2E50BE2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 836 ] 
10:06:42: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:06:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:06:42: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 65 times 

10:06:42: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:06:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:06:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 837 ] 
10:06:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:06:42: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:06:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:06:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:06:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:06:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:06:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DCC0>, <py_sfcl.CommandDataDefinition object at 0x0663A600>) , Command count = 838 ] 
10:06:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:06:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E2A0>, <py_sfcl.CommandDataDefinition object at 0x0663E390>) , Command count = 839 ] 
10:06:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:06:42: [ SetCardRCA(0x1, 0xD555) , Command count = 840 ] 
10:06:42: [DVTCommonLib]### Identification :Idenfication of card completed 

10:06:42: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:06:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:06:42: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:06:42: [ SetBusWidth(0x1) , Command count = 841 ] 
10:06:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:06:42: ####CSD Registe 2.0 Values####
10:06:42: CSD_STRUCTURE                                 :0x1
10:06:42: Reserv1                                       :0x0
10:06:42: Time Access 1 TAAC                            :0xe
10:06:42: Time Access 2 NSAC*100                        :0x0
10:06:42: Data Transfer Rate TRAN_SPEED                 :0x32
10:06:42: Card Command Classess CCC                     :0x5b5
10:06:42: Max Read Data Block Length  READ_BL_LEN       :0x9
10:06:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:06:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:06:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:06:42: DSR(driver stage register)  DSR_IMP           :0x0
10:06:42: Reserv2                                       :0x0
10:06:42: Device Size C_SIZE                            :0xedc8
10:06:42: Reserv3                                       :0x0
10:06:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:06:42: Erase Sector Size SECTOR_SIZE                 :0x7f
10:06:42: Write Protect Group Size WP_GRP_SIZE          :0x0
10:06:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:06:42: Reserv4                                       :0x0
10:06:42: Write Speed Factor R2W_FACTOR                 :0x2
10:06:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:06:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:06:42: FILE_FORMAT_GRP                               :0x0
10:06:42: COPY flag                                     :0x1
10:06:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:06:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:06:42: File_Format                                   :0x0
10:06:42: CRC                                           :0x0
10:06:42: ####CSD Registe Values####  

10:06:42: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:06:42: ProductSerialNumber = 0x23482900
10:06:42: CardMaximumLBA      = 0x3b72400
10:06:42: CardCapacity        = 32G
10:06:42: Is card secure      = 0
10:06:42: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:06:42: [DVTCommonLib]###  LogicalWrite called
10:06:44: [ WriteLba(0x3216117, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 842 ] 
10:06:44: [DVTCommonLib]###  LogicalWrite Completed 

10:06:44: [DVTCommonLib]###  LogicalRead called
10:06:45: [ ReadLba(0x3216117, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 843 ] 
10:06:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:06:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:06:45: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 66 times 

10:06:45: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:06:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:06:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 844 ] 
10:06:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:06:45: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:06:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:06:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:06:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:06:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:06:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE73C0>, <py_sfcl.CommandDataDefinition object at 0x0663E090>) , Command count = 845 ] 
10:06:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:06:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E600>, <py_sfcl.CommandDataDefinition object at 0x0663E6F0>) , Command count = 846 ] 
10:06:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:06:45: [ SetCardRCA(0x1, 0xD555) , Command count = 847 ] 
10:06:45: [DVTCommonLib]### Identification :Idenfication of card completed 

10:06:45: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:06:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:06:45: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:06:45: [ SetBusWidth(0x1) , Command count = 848 ] 
10:06:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:06:45: ####CSD Registe 2.0 Values####
10:06:45: CSD_STRUCTURE                                 :0x1
10:06:45: Reserv1                                       :0x0
10:06:45: Time Access 1 TAAC                            :0xe
10:06:45: Time Access 2 NSAC*100                        :0x0
10:06:45: Data Transfer Rate TRAN_SPEED                 :0x32
10:06:45: Card Command Classess CCC                     :0x5b5
10:06:45: Max Read Data Block Length  READ_BL_LEN       :0x9
10:06:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:06:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:06:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:06:45: DSR(driver stage register)  DSR_IMP           :0x0
10:06:45: Reserv2                                       :0x0
10:06:45: Device Size C_SIZE                            :0xedc8
10:06:45: Reserv3                                       :0x0
10:06:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:06:45: Erase Sector Size SECTOR_SIZE                 :0x7f
10:06:45: Write Protect Group Size WP_GRP_SIZE          :0x0
10:06:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:06:45: Reserv4                                       :0x0
10:06:45: Write Speed Factor R2W_FACTOR                 :0x2
10:06:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:06:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:06:45: FILE_FORMAT_GRP                               :0x0
10:06:45: COPY flag                                     :0x1
10:06:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:06:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:06:45: File_Format                                   :0x0
10:06:45: CRC                                           :0x0
10:06:45: ####CSD Registe Values####  

10:06:46: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:06:46: ProductSerialNumber = 0x23482900
10:06:46: CardMaximumLBA      = 0x3b72400
10:06:46: CardCapacity        = 32G
10:06:46: Is card secure      = 0
10:06:46: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:06:46: [DVTCommonLib]###  LogicalWrite called
10:06:47: [ WriteLba(0x13205, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 849 ] 
10:06:47: [DVTCommonLib]###  LogicalWrite Completed 

10:06:47: [DVTCommonLib]###  LogicalRead called
10:06:49: [ ReadLba(0x13205, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 850 ] 
10:06:49: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:06:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:06:49: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 67 times 

10:06:49: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:06:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:06:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 851 ] 
10:06:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:06:49: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:06:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:06:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:06:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:06:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:06:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E060>, <py_sfcl.CommandDataDefinition object at 0x0663E450>) , Command count = 852 ] 
10:06:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:06:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E8D0>, <py_sfcl.CommandDataDefinition object at 0x0663E930>) , Command count = 853 ] 
10:06:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:06:49: [ SetCardRCA(0x1, 0xD555) , Command count = 854 ] 
10:06:49: [DVTCommonLib]### Identification :Idenfication of card completed 

10:06:49: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:06:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:06:49: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:06:49: [ SetBusWidth(0x1) , Command count = 855 ] 
10:06:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:06:49: ####CSD Registe 2.0 Values####
10:06:49: CSD_STRUCTURE                                 :0x1
10:06:49: Reserv1                                       :0x0
10:06:49: Time Access 1 TAAC                            :0xe
10:06:49: Time Access 2 NSAC*100                        :0x0
10:06:49: Data Transfer Rate TRAN_SPEED                 :0x32
10:06:49: Card Command Classess CCC                     :0x5b5
10:06:49: Max Read Data Block Length  READ_BL_LEN       :0x9
10:06:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:06:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:06:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:06:49: DSR(driver stage register)  DSR_IMP           :0x0
10:06:49: Reserv2                                       :0x0
10:06:49: Device Size C_SIZE                            :0xedc8
10:06:49: Reserv3                                       :0x0
10:06:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:06:49: Erase Sector Size SECTOR_SIZE                 :0x7f
10:06:49: Write Protect Group Size WP_GRP_SIZE          :0x0
10:06:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:06:49: Reserv4                                       :0x0
10:06:49: Write Speed Factor R2W_FACTOR                 :0x2
10:06:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:06:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:06:49: FILE_FORMAT_GRP                               :0x0
10:06:49: COPY flag                                     :0x1
10:06:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:06:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:06:49: File_Format                                   :0x0
10:06:49: CRC                                           :0x0
10:06:49: ####CSD Registe Values####  

10:06:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:06:49: ProductSerialNumber = 0x23482900
10:06:49: CardMaximumLBA      = 0x3b72400
10:06:49: CardCapacity        = 32G
10:06:49: Is card secure      = 0
10:06:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:06:49: [DVTCommonLib]###  LogicalWrite called
10:06:51: [ WriteLba(0x30A414D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 856 ] 
10:06:51: [DVTCommonLib]###  LogicalWrite Completed 

10:06:51: [DVTCommonLib]###  LogicalRead called
10:06:52: [ ReadLba(0x30A414D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 857 ] 
10:06:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:06:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:06:52: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 68 times 

10:06:52: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:06:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:06:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 858 ] 
10:06:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:06:52: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:06:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:06:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:06:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:06:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:06:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E570>, <py_sfcl.CommandDataDefinition object at 0x0663E840>) , Command count = 859 ] 
10:06:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:06:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E6C0>, <py_sfcl.CommandDataDefinition object at 0x0663E8A0>) , Command count = 860 ] 
10:06:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:06:52: [ SetCardRCA(0x1, 0xD555) , Command count = 861 ] 
10:06:53: [DVTCommonLib]### Identification :Idenfication of card completed 

10:06:53: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:06:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:06:53: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:06:53: [ SetBusWidth(0x1) , Command count = 862 ] 
10:06:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:06:53: ####CSD Registe 2.0 Values####
10:06:53: CSD_STRUCTURE                                 :0x1
10:06:53: Reserv1                                       :0x0
10:06:53: Time Access 1 TAAC                            :0xe
10:06:53: Time Access 2 NSAC*100                        :0x0
10:06:53: Data Transfer Rate TRAN_SPEED                 :0x32
10:06:53: Card Command Classess CCC                     :0x5b5
10:06:53: Max Read Data Block Length  READ_BL_LEN       :0x9
10:06:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:06:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:06:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:06:53: DSR(driver stage register)  DSR_IMP           :0x0
10:06:53: Reserv2                                       :0x0
10:06:53: Device Size C_SIZE                            :0xedc8
10:06:53: Reserv3                                       :0x0
10:06:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:06:53: Erase Sector Size SECTOR_SIZE                 :0x7f
10:06:53: Write Protect Group Size WP_GRP_SIZE          :0x0
10:06:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:06:53: Reserv4                                       :0x0
10:06:53: Write Speed Factor R2W_FACTOR                 :0x2
10:06:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:06:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:06:53: FILE_FORMAT_GRP                               :0x0
10:06:53: COPY flag                                     :0x1
10:06:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:06:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:06:53: File_Format                                   :0x0
10:06:53: CRC                                           :0x0
10:06:53: ####CSD Registe Values####  

10:06:53: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:06:53: ProductSerialNumber = 0x23482900
10:06:53: CardMaximumLBA      = 0x3b72400
10:06:53: CardCapacity        = 32G
10:06:53: Is card secure      = 0
10:06:53: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:06:53: [DVTCommonLib]###  LogicalWrite called
10:06:54: [ WriteLba(0x4E174B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 863 ] 
10:06:54: [DVTCommonLib]###  LogicalWrite Completed 

10:06:54: [DVTCommonLib]###  LogicalRead called
10:06:56: [ ReadLba(0x4E174B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 864 ] 
10:06:56: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:06:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:06:56: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 69 times 

10:06:56: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:06:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:06:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 865 ] 
10:06:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:06:56: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:06:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:06:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:06:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:06:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:06:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AEA0>, <py_sfcl.CommandDataDefinition object at 0x0663EA50>) , Command count = 866 ] 
10:06:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:06:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AD80>, <py_sfcl.CommandDataDefinition object at 0x0663E3F0>) , Command count = 867 ] 
10:06:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:06:56: [ SetCardRCA(0x1, 0xD555) , Command count = 868 ] 
10:06:56: [DVTCommonLib]### Identification :Idenfication of card completed 

10:06:56: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:06:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:06:56: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:06:56: [ SetBusWidth(0x1) , Command count = 869 ] 
10:06:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:06:56: ####CSD Registe 2.0 Values####
10:06:56: CSD_STRUCTURE                                 :0x1
10:06:56: Reserv1                                       :0x0
10:06:56: Time Access 1 TAAC                            :0xe
10:06:56: Time Access 2 NSAC*100                        :0x0
10:06:56: Data Transfer Rate TRAN_SPEED                 :0x32
10:06:56: Card Command Classess CCC                     :0x5b5
10:06:56: Max Read Data Block Length  READ_BL_LEN       :0x9
10:06:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:06:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:06:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:06:56: DSR(driver stage register)  DSR_IMP           :0x0
10:06:56: Reserv2                                       :0x0
10:06:56: Device Size C_SIZE                            :0xedc8
10:06:56: Reserv3                                       :0x0
10:06:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:06:56: Erase Sector Size SECTOR_SIZE                 :0x7f
10:06:56: Write Protect Group Size WP_GRP_SIZE          :0x0
10:06:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:06:56: Reserv4                                       :0x0
10:06:56: Write Speed Factor R2W_FACTOR                 :0x2
10:06:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:06:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:06:56: FILE_FORMAT_GRP                               :0x0
10:06:56: COPY flag                                     :0x1
10:06:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:06:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:06:56: File_Format                                   :0x0
10:06:56: CRC                                           :0x0
10:06:56: ####CSD Registe Values####  

10:06:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:06:56: ProductSerialNumber = 0x23482900
10:06:56: CardMaximumLBA      = 0x3b72400
10:06:56: CardCapacity        = 32G
10:06:56: Is card secure      = 0
10:06:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:06:56: [DVTCommonLib]###  LogicalWrite called
10:06:58: [ WriteLba(0x233D7D0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 870 ] 
10:06:58: [DVTCommonLib]###  LogicalWrite Completed 

10:06:58: [DVTCommonLib]###  LogicalRead called
10:07:00: [ ReadLba(0x233D7D0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 871 ] 
10:07:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:07:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:07:00: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 70 times 

10:07:00: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:07:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:07:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 872 ] 
10:07:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:07:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:07:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:07:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:07:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:07:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:07:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A4E0>, <py_sfcl.CommandDataDefinition object at 0x066B1C90>) , Command count = 873 ] 
10:07:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:07:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1C60>, <py_sfcl.CommandDataDefinition object at 0x0663E660>) , Command count = 874 ] 
10:07:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:07:00: [ SetCardRCA(0x1, 0xD555) , Command count = 875 ] 
10:07:00: [DVTCommonLib]### Identification :Idenfication of card completed 

10:07:00: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:07:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:07:00: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:07:00: [ SetBusWidth(0x1) , Command count = 876 ] 
10:07:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:07:00: ####CSD Registe 2.0 Values####
10:07:00: CSD_STRUCTURE                                 :0x1
10:07:00: Reserv1                                       :0x0
10:07:00: Time Access 1 TAAC                            :0xe
10:07:00: Time Access 2 NSAC*100                        :0x0
10:07:00: Data Transfer Rate TRAN_SPEED                 :0x32
10:07:00: Card Command Classess CCC                     :0x5b5
10:07:00: Max Read Data Block Length  READ_BL_LEN       :0x9
10:07:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:07:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:07:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:07:00: DSR(driver stage register)  DSR_IMP           :0x0
10:07:00: Reserv2                                       :0x0
10:07:00: Device Size C_SIZE                            :0xedc8
10:07:00: Reserv3                                       :0x0
10:07:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:07:00: Erase Sector Size SECTOR_SIZE                 :0x7f
10:07:00: Write Protect Group Size WP_GRP_SIZE          :0x0
10:07:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:07:00: Reserv4                                       :0x0
10:07:00: Write Speed Factor R2W_FACTOR                 :0x2
10:07:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:07:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:07:00: FILE_FORMAT_GRP                               :0x0
10:07:00: COPY flag                                     :0x1
10:07:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:07:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:07:00: File_Format                                   :0x0
10:07:00: CRC                                           :0x0
10:07:00: ####CSD Registe Values####  

10:07:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:07:00: ProductSerialNumber = 0x23482900
10:07:00: CardMaximumLBA      = 0x3b72400
10:07:00: CardCapacity        = 32G
10:07:00: Is card secure      = 0
10:07:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:07:00: [DVTCommonLib]###  LogicalWrite called
10:07:01: [ WriteLba(0x36B0324, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 877 ] 
10:07:01: [DVTCommonLib]###  LogicalWrite Completed 

10:07:01: [DVTCommonLib]###  LogicalRead called
10:07:03: [ ReadLba(0x36B0324, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 878 ] 
10:07:03: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:07:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:07:03: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 71 times 

10:07:03: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:07:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:07:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 879 ] 
10:07:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:07:03: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:07:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:07:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:07:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:07:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:07:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A420>, <py_sfcl.CommandDataDefinition object at 0x0663AF00>) , Command count = 880 ] 
10:07:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:07:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1A80>, <py_sfcl.CommandDataDefinition object at 0x0663E660>) , Command count = 881 ] 
10:07:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:07:03: [ SetCardRCA(0x1, 0xD555) , Command count = 882 ] 
10:07:03: [DVTCommonLib]### Identification :Idenfication of card completed 

10:07:03: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:07:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:07:03: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:07:03: [ SetBusWidth(0x1) , Command count = 883 ] 
10:07:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:07:03: ####CSD Registe 2.0 Values####
10:07:03: CSD_STRUCTURE                                 :0x1
10:07:03: Reserv1                                       :0x0
10:07:03: Time Access 1 TAAC                            :0xe
10:07:03: Time Access 2 NSAC*100                        :0x0
10:07:03: Data Transfer Rate TRAN_SPEED                 :0x32
10:07:03: Card Command Classess CCC                     :0x5b5
10:07:03: Max Read Data Block Length  READ_BL_LEN       :0x9
10:07:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:07:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:07:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:07:03: DSR(driver stage register)  DSR_IMP           :0x0
10:07:03: Reserv2                                       :0x0
10:07:03: Device Size C_SIZE                            :0xedc8
10:07:03: Reserv3                                       :0x0
10:07:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:07:03: Erase Sector Size SECTOR_SIZE                 :0x7f
10:07:03: Write Protect Group Size WP_GRP_SIZE          :0x0
10:07:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:07:03: Reserv4                                       :0x0
10:07:03: Write Speed Factor R2W_FACTOR                 :0x2
10:07:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:07:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:07:03: FILE_FORMAT_GRP                               :0x0
10:07:03: COPY flag                                     :0x1
10:07:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:07:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:07:03: File_Format                                   :0x0
10:07:03: CRC                                           :0x0
10:07:03: ####CSD Registe Values####  

10:07:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:07:03: ProductSerialNumber = 0x23482900
10:07:03: CardMaximumLBA      = 0x3b72400
10:07:03: CardCapacity        = 32G
10:07:03: Is card secure      = 0
10:07:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:07:03: [DVTCommonLib]###  LogicalWrite called
10:07:05: [ WriteLba(0x3703D0C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 884 ] 
10:07:05: [DVTCommonLib]###  LogicalWrite Completed 

10:07:05: [DVTCommonLib]###  LogicalRead called
10:07:06: [ ReadLba(0x3703D0C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 885 ] 
10:07:06: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:07:06: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:07:06: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 72 times 

10:07:06: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:07:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:07:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 886 ] 
10:07:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:07:06: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:07:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:07:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:07:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:07:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:07:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1D20>, <py_sfcl.CommandDataDefinition object at 0x066B1AE0>) , Command count = 887 ] 
10:07:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:07:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B18D0>, <py_sfcl.CommandDataDefinition object at 0x066B1990>) , Command count = 888 ] 
10:07:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:07:06: [ SetCardRCA(0x1, 0xD555) , Command count = 889 ] 
10:07:06: [DVTCommonLib]### Identification :Idenfication of card completed 

10:07:06: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:07:06: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:07:06: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:07:06: [ SetBusWidth(0x1) , Command count = 890 ] 
10:07:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:07:06: ####CSD Registe 2.0 Values####
10:07:06: CSD_STRUCTURE                                 :0x1
10:07:06: Reserv1                                       :0x0
10:07:06: Time Access 1 TAAC                            :0xe
10:07:06: Time Access 2 NSAC*100                        :0x0
10:07:06: Data Transfer Rate TRAN_SPEED                 :0x32
10:07:06: Card Command Classess CCC                     :0x5b5
10:07:06: Max Read Data Block Length  READ_BL_LEN       :0x9
10:07:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:07:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:07:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:07:06: DSR(driver stage register)  DSR_IMP           :0x0
10:07:06: Reserv2                                       :0x0
10:07:06: Device Size C_SIZE                            :0xedc8
10:07:06: Reserv3                                       :0x0
10:07:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:07:06: Erase Sector Size SECTOR_SIZE                 :0x7f
10:07:06: Write Protect Group Size WP_GRP_SIZE          :0x0
10:07:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:07:06: Reserv4                                       :0x0
10:07:06: Write Speed Factor R2W_FACTOR                 :0x2
10:07:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:07:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:07:06: FILE_FORMAT_GRP                               :0x0
10:07:06: COPY flag                                     :0x1
10:07:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:07:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:07:06: File_Format                                   :0x0
10:07:06: CRC                                           :0x0
10:07:06: ####CSD Registe Values####  

10:07:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:07:06: ProductSerialNumber = 0x23482900
10:07:06: CardMaximumLBA      = 0x3b72400
10:07:06: CardCapacity        = 32G
10:07:06: Is card secure      = 0
10:07:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:07:06: [DVTCommonLib]###  LogicalWrite called
10:07:08: [ WriteLba(0xEB19C0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 891 ] 
10:07:08: [DVTCommonLib]###  LogicalWrite Completed 

10:07:08: [DVTCommonLib]###  LogicalRead called
10:07:10: [ ReadLba(0xEB19C0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 892 ] 
10:07:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:07:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:07:10: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 73 times 

10:07:10: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:07:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:07:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 893 ] 
10:07:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:07:10: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:07:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:07:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:07:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:07:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:07:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661DBA0>, <py_sfcl.CommandDataDefinition object at 0x066B1BD0>) , Command count = 894 ] 
10:07:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:07:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1630>, <py_sfcl.CommandDataDefinition object at 0x066B15A0>) , Command count = 895 ] 
10:07:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:07:10: [ SetCardRCA(0x1, 0xD555) , Command count = 896 ] 
10:07:10: [DVTCommonLib]### Identification :Idenfication of card completed 

10:07:10: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:07:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:07:10: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:07:10: [ SetBusWidth(0x1) , Command count = 897 ] 
10:07:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:07:10: ####CSD Registe 2.0 Values####
10:07:10: CSD_STRUCTURE                                 :0x1
10:07:10: Reserv1                                       :0x0
10:07:10: Time Access 1 TAAC                            :0xe
10:07:10: Time Access 2 NSAC*100                        :0x0
10:07:10: Data Transfer Rate TRAN_SPEED                 :0x32
10:07:10: Card Command Classess CCC                     :0x5b5
10:07:10: Max Read Data Block Length  READ_BL_LEN       :0x9
10:07:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:07:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:07:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:07:10: DSR(driver stage register)  DSR_IMP           :0x0
10:07:10: Reserv2                                       :0x0
10:07:10: Device Size C_SIZE                            :0xedc8
10:07:10: Reserv3                                       :0x0
10:07:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:07:10: Erase Sector Size SECTOR_SIZE                 :0x7f
10:07:10: Write Protect Group Size WP_GRP_SIZE          :0x0
10:07:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:07:10: Reserv4                                       :0x0
10:07:10: Write Speed Factor R2W_FACTOR                 :0x2
10:07:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:07:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:07:10: FILE_FORMAT_GRP                               :0x0
10:07:10: COPY flag                                     :0x1
10:07:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:07:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:07:10: File_Format                                   :0x0
10:07:10: CRC                                           :0x0
10:07:10: ####CSD Registe Values####  

10:07:10: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:07:10: ProductSerialNumber = 0x23482900
10:07:10: CardMaximumLBA      = 0x3b72400
10:07:10: CardCapacity        = 32G
10:07:10: Is card secure      = 0
10:07:10: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:07:10: [DVTCommonLib]###  LogicalWrite called
10:07:12: [ WriteLba(0xAC8CCB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 898 ] 
10:07:12: [DVTCommonLib]###  LogicalWrite Completed 

10:07:12: [DVTCommonLib]###  LogicalRead called
10:07:13: [ ReadLba(0xAC8CCB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 899 ] 
10:07:13: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:07:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:07:13: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 74 times 

10:07:13: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:07:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:07:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 900 ] 
10:07:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:07:13: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:07:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:07:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:07:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:07:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:07:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1930>, <py_sfcl.CommandDataDefinition object at 0x066B1810>) , Command count = 901 ] 
10:07:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:07:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1240>, <py_sfcl.CommandDataDefinition object at 0x066B13C0>) , Command count = 902 ] 
10:07:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:07:13: [ SetCardRCA(0x1, 0xD555) , Command count = 903 ] 
10:07:13: [DVTCommonLib]### Identification :Idenfication of card completed 

10:07:13: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:07:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:07:13: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:07:13: [ SetBusWidth(0x1) , Command count = 904 ] 
10:07:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:07:13: ####CSD Registe 2.0 Values####
10:07:13: CSD_STRUCTURE                                 :0x1
10:07:13: Reserv1                                       :0x0
10:07:13: Time Access 1 TAAC                            :0xe
10:07:13: Time Access 2 NSAC*100                        :0x0
10:07:13: Data Transfer Rate TRAN_SPEED                 :0x32
10:07:13: Card Command Classess CCC                     :0x5b5
10:07:13: Max Read Data Block Length  READ_BL_LEN       :0x9
10:07:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:07:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:07:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:07:13: DSR(driver stage register)  DSR_IMP           :0x0
10:07:13: Reserv2                                       :0x0
10:07:13: Device Size C_SIZE                            :0xedc8
10:07:13: Reserv3                                       :0x0
10:07:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:07:13: Erase Sector Size SECTOR_SIZE                 :0x7f
10:07:13: Write Protect Group Size WP_GRP_SIZE          :0x0
10:07:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:07:13: Reserv4                                       :0x0
10:07:13: Write Speed Factor R2W_FACTOR                 :0x2
10:07:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:07:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:07:13: FILE_FORMAT_GRP                               :0x0
10:07:13: COPY flag                                     :0x1
10:07:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:07:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:07:13: File_Format                                   :0x0
10:07:13: CRC                                           :0x0
10:07:13: ####CSD Registe Values####  

10:07:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:07:13: ProductSerialNumber = 0x23482900
10:07:13: CardMaximumLBA      = 0x3b72400
10:07:13: CardCapacity        = 32G
10:07:13: Is card secure      = 0
10:07:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:07:13: [DVTCommonLib]###  LogicalWrite called
10:07:15: [ WriteLba(0x34D7CCB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 905 ] 
10:07:15: [DVTCommonLib]###  LogicalWrite Completed 

10:07:15: [DVTCommonLib]###  LogicalRead called
10:07:16: [ ReadLba(0x34D7CCB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 906 ] 
10:07:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:07:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:07:16: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 75 times 

10:07:16: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:07:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:07:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 907 ] 
10:07:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:07:17: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:07:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:07:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:07:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:07:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:07:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1690>, <py_sfcl.CommandDataDefinition object at 0x066B14E0>) , Command count = 908 ] 
10:07:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:07:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEF90>, <py_sfcl.CommandDataDefinition object at 0x0663ED80>) , Command count = 909 ] 
10:07:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:07:17: [ SetCardRCA(0x1, 0xD555) , Command count = 910 ] 
10:07:17: [DVTCommonLib]### Identification :Idenfication of card completed 

10:07:17: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:07:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:07:17: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:07:17: [ SetBusWidth(0x1) , Command count = 911 ] 
10:07:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:07:17: ####CSD Registe 2.0 Values####
10:07:17: CSD_STRUCTURE                                 :0x1
10:07:17: Reserv1                                       :0x0
10:07:17: Time Access 1 TAAC                            :0xe
10:07:17: Time Access 2 NSAC*100                        :0x0
10:07:17: Data Transfer Rate TRAN_SPEED                 :0x32
10:07:17: Card Command Classess CCC                     :0x5b5
10:07:17: Max Read Data Block Length  READ_BL_LEN       :0x9
10:07:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:07:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:07:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:07:17: DSR(driver stage register)  DSR_IMP           :0x0
10:07:17: Reserv2                                       :0x0
10:07:17: Device Size C_SIZE                            :0xedc8
10:07:17: Reserv3                                       :0x0
10:07:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:07:17: Erase Sector Size SECTOR_SIZE                 :0x7f
10:07:17: Write Protect Group Size WP_GRP_SIZE          :0x0
10:07:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:07:17: Reserv4                                       :0x0
10:07:17: Write Speed Factor R2W_FACTOR                 :0x2
10:07:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:07:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:07:17: FILE_FORMAT_GRP                               :0x0
10:07:17: COPY flag                                     :0x1
10:07:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:07:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:07:17: File_Format                                   :0x0
10:07:17: CRC                                           :0x0
10:07:17: ####CSD Registe Values####  

10:07:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:07:17: ProductSerialNumber = 0x23482900
10:07:17: CardMaximumLBA      = 0x3b72400
10:07:17: CardCapacity        = 32G
10:07:17: Is card secure      = 0
10:07:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:07:17: [DVTCommonLib]###  LogicalWrite called
10:07:18: [ WriteLba(0x21F62CA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 912 ] 
10:07:18: [DVTCommonLib]###  LogicalWrite Completed 

10:07:18: [DVTCommonLib]###  LogicalRead called
10:07:20: [ ReadLba(0x21F62CA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 913 ] 
10:07:20: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:07:20: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:07:20: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 76 times 

10:07:20: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:07:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:07:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 914 ] 
10:07:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:07:20: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:07:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:07:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:07:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:07:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:07:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1330>, <py_sfcl.CommandDataDefinition object at 0x066B1270>) , Command count = 915 ] 
10:07:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:07:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEAB0>, <py_sfcl.CommandDataDefinition object at 0x066AECF0>) , Command count = 916 ] 
10:07:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:07:20: [ SetCardRCA(0x1, 0xD555) , Command count = 917 ] 
10:07:20: [DVTCommonLib]### Identification :Idenfication of card completed 

10:07:20: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:07:20: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:07:20: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:07:20: [ SetBusWidth(0x1) , Command count = 918 ] 
10:07:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:07:20: ####CSD Registe 2.0 Values####
10:07:20: CSD_STRUCTURE                                 :0x1
10:07:20: Reserv1                                       :0x0
10:07:20: Time Access 1 TAAC                            :0xe
10:07:20: Time Access 2 NSAC*100                        :0x0
10:07:20: Data Transfer Rate TRAN_SPEED                 :0x32
10:07:20: Card Command Classess CCC                     :0x5b5
10:07:20: Max Read Data Block Length  READ_BL_LEN       :0x9
10:07:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:07:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:07:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:07:20: DSR(driver stage register)  DSR_IMP           :0x0
10:07:20: Reserv2                                       :0x0
10:07:20: Device Size C_SIZE                            :0xedc8
10:07:20: Reserv3                                       :0x0
10:07:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:07:20: Erase Sector Size SECTOR_SIZE                 :0x7f
10:07:20: Write Protect Group Size WP_GRP_SIZE          :0x0
10:07:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:07:20: Reserv4                                       :0x0
10:07:20: Write Speed Factor R2W_FACTOR                 :0x2
10:07:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:07:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:07:20: FILE_FORMAT_GRP                               :0x0
10:07:20: COPY flag                                     :0x1
10:07:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:07:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:07:20: File_Format                                   :0x0
10:07:20: CRC                                           :0x0
10:07:20: ####CSD Registe Values####  

10:07:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:07:20: ProductSerialNumber = 0x23482900
10:07:20: CardMaximumLBA      = 0x3b72400
10:07:20: CardCapacity        = 32G
10:07:20: Is card secure      = 0
10:07:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:07:20: [DVTCommonLib]###  LogicalWrite called
10:07:22: [ WriteLba(0x52F44, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 919 ] 
10:07:22: [DVTCommonLib]###  LogicalWrite Completed 

10:07:22: [DVTCommonLib]###  LogicalRead called
10:07:23: [ ReadLba(0x52F44, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 920 ] 
10:07:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:07:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:07:23: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 77 times 

10:07:23: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:07:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:07:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 921 ] 
10:07:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:07:23: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:07:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:07:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:07:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:07:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:07:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEFC0>, <py_sfcl.CommandDataDefinition object at 0x066AECC0>) , Command count = 922 ] 
10:07:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:07:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE630>, <py_sfcl.CommandDataDefinition object at 0x066AE6C0>) , Command count = 923 ] 
10:07:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:07:23: [ SetCardRCA(0x1, 0xD555) , Command count = 924 ] 
10:07:23: [DVTCommonLib]### Identification :Idenfication of card completed 

10:07:23: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:07:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:07:23: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:07:23: [ SetBusWidth(0x1) , Command count = 925 ] 
10:07:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:07:23: ####CSD Registe 2.0 Values####
10:07:23: CSD_STRUCTURE                                 :0x1
10:07:23: Reserv1                                       :0x0
10:07:23: Time Access 1 TAAC                            :0xe
10:07:23: Time Access 2 NSAC*100                        :0x0
10:07:23: Data Transfer Rate TRAN_SPEED                 :0x32
10:07:23: Card Command Classess CCC                     :0x5b5
10:07:23: Max Read Data Block Length  READ_BL_LEN       :0x9
10:07:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:07:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:07:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:07:23: DSR(driver stage register)  DSR_IMP           :0x0
10:07:23: Reserv2                                       :0x0
10:07:23: Device Size C_SIZE                            :0xedc8
10:07:23: Reserv3                                       :0x0
10:07:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:07:23: Erase Sector Size SECTOR_SIZE                 :0x7f
10:07:23: Write Protect Group Size WP_GRP_SIZE          :0x0
10:07:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:07:23: Reserv4                                       :0x0
10:07:23: Write Speed Factor R2W_FACTOR                 :0x2
10:07:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:07:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:07:23: FILE_FORMAT_GRP                               :0x0
10:07:23: COPY flag                                     :0x1
10:07:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:07:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:07:23: File_Format                                   :0x0
10:07:23: CRC                                           :0x0
10:07:23: ####CSD Registe Values####  

10:07:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:07:23: ProductSerialNumber = 0x23482900
10:07:23: CardMaximumLBA      = 0x3b72400
10:07:23: CardCapacity        = 32G
10:07:23: Is card secure      = 0
10:07:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:07:23: [DVTCommonLib]###  LogicalWrite called
10:07:25: [ WriteLba(0x2823FF1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 926 ] 
10:07:25: [DVTCommonLib]###  LogicalWrite Completed 

10:07:25: [DVTCommonLib]###  LogicalRead called
10:07:27: [ ReadLba(0x2823FF1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 927 ] 
10:07:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:07:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:07:27: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 78 times 

10:07:27: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:07:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:07:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 928 ] 
10:07:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:07:27: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:07:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:07:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:07:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:07:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:07:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6420>, <py_sfcl.CommandDataDefinition object at 0x066AEBA0>) , Command count = 929 ] 
10:07:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:07:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A60F0>, <py_sfcl.CommandDataDefinition object at 0x066AE510>) , Command count = 930 ] 
10:07:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:07:27: [ SetCardRCA(0x1, 0xD555) , Command count = 931 ] 
10:07:27: [DVTCommonLib]### Identification :Idenfication of card completed 

10:07:27: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:07:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:07:27: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:07:27: [ SetBusWidth(0x1) , Command count = 932 ] 
10:07:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:07:27: ####CSD Registe 2.0 Values####
10:07:27: CSD_STRUCTURE                                 :0x1
10:07:27: Reserv1                                       :0x0
10:07:27: Time Access 1 TAAC                            :0xe
10:07:27: Time Access 2 NSAC*100                        :0x0
10:07:27: Data Transfer Rate TRAN_SPEED                 :0x32
10:07:27: Card Command Classess CCC                     :0x5b5
10:07:27: Max Read Data Block Length  READ_BL_LEN       :0x9
10:07:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:07:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:07:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:07:27: DSR(driver stage register)  DSR_IMP           :0x0
10:07:27: Reserv2                                       :0x0
10:07:27: Device Size C_SIZE                            :0xedc8
10:07:27: Reserv3                                       :0x0
10:07:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:07:27: Erase Sector Size SECTOR_SIZE                 :0x7f
10:07:27: Write Protect Group Size WP_GRP_SIZE          :0x0
10:07:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:07:27: Reserv4                                       :0x0
10:07:27: Write Speed Factor R2W_FACTOR                 :0x2
10:07:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:07:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:07:27: FILE_FORMAT_GRP                               :0x0
10:07:27: COPY flag                                     :0x1
10:07:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:07:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:07:27: File_Format                                   :0x0
10:07:27: CRC                                           :0x0
10:07:27: ####CSD Registe Values####  

10:07:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:07:27: ProductSerialNumber = 0x23482900
10:07:27: CardMaximumLBA      = 0x3b72400
10:07:27: CardCapacity        = 32G
10:07:27: Is card secure      = 0
10:07:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:07:27: [DVTCommonLib]###  LogicalWrite called
10:07:28: [ WriteLba(0x1A8AF9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 933 ] 
10:07:28: [DVTCommonLib]###  LogicalWrite Completed 

10:07:28: [DVTCommonLib]###  LogicalRead called
10:07:30: [ ReadLba(0x1A8AF9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 934 ] 
10:07:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:07:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:07:30: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 79 times 

10:07:30: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:07:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:07:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 935 ] 
10:07:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:07:30: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:07:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:07:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:07:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:07:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:07:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE720>, <py_sfcl.CommandDataDefinition object at 0x066AE420>) , Command count = 936 ] 
10:07:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:07:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6BD0>, <py_sfcl.CommandDataDefinition object at 0x066A6B10>) , Command count = 937 ] 
10:07:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:07:30: [ SetCardRCA(0x1, 0xD555) , Command count = 938 ] 
10:07:30: [DVTCommonLib]### Identification :Idenfication of card completed 

10:07:30: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:07:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:07:30: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:07:30: [ SetBusWidth(0x1) , Command count = 939 ] 
10:07:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:07:30: ####CSD Registe 2.0 Values####
10:07:30: CSD_STRUCTURE                                 :0x1
10:07:30: Reserv1                                       :0x0
10:07:30: Time Access 1 TAAC                            :0xe
10:07:30: Time Access 2 NSAC*100                        :0x0
10:07:30: Data Transfer Rate TRAN_SPEED                 :0x32
10:07:30: Card Command Classess CCC                     :0x5b5
10:07:30: Max Read Data Block Length  READ_BL_LEN       :0x9
10:07:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:07:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:07:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:07:30: DSR(driver stage register)  DSR_IMP           :0x0
10:07:30: Reserv2                                       :0x0
10:07:30: Device Size C_SIZE                            :0xedc8
10:07:30: Reserv3                                       :0x0
10:07:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:07:30: Erase Sector Size SECTOR_SIZE                 :0x7f
10:07:30: Write Protect Group Size WP_GRP_SIZE          :0x0
10:07:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:07:30: Reserv4                                       :0x0
10:07:30: Write Speed Factor R2W_FACTOR                 :0x2
10:07:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:07:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:07:30: FILE_FORMAT_GRP                               :0x0
10:07:30: COPY flag                                     :0x1
10:07:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:07:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:07:30: File_Format                                   :0x0
10:07:30: CRC                                           :0x0
10:07:30: ####CSD Registe Values####  

10:07:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:07:30: ProductSerialNumber = 0x23482900
10:07:30: CardMaximumLBA      = 0x3b72400
10:07:30: CardCapacity        = 32G
10:07:30: Is card secure      = 0
10:07:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:07:30: [DVTCommonLib]###  LogicalWrite called
10:07:32: [ WriteLba(0xF1ADE2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 940 ] 
10:07:32: [DVTCommonLib]###  LogicalWrite Completed 

10:07:32: [DVTCommonLib]###  LogicalRead called
10:07:33: [ ReadLba(0xF1ADE2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 941 ] 
10:07:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:07:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:07:33: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 80 times 

10:07:33: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:07:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:07:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 942 ] 
10:07:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:07:34: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:07:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:07:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:07:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:07:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:07:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE3F0>, <py_sfcl.CommandDataDefinition object at 0x066A6D20>) , Command count = 943 ] 
10:07:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:07:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6120>, <py_sfcl.CommandDataDefinition object at 0x066A6600>) , Command count = 944 ] 
10:07:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:07:34: [ SetCardRCA(0x1, 0xD555) , Command count = 945 ] 
10:07:34: [DVTCommonLib]### Identification :Idenfication of card completed 

10:07:34: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:07:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:07:34: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:07:34: [ SetBusWidth(0x1) , Command count = 946 ] 
10:07:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:07:34: ####CSD Registe 2.0 Values####
10:07:34: CSD_STRUCTURE                                 :0x1
10:07:34: Reserv1                                       :0x0
10:07:34: Time Access 1 TAAC                            :0xe
10:07:34: Time Access 2 NSAC*100                        :0x0
10:07:34: Data Transfer Rate TRAN_SPEED                 :0x32
10:07:34: Card Command Classess CCC                     :0x5b5
10:07:34: Max Read Data Block Length  READ_BL_LEN       :0x9
10:07:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:07:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:07:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:07:34: DSR(driver stage register)  DSR_IMP           :0x0
10:07:34: Reserv2                                       :0x0
10:07:34: Device Size C_SIZE                            :0xedc8
10:07:34: Reserv3                                       :0x0
10:07:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:07:34: Erase Sector Size SECTOR_SIZE                 :0x7f
10:07:34: Write Protect Group Size WP_GRP_SIZE          :0x0
10:07:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:07:34: Reserv4                                       :0x0
10:07:34: Write Speed Factor R2W_FACTOR                 :0x2
10:07:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:07:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:07:34: FILE_FORMAT_GRP                               :0x0
10:07:34: COPY flag                                     :0x1
10:07:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:07:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:07:34: File_Format                                   :0x0
10:07:34: CRC                                           :0x0
10:07:34: ####CSD Registe Values####  

10:07:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:07:34: ProductSerialNumber = 0x23482900
10:07:34: CardMaximumLBA      = 0x3b72400
10:07:34: CardCapacity        = 32G
10:07:34: Is card secure      = 0
10:07:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:07:34: [DVTCommonLib]###  LogicalWrite called
10:07:35: [ WriteLba(0x1026C56, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 947 ] 
10:07:35: [DVTCommonLib]###  LogicalWrite Completed 

10:07:35: [DVTCommonLib]###  LogicalRead called
10:07:37: [ ReadLba(0x1026C56, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 948 ] 
10:07:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:07:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:07:37: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 81 times 

10:07:37: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:07:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:07:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 949 ] 
10:07:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:07:37: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:07:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:07:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:07:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:07:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:07:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6ED0>, <py_sfcl.CommandDataDefinition object at 0x066A6B40>) , Command count = 950 ] 
10:07:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:07:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A64E0>, <py_sfcl.CommandDataDefinition object at 0x066A6720>) , Command count = 951 ] 
10:07:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:07:37: [ SetCardRCA(0x1, 0xD555) , Command count = 952 ] 
10:07:37: [DVTCommonLib]### Identification :Idenfication of card completed 

10:07:37: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:07:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:07:37: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:07:37: [ SetBusWidth(0x1) , Command count = 953 ] 
10:07:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:07:37: ####CSD Registe 2.0 Values####
10:07:37: CSD_STRUCTURE                                 :0x1
10:07:37: Reserv1                                       :0x0
10:07:37: Time Access 1 TAAC                            :0xe
10:07:37: Time Access 2 NSAC*100                        :0x0
10:07:37: Data Transfer Rate TRAN_SPEED                 :0x32
10:07:37: Card Command Classess CCC                     :0x5b5
10:07:37: Max Read Data Block Length  READ_BL_LEN       :0x9
10:07:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:07:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:07:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:07:37: DSR(driver stage register)  DSR_IMP           :0x0
10:07:37: Reserv2                                       :0x0
10:07:37: Device Size C_SIZE                            :0xedc8
10:07:37: Reserv3                                       :0x0
10:07:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:07:37: Erase Sector Size SECTOR_SIZE                 :0x7f
10:07:37: Write Protect Group Size WP_GRP_SIZE          :0x0
10:07:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:07:37: Reserv4                                       :0x0
10:07:37: Write Speed Factor R2W_FACTOR                 :0x2
10:07:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:07:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:07:37: FILE_FORMAT_GRP                               :0x0
10:07:37: COPY flag                                     :0x1
10:07:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:07:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:07:37: File_Format                                   :0x0
10:07:37: CRC                                           :0x0
10:07:37: ####CSD Registe Values####  

10:07:37: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:07:37: ProductSerialNumber = 0x23482900
10:07:37: CardMaximumLBA      = 0x3b72400
10:07:37: CardCapacity        = 32G
10:07:37: Is card secure      = 0
10:07:37: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:07:37: [DVTCommonLib]###  LogicalWrite called
10:07:39: [ WriteLba(0x28FA885, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 954 ] 
10:07:39: [DVTCommonLib]###  LogicalWrite Completed 

10:07:39: [DVTCommonLib]###  LogicalRead called
10:07:40: [ ReadLba(0x28FA885, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 955 ] 
10:07:40: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:07:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:07:40: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 82 times 

10:07:40: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:07:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:07:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 956 ] 
10:07:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:07:40: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:07:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:07:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:07:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:07:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A60C0>, <py_sfcl.CommandDataDefinition object at 0x066A6030>) , Command count = 957 ] 
10:07:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:07:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6090>, <py_sfcl.CommandDataDefinition object at 0x066A65A0>) , Command count = 958 ] 
10:07:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:07:40: [ SetCardRCA(0x1, 0xD555) , Command count = 959 ] 
10:07:40: [DVTCommonLib]### Identification :Idenfication of card completed 

10:07:40: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:07:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:07:40: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:07:40: [ SetBusWidth(0x1) , Command count = 960 ] 
10:07:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:07:40: ####CSD Registe 2.0 Values####
10:07:40: CSD_STRUCTURE                                 :0x1
10:07:40: Reserv1                                       :0x0
10:07:40: Time Access 1 TAAC                            :0xe
10:07:40: Time Access 2 NSAC*100                        :0x0
10:07:40: Data Transfer Rate TRAN_SPEED                 :0x32
10:07:40: Card Command Classess CCC                     :0x5b5
10:07:40: Max Read Data Block Length  READ_BL_LEN       :0x9
10:07:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:07:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:07:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:07:40: DSR(driver stage register)  DSR_IMP           :0x0
10:07:40: Reserv2                                       :0x0
10:07:40: Device Size C_SIZE                            :0xedc8
10:07:40: Reserv3                                       :0x0
10:07:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:07:40: Erase Sector Size SECTOR_SIZE                 :0x7f
10:07:40: Write Protect Group Size WP_GRP_SIZE          :0x0
10:07:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:07:40: Reserv4                                       :0x0
10:07:40: Write Speed Factor R2W_FACTOR                 :0x2
10:07:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:07:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:07:40: FILE_FORMAT_GRP                               :0x0
10:07:40: COPY flag                                     :0x1
10:07:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:07:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:07:40: File_Format                                   :0x0
10:07:40: CRC                                           :0x0
10:07:40: ####CSD Registe Values####  

10:07:40: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:07:40: ProductSerialNumber = 0x23482900
10:07:40: CardMaximumLBA      = 0x3b72400
10:07:40: CardCapacity        = 32G
10:07:40: Is card secure      = 0
10:07:40: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:07:40: [DVTCommonLib]###  LogicalWrite called
10:07:42: [ WriteLba(0x15E428B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 961 ] 
10:07:42: [DVTCommonLib]###  LogicalWrite Completed 

10:07:42: [DVTCommonLib]###  LogicalRead called
10:07:44: [ ReadLba(0x15E428B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 962 ] 
10:07:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:07:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:07:44: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 83 times 

10:07:44: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:07:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:07:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 963 ] 
10:07:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:07:44: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:07:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:07:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:07:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:07:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:07:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6240>, <py_sfcl.CommandDataDefinition object at 0x066A62D0>) , Command count = 964 ] 
10:07:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:07:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A69C0>, <py_sfcl.CommandDataDefinition object at 0x066A6840>) , Command count = 965 ] 
10:07:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:07:44: [ SetCardRCA(0x1, 0xD555) , Command count = 966 ] 
10:07:44: [DVTCommonLib]### Identification :Idenfication of card completed 

10:07:44: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:07:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:07:44: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:07:44: [ SetBusWidth(0x1) , Command count = 967 ] 
10:07:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:07:44: ####CSD Registe 2.0 Values####
10:07:44: CSD_STRUCTURE                                 :0x1
10:07:44: Reserv1                                       :0x0
10:07:44: Time Access 1 TAAC                            :0xe
10:07:44: Time Access 2 NSAC*100                        :0x0
10:07:44: Data Transfer Rate TRAN_SPEED                 :0x32
10:07:44: Card Command Classess CCC                     :0x5b5
10:07:44: Max Read Data Block Length  READ_BL_LEN       :0x9
10:07:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:07:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:07:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:07:44: DSR(driver stage register)  DSR_IMP           :0x0
10:07:44: Reserv2                                       :0x0
10:07:44: Device Size C_SIZE                            :0xedc8
10:07:44: Reserv3                                       :0x0
10:07:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:07:44: Erase Sector Size SECTOR_SIZE                 :0x7f
10:07:44: Write Protect Group Size WP_GRP_SIZE          :0x0
10:07:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:07:44: Reserv4                                       :0x0
10:07:44: Write Speed Factor R2W_FACTOR                 :0x2
10:07:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:07:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:07:44: FILE_FORMAT_GRP                               :0x0
10:07:44: COPY flag                                     :0x1
10:07:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:07:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:07:44: File_Format                                   :0x0
10:07:44: CRC                                           :0x0
10:07:44: ####CSD Registe Values####  

10:07:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:07:44: ProductSerialNumber = 0x23482900
10:07:44: CardMaximumLBA      = 0x3b72400
10:07:44: CardCapacity        = 32G
10:07:44: Is card secure      = 0
10:07:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:07:44: [DVTCommonLib]###  LogicalWrite called
10:07:45: [ WriteLba(0x3037FBA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 968 ] 
10:07:45: [DVTCommonLib]###  LogicalWrite Completed 

10:07:45: [DVTCommonLib]###  LogicalRead called
10:07:47: [ ReadLba(0x3037FBA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 969 ] 
10:07:47: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:07:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:07:47: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 84 times 

10:07:47: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:07:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:07:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 970 ] 
10:07:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:07:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:07:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:07:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:07:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:07:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:07:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6690>, <py_sfcl.CommandDataDefinition object at 0x066A6750>) , Command count = 971 ] 
10:07:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:07:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6DE0>, <py_sfcl.CommandDataDefinition object at 0x066A6C30>) , Command count = 972 ] 
10:07:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:07:47: [ SetCardRCA(0x1, 0xD555) , Command count = 973 ] 
10:07:47: [DVTCommonLib]### Identification :Idenfication of card completed 

10:07:47: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:07:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:07:47: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:07:47: [ SetBusWidth(0x1) , Command count = 974 ] 
10:07:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:07:47: ####CSD Registe 2.0 Values####
10:07:47: CSD_STRUCTURE                                 :0x1
10:07:47: Reserv1                                       :0x0
10:07:47: Time Access 1 TAAC                            :0xe
10:07:47: Time Access 2 NSAC*100                        :0x0
10:07:47: Data Transfer Rate TRAN_SPEED                 :0x32
10:07:47: Card Command Classess CCC                     :0x5b5
10:07:47: Max Read Data Block Length  READ_BL_LEN       :0x9
10:07:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:07:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:07:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:07:47: DSR(driver stage register)  DSR_IMP           :0x0
10:07:47: Reserv2                                       :0x0
10:07:47: Device Size C_SIZE                            :0xedc8
10:07:47: Reserv3                                       :0x0
10:07:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:07:47: Erase Sector Size SECTOR_SIZE                 :0x7f
10:07:47: Write Protect Group Size WP_GRP_SIZE          :0x0
10:07:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:07:47: Reserv4                                       :0x0
10:07:47: Write Speed Factor R2W_FACTOR                 :0x2
10:07:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:07:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:07:47: FILE_FORMAT_GRP                               :0x0
10:07:47: COPY flag                                     :0x1
10:07:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:07:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:07:47: File_Format                                   :0x0
10:07:47: CRC                                           :0x0
10:07:47: ####CSD Registe Values####  

10:07:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:07:47: ProductSerialNumber = 0x23482900
10:07:47: CardMaximumLBA      = 0x3b72400
10:07:47: CardCapacity        = 32G
10:07:47: Is card secure      = 0
10:07:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:07:47: [DVTCommonLib]###  LogicalWrite called
10:07:49: [ WriteLba(0x31FCD14, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 975 ] 
10:07:49: [DVTCommonLib]###  LogicalWrite Completed 

10:07:49: [DVTCommonLib]###  LogicalRead called
10:07:50: [ ReadLba(0x31FCD14, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 976 ] 
10:07:50: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:07:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:07:50: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 85 times 

10:07:50: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:07:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:07:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 977 ] 
10:07:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:07:51: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:07:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:07:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:07:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:07:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:07:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6930>, <py_sfcl.CommandDataDefinition object at 0x066A68A0>) , Command count = 978 ] 
10:07:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:07:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE060>, <py_sfcl.CommandDataDefinition object at 0x066A6F00>) , Command count = 979 ] 
10:07:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:07:51: [ SetCardRCA(0x1, 0xD555) , Command count = 980 ] 
10:07:51: [DVTCommonLib]### Identification :Idenfication of card completed 

10:07:51: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:07:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:07:51: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:07:51: [ SetBusWidth(0x1) , Command count = 981 ] 
10:07:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:07:51: ####CSD Registe 2.0 Values####
10:07:51: CSD_STRUCTURE                                 :0x1
10:07:51: Reserv1                                       :0x0
10:07:51: Time Access 1 TAAC                            :0xe
10:07:51: Time Access 2 NSAC*100                        :0x0
10:07:51: Data Transfer Rate TRAN_SPEED                 :0x32
10:07:51: Card Command Classess CCC                     :0x5b5
10:07:51: Max Read Data Block Length  READ_BL_LEN       :0x9
10:07:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:07:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:07:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:07:51: DSR(driver stage register)  DSR_IMP           :0x0
10:07:51: Reserv2                                       :0x0
10:07:51: Device Size C_SIZE                            :0xedc8
10:07:51: Reserv3                                       :0x0
10:07:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:07:51: Erase Sector Size SECTOR_SIZE                 :0x7f
10:07:51: Write Protect Group Size WP_GRP_SIZE          :0x0
10:07:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:07:51: Reserv4                                       :0x0
10:07:51: Write Speed Factor R2W_FACTOR                 :0x2
10:07:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:07:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:07:51: FILE_FORMAT_GRP                               :0x0
10:07:51: COPY flag                                     :0x1
10:07:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:07:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:07:51: File_Format                                   :0x0
10:07:51: CRC                                           :0x0
10:07:51: ####CSD Registe Values####  

10:07:51: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:07:51: ProductSerialNumber = 0x23482900
10:07:51: CardMaximumLBA      = 0x3b72400
10:07:51: CardCapacity        = 32G
10:07:51: Is card secure      = 0
10:07:51: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:07:51: [DVTCommonLib]###  LogicalWrite called
10:07:52: [ WriteLba(0x55350D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 982 ] 
10:07:52: [DVTCommonLib]###  LogicalWrite Completed 

10:07:52: [DVTCommonLib]###  LogicalRead called
10:07:54: [ ReadLba(0x55350D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 983 ] 
10:07:54: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:07:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:07:54: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 86 times 

10:07:54: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:07:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:07:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 984 ] 
10:07:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:07:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:07:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:07:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:07:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:07:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:07:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE1E0>, <py_sfcl.CommandDataDefinition object at 0x066AE210>) , Command count = 985 ] 
10:07:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:07:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE390>, <py_sfcl.CommandDataDefinition object at 0x066A6C90>) , Command count = 986 ] 
10:07:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:07:54: [ SetCardRCA(0x1, 0xD555) , Command count = 987 ] 
10:07:54: [DVTCommonLib]### Identification :Idenfication of card completed 

10:07:54: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:07:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:07:54: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:07:54: [ SetBusWidth(0x1) , Command count = 988 ] 
10:07:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:07:54: ####CSD Registe 2.0 Values####
10:07:54: CSD_STRUCTURE                                 :0x1
10:07:54: Reserv1                                       :0x0
10:07:54: Time Access 1 TAAC                            :0xe
10:07:54: Time Access 2 NSAC*100                        :0x0
10:07:54: Data Transfer Rate TRAN_SPEED                 :0x32
10:07:54: Card Command Classess CCC                     :0x5b5
10:07:54: Max Read Data Block Length  READ_BL_LEN       :0x9
10:07:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:07:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:07:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:07:54: DSR(driver stage register)  DSR_IMP           :0x0
10:07:54: Reserv2                                       :0x0
10:07:54: Device Size C_SIZE                            :0xedc8
10:07:54: Reserv3                                       :0x0
10:07:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:07:54: Erase Sector Size SECTOR_SIZE                 :0x7f
10:07:54: Write Protect Group Size WP_GRP_SIZE          :0x0
10:07:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:07:54: Reserv4                                       :0x0
10:07:54: Write Speed Factor R2W_FACTOR                 :0x2
10:07:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:07:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:07:54: FILE_FORMAT_GRP                               :0x0
10:07:54: COPY flag                                     :0x1
10:07:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:07:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:07:54: File_Format                                   :0x0
10:07:54: CRC                                           :0x0
10:07:54: ####CSD Registe Values####  

10:07:54: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:07:54: ProductSerialNumber = 0x23482900
10:07:54: CardMaximumLBA      = 0x3b72400
10:07:54: CardCapacity        = 32G
10:07:54: Is card secure      = 0
10:07:54: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:07:54: [DVTCommonLib]###  LogicalWrite called
10:07:56: [ WriteLba(0x2EEA3DA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 989 ] 
10:07:56: [DVTCommonLib]###  LogicalWrite Completed 

10:07:56: [DVTCommonLib]###  LogicalRead called
10:07:57: [ ReadLba(0x2EEA3DA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 990 ] 
10:07:57: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:07:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:07:57: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 87 times 

10:07:57: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:07:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:07:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 991 ] 
10:07:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:07:57: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:07:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:07:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:07:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:07:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:07:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6E70>, <py_sfcl.CommandDataDefinition object at 0x066AE360>) , Command count = 992 ] 
10:07:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:07:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE780>, <py_sfcl.CommandDataDefinition object at 0x066AE150>) , Command count = 993 ] 
10:07:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:07:57: [ SetCardRCA(0x1, 0xD555) , Command count = 994 ] 
10:07:57: [DVTCommonLib]### Identification :Idenfication of card completed 

10:07:57: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:07:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:07:57: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:07:57: [ SetBusWidth(0x1) , Command count = 995 ] 
10:07:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:07:57: ####CSD Registe 2.0 Values####
10:07:57: CSD_STRUCTURE                                 :0x1
10:07:57: Reserv1                                       :0x0
10:07:57: Time Access 1 TAAC                            :0xe
10:07:57: Time Access 2 NSAC*100                        :0x0
10:07:57: Data Transfer Rate TRAN_SPEED                 :0x32
10:07:57: Card Command Classess CCC                     :0x5b5
10:07:57: Max Read Data Block Length  READ_BL_LEN       :0x9
10:07:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:07:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:07:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:07:57: DSR(driver stage register)  DSR_IMP           :0x0
10:07:57: Reserv2                                       :0x0
10:07:57: Device Size C_SIZE                            :0xedc8
10:07:57: Reserv3                                       :0x0
10:07:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:07:57: Erase Sector Size SECTOR_SIZE                 :0x7f
10:07:57: Write Protect Group Size WP_GRP_SIZE          :0x0
10:07:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:07:57: Reserv4                                       :0x0
10:07:57: Write Speed Factor R2W_FACTOR                 :0x2
10:07:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:07:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:07:57: FILE_FORMAT_GRP                               :0x0
10:07:57: COPY flag                                     :0x1
10:07:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:07:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:07:57: File_Format                                   :0x0
10:07:57: CRC                                           :0x0
10:07:57: ####CSD Registe Values####  

10:07:57: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:07:57: ProductSerialNumber = 0x23482900
10:07:57: CardMaximumLBA      = 0x3b72400
10:07:57: CardCapacity        = 32G
10:07:57: Is card secure      = 0
10:07:57: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:07:57: [DVTCommonLib]###  LogicalWrite called
10:07:59: [ WriteLba(0x8C7617, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 996 ] 
10:07:59: [DVTCommonLib]###  LogicalWrite Completed 

10:07:59: [DVTCommonLib]###  LogicalRead called
10:08:01: [ ReadLba(0x8C7617, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 997 ] 
10:08:01: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:08:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:08:01: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 88 times 

10:08:01: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:08:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:08:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 998 ] 
10:08:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:08:01: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:08:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:08:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:08:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:08:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:08:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE300>, <py_sfcl.CommandDataDefinition object at 0x066AE270>) , Command count = 999 ] 
10:08:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:08:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEB70>, <py_sfcl.CommandDataDefinition object at 0x066AE9F0>) , Command count = 1000 ] 
10:08:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:08:01: [ SetCardRCA(0x1, 0xD555) , Command count = 1001 ] 
10:08:01: [DVTCommonLib]### Identification :Idenfication of card completed 

10:08:01: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:08:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:08:01: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:08:01: [ SetBusWidth(0x1) , Command count = 1002 ] 
10:08:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:08:01: ####CSD Registe 2.0 Values####
10:08:01: CSD_STRUCTURE                                 :0x1
10:08:01: Reserv1                                       :0x0
10:08:01: Time Access 1 TAAC                            :0xe
10:08:01: Time Access 2 NSAC*100                        :0x0
10:08:01: Data Transfer Rate TRAN_SPEED                 :0x32
10:08:01: Card Command Classess CCC                     :0x5b5
10:08:01: Max Read Data Block Length  READ_BL_LEN       :0x9
10:08:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:08:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:08:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:08:01: DSR(driver stage register)  DSR_IMP           :0x0
10:08:01: Reserv2                                       :0x0
10:08:01: Device Size C_SIZE                            :0xedc8
10:08:01: Reserv3                                       :0x0
10:08:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:08:01: Erase Sector Size SECTOR_SIZE                 :0x7f
10:08:01: Write Protect Group Size WP_GRP_SIZE          :0x0
10:08:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:08:01: Reserv4                                       :0x0
10:08:01: Write Speed Factor R2W_FACTOR                 :0x2
10:08:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:08:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:08:01: FILE_FORMAT_GRP                               :0x0
10:08:01: COPY flag                                     :0x1
10:08:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:08:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:08:01: File_Format                                   :0x0
10:08:01: CRC                                           :0x0
10:08:01: ####CSD Registe Values####  

10:08:01: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:08:01: ProductSerialNumber = 0x23482900
10:08:01: CardMaximumLBA      = 0x3b72400
10:08:01: CardCapacity        = 32G
10:08:01: Is card secure      = 0
10:08:01: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:08:01: [DVTCommonLib]###  LogicalWrite called
10:08:02: [ WriteLba(0xA5DFE1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1003 ] 
10:08:02: [DVTCommonLib]###  LogicalWrite Completed 

10:08:02: [DVTCommonLib]###  LogicalRead called
10:08:04: [ ReadLba(0xA5DFE1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1004 ] 
10:08:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:08:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:08:04: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 89 times 

10:08:04: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:08:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:08:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1005 ] 
10:08:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:08:04: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:08:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:08:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:08:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:08:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:08:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE6F0>, <py_sfcl.CommandDataDefinition object at 0x066AE660>) , Command count = 1006 ] 
10:08:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:08:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1030>, <py_sfcl.CommandDataDefinition object at 0x066AEDE0>) , Command count = 1007 ] 
10:08:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:08:04: [ SetCardRCA(0x1, 0xD555) , Command count = 1008 ] 
10:08:04: [DVTCommonLib]### Identification :Idenfication of card completed 

10:08:04: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:08:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:08:04: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:08:04: [ SetBusWidth(0x1) , Command count = 1009 ] 
10:08:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:08:04: ####CSD Registe 2.0 Values####
10:08:04: CSD_STRUCTURE                                 :0x1
10:08:04: Reserv1                                       :0x0
10:08:04: Time Access 1 TAAC                            :0xe
10:08:04: Time Access 2 NSAC*100                        :0x0
10:08:04: Data Transfer Rate TRAN_SPEED                 :0x32
10:08:04: Card Command Classess CCC                     :0x5b5
10:08:04: Max Read Data Block Length  READ_BL_LEN       :0x9
10:08:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:08:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:08:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:08:04: DSR(driver stage register)  DSR_IMP           :0x0
10:08:04: Reserv2                                       :0x0
10:08:04: Device Size C_SIZE                            :0xedc8
10:08:04: Reserv3                                       :0x0
10:08:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:08:04: Erase Sector Size SECTOR_SIZE                 :0x7f
10:08:04: Write Protect Group Size WP_GRP_SIZE          :0x0
10:08:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:08:04: Reserv4                                       :0x0
10:08:04: Write Speed Factor R2W_FACTOR                 :0x2
10:08:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:08:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:08:04: FILE_FORMAT_GRP                               :0x0
10:08:04: COPY flag                                     :0x1
10:08:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:08:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:08:04: File_Format                                   :0x0
10:08:04: CRC                                           :0x0
10:08:04: ####CSD Registe Values####  

10:08:04: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:08:04: ProductSerialNumber = 0x23482900
10:08:04: CardMaximumLBA      = 0x3b72400
10:08:04: CardCapacity        = 32G
10:08:04: Is card secure      = 0
10:08:04: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:08:04: [DVTCommonLib]###  LogicalWrite called
10:08:06: [ WriteLba(0x1D67593, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1010 ] 
10:08:06: [DVTCommonLib]###  LogicalWrite Completed 

10:08:06: [DVTCommonLib]###  LogicalRead called
10:08:07: [ ReadLba(0x1D67593, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1011 ] 
10:08:07: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:08:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:08:07: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 90 times 

10:08:07: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:08:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:08:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1012 ] 
10:08:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:08:07: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:08:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:08:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:08:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:08:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:08:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE7A80>, <py_sfcl.CommandDataDefinition object at 0x066B1120>) , Command count = 1013 ] 
10:08:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:08:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1150>, <py_sfcl.CommandDataDefinition object at 0x066AEE70>) , Command count = 1014 ] 
10:08:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:08:07: [ SetCardRCA(0x1, 0xD555) , Command count = 1015 ] 
10:08:08: [DVTCommonLib]### Identification :Idenfication of card completed 

10:08:08: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:08:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:08:08: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:08:08: [ SetBusWidth(0x1) , Command count = 1016 ] 
10:08:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:08:08: ####CSD Registe 2.0 Values####
10:08:08: CSD_STRUCTURE                                 :0x1
10:08:08: Reserv1                                       :0x0
10:08:08: Time Access 1 TAAC                            :0xe
10:08:08: Time Access 2 NSAC*100                        :0x0
10:08:08: Data Transfer Rate TRAN_SPEED                 :0x32
10:08:08: Card Command Classess CCC                     :0x5b5
10:08:08: Max Read Data Block Length  READ_BL_LEN       :0x9
10:08:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:08:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:08:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:08:08: DSR(driver stage register)  DSR_IMP           :0x0
10:08:08: Reserv2                                       :0x0
10:08:08: Device Size C_SIZE                            :0xedc8
10:08:08: Reserv3                                       :0x0
10:08:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:08:08: Erase Sector Size SECTOR_SIZE                 :0x7f
10:08:08: Write Protect Group Size WP_GRP_SIZE          :0x0
10:08:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:08:08: Reserv4                                       :0x0
10:08:08: Write Speed Factor R2W_FACTOR                 :0x2
10:08:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:08:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:08:08: FILE_FORMAT_GRP                               :0x0
10:08:08: COPY flag                                     :0x1
10:08:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:08:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:08:08: File_Format                                   :0x0
10:08:08: CRC                                           :0x0
10:08:08: ####CSD Registe Values####  

10:08:08: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:08:08: ProductSerialNumber = 0x23482900
10:08:08: CardMaximumLBA      = 0x3b72400
10:08:08: CardCapacity        = 32G
10:08:08: Is card secure      = 0
10:08:08: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:08:08: [DVTCommonLib]###  LogicalWrite called
10:08:09: [ WriteLba(0x2048462, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1017 ] 
10:08:09: [DVTCommonLib]###  LogicalWrite Completed 

10:08:09: [DVTCommonLib]###  LogicalRead called
10:08:11: [ ReadLba(0x2048462, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1018 ] 
10:08:11: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:08:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:08:11: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 91 times 

10:08:11: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:08:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:08:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1019 ] 
10:08:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:08:11: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:08:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:08:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:08:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:08:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:08:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05EC0A20>, <py_sfcl.CommandDataDefinition object at 0x05FDBC60>) , Command count = 1020 ] 
10:08:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:08:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FCB210>, <py_sfcl.CommandDataDefinition object at 0x066B10C0>) , Command count = 1021 ] 
10:08:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:08:11: [ SetCardRCA(0x1, 0xD555) , Command count = 1022 ] 
10:08:11: [DVTCommonLib]### Identification :Idenfication of card completed 

10:08:11: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:08:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:08:11: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:08:11: [ SetBusWidth(0x1) , Command count = 1023 ] 
10:08:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:08:11: ####CSD Registe 2.0 Values####
10:08:11: CSD_STRUCTURE                                 :0x1
10:08:11: Reserv1                                       :0x0
10:08:11: Time Access 1 TAAC                            :0xe
10:08:11: Time Access 2 NSAC*100                        :0x0
10:08:11: Data Transfer Rate TRAN_SPEED                 :0x32
10:08:11: Card Command Classess CCC                     :0x5b5
10:08:11: Max Read Data Block Length  READ_BL_LEN       :0x9
10:08:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:08:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:08:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:08:11: DSR(driver stage register)  DSR_IMP           :0x0
10:08:11: Reserv2                                       :0x0
10:08:11: Device Size C_SIZE                            :0xedc8
10:08:11: Reserv3                                       :0x0
10:08:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:08:11: Erase Sector Size SECTOR_SIZE                 :0x7f
10:08:11: Write Protect Group Size WP_GRP_SIZE          :0x0
10:08:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:08:11: Reserv4                                       :0x0
10:08:11: Write Speed Factor R2W_FACTOR                 :0x2
10:08:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:08:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:08:11: FILE_FORMAT_GRP                               :0x0
10:08:11: COPY flag                                     :0x1
10:08:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:08:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:08:11: File_Format                                   :0x0
10:08:11: CRC                                           :0x0
10:08:11: ####CSD Registe Values####  

10:08:11: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:08:11: ProductSerialNumber = 0x23482900
10:08:11: CardMaximumLBA      = 0x3b72400
10:08:11: CardCapacity        = 32G
10:08:11: Is card secure      = 0
10:08:11: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:08:11: [DVTCommonLib]###  LogicalWrite called
10:08:13: [ WriteLba(0x1FF35C0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1024 ] 
10:08:13: [DVTCommonLib]###  LogicalWrite Completed 

10:08:13: [DVTCommonLib]###  LogicalRead called
10:08:14: [ ReadLba(0x1FF35C0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1025 ] 
10:08:14: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:08:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:08:14: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 92 times 

10:08:14: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:08:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:08:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1026 ] 
10:08:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:08:15: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:08:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:08:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:08:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:08:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:08:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDBDB0>, <py_sfcl.CommandDataDefinition object at 0x05FE7540>) , Command count = 1027 ] 
10:08:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:08:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06033930>, <py_sfcl.CommandDataDefinition object at 0x066B13F0>) , Command count = 1028 ] 
10:08:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:08:15: [ SetCardRCA(0x1, 0xD555) , Command count = 1029 ] 
10:08:15: [DVTCommonLib]### Identification :Idenfication of card completed 

10:08:15: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:08:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:08:15: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:08:15: [ SetBusWidth(0x1) , Command count = 1030 ] 
10:08:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:08:15: ####CSD Registe 2.0 Values####
10:08:15: CSD_STRUCTURE                                 :0x1
10:08:15: Reserv1                                       :0x0
10:08:15: Time Access 1 TAAC                            :0xe
10:08:15: Time Access 2 NSAC*100                        :0x0
10:08:15: Data Transfer Rate TRAN_SPEED                 :0x32
10:08:15: Card Command Classess CCC                     :0x5b5
10:08:15: Max Read Data Block Length  READ_BL_LEN       :0x9
10:08:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:08:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:08:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:08:15: DSR(driver stage register)  DSR_IMP           :0x0
10:08:15: Reserv2                                       :0x0
10:08:15: Device Size C_SIZE                            :0xedc8
10:08:15: Reserv3                                       :0x0
10:08:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:08:15: Erase Sector Size SECTOR_SIZE                 :0x7f
10:08:15: Write Protect Group Size WP_GRP_SIZE          :0x0
10:08:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:08:15: Reserv4                                       :0x0
10:08:15: Write Speed Factor R2W_FACTOR                 :0x2
10:08:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:08:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:08:15: FILE_FORMAT_GRP                               :0x0
10:08:15: COPY flag                                     :0x1
10:08:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:08:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:08:15: File_Format                                   :0x0
10:08:15: CRC                                           :0x0
10:08:15: ####CSD Registe Values####  

10:08:15: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:08:15: ProductSerialNumber = 0x23482900
10:08:15: CardMaximumLBA      = 0x3b72400
10:08:15: CardCapacity        = 32G
10:08:15: Is card secure      = 0
10:08:15: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:08:15: [DVTCommonLib]###  LogicalWrite called
10:08:16: [ WriteLba(0x16FBBFE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1031 ] 
10:08:16: [DVTCommonLib]###  LogicalWrite Completed 

10:08:16: [DVTCommonLib]###  LogicalRead called
10:08:18: [ ReadLba(0x16FBBFE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1032 ] 
10:08:18: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:08:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:08:18: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 93 times 

10:08:18: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:08:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:08:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1033 ] 
10:08:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:08:18: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:08:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:08:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:08:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:08:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:08:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE73F0>, <py_sfcl.CommandDataDefinition object at 0x05FE7330>) , Command count = 1034 ] 
10:08:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:08:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038810>, <py_sfcl.CommandDataDefinition object at 0x066B16C0>) , Command count = 1035 ] 
10:08:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:08:18: [ SetCardRCA(0x1, 0xD555) , Command count = 1036 ] 
10:08:18: [DVTCommonLib]### Identification :Idenfication of card completed 

10:08:18: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:08:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:08:18: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:08:18: [ SetBusWidth(0x1) , Command count = 1037 ] 
10:08:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:08:18: ####CSD Registe 2.0 Values####
10:08:18: CSD_STRUCTURE                                 :0x1
10:08:18: Reserv1                                       :0x0
10:08:18: Time Access 1 TAAC                            :0xe
10:08:18: Time Access 2 NSAC*100                        :0x0
10:08:18: Data Transfer Rate TRAN_SPEED                 :0x32
10:08:18: Card Command Classess CCC                     :0x5b5
10:08:18: Max Read Data Block Length  READ_BL_LEN       :0x9
10:08:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:08:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:08:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:08:18: DSR(driver stage register)  DSR_IMP           :0x0
10:08:18: Reserv2                                       :0x0
10:08:18: Device Size C_SIZE                            :0xedc8
10:08:18: Reserv3                                       :0x0
10:08:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:08:18: Erase Sector Size SECTOR_SIZE                 :0x7f
10:08:18: Write Protect Group Size WP_GRP_SIZE          :0x0
10:08:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:08:18: Reserv4                                       :0x0
10:08:18: Write Speed Factor R2W_FACTOR                 :0x2
10:08:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:08:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:08:18: FILE_FORMAT_GRP                               :0x0
10:08:18: COPY flag                                     :0x1
10:08:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:08:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:08:18: File_Format                                   :0x0
10:08:18: CRC                                           :0x0
10:08:18: ####CSD Registe Values####  

10:08:18: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:08:18: ProductSerialNumber = 0x23482900
10:08:18: CardMaximumLBA      = 0x3b72400
10:08:18: CardCapacity        = 32G
10:08:18: Is card secure      = 0
10:08:18: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:08:18: [DVTCommonLib]###  LogicalWrite called
10:08:20: [ WriteLba(0x10009C9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1038 ] 
10:08:20: [DVTCommonLib]###  LogicalWrite Completed 

10:08:20: [DVTCommonLib]###  LogicalRead called
10:08:21: [ ReadLba(0x10009C9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1039 ] 
10:08:21: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:08:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:08:21: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 94 times 

10:08:21: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:08:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:08:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1040 ] 
10:08:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:08:21: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:08:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:08:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:08:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:08:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:08:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06033C90>, <py_sfcl.CommandDataDefinition object at 0x06033540>) , Command count = 1041 ] 
10:08:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:08:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038A50>, <py_sfcl.CommandDataDefinition object at 0x066B1960>) , Command count = 1042 ] 
10:08:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:08:21: [ SetCardRCA(0x1, 0xD555) , Command count = 1043 ] 
10:08:21: [DVTCommonLib]### Identification :Idenfication of card completed 

10:08:21: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:08:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:08:21: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:08:21: [ SetBusWidth(0x1) , Command count = 1044 ] 
10:08:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:08:21: ####CSD Registe 2.0 Values####
10:08:21: CSD_STRUCTURE                                 :0x1
10:08:21: Reserv1                                       :0x0
10:08:21: Time Access 1 TAAC                            :0xe
10:08:21: Time Access 2 NSAC*100                        :0x0
10:08:21: Data Transfer Rate TRAN_SPEED                 :0x32
10:08:21: Card Command Classess CCC                     :0x5b5
10:08:21: Max Read Data Block Length  READ_BL_LEN       :0x9
10:08:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:08:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:08:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:08:21: DSR(driver stage register)  DSR_IMP           :0x0
10:08:21: Reserv2                                       :0x0
10:08:21: Device Size C_SIZE                            :0xedc8
10:08:21: Reserv3                                       :0x0
10:08:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:08:21: Erase Sector Size SECTOR_SIZE                 :0x7f
10:08:21: Write Protect Group Size WP_GRP_SIZE          :0x0
10:08:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:08:21: Reserv4                                       :0x0
10:08:21: Write Speed Factor R2W_FACTOR                 :0x2
10:08:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:08:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:08:21: FILE_FORMAT_GRP                               :0x0
10:08:21: COPY flag                                     :0x1
10:08:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:08:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:08:21: File_Format                                   :0x0
10:08:21: CRC                                           :0x0
10:08:21: ####CSD Registe Values####  

10:08:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:08:21: ProductSerialNumber = 0x23482900
10:08:21: CardMaximumLBA      = 0x3b72400
10:08:21: CardCapacity        = 32G
10:08:21: Is card secure      = 0
10:08:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:08:21: [DVTCommonLib]###  LogicalWrite called
10:08:23: [ WriteLba(0x1A203D0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1045 ] 
10:08:23: [DVTCommonLib]###  LogicalWrite Completed 

10:08:23: [DVTCommonLib]###  LogicalRead called
10:08:25: [ ReadLba(0x1A203D0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1046 ] 
10:08:25: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:08:25: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:08:25: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 95 times 

10:08:25: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:08:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:08:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1047 ] 
10:08:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:08:25: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:08:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:08:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:08:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:08:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:08:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060386F0>, <py_sfcl.CommandDataDefinition object at 0x060386C0>) , Command count = 1048 ] 
10:08:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:08:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661D5D0>, <py_sfcl.CommandDataDefinition object at 0x066B1C30>) , Command count = 1049 ] 
10:08:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:08:25: [ SetCardRCA(0x1, 0xD555) , Command count = 1050 ] 
10:08:25: [DVTCommonLib]### Identification :Idenfication of card completed 

10:08:25: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:08:25: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:08:25: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:08:25: [ SetBusWidth(0x1) , Command count = 1051 ] 
10:08:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:08:25: ####CSD Registe 2.0 Values####
10:08:25: CSD_STRUCTURE                                 :0x1
10:08:25: Reserv1                                       :0x0
10:08:25: Time Access 1 TAAC                            :0xe
10:08:25: Time Access 2 NSAC*100                        :0x0
10:08:25: Data Transfer Rate TRAN_SPEED                 :0x32
10:08:25: Card Command Classess CCC                     :0x5b5
10:08:25: Max Read Data Block Length  READ_BL_LEN       :0x9
10:08:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:08:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:08:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:08:25: DSR(driver stage register)  DSR_IMP           :0x0
10:08:25: Reserv2                                       :0x0
10:08:25: Device Size C_SIZE                            :0xedc8
10:08:25: Reserv3                                       :0x0
10:08:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:08:25: Erase Sector Size SECTOR_SIZE                 :0x7f
10:08:25: Write Protect Group Size WP_GRP_SIZE          :0x0
10:08:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:08:25: Reserv4                                       :0x0
10:08:25: Write Speed Factor R2W_FACTOR                 :0x2
10:08:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:08:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:08:25: FILE_FORMAT_GRP                               :0x0
10:08:25: COPY flag                                     :0x1
10:08:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:08:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:08:25: File_Format                                   :0x0
10:08:25: CRC                                           :0x0
10:08:25: ####CSD Registe Values####  

10:08:25: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:08:25: ProductSerialNumber = 0x23482900
10:08:25: CardMaximumLBA      = 0x3b72400
10:08:25: CardCapacity        = 32G
10:08:25: Is card secure      = 0
10:08:25: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:08:25: [DVTCommonLib]###  LogicalWrite called
10:08:26: [ WriteLba(0x7F8890, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1052 ] 
10:08:26: [DVTCommonLib]###  LogicalWrite Completed 

10:08:26: [DVTCommonLib]###  LogicalRead called
10:08:28: [ ReadLba(0x7F8890, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1053 ] 
10:08:28: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:08:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:08:28: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 96 times 

10:08:28: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:08:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:08:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1054 ] 
10:08:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:08:28: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:08:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:08:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:08:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:08:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:08:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDBBD0>, <py_sfcl.CommandDataDefinition object at 0x060389C0>) , Command count = 1055 ] 
10:08:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:08:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DC00>, <py_sfcl.CommandDataDefinition object at 0x066B1F00>) , Command count = 1056 ] 
10:08:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:08:28: [ SetCardRCA(0x1, 0xD555) , Command count = 1057 ] 
10:08:28: [DVTCommonLib]### Identification :Idenfication of card completed 

10:08:28: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:08:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:08:28: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:08:28: [ SetBusWidth(0x1) , Command count = 1058 ] 
10:08:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:08:28: ####CSD Registe 2.0 Values####
10:08:28: CSD_STRUCTURE                                 :0x1
10:08:28: Reserv1                                       :0x0
10:08:28: Time Access 1 TAAC                            :0xe
10:08:28: Time Access 2 NSAC*100                        :0x0
10:08:28: Data Transfer Rate TRAN_SPEED                 :0x32
10:08:28: Card Command Classess CCC                     :0x5b5
10:08:28: Max Read Data Block Length  READ_BL_LEN       :0x9
10:08:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:08:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:08:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:08:28: DSR(driver stage register)  DSR_IMP           :0x0
10:08:28: Reserv2                                       :0x0
10:08:28: Device Size C_SIZE                            :0xedc8
10:08:28: Reserv3                                       :0x0
10:08:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:08:28: Erase Sector Size SECTOR_SIZE                 :0x7f
10:08:28: Write Protect Group Size WP_GRP_SIZE          :0x0
10:08:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:08:28: Reserv4                                       :0x0
10:08:28: Write Speed Factor R2W_FACTOR                 :0x2
10:08:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:08:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:08:28: FILE_FORMAT_GRP                               :0x0
10:08:28: COPY flag                                     :0x1
10:08:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:08:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:08:28: File_Format                                   :0x0
10:08:28: CRC                                           :0x0
10:08:28: ####CSD Registe Values####  

10:08:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:08:28: ProductSerialNumber = 0x23482900
10:08:28: CardMaximumLBA      = 0x3b72400
10:08:28: CardCapacity        = 32G
10:08:28: Is card secure      = 0
10:08:28: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:08:28: [DVTCommonLib]###  LogicalWrite called
10:08:30: [ WriteLba(0x2A5A2CC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1059 ] 
10:08:30: [DVTCommonLib]###  LogicalWrite Completed 

10:08:30: [DVTCommonLib]###  LogicalRead called
10:08:31: [ ReadLba(0x2A5A2CC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1060 ] 
10:08:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:08:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:08:31: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 97 times 

10:08:31: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:08:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:08:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1061 ] 
10:08:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:08:32: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:08:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:08:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:08:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:08:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:08:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06592360>, <py_sfcl.CommandDataDefinition object at 0x065921B0>) , Command count = 1062 ] 
10:08:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:08:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1D80>, <py_sfcl.CommandDataDefinition object at 0x066B1F90>) , Command count = 1063 ] 
10:08:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:08:32: [ SetCardRCA(0x1, 0xD555) , Command count = 1064 ] 
10:08:32: [DVTCommonLib]### Identification :Idenfication of card completed 

10:08:32: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:08:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:08:32: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:08:32: [ SetBusWidth(0x1) , Command count = 1065 ] 
10:08:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:08:32: ####CSD Registe 2.0 Values####
10:08:32: CSD_STRUCTURE                                 :0x1
10:08:32: Reserv1                                       :0x0
10:08:32: Time Access 1 TAAC                            :0xe
10:08:32: Time Access 2 NSAC*100                        :0x0
10:08:32: Data Transfer Rate TRAN_SPEED                 :0x32
10:08:32: Card Command Classess CCC                     :0x5b5
10:08:32: Max Read Data Block Length  READ_BL_LEN       :0x9
10:08:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:08:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:08:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:08:32: DSR(driver stage register)  DSR_IMP           :0x0
10:08:32: Reserv2                                       :0x0
10:08:32: Device Size C_SIZE                            :0xedc8
10:08:32: Reserv3                                       :0x0
10:08:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:08:32: Erase Sector Size SECTOR_SIZE                 :0x7f
10:08:32: Write Protect Group Size WP_GRP_SIZE          :0x0
10:08:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:08:32: Reserv4                                       :0x0
10:08:32: Write Speed Factor R2W_FACTOR                 :0x2
10:08:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:08:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:08:32: FILE_FORMAT_GRP                               :0x0
10:08:32: COPY flag                                     :0x1
10:08:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:08:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:08:32: File_Format                                   :0x0
10:08:32: CRC                                           :0x0
10:08:32: ####CSD Registe Values####  

10:08:32: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:08:32: ProductSerialNumber = 0x23482900
10:08:32: CardMaximumLBA      = 0x3b72400
10:08:32: CardCapacity        = 32G
10:08:32: Is card secure      = 0
10:08:32: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:08:32: [DVTCommonLib]###  LogicalWrite called
10:08:33: [ WriteLba(0x3B04372, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1066 ] 
10:08:33: [DVTCommonLib]###  LogicalWrite Completed 

10:08:33: [DVTCommonLib]###  LogicalRead called
10:08:35: [ ReadLba(0x3B04372, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1067 ] 
10:08:35: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:08:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:08:35: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 98 times 

10:08:35: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:08:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:08:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1068 ] 
10:08:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:08:35: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:08:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:08:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:08:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:08:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:08:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A120>, <py_sfcl.CommandDataDefinition object at 0x0662DD80>) , Command count = 1069 ] 
10:08:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:08:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A210>, <py_sfcl.CommandDataDefinition object at 0x0662DDE0>) , Command count = 1070 ] 
10:08:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:08:35: [ SetCardRCA(0x1, 0xD555) , Command count = 1071 ] 
10:08:35: [DVTCommonLib]### Identification :Idenfication of card completed 

10:08:35: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:08:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:08:35: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:08:35: [ SetBusWidth(0x1) , Command count = 1072 ] 
10:08:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:08:35: ####CSD Registe 2.0 Values####
10:08:35: CSD_STRUCTURE                                 :0x1
10:08:35: Reserv1                                       :0x0
10:08:35: Time Access 1 TAAC                            :0xe
10:08:35: Time Access 2 NSAC*100                        :0x0
10:08:35: Data Transfer Rate TRAN_SPEED                 :0x32
10:08:35: Card Command Classess CCC                     :0x5b5
10:08:35: Max Read Data Block Length  READ_BL_LEN       :0x9
10:08:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:08:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:08:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:08:35: DSR(driver stage register)  DSR_IMP           :0x0
10:08:35: Reserv2                                       :0x0
10:08:35: Device Size C_SIZE                            :0xedc8
10:08:35: Reserv3                                       :0x0
10:08:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:08:35: Erase Sector Size SECTOR_SIZE                 :0x7f
10:08:35: Write Protect Group Size WP_GRP_SIZE          :0x0
10:08:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:08:35: Reserv4                                       :0x0
10:08:35: Write Speed Factor R2W_FACTOR                 :0x2
10:08:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:08:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:08:35: FILE_FORMAT_GRP                               :0x0
10:08:35: COPY flag                                     :0x1
10:08:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:08:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:08:35: File_Format                                   :0x0
10:08:35: CRC                                           :0x0
10:08:35: ####CSD Registe Values####  

10:08:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:08:35: ProductSerialNumber = 0x23482900
10:08:35: CardMaximumLBA      = 0x3b72400
10:08:35: CardCapacity        = 32G
10:08:35: Is card secure      = 0
10:08:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:08:35: [DVTCommonLib]###  LogicalWrite called
10:08:37: [ WriteLba(0x876EFD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1073 ] 
10:08:37: [DVTCommonLib]###  LogicalWrite Completed 

10:08:37: [DVTCommonLib]###  LogicalRead called
10:08:38: [ ReadLba(0x876EFD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1074 ] 
10:08:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:08:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:08:38: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 99 times 

10:08:38: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:08:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:08:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1075 ] 
10:08:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:08:38: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:08:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:08:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:08:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:08:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:08:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEF030>, <py_sfcl.CommandDataDefinition object at 0x06038ED0>) , Command count = 1076 ] 
10:08:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:08:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AE40>, <py_sfcl.CommandDataDefinition object at 0x0663A210>) , Command count = 1077 ] 
10:08:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:08:38: [ SetCardRCA(0x1, 0xD555) , Command count = 1078 ] 
10:08:38: [DVTCommonLib]### Identification :Idenfication of card completed 

10:08:38: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:08:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:08:38: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:08:38: [ SetBusWidth(0x1) , Command count = 1079 ] 
10:08:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:08:38: ####CSD Registe 2.0 Values####
10:08:38: CSD_STRUCTURE                                 :0x1
10:08:38: Reserv1                                       :0x0
10:08:38: Time Access 1 TAAC                            :0xe
10:08:38: Time Access 2 NSAC*100                        :0x0
10:08:38: Data Transfer Rate TRAN_SPEED                 :0x32
10:08:38: Card Command Classess CCC                     :0x5b5
10:08:38: Max Read Data Block Length  READ_BL_LEN       :0x9
10:08:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:08:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:08:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:08:38: DSR(driver stage register)  DSR_IMP           :0x0
10:08:38: Reserv2                                       :0x0
10:08:38: Device Size C_SIZE                            :0xedc8
10:08:38: Reserv3                                       :0x0
10:08:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:08:38: Erase Sector Size SECTOR_SIZE                 :0x7f
10:08:38: Write Protect Group Size WP_GRP_SIZE          :0x0
10:08:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:08:38: Reserv4                                       :0x0
10:08:38: Write Speed Factor R2W_FACTOR                 :0x2
10:08:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:08:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:08:38: FILE_FORMAT_GRP                               :0x0
10:08:38: COPY flag                                     :0x1
10:08:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:08:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:08:38: File_Format                                   :0x0
10:08:38: CRC                                           :0x0
10:08:38: ####CSD Registe Values####  

10:08:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:08:38: ProductSerialNumber = 0x23482900
10:08:38: CardMaximumLBA      = 0x3b72400
10:08:38: CardCapacity        = 32G
10:08:38: Is card secure      = 0
10:08:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:08:38: [DVTCommonLib]###  LogicalWrite called
10:08:40: [ WriteLba(0x2641C7B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1080 ] 
10:08:40: [DVTCommonLib]###  LogicalWrite Completed 

10:08:40: [DVTCommonLib]###  LogicalRead called
10:08:42: [ ReadLba(0x2641C7B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1081 ] 
10:08:42: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:08:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:08:42: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 100 times 

10:08:42: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:08:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:08:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1082 ] 
10:08:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:08:42: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:08:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:08:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:08:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:08:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:08:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661DC30>, <py_sfcl.CommandDataDefinition object at 0x0663A630>) , Command count = 1083 ] 
10:08:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:08:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A570>, <py_sfcl.CommandDataDefinition object at 0x0663ACC0>) , Command count = 1084 ] 
10:08:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:08:42: [ SetCardRCA(0x1, 0xD555) , Command count = 1085 ] 
10:08:42: [DVTCommonLib]### Identification :Idenfication of card completed 

10:08:42: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:08:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:08:42: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:08:42: [ SetBusWidth(0x1) , Command count = 1086 ] 
10:08:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:08:42: ####CSD Registe 2.0 Values####
10:08:42: CSD_STRUCTURE                                 :0x1
10:08:42: Reserv1                                       :0x0
10:08:42: Time Access 1 TAAC                            :0xe
10:08:42: Time Access 2 NSAC*100                        :0x0
10:08:42: Data Transfer Rate TRAN_SPEED                 :0x32
10:08:42: Card Command Classess CCC                     :0x5b5
10:08:42: Max Read Data Block Length  READ_BL_LEN       :0x9
10:08:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:08:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:08:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:08:42: DSR(driver stage register)  DSR_IMP           :0x0
10:08:42: Reserv2                                       :0x0
10:08:42: Device Size C_SIZE                            :0xedc8
10:08:42: Reserv3                                       :0x0
10:08:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:08:42: Erase Sector Size SECTOR_SIZE                 :0x7f
10:08:42: Write Protect Group Size WP_GRP_SIZE          :0x0
10:08:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:08:42: Reserv4                                       :0x0
10:08:42: Write Speed Factor R2W_FACTOR                 :0x2
10:08:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:08:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:08:42: FILE_FORMAT_GRP                               :0x0
10:08:42: COPY flag                                     :0x1
10:08:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:08:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:08:42: File_Format                                   :0x0
10:08:42: CRC                                           :0x0
10:08:42: ####CSD Registe Values####  

10:08:42: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:08:42: ProductSerialNumber = 0x23482900
10:08:42: CardMaximumLBA      = 0x3b72400
10:08:42: CardCapacity        = 32G
10:08:42: Is card secure      = 0
10:08:42: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:08:42: [DVTCommonLib]###  LogicalWrite called
10:08:43: [ WriteLba(0x321D53A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1087 ] 
10:08:43: [DVTCommonLib]###  LogicalWrite Completed 

10:08:43: [DVTCommonLib]###  LogicalRead called
10:08:45: [ ReadLba(0x321D53A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1088 ] 
10:08:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:08:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:08:45: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 101 times 

10:08:45: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:08:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:08:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1089 ] 
10:08:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:08:45: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:08:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:08:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:08:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:08:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:08:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DCC0>, <py_sfcl.CommandDataDefinition object at 0x0663ADE0>) , Command count = 1090 ] 
10:08:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:08:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E300>, <py_sfcl.CommandDataDefinition object at 0x0663E270>) , Command count = 1091 ] 
10:08:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:08:45: [ SetCardRCA(0x1, 0xD555) , Command count = 1092 ] 
10:08:45: [DVTCommonLib]### Identification :Idenfication of card completed 

10:08:45: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:08:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:08:45: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:08:45: [ SetBusWidth(0x1) , Command count = 1093 ] 
10:08:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:08:45: ####CSD Registe 2.0 Values####
10:08:45: CSD_STRUCTURE                                 :0x1
10:08:45: Reserv1                                       :0x0
10:08:45: Time Access 1 TAAC                            :0xe
10:08:45: Time Access 2 NSAC*100                        :0x0
10:08:45: Data Transfer Rate TRAN_SPEED                 :0x32
10:08:45: Card Command Classess CCC                     :0x5b5
10:08:45: Max Read Data Block Length  READ_BL_LEN       :0x9
10:08:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:08:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:08:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:08:45: DSR(driver stage register)  DSR_IMP           :0x0
10:08:45: Reserv2                                       :0x0
10:08:45: Device Size C_SIZE                            :0xedc8
10:08:45: Reserv3                                       :0x0
10:08:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:08:45: Erase Sector Size SECTOR_SIZE                 :0x7f
10:08:45: Write Protect Group Size WP_GRP_SIZE          :0x0
10:08:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:08:45: Reserv4                                       :0x0
10:08:45: Write Speed Factor R2W_FACTOR                 :0x2
10:08:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:08:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:08:45: FILE_FORMAT_GRP                               :0x0
10:08:45: COPY flag                                     :0x1
10:08:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:08:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:08:45: File_Format                                   :0x0
10:08:45: CRC                                           :0x0
10:08:45: ####CSD Registe Values####  

10:08:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:08:45: ProductSerialNumber = 0x23482900
10:08:45: CardMaximumLBA      = 0x3b72400
10:08:45: CardCapacity        = 32G
10:08:45: Is card secure      = 0
10:08:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:08:45: [DVTCommonLib]###  LogicalWrite called
10:08:47: [ WriteLba(0x21E5586, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1094 ] 
10:08:47: [DVTCommonLib]###  LogicalWrite Completed 

10:08:47: [DVTCommonLib]###  LogicalRead called
10:08:48: [ ReadLba(0x21E5586, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1095 ] 
10:08:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:08:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:08:48: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 102 times 

10:08:48: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:08:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:08:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1096 ] 
10:08:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:08:49: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:08:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:08:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:08:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:08:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:08:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AFC0>, <py_sfcl.CommandDataDefinition object at 0x05FE73C0>) , Command count = 1097 ] 
10:08:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:08:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E690>, <py_sfcl.CommandDataDefinition object at 0x0663E510>) , Command count = 1098 ] 
10:08:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:08:49: [ SetCardRCA(0x1, 0xD555) , Command count = 1099 ] 
10:08:49: [DVTCommonLib]### Identification :Idenfication of card completed 

10:08:49: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:08:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:08:49: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:08:49: [ SetBusWidth(0x1) , Command count = 1100 ] 
10:08:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:08:49: ####CSD Registe 2.0 Values####
10:08:49: CSD_STRUCTURE                                 :0x1
10:08:49: Reserv1                                       :0x0
10:08:49: Time Access 1 TAAC                            :0xe
10:08:49: Time Access 2 NSAC*100                        :0x0
10:08:49: Data Transfer Rate TRAN_SPEED                 :0x32
10:08:49: Card Command Classess CCC                     :0x5b5
10:08:49: Max Read Data Block Length  READ_BL_LEN       :0x9
10:08:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:08:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:08:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:08:49: DSR(driver stage register)  DSR_IMP           :0x0
10:08:49: Reserv2                                       :0x0
10:08:49: Device Size C_SIZE                            :0xedc8
10:08:49: Reserv3                                       :0x0
10:08:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:08:49: Erase Sector Size SECTOR_SIZE                 :0x7f
10:08:49: Write Protect Group Size WP_GRP_SIZE          :0x0
10:08:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:08:49: Reserv4                                       :0x0
10:08:49: Write Speed Factor R2W_FACTOR                 :0x2
10:08:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:08:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:08:49: FILE_FORMAT_GRP                               :0x0
10:08:49: COPY flag                                     :0x1
10:08:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:08:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:08:49: File_Format                                   :0x0
10:08:49: CRC                                           :0x0
10:08:49: ####CSD Registe Values####  

10:08:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:08:49: ProductSerialNumber = 0x23482900
10:08:49: CardMaximumLBA      = 0x3b72400
10:08:49: CardCapacity        = 32G
10:08:49: Is card secure      = 0
10:08:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:08:49: [DVTCommonLib]###  LogicalWrite called
10:08:50: [ WriteLba(0x2A53369, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1101 ] 
10:08:50: [DVTCommonLib]###  LogicalWrite Completed 

10:08:50: [DVTCommonLib]###  LogicalRead called
10:08:52: [ ReadLba(0x2A53369, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1102 ] 
10:08:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:08:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:08:52: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 103 times 

10:08:52: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:08:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:08:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1103 ] 
10:08:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:08:52: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:08:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:08:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:08:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:08:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:08:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E2A0>, <py_sfcl.CommandDataDefinition object at 0x0663E060>) , Command count = 1104 ] 
10:08:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:08:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663EA80>, <py_sfcl.CommandDataDefinition object at 0x0663E7E0>) , Command count = 1105 ] 
10:08:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:08:52: [ SetCardRCA(0x1, 0xD555) , Command count = 1106 ] 
10:08:52: [DVTCommonLib]### Identification :Idenfication of card completed 

10:08:52: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:08:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:08:52: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:08:52: [ SetBusWidth(0x1) , Command count = 1107 ] 
10:08:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:08:52: ####CSD Registe 2.0 Values####
10:08:52: CSD_STRUCTURE                                 :0x1
10:08:52: Reserv1                                       :0x0
10:08:52: Time Access 1 TAAC                            :0xe
10:08:52: Time Access 2 NSAC*100                        :0x0
10:08:52: Data Transfer Rate TRAN_SPEED                 :0x32
10:08:52: Card Command Classess CCC                     :0x5b5
10:08:52: Max Read Data Block Length  READ_BL_LEN       :0x9
10:08:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:08:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:08:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:08:52: DSR(driver stage register)  DSR_IMP           :0x0
10:08:52: Reserv2                                       :0x0
10:08:52: Device Size C_SIZE                            :0xedc8
10:08:52: Reserv3                                       :0x0
10:08:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:08:52: Erase Sector Size SECTOR_SIZE                 :0x7f
10:08:52: Write Protect Group Size WP_GRP_SIZE          :0x0
10:08:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:08:52: Reserv4                                       :0x0
10:08:52: Write Speed Factor R2W_FACTOR                 :0x2
10:08:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:08:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:08:52: FILE_FORMAT_GRP                               :0x0
10:08:52: COPY flag                                     :0x1
10:08:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:08:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:08:52: File_Format                                   :0x0
10:08:52: CRC                                           :0x0
10:08:52: ####CSD Registe Values####  

10:08:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:08:52: ProductSerialNumber = 0x23482900
10:08:52: CardMaximumLBA      = 0x3b72400
10:08:52: CardCapacity        = 32G
10:08:52: Is card secure      = 0
10:08:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:08:52: [DVTCommonLib]###  LogicalWrite called
10:08:54: [ WriteLba(0x26C2A1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1108 ] 
10:08:54: [DVTCommonLib]###  LogicalWrite Completed 

10:08:54: [DVTCommonLib]###  LogicalRead called
10:08:55: [ ReadLba(0x26C2A1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1109 ] 
10:08:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:08:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:08:55: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 104 times 

10:08:55: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:08:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:08:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1110 ] 
10:08:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:08:55: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:08:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:08:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:08:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:08:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:08:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E600>, <py_sfcl.CommandDataDefinition object at 0x0663E570>) , Command count = 1111 ] 
10:08:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:08:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E630>, <py_sfcl.CommandDataDefinition object at 0x0663EB70>) , Command count = 1112 ] 
10:08:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:08:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1113 ] 
10:08:55: [DVTCommonLib]### Identification :Idenfication of card completed 

10:08:55: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:08:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:08:55: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:08:55: [ SetBusWidth(0x1) , Command count = 1114 ] 
10:08:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:08:55: ####CSD Registe 2.0 Values####
10:08:55: CSD_STRUCTURE                                 :0x1
10:08:55: Reserv1                                       :0x0
10:08:55: Time Access 1 TAAC                            :0xe
10:08:55: Time Access 2 NSAC*100                        :0x0
10:08:55: Data Transfer Rate TRAN_SPEED                 :0x32
10:08:55: Card Command Classess CCC                     :0x5b5
10:08:55: Max Read Data Block Length  READ_BL_LEN       :0x9
10:08:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:08:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:08:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:08:55: DSR(driver stage register)  DSR_IMP           :0x0
10:08:55: Reserv2                                       :0x0
10:08:55: Device Size C_SIZE                            :0xedc8
10:08:55: Reserv3                                       :0x0
10:08:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:08:55: Erase Sector Size SECTOR_SIZE                 :0x7f
10:08:55: Write Protect Group Size WP_GRP_SIZE          :0x0
10:08:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:08:55: Reserv4                                       :0x0
10:08:55: Write Speed Factor R2W_FACTOR                 :0x2
10:08:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:08:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:08:55: FILE_FORMAT_GRP                               :0x0
10:08:55: COPY flag                                     :0x1
10:08:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:08:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:08:55: File_Format                                   :0x0
10:08:55: CRC                                           :0x0
10:08:55: ####CSD Registe Values####  

10:08:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:08:55: ProductSerialNumber = 0x23482900
10:08:55: CardMaximumLBA      = 0x3b72400
10:08:55: CardCapacity        = 32G
10:08:55: Is card secure      = 0
10:08:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:08:55: [DVTCommonLib]###  LogicalWrite called
10:08:57: [ WriteLba(0x2CC9D0F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1115 ] 
10:08:57: [DVTCommonLib]###  LogicalWrite Completed 

10:08:57: [DVTCommonLib]###  LogicalRead called
10:08:59: [ ReadLba(0x2CC9D0F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1116 ] 
10:08:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:08:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:08:59: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 105 times 

10:08:59: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:08:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:08:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1117 ] 
10:08:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:08:59: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:08:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:08:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:08:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:08:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:08:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AEA0>, <py_sfcl.CommandDataDefinition object at 0x0663E8D0>) , Command count = 1118 ] 
10:08:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:08:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663ADB0>, <py_sfcl.CommandDataDefinition object at 0x0663E240>) , Command count = 1119 ] 
10:08:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:08:59: [ SetCardRCA(0x1, 0xD555) , Command count = 1120 ] 
10:08:59: [DVTCommonLib]### Identification :Idenfication of card completed 

10:08:59: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:08:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:08:59: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:08:59: [ SetBusWidth(0x1) , Command count = 1121 ] 
10:08:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:08:59: ####CSD Registe 2.0 Values####
10:08:59: CSD_STRUCTURE                                 :0x1
10:08:59: Reserv1                                       :0x0
10:08:59: Time Access 1 TAAC                            :0xe
10:08:59: Time Access 2 NSAC*100                        :0x0
10:08:59: Data Transfer Rate TRAN_SPEED                 :0x32
10:08:59: Card Command Classess CCC                     :0x5b5
10:08:59: Max Read Data Block Length  READ_BL_LEN       :0x9
10:08:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:08:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:08:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:08:59: DSR(driver stage register)  DSR_IMP           :0x0
10:08:59: Reserv2                                       :0x0
10:08:59: Device Size C_SIZE                            :0xedc8
10:08:59: Reserv3                                       :0x0
10:08:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:08:59: Erase Sector Size SECTOR_SIZE                 :0x7f
10:08:59: Write Protect Group Size WP_GRP_SIZE          :0x0
10:08:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:08:59: Reserv4                                       :0x0
10:08:59: Write Speed Factor R2W_FACTOR                 :0x2
10:08:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:08:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:08:59: FILE_FORMAT_GRP                               :0x0
10:08:59: COPY flag                                     :0x1
10:08:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:08:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:08:59: File_Format                                   :0x0
10:08:59: CRC                                           :0x0
10:08:59: ####CSD Registe Values####  

10:08:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:08:59: ProductSerialNumber = 0x23482900
10:08:59: CardMaximumLBA      = 0x3b72400
10:08:59: CardCapacity        = 32G
10:08:59: Is card secure      = 0
10:08:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:08:59: [DVTCommonLib]###  LogicalWrite called
10:09:00: [ WriteLba(0x1C5246D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1122 ] 
10:09:00: [DVTCommonLib]###  LogicalWrite Completed 

10:09:00: [DVTCommonLib]###  LogicalRead called
10:09:02: [ ReadLba(0x1C5246D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1123 ] 
10:09:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:09:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:09:02: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 106 times 

10:09:02: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:09:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:09:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1124 ] 
10:09:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:09:02: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:09:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:09:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:09:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:09:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:09:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A4E0>, <py_sfcl.CommandDataDefinition object at 0x066B1C90>) , Command count = 1125 ] 
10:09:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:09:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E150>, <py_sfcl.CommandDataDefinition object at 0x0663E4B0>) , Command count = 1126 ] 
10:09:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:09:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1127 ] 
10:09:02: [DVTCommonLib]### Identification :Idenfication of card completed 

10:09:02: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:09:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:09:02: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:09:02: [ SetBusWidth(0x1) , Command count = 1128 ] 
10:09:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:09:02: ####CSD Registe 2.0 Values####
10:09:02: CSD_STRUCTURE                                 :0x1
10:09:02: Reserv1                                       :0x0
10:09:02: Time Access 1 TAAC                            :0xe
10:09:02: Time Access 2 NSAC*100                        :0x0
10:09:02: Data Transfer Rate TRAN_SPEED                 :0x32
10:09:02: Card Command Classess CCC                     :0x5b5
10:09:02: Max Read Data Block Length  READ_BL_LEN       :0x9
10:09:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:09:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:09:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:09:02: DSR(driver stage register)  DSR_IMP           :0x0
10:09:02: Reserv2                                       :0x0
10:09:02: Device Size C_SIZE                            :0xedc8
10:09:02: Reserv3                                       :0x0
10:09:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:09:02: Erase Sector Size SECTOR_SIZE                 :0x7f
10:09:02: Write Protect Group Size WP_GRP_SIZE          :0x0
10:09:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:09:02: Reserv4                                       :0x0
10:09:02: Write Speed Factor R2W_FACTOR                 :0x2
10:09:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:09:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:09:02: FILE_FORMAT_GRP                               :0x0
10:09:02: COPY flag                                     :0x1
10:09:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:09:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:09:02: File_Format                                   :0x0
10:09:02: CRC                                           :0x0
10:09:02: ####CSD Registe Values####  

10:09:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:09:02: ProductSerialNumber = 0x23482900
10:09:02: CardMaximumLBA      = 0x3b72400
10:09:02: CardCapacity        = 32G
10:09:02: Is card secure      = 0
10:09:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:09:02: [DVTCommonLib]###  LogicalWrite called
10:09:04: [ WriteLba(0x21C32E8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1129 ] 
10:09:04: [DVTCommonLib]###  LogicalWrite Completed 

10:09:04: [DVTCommonLib]###  LogicalRead called
10:09:05: [ ReadLba(0x21C32E8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1130 ] 
10:09:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:09:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:09:05: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 107 times 

10:09:05: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:09:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:09:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1131 ] 
10:09:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:09:06: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:09:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:09:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:09:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:09:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:09:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AD80>, <py_sfcl.CommandDataDefinition object at 0x0663A420>) , Command count = 1132 ] 
10:09:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:09:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663EE70>, <py_sfcl.CommandDataDefinition object at 0x0663EF60>) , Command count = 1133 ] 
10:09:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:09:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1134 ] 
10:09:06: [DVTCommonLib]### Identification :Idenfication of card completed 

10:09:06: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:09:06: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:09:06: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:09:06: [ SetBusWidth(0x1) , Command count = 1135 ] 
10:09:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:09:06: ####CSD Registe 2.0 Values####
10:09:06: CSD_STRUCTURE                                 :0x1
10:09:06: Reserv1                                       :0x0
10:09:06: Time Access 1 TAAC                            :0xe
10:09:06: Time Access 2 NSAC*100                        :0x0
10:09:06: Data Transfer Rate TRAN_SPEED                 :0x32
10:09:06: Card Command Classess CCC                     :0x5b5
10:09:06: Max Read Data Block Length  READ_BL_LEN       :0x9
10:09:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:09:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:09:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:09:06: DSR(driver stage register)  DSR_IMP           :0x0
10:09:06: Reserv2                                       :0x0
10:09:06: Device Size C_SIZE                            :0xedc8
10:09:06: Reserv3                                       :0x0
10:09:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:09:06: Erase Sector Size SECTOR_SIZE                 :0x7f
10:09:06: Write Protect Group Size WP_GRP_SIZE          :0x0
10:09:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:09:06: Reserv4                                       :0x0
10:09:06: Write Speed Factor R2W_FACTOR                 :0x2
10:09:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:09:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:09:06: FILE_FORMAT_GRP                               :0x0
10:09:06: COPY flag                                     :0x1
10:09:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:09:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:09:06: File_Format                                   :0x0
10:09:06: CRC                                           :0x0
10:09:06: ####CSD Registe Values####  

10:09:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:09:06: ProductSerialNumber = 0x23482900
10:09:06: CardMaximumLBA      = 0x3b72400
10:09:06: CardCapacity        = 32G
10:09:06: Is card secure      = 0
10:09:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:09:06: [DVTCommonLib]###  LogicalWrite called
10:09:07: [ WriteLba(0x259E9B4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1136 ] 
10:09:07: [DVTCommonLib]###  LogicalWrite Completed 

10:09:07: [DVTCommonLib]###  LogicalRead called
10:09:09: [ ReadLba(0x259E9B4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1137 ] 
10:09:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:09:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:09:09: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 108 times 

10:09:09: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:09:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:09:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1138 ] 
10:09:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:09:09: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:09:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:09:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:09:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:09:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:09:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E660>, <py_sfcl.CommandDataDefinition object at 0x066B1C60>) , Command count = 1139 ] 
10:09:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:09:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B17E0>, <py_sfcl.CommandDataDefinition object at 0x066B1AE0>) , Command count = 1140 ] 
10:09:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:09:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1141 ] 
10:09:09: [DVTCommonLib]### Identification :Idenfication of card completed 

10:09:09: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:09:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:09:09: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:09:09: [ SetBusWidth(0x1) , Command count = 1142 ] 
10:09:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:09:09: ####CSD Registe 2.0 Values####
10:09:09: CSD_STRUCTURE                                 :0x1
10:09:09: Reserv1                                       :0x0
10:09:09: Time Access 1 TAAC                            :0xe
10:09:09: Time Access 2 NSAC*100                        :0x0
10:09:09: Data Transfer Rate TRAN_SPEED                 :0x32
10:09:09: Card Command Classess CCC                     :0x5b5
10:09:09: Max Read Data Block Length  READ_BL_LEN       :0x9
10:09:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:09:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:09:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:09:09: DSR(driver stage register)  DSR_IMP           :0x0
10:09:09: Reserv2                                       :0x0
10:09:09: Device Size C_SIZE                            :0xedc8
10:09:09: Reserv3                                       :0x0
10:09:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:09:09: Erase Sector Size SECTOR_SIZE                 :0x7f
10:09:09: Write Protect Group Size WP_GRP_SIZE          :0x0
10:09:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:09:09: Reserv4                                       :0x0
10:09:09: Write Speed Factor R2W_FACTOR                 :0x2
10:09:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:09:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:09:09: FILE_FORMAT_GRP                               :0x0
10:09:09: COPY flag                                     :0x1
10:09:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:09:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:09:09: File_Format                                   :0x0
10:09:09: CRC                                           :0x0
10:09:09: ####CSD Registe Values####  

10:09:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:09:09: ProductSerialNumber = 0x23482900
10:09:09: CardMaximumLBA      = 0x3b72400
10:09:09: CardCapacity        = 32G
10:09:09: Is card secure      = 0
10:09:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:09:09: [DVTCommonLib]###  LogicalWrite called
10:09:11: [ WriteLba(0xC98CA7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1143 ] 
10:09:11: [DVTCommonLib]###  LogicalWrite Completed 

10:09:11: [DVTCommonLib]###  LogicalRead called
10:09:12: [ ReadLba(0xC98CA7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1144 ] 
10:09:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:09:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:09:12: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 109 times 

10:09:12: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:09:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:09:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1145 ] 
10:09:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:09:12: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:09:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:09:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:09:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:09:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:09:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661DBA0>, <py_sfcl.CommandDataDefinition object at 0x066B1A80>) , Command count = 1146 ] 
10:09:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:09:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1540>, <py_sfcl.CommandDataDefinition object at 0x066B16F0>) , Command count = 1147 ] 
10:09:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:09:12: [ SetCardRCA(0x1, 0xD555) , Command count = 1148 ] 
10:09:12: [DVTCommonLib]### Identification :Idenfication of card completed 

10:09:12: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:09:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:09:12: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:09:12: [ SetBusWidth(0x1) , Command count = 1149 ] 
10:09:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:09:12: ####CSD Registe 2.0 Values####
10:09:12: CSD_STRUCTURE                                 :0x1
10:09:12: Reserv1                                       :0x0
10:09:12: Time Access 1 TAAC                            :0xe
10:09:12: Time Access 2 NSAC*100                        :0x0
10:09:12: Data Transfer Rate TRAN_SPEED                 :0x32
10:09:12: Card Command Classess CCC                     :0x5b5
10:09:12: Max Read Data Block Length  READ_BL_LEN       :0x9
10:09:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:09:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:09:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:09:12: DSR(driver stage register)  DSR_IMP           :0x0
10:09:12: Reserv2                                       :0x0
10:09:12: Device Size C_SIZE                            :0xedc8
10:09:12: Reserv3                                       :0x0
10:09:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:09:12: Erase Sector Size SECTOR_SIZE                 :0x7f
10:09:12: Write Protect Group Size WP_GRP_SIZE          :0x0
10:09:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:09:12: Reserv4                                       :0x0
10:09:12: Write Speed Factor R2W_FACTOR                 :0x2
10:09:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:09:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:09:12: FILE_FORMAT_GRP                               :0x0
10:09:12: COPY flag                                     :0x1
10:09:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:09:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:09:12: File_Format                                   :0x0
10:09:12: CRC                                           :0x0
10:09:12: ####CSD Registe Values####  

10:09:12: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:09:12: ProductSerialNumber = 0x23482900
10:09:12: CardMaximumLBA      = 0x3b72400
10:09:12: CardCapacity        = 32G
10:09:12: Is card secure      = 0
10:09:12: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:09:12: [DVTCommonLib]###  LogicalWrite called
10:09:14: [ WriteLba(0x29F6E3B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1150 ] 
10:09:14: [DVTCommonLib]###  LogicalWrite Completed 

10:09:14: [DVTCommonLib]###  LogicalRead called
10:09:16: [ ReadLba(0x29F6E3B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1151 ] 
10:09:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:09:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:09:16: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 110 times 

10:09:16: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:09:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:09:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1152 ] 
10:09:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:09:16: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:09:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:09:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:09:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:09:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:09:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B18D0>, <py_sfcl.CommandDataDefinition object at 0x066B1930>) , Command count = 1153 ] 
10:09:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:09:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B12A0>, <py_sfcl.CommandDataDefinition object at 0x066B1420>) , Command count = 1154 ] 
10:09:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:09:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1155 ] 
10:09:16: [DVTCommonLib]### Identification :Idenfication of card completed 

10:09:16: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:09:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:09:16: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:09:16: [ SetBusWidth(0x1) , Command count = 1156 ] 
10:09:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:09:16: ####CSD Registe 2.0 Values####
10:09:16: CSD_STRUCTURE                                 :0x1
10:09:16: Reserv1                                       :0x0
10:09:16: Time Access 1 TAAC                            :0xe
10:09:16: Time Access 2 NSAC*100                        :0x0
10:09:16: Data Transfer Rate TRAN_SPEED                 :0x32
10:09:16: Card Command Classess CCC                     :0x5b5
10:09:16: Max Read Data Block Length  READ_BL_LEN       :0x9
10:09:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:09:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:09:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:09:16: DSR(driver stage register)  DSR_IMP           :0x0
10:09:16: Reserv2                                       :0x0
10:09:16: Device Size C_SIZE                            :0xedc8
10:09:16: Reserv3                                       :0x0
10:09:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:09:16: Erase Sector Size SECTOR_SIZE                 :0x7f
10:09:16: Write Protect Group Size WP_GRP_SIZE          :0x0
10:09:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:09:16: Reserv4                                       :0x0
10:09:16: Write Speed Factor R2W_FACTOR                 :0x2
10:09:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:09:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:09:16: FILE_FORMAT_GRP                               :0x0
10:09:16: COPY flag                                     :0x1
10:09:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:09:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:09:16: File_Format                                   :0x0
10:09:16: CRC                                           :0x0
10:09:16: ####CSD Registe Values####  

10:09:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:09:16: ProductSerialNumber = 0x23482900
10:09:16: CardMaximumLBA      = 0x3b72400
10:09:16: CardCapacity        = 32G
10:09:16: Is card secure      = 0
10:09:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:09:16: [DVTCommonLib]###  LogicalWrite called
10:09:18: [ WriteLba(0x4FE49A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1157 ] 
10:09:18: [DVTCommonLib]###  LogicalWrite Completed 

10:09:18: [DVTCommonLib]###  LogicalRead called
10:09:19: [ ReadLba(0x4FE49A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1158 ] 
10:09:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:09:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:09:19: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 111 times 

10:09:19: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:09:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:09:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1159 ] 
10:09:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:09:19: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:09:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:09:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:09:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:09:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:09:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663ECC0>, <py_sfcl.CommandDataDefinition object at 0x066B1630>) , Command count = 1160 ] 
10:09:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:09:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEEA0>, <py_sfcl.CommandDataDefinition object at 0x066B14E0>) , Command count = 1161 ] 
10:09:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:09:19: [ SetCardRCA(0x1, 0xD555) , Command count = 1162 ] 
10:09:19: [DVTCommonLib]### Identification :Idenfication of card completed 

10:09:19: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:09:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:09:19: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:09:19: [ SetBusWidth(0x1) , Command count = 1163 ] 
10:09:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:09:19: ####CSD Registe 2.0 Values####
10:09:19: CSD_STRUCTURE                                 :0x1
10:09:19: Reserv1                                       :0x0
10:09:19: Time Access 1 TAAC                            :0xe
10:09:19: Time Access 2 NSAC*100                        :0x0
10:09:19: Data Transfer Rate TRAN_SPEED                 :0x32
10:09:19: Card Command Classess CCC                     :0x5b5
10:09:19: Max Read Data Block Length  READ_BL_LEN       :0x9
10:09:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:09:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:09:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:09:19: DSR(driver stage register)  DSR_IMP           :0x0
10:09:19: Reserv2                                       :0x0
10:09:19: Device Size C_SIZE                            :0xedc8
10:09:19: Reserv3                                       :0x0
10:09:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:09:19: Erase Sector Size SECTOR_SIZE                 :0x7f
10:09:19: Write Protect Group Size WP_GRP_SIZE          :0x0
10:09:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:09:19: Reserv4                                       :0x0
10:09:19: Write Speed Factor R2W_FACTOR                 :0x2
10:09:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:09:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:09:19: FILE_FORMAT_GRP                               :0x0
10:09:19: COPY flag                                     :0x1
10:09:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:09:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:09:19: File_Format                                   :0x0
10:09:19: CRC                                           :0x0
10:09:19: ####CSD Registe Values####  

10:09:19: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:09:19: ProductSerialNumber = 0x23482900
10:09:19: CardMaximumLBA      = 0x3b72400
10:09:19: CardCapacity        = 32G
10:09:19: Is card secure      = 0
10:09:19: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:09:19: [DVTCommonLib]###  LogicalWrite called
10:09:21: [ WriteLba(0x1FBA6DC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1164 ] 
10:09:21: [DVTCommonLib]###  LogicalWrite Completed 

10:09:21: [DVTCommonLib]###  LogicalRead called
10:09:23: [ ReadLba(0x1FBA6DC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1165 ] 
10:09:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:09:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:09:23: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 112 times 

10:09:23: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:09:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:09:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1166 ] 
10:09:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:09:23: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:09:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:09:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:09:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:09:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:09:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663ED80>, <py_sfcl.CommandDataDefinition object at 0x066AEED0>) , Command count = 1167 ] 
10:09:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:09:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEA20>, <py_sfcl.CommandDataDefinition object at 0x066B1330>) , Command count = 1168 ] 
10:09:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:09:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1169 ] 
10:09:23: [DVTCommonLib]### Identification :Idenfication of card completed 

10:09:23: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:09:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:09:23: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:09:23: [ SetBusWidth(0x1) , Command count = 1170 ] 
10:09:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:09:23: ####CSD Registe 2.0 Values####
10:09:23: CSD_STRUCTURE                                 :0x1
10:09:23: Reserv1                                       :0x0
10:09:23: Time Access 1 TAAC                            :0xe
10:09:23: Time Access 2 NSAC*100                        :0x0
10:09:23: Data Transfer Rate TRAN_SPEED                 :0x32
10:09:23: Card Command Classess CCC                     :0x5b5
10:09:23: Max Read Data Block Length  READ_BL_LEN       :0x9
10:09:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:09:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:09:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:09:23: DSR(driver stage register)  DSR_IMP           :0x0
10:09:23: Reserv2                                       :0x0
10:09:23: Device Size C_SIZE                            :0xedc8
10:09:23: Reserv3                                       :0x0
10:09:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:09:23: Erase Sector Size SECTOR_SIZE                 :0x7f
10:09:23: Write Protect Group Size WP_GRP_SIZE          :0x0
10:09:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:09:23: Reserv4                                       :0x0
10:09:23: Write Speed Factor R2W_FACTOR                 :0x2
10:09:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:09:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:09:23: FILE_FORMAT_GRP                               :0x0
10:09:23: COPY flag                                     :0x1
10:09:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:09:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:09:23: File_Format                                   :0x0
10:09:23: CRC                                           :0x0
10:09:23: ####CSD Registe Values####  

10:09:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:09:23: ProductSerialNumber = 0x23482900
10:09:23: CardMaximumLBA      = 0x3b72400
10:09:23: CardCapacity        = 32G
10:09:23: Is card secure      = 0
10:09:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:09:23: [DVTCommonLib]###  LogicalWrite called
10:09:24: [ WriteLba(0x228AB49, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1171 ] 
10:09:24: [DVTCommonLib]###  LogicalWrite Completed 

10:09:24: [DVTCommonLib]###  LogicalRead called
10:09:26: [ ReadLba(0x228AB49, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1172 ] 
10:09:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:09:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:09:26: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 113 times 

10:09:26: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:09:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:09:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1173 ] 
10:09:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:09:26: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:09:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:09:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:09:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:09:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:09:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEF90>, <py_sfcl.CommandDataDefinition object at 0x066AEFC0>) , Command count = 1174 ] 
10:09:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:09:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE4E0>, <py_sfcl.CommandDataDefinition object at 0x066AE840>) , Command count = 1175 ] 
10:09:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:09:26: [ SetCardRCA(0x1, 0xD555) , Command count = 1176 ] 
10:09:26: [DVTCommonLib]### Identification :Idenfication of card completed 

10:09:26: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:09:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:09:26: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:09:26: [ SetBusWidth(0x1) , Command count = 1177 ] 
10:09:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:09:26: ####CSD Registe 2.0 Values####
10:09:26: CSD_STRUCTURE                                 :0x1
10:09:26: Reserv1                                       :0x0
10:09:26: Time Access 1 TAAC                            :0xe
10:09:26: Time Access 2 NSAC*100                        :0x0
10:09:26: Data Transfer Rate TRAN_SPEED                 :0x32
10:09:26: Card Command Classess CCC                     :0x5b5
10:09:26: Max Read Data Block Length  READ_BL_LEN       :0x9
10:09:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:09:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:09:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:09:26: DSR(driver stage register)  DSR_IMP           :0x0
10:09:26: Reserv2                                       :0x0
10:09:26: Device Size C_SIZE                            :0xedc8
10:09:26: Reserv3                                       :0x0
10:09:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:09:26: Erase Sector Size SECTOR_SIZE                 :0x7f
10:09:26: Write Protect Group Size WP_GRP_SIZE          :0x0
10:09:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:09:26: Reserv4                                       :0x0
10:09:26: Write Speed Factor R2W_FACTOR                 :0x2
10:09:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:09:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:09:26: FILE_FORMAT_GRP                               :0x0
10:09:26: COPY flag                                     :0x1
10:09:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:09:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:09:26: File_Format                                   :0x0
10:09:26: CRC                                           :0x0
10:09:26: ####CSD Registe Values####  

10:09:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:09:26: ProductSerialNumber = 0x23482900
10:09:26: CardMaximumLBA      = 0x3b72400
10:09:26: CardCapacity        = 32G
10:09:26: Is card secure      = 0
10:09:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:09:26: [DVTCommonLib]###  LogicalWrite called
10:09:28: [ WriteLba(0x2A2944A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1178 ] 
10:09:28: [DVTCommonLib]###  LogicalWrite Completed 

10:09:28: [DVTCommonLib]###  LogicalRead called
10:09:29: [ ReadLba(0x2A2944A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1179 ] 
10:09:29: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:09:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:09:29: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 114 times 

10:09:29: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:09:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:09:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1180 ] 
10:09:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:09:29: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:09:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:09:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:09:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:09:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:09:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6420>, <py_sfcl.CommandDataDefinition object at 0x066AEAB0>) , Command count = 1181 ] 
10:09:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:09:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A66F0>, <py_sfcl.CommandDataDefinition object at 0x066AE330>) , Command count = 1182 ] 
10:09:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:09:29: [ SetCardRCA(0x1, 0xD555) , Command count = 1183 ] 
10:09:29: [DVTCommonLib]### Identification :Idenfication of card completed 

10:09:29: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:09:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:09:29: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:09:29: [ SetBusWidth(0x1) , Command count = 1184 ] 
10:09:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:09:29: ####CSD Registe 2.0 Values####
10:09:29: CSD_STRUCTURE                                 :0x1
10:09:29: Reserv1                                       :0x0
10:09:29: Time Access 1 TAAC                            :0xe
10:09:29: Time Access 2 NSAC*100                        :0x0
10:09:29: Data Transfer Rate TRAN_SPEED                 :0x32
10:09:29: Card Command Classess CCC                     :0x5b5
10:09:29: Max Read Data Block Length  READ_BL_LEN       :0x9
10:09:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:09:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:09:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:09:29: DSR(driver stage register)  DSR_IMP           :0x0
10:09:29: Reserv2                                       :0x0
10:09:29: Device Size C_SIZE                            :0xedc8
10:09:29: Reserv3                                       :0x0
10:09:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:09:29: Erase Sector Size SECTOR_SIZE                 :0x7f
10:09:29: Write Protect Group Size WP_GRP_SIZE          :0x0
10:09:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:09:29: Reserv4                                       :0x0
10:09:29: Write Speed Factor R2W_FACTOR                 :0x2
10:09:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:09:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:09:29: FILE_FORMAT_GRP                               :0x0
10:09:29: COPY flag                                     :0x1
10:09:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:09:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:09:29: File_Format                                   :0x0
10:09:29: CRC                                           :0x0
10:09:29: ####CSD Registe Values####  

10:09:29: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:09:29: ProductSerialNumber = 0x23482900
10:09:29: CardMaximumLBA      = 0x3b72400
10:09:29: CardCapacity        = 32G
10:09:29: Is card secure      = 0
10:09:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:09:29: [DVTCommonLib]###  LogicalWrite called
10:09:31: [ WriteLba(0x5217BA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1185 ] 
10:09:31: [DVTCommonLib]###  LogicalWrite Completed 

10:09:31: [DVTCommonLib]###  LogicalRead called
10:09:33: [ ReadLba(0x5217BA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1186 ] 
10:09:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:09:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:09:33: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 115 times 

10:09:33: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:09:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:09:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1187 ] 
10:09:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:09:33: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:09:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:09:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:09:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:09:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:09:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE630>, <py_sfcl.CommandDataDefinition object at 0x066AE720>) , Command count = 1188 ] 
10:09:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:09:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6A50>, <py_sfcl.CommandDataDefinition object at 0x066A6C60>) , Command count = 1189 ] 
10:09:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:09:33: [ SetCardRCA(0x1, 0xD555) , Command count = 1190 ] 
10:09:33: [DVTCommonLib]### Identification :Idenfication of card completed 

10:09:33: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:09:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:09:33: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:09:33: [ SetBusWidth(0x1) , Command count = 1191 ] 
10:09:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:09:33: ####CSD Registe 2.0 Values####
10:09:33: CSD_STRUCTURE                                 :0x1
10:09:33: Reserv1                                       :0x0
10:09:33: Time Access 1 TAAC                            :0xe
10:09:33: Time Access 2 NSAC*100                        :0x0
10:09:33: Data Transfer Rate TRAN_SPEED                 :0x32
10:09:33: Card Command Classess CCC                     :0x5b5
10:09:33: Max Read Data Block Length  READ_BL_LEN       :0x9
10:09:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:09:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:09:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:09:33: DSR(driver stage register)  DSR_IMP           :0x0
10:09:33: Reserv2                                       :0x0
10:09:33: Device Size C_SIZE                            :0xedc8
10:09:33: Reserv3                                       :0x0
10:09:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:09:33: Erase Sector Size SECTOR_SIZE                 :0x7f
10:09:33: Write Protect Group Size WP_GRP_SIZE          :0x0
10:09:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:09:33: Reserv4                                       :0x0
10:09:33: Write Speed Factor R2W_FACTOR                 :0x2
10:09:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:09:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:09:33: FILE_FORMAT_GRP                               :0x0
10:09:33: COPY flag                                     :0x1
10:09:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:09:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:09:33: File_Format                                   :0x0
10:09:33: CRC                                           :0x0
10:09:33: ####CSD Registe Values####  

10:09:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:09:33: ProductSerialNumber = 0x23482900
10:09:33: CardMaximumLBA      = 0x3b72400
10:09:33: CardCapacity        = 32G
10:09:33: Is card secure      = 0
10:09:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:09:33: [DVTCommonLib]###  LogicalWrite called
10:09:35: [ WriteLba(0x1C982B8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1192 ] 
10:09:35: [DVTCommonLib]###  LogicalWrite Completed 

10:09:35: [DVTCommonLib]###  LogicalRead called
10:09:36: [ ReadLba(0x1C982B8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1193 ] 
10:09:36: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:09:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:09:36: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 116 times 

10:09:36: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:09:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:09:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1194 ] 
10:09:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:09:36: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:09:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:09:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:09:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:09:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:09:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE510>, <py_sfcl.CommandDataDefinition object at 0x066AE3F0>) , Command count = 1195 ] 
10:09:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:09:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A67E0>, <py_sfcl.CommandDataDefinition object at 0x066A6900>) , Command count = 1196 ] 
10:09:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:09:36: [ SetCardRCA(0x1, 0xD555) , Command count = 1197 ] 
10:09:36: [DVTCommonLib]### Identification :Idenfication of card completed 

10:09:36: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:09:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:09:36: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:09:36: [ SetBusWidth(0x1) , Command count = 1198 ] 
10:09:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:09:36: ####CSD Registe 2.0 Values####
10:09:36: CSD_STRUCTURE                                 :0x1
10:09:36: Reserv1                                       :0x0
10:09:36: Time Access 1 TAAC                            :0xe
10:09:36: Time Access 2 NSAC*100                        :0x0
10:09:36: Data Transfer Rate TRAN_SPEED                 :0x32
10:09:36: Card Command Classess CCC                     :0x5b5
10:09:36: Max Read Data Block Length  READ_BL_LEN       :0x9
10:09:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:09:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:09:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:09:36: DSR(driver stage register)  DSR_IMP           :0x0
10:09:36: Reserv2                                       :0x0
10:09:36: Device Size C_SIZE                            :0xedc8
10:09:36: Reserv3                                       :0x0
10:09:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:09:36: Erase Sector Size SECTOR_SIZE                 :0x7f
10:09:36: Write Protect Group Size WP_GRP_SIZE          :0x0
10:09:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:09:36: Reserv4                                       :0x0
10:09:36: Write Speed Factor R2W_FACTOR                 :0x2
10:09:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:09:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:09:36: FILE_FORMAT_GRP                               :0x0
10:09:36: COPY flag                                     :0x1
10:09:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:09:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:09:36: File_Format                                   :0x0
10:09:36: CRC                                           :0x0
10:09:36: ####CSD Registe Values####  

10:09:36: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:09:36: ProductSerialNumber = 0x23482900
10:09:36: CardMaximumLBA      = 0x3b72400
10:09:36: CardCapacity        = 32G
10:09:36: Is card secure      = 0
10:09:36: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:09:36: [DVTCommonLib]###  LogicalWrite called
10:09:38: [ WriteLba(0x184F556, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1199 ] 
10:09:38: [DVTCommonLib]###  LogicalWrite Completed 

10:09:38: [DVTCommonLib]###  LogicalRead called
10:09:40: [ ReadLba(0x184F556, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1200 ] 
10:09:40: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:09:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:09:40: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 117 times 

10:09:40: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:09:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:09:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1201 ] 
10:09:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:09:40: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:09:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:09:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:09:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:09:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:09:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6BD0>, <py_sfcl.CommandDataDefinition object at 0x066A6ED0>) , Command count = 1202 ] 
10:09:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:09:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663ACF0>, <py_sfcl.CommandDataDefinition object at 0x066A6180>) , Command count = 1203 ] 
10:09:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:09:40: [ SetCardRCA(0x1, 0xD555) , Command count = 1204 ] 
10:09:40: [DVTCommonLib]### Identification :Idenfication of card completed 

10:09:40: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:09:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:09:40: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:09:40: [ SetBusWidth(0x1) , Command count = 1205 ] 
10:09:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:09:40: ####CSD Registe 2.0 Values####
10:09:40: CSD_STRUCTURE                                 :0x1
10:09:40: Reserv1                                       :0x0
10:09:40: Time Access 1 TAAC                            :0xe
10:09:40: Time Access 2 NSAC*100                        :0x0
10:09:40: Data Transfer Rate TRAN_SPEED                 :0x32
10:09:40: Card Command Classess CCC                     :0x5b5
10:09:40: Max Read Data Block Length  READ_BL_LEN       :0x9
10:09:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:09:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:09:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:09:40: DSR(driver stage register)  DSR_IMP           :0x0
10:09:40: Reserv2                                       :0x0
10:09:40: Device Size C_SIZE                            :0xedc8
10:09:40: Reserv3                                       :0x0
10:09:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:09:40: Erase Sector Size SECTOR_SIZE                 :0x7f
10:09:40: Write Protect Group Size WP_GRP_SIZE          :0x0
10:09:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:09:40: Reserv4                                       :0x0
10:09:40: Write Speed Factor R2W_FACTOR                 :0x2
10:09:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:09:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:09:40: FILE_FORMAT_GRP                               :0x0
10:09:40: COPY flag                                     :0x1
10:09:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:09:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:09:40: File_Format                                   :0x0
10:09:40: CRC                                           :0x0
10:09:40: ####CSD Registe Values####  

10:09:40: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:09:40: ProductSerialNumber = 0x23482900
10:09:40: CardMaximumLBA      = 0x3b72400
10:09:40: CardCapacity        = 32G
10:09:40: Is card secure      = 0
10:09:40: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:09:40: [DVTCommonLib]###  LogicalWrite called
10:09:41: [ WriteLba(0x37393D1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1206 ] 
10:09:41: [DVTCommonLib]###  LogicalWrite Completed 

10:09:41: [DVTCommonLib]###  LogicalRead called
10:09:43: [ ReadLba(0x37393D1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1207 ] 
10:09:43: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:09:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:09:43: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 118 times 

10:09:43: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:09:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:09:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1208 ] 
10:09:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:09:43: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:09:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:09:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:09:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:09:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:09:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6120>, <py_sfcl.CommandDataDefinition object at 0x066A60C0>) , Command count = 1209 ] 
10:09:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:09:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6660>, <py_sfcl.CommandDataDefinition object at 0x066A6360>) , Command count = 1210 ] 
10:09:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:09:43: [ SetCardRCA(0x1, 0xD555) , Command count = 1211 ] 
10:09:43: [DVTCommonLib]### Identification :Idenfication of card completed 

10:09:43: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:09:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:09:43: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:09:43: [ SetBusWidth(0x1) , Command count = 1212 ] 
10:09:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:09:43: ####CSD Registe 2.0 Values####
10:09:43: CSD_STRUCTURE                                 :0x1
10:09:43: Reserv1                                       :0x0
10:09:43: Time Access 1 TAAC                            :0xe
10:09:43: Time Access 2 NSAC*100                        :0x0
10:09:43: Data Transfer Rate TRAN_SPEED                 :0x32
10:09:43: Card Command Classess CCC                     :0x5b5
10:09:43: Max Read Data Block Length  READ_BL_LEN       :0x9
10:09:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:09:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:09:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:09:43: DSR(driver stage register)  DSR_IMP           :0x0
10:09:43: Reserv2                                       :0x0
10:09:43: Device Size C_SIZE                            :0xedc8
10:09:43: Reserv3                                       :0x0
10:09:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:09:43: Erase Sector Size SECTOR_SIZE                 :0x7f
10:09:43: Write Protect Group Size WP_GRP_SIZE          :0x0
10:09:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:09:43: Reserv4                                       :0x0
10:09:43: Write Speed Factor R2W_FACTOR                 :0x2
10:09:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:09:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:09:43: FILE_FORMAT_GRP                               :0x0
10:09:43: COPY flag                                     :0x1
10:09:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:09:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:09:43: File_Format                                   :0x0
10:09:43: CRC                                           :0x0
10:09:43: ####CSD Registe Values####  

10:09:43: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:09:43: ProductSerialNumber = 0x23482900
10:09:43: CardMaximumLBA      = 0x3b72400
10:09:43: CardCapacity        = 32G
10:09:43: Is card secure      = 0
10:09:43: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:09:43: [DVTCommonLib]###  LogicalWrite called
10:09:45: [ WriteLba(0x2084816, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1213 ] 
10:09:45: [DVTCommonLib]###  LogicalWrite Completed 

10:09:45: [DVTCommonLib]###  LogicalRead called
10:09:46: [ ReadLba(0x2084816, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1214 ] 
10:09:46: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:09:46: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:09:46: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 119 times 

10:09:46: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:09:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:09:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1215 ] 
10:09:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:09:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:09:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:09:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:09:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:09:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:09:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A64E0>, <py_sfcl.CommandDataDefinition object at 0x066A6240>) , Command count = 1216 ] 
10:09:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:09:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6300>, <py_sfcl.CommandDataDefinition object at 0x066A6810>) , Command count = 1217 ] 
10:09:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:09:47: [ SetCardRCA(0x1, 0xD555) , Command count = 1218 ] 
10:09:47: [DVTCommonLib]### Identification :Idenfication of card completed 

10:09:47: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:09:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:09:47: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:09:47: [ SetBusWidth(0x1) , Command count = 1219 ] 
10:09:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:09:47: ####CSD Registe 2.0 Values####
10:09:47: CSD_STRUCTURE                                 :0x1
10:09:47: Reserv1                                       :0x0
10:09:47: Time Access 1 TAAC                            :0xe
10:09:47: Time Access 2 NSAC*100                        :0x0
10:09:47: Data Transfer Rate TRAN_SPEED                 :0x32
10:09:47: Card Command Classess CCC                     :0x5b5
10:09:47: Max Read Data Block Length  READ_BL_LEN       :0x9
10:09:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:09:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:09:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:09:47: DSR(driver stage register)  DSR_IMP           :0x0
10:09:47: Reserv2                                       :0x0
10:09:47: Device Size C_SIZE                            :0xedc8
10:09:47: Reserv3                                       :0x0
10:09:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:09:47: Erase Sector Size SECTOR_SIZE                 :0x7f
10:09:47: Write Protect Group Size WP_GRP_SIZE          :0x0
10:09:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:09:47: Reserv4                                       :0x0
10:09:47: Write Speed Factor R2W_FACTOR                 :0x2
10:09:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:09:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:09:47: FILE_FORMAT_GRP                               :0x0
10:09:47: COPY flag                                     :0x1
10:09:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:09:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:09:47: File_Format                                   :0x0
10:09:47: CRC                                           :0x0
10:09:47: ####CSD Registe Values####  

10:09:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:09:47: ProductSerialNumber = 0x23482900
10:09:47: CardMaximumLBA      = 0x3b72400
10:09:47: CardCapacity        = 32G
10:09:47: Is card secure      = 0
10:09:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:09:47: [DVTCommonLib]###  LogicalWrite called
10:09:48: [ WriteLba(0x10AC8D8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1220 ] 
10:09:48: [DVTCommonLib]###  LogicalWrite Completed 

10:09:48: [DVTCommonLib]###  LogicalRead called
10:09:50: [ ReadLba(0x10AC8D8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1221 ] 
10:09:50: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:09:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:09:50: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 120 times 

10:09:50: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:09:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:09:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1222 ] 
10:09:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:09:50: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:09:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:09:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:09:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:09:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:09:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6090>, <py_sfcl.CommandDataDefinition object at 0x066A6690>) , Command count = 1223 ] 
10:09:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:09:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6AB0>, <py_sfcl.CommandDataDefinition object at 0x066A6C00>) , Command count = 1224 ] 
10:09:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:09:50: [ SetCardRCA(0x1, 0xD555) , Command count = 1225 ] 
10:09:50: [DVTCommonLib]### Identification :Idenfication of card completed 

10:09:50: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:09:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:09:50: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:09:50: [ SetBusWidth(0x1) , Command count = 1226 ] 
10:09:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:09:50: ####CSD Registe 2.0 Values####
10:09:50: CSD_STRUCTURE                                 :0x1
10:09:50: Reserv1                                       :0x0
10:09:50: Time Access 1 TAAC                            :0xe
10:09:50: Time Access 2 NSAC*100                        :0x0
10:09:50: Data Transfer Rate TRAN_SPEED                 :0x32
10:09:50: Card Command Classess CCC                     :0x5b5
10:09:50: Max Read Data Block Length  READ_BL_LEN       :0x9
10:09:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:09:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:09:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:09:50: DSR(driver stage register)  DSR_IMP           :0x0
10:09:50: Reserv2                                       :0x0
10:09:50: Device Size C_SIZE                            :0xedc8
10:09:50: Reserv3                                       :0x0
10:09:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:09:50: Erase Sector Size SECTOR_SIZE                 :0x7f
10:09:50: Write Protect Group Size WP_GRP_SIZE          :0x0
10:09:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:09:50: Reserv4                                       :0x0
10:09:50: Write Speed Factor R2W_FACTOR                 :0x2
10:09:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:09:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:09:50: FILE_FORMAT_GRP                               :0x0
10:09:50: COPY flag                                     :0x1
10:09:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:09:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:09:50: File_Format                                   :0x0
10:09:50: CRC                                           :0x0
10:09:50: ####CSD Registe Values####  

10:09:50: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:09:50: ProductSerialNumber = 0x23482900
10:09:50: CardMaximumLBA      = 0x3b72400
10:09:50: CardCapacity        = 32G
10:09:50: Is card secure      = 0
10:09:50: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:09:50: [DVTCommonLib]###  LogicalWrite called
10:09:52: [ WriteLba(0x1366D15, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1227 ] 
10:09:52: [DVTCommonLib]###  LogicalWrite Completed 

10:09:52: [DVTCommonLib]###  LogicalRead called
10:09:53: [ ReadLba(0x1366D15, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1228 ] 
10:09:53: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:09:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:09:53: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 121 times 

10:09:53: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:09:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:09:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1229 ] 
10:09:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:09:53: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:09:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:09:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:09:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:09:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:09:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A69C0>, <py_sfcl.CommandDataDefinition object at 0x066A6930>) , Command count = 1230 ] 
10:09:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:09:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE030>, <py_sfcl.CommandDataDefinition object at 0x066A6F60>) , Command count = 1231 ] 
10:09:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:09:53: [ SetCardRCA(0x1, 0xD555) , Command count = 1232 ] 
10:09:53: [DVTCommonLib]### Identification :Idenfication of card completed 

10:09:53: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:09:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:09:53: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:09:53: [ SetBusWidth(0x1) , Command count = 1233 ] 
10:09:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:09:53: ####CSD Registe 2.0 Values####
10:09:53: CSD_STRUCTURE                                 :0x1
10:09:53: Reserv1                                       :0x0
10:09:53: Time Access 1 TAAC                            :0xe
10:09:53: Time Access 2 NSAC*100                        :0x0
10:09:53: Data Transfer Rate TRAN_SPEED                 :0x32
10:09:53: Card Command Classess CCC                     :0x5b5
10:09:53: Max Read Data Block Length  READ_BL_LEN       :0x9
10:09:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:09:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:09:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:09:53: DSR(driver stage register)  DSR_IMP           :0x0
10:09:53: Reserv2                                       :0x0
10:09:53: Device Size C_SIZE                            :0xedc8
10:09:53: Reserv3                                       :0x0
10:09:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:09:53: Erase Sector Size SECTOR_SIZE                 :0x7f
10:09:53: Write Protect Group Size WP_GRP_SIZE          :0x0
10:09:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:09:53: Reserv4                                       :0x0
10:09:53: Write Speed Factor R2W_FACTOR                 :0x2
10:09:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:09:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:09:53: FILE_FORMAT_GRP                               :0x0
10:09:53: COPY flag                                     :0x1
10:09:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:09:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:09:53: File_Format                                   :0x0
10:09:53: CRC                                           :0x0
10:09:53: ####CSD Registe Values####  

10:09:53: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:09:53: ProductSerialNumber = 0x23482900
10:09:53: CardMaximumLBA      = 0x3b72400
10:09:53: CardCapacity        = 32G
10:09:53: Is card secure      = 0
10:09:53: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:09:53: [DVTCommonLib]###  LogicalWrite called
10:09:55: [ WriteLba(0x2635D97, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1234 ] 
10:09:55: [DVTCommonLib]###  LogicalWrite Completed 

10:09:55: [DVTCommonLib]###  LogicalRead called
10:09:57: [ ReadLba(0x2635D97, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1235 ] 
10:09:57: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:09:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:09:57: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 122 times 

10:09:57: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:09:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:09:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1236 ] 
10:09:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:09:57: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:09:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:09:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:09:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:09:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:09:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE1E0>, <py_sfcl.CommandDataDefinition object at 0x066AE210>) , Command count = 1237 ] 
10:09:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:09:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A63F0>, <py_sfcl.CommandDataDefinition object at 0x066A6CF0>) , Command count = 1238 ] 
10:09:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:09:57: [ SetCardRCA(0x1, 0xD555) , Command count = 1239 ] 
10:09:57: [DVTCommonLib]### Identification :Idenfication of card completed 

10:09:57: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:09:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:09:57: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:09:57: [ SetBusWidth(0x1) , Command count = 1240 ] 
10:09:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:09:57: ####CSD Registe 2.0 Values####
10:09:57: CSD_STRUCTURE                                 :0x1
10:09:57: Reserv1                                       :0x0
10:09:57: Time Access 1 TAAC                            :0xe
10:09:57: Time Access 2 NSAC*100                        :0x0
10:09:57: Data Transfer Rate TRAN_SPEED                 :0x32
10:09:57: Card Command Classess CCC                     :0x5b5
10:09:57: Max Read Data Block Length  READ_BL_LEN       :0x9
10:09:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:09:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:09:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:09:57: DSR(driver stage register)  DSR_IMP           :0x0
10:09:57: Reserv2                                       :0x0
10:09:57: Device Size C_SIZE                            :0xedc8
10:09:57: Reserv3                                       :0x0
10:09:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:09:57: Erase Sector Size SECTOR_SIZE                 :0x7f
10:09:57: Write Protect Group Size WP_GRP_SIZE          :0x0
10:09:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:09:57: Reserv4                                       :0x0
10:09:57: Write Speed Factor R2W_FACTOR                 :0x2
10:09:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:09:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:09:57: FILE_FORMAT_GRP                               :0x0
10:09:57: COPY flag                                     :0x1
10:09:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:09:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:09:57: File_Format                                   :0x0
10:09:57: CRC                                           :0x0
10:09:57: ####CSD Registe Values####  

10:09:57: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:09:57: ProductSerialNumber = 0x23482900
10:09:57: CardMaximumLBA      = 0x3b72400
10:09:57: CardCapacity        = 32G
10:09:57: Is card secure      = 0
10:09:57: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:09:57: [DVTCommonLib]###  LogicalWrite called
10:09:59: [ WriteLba(0x288412F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1241 ] 
10:09:59: [DVTCommonLib]###  LogicalWrite Completed 

10:09:59: [DVTCommonLib]###  LogicalRead called
10:10:00: [ ReadLba(0x288412F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1242 ] 
10:10:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:10:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:10:00: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 123 times 

10:10:00: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:10:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:10:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1243 ] 
10:10:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:10:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:10:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:10:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:10:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:10:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6E70>, <py_sfcl.CommandDataDefinition object at 0x066AE060>) , Command count = 1244 ] 
10:10:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6270>, <py_sfcl.CommandDataDefinition object at 0x066AE750>) , Command count = 1245 ] 
10:10:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:10:00: [ SetCardRCA(0x1, 0xD555) , Command count = 1246 ] 
10:10:00: [DVTCommonLib]### Identification :Idenfication of card completed 

10:10:00: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:10:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:10:00: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:10:00: [ SetBusWidth(0x1) , Command count = 1247 ] 
10:10:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:10:00: ####CSD Registe 2.0 Values####
10:10:00: CSD_STRUCTURE                                 :0x1
10:10:00: Reserv1                                       :0x0
10:10:00: Time Access 1 TAAC                            :0xe
10:10:00: Time Access 2 NSAC*100                        :0x0
10:10:00: Data Transfer Rate TRAN_SPEED                 :0x32
10:10:00: Card Command Classess CCC                     :0x5b5
10:10:00: Max Read Data Block Length  READ_BL_LEN       :0x9
10:10:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:10:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:10:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:10:00: DSR(driver stage register)  DSR_IMP           :0x0
10:10:00: Reserv2                                       :0x0
10:10:00: Device Size C_SIZE                            :0xedc8
10:10:00: Reserv3                                       :0x0
10:10:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:10:00: Erase Sector Size SECTOR_SIZE                 :0x7f
10:10:00: Write Protect Group Size WP_GRP_SIZE          :0x0
10:10:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:10:00: Reserv4                                       :0x0
10:10:00: Write Speed Factor R2W_FACTOR                 :0x2
10:10:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:10:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:10:00: FILE_FORMAT_GRP                               :0x0
10:10:00: COPY flag                                     :0x1
10:10:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:10:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:10:00: File_Format                                   :0x0
10:10:00: CRC                                           :0x0
10:10:00: ####CSD Registe Values####  

10:10:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:10:00: ProductSerialNumber = 0x23482900
10:10:00: CardMaximumLBA      = 0x3b72400
10:10:00: CardCapacity        = 32G
10:10:00: Is card secure      = 0
10:10:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:10:00: [DVTCommonLib]###  LogicalWrite called
10:10:02: [ WriteLba(0xC022C1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1248 ] 
10:10:02: [DVTCommonLib]###  LogicalWrite Completed 

10:10:02: [DVTCommonLib]###  LogicalRead called
10:10:04: [ ReadLba(0xC022C1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1249 ] 
10:10:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:10:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:10:04: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 124 times 

10:10:04: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:10:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:10:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1250 ] 
10:10:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:10:04: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:10:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:10:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:10:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:10:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:10:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6C90>, <py_sfcl.CommandDataDefinition object at 0x066AE300>) , Command count = 1251 ] 
10:10:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:10:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE870>, <py_sfcl.CommandDataDefinition object at 0x066AE9C0>) , Command count = 1252 ] 
10:10:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:10:04: [ SetCardRCA(0x1, 0xD555) , Command count = 1253 ] 
10:10:04: [DVTCommonLib]### Identification :Idenfication of card completed 

10:10:04: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:10:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:10:04: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:10:04: [ SetBusWidth(0x1) , Command count = 1254 ] 
10:10:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:10:04: ####CSD Registe 2.0 Values####
10:10:04: CSD_STRUCTURE                                 :0x1
10:10:04: Reserv1                                       :0x0
10:10:04: Time Access 1 TAAC                            :0xe
10:10:04: Time Access 2 NSAC*100                        :0x0
10:10:04: Data Transfer Rate TRAN_SPEED                 :0x32
10:10:04: Card Command Classess CCC                     :0x5b5
10:10:04: Max Read Data Block Length  READ_BL_LEN       :0x9
10:10:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:10:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:10:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:10:04: DSR(driver stage register)  DSR_IMP           :0x0
10:10:04: Reserv2                                       :0x0
10:10:04: Device Size C_SIZE                            :0xedc8
10:10:04: Reserv3                                       :0x0
10:10:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:10:04: Erase Sector Size SECTOR_SIZE                 :0x7f
10:10:04: Write Protect Group Size WP_GRP_SIZE          :0x0
10:10:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:10:04: Reserv4                                       :0x0
10:10:04: Write Speed Factor R2W_FACTOR                 :0x2
10:10:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:10:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:10:04: FILE_FORMAT_GRP                               :0x0
10:10:04: COPY flag                                     :0x1
10:10:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:10:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:10:04: File_Format                                   :0x0
10:10:04: CRC                                           :0x0
10:10:04: ####CSD Registe Values####  

10:10:04: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:10:04: ProductSerialNumber = 0x23482900
10:10:04: CardMaximumLBA      = 0x3b72400
10:10:04: CardCapacity        = 32G
10:10:04: Is card secure      = 0
10:10:04: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:10:04: [DVTCommonLib]###  LogicalWrite called
10:10:05: [ WriteLba(0x3570891, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1255 ] 
10:10:05: [DVTCommonLib]###  LogicalWrite Completed 

10:10:05: [DVTCommonLib]###  LogicalRead called
10:10:07: [ ReadLba(0x3570891, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1256 ] 
10:10:07: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:10:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:10:07: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 125 times 

10:10:07: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:10:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:10:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1257 ] 
10:10:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:10:07: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:10:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:10:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:10:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:10:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:10:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE780>, <py_sfcl.CommandDataDefinition object at 0x066AE6F0>) , Command count = 1258 ] 
10:10:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:10:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEDB0>, <py_sfcl.CommandDataDefinition object at 0x066AE930>) , Command count = 1259 ] 
10:10:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:10:07: [ SetCardRCA(0x1, 0xD555) , Command count = 1260 ] 
10:10:07: [DVTCommonLib]### Identification :Idenfication of card completed 

10:10:07: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:10:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:10:07: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:10:07: [ SetBusWidth(0x1) , Command count = 1261 ] 
10:10:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:10:07: ####CSD Registe 2.0 Values####
10:10:07: CSD_STRUCTURE                                 :0x1
10:10:07: Reserv1                                       :0x0
10:10:07: Time Access 1 TAAC                            :0xe
10:10:07: Time Access 2 NSAC*100                        :0x0
10:10:07: Data Transfer Rate TRAN_SPEED                 :0x32
10:10:07: Card Command Classess CCC                     :0x5b5
10:10:07: Max Read Data Block Length  READ_BL_LEN       :0x9
10:10:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:10:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:10:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:10:07: DSR(driver stage register)  DSR_IMP           :0x0
10:10:07: Reserv2                                       :0x0
10:10:07: Device Size C_SIZE                            :0xedc8
10:10:07: Reserv3                                       :0x0
10:10:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:10:07: Erase Sector Size SECTOR_SIZE                 :0x7f
10:10:07: Write Protect Group Size WP_GRP_SIZE          :0x0
10:10:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:10:07: Reserv4                                       :0x0
10:10:07: Write Speed Factor R2W_FACTOR                 :0x2
10:10:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:10:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:10:07: FILE_FORMAT_GRP                               :0x0
10:10:07: COPY flag                                     :0x1
10:10:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:10:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:10:07: File_Format                                   :0x0
10:10:07: CRC                                           :0x0
10:10:07: ####CSD Registe Values####  

10:10:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:10:07: ProductSerialNumber = 0x23482900
10:10:07: CardMaximumLBA      = 0x3b72400
10:10:07: CardCapacity        = 32G
10:10:07: Is card secure      = 0
10:10:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:10:07: [DVTCommonLib]###  LogicalWrite called
10:10:09: [ WriteLba(0x2AF0639, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1262 ] 
10:10:09: [DVTCommonLib]###  LogicalWrite Completed 

10:10:09: [DVTCommonLib]###  LogicalRead called
10:10:10: [ ReadLba(0x2AF0639, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1263 ] 
10:10:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:10:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:10:10: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 126 times 

10:10:10: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:10:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:10:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1264 ] 
10:10:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:10:10: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:10:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:10:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:10:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:10:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:10:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE7A80>, <py_sfcl.CommandDataDefinition object at 0x066B1120>) , Command count = 1265 ] 
10:10:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:10:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC5090>, <py_sfcl.CommandDataDefinition object at 0x066AEA50>) , Command count = 1266 ] 
10:10:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:10:10: [ SetCardRCA(0x1, 0xD555) , Command count = 1267 ] 
10:10:11: [DVTCommonLib]### Identification :Idenfication of card completed 

10:10:11: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:10:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:10:11: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:10:11: [ SetBusWidth(0x1) , Command count = 1268 ] 
10:10:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:10:11: ####CSD Registe 2.0 Values####
10:10:11: CSD_STRUCTURE                                 :0x1
10:10:11: Reserv1                                       :0x0
10:10:11: Time Access 1 TAAC                            :0xe
10:10:11: Time Access 2 NSAC*100                        :0x0
10:10:11: Data Transfer Rate TRAN_SPEED                 :0x32
10:10:11: Card Command Classess CCC                     :0x5b5
10:10:11: Max Read Data Block Length  READ_BL_LEN       :0x9
10:10:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:10:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:10:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:10:11: DSR(driver stage register)  DSR_IMP           :0x0
10:10:11: Reserv2                                       :0x0
10:10:11: Device Size C_SIZE                            :0xedc8
10:10:11: Reserv3                                       :0x0
10:10:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:10:11: Erase Sector Size SECTOR_SIZE                 :0x7f
10:10:11: Write Protect Group Size WP_GRP_SIZE          :0x0
10:10:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:10:11: Reserv4                                       :0x0
10:10:11: Write Speed Factor R2W_FACTOR                 :0x2
10:10:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:10:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:10:11: FILE_FORMAT_GRP                               :0x0
10:10:11: COPY flag                                     :0x1
10:10:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:10:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:10:11: File_Format                                   :0x0
10:10:11: CRC                                           :0x0
10:10:11: ####CSD Registe Values####  

10:10:11: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:10:11: ProductSerialNumber = 0x23482900
10:10:11: CardMaximumLBA      = 0x3b72400
10:10:11: CardCapacity        = 32G
10:10:11: Is card secure      = 0
10:10:11: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:10:11: [DVTCommonLib]###  LogicalWrite called
10:10:12: [ WriteLba(0x2868E24, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1269 ] 
10:10:12: [DVTCommonLib]###  LogicalWrite Completed 

10:10:12: [DVTCommonLib]###  LogicalRead called
10:10:14: [ ReadLba(0x2868E24, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1270 ] 
10:10:14: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:10:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:10:14: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 127 times 

10:10:14: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:10:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:10:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1271 ] 
10:10:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:10:14: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:10:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:10:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:10:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:10:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:10:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05EC0A20>, <py_sfcl.CommandDataDefinition object at 0x05FDBC60>) , Command count = 1272 ] 
10:10:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:10:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE7D80>, <py_sfcl.CommandDataDefinition object at 0x066B12D0>) , Command count = 1273 ] 
10:10:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:10:14: [ SetCardRCA(0x1, 0xD555) , Command count = 1274 ] 
10:10:14: [DVTCommonLib]### Identification :Idenfication of card completed 

10:10:14: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:10:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:10:14: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:10:14: [ SetBusWidth(0x1) , Command count = 1275 ] 
10:10:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:10:14: ####CSD Registe 2.0 Values####
10:10:14: CSD_STRUCTURE                                 :0x1
10:10:14: Reserv1                                       :0x0
10:10:14: Time Access 1 TAAC                            :0xe
10:10:14: Time Access 2 NSAC*100                        :0x0
10:10:14: Data Transfer Rate TRAN_SPEED                 :0x32
10:10:14: Card Command Classess CCC                     :0x5b5
10:10:14: Max Read Data Block Length  READ_BL_LEN       :0x9
10:10:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:10:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:10:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:10:14: DSR(driver stage register)  DSR_IMP           :0x0
10:10:14: Reserv2                                       :0x0
10:10:14: Device Size C_SIZE                            :0xedc8
10:10:14: Reserv3                                       :0x0
10:10:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:10:14: Erase Sector Size SECTOR_SIZE                 :0x7f
10:10:14: Write Protect Group Size WP_GRP_SIZE          :0x0
10:10:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:10:14: Reserv4                                       :0x0
10:10:14: Write Speed Factor R2W_FACTOR                 :0x2
10:10:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:10:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:10:14: FILE_FORMAT_GRP                               :0x0
10:10:14: COPY flag                                     :0x1
10:10:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:10:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:10:14: File_Format                                   :0x0
10:10:14: CRC                                           :0x0
10:10:14: ####CSD Registe Values####  

10:10:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:10:14: ProductSerialNumber = 0x23482900
10:10:14: CardMaximumLBA      = 0x3b72400
10:10:14: CardCapacity        = 32G
10:10:14: Is card secure      = 0
10:10:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:10:14: [DVTCommonLib]###  LogicalWrite called
10:10:16: [ WriteLba(0x105F30D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1276 ] 
10:10:16: [DVTCommonLib]###  LogicalWrite Completed 

10:10:16: [DVTCommonLib]###  LogicalRead called
10:10:17: [ ReadLba(0x105F30D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1277 ] 
10:10:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:10:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:10:17: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 128 times 

10:10:17: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:10:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:10:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1278 ] 
10:10:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:10:17: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:10:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:10:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:10:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:10:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:10:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEE70>, <py_sfcl.CommandDataDefinition object at 0x05FDBDB0>) , Command count = 1279 ] 
10:10:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:10:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B11E0>, <py_sfcl.CommandDataDefinition object at 0x066B11B0>) , Command count = 1280 ] 
10:10:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:10:17: [ SetCardRCA(0x1, 0xD555) , Command count = 1281 ] 
10:10:17: [DVTCommonLib]### Identification :Idenfication of card completed 

10:10:17: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:10:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:10:17: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:10:17: [ SetBusWidth(0x1) , Command count = 1282 ] 
10:10:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:10:17: ####CSD Registe 2.0 Values####
10:10:17: CSD_STRUCTURE                                 :0x1
10:10:17: Reserv1                                       :0x0
10:10:17: Time Access 1 TAAC                            :0xe
10:10:17: Time Access 2 NSAC*100                        :0x0
10:10:17: Data Transfer Rate TRAN_SPEED                 :0x32
10:10:17: Card Command Classess CCC                     :0x5b5
10:10:17: Max Read Data Block Length  READ_BL_LEN       :0x9
10:10:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:10:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:10:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:10:17: DSR(driver stage register)  DSR_IMP           :0x0
10:10:17: Reserv2                                       :0x0
10:10:17: Device Size C_SIZE                            :0xedc8
10:10:17: Reserv3                                       :0x0
10:10:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:10:17: Erase Sector Size SECTOR_SIZE                 :0x7f
10:10:17: Write Protect Group Size WP_GRP_SIZE          :0x0
10:10:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:10:17: Reserv4                                       :0x0
10:10:17: Write Speed Factor R2W_FACTOR                 :0x2
10:10:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:10:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:10:17: FILE_FORMAT_GRP                               :0x0
10:10:17: COPY flag                                     :0x1
10:10:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:10:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:10:17: File_Format                                   :0x0
10:10:17: CRC                                           :0x0
10:10:17: ####CSD Registe Values####  

10:10:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:10:17: ProductSerialNumber = 0x23482900
10:10:17: CardMaximumLBA      = 0x3b72400
10:10:17: CardCapacity        = 32G
10:10:17: Is card secure      = 0
10:10:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:10:17: [DVTCommonLib]###  LogicalWrite called
10:10:19: [ WriteLba(0x2CB2AFA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1283 ] 
10:10:19: [DVTCommonLib]###  LogicalWrite Completed 

10:10:19: [DVTCommonLib]###  LogicalRead called
10:10:21: [ ReadLba(0x2CB2AFA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1284 ] 
10:10:21: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:10:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:10:21: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 129 times 

10:10:21: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:10:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:10:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1285 ] 
10:10:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:10:21: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:10:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:10:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:10:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:10:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:10:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FCB210>, <py_sfcl.CommandDataDefinition object at 0x05FE73F0>) , Command count = 1286 ] 
10:10:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:10:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1510>, <py_sfcl.CommandDataDefinition object at 0x066B13F0>) , Command count = 1287 ] 
10:10:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:10:21: [ SetCardRCA(0x1, 0xD555) , Command count = 1288 ] 
10:10:21: [DVTCommonLib]### Identification :Idenfication of card completed 

10:10:21: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:10:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:10:21: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:10:21: [ SetBusWidth(0x1) , Command count = 1289 ] 
10:10:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:10:21: ####CSD Registe 2.0 Values####
10:10:21: CSD_STRUCTURE                                 :0x1
10:10:21: Reserv1                                       :0x0
10:10:21: Time Access 1 TAAC                            :0xe
10:10:21: Time Access 2 NSAC*100                        :0x0
10:10:21: Data Transfer Rate TRAN_SPEED                 :0x32
10:10:21: Card Command Classess CCC                     :0x5b5
10:10:21: Max Read Data Block Length  READ_BL_LEN       :0x9
10:10:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:10:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:10:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:10:21: DSR(driver stage register)  DSR_IMP           :0x0
10:10:21: Reserv2                                       :0x0
10:10:21: Device Size C_SIZE                            :0xedc8
10:10:21: Reserv3                                       :0x0
10:10:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:10:21: Erase Sector Size SECTOR_SIZE                 :0x7f
10:10:21: Write Protect Group Size WP_GRP_SIZE          :0x0
10:10:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:10:21: Reserv4                                       :0x0
10:10:21: Write Speed Factor R2W_FACTOR                 :0x2
10:10:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:10:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:10:21: FILE_FORMAT_GRP                               :0x0
10:10:21: COPY flag                                     :0x1
10:10:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:10:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:10:21: File_Format                                   :0x0
10:10:21: CRC                                           :0x0
10:10:21: ####CSD Registe Values####  

10:10:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:10:21: ProductSerialNumber = 0x23482900
10:10:21: CardMaximumLBA      = 0x3b72400
10:10:21: CardCapacity        = 32G
10:10:21: Is card secure      = 0
10:10:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:10:21: [DVTCommonLib]###  LogicalWrite called
10:10:22: [ WriteLba(0x345A9E5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1290 ] 
10:10:22: [DVTCommonLib]###  LogicalWrite Completed 

10:10:22: [DVTCommonLib]###  LogicalRead called
10:10:24: [ ReadLba(0x345A9E5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1291 ] 
10:10:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:10:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:10:24: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 130 times 

10:10:24: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:10:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:10:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1292 ] 
10:10:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:10:24: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:10:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:10:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:10:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:10:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:10:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06033930>, <py_sfcl.CommandDataDefinition object at 0x06033C90>) , Command count = 1293 ] 
10:10:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:10:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060388A0>, <py_sfcl.CommandDataDefinition object at 0x066B17B0>) , Command count = 1294 ] 
10:10:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:10:24: [ SetCardRCA(0x1, 0xD555) , Command count = 1295 ] 
10:10:24: [DVTCommonLib]### Identification :Idenfication of card completed 

10:10:24: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:10:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:10:24: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:10:24: [ SetBusWidth(0x1) , Command count = 1296 ] 
10:10:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:10:24: ####CSD Registe 2.0 Values####
10:10:24: CSD_STRUCTURE                                 :0x1
10:10:24: Reserv1                                       :0x0
10:10:24: Time Access 1 TAAC                            :0xe
10:10:24: Time Access 2 NSAC*100                        :0x0
10:10:24: Data Transfer Rate TRAN_SPEED                 :0x32
10:10:24: Card Command Classess CCC                     :0x5b5
10:10:24: Max Read Data Block Length  READ_BL_LEN       :0x9
10:10:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:10:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:10:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:10:24: DSR(driver stage register)  DSR_IMP           :0x0
10:10:24: Reserv2                                       :0x0
10:10:24: Device Size C_SIZE                            :0xedc8
10:10:24: Reserv3                                       :0x0
10:10:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:10:24: Erase Sector Size SECTOR_SIZE                 :0x7f
10:10:24: Write Protect Group Size WP_GRP_SIZE          :0x0
10:10:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:10:24: Reserv4                                       :0x0
10:10:24: Write Speed Factor R2W_FACTOR                 :0x2
10:10:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:10:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:10:24: FILE_FORMAT_GRP                               :0x0
10:10:24: COPY flag                                     :0x1
10:10:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:10:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:10:24: File_Format                                   :0x0
10:10:24: CRC                                           :0x0
10:10:24: ####CSD Registe Values####  

10:10:24: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:10:24: ProductSerialNumber = 0x23482900
10:10:24: CardMaximumLBA      = 0x3b72400
10:10:24: CardCapacity        = 32G
10:10:24: Is card secure      = 0
10:10:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:10:24: [DVTCommonLib]###  LogicalWrite called
10:10:26: [ WriteLba(0x282FB68, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1297 ] 
10:10:26: [DVTCommonLib]###  LogicalWrite Completed 

10:10:26: [DVTCommonLib]###  LogicalRead called
10:10:27: [ ReadLba(0x282FB68, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1298 ] 
10:10:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:10:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:10:27: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 131 times 

10:10:27: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:10:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:10:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1299 ] 
10:10:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:10:27: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:10:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:10:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:10:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:10:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:10:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038810>, <py_sfcl.CommandDataDefinition object at 0x060386F0>) , Command count = 1300 ] 
10:10:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:10:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060389F0>, <py_sfcl.CommandDataDefinition object at 0x066B1C00>) , Command count = 1301 ] 
10:10:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:10:28: [ SetCardRCA(0x1, 0xD555) , Command count = 1302 ] 
10:10:28: [DVTCommonLib]### Identification :Idenfication of card completed 

10:10:28: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:10:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:10:28: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:10:28: [ SetBusWidth(0x1) , Command count = 1303 ] 
10:10:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:10:28: ####CSD Registe 2.0 Values####
10:10:28: CSD_STRUCTURE                                 :0x1
10:10:28: Reserv1                                       :0x0
10:10:28: Time Access 1 TAAC                            :0xe
10:10:28: Time Access 2 NSAC*100                        :0x0
10:10:28: Data Transfer Rate TRAN_SPEED                 :0x32
10:10:28: Card Command Classess CCC                     :0x5b5
10:10:28: Max Read Data Block Length  READ_BL_LEN       :0x9
10:10:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:10:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:10:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:10:28: DSR(driver stage register)  DSR_IMP           :0x0
10:10:28: Reserv2                                       :0x0
10:10:28: Device Size C_SIZE                            :0xedc8
10:10:28: Reserv3                                       :0x0
10:10:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:10:28: Erase Sector Size SECTOR_SIZE                 :0x7f
10:10:28: Write Protect Group Size WP_GRP_SIZE          :0x0
10:10:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:10:28: Reserv4                                       :0x0
10:10:28: Write Speed Factor R2W_FACTOR                 :0x2
10:10:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:10:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:10:28: FILE_FORMAT_GRP                               :0x0
10:10:28: COPY flag                                     :0x1
10:10:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:10:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:10:28: File_Format                                   :0x0
10:10:28: CRC                                           :0x0
10:10:28: ####CSD Registe Values####  

10:10:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:10:28: ProductSerialNumber = 0x23482900
10:10:28: CardMaximumLBA      = 0x3b72400
10:10:28: CardCapacity        = 32G
10:10:28: Is card secure      = 0
10:10:28: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:10:28: [DVTCommonLib]###  LogicalWrite called
10:10:29: [ WriteLba(0xDD2C80, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1304 ] 
10:10:29: [DVTCommonLib]###  LogicalWrite Completed 

10:10:29: [DVTCommonLib]###  LogicalRead called
10:10:31: [ ReadLba(0xDD2C80, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1305 ] 
10:10:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:10:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:10:31: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 132 times 

10:10:31: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:10:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:10:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1306 ] 
10:10:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:10:31: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:10:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:10:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:10:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:10:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:10:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDBBD0>, <py_sfcl.CommandDataDefinition object at 0x06038A50>) , Command count = 1307 ] 
10:10:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:10:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1CF0>, <py_sfcl.CommandDataDefinition object at 0x066B1C30>) , Command count = 1308 ] 
10:10:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:10:31: [ SetCardRCA(0x1, 0xD555) , Command count = 1309 ] 
10:10:31: [DVTCommonLib]### Identification :Idenfication of card completed 

10:10:31: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:10:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:10:31: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:10:31: [ SetBusWidth(0x1) , Command count = 1310 ] 
10:10:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:10:31: ####CSD Registe 2.0 Values####
10:10:31: CSD_STRUCTURE                                 :0x1
10:10:31: Reserv1                                       :0x0
10:10:31: Time Access 1 TAAC                            :0xe
10:10:31: Time Access 2 NSAC*100                        :0x0
10:10:31: Data Transfer Rate TRAN_SPEED                 :0x32
10:10:31: Card Command Classess CCC                     :0x5b5
10:10:31: Max Read Data Block Length  READ_BL_LEN       :0x9
10:10:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:10:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:10:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:10:31: DSR(driver stage register)  DSR_IMP           :0x0
10:10:31: Reserv2                                       :0x0
10:10:31: Device Size C_SIZE                            :0xedc8
10:10:31: Reserv3                                       :0x0
10:10:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:10:31: Erase Sector Size SECTOR_SIZE                 :0x7f
10:10:31: Write Protect Group Size WP_GRP_SIZE          :0x0
10:10:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:10:31: Reserv4                                       :0x0
10:10:31: Write Speed Factor R2W_FACTOR                 :0x2
10:10:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:10:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:10:31: FILE_FORMAT_GRP                               :0x0
10:10:31: COPY flag                                     :0x1
10:10:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:10:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:10:31: File_Format                                   :0x0
10:10:31: CRC                                           :0x0
10:10:31: ####CSD Registe Values####  

10:10:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:10:31: ProductSerialNumber = 0x23482900
10:10:31: CardMaximumLBA      = 0x3b72400
10:10:31: CardCapacity        = 32G
10:10:31: Is card secure      = 0
10:10:31: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:10:31: [DVTCommonLib]###  LogicalWrite called
10:10:33: [ WriteLba(0xCAA856, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1311 ] 
10:10:33: [DVTCommonLib]###  LogicalWrite Completed 

10:10:33: [DVTCommonLib]###  LogicalRead called
10:10:34: [ ReadLba(0xCAA856, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1312 ] 
10:10:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:10:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:10:34: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 133 times 

10:10:34: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:10:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:10:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1313 ] 
10:10:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:10:34: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:10:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:10:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:10:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:10:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:10:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661D5D0>, <py_sfcl.CommandDataDefinition object at 0x06592360>) , Command count = 1314 ] 
10:10:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:10:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1E10>, <py_sfcl.CommandDataDefinition object at 0x066B1E70>) , Command count = 1315 ] 
10:10:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:10:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1316 ] 
10:10:34: [DVTCommonLib]### Identification :Idenfication of card completed 

10:10:34: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:10:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:10:34: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:10:34: [ SetBusWidth(0x1) , Command count = 1317 ] 
10:10:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:10:34: ####CSD Registe 2.0 Values####
10:10:34: CSD_STRUCTURE                                 :0x1
10:10:34: Reserv1                                       :0x0
10:10:34: Time Access 1 TAAC                            :0xe
10:10:34: Time Access 2 NSAC*100                        :0x0
10:10:34: Data Transfer Rate TRAN_SPEED                 :0x32
10:10:34: Card Command Classess CCC                     :0x5b5
10:10:34: Max Read Data Block Length  READ_BL_LEN       :0x9
10:10:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:10:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:10:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:10:34: DSR(driver stage register)  DSR_IMP           :0x0
10:10:34: Reserv2                                       :0x0
10:10:34: Device Size C_SIZE                            :0xedc8
10:10:34: Reserv3                                       :0x0
10:10:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:10:34: Erase Sector Size SECTOR_SIZE                 :0x7f
10:10:34: Write Protect Group Size WP_GRP_SIZE          :0x0
10:10:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:10:34: Reserv4                                       :0x0
10:10:34: Write Speed Factor R2W_FACTOR                 :0x2
10:10:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:10:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:10:34: FILE_FORMAT_GRP                               :0x0
10:10:34: COPY flag                                     :0x1
10:10:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:10:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:10:34: File_Format                                   :0x0
10:10:34: CRC                                           :0x0
10:10:34: ####CSD Registe Values####  

10:10:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:10:34: ProductSerialNumber = 0x23482900
10:10:34: CardMaximumLBA      = 0x3b72400
10:10:34: CardCapacity        = 32G
10:10:34: Is card secure      = 0
10:10:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:10:34: [DVTCommonLib]###  LogicalWrite called
10:10:36: [ WriteLba(0x1C57A26, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1318 ] 
10:10:36: [DVTCommonLib]###  LogicalWrite Completed 

10:10:36: [DVTCommonLib]###  LogicalRead called
10:10:38: [ ReadLba(0x1C57A26, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1319 ] 
10:10:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:10:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:10:38: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 134 times 

10:10:38: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:10:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:10:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1320 ] 
10:10:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:10:38: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:10:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:10:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:10:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:10:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:10:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A120>, <py_sfcl.CommandDataDefinition object at 0x0662DC00>) , Command count = 1321 ] 
10:10:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:10:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065920C0>, <py_sfcl.CommandDataDefinition object at 0x0662DBD0>) , Command count = 1322 ] 
10:10:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:10:38: [ SetCardRCA(0x1, 0xD555) , Command count = 1323 ] 
10:10:38: [DVTCommonLib]### Identification :Idenfication of card completed 

10:10:38: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:10:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:10:38: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:10:38: [ SetBusWidth(0x1) , Command count = 1324 ] 
10:10:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:10:38: ####CSD Registe 2.0 Values####
10:10:38: CSD_STRUCTURE                                 :0x1
10:10:38: Reserv1                                       :0x0
10:10:38: Time Access 1 TAAC                            :0xe
10:10:38: Time Access 2 NSAC*100                        :0x0
10:10:38: Data Transfer Rate TRAN_SPEED                 :0x32
10:10:38: Card Command Classess CCC                     :0x5b5
10:10:38: Max Read Data Block Length  READ_BL_LEN       :0x9
10:10:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:10:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:10:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:10:38: DSR(driver stage register)  DSR_IMP           :0x0
10:10:38: Reserv2                                       :0x0
10:10:38: Device Size C_SIZE                            :0xedc8
10:10:38: Reserv3                                       :0x0
10:10:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:10:38: Erase Sector Size SECTOR_SIZE                 :0x7f
10:10:38: Write Protect Group Size WP_GRP_SIZE          :0x0
10:10:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:10:38: Reserv4                                       :0x0
10:10:38: Write Speed Factor R2W_FACTOR                 :0x2
10:10:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:10:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:10:38: FILE_FORMAT_GRP                               :0x0
10:10:38: COPY flag                                     :0x1
10:10:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:10:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:10:38: File_Format                                   :0x0
10:10:38: CRC                                           :0x0
10:10:38: ####CSD Registe Values####  

10:10:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:10:38: ProductSerialNumber = 0x23482900
10:10:38: CardMaximumLBA      = 0x3b72400
10:10:38: CardCapacity        = 32G
10:10:38: Is card secure      = 0
10:10:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:10:38: [DVTCommonLib]###  LogicalWrite called
10:10:39: [ WriteLba(0x1B9B08, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1325 ] 
10:10:39: [DVTCommonLib]###  LogicalWrite Completed 

10:10:39: [DVTCommonLib]###  LogicalRead called
10:10:41: [ ReadLba(0x1B9B08, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1326 ] 
10:10:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:10:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:10:41: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 135 times 

10:10:41: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:10:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:10:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1327 ] 
10:10:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:10:41: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:10:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:10:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:10:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:10:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEF030>, <py_sfcl.CommandDataDefinition object at 0x06038ED0>) , Command count = 1328 ] 
10:10:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DCF0>, <py_sfcl.CommandDataDefinition object at 0x066B1D80>) , Command count = 1329 ] 
10:10:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:10:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1330 ] 
10:10:41: [DVTCommonLib]### Identification :Idenfication of card completed 

10:10:41: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:10:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:10:41: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:10:41: [ SetBusWidth(0x1) , Command count = 1331 ] 
10:10:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:10:41: ####CSD Registe 2.0 Values####
10:10:41: CSD_STRUCTURE                                 :0x1
10:10:41: Reserv1                                       :0x0
10:10:41: Time Access 1 TAAC                            :0xe
10:10:41: Time Access 2 NSAC*100                        :0x0
10:10:41: Data Transfer Rate TRAN_SPEED                 :0x32
10:10:41: Card Command Classess CCC                     :0x5b5
10:10:41: Max Read Data Block Length  READ_BL_LEN       :0x9
10:10:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:10:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:10:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:10:41: DSR(driver stage register)  DSR_IMP           :0x0
10:10:41: Reserv2                                       :0x0
10:10:41: Device Size C_SIZE                            :0xedc8
10:10:41: Reserv3                                       :0x0
10:10:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:10:41: Erase Sector Size SECTOR_SIZE                 :0x7f
10:10:41: Write Protect Group Size WP_GRP_SIZE          :0x0
10:10:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:10:41: Reserv4                                       :0x0
10:10:41: Write Speed Factor R2W_FACTOR                 :0x2
10:10:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:10:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:10:41: FILE_FORMAT_GRP                               :0x0
10:10:41: COPY flag                                     :0x1
10:10:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:10:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:10:41: File_Format                                   :0x0
10:10:41: CRC                                           :0x0
10:10:41: ####CSD Registe Values####  

10:10:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:10:41: ProductSerialNumber = 0x23482900
10:10:41: CardMaximumLBA      = 0x3b72400
10:10:41: CardCapacity        = 32G
10:10:41: Is card secure      = 0
10:10:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:10:41: [DVTCommonLib]###  LogicalWrite called
10:10:43: [ WriteLba(0x39B865B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1332 ] 
10:10:43: [DVTCommonLib]###  LogicalWrite Completed 

10:10:43: [DVTCommonLib]###  LogicalRead called
10:10:44: [ ReadLba(0x39B865B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1333 ] 
10:10:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:10:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:10:44: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 136 times 

10:10:44: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:10:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:10:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1334 ] 
10:10:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:10:45: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:10:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:10:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:10:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:10:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:10:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DDE0>, <py_sfcl.CommandDataDefinition object at 0x0661DC30>) , Command count = 1335 ] 
10:10:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:10:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A1E0>, <py_sfcl.CommandDataDefinition object at 0x0663AD50>) , Command count = 1336 ] 
10:10:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:10:45: [ SetCardRCA(0x1, 0xD555) , Command count = 1337 ] 
10:10:45: [DVTCommonLib]### Identification :Idenfication of card completed 

10:10:45: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:10:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:10:45: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:10:45: [ SetBusWidth(0x1) , Command count = 1338 ] 
10:10:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:10:45: ####CSD Registe 2.0 Values####
10:10:45: CSD_STRUCTURE                                 :0x1
10:10:45: Reserv1                                       :0x0
10:10:45: Time Access 1 TAAC                            :0xe
10:10:45: Time Access 2 NSAC*100                        :0x0
10:10:45: Data Transfer Rate TRAN_SPEED                 :0x32
10:10:45: Card Command Classess CCC                     :0x5b5
10:10:45: Max Read Data Block Length  READ_BL_LEN       :0x9
10:10:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:10:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:10:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:10:45: DSR(driver stage register)  DSR_IMP           :0x0
10:10:45: Reserv2                                       :0x0
10:10:45: Device Size C_SIZE                            :0xedc8
10:10:45: Reserv3                                       :0x0
10:10:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:10:45: Erase Sector Size SECTOR_SIZE                 :0x7f
10:10:45: Write Protect Group Size WP_GRP_SIZE          :0x0
10:10:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:10:45: Reserv4                                       :0x0
10:10:45: Write Speed Factor R2W_FACTOR                 :0x2
10:10:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:10:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:10:45: FILE_FORMAT_GRP                               :0x0
10:10:45: COPY flag                                     :0x1
10:10:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:10:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:10:45: File_Format                                   :0x0
10:10:45: CRC                                           :0x0
10:10:45: ####CSD Registe Values####  

10:10:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:10:45: ProductSerialNumber = 0x23482900
10:10:45: CardMaximumLBA      = 0x3b72400
10:10:45: CardCapacity        = 32G
10:10:45: Is card secure      = 0
10:10:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:10:45: [DVTCommonLib]###  LogicalWrite called
10:10:46: [ WriteLba(0xE2E28B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1339 ] 
10:10:46: [DVTCommonLib]###  LogicalWrite Completed 

10:10:46: [DVTCommonLib]###  LogicalRead called
10:10:48: [ ReadLba(0xE2E28B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1340 ] 
10:10:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:10:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:10:48: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 137 times 

10:10:48: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:10:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:10:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1341 ] 
10:10:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:10:48: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:10:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:10:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:10:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:10:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:10:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DCC0>, <py_sfcl.CommandDataDefinition object at 0x0663E0C0>) , Command count = 1342 ] 
10:10:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:10:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E210>, <py_sfcl.CommandDataDefinition object at 0x0663ADE0>) , Command count = 1343 ] 
10:10:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:10:48: [ SetCardRCA(0x1, 0xD555) , Command count = 1344 ] 
10:10:48: [DVTCommonLib]### Identification :Idenfication of card completed 

10:10:48: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:10:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:10:48: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:10:48: [ SetBusWidth(0x1) , Command count = 1345 ] 
10:10:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:10:48: ####CSD Registe 2.0 Values####
10:10:48: CSD_STRUCTURE                                 :0x1
10:10:48: Reserv1                                       :0x0
10:10:48: Time Access 1 TAAC                            :0xe
10:10:48: Time Access 2 NSAC*100                        :0x0
10:10:48: Data Transfer Rate TRAN_SPEED                 :0x32
10:10:48: Card Command Classess CCC                     :0x5b5
10:10:48: Max Read Data Block Length  READ_BL_LEN       :0x9
10:10:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:10:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:10:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:10:48: DSR(driver stage register)  DSR_IMP           :0x0
10:10:48: Reserv2                                       :0x0
10:10:48: Device Size C_SIZE                            :0xedc8
10:10:48: Reserv3                                       :0x0
10:10:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:10:48: Erase Sector Size SECTOR_SIZE                 :0x7f
10:10:48: Write Protect Group Size WP_GRP_SIZE          :0x0
10:10:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:10:48: Reserv4                                       :0x0
10:10:48: Write Speed Factor R2W_FACTOR                 :0x2
10:10:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:10:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:10:48: FILE_FORMAT_GRP                               :0x0
10:10:48: COPY flag                                     :0x1
10:10:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:10:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:10:48: File_Format                                   :0x0
10:10:48: CRC                                           :0x0
10:10:48: ####CSD Registe Values####  

10:10:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:10:48: ProductSerialNumber = 0x23482900
10:10:48: CardMaximumLBA      = 0x3b72400
10:10:48: CardCapacity        = 32G
10:10:48: Is card secure      = 0
10:10:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:10:48: [DVTCommonLib]###  LogicalWrite called
10:10:50: [ WriteLba(0x211D1A8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1346 ] 
10:10:50: [DVTCommonLib]###  LogicalWrite Completed 

10:10:50: [DVTCommonLib]###  LogicalRead called
10:10:51: [ ReadLba(0x211D1A8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1347 ] 
10:10:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:10:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:10:51: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 138 times 

10:10:51: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:10:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:10:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1348 ] 
10:10:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:10:51: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:10:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:10:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:10:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:10:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:10:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A570>, <py_sfcl.CommandDataDefinition object at 0x0663AFC0>) , Command count = 1349 ] 
10:10:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:10:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E420>, <py_sfcl.CommandDataDefinition object at 0x0663E4E0>) , Command count = 1350 ] 
10:10:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:10:51: [ SetCardRCA(0x1, 0xD555) , Command count = 1351 ] 
10:10:51: [DVTCommonLib]### Identification :Idenfication of card completed 

10:10:51: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:10:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:10:51: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:10:51: [ SetBusWidth(0x1) , Command count = 1352 ] 
10:10:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:10:51: ####CSD Registe 2.0 Values####
10:10:51: CSD_STRUCTURE                                 :0x1
10:10:51: Reserv1                                       :0x0
10:10:51: Time Access 1 TAAC                            :0xe
10:10:51: Time Access 2 NSAC*100                        :0x0
10:10:51: Data Transfer Rate TRAN_SPEED                 :0x32
10:10:51: Card Command Classess CCC                     :0x5b5
10:10:51: Max Read Data Block Length  READ_BL_LEN       :0x9
10:10:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:10:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:10:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:10:51: DSR(driver stage register)  DSR_IMP           :0x0
10:10:51: Reserv2                                       :0x0
10:10:51: Device Size C_SIZE                            :0xedc8
10:10:51: Reserv3                                       :0x0
10:10:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:10:51: Erase Sector Size SECTOR_SIZE                 :0x7f
10:10:51: Write Protect Group Size WP_GRP_SIZE          :0x0
10:10:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:10:51: Reserv4                                       :0x0
10:10:51: Write Speed Factor R2W_FACTOR                 :0x2
10:10:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:10:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:10:51: FILE_FORMAT_GRP                               :0x0
10:10:51: COPY flag                                     :0x1
10:10:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:10:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:10:51: File_Format                                   :0x0
10:10:51: CRC                                           :0x0
10:10:51: ####CSD Registe Values####  

10:10:51: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:10:51: ProductSerialNumber = 0x23482900
10:10:51: CardMaximumLBA      = 0x3b72400
10:10:51: CardCapacity        = 32G
10:10:51: Is card secure      = 0
10:10:51: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:10:51: [DVTCommonLib]###  LogicalWrite called
10:10:53: [ WriteLba(0x2792474, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1353 ] 
10:10:53: [DVTCommonLib]###  LogicalWrite Completed 

10:10:53: [DVTCommonLib]###  LogicalRead called
10:10:55: [ ReadLba(0x2792474, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1354 ] 
10:10:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:10:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:10:55: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 139 times 

10:10:55: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:10:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:10:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1355 ] 
10:10:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:10:55: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:10:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:10:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:10:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:10:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:10:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E300>, <py_sfcl.CommandDataDefinition object at 0x0663E2A0>) , Command count = 1356 ] 
10:10:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:10:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E810>, <py_sfcl.CommandDataDefinition object at 0x0663E9C0>) , Command count = 1357 ] 
10:10:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:10:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1358 ] 
10:10:55: [DVTCommonLib]### Identification :Idenfication of card completed 

10:10:55: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:10:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:10:55: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:10:55: [ SetBusWidth(0x1) , Command count = 1359 ] 
10:10:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:10:55: ####CSD Registe 2.0 Values####
10:10:55: CSD_STRUCTURE                                 :0x1
10:10:55: Reserv1                                       :0x0
10:10:55: Time Access 1 TAAC                            :0xe
10:10:55: Time Access 2 NSAC*100                        :0x0
10:10:55: Data Transfer Rate TRAN_SPEED                 :0x32
10:10:55: Card Command Classess CCC                     :0x5b5
10:10:55: Max Read Data Block Length  READ_BL_LEN       :0x9
10:10:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:10:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:10:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:10:55: DSR(driver stage register)  DSR_IMP           :0x0
10:10:55: Reserv2                                       :0x0
10:10:55: Device Size C_SIZE                            :0xedc8
10:10:55: Reserv3                                       :0x0
10:10:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:10:55: Erase Sector Size SECTOR_SIZE                 :0x7f
10:10:55: Write Protect Group Size WP_GRP_SIZE          :0x0
10:10:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:10:55: Reserv4                                       :0x0
10:10:55: Write Speed Factor R2W_FACTOR                 :0x2
10:10:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:10:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:10:55: FILE_FORMAT_GRP                               :0x0
10:10:55: COPY flag                                     :0x1
10:10:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:10:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:10:55: File_Format                                   :0x0
10:10:55: CRC                                           :0x0
10:10:55: ####CSD Registe Values####  

10:10:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:10:55: ProductSerialNumber = 0x23482900
10:10:55: CardMaximumLBA      = 0x3b72400
10:10:55: CardCapacity        = 32G
10:10:55: Is card secure      = 0
10:10:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:10:55: [DVTCommonLib]###  LogicalWrite called
10:10:56: [ WriteLba(0x1266BDC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1360 ] 
10:10:56: [DVTCommonLib]###  LogicalWrite Completed 

10:10:56: [DVTCommonLib]###  LogicalRead called
10:10:58: [ ReadLba(0x1266BDC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1361 ] 
10:10:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:10:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:10:58: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 140 times 

10:10:58: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:10:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:10:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1362 ] 
10:10:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:10:58: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:10:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:10:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:10:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:10:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E690>, <py_sfcl.CommandDataDefinition object at 0x0663E600>) , Command count = 1363 ] 
10:10:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E720>, <py_sfcl.CommandDataDefinition object at 0x0663E900>) , Command count = 1364 ] 
10:10:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:10:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1365 ] 
10:10:58: [DVTCommonLib]### Identification :Idenfication of card completed 

10:10:58: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:10:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:10:58: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:10:58: [ SetBusWidth(0x1) , Command count = 1366 ] 
10:10:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:10:58: ####CSD Registe 2.0 Values####
10:10:58: CSD_STRUCTURE                                 :0x1
10:10:58: Reserv1                                       :0x0
10:10:58: Time Access 1 TAAC                            :0xe
10:10:58: Time Access 2 NSAC*100                        :0x0
10:10:58: Data Transfer Rate TRAN_SPEED                 :0x32
10:10:58: Card Command Classess CCC                     :0x5b5
10:10:58: Max Read Data Block Length  READ_BL_LEN       :0x9
10:10:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:10:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:10:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:10:58: DSR(driver stage register)  DSR_IMP           :0x0
10:10:58: Reserv2                                       :0x0
10:10:58: Device Size C_SIZE                            :0xedc8
10:10:58: Reserv3                                       :0x0
10:10:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:10:58: Erase Sector Size SECTOR_SIZE                 :0x7f
10:10:58: Write Protect Group Size WP_GRP_SIZE          :0x0
10:10:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:10:58: Reserv4                                       :0x0
10:10:58: Write Speed Factor R2W_FACTOR                 :0x2
10:10:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:10:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:10:58: FILE_FORMAT_GRP                               :0x0
10:10:58: COPY flag                                     :0x1
10:10:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:10:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:10:58: File_Format                                   :0x0
10:10:58: CRC                                           :0x0
10:10:58: ####CSD Registe Values####  

10:10:58: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:10:58: ProductSerialNumber = 0x23482900
10:10:58: CardMaximumLBA      = 0x3b72400
10:10:58: CardCapacity        = 32G
10:10:58: Is card secure      = 0
10:10:58: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:10:58: [DVTCommonLib]###  LogicalWrite called
10:11:00: [ WriteLba(0x329E2F5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1367 ] 
10:11:00: [DVTCommonLib]###  LogicalWrite Completed 

10:11:00: [DVTCommonLib]###  LogicalRead called
10:11:01: [ ReadLba(0x329E2F5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1368 ] 
10:11:01: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:11:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:11:01: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 141 times 

10:11:01: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:11:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:11:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1369 ] 
10:11:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:11:02: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:11:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:11:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:11:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:11:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:11:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AEA0>, <py_sfcl.CommandDataDefinition object at 0x0663EA80>) , Command count = 1370 ] 
10:11:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:11:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E540>, <py_sfcl.CommandDataDefinition object at 0x0663EBA0>) , Command count = 1371 ] 
10:11:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:11:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1372 ] 
10:11:02: [DVTCommonLib]### Identification :Idenfication of card completed 

10:11:02: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:11:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:11:02: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:11:02: [ SetBusWidth(0x1) , Command count = 1373 ] 
10:11:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:11:02: ####CSD Registe 2.0 Values####
10:11:02: CSD_STRUCTURE                                 :0x1
10:11:02: Reserv1                                       :0x0
10:11:02: Time Access 1 TAAC                            :0xe
10:11:02: Time Access 2 NSAC*100                        :0x0
10:11:02: Data Transfer Rate TRAN_SPEED                 :0x32
10:11:02: Card Command Classess CCC                     :0x5b5
10:11:02: Max Read Data Block Length  READ_BL_LEN       :0x9
10:11:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:11:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:11:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:11:02: DSR(driver stage register)  DSR_IMP           :0x0
10:11:02: Reserv2                                       :0x0
10:11:02: Device Size C_SIZE                            :0xedc8
10:11:02: Reserv3                                       :0x0
10:11:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:11:02: Erase Sector Size SECTOR_SIZE                 :0x7f
10:11:02: Write Protect Group Size WP_GRP_SIZE          :0x0
10:11:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:11:02: Reserv4                                       :0x0
10:11:02: Write Speed Factor R2W_FACTOR                 :0x2
10:11:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:11:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:11:02: FILE_FORMAT_GRP                               :0x0
10:11:02: COPY flag                                     :0x1
10:11:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:11:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:11:02: File_Format                                   :0x0
10:11:02: CRC                                           :0x0
10:11:02: ####CSD Registe Values####  

10:11:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:11:02: ProductSerialNumber = 0x23482900
10:11:02: CardMaximumLBA      = 0x3b72400
10:11:02: CardCapacity        = 32G
10:11:02: Is card secure      = 0
10:11:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:11:02: [DVTCommonLib]###  LogicalWrite called
10:11:03: [ WriteLba(0x1AEC7FF, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1374 ] 
10:11:03: [DVTCommonLib]###  LogicalWrite Completed 

10:11:03: [DVTCommonLib]###  LogicalRead called
10:11:05: [ ReadLba(0x1AEC7FF, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1375 ] 
10:11:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:11:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:11:05: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 142 times 

10:11:05: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:11:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:11:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1376 ] 
10:11:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:11:05: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:11:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:11:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:11:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:11:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:11:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A4E0>, <py_sfcl.CommandDataDefinition object at 0x066B1C90>) , Command count = 1377 ] 
10:11:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:11:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AED0>, <py_sfcl.CommandDataDefinition object at 0x0663EB40>) , Command count = 1378 ] 
10:11:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:11:05: [ SetCardRCA(0x1, 0xD555) , Command count = 1379 ] 
10:11:05: [DVTCommonLib]### Identification :Idenfication of card completed 

10:11:05: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:11:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:11:05: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:11:05: [ SetBusWidth(0x1) , Command count = 1380 ] 
10:11:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:11:05: ####CSD Registe 2.0 Values####
10:11:05: CSD_STRUCTURE                                 :0x1
10:11:05: Reserv1                                       :0x0
10:11:05: Time Access 1 TAAC                            :0xe
10:11:05: Time Access 2 NSAC*100                        :0x0
10:11:05: Data Transfer Rate TRAN_SPEED                 :0x32
10:11:05: Card Command Classess CCC                     :0x5b5
10:11:05: Max Read Data Block Length  READ_BL_LEN       :0x9
10:11:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:11:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:11:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:11:05: DSR(driver stage register)  DSR_IMP           :0x0
10:11:05: Reserv2                                       :0x0
10:11:05: Device Size C_SIZE                            :0xedc8
10:11:05: Reserv3                                       :0x0
10:11:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:11:05: Erase Sector Size SECTOR_SIZE                 :0x7f
10:11:05: Write Protect Group Size WP_GRP_SIZE          :0x0
10:11:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:11:05: Reserv4                                       :0x0
10:11:05: Write Speed Factor R2W_FACTOR                 :0x2
10:11:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:11:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:11:05: FILE_FORMAT_GRP                               :0x0
10:11:05: COPY flag                                     :0x1
10:11:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:11:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:11:05: File_Format                                   :0x0
10:11:05: CRC                                           :0x0
10:11:05: ####CSD Registe Values####  

10:11:05: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:11:05: ProductSerialNumber = 0x23482900
10:11:05: CardMaximumLBA      = 0x3b72400
10:11:05: CardCapacity        = 32G
10:11:05: Is card secure      = 0
10:11:05: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:11:05: [DVTCommonLib]###  LogicalWrite called
10:11:07: [ WriteLba(0x1DC476B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1381 ] 
10:11:07: [DVTCommonLib]###  LogicalWrite Completed 

10:11:07: [DVTCommonLib]###  LogicalRead called
10:11:08: [ ReadLba(0x1DC476B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1382 ] 
10:11:08: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:11:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:11:08: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 143 times 

10:11:08: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:11:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:11:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1383 ] 
10:11:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:11:08: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:11:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:11:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:11:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:11:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:11:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663ADB0>, <py_sfcl.CommandDataDefinition object at 0x0663AD80>) , Command count = 1384 ] 
10:11:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:11:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661DC00>, <py_sfcl.CommandDataDefinition object at 0x0663EB40>) , Command count = 1385 ] 
10:11:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:11:08: [ SetCardRCA(0x1, 0xD555) , Command count = 1386 ] 
10:11:08: [DVTCommonLib]### Identification :Idenfication of card completed 

10:11:08: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:11:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:11:08: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:11:08: [ SetBusWidth(0x1) , Command count = 1387 ] 
10:11:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:11:08: ####CSD Registe 2.0 Values####
10:11:08: CSD_STRUCTURE                                 :0x1
10:11:08: Reserv1                                       :0x0
10:11:08: Time Access 1 TAAC                            :0xe
10:11:08: Time Access 2 NSAC*100                        :0x0
10:11:08: Data Transfer Rate TRAN_SPEED                 :0x32
10:11:08: Card Command Classess CCC                     :0x5b5
10:11:08: Max Read Data Block Length  READ_BL_LEN       :0x9
10:11:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:11:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:11:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:11:08: DSR(driver stage register)  DSR_IMP           :0x0
10:11:08: Reserv2                                       :0x0
10:11:08: Device Size C_SIZE                            :0xedc8
10:11:08: Reserv3                                       :0x0
10:11:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:11:08: Erase Sector Size SECTOR_SIZE                 :0x7f
10:11:08: Write Protect Group Size WP_GRP_SIZE          :0x0
10:11:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:11:08: Reserv4                                       :0x0
10:11:08: Write Speed Factor R2W_FACTOR                 :0x2
10:11:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:11:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:11:08: FILE_FORMAT_GRP                               :0x0
10:11:08: COPY flag                                     :0x1
10:11:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:11:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:11:08: File_Format                                   :0x0
10:11:08: CRC                                           :0x0
10:11:08: ####CSD Registe Values####  

10:11:08: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:11:08: ProductSerialNumber = 0x23482900
10:11:08: CardMaximumLBA      = 0x3b72400
10:11:08: CardCapacity        = 32G
10:11:08: Is card secure      = 0
10:11:08: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:11:08: [DVTCommonLib]###  LogicalWrite called
10:11:10: [ WriteLba(0x1B0A675, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1388 ] 
10:11:10: [DVTCommonLib]###  LogicalWrite Completed 

10:11:10: [DVTCommonLib]###  LogicalRead called
10:11:12: [ ReadLba(0x1B0A675, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1389 ] 
10:11:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:11:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:11:12: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 144 times 

10:11:12: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:11:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:11:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1390 ] 
10:11:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:11:12: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:11:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:11:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:11:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:11:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:11:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AF00>, <py_sfcl.CommandDataDefinition object at 0x0663E660>) , Command count = 1391 ] 
10:11:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:11:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B18A0>, <py_sfcl.CommandDataDefinition object at 0x066B1840>) , Command count = 1392 ] 
10:11:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:11:12: [ SetCardRCA(0x1, 0xD555) , Command count = 1393 ] 
10:11:12: [DVTCommonLib]### Identification :Idenfication of card completed 

10:11:12: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:11:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:11:12: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:11:12: [ SetBusWidth(0x1) , Command count = 1394 ] 
10:11:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:11:12: ####CSD Registe 2.0 Values####
10:11:12: CSD_STRUCTURE                                 :0x1
10:11:12: Reserv1                                       :0x0
10:11:12: Time Access 1 TAAC                            :0xe
10:11:12: Time Access 2 NSAC*100                        :0x0
10:11:12: Data Transfer Rate TRAN_SPEED                 :0x32
10:11:12: Card Command Classess CCC                     :0x5b5
10:11:12: Max Read Data Block Length  READ_BL_LEN       :0x9
10:11:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:11:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:11:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:11:12: DSR(driver stage register)  DSR_IMP           :0x0
10:11:12: Reserv2                                       :0x0
10:11:12: Device Size C_SIZE                            :0xedc8
10:11:12: Reserv3                                       :0x0
10:11:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:11:12: Erase Sector Size SECTOR_SIZE                 :0x7f
10:11:12: Write Protect Group Size WP_GRP_SIZE          :0x0
10:11:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:11:12: Reserv4                                       :0x0
10:11:12: Write Speed Factor R2W_FACTOR                 :0x2
10:11:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:11:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:11:12: FILE_FORMAT_GRP                               :0x0
10:11:12: COPY flag                                     :0x1
10:11:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:11:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:11:12: File_Format                                   :0x0
10:11:12: CRC                                           :0x0
10:11:12: ####CSD Registe Values####  

10:11:12: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:11:12: ProductSerialNumber = 0x23482900
10:11:12: CardMaximumLBA      = 0x3b72400
10:11:12: CardCapacity        = 32G
10:11:12: Is card secure      = 0
10:11:12: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:11:12: [DVTCommonLib]###  LogicalWrite called
10:11:14: [ WriteLba(0x335CF44, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1395 ] 
10:11:14: [DVTCommonLib]###  LogicalWrite Completed 

10:11:14: [DVTCommonLib]###  LogicalRead called
10:11:15: [ ReadLba(0x335CF44, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1396 ] 
10:11:15: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:11:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:11:15: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 145 times 

10:11:15: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:11:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:11:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1397 ] 
10:11:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:11:15: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:11:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:11:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:11:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:11:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:11:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663EE70>, <py_sfcl.CommandDataDefinition object at 0x0661DBA0>) , Command count = 1398 ] 
10:11:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:11:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1600>, <py_sfcl.CommandDataDefinition object at 0x066B1A20>) , Command count = 1399 ] 
10:11:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:11:15: [ SetCardRCA(0x1, 0xD555) , Command count = 1400 ] 
10:11:15: [DVTCommonLib]### Identification :Idenfication of card completed 

10:11:15: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:11:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:11:15: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:11:15: [ SetBusWidth(0x1) , Command count = 1401 ] 
10:11:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:11:15: ####CSD Registe 2.0 Values####
10:11:15: CSD_STRUCTURE                                 :0x1
10:11:15: Reserv1                                       :0x0
10:11:15: Time Access 1 TAAC                            :0xe
10:11:15: Time Access 2 NSAC*100                        :0x0
10:11:15: Data Transfer Rate TRAN_SPEED                 :0x32
10:11:15: Card Command Classess CCC                     :0x5b5
10:11:15: Max Read Data Block Length  READ_BL_LEN       :0x9
10:11:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:11:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:11:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:11:15: DSR(driver stage register)  DSR_IMP           :0x0
10:11:15: Reserv2                                       :0x0
10:11:15: Device Size C_SIZE                            :0xedc8
10:11:15: Reserv3                                       :0x0
10:11:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:11:15: Erase Sector Size SECTOR_SIZE                 :0x7f
10:11:15: Write Protect Group Size WP_GRP_SIZE          :0x0
10:11:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:11:15: Reserv4                                       :0x0
10:11:15: Write Speed Factor R2W_FACTOR                 :0x2
10:11:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:11:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:11:15: FILE_FORMAT_GRP                               :0x0
10:11:15: COPY flag                                     :0x1
10:11:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:11:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:11:15: File_Format                                   :0x0
10:11:15: CRC                                           :0x0
10:11:15: ####CSD Registe Values####  

10:11:15: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:11:15: ProductSerialNumber = 0x23482900
10:11:15: CardMaximumLBA      = 0x3b72400
10:11:15: CardCapacity        = 32G
10:11:15: Is card secure      = 0
10:11:15: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:11:15: [DVTCommonLib]###  LogicalWrite called
10:11:17: [ WriteLba(0x26AF6B7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1402 ] 
10:11:17: [DVTCommonLib]###  LogicalWrite Completed 

10:11:17: [DVTCommonLib]###  LogicalRead called
10:11:19: [ ReadLba(0x26AF6B7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1403 ] 
10:11:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:11:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:11:19: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 146 times 

10:11:19: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:11:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:11:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1404 ] 
10:11:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:11:19: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:11:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:11:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:11:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:11:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:11:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B17E0>, <py_sfcl.CommandDataDefinition object at 0x066B18D0>) , Command count = 1405 ] 
10:11:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:11:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DD20>, <py_sfcl.CommandDataDefinition object at 0x066B14B0>) , Command count = 1406 ] 
10:11:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:11:19: [ SetCardRCA(0x1, 0xD555) , Command count = 1407 ] 
10:11:19: [DVTCommonLib]### Identification :Idenfication of card completed 

10:11:19: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:11:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:11:19: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:11:19: [ SetBusWidth(0x1) , Command count = 1408 ] 
10:11:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:11:19: ####CSD Registe 2.0 Values####
10:11:19: CSD_STRUCTURE                                 :0x1
10:11:19: Reserv1                                       :0x0
10:11:19: Time Access 1 TAAC                            :0xe
10:11:19: Time Access 2 NSAC*100                        :0x0
10:11:19: Data Transfer Rate TRAN_SPEED                 :0x32
10:11:19: Card Command Classess CCC                     :0x5b5
10:11:19: Max Read Data Block Length  READ_BL_LEN       :0x9
10:11:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:11:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:11:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:11:19: DSR(driver stage register)  DSR_IMP           :0x0
10:11:19: Reserv2                                       :0x0
10:11:19: Device Size C_SIZE                            :0xedc8
10:11:19: Reserv3                                       :0x0
10:11:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:11:19: Erase Sector Size SECTOR_SIZE                 :0x7f
10:11:19: Write Protect Group Size WP_GRP_SIZE          :0x0
10:11:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:11:19: Reserv4                                       :0x0
10:11:19: Write Speed Factor R2W_FACTOR                 :0x2
10:11:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:11:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:11:19: FILE_FORMAT_GRP                               :0x0
10:11:19: COPY flag                                     :0x1
10:11:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:11:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:11:19: File_Format                                   :0x0
10:11:19: CRC                                           :0x0
10:11:19: ####CSD Registe Values####  

10:11:19: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:11:19: ProductSerialNumber = 0x23482900
10:11:19: CardMaximumLBA      = 0x3b72400
10:11:19: CardCapacity        = 32G
10:11:19: Is card secure      = 0
10:11:19: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:11:19: [DVTCommonLib]###  LogicalWrite called
10:11:20: [ WriteLba(0x2807B18, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1409 ] 
10:11:20: [DVTCommonLib]###  LogicalWrite Completed 

10:11:20: [DVTCommonLib]###  LogicalRead called
10:11:22: [ ReadLba(0x2807B18, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1410 ] 
10:11:22: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:11:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:11:22: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 147 times 

10:11:22: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:11:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:11:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1411 ] 
10:11:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:11:22: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:11:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:11:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:11:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:11:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:11:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663ECC0>, <py_sfcl.CommandDataDefinition object at 0x066B1540>) , Command count = 1412 ] 
10:11:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:11:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1360>, <py_sfcl.CommandDataDefinition object at 0x066B13C0>) , Command count = 1413 ] 
10:11:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:11:22: [ SetCardRCA(0x1, 0xD555) , Command count = 1414 ] 
10:11:22: [DVTCommonLib]### Identification :Idenfication of card completed 

10:11:22: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:11:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:11:22: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:11:22: [ SetBusWidth(0x1) , Command count = 1415 ] 
10:11:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:11:22: ####CSD Registe 2.0 Values####
10:11:22: CSD_STRUCTURE                                 :0x1
10:11:22: Reserv1                                       :0x0
10:11:22: Time Access 1 TAAC                            :0xe
10:11:22: Time Access 2 NSAC*100                        :0x0
10:11:22: Data Transfer Rate TRAN_SPEED                 :0x32
10:11:22: Card Command Classess CCC                     :0x5b5
10:11:22: Max Read Data Block Length  READ_BL_LEN       :0x9
10:11:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:11:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:11:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:11:22: DSR(driver stage register)  DSR_IMP           :0x0
10:11:22: Reserv2                                       :0x0
10:11:22: Device Size C_SIZE                            :0xedc8
10:11:22: Reserv3                                       :0x0
10:11:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:11:22: Erase Sector Size SECTOR_SIZE                 :0x7f
10:11:22: Write Protect Group Size WP_GRP_SIZE          :0x0
10:11:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:11:22: Reserv4                                       :0x0
10:11:22: Write Speed Factor R2W_FACTOR                 :0x2
10:11:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:11:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:11:22: FILE_FORMAT_GRP                               :0x0
10:11:22: COPY flag                                     :0x1
10:11:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:11:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:11:22: File_Format                                   :0x0
10:11:22: CRC                                           :0x0
10:11:22: ####CSD Registe Values####  

10:11:22: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:11:22: ProductSerialNumber = 0x23482900
10:11:22: CardMaximumLBA      = 0x3b72400
10:11:22: CardCapacity        = 32G
10:11:22: Is card secure      = 0
10:11:22: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:11:22: [DVTCommonLib]###  LogicalWrite called
10:11:24: [ WriteLba(0xA40C74, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1416 ] 
10:11:24: [DVTCommonLib]###  LogicalWrite Completed 

10:11:24: [DVTCommonLib]###  LogicalRead called
10:11:25: [ ReadLba(0xA40C74, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1417 ] 
10:11:25: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:11:25: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:11:25: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 148 times 

10:11:25: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:11:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:11:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1418 ] 
10:11:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:11:25: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:11:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:11:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:11:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:11:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663ED80>, <py_sfcl.CommandDataDefinition object at 0x066AEED0>) , Command count = 1419 ] 
10:11:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEC30>, <py_sfcl.CommandDataDefinition object at 0x066B1270>) , Command count = 1420 ] 
10:11:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:11:25: [ SetCardRCA(0x1, 0xD555) , Command count = 1421 ] 
10:11:26: [DVTCommonLib]### Identification :Idenfication of card completed 

10:11:26: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:11:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:11:26: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:11:26: [ SetBusWidth(0x1) , Command count = 1422 ] 
10:11:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:11:26: ####CSD Registe 2.0 Values####
10:11:26: CSD_STRUCTURE                                 :0x1
10:11:26: Reserv1                                       :0x0
10:11:26: Time Access 1 TAAC                            :0xe
10:11:26: Time Access 2 NSAC*100                        :0x0
10:11:26: Data Transfer Rate TRAN_SPEED                 :0x32
10:11:26: Card Command Classess CCC                     :0x5b5
10:11:26: Max Read Data Block Length  READ_BL_LEN       :0x9
10:11:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:11:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:11:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:11:26: DSR(driver stage register)  DSR_IMP           :0x0
10:11:26: Reserv2                                       :0x0
10:11:26: Device Size C_SIZE                            :0xedc8
10:11:26: Reserv3                                       :0x0
10:11:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:11:26: Erase Sector Size SECTOR_SIZE                 :0x7f
10:11:26: Write Protect Group Size WP_GRP_SIZE          :0x0
10:11:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:11:26: Reserv4                                       :0x0
10:11:26: Write Speed Factor R2W_FACTOR                 :0x2
10:11:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:11:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:11:26: FILE_FORMAT_GRP                               :0x0
10:11:26: COPY flag                                     :0x1
10:11:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:11:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:11:26: File_Format                                   :0x0
10:11:26: CRC                                           :0x0
10:11:26: ####CSD Registe Values####  

10:11:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:11:26: ProductSerialNumber = 0x23482900
10:11:26: CardMaximumLBA      = 0x3b72400
10:11:26: CardCapacity        = 32G
10:11:26: Is card secure      = 0
10:11:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:11:26: [DVTCommonLib]###  LogicalWrite called
10:11:27: [ WriteLba(0x2D07B5A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1423 ] 
10:11:27: [DVTCommonLib]###  LogicalWrite Completed 

10:11:27: [DVTCommonLib]###  LogicalRead called
10:11:29: [ ReadLba(0x2D07B5A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1424 ] 
10:11:29: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:11:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:11:29: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 149 times 

10:11:29: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:11:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:11:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1425 ] 
10:11:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:11:29: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:11:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:11:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:11:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:11:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:11:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1330>, <py_sfcl.CommandDataDefinition object at 0x066AEEA0>) , Command count = 1426 ] 
10:11:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:11:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE900>, <py_sfcl.CommandDataDefinition object at 0x066AEFC0>) , Command count = 1427 ] 
10:11:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:11:29: [ SetCardRCA(0x1, 0xD555) , Command count = 1428 ] 
10:11:29: [DVTCommonLib]### Identification :Idenfication of card completed 

10:11:29: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:11:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:11:29: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:11:29: [ SetBusWidth(0x1) , Command count = 1429 ] 
10:11:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:11:29: ####CSD Registe 2.0 Values####
10:11:29: CSD_STRUCTURE                                 :0x1
10:11:29: Reserv1                                       :0x0
10:11:29: Time Access 1 TAAC                            :0xe
10:11:29: Time Access 2 NSAC*100                        :0x0
10:11:29: Data Transfer Rate TRAN_SPEED                 :0x32
10:11:29: Card Command Classess CCC                     :0x5b5
10:11:29: Max Read Data Block Length  READ_BL_LEN       :0x9
10:11:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:11:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:11:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:11:29: DSR(driver stage register)  DSR_IMP           :0x0
10:11:29: Reserv2                                       :0x0
10:11:29: Device Size C_SIZE                            :0xedc8
10:11:29: Reserv3                                       :0x0
10:11:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:11:29: Erase Sector Size SECTOR_SIZE                 :0x7f
10:11:29: Write Protect Group Size WP_GRP_SIZE          :0x0
10:11:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:11:29: Reserv4                                       :0x0
10:11:29: Write Speed Factor R2W_FACTOR                 :0x2
10:11:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:11:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:11:29: FILE_FORMAT_GRP                               :0x0
10:11:29: COPY flag                                     :0x1
10:11:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:11:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:11:29: File_Format                                   :0x0
10:11:29: CRC                                           :0x0
10:11:29: ####CSD Registe Values####  

10:11:29: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:11:29: ProductSerialNumber = 0x23482900
10:11:29: CardMaximumLBA      = 0x3b72400
10:11:29: CardCapacity        = 32G
10:11:29: Is card secure      = 0
10:11:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:11:29: [DVTCommonLib]###  LogicalWrite called
10:11:31: [ WriteLba(0x1AD3F98, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1430 ] 
10:11:31: [DVTCommonLib]###  LogicalWrite Completed 

10:11:31: [DVTCommonLib]###  LogicalRead called
10:11:32: [ ReadLba(0x1AD3F98, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1431 ] 
10:11:32: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:11:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:11:32: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 150 times 

10:11:32: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:11:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:11:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1432 ] 
10:11:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:11:32: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:11:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:11:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:11:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:11:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:11:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6420>, <py_sfcl.CommandDataDefinition object at 0x066AEA20>) , Command count = 1433 ] 
10:11:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:11:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE3C0>, <py_sfcl.CommandDataDefinition object at 0x066AE990>) , Command count = 1434 ] 
10:11:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:11:32: [ SetCardRCA(0x1, 0xD555) , Command count = 1435 ] 
10:11:32: [DVTCommonLib]### Identification :Idenfication of card completed 

10:11:32: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:11:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:11:32: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:11:32: [ SetBusWidth(0x1) , Command count = 1436 ] 
10:11:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:11:32: ####CSD Registe 2.0 Values####
10:11:32: CSD_STRUCTURE                                 :0x1
10:11:32: Reserv1                                       :0x0
10:11:32: Time Access 1 TAAC                            :0xe
10:11:32: Time Access 2 NSAC*100                        :0x0
10:11:32: Data Transfer Rate TRAN_SPEED                 :0x32
10:11:32: Card Command Classess CCC                     :0x5b5
10:11:32: Max Read Data Block Length  READ_BL_LEN       :0x9
10:11:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:11:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:11:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:11:32: DSR(driver stage register)  DSR_IMP           :0x0
10:11:32: Reserv2                                       :0x0
10:11:32: Device Size C_SIZE                            :0xedc8
10:11:32: Reserv3                                       :0x0
10:11:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:11:32: Erase Sector Size SECTOR_SIZE                 :0x7f
10:11:32: Write Protect Group Size WP_GRP_SIZE          :0x0
10:11:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:11:32: Reserv4                                       :0x0
10:11:32: Write Speed Factor R2W_FACTOR                 :0x2
10:11:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:11:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:11:32: FILE_FORMAT_GRP                               :0x0
10:11:32: COPY flag                                     :0x1
10:11:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:11:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:11:32: File_Format                                   :0x0
10:11:32: CRC                                           :0x0
10:11:32: ####CSD Registe Values####  

10:11:32: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:11:32: ProductSerialNumber = 0x23482900
10:11:32: CardMaximumLBA      = 0x3b72400
10:11:32: CardCapacity        = 32G
10:11:32: Is card secure      = 0
10:11:32: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:11:32: [DVTCommonLib]###  LogicalWrite called
10:11:34: [ WriteLba(0x3739A59, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1437 ] 
10:11:34: [DVTCommonLib]###  LogicalWrite Completed 

10:11:34: [DVTCommonLib]###  LogicalRead called
10:11:36: [ ReadLba(0x3739A59, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1438 ] 
10:11:36: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:11:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:11:36: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 151 times 

10:11:36: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:11:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:11:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1439 ] 
10:11:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:11:36: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:11:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:11:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:11:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:11:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:11:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE4E0>, <py_sfcl.CommandDataDefinition object at 0x066AE630>) , Command count = 1440 ] 
10:11:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:11:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6E10>, <py_sfcl.CommandDataDefinition object at 0x066A6F30>) , Command count = 1441 ] 
10:11:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:11:36: [ SetCardRCA(0x1, 0xD555) , Command count = 1442 ] 
10:11:36: [DVTCommonLib]### Identification :Idenfication of card completed 

10:11:36: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:11:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:11:36: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:11:36: [ SetBusWidth(0x1) , Command count = 1443 ] 
10:11:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:11:36: ####CSD Registe 2.0 Values####
10:11:36: CSD_STRUCTURE                                 :0x1
10:11:36: Reserv1                                       :0x0
10:11:36: Time Access 1 TAAC                            :0xe
10:11:36: Time Access 2 NSAC*100                        :0x0
10:11:36: Data Transfer Rate TRAN_SPEED                 :0x32
10:11:36: Card Command Classess CCC                     :0x5b5
10:11:36: Max Read Data Block Length  READ_BL_LEN       :0x9
10:11:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:11:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:11:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:11:36: DSR(driver stage register)  DSR_IMP           :0x0
10:11:36: Reserv2                                       :0x0
10:11:36: Device Size C_SIZE                            :0xedc8
10:11:36: Reserv3                                       :0x0
10:11:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:11:36: Erase Sector Size SECTOR_SIZE                 :0x7f
10:11:36: Write Protect Group Size WP_GRP_SIZE          :0x0
10:11:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:11:36: Reserv4                                       :0x0
10:11:36: Write Speed Factor R2W_FACTOR                 :0x2
10:11:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:11:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:11:36: FILE_FORMAT_GRP                               :0x0
10:11:36: COPY flag                                     :0x1
10:11:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:11:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:11:36: File_Format                                   :0x0
10:11:36: CRC                                           :0x0
10:11:36: ####CSD Registe Values####  

10:11:36: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:11:36: ProductSerialNumber = 0x23482900
10:11:36: CardMaximumLBA      = 0x3b72400
10:11:36: CardCapacity        = 32G
10:11:36: Is card secure      = 0
10:11:36: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:11:36: [DVTCommonLib]###  LogicalWrite called
10:11:37: [ WriteLba(0x35BE2C3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1444 ] 
10:11:37: [DVTCommonLib]###  LogicalWrite Completed 

10:11:37: [DVTCommonLib]###  LogicalRead called
10:11:39: [ ReadLba(0x35BE2C3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1445 ] 
10:11:39: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:11:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:11:39: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 152 times 

10:11:39: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:11:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:11:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1446 ] 
10:11:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:11:39: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:11:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:11:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:11:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:11:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE330>, <py_sfcl.CommandDataDefinition object at 0x066AE510>) , Command count = 1447 ] 
10:11:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:11:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6A20>, <py_sfcl.CommandDataDefinition object at 0x066A6960>) , Command count = 1448 ] 
10:11:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:11:39: [ SetCardRCA(0x1, 0xD555) , Command count = 1449 ] 
10:11:39: [DVTCommonLib]### Identification :Idenfication of card completed 

10:11:39: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:11:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:11:39: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:11:39: [ SetBusWidth(0x1) , Command count = 1450 ] 
10:11:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:11:39: ####CSD Registe 2.0 Values####
10:11:39: CSD_STRUCTURE                                 :0x1
10:11:39: Reserv1                                       :0x0
10:11:39: Time Access 1 TAAC                            :0xe
10:11:39: Time Access 2 NSAC*100                        :0x0
10:11:39: Data Transfer Rate TRAN_SPEED                 :0x32
10:11:39: Card Command Classess CCC                     :0x5b5
10:11:39: Max Read Data Block Length  READ_BL_LEN       :0x9
10:11:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:11:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:11:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:11:39: DSR(driver stage register)  DSR_IMP           :0x0
10:11:39: Reserv2                                       :0x0
10:11:39: Device Size C_SIZE                            :0xedc8
10:11:39: Reserv3                                       :0x0
10:11:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:11:39: Erase Sector Size SECTOR_SIZE                 :0x7f
10:11:39: Write Protect Group Size WP_GRP_SIZE          :0x0
10:11:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:11:39: Reserv4                                       :0x0
10:11:39: Write Speed Factor R2W_FACTOR                 :0x2
10:11:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:11:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:11:39: FILE_FORMAT_GRP                               :0x0
10:11:39: COPY flag                                     :0x1
10:11:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:11:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:11:39: File_Format                                   :0x0
10:11:39: CRC                                           :0x0
10:11:39: ####CSD Registe Values####  

10:11:39: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:11:39: ProductSerialNumber = 0x23482900
10:11:39: CardMaximumLBA      = 0x3b72400
10:11:39: CardCapacity        = 32G
10:11:39: Is card secure      = 0
10:11:39: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:11:39: [DVTCommonLib]###  LogicalWrite called
10:11:41: [ WriteLba(0x1A450F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1451 ] 
10:11:41: [DVTCommonLib]###  LogicalWrite Completed 

10:11:41: [DVTCommonLib]###  LogicalRead called
10:11:42: [ ReadLba(0x1A450F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1452 ] 
10:11:42: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:11:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:11:42: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 153 times 

10:11:42: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:11:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:11:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1453 ] 
10:11:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:11:43: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:11:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:11:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:11:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:11:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:11:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6A50>, <py_sfcl.CommandDataDefinition object at 0x066A6BD0>) , Command count = 1454 ] 
10:11:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:11:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A63C0>, <py_sfcl.CommandDataDefinition object at 0x066A6210>) , Command count = 1455 ] 
10:11:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:11:43: [ SetCardRCA(0x1, 0xD555) , Command count = 1456 ] 
10:11:43: [DVTCommonLib]### Identification :Idenfication of card completed 

10:11:43: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:11:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:11:43: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:11:43: [ SetBusWidth(0x1) , Command count = 1457 ] 
10:11:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:11:43: ####CSD Registe 2.0 Values####
10:11:43: CSD_STRUCTURE                                 :0x1
10:11:43: Reserv1                                       :0x0
10:11:43: Time Access 1 TAAC                            :0xe
10:11:43: Time Access 2 NSAC*100                        :0x0
10:11:43: Data Transfer Rate TRAN_SPEED                 :0x32
10:11:43: Card Command Classess CCC                     :0x5b5
10:11:43: Max Read Data Block Length  READ_BL_LEN       :0x9
10:11:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:11:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:11:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:11:43: DSR(driver stage register)  DSR_IMP           :0x0
10:11:43: Reserv2                                       :0x0
10:11:43: Device Size C_SIZE                            :0xedc8
10:11:43: Reserv3                                       :0x0
10:11:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:11:43: Erase Sector Size SECTOR_SIZE                 :0x7f
10:11:43: Write Protect Group Size WP_GRP_SIZE          :0x0
10:11:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:11:43: Reserv4                                       :0x0
10:11:43: Write Speed Factor R2W_FACTOR                 :0x2
10:11:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:11:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:11:43: FILE_FORMAT_GRP                               :0x0
10:11:43: COPY flag                                     :0x1
10:11:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:11:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:11:43: File_Format                                   :0x0
10:11:43: CRC                                           :0x0
10:11:43: ####CSD Registe Values####  

10:11:43: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:11:43: ProductSerialNumber = 0x23482900
10:11:43: CardMaximumLBA      = 0x3b72400
10:11:43: CardCapacity        = 32G
10:11:43: Is card secure      = 0
10:11:43: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:11:43: [DVTCommonLib]###  LogicalWrite called
10:11:44: [ WriteLba(0xC0FDB2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1458 ] 
10:11:44: [DVTCommonLib]###  LogicalWrite Completed 

10:11:44: [DVTCommonLib]###  LogicalRead called
10:11:46: [ ReadLba(0xC0FDB2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1459 ] 
10:11:46: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:11:46: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:11:46: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 154 times 

10:11:46: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:11:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:11:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1460 ] 
10:11:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:11:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:11:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:11:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:11:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:11:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:11:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A67E0>, <py_sfcl.CommandDataDefinition object at 0x066A6120>) , Command count = 1461 ] 
10:11:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:11:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6150>, <py_sfcl.CommandDataDefinition object at 0x066A61B0>) , Command count = 1462 ] 
10:11:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:11:46: [ SetCardRCA(0x1, 0xD555) , Command count = 1463 ] 
10:11:46: [DVTCommonLib]### Identification :Idenfication of card completed 

10:11:46: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:11:46: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:11:46: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:11:46: [ SetBusWidth(0x1) , Command count = 1464 ] 
10:11:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:11:46: ####CSD Registe 2.0 Values####
10:11:46: CSD_STRUCTURE                                 :0x1
10:11:46: Reserv1                                       :0x0
10:11:46: Time Access 1 TAAC                            :0xe
10:11:46: Time Access 2 NSAC*100                        :0x0
10:11:46: Data Transfer Rate TRAN_SPEED                 :0x32
10:11:46: Card Command Classess CCC                     :0x5b5
10:11:46: Max Read Data Block Length  READ_BL_LEN       :0x9
10:11:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:11:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:11:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:11:46: DSR(driver stage register)  DSR_IMP           :0x0
10:11:46: Reserv2                                       :0x0
10:11:46: Device Size C_SIZE                            :0xedc8
10:11:46: Reserv3                                       :0x0
10:11:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:11:46: Erase Sector Size SECTOR_SIZE                 :0x7f
10:11:46: Write Protect Group Size WP_GRP_SIZE          :0x0
10:11:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:11:46: Reserv4                                       :0x0
10:11:46: Write Speed Factor R2W_FACTOR                 :0x2
10:11:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:11:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:11:46: FILE_FORMAT_GRP                               :0x0
10:11:46: COPY flag                                     :0x1
10:11:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:11:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:11:46: File_Format                                   :0x0
10:11:46: CRC                                           :0x0
10:11:46: ####CSD Registe Values####  

10:11:46: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:11:46: ProductSerialNumber = 0x23482900
10:11:46: CardMaximumLBA      = 0x3b72400
10:11:46: CardCapacity        = 32G
10:11:46: Is card secure      = 0
10:11:46: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:11:46: [DVTCommonLib]###  LogicalWrite called
10:11:48: [ WriteLba(0x29CF10D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1465 ] 
10:11:48: [DVTCommonLib]###  LogicalWrite Completed 

10:11:48: [DVTCommonLib]###  LogicalRead called
10:11:49: [ ReadLba(0x29CF10D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1466 ] 
10:11:49: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:11:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:11:49: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 155 times 

10:11:49: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:11:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:11:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1467 ] 
10:11:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:11:49: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:11:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:11:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:11:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:11:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:11:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663ACF0>, <py_sfcl.CommandDataDefinition object at 0x066A64E0>) , Command count = 1468 ] 
10:11:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:11:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E0F0>, <py_sfcl.CommandDataDefinition object at 0x066A6540>) , Command count = 1469 ] 
10:11:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:11:49: [ SetCardRCA(0x1, 0xD555) , Command count = 1470 ] 
10:11:49: [DVTCommonLib]### Identification :Idenfication of card completed 

10:11:49: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:11:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:11:49: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:11:49: [ SetBusWidth(0x1) , Command count = 1471 ] 
10:11:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:11:49: ####CSD Registe 2.0 Values####
10:11:49: CSD_STRUCTURE                                 :0x1
10:11:49: Reserv1                                       :0x0
10:11:49: Time Access 1 TAAC                            :0xe
10:11:49: Time Access 2 NSAC*100                        :0x0
10:11:49: Data Transfer Rate TRAN_SPEED                 :0x32
10:11:49: Card Command Classess CCC                     :0x5b5
10:11:49: Max Read Data Block Length  READ_BL_LEN       :0x9
10:11:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:11:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:11:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:11:49: DSR(driver stage register)  DSR_IMP           :0x0
10:11:49: Reserv2                                       :0x0
10:11:49: Device Size C_SIZE                            :0xedc8
10:11:49: Reserv3                                       :0x0
10:11:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:11:49: Erase Sector Size SECTOR_SIZE                 :0x7f
10:11:49: Write Protect Group Size WP_GRP_SIZE          :0x0
10:11:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:11:49: Reserv4                                       :0x0
10:11:49: Write Speed Factor R2W_FACTOR                 :0x2
10:11:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:11:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:11:49: FILE_FORMAT_GRP                               :0x0
10:11:49: COPY flag                                     :0x1
10:11:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:11:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:11:49: File_Format                                   :0x0
10:11:49: CRC                                           :0x0
10:11:49: ####CSD Registe Values####  

10:11:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:11:49: ProductSerialNumber = 0x23482900
10:11:49: CardMaximumLBA      = 0x3b72400
10:11:49: CardCapacity        = 32G
10:11:49: Is card secure      = 0
10:11:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:11:49: [DVTCommonLib]###  LogicalWrite called
10:11:51: [ WriteLba(0x2E8BFC3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1472 ] 
10:11:51: [DVTCommonLib]###  LogicalWrite Completed 

10:11:51: [DVTCommonLib]###  LogicalRead called
10:11:53: [ ReadLba(0x2E8BFC3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1473 ] 
10:11:53: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:11:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:11:53: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 156 times 

10:11:53: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:11:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:11:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1474 ] 
10:11:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:11:53: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:11:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:11:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:11:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:11:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:11:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6660>, <py_sfcl.CommandDataDefinition object at 0x066A6090>) , Command count = 1475 ] 
10:11:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:11:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A65D0>, <py_sfcl.CommandDataDefinition object at 0x066A6780>) , Command count = 1476 ] 
10:11:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:11:53: [ SetCardRCA(0x1, 0xD555) , Command count = 1477 ] 
10:11:53: [DVTCommonLib]### Identification :Idenfication of card completed 

10:11:53: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:11:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:11:53: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:11:53: [ SetBusWidth(0x1) , Command count = 1478 ] 
10:11:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:11:53: ####CSD Registe 2.0 Values####
10:11:53: CSD_STRUCTURE                                 :0x1
10:11:53: Reserv1                                       :0x0
10:11:53: Time Access 1 TAAC                            :0xe
10:11:53: Time Access 2 NSAC*100                        :0x0
10:11:53: Data Transfer Rate TRAN_SPEED                 :0x32
10:11:53: Card Command Classess CCC                     :0x5b5
10:11:53: Max Read Data Block Length  READ_BL_LEN       :0x9
10:11:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:11:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:11:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:11:53: DSR(driver stage register)  DSR_IMP           :0x0
10:11:53: Reserv2                                       :0x0
10:11:53: Device Size C_SIZE                            :0xedc8
10:11:53: Reserv3                                       :0x0
10:11:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:11:53: Erase Sector Size SECTOR_SIZE                 :0x7f
10:11:53: Write Protect Group Size WP_GRP_SIZE          :0x0
10:11:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:11:53: Reserv4                                       :0x0
10:11:53: Write Speed Factor R2W_FACTOR                 :0x2
10:11:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:11:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:11:53: FILE_FORMAT_GRP                               :0x0
10:11:53: COPY flag                                     :0x1
10:11:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:11:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:11:53: File_Format                                   :0x0
10:11:53: CRC                                           :0x0
10:11:53: ####CSD Registe Values####  

10:11:53: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:11:53: ProductSerialNumber = 0x23482900
10:11:53: CardMaximumLBA      = 0x3b72400
10:11:53: CardCapacity        = 32G
10:11:53: Is card secure      = 0
10:11:53: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:11:53: [DVTCommonLib]###  LogicalWrite called
10:11:55: [ WriteLba(0x53322, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1479 ] 
10:11:55: [DVTCommonLib]###  LogicalWrite Completed 

10:11:55: [DVTCommonLib]###  LogicalRead called
10:11:56: [ ReadLba(0x53322, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1480 ] 
10:11:56: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:11:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:11:56: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 157 times 

10:11:56: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:11:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:11:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1481 ] 
10:11:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:11:56: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:11:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:11:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:11:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:11:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:11:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6300>, <py_sfcl.CommandDataDefinition object at 0x066A69C0>) , Command count = 1482 ] 
10:11:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:11:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E360>, <py_sfcl.CommandDataDefinition object at 0x066A6B70>) , Command count = 1483 ] 
10:11:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:11:56: [ SetCardRCA(0x1, 0xD555) , Command count = 1484 ] 
10:11:56: [DVTCommonLib]### Identification :Idenfication of card completed 

10:11:56: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:11:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:11:56: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:11:56: [ SetBusWidth(0x1) , Command count = 1485 ] 
10:11:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:11:56: ####CSD Registe 2.0 Values####
10:11:56: CSD_STRUCTURE                                 :0x1
10:11:56: Reserv1                                       :0x0
10:11:56: Time Access 1 TAAC                            :0xe
10:11:56: Time Access 2 NSAC*100                        :0x0
10:11:56: Data Transfer Rate TRAN_SPEED                 :0x32
10:11:56: Card Command Classess CCC                     :0x5b5
10:11:56: Max Read Data Block Length  READ_BL_LEN       :0x9
10:11:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:11:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:11:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:11:56: DSR(driver stage register)  DSR_IMP           :0x0
10:11:56: Reserv2                                       :0x0
10:11:56: Device Size C_SIZE                            :0xedc8
10:11:56: Reserv3                                       :0x0
10:11:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:11:56: Erase Sector Size SECTOR_SIZE                 :0x7f
10:11:56: Write Protect Group Size WP_GRP_SIZE          :0x0
10:11:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:11:56: Reserv4                                       :0x0
10:11:56: Write Speed Factor R2W_FACTOR                 :0x2
10:11:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:11:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:11:56: FILE_FORMAT_GRP                               :0x0
10:11:56: COPY flag                                     :0x1
10:11:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:11:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:11:56: File_Format                                   :0x0
10:11:56: CRC                                           :0x0
10:11:56: ####CSD Registe Values####  

10:11:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:11:56: ProductSerialNumber = 0x23482900
10:11:56: CardMaximumLBA      = 0x3b72400
10:11:56: CardCapacity        = 32G
10:11:56: Is card secure      = 0
10:11:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:11:56: [DVTCommonLib]###  LogicalWrite called
10:11:58: [ WriteLba(0x1F6D160, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1486 ] 
10:11:58: [DVTCommonLib]###  LogicalWrite Completed 

10:11:58: [DVTCommonLib]###  LogicalRead called
10:12:00: [ ReadLba(0x1F6D160, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1487 ] 
10:12:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:12:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:12:00: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 158 times 

10:12:00: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:12:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:12:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1488 ] 
10:12:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:12:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:12:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:12:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:12:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:12:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:12:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE1E0>, <py_sfcl.CommandDataDefinition object at 0x066AE210>) , Command count = 1489 ] 
10:12:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:12:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E5D0>, <py_sfcl.CommandDataDefinition object at 0x066A6DB0>) , Command count = 1490 ] 
10:12:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:12:00: [ SetCardRCA(0x1, 0xD555) , Command count = 1491 ] 
10:12:00: [DVTCommonLib]### Identification :Idenfication of card completed 

10:12:00: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:12:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:12:00: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:12:00: [ SetBusWidth(0x1) , Command count = 1492 ] 
10:12:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:12:00: ####CSD Registe 2.0 Values####
10:12:00: CSD_STRUCTURE                                 :0x1
10:12:00: Reserv1                                       :0x0
10:12:00: Time Access 1 TAAC                            :0xe
10:12:00: Time Access 2 NSAC*100                        :0x0
10:12:00: Data Transfer Rate TRAN_SPEED                 :0x32
10:12:00: Card Command Classess CCC                     :0x5b5
10:12:00: Max Read Data Block Length  READ_BL_LEN       :0x9
10:12:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:12:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:12:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:12:00: DSR(driver stage register)  DSR_IMP           :0x0
10:12:00: Reserv2                                       :0x0
10:12:00: Device Size C_SIZE                            :0xedc8
10:12:00: Reserv3                                       :0x0
10:12:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:12:00: Erase Sector Size SECTOR_SIZE                 :0x7f
10:12:00: Write Protect Group Size WP_GRP_SIZE          :0x0
10:12:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:12:00: Reserv4                                       :0x0
10:12:00: Write Speed Factor R2W_FACTOR                 :0x2
10:12:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:12:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:12:00: FILE_FORMAT_GRP                               :0x0
10:12:00: COPY flag                                     :0x1
10:12:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:12:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:12:00: File_Format                                   :0x0
10:12:00: CRC                                           :0x0
10:12:00: ####CSD Registe Values####  

10:12:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:12:00: ProductSerialNumber = 0x23482900
10:12:00: CardMaximumLBA      = 0x3b72400
10:12:00: CardCapacity        = 32G
10:12:00: Is card secure      = 0
10:12:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:12:00: [DVTCommonLib]###  LogicalWrite called
10:12:01: [ WriteLba(0x22C8C1E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1493 ] 
10:12:01: [DVTCommonLib]###  LogicalWrite Completed 

10:12:01: [DVTCommonLib]###  LogicalRead called
10:12:03: [ ReadLba(0x22C8C1E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1494 ] 
10:12:03: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:12:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:12:03: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 159 times 

10:12:03: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:12:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:12:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1495 ] 
10:12:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:12:03: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:12:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:12:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:12:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:12:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:12:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6E70>, <py_sfcl.CommandDataDefinition object at 0x066AE030>) , Command count = 1496 ] 
10:12:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:12:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1CC0>, <py_sfcl.CommandDataDefinition object at 0x066AE2D0>) , Command count = 1497 ] 
10:12:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:12:03: [ SetCardRCA(0x1, 0xD555) , Command count = 1498 ] 
10:12:03: [DVTCommonLib]### Identification :Idenfication of card completed 

10:12:03: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:12:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:12:03: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:12:03: [ SetBusWidth(0x1) , Command count = 1499 ] 
10:12:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:12:03: ####CSD Registe 2.0 Values####
10:12:03: CSD_STRUCTURE                                 :0x1
10:12:03: Reserv1                                       :0x0
10:12:03: Time Access 1 TAAC                            :0xe
10:12:03: Time Access 2 NSAC*100                        :0x0
10:12:03: Data Transfer Rate TRAN_SPEED                 :0x32
10:12:03: Card Command Classess CCC                     :0x5b5
10:12:03: Max Read Data Block Length  READ_BL_LEN       :0x9
10:12:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:12:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:12:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:12:03: DSR(driver stage register)  DSR_IMP           :0x0
10:12:03: Reserv2                                       :0x0
10:12:03: Device Size C_SIZE                            :0xedc8
10:12:03: Reserv3                                       :0x0
10:12:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:12:03: Erase Sector Size SECTOR_SIZE                 :0x7f
10:12:03: Write Protect Group Size WP_GRP_SIZE          :0x0
10:12:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:12:03: Reserv4                                       :0x0
10:12:03: Write Speed Factor R2W_FACTOR                 :0x2
10:12:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:12:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:12:03: FILE_FORMAT_GRP                               :0x0
10:12:03: COPY flag                                     :0x1
10:12:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:12:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:12:03: File_Format                                   :0x0
10:12:03: CRC                                           :0x0
10:12:03: ####CSD Registe Values####  

10:12:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:12:03: ProductSerialNumber = 0x23482900
10:12:03: CardMaximumLBA      = 0x3b72400
10:12:03: CardCapacity        = 32G
10:12:03: Is card secure      = 0
10:12:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:12:03: [DVTCommonLib]###  LogicalWrite called
10:12:05: [ WriteLba(0x149F22F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1500 ] 
10:12:05: [DVTCommonLib]###  LogicalWrite Completed 

10:12:05: [DVTCommonLib]###  LogicalRead called
10:12:06: [ ReadLba(0x149F22F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1501 ] 
10:12:06: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:12:06: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:12:06: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 160 times 

10:12:06: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:12:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:12:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1502 ] 
10:12:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:12:06: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:12:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:12:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:12:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:12:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:12:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A63F0>, <py_sfcl.CommandDataDefinition object at 0x066A6C90>) , Command count = 1503 ] 
10:12:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:12:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE4B0>, <py_sfcl.CommandDataDefinition object at 0x066AE540>) , Command count = 1504 ] 
10:12:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:12:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1505 ] 
10:12:07: [DVTCommonLib]### Identification :Idenfication of card completed 

10:12:07: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:12:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:12:07: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:12:07: [ SetBusWidth(0x1) , Command count = 1506 ] 
10:12:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:12:07: ####CSD Registe 2.0 Values####
10:12:07: CSD_STRUCTURE                                 :0x1
10:12:07: Reserv1                                       :0x0
10:12:07: Time Access 1 TAAC                            :0xe
10:12:07: Time Access 2 NSAC*100                        :0x0
10:12:07: Data Transfer Rate TRAN_SPEED                 :0x32
10:12:07: Card Command Classess CCC                     :0x5b5
10:12:07: Max Read Data Block Length  READ_BL_LEN       :0x9
10:12:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:12:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:12:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:12:07: DSR(driver stage register)  DSR_IMP           :0x0
10:12:07: Reserv2                                       :0x0
10:12:07: Device Size C_SIZE                            :0xedc8
10:12:07: Reserv3                                       :0x0
10:12:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:12:07: Erase Sector Size SECTOR_SIZE                 :0x7f
10:12:07: Write Protect Group Size WP_GRP_SIZE          :0x0
10:12:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:12:07: Reserv4                                       :0x0
10:12:07: Write Speed Factor R2W_FACTOR                 :0x2
10:12:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:12:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:12:07: FILE_FORMAT_GRP                               :0x0
10:12:07: COPY flag                                     :0x1
10:12:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:12:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:12:07: File_Format                                   :0x0
10:12:07: CRC                                           :0x0
10:12:07: ####CSD Registe Values####  

10:12:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:12:07: ProductSerialNumber = 0x23482900
10:12:07: CardMaximumLBA      = 0x3b72400
10:12:07: CardCapacity        = 32G
10:12:07: Is card secure      = 0
10:12:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:12:07: [DVTCommonLib]###  LogicalWrite called
10:12:08: [ WriteLba(0x35A2A91, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1507 ] 
10:12:08: [DVTCommonLib]###  LogicalWrite Completed 

10:12:08: [DVTCommonLib]###  LogicalRead called
10:12:10: [ ReadLba(0x35A2A91, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1508 ] 
10:12:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:12:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:12:10: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 161 times 

10:12:10: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:12:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:12:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1509 ] 
10:12:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:12:10: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:12:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:12:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:12:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:12:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:12:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6270>, <py_sfcl.CommandDataDefinition object at 0x066AE780>) , Command count = 1510 ] 
10:12:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:12:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE8A0>, <py_sfcl.CommandDataDefinition object at 0x066AE660>) , Command count = 1511 ] 
10:12:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:12:10: [ SetCardRCA(0x1, 0xD555) , Command count = 1512 ] 
10:12:10: [DVTCommonLib]### Identification :Idenfication of card completed 

10:12:10: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:12:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:12:10: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:12:10: [ SetBusWidth(0x1) , Command count = 1513 ] 
10:12:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:12:10: ####CSD Registe 2.0 Values####
10:12:10: CSD_STRUCTURE                                 :0x1
10:12:10: Reserv1                                       :0x0
10:12:10: Time Access 1 TAAC                            :0xe
10:12:10: Time Access 2 NSAC*100                        :0x0
10:12:10: Data Transfer Rate TRAN_SPEED                 :0x32
10:12:10: Card Command Classess CCC                     :0x5b5
10:12:10: Max Read Data Block Length  READ_BL_LEN       :0x9
10:12:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:12:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:12:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:12:10: DSR(driver stage register)  DSR_IMP           :0x0
10:12:10: Reserv2                                       :0x0
10:12:10: Device Size C_SIZE                            :0xedc8
10:12:10: Reserv3                                       :0x0
10:12:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:12:10: Erase Sector Size SECTOR_SIZE                 :0x7f
10:12:10: Write Protect Group Size WP_GRP_SIZE          :0x0
10:12:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:12:10: Reserv4                                       :0x0
10:12:10: Write Speed Factor R2W_FACTOR                 :0x2
10:12:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:12:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:12:10: FILE_FORMAT_GRP                               :0x0
10:12:10: COPY flag                                     :0x1
10:12:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:12:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:12:10: File_Format                                   :0x0
10:12:10: CRC                                           :0x0
10:12:10: ####CSD Registe Values####  

10:12:10: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:12:10: ProductSerialNumber = 0x23482900
10:12:10: CardMaximumLBA      = 0x3b72400
10:12:10: CardCapacity        = 32G
10:12:10: Is card secure      = 0
10:12:10: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:12:10: [DVTCommonLib]###  LogicalWrite called
10:12:12: [ WriteLba(0x1716CC9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1514 ] 
10:12:12: [DVTCommonLib]###  LogicalWrite Completed 

10:12:12: [DVTCommonLib]###  LogicalRead called
10:12:13: [ ReadLba(0x1716CC9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1515 ] 
10:12:13: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:12:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:12:13: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 162 times 

10:12:13: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:12:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:12:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1516 ] 
10:12:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:12:13: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:12:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:12:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:12:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:12:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:12:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE7A80>, <py_sfcl.CommandDataDefinition object at 0x066B1120>) , Command count = 1517 ] 
10:12:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:12:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC51B0>, <py_sfcl.CommandDataDefinition object at 0x066AEAE0>) , Command count = 1518 ] 
10:12:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:12:13: [ SetCardRCA(0x1, 0xD555) , Command count = 1519 ] 
10:12:13: [DVTCommonLib]### Identification :Idenfication of card completed 

10:12:13: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:12:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:12:13: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:12:13: [ SetBusWidth(0x1) , Command count = 1520 ] 
10:12:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:12:13: ####CSD Registe 2.0 Values####
10:12:13: CSD_STRUCTURE                                 :0x1
10:12:13: Reserv1                                       :0x0
10:12:13: Time Access 1 TAAC                            :0xe
10:12:13: Time Access 2 NSAC*100                        :0x0
10:12:13: Data Transfer Rate TRAN_SPEED                 :0x32
10:12:13: Card Command Classess CCC                     :0x5b5
10:12:13: Max Read Data Block Length  READ_BL_LEN       :0x9
10:12:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:12:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:12:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:12:13: DSR(driver stage register)  DSR_IMP           :0x0
10:12:13: Reserv2                                       :0x0
10:12:13: Device Size C_SIZE                            :0xedc8
10:12:13: Reserv3                                       :0x0
10:12:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:12:13: Erase Sector Size SECTOR_SIZE                 :0x7f
10:12:13: Write Protect Group Size WP_GRP_SIZE          :0x0
10:12:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:12:13: Reserv4                                       :0x0
10:12:13: Write Speed Factor R2W_FACTOR                 :0x2
10:12:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:12:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:12:13: FILE_FORMAT_GRP                               :0x0
10:12:13: COPY flag                                     :0x1
10:12:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:12:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:12:13: File_Format                                   :0x0
10:12:13: CRC                                           :0x0
10:12:13: ####CSD Registe Values####  

10:12:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:12:13: ProductSerialNumber = 0x23482900
10:12:13: CardMaximumLBA      = 0x3b72400
10:12:13: CardCapacity        = 32G
10:12:13: Is card secure      = 0
10:12:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:12:13: [DVTCommonLib]###  LogicalWrite called
10:12:15: [ WriteLba(0x4446F7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1521 ] 
10:12:15: [DVTCommonLib]###  LogicalWrite Completed 

10:12:15: [DVTCommonLib]###  LogicalRead called
10:12:17: [ ReadLba(0x4446F7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1522 ] 
10:12:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:12:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:12:17: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 163 times 

10:12:17: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:12:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:12:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1523 ] 
10:12:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:12:17: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:12:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:12:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:12:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:12:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:12:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEDB0>, <py_sfcl.CommandDataDefinition object at 0x05EC0A20>) , Command count = 1524 ] 
10:12:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:12:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC5300>, <py_sfcl.CommandDataDefinition object at 0x066B1150>) , Command count = 1525 ] 
10:12:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:12:17: [ SetCardRCA(0x1, 0xD555) , Command count = 1526 ] 
10:12:17: [DVTCommonLib]### Identification :Idenfication of card completed 

10:12:17: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:12:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:12:17: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:12:17: [ SetBusWidth(0x1) , Command count = 1527 ] 
10:12:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:12:17: ####CSD Registe 2.0 Values####
10:12:17: CSD_STRUCTURE                                 :0x1
10:12:17: Reserv1                                       :0x0
10:12:17: Time Access 1 TAAC                            :0xe
10:12:17: Time Access 2 NSAC*100                        :0x0
10:12:17: Data Transfer Rate TRAN_SPEED                 :0x32
10:12:17: Card Command Classess CCC                     :0x5b5
10:12:17: Max Read Data Block Length  READ_BL_LEN       :0x9
10:12:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:12:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:12:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:12:17: DSR(driver stage register)  DSR_IMP           :0x0
10:12:17: Reserv2                                       :0x0
10:12:17: Device Size C_SIZE                            :0xedc8
10:12:17: Reserv3                                       :0x0
10:12:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:12:17: Erase Sector Size SECTOR_SIZE                 :0x7f
10:12:17: Write Protect Group Size WP_GRP_SIZE          :0x0
10:12:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:12:17: Reserv4                                       :0x0
10:12:17: Write Speed Factor R2W_FACTOR                 :0x2
10:12:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:12:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:12:17: FILE_FORMAT_GRP                               :0x0
10:12:17: COPY flag                                     :0x1
10:12:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:12:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:12:17: File_Format                                   :0x0
10:12:17: CRC                                           :0x0
10:12:17: ####CSD Registe Values####  

10:12:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:12:17: ProductSerialNumber = 0x23482900
10:12:17: CardMaximumLBA      = 0x3b72400
10:12:17: CardCapacity        = 32G
10:12:17: Is card secure      = 0
10:12:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:12:17: [DVTCommonLib]###  LogicalWrite called
10:12:18: [ WriteLba(0xBAB9C7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1528 ] 
10:12:18: [DVTCommonLib]###  LogicalWrite Completed 

10:12:18: [DVTCommonLib]###  LogicalRead called
10:12:20: [ ReadLba(0xBAB9C7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1529 ] 
10:12:20: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:12:20: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:12:20: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 164 times 

10:12:20: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:12:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:12:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1530 ] 
10:12:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:12:20: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:12:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:12:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:12:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:12:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:12:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC5090>, <py_sfcl.CommandDataDefinition object at 0x066AEE70>) , Command count = 1531 ] 
10:12:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:12:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE7C30>, <py_sfcl.CommandDataDefinition object at 0x066B10C0>) , Command count = 1532 ] 
10:12:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:12:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1533 ] 
10:12:20: [DVTCommonLib]### Identification :Idenfication of card completed 

10:12:20: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:12:20: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:12:20: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:12:20: [ SetBusWidth(0x1) , Command count = 1534 ] 
10:12:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:12:20: ####CSD Registe 2.0 Values####
10:12:20: CSD_STRUCTURE                                 :0x1
10:12:20: Reserv1                                       :0x0
10:12:20: Time Access 1 TAAC                            :0xe
10:12:20: Time Access 2 NSAC*100                        :0x0
10:12:20: Data Transfer Rate TRAN_SPEED                 :0x32
10:12:20: Card Command Classess CCC                     :0x5b5
10:12:20: Max Read Data Block Length  READ_BL_LEN       :0x9
10:12:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:12:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:12:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:12:20: DSR(driver stage register)  DSR_IMP           :0x0
10:12:20: Reserv2                                       :0x0
10:12:20: Device Size C_SIZE                            :0xedc8
10:12:20: Reserv3                                       :0x0
10:12:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:12:20: Erase Sector Size SECTOR_SIZE                 :0x7f
10:12:20: Write Protect Group Size WP_GRP_SIZE          :0x0
10:12:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:12:20: Reserv4                                       :0x0
10:12:20: Write Speed Factor R2W_FACTOR                 :0x2
10:12:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:12:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:12:20: FILE_FORMAT_GRP                               :0x0
10:12:20: COPY flag                                     :0x1
10:12:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:12:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:12:20: File_Format                                   :0x0
10:12:20: CRC                                           :0x0
10:12:20: ####CSD Registe Values####  

10:12:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:12:20: ProductSerialNumber = 0x23482900
10:12:20: CardMaximumLBA      = 0x3b72400
10:12:20: CardCapacity        = 32G
10:12:20: Is card secure      = 0
10:12:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:12:20: [DVTCommonLib]###  LogicalWrite called
10:12:22: [ WriteLba(0xB2AFB6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1535 ] 
10:12:22: [DVTCommonLib]###  LogicalWrite Completed 

10:12:22: [DVTCommonLib]###  LogicalRead called
10:12:23: [ ReadLba(0xB2AFB6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1536 ] 
10:12:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:12:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:12:23: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 165 times 

10:12:23: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:12:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:12:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1537 ] 
10:12:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:12:24: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:12:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:12:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:12:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:12:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:12:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FCB210>, <py_sfcl.CommandDataDefinition object at 0x05FE7D80>) , Command count = 1538 ] 
10:12:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:12:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05F8E780>, <py_sfcl.CommandDataDefinition object at 0x066B11B0>) , Command count = 1539 ] 
10:12:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:12:24: [ SetCardRCA(0x1, 0xD555) , Command count = 1540 ] 
10:12:24: [DVTCommonLib]### Identification :Idenfication of card completed 

10:12:24: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:12:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:12:24: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:12:24: [ SetBusWidth(0x1) , Command count = 1541 ] 
10:12:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:12:24: ####CSD Registe 2.0 Values####
10:12:24: CSD_STRUCTURE                                 :0x1
10:12:24: Reserv1                                       :0x0
10:12:24: Time Access 1 TAAC                            :0xe
10:12:24: Time Access 2 NSAC*100                        :0x0
10:12:24: Data Transfer Rate TRAN_SPEED                 :0x32
10:12:24: Card Command Classess CCC                     :0x5b5
10:12:24: Max Read Data Block Length  READ_BL_LEN       :0x9
10:12:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:12:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:12:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:12:24: DSR(driver stage register)  DSR_IMP           :0x0
10:12:24: Reserv2                                       :0x0
10:12:24: Device Size C_SIZE                            :0xedc8
10:12:24: Reserv3                                       :0x0
10:12:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:12:24: Erase Sector Size SECTOR_SIZE                 :0x7f
10:12:24: Write Protect Group Size WP_GRP_SIZE          :0x0
10:12:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:12:24: Reserv4                                       :0x0
10:12:24: Write Speed Factor R2W_FACTOR                 :0x2
10:12:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:12:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:12:24: FILE_FORMAT_GRP                               :0x0
10:12:24: COPY flag                                     :0x1
10:12:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:12:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:12:24: File_Format                                   :0x0
10:12:24: CRC                                           :0x0
10:12:24: ####CSD Registe Values####  

10:12:24: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:12:24: ProductSerialNumber = 0x23482900
10:12:24: CardMaximumLBA      = 0x3b72400
10:12:24: CardCapacity        = 32G
10:12:24: Is card secure      = 0
10:12:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:12:24: [DVTCommonLib]###  LogicalWrite called
10:12:25: [ WriteLba(0x299CFF0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1542 ] 
10:12:25: [DVTCommonLib]###  LogicalWrite Completed 

10:12:25: [DVTCommonLib]###  LogicalRead called
10:12:27: [ ReadLba(0x299CFF0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1543 ] 
10:12:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:12:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:12:27: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 166 times 

10:12:27: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:12:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:12:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1544 ] 
10:12:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:12:27: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:12:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:12:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:12:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:12:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:12:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE7330>, <py_sfcl.CommandDataDefinition object at 0x06033930>) , Command count = 1545 ] 
10:12:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:12:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEF2A0>, <py_sfcl.CommandDataDefinition object at 0x066B16C0>) , Command count = 1546 ] 
10:12:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:12:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1547 ] 
10:12:27: [DVTCommonLib]### Identification :Idenfication of card completed 

10:12:27: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:12:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:12:27: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:12:27: [ SetBusWidth(0x1) , Command count = 1548 ] 
10:12:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:12:27: ####CSD Registe 2.0 Values####
10:12:27: CSD_STRUCTURE                                 :0x1
10:12:27: Reserv1                                       :0x0
10:12:27: Time Access 1 TAAC                            :0xe
10:12:27: Time Access 2 NSAC*100                        :0x0
10:12:27: Data Transfer Rate TRAN_SPEED                 :0x32
10:12:27: Card Command Classess CCC                     :0x5b5
10:12:27: Max Read Data Block Length  READ_BL_LEN       :0x9
10:12:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:12:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:12:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:12:27: DSR(driver stage register)  DSR_IMP           :0x0
10:12:27: Reserv2                                       :0x0
10:12:27: Device Size C_SIZE                            :0xedc8
10:12:27: Reserv3                                       :0x0
10:12:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:12:27: Erase Sector Size SECTOR_SIZE                 :0x7f
10:12:27: Write Protect Group Size WP_GRP_SIZE          :0x0
10:12:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:12:27: Reserv4                                       :0x0
10:12:27: Write Speed Factor R2W_FACTOR                 :0x2
10:12:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:12:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:12:27: FILE_FORMAT_GRP                               :0x0
10:12:27: COPY flag                                     :0x1
10:12:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:12:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:12:27: File_Format                                   :0x0
10:12:27: CRC                                           :0x0
10:12:27: ####CSD Registe Values####  

10:12:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:12:27: ProductSerialNumber = 0x23482900
10:12:27: CardMaximumLBA      = 0x3b72400
10:12:27: CardCapacity        = 32G
10:12:27: Is card secure      = 0
10:12:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:12:27: [DVTCommonLib]###  LogicalWrite called
10:12:29: [ WriteLba(0x13E1117, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1549 ] 
10:12:29: [DVTCommonLib]###  LogicalWrite Completed 

10:12:29: [DVTCommonLib]###  LogicalRead called
10:12:30: [ ReadLba(0x13E1117, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1550 ] 
10:12:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:12:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:12:30: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 167 times 

10:12:30: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:12:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:12:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1551 ] 
10:12:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:12:30: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:12:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:12:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:12:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:12:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:12:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06033540>, <py_sfcl.CommandDataDefinition object at 0x06038810>) , Command count = 1552 ] 
10:12:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:12:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038930>, <py_sfcl.CommandDataDefinition object at 0x066B1960>) , Command count = 1553 ] 
10:12:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:12:30: [ SetCardRCA(0x1, 0xD555) , Command count = 1554 ] 
10:12:30: [DVTCommonLib]### Identification :Idenfication of card completed 

10:12:30: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:12:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:12:30: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:12:30: [ SetBusWidth(0x1) , Command count = 1555 ] 
10:12:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:12:30: ####CSD Registe 2.0 Values####
10:12:30: CSD_STRUCTURE                                 :0x1
10:12:30: Reserv1                                       :0x0
10:12:30: Time Access 1 TAAC                            :0xe
10:12:30: Time Access 2 NSAC*100                        :0x0
10:12:30: Data Transfer Rate TRAN_SPEED                 :0x32
10:12:30: Card Command Classess CCC                     :0x5b5
10:12:30: Max Read Data Block Length  READ_BL_LEN       :0x9
10:12:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:12:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:12:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:12:30: DSR(driver stage register)  DSR_IMP           :0x0
10:12:30: Reserv2                                       :0x0
10:12:30: Device Size C_SIZE                            :0xedc8
10:12:30: Reserv3                                       :0x0
10:12:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:12:30: Erase Sector Size SECTOR_SIZE                 :0x7f
10:12:30: Write Protect Group Size WP_GRP_SIZE          :0x0
10:12:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:12:30: Reserv4                                       :0x0
10:12:30: Write Speed Factor R2W_FACTOR                 :0x2
10:12:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:12:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:12:30: FILE_FORMAT_GRP                               :0x0
10:12:30: COPY flag                                     :0x1
10:12:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:12:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:12:30: File_Format                                   :0x0
10:12:30: CRC                                           :0x0
10:12:30: ####CSD Registe Values####  

10:12:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:12:30: ProductSerialNumber = 0x23482900
10:12:30: CardMaximumLBA      = 0x3b72400
10:12:30: CardCapacity        = 32G
10:12:30: Is card secure      = 0
10:12:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:12:30: [DVTCommonLib]###  LogicalWrite called
10:12:32: [ WriteLba(0x39AFEB5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1556 ] 
10:12:32: [DVTCommonLib]###  LogicalWrite Completed 

10:12:32: [DVTCommonLib]###  LogicalRead called
10:12:34: [ ReadLba(0x39AFEB5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1557 ] 
10:12:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:12:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:12:34: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 168 times 

10:12:34: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:12:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:12:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1558 ] 
10:12:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:12:34: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:12:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:12:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:12:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:12:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:12:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDBBD0>, <py_sfcl.CommandDataDefinition object at 0x060388A0>) , Command count = 1559 ] 
10:12:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:12:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038A20>, <py_sfcl.CommandDataDefinition object at 0x066B1C00>) , Command count = 1560 ] 
10:12:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:12:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1561 ] 
10:12:34: [DVTCommonLib]### Identification :Idenfication of card completed 

10:12:34: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:12:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:12:34: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:12:34: [ SetBusWidth(0x1) , Command count = 1562 ] 
10:12:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:12:34: ####CSD Registe 2.0 Values####
10:12:34: CSD_STRUCTURE                                 :0x1
10:12:34: Reserv1                                       :0x0
10:12:34: Time Access 1 TAAC                            :0xe
10:12:34: Time Access 2 NSAC*100                        :0x0
10:12:34: Data Transfer Rate TRAN_SPEED                 :0x32
10:12:34: Card Command Classess CCC                     :0x5b5
10:12:34: Max Read Data Block Length  READ_BL_LEN       :0x9
10:12:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:12:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:12:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:12:34: DSR(driver stage register)  DSR_IMP           :0x0
10:12:34: Reserv2                                       :0x0
10:12:34: Device Size C_SIZE                            :0xedc8
10:12:34: Reserv3                                       :0x0
10:12:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:12:34: Erase Sector Size SECTOR_SIZE                 :0x7f
10:12:34: Write Protect Group Size WP_GRP_SIZE          :0x0
10:12:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:12:34: Reserv4                                       :0x0
10:12:34: Write Speed Factor R2W_FACTOR                 :0x2
10:12:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:12:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:12:34: FILE_FORMAT_GRP                               :0x0
10:12:34: COPY flag                                     :0x1
10:12:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:12:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:12:34: File_Format                                   :0x0
10:12:34: CRC                                           :0x0
10:12:34: ####CSD Registe Values####  

10:12:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:12:34: ProductSerialNumber = 0x23482900
10:12:34: CardMaximumLBA      = 0x3b72400
10:12:34: CardCapacity        = 32G
10:12:34: Is card secure      = 0
10:12:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:12:34: [DVTCommonLib]###  LogicalWrite called
10:12:35: [ WriteLba(0xF4C247, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1563 ] 
10:12:35: [DVTCommonLib]###  LogicalWrite Completed 

10:12:35: [DVTCommonLib]###  LogicalRead called
10:12:37: [ ReadLba(0xF4C247, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1564 ] 
10:12:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:12:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:12:37: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 169 times 

10:12:37: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:12:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:12:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1565 ] 
10:12:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:12:37: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:12:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:12:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:12:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:12:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060389F0>, <py_sfcl.CommandDataDefinition object at 0x0661D5D0>) , Command count = 1566 ] 
10:12:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:12:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DB10>, <py_sfcl.CommandDataDefinition object at 0x066B1C30>) , Command count = 1567 ] 
10:12:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:12:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1568 ] 
10:12:37: [DVTCommonLib]### Identification :Idenfication of card completed 

10:12:37: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:12:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:12:37: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:12:37: [ SetBusWidth(0x1) , Command count = 1569 ] 
10:12:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:12:37: ####CSD Registe 2.0 Values####
10:12:37: CSD_STRUCTURE                                 :0x1
10:12:37: Reserv1                                       :0x0
10:12:37: Time Access 1 TAAC                            :0xe
10:12:37: Time Access 2 NSAC*100                        :0x0
10:12:37: Data Transfer Rate TRAN_SPEED                 :0x32
10:12:37: Card Command Classess CCC                     :0x5b5
10:12:37: Max Read Data Block Length  READ_BL_LEN       :0x9
10:12:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:12:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:12:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:12:37: DSR(driver stage register)  DSR_IMP           :0x0
10:12:37: Reserv2                                       :0x0
10:12:37: Device Size C_SIZE                            :0xedc8
10:12:37: Reserv3                                       :0x0
10:12:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:12:37: Erase Sector Size SECTOR_SIZE                 :0x7f
10:12:37: Write Protect Group Size WP_GRP_SIZE          :0x0
10:12:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:12:37: Reserv4                                       :0x0
10:12:37: Write Speed Factor R2W_FACTOR                 :0x2
10:12:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:12:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:12:37: FILE_FORMAT_GRP                               :0x0
10:12:37: COPY flag                                     :0x1
10:12:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:12:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:12:37: File_Format                                   :0x0
10:12:37: CRC                                           :0x0
10:12:37: ####CSD Registe Values####  

10:12:37: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:12:37: ProductSerialNumber = 0x23482900
10:12:37: CardMaximumLBA      = 0x3b72400
10:12:37: CardCapacity        = 32G
10:12:37: Is card secure      = 0
10:12:37: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:12:37: [DVTCommonLib]###  LogicalWrite called
10:12:39: [ WriteLba(0x38DF321, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1570 ] 
10:12:39: [DVTCommonLib]###  LogicalWrite Completed 

10:12:39: [DVTCommonLib]###  LogicalRead called
10:12:40: [ ReadLba(0x38DF321, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1571 ] 
10:12:40: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:12:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:12:40: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 170 times 

10:12:40: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:12:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:12:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1572 ] 
10:12:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:12:41: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:12:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:12:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:12:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:12:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:12:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065921B0>, <py_sfcl.CommandDataDefinition object at 0x0663A120>) , Command count = 1573 ] 
10:12:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:12:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DE70>, <py_sfcl.CommandDataDefinition object at 0x0662DE40>) , Command count = 1574 ] 
10:12:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:12:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1575 ] 
10:12:41: [DVTCommonLib]### Identification :Idenfication of card completed 

10:12:41: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:12:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:12:41: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:12:41: [ SetBusWidth(0x1) , Command count = 1576 ] 
10:12:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:12:41: ####CSD Registe 2.0 Values####
10:12:41: CSD_STRUCTURE                                 :0x1
10:12:41: Reserv1                                       :0x0
10:12:41: Time Access 1 TAAC                            :0xe
10:12:41: Time Access 2 NSAC*100                        :0x0
10:12:41: Data Transfer Rate TRAN_SPEED                 :0x32
10:12:41: Card Command Classess CCC                     :0x5b5
10:12:41: Max Read Data Block Length  READ_BL_LEN       :0x9
10:12:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:12:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:12:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:12:41: DSR(driver stage register)  DSR_IMP           :0x0
10:12:41: Reserv2                                       :0x0
10:12:41: Device Size C_SIZE                            :0xedc8
10:12:41: Reserv3                                       :0x0
10:12:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:12:41: Erase Sector Size SECTOR_SIZE                 :0x7f
10:12:41: Write Protect Group Size WP_GRP_SIZE          :0x0
10:12:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:12:41: Reserv4                                       :0x0
10:12:41: Write Speed Factor R2W_FACTOR                 :0x2
10:12:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:12:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:12:41: FILE_FORMAT_GRP                               :0x0
10:12:41: COPY flag                                     :0x1
10:12:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:12:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:12:41: File_Format                                   :0x0
10:12:41: CRC                                           :0x0
10:12:41: ####CSD Registe Values####  

10:12:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:12:41: ProductSerialNumber = 0x23482900
10:12:41: CardMaximumLBA      = 0x3b72400
10:12:41: CardCapacity        = 32G
10:12:41: Is card secure      = 0
10:12:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:12:41: [DVTCommonLib]###  LogicalWrite called
10:12:42: [ WriteLba(0x24AD073, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1577 ] 
10:12:42: [DVTCommonLib]###  LogicalWrite Completed 

10:12:42: [DVTCommonLib]###  LogicalRead called
10:12:44: [ ReadLba(0x24AD073, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1578 ] 
10:12:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:12:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:12:44: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 171 times 

10:12:44: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:12:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:12:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1579 ] 
10:12:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:12:44: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:12:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:12:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:12:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:12:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:12:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEF030>, <py_sfcl.CommandDataDefinition object at 0x06038ED0>) , Command count = 1580 ] 
10:12:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:12:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1D50>, <py_sfcl.CommandDataDefinition object at 0x0663A0F0>) , Command count = 1581 ] 
10:12:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:12:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1582 ] 
10:12:44: [DVTCommonLib]### Identification :Idenfication of card completed 

10:12:44: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:12:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:12:44: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:12:44: [ SetBusWidth(0x1) , Command count = 1583 ] 
10:12:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:12:44: ####CSD Registe 2.0 Values####
10:12:44: CSD_STRUCTURE                                 :0x1
10:12:44: Reserv1                                       :0x0
10:12:44: Time Access 1 TAAC                            :0xe
10:12:44: Time Access 2 NSAC*100                        :0x0
10:12:44: Data Transfer Rate TRAN_SPEED                 :0x32
10:12:44: Card Command Classess CCC                     :0x5b5
10:12:44: Max Read Data Block Length  READ_BL_LEN       :0x9
10:12:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:12:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:12:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:12:44: DSR(driver stage register)  DSR_IMP           :0x0
10:12:44: Reserv2                                       :0x0
10:12:44: Device Size C_SIZE                            :0xedc8
10:12:44: Reserv3                                       :0x0
10:12:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:12:44: Erase Sector Size SECTOR_SIZE                 :0x7f
10:12:44: Write Protect Group Size WP_GRP_SIZE          :0x0
10:12:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:12:44: Reserv4                                       :0x0
10:12:44: Write Speed Factor R2W_FACTOR                 :0x2
10:12:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:12:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:12:44: FILE_FORMAT_GRP                               :0x0
10:12:44: COPY flag                                     :0x1
10:12:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:12:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:12:44: File_Format                                   :0x0
10:12:44: CRC                                           :0x0
10:12:44: ####CSD Registe Values####  

10:12:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:12:44: ProductSerialNumber = 0x23482900
10:12:44: CardMaximumLBA      = 0x3b72400
10:12:44: CardCapacity        = 32G
10:12:44: Is card secure      = 0
10:12:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:12:44: [DVTCommonLib]###  LogicalWrite called
10:12:46: [ WriteLba(0x20B40D4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1584 ] 
10:12:46: [DVTCommonLib]###  LogicalWrite Completed 

10:12:46: [DVTCommonLib]###  LogicalRead called
10:12:47: [ ReadLba(0x20B40D4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1585 ] 
10:12:47: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:12:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:12:47: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 172 times 

10:12:47: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:12:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:12:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1586 ] 
10:12:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:12:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:12:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:12:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:12:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:12:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:12:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065920C0>, <py_sfcl.CommandDataDefinition object at 0x0662DDE0>) , Command count = 1587 ] 
10:12:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:12:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06592090>, <py_sfcl.CommandDataDefinition object at 0x0663A5D0>) , Command count = 1588 ] 
10:12:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:12:47: [ SetCardRCA(0x1, 0xD555) , Command count = 1589 ] 
10:12:47: [DVTCommonLib]### Identification :Idenfication of card completed 

10:12:47: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:12:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:12:47: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:12:47: [ SetBusWidth(0x1) , Command count = 1590 ] 
10:12:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:12:47: ####CSD Registe 2.0 Values####
10:12:47: CSD_STRUCTURE                                 :0x1
10:12:47: Reserv1                                       :0x0
10:12:47: Time Access 1 TAAC                            :0xe
10:12:47: Time Access 2 NSAC*100                        :0x0
10:12:47: Data Transfer Rate TRAN_SPEED                 :0x32
10:12:47: Card Command Classess CCC                     :0x5b5
10:12:47: Max Read Data Block Length  READ_BL_LEN       :0x9
10:12:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:12:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:12:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:12:47: DSR(driver stage register)  DSR_IMP           :0x0
10:12:47: Reserv2                                       :0x0
10:12:47: Device Size C_SIZE                            :0xedc8
10:12:47: Reserv3                                       :0x0
10:12:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:12:47: Erase Sector Size SECTOR_SIZE                 :0x7f
10:12:47: Write Protect Group Size WP_GRP_SIZE          :0x0
10:12:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:12:47: Reserv4                                       :0x0
10:12:47: Write Speed Factor R2W_FACTOR                 :0x2
10:12:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:12:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:12:47: FILE_FORMAT_GRP                               :0x0
10:12:47: COPY flag                                     :0x1
10:12:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:12:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:12:47: File_Format                                   :0x0
10:12:47: CRC                                           :0x0
10:12:47: ####CSD Registe Values####  

10:12:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:12:47: ProductSerialNumber = 0x23482900
10:12:47: CardMaximumLBA      = 0x3b72400
10:12:47: CardCapacity        = 32G
10:12:47: Is card secure      = 0
10:12:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:12:47: [DVTCommonLib]###  LogicalWrite called
10:12:49: [ WriteLba(0x1123357, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1591 ] 
10:12:49: [DVTCommonLib]###  LogicalWrite Completed 

10:12:49: [DVTCommonLib]###  LogicalRead called
10:12:51: [ ReadLba(0x1123357, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1592 ] 
10:12:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:12:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:12:51: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 173 times 

10:12:51: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:12:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:12:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1593 ] 
10:12:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:12:51: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:12:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:12:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:12:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:12:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:12:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DCF0>, <py_sfcl.CommandDataDefinition object at 0x0662DCC0>) , Command count = 1594 ] 
10:12:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:12:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A4B0>, <py_sfcl.CommandDataDefinition object at 0x0663A600>) , Command count = 1595 ] 
10:12:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:12:51: [ SetCardRCA(0x1, 0xD555) , Command count = 1596 ] 
10:12:51: [DVTCommonLib]### Identification :Idenfication of card completed 

10:12:51: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:12:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:12:51: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:12:51: [ SetBusWidth(0x1) , Command count = 1597 ] 
10:12:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:12:51: ####CSD Registe 2.0 Values####
10:12:51: CSD_STRUCTURE                                 :0x1
10:12:51: Reserv1                                       :0x0
10:12:51: Time Access 1 TAAC                            :0xe
10:12:51: Time Access 2 NSAC*100                        :0x0
10:12:51: Data Transfer Rate TRAN_SPEED                 :0x32
10:12:51: Card Command Classess CCC                     :0x5b5
10:12:51: Max Read Data Block Length  READ_BL_LEN       :0x9
10:12:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:12:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:12:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:12:51: DSR(driver stage register)  DSR_IMP           :0x0
10:12:51: Reserv2                                       :0x0
10:12:51: Device Size C_SIZE                            :0xedc8
10:12:51: Reserv3                                       :0x0
10:12:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:12:51: Erase Sector Size SECTOR_SIZE                 :0x7f
10:12:51: Write Protect Group Size WP_GRP_SIZE          :0x0
10:12:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:12:51: Reserv4                                       :0x0
10:12:51: Write Speed Factor R2W_FACTOR                 :0x2
10:12:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:12:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:12:51: FILE_FORMAT_GRP                               :0x0
10:12:51: COPY flag                                     :0x1
10:12:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:12:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:12:51: File_Format                                   :0x0
10:12:51: CRC                                           :0x0
10:12:51: ####CSD Registe Values####  

10:12:51: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:12:51: ProductSerialNumber = 0x23482900
10:12:51: CardMaximumLBA      = 0x3b72400
10:12:51: CardCapacity        = 32G
10:12:51: Is card secure      = 0
10:12:51: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:12:51: [DVTCommonLib]###  LogicalWrite called
10:12:53: [ WriteLba(0x3094596, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1598 ] 
10:12:53: [DVTCommonLib]###  LogicalWrite Completed 

10:12:53: [DVTCommonLib]###  LogicalRead called
10:12:54: [ ReadLba(0x3094596, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1599 ] 
10:12:54: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:12:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:12:54: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 174 times 

10:12:54: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:12:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:12:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1600 ] 
10:12:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:12:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:12:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:12:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:12:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:12:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:12:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A1E0>, <py_sfcl.CommandDataDefinition object at 0x0663A570>) , Command count = 1601 ] 
10:12:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:12:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E1E0>, <py_sfcl.CommandDataDefinition object at 0x0663E090>) , Command count = 1602 ] 
10:12:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:12:54: [ SetCardRCA(0x1, 0xD555) , Command count = 1603 ] 
10:12:54: [DVTCommonLib]### Identification :Idenfication of card completed 

10:12:54: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:12:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:12:54: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:12:54: [ SetBusWidth(0x1) , Command count = 1604 ] 
10:12:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:12:54: ####CSD Registe 2.0 Values####
10:12:54: CSD_STRUCTURE                                 :0x1
10:12:54: Reserv1                                       :0x0
10:12:54: Time Access 1 TAAC                            :0xe
10:12:54: Time Access 2 NSAC*100                        :0x0
10:12:54: Data Transfer Rate TRAN_SPEED                 :0x32
10:12:54: Card Command Classess CCC                     :0x5b5
10:12:54: Max Read Data Block Length  READ_BL_LEN       :0x9
10:12:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:12:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:12:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:12:54: DSR(driver stage register)  DSR_IMP           :0x0
10:12:54: Reserv2                                       :0x0
10:12:54: Device Size C_SIZE                            :0xedc8
10:12:54: Reserv3                                       :0x0
10:12:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:12:54: Erase Sector Size SECTOR_SIZE                 :0x7f
10:12:54: Write Protect Group Size WP_GRP_SIZE          :0x0
10:12:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:12:54: Reserv4                                       :0x0
10:12:54: Write Speed Factor R2W_FACTOR                 :0x2
10:12:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:12:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:12:54: FILE_FORMAT_GRP                               :0x0
10:12:54: COPY flag                                     :0x1
10:12:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:12:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:12:54: File_Format                                   :0x0
10:12:54: CRC                                           :0x0
10:12:54: ####CSD Registe Values####  

10:12:54: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:12:54: ProductSerialNumber = 0x23482900
10:12:54: CardMaximumLBA      = 0x3b72400
10:12:54: CardCapacity        = 32G
10:12:54: Is card secure      = 0
10:12:54: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:12:54: [DVTCommonLib]###  LogicalWrite called
10:12:56: [ WriteLba(0x38C5B13, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1605 ] 
10:12:56: [DVTCommonLib]###  LogicalWrite Completed 

10:12:56: [DVTCommonLib]###  LogicalRead called
10:12:58: [ ReadLba(0x38C5B13, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1606 ] 
10:12:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:12:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:12:58: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 175 times 

10:12:58: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:12:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:12:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1607 ] 
10:12:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:12:58: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:12:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:12:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:12:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:12:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:12:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663ADE0>, <py_sfcl.CommandDataDefinition object at 0x0663E300>) , Command count = 1608 ] 
10:12:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:12:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E1B0>, <py_sfcl.CommandDataDefinition object at 0x0663E450>) , Command count = 1609 ] 
10:12:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:12:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1610 ] 
10:12:58: [DVTCommonLib]### Identification :Idenfication of card completed 

10:12:58: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:12:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:12:58: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:12:58: [ SetBusWidth(0x1) , Command count = 1611 ] 
10:12:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:12:58: ####CSD Registe 2.0 Values####
10:12:58: CSD_STRUCTURE                                 :0x1
10:12:58: Reserv1                                       :0x0
10:12:58: Time Access 1 TAAC                            :0xe
10:12:58: Time Access 2 NSAC*100                        :0x0
10:12:58: Data Transfer Rate TRAN_SPEED                 :0x32
10:12:58: Card Command Classess CCC                     :0x5b5
10:12:58: Max Read Data Block Length  READ_BL_LEN       :0x9
10:12:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:12:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:12:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:12:58: DSR(driver stage register)  DSR_IMP           :0x0
10:12:58: Reserv2                                       :0x0
10:12:58: Device Size C_SIZE                            :0xedc8
10:12:58: Reserv3                                       :0x0
10:12:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:12:58: Erase Sector Size SECTOR_SIZE                 :0x7f
10:12:58: Write Protect Group Size WP_GRP_SIZE          :0x0
10:12:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:12:58: Reserv4                                       :0x0
10:12:58: Write Speed Factor R2W_FACTOR                 :0x2
10:12:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:12:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:12:58: FILE_FORMAT_GRP                               :0x0
10:12:58: COPY flag                                     :0x1
10:12:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:12:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:12:58: File_Format                                   :0x0
10:12:58: CRC                                           :0x0
10:12:58: ####CSD Registe Values####  

10:12:58: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:12:58: ProductSerialNumber = 0x23482900
10:12:58: CardMaximumLBA      = 0x3b72400
10:12:58: CardCapacity        = 32G
10:12:58: Is card secure      = 0
10:12:58: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:12:58: [DVTCommonLib]###  LogicalWrite called
10:12:59: [ WriteLba(0x1072DF5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1612 ] 
10:12:59: [DVTCommonLib]###  LogicalWrite Completed 

10:12:59: [DVTCommonLib]###  LogicalRead called
10:13:01: [ ReadLba(0x1072DF5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1613 ] 
10:13:01: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:13:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:13:01: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 176 times 

10:13:01: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:13:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:13:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1614 ] 
10:13:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:13:01: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:13:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:13:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:13:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:13:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:13:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E420>, <py_sfcl.CommandDataDefinition object at 0x0663E690>) , Command count = 1615 ] 
10:13:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:13:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E840>, <py_sfcl.CommandDataDefinition object at 0x0663E570>) , Command count = 1616 ] 
10:13:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:13:01: [ SetCardRCA(0x1, 0xD555) , Command count = 1617 ] 
10:13:01: [DVTCommonLib]### Identification :Idenfication of card completed 

10:13:01: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:13:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:13:01: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:13:01: [ SetBusWidth(0x1) , Command count = 1618 ] 
10:13:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:13:01: ####CSD Registe 2.0 Values####
10:13:01: CSD_STRUCTURE                                 :0x1
10:13:01: Reserv1                                       :0x0
10:13:01: Time Access 1 TAAC                            :0xe
10:13:01: Time Access 2 NSAC*100                        :0x0
10:13:01: Data Transfer Rate TRAN_SPEED                 :0x32
10:13:01: Card Command Classess CCC                     :0x5b5
10:13:01: Max Read Data Block Length  READ_BL_LEN       :0x9
10:13:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:13:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:13:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:13:01: DSR(driver stage register)  DSR_IMP           :0x0
10:13:01: Reserv2                                       :0x0
10:13:01: Device Size C_SIZE                            :0xedc8
10:13:01: Reserv3                                       :0x0
10:13:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:13:01: Erase Sector Size SECTOR_SIZE                 :0x7f
10:13:01: Write Protect Group Size WP_GRP_SIZE          :0x0
10:13:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:13:01: Reserv4                                       :0x0
10:13:01: Write Speed Factor R2W_FACTOR                 :0x2
10:13:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:13:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:13:01: FILE_FORMAT_GRP                               :0x0
10:13:01: COPY flag                                     :0x1
10:13:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:13:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:13:01: File_Format                                   :0x0
10:13:01: CRC                                           :0x0
10:13:01: ####CSD Registe Values####  

10:13:01: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:13:01: ProductSerialNumber = 0x23482900
10:13:01: CardMaximumLBA      = 0x3b72400
10:13:01: CardCapacity        = 32G
10:13:01: Is card secure      = 0
10:13:01: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:13:01: [DVTCommonLib]###  LogicalWrite called
10:13:03: [ WriteLba(0x343CDBA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1619 ] 
10:13:03: [DVTCommonLib]###  LogicalWrite Completed 

10:13:03: [DVTCommonLib]###  LogicalRead called
10:13:04: [ ReadLba(0x343CDBA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1620 ] 
10:13:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:13:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:13:04: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 177 times 

10:13:04: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:13:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:13:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1621 ] 
10:13:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:13:04: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:13:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:13:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:13:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:13:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:13:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AEA0>, <py_sfcl.CommandDataDefinition object at 0x0663E810>) , Command count = 1622 ] 
10:13:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:13:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663EA50>, <py_sfcl.CommandDataDefinition object at 0x0663E8D0>) , Command count = 1623 ] 
10:13:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:13:04: [ SetCardRCA(0x1, 0xD555) , Command count = 1624 ] 
10:13:05: [DVTCommonLib]### Identification :Idenfication of card completed 

10:13:05: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:13:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:13:05: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:13:05: [ SetBusWidth(0x1) , Command count = 1625 ] 
10:13:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:13:05: ####CSD Registe 2.0 Values####
10:13:05: CSD_STRUCTURE                                 :0x1
10:13:05: Reserv1                                       :0x0
10:13:05: Time Access 1 TAAC                            :0xe
10:13:05: Time Access 2 NSAC*100                        :0x0
10:13:05: Data Transfer Rate TRAN_SPEED                 :0x32
10:13:05: Card Command Classess CCC                     :0x5b5
10:13:05: Max Read Data Block Length  READ_BL_LEN       :0x9
10:13:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:13:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:13:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:13:05: DSR(driver stage register)  DSR_IMP           :0x0
10:13:05: Reserv2                                       :0x0
10:13:05: Device Size C_SIZE                            :0xedc8
10:13:05: Reserv3                                       :0x0
10:13:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:13:05: Erase Sector Size SECTOR_SIZE                 :0x7f
10:13:05: Write Protect Group Size WP_GRP_SIZE          :0x0
10:13:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:13:05: Reserv4                                       :0x0
10:13:05: Write Speed Factor R2W_FACTOR                 :0x2
10:13:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:13:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:13:05: FILE_FORMAT_GRP                               :0x0
10:13:05: COPY flag                                     :0x1
10:13:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:13:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:13:05: File_Format                                   :0x0
10:13:05: CRC                                           :0x0
10:13:05: ####CSD Registe Values####  

10:13:05: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:13:05: ProductSerialNumber = 0x23482900
10:13:05: CardMaximumLBA      = 0x3b72400
10:13:05: CardCapacity        = 32G
10:13:05: Is card secure      = 0
10:13:05: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:13:05: [DVTCommonLib]###  LogicalWrite called
10:13:06: [ WriteLba(0x11C6597, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1626 ] 
10:13:06: [DVTCommonLib]###  LogicalWrite Completed 

10:13:06: [DVTCommonLib]###  LogicalRead called
10:13:08: [ ReadLba(0x11C6597, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1627 ] 
10:13:08: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:13:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:13:08: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 178 times 

10:13:08: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:13:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:13:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1628 ] 
10:13:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:13:08: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:13:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:13:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:13:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:13:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:13:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A4E0>, <py_sfcl.CommandDataDefinition object at 0x066B1C90>) , Command count = 1629 ] 
10:13:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:13:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E780>, <py_sfcl.CommandDataDefinition object at 0x0663E6C0>) , Command count = 1630 ] 
10:13:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:13:08: [ SetCardRCA(0x1, 0xD555) , Command count = 1631 ] 
10:13:08: [DVTCommonLib]### Identification :Idenfication of card completed 

10:13:08: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:13:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:13:08: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:13:08: [ SetBusWidth(0x1) , Command count = 1632 ] 
10:13:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:13:08: ####CSD Registe 2.0 Values####
10:13:08: CSD_STRUCTURE                                 :0x1
10:13:08: Reserv1                                       :0x0
10:13:08: Time Access 1 TAAC                            :0xe
10:13:08: Time Access 2 NSAC*100                        :0x0
10:13:08: Data Transfer Rate TRAN_SPEED                 :0x32
10:13:08: Card Command Classess CCC                     :0x5b5
10:13:08: Max Read Data Block Length  READ_BL_LEN       :0x9
10:13:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:13:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:13:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:13:08: DSR(driver stage register)  DSR_IMP           :0x0
10:13:08: Reserv2                                       :0x0
10:13:08: Device Size C_SIZE                            :0xedc8
10:13:08: Reserv3                                       :0x0
10:13:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:13:08: Erase Sector Size SECTOR_SIZE                 :0x7f
10:13:08: Write Protect Group Size WP_GRP_SIZE          :0x0
10:13:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:13:08: Reserv4                                       :0x0
10:13:08: Write Speed Factor R2W_FACTOR                 :0x2
10:13:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:13:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:13:08: FILE_FORMAT_GRP                               :0x0
10:13:08: COPY flag                                     :0x1
10:13:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:13:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:13:08: File_Format                                   :0x0
10:13:08: CRC                                           :0x0
10:13:08: ####CSD Registe Values####  

10:13:08: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:13:08: ProductSerialNumber = 0x23482900
10:13:08: CardMaximumLBA      = 0x3b72400
10:13:08: CardCapacity        = 32G
10:13:08: Is card secure      = 0
10:13:08: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:13:08: [DVTCommonLib]###  LogicalWrite called
10:13:10: [ WriteLba(0x2D57FE7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1633 ] 
10:13:10: [DVTCommonLib]###  LogicalWrite Completed 

10:13:10: [DVTCommonLib]###  LogicalRead called
10:13:11: [ ReadLba(0x2D57FE7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1634 ] 
10:13:11: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:13:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:13:11: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 179 times 

10:13:11: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:13:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:13:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1635 ] 
10:13:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:13:11: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:13:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:13:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:13:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:13:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:13:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663ADB0>, <py_sfcl.CommandDataDefinition object at 0x0663AD80>) , Command count = 1636 ] 
10:13:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:13:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A540>, <py_sfcl.CommandDataDefinition object at 0x0663E4B0>) , Command count = 1637 ] 
10:13:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:13:11: [ SetCardRCA(0x1, 0xD555) , Command count = 1638 ] 
10:13:11: [DVTCommonLib]### Identification :Idenfication of card completed 

10:13:11: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:13:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:13:11: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:13:11: [ SetBusWidth(0x1) , Command count = 1639 ] 
10:13:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:13:11: ####CSD Registe 2.0 Values####
10:13:11: CSD_STRUCTURE                                 :0x1
10:13:11: Reserv1                                       :0x0
10:13:11: Time Access 1 TAAC                            :0xe
10:13:11: Time Access 2 NSAC*100                        :0x0
10:13:11: Data Transfer Rate TRAN_SPEED                 :0x32
10:13:11: Card Command Classess CCC                     :0x5b5
10:13:11: Max Read Data Block Length  READ_BL_LEN       :0x9
10:13:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:13:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:13:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:13:11: DSR(driver stage register)  DSR_IMP           :0x0
10:13:11: Reserv2                                       :0x0
10:13:11: Device Size C_SIZE                            :0xedc8
10:13:11: Reserv3                                       :0x0
10:13:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:13:11: Erase Sector Size SECTOR_SIZE                 :0x7f
10:13:11: Write Protect Group Size WP_GRP_SIZE          :0x0
10:13:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:13:11: Reserv4                                       :0x0
10:13:11: Write Speed Factor R2W_FACTOR                 :0x2
10:13:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:13:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:13:11: FILE_FORMAT_GRP                               :0x0
10:13:11: COPY flag                                     :0x1
10:13:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:13:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:13:11: File_Format                                   :0x0
10:13:11: CRC                                           :0x0
10:13:11: ####CSD Registe Values####  

10:13:11: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:13:11: ProductSerialNumber = 0x23482900
10:13:11: CardMaximumLBA      = 0x3b72400
10:13:11: CardCapacity        = 32G
10:13:11: Is card secure      = 0
10:13:11: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:13:11: [DVTCommonLib]###  LogicalWrite called
10:13:13: [ WriteLba(0xD67123, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1640 ] 
10:13:13: [DVTCommonLib]###  LogicalWrite Completed 

10:13:13: [DVTCommonLib]###  LogicalRead called
10:13:15: [ ReadLba(0xD67123, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1641 ] 
10:13:15: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:13:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:13:15: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 180 times 

10:13:15: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:13:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:13:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1642 ] 
10:13:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:13:15: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:13:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:13:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:13:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:13:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:13:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AED0>, <py_sfcl.CommandDataDefinition object at 0x0663AF00>) , Command count = 1643 ] 
10:13:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:13:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663EED0>, <py_sfcl.CommandDataDefinition object at 0x066B1D20>) , Command count = 1644 ] 
10:13:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:13:15: [ SetCardRCA(0x1, 0xD555) , Command count = 1645 ] 
10:13:15: [DVTCommonLib]### Identification :Idenfication of card completed 

10:13:15: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:13:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:13:15: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:13:15: [ SetBusWidth(0x1) , Command count = 1646 ] 
10:13:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:13:15: ####CSD Registe 2.0 Values####
10:13:15: CSD_STRUCTURE                                 :0x1
10:13:15: Reserv1                                       :0x0
10:13:15: Time Access 1 TAAC                            :0xe
10:13:15: Time Access 2 NSAC*100                        :0x0
10:13:15: Data Transfer Rate TRAN_SPEED                 :0x32
10:13:15: Card Command Classess CCC                     :0x5b5
10:13:15: Max Read Data Block Length  READ_BL_LEN       :0x9
10:13:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:13:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:13:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:13:15: DSR(driver stage register)  DSR_IMP           :0x0
10:13:15: Reserv2                                       :0x0
10:13:15: Device Size C_SIZE                            :0xedc8
10:13:15: Reserv3                                       :0x0
10:13:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:13:15: Erase Sector Size SECTOR_SIZE                 :0x7f
10:13:15: Write Protect Group Size WP_GRP_SIZE          :0x0
10:13:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:13:15: Reserv4                                       :0x0
10:13:15: Write Speed Factor R2W_FACTOR                 :0x2
10:13:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:13:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:13:15: FILE_FORMAT_GRP                               :0x0
10:13:15: COPY flag                                     :0x1
10:13:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:13:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:13:15: File_Format                                   :0x0
10:13:15: CRC                                           :0x0
10:13:15: ####CSD Registe Values####  

10:13:15: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:13:15: ProductSerialNumber = 0x23482900
10:13:15: CardMaximumLBA      = 0x3b72400
10:13:15: CardCapacity        = 32G
10:13:15: Is card secure      = 0
10:13:15: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:13:15: [DVTCommonLib]###  LogicalWrite called
10:13:16: [ WriteLba(0x3B5F041, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1647 ] 
10:13:16: [DVTCommonLib]###  LogicalWrite Completed 

10:13:16: [DVTCommonLib]###  LogicalRead called
10:13:18: [ ReadLba(0x3B5F041, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1648 ] 
10:13:18: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:13:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:13:18: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 181 times 

10:13:18: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:13:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:13:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1649 ] 
10:13:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:13:18: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:13:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:13:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:13:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:13:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:13:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663EE70>, <py_sfcl.CommandDataDefinition object at 0x0661DC00>) , Command count = 1650 ] 
10:13:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:13:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AD20>, <py_sfcl.CommandDataDefinition object at 0x066B1BD0>) , Command count = 1651 ] 
10:13:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:13:18: [ SetCardRCA(0x1, 0xD555) , Command count = 1652 ] 
10:13:18: [DVTCommonLib]### Identification :Idenfication of card completed 

10:13:18: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:13:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:13:18: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:13:18: [ SetBusWidth(0x1) , Command count = 1653 ] 
10:13:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:13:18: ####CSD Registe 2.0 Values####
10:13:18: CSD_STRUCTURE                                 :0x1
10:13:18: Reserv1                                       :0x0
10:13:18: Time Access 1 TAAC                            :0xe
10:13:18: Time Access 2 NSAC*100                        :0x0
10:13:18: Data Transfer Rate TRAN_SPEED                 :0x32
10:13:18: Card Command Classess CCC                     :0x5b5
10:13:18: Max Read Data Block Length  READ_BL_LEN       :0x9
10:13:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:13:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:13:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:13:18: DSR(driver stage register)  DSR_IMP           :0x0
10:13:18: Reserv2                                       :0x0
10:13:18: Device Size C_SIZE                            :0xedc8
10:13:18: Reserv3                                       :0x0
10:13:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:13:18: Erase Sector Size SECTOR_SIZE                 :0x7f
10:13:18: Write Protect Group Size WP_GRP_SIZE          :0x0
10:13:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:13:18: Reserv4                                       :0x0
10:13:18: Write Speed Factor R2W_FACTOR                 :0x2
10:13:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:13:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:13:18: FILE_FORMAT_GRP                               :0x0
10:13:18: COPY flag                                     :0x1
10:13:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:13:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:13:18: File_Format                                   :0x0
10:13:18: CRC                                           :0x0
10:13:18: ####CSD Registe Values####  

10:13:18: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:13:18: ProductSerialNumber = 0x23482900
10:13:18: CardMaximumLBA      = 0x3b72400
10:13:18: CardCapacity        = 32G
10:13:18: Is card secure      = 0
10:13:18: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:13:18: [DVTCommonLib]###  LogicalWrite called
10:13:20: [ WriteLba(0x28B53, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1654 ] 
10:13:20: [DVTCommonLib]###  LogicalWrite Completed 

10:13:20: [DVTCommonLib]###  LogicalRead called
10:13:21: [ ReadLba(0x28B53, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1655 ] 
10:13:21: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:13:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:13:21: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 182 times 

10:13:21: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:13:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:13:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1656 ] 
10:13:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:13:21: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:13:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:13:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:13:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:13:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:13:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B18A0>, <py_sfcl.CommandDataDefinition object at 0x066B17E0>) , Command count = 1657 ] 
10:13:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:13:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1780>, <py_sfcl.CommandDataDefinition object at 0x066B1810>) , Command count = 1658 ] 
10:13:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:13:22: [ SetCardRCA(0x1, 0xD555) , Command count = 1659 ] 
10:13:22: [DVTCommonLib]### Identification :Idenfication of card completed 

10:13:22: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:13:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:13:22: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:13:22: [ SetBusWidth(0x1) , Command count = 1660 ] 
10:13:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:13:22: ####CSD Registe 2.0 Values####
10:13:22: CSD_STRUCTURE                                 :0x1
10:13:22: Reserv1                                       :0x0
10:13:22: Time Access 1 TAAC                            :0xe
10:13:22: Time Access 2 NSAC*100                        :0x0
10:13:22: Data Transfer Rate TRAN_SPEED                 :0x32
10:13:22: Card Command Classess CCC                     :0x5b5
10:13:22: Max Read Data Block Length  READ_BL_LEN       :0x9
10:13:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:13:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:13:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:13:22: DSR(driver stage register)  DSR_IMP           :0x0
10:13:22: Reserv2                                       :0x0
10:13:22: Device Size C_SIZE                            :0xedc8
10:13:22: Reserv3                                       :0x0
10:13:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:13:22: Erase Sector Size SECTOR_SIZE                 :0x7f
10:13:22: Write Protect Group Size WP_GRP_SIZE          :0x0
10:13:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:13:22: Reserv4                                       :0x0
10:13:22: Write Speed Factor R2W_FACTOR                 :0x2
10:13:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:13:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:13:22: FILE_FORMAT_GRP                               :0x0
10:13:22: COPY flag                                     :0x1
10:13:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:13:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:13:22: File_Format                                   :0x0
10:13:22: CRC                                           :0x0
10:13:22: ####CSD Registe Values####  

10:13:22: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:13:22: ProductSerialNumber = 0x23482900
10:13:22: CardMaximumLBA      = 0x3b72400
10:13:22: CardCapacity        = 32G
10:13:22: Is card secure      = 0
10:13:22: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:13:22: [DVTCommonLib]###  LogicalWrite called
10:13:23: [ WriteLba(0x17D03D4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1661 ] 
10:13:23: [DVTCommonLib]###  LogicalWrite Completed 

10:13:23: [DVTCommonLib]###  LogicalRead called
10:13:25: [ ReadLba(0x17D03D4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1662 ] 
10:13:25: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:13:25: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:13:25: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 183 times 

10:13:25: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:13:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:13:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1663 ] 
10:13:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:13:25: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:13:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:13:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:13:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:13:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:13:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663ECC0>, <py_sfcl.CommandDataDefinition object at 0x066B1600>) , Command count = 1664 ] 
10:13:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:13:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1450>, <py_sfcl.CommandDataDefinition object at 0x066B1690>) , Command count = 1665 ] 
10:13:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:13:25: [ SetCardRCA(0x1, 0xD555) , Command count = 1666 ] 
10:13:25: [DVTCommonLib]### Identification :Idenfication of card completed 

10:13:25: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:13:25: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:13:25: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:13:25: [ SetBusWidth(0x1) , Command count = 1667 ] 
10:13:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:13:25: ####CSD Registe 2.0 Values####
10:13:25: CSD_STRUCTURE                                 :0x1
10:13:25: Reserv1                                       :0x0
10:13:25: Time Access 1 TAAC                            :0xe
10:13:25: Time Access 2 NSAC*100                        :0x0
10:13:25: Data Transfer Rate TRAN_SPEED                 :0x32
10:13:25: Card Command Classess CCC                     :0x5b5
10:13:25: Max Read Data Block Length  READ_BL_LEN       :0x9
10:13:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:13:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:13:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:13:25: DSR(driver stage register)  DSR_IMP           :0x0
10:13:25: Reserv2                                       :0x0
10:13:25: Device Size C_SIZE                            :0xedc8
10:13:25: Reserv3                                       :0x0
10:13:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:13:25: Erase Sector Size SECTOR_SIZE                 :0x7f
10:13:25: Write Protect Group Size WP_GRP_SIZE          :0x0
10:13:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:13:25: Reserv4                                       :0x0
10:13:25: Write Speed Factor R2W_FACTOR                 :0x2
10:13:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:13:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:13:25: FILE_FORMAT_GRP                               :0x0
10:13:25: COPY flag                                     :0x1
10:13:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:13:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:13:25: File_Format                                   :0x0
10:13:25: CRC                                           :0x0
10:13:25: ####CSD Registe Values####  

10:13:25: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:13:25: ProductSerialNumber = 0x23482900
10:13:25: CardMaximumLBA      = 0x3b72400
10:13:25: CardCapacity        = 32G
10:13:25: Is card secure      = 0
10:13:25: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:13:25: [DVTCommonLib]###  LogicalWrite called
10:13:27: [ WriteLba(0x21867, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1668 ] 
10:13:27: [DVTCommonLib]###  LogicalWrite Completed 

10:13:27: [DVTCommonLib]###  LogicalRead called
10:13:28: [ ReadLba(0x21867, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1669 ] 
10:13:28: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:13:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:13:28: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 184 times 

10:13:28: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:13:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:13:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1670 ] 
10:13:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:13:28: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:13:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:13:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:13:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:13:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:13:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DD20>, <py_sfcl.CommandDataDefinition object at 0x0663ED80>) , Command count = 1671 ] 
10:13:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:13:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1300>, <py_sfcl.CommandDataDefinition object at 0x066B14E0>) , Command count = 1672 ] 
10:13:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:13:28: [ SetCardRCA(0x1, 0xD555) , Command count = 1673 ] 
10:13:28: [DVTCommonLib]### Identification :Idenfication of card completed 

10:13:28: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:13:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:13:28: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:13:28: [ SetBusWidth(0x1) , Command count = 1674 ] 
10:13:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:13:28: ####CSD Registe 2.0 Values####
10:13:28: CSD_STRUCTURE                                 :0x1
10:13:28: Reserv1                                       :0x0
10:13:28: Time Access 1 TAAC                            :0xe
10:13:28: Time Access 2 NSAC*100                        :0x0
10:13:28: Data Transfer Rate TRAN_SPEED                 :0x32
10:13:28: Card Command Classess CCC                     :0x5b5
10:13:28: Max Read Data Block Length  READ_BL_LEN       :0x9
10:13:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:13:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:13:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:13:28: DSR(driver stage register)  DSR_IMP           :0x0
10:13:28: Reserv2                                       :0x0
10:13:28: Device Size C_SIZE                            :0xedc8
10:13:28: Reserv3                                       :0x0
10:13:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:13:28: Erase Sector Size SECTOR_SIZE                 :0x7f
10:13:28: Write Protect Group Size WP_GRP_SIZE          :0x0
10:13:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:13:28: Reserv4                                       :0x0
10:13:28: Write Speed Factor R2W_FACTOR                 :0x2
10:13:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:13:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:13:28: FILE_FORMAT_GRP                               :0x0
10:13:28: COPY flag                                     :0x1
10:13:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:13:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:13:28: File_Format                                   :0x0
10:13:28: CRC                                           :0x0
10:13:28: ####CSD Registe Values####  

10:13:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:13:28: ProductSerialNumber = 0x23482900
10:13:28: CardMaximumLBA      = 0x3b72400
10:13:28: CardCapacity        = 32G
10:13:28: Is card secure      = 0
10:13:28: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:13:28: [DVTCommonLib]###  LogicalWrite called
10:13:30: [ WriteLba(0xBA6963, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1675 ] 
10:13:30: [DVTCommonLib]###  LogicalWrite Completed 

10:13:30: [DVTCommonLib]###  LogicalRead called
10:13:32: [ ReadLba(0xBA6963, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1676 ] 
10:13:32: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:13:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:13:32: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 185 times 

10:13:32: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:13:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:13:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1677 ] 
10:13:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:13:32: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:13:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:13:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:13:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:13:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:13:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1360>, <py_sfcl.CommandDataDefinition object at 0x066B1330>) , Command count = 1678 ] 
10:13:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:13:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEE10>, <py_sfcl.CommandDataDefinition object at 0x066AE7B0>) , Command count = 1679 ] 
10:13:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:13:32: [ SetCardRCA(0x1, 0xD555) , Command count = 1680 ] 
10:13:32: [DVTCommonLib]### Identification :Idenfication of card completed 

10:13:32: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:13:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:13:32: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:13:32: [ SetBusWidth(0x1) , Command count = 1681 ] 
10:13:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:13:32: ####CSD Registe 2.0 Values####
10:13:32: CSD_STRUCTURE                                 :0x1
10:13:32: Reserv1                                       :0x0
10:13:32: Time Access 1 TAAC                            :0xe
10:13:32: Time Access 2 NSAC*100                        :0x0
10:13:32: Data Transfer Rate TRAN_SPEED                 :0x32
10:13:32: Card Command Classess CCC                     :0x5b5
10:13:32: Max Read Data Block Length  READ_BL_LEN       :0x9
10:13:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:13:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:13:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:13:32: DSR(driver stage register)  DSR_IMP           :0x0
10:13:32: Reserv2                                       :0x0
10:13:32: Device Size C_SIZE                            :0xedc8
10:13:32: Reserv3                                       :0x0
10:13:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:13:32: Erase Sector Size SECTOR_SIZE                 :0x7f
10:13:32: Write Protect Group Size WP_GRP_SIZE          :0x0
10:13:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:13:32: Reserv4                                       :0x0
10:13:32: Write Speed Factor R2W_FACTOR                 :0x2
10:13:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:13:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:13:32: FILE_FORMAT_GRP                               :0x0
10:13:32: COPY flag                                     :0x1
10:13:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:13:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:13:32: File_Format                                   :0x0
10:13:32: CRC                                           :0x0
10:13:32: ####CSD Registe Values####  

10:13:32: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:13:32: ProductSerialNumber = 0x23482900
10:13:32: CardMaximumLBA      = 0x3b72400
10:13:32: CardCapacity        = 32G
10:13:32: Is card secure      = 0
10:13:32: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:13:32: [DVTCommonLib]###  LogicalWrite called
10:13:33: [ WriteLba(0x3091E9F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1682 ] 
10:13:33: [DVTCommonLib]###  LogicalWrite Completed 

10:13:33: [DVTCommonLib]###  LogicalRead called
10:13:35: [ ReadLba(0x3091E9F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1683 ] 
10:13:35: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:13:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:13:35: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 186 times 

10:13:35: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:13:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:13:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1684 ] 
10:13:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:13:35: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:13:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:13:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:13:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:13:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:13:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1270>, <py_sfcl.CommandDataDefinition object at 0x066A6420>) , Command count = 1685 ] 
10:13:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:13:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE8D0>, <py_sfcl.CommandDataDefinition object at 0x066AEBA0>) , Command count = 1686 ] 
10:13:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:13:35: [ SetCardRCA(0x1, 0xD555) , Command count = 1687 ] 
10:13:35: [DVTCommonLib]### Identification :Idenfication of card completed 

10:13:35: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:13:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:13:35: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:13:35: [ SetBusWidth(0x1) , Command count = 1688 ] 
10:13:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:13:35: ####CSD Registe 2.0 Values####
10:13:35: CSD_STRUCTURE                                 :0x1
10:13:35: Reserv1                                       :0x0
10:13:35: Time Access 1 TAAC                            :0xe
10:13:35: Time Access 2 NSAC*100                        :0x0
10:13:35: Data Transfer Rate TRAN_SPEED                 :0x32
10:13:35: Card Command Classess CCC                     :0x5b5
10:13:35: Max Read Data Block Length  READ_BL_LEN       :0x9
10:13:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:13:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:13:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:13:35: DSR(driver stage register)  DSR_IMP           :0x0
10:13:35: Reserv2                                       :0x0
10:13:35: Device Size C_SIZE                            :0xedc8
10:13:35: Reserv3                                       :0x0
10:13:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:13:35: Erase Sector Size SECTOR_SIZE                 :0x7f
10:13:35: Write Protect Group Size WP_GRP_SIZE          :0x0
10:13:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:13:35: Reserv4                                       :0x0
10:13:35: Write Speed Factor R2W_FACTOR                 :0x2
10:13:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:13:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:13:35: FILE_FORMAT_GRP                               :0x0
10:13:35: COPY flag                                     :0x1
10:13:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:13:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:13:35: File_Format                                   :0x0
10:13:35: CRC                                           :0x0
10:13:35: ####CSD Registe Values####  

10:13:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:13:35: ProductSerialNumber = 0x23482900
10:13:35: CardMaximumLBA      = 0x3b72400
10:13:35: CardCapacity        = 32G
10:13:35: Is card secure      = 0
10:13:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:13:35: [DVTCommonLib]###  LogicalWrite called
10:13:37: [ WriteLba(0x11B2730, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1689 ] 
10:13:37: [DVTCommonLib]###  LogicalWrite Completed 

10:13:37: [DVTCommonLib]###  LogicalRead called
10:13:38: [ ReadLba(0x11B2730, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1690 ] 
10:13:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:13:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:13:38: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 187 times 

10:13:38: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:13:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:13:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1691 ] 
10:13:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:13:39: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:13:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:13:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:13:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:13:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:13:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A66F0>, <py_sfcl.CommandDataDefinition object at 0x066AE900>) , Command count = 1692 ] 
10:13:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:13:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE5A0>, <py_sfcl.CommandDataDefinition object at 0x066AE630>) , Command count = 1693 ] 
10:13:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:13:39: [ SetCardRCA(0x1, 0xD555) , Command count = 1694 ] 
10:13:39: [DVTCommonLib]### Identification :Idenfication of card completed 

10:13:39: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:13:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:13:39: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:13:39: [ SetBusWidth(0x1) , Command count = 1695 ] 
10:13:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:13:39: ####CSD Registe 2.0 Values####
10:13:39: CSD_STRUCTURE                                 :0x1
10:13:39: Reserv1                                       :0x0
10:13:39: Time Access 1 TAAC                            :0xe
10:13:39: Time Access 2 NSAC*100                        :0x0
10:13:39: Data Transfer Rate TRAN_SPEED                 :0x32
10:13:39: Card Command Classess CCC                     :0x5b5
10:13:39: Max Read Data Block Length  READ_BL_LEN       :0x9
10:13:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:13:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:13:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:13:39: DSR(driver stage register)  DSR_IMP           :0x0
10:13:39: Reserv2                                       :0x0
10:13:39: Device Size C_SIZE                            :0xedc8
10:13:39: Reserv3                                       :0x0
10:13:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:13:39: Erase Sector Size SECTOR_SIZE                 :0x7f
10:13:39: Write Protect Group Size WP_GRP_SIZE          :0x0
10:13:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:13:39: Reserv4                                       :0x0
10:13:39: Write Speed Factor R2W_FACTOR                 :0x2
10:13:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:13:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:13:39: FILE_FORMAT_GRP                               :0x0
10:13:39: COPY flag                                     :0x1
10:13:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:13:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:13:39: File_Format                                   :0x0
10:13:39: CRC                                           :0x0
10:13:39: ####CSD Registe Values####  

10:13:39: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:13:39: ProductSerialNumber = 0x23482900
10:13:39: CardMaximumLBA      = 0x3b72400
10:13:39: CardCapacity        = 32G
10:13:39: Is card secure      = 0
10:13:39: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:13:39: [DVTCommonLib]###  LogicalWrite called
10:13:40: [ WriteLba(0x1017C23, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1696 ] 
10:13:40: [DVTCommonLib]###  LogicalWrite Completed 

10:13:40: [DVTCommonLib]###  LogicalRead called
10:13:42: [ ReadLba(0x1017C23, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1697 ] 
10:13:42: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:13:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:13:42: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 188 times 

10:13:42: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:13:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:13:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1698 ] 
10:13:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:13:42: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:13:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:13:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:13:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:13:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:13:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE3C0>, <py_sfcl.CommandDataDefinition object at 0x066AE330>) , Command count = 1699 ] 
10:13:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:13:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6FC0>, <py_sfcl.CommandDataDefinition object at 0x066A6D20>) , Command count = 1700 ] 
10:13:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:13:42: [ SetCardRCA(0x1, 0xD555) , Command count = 1701 ] 
10:13:42: [DVTCommonLib]### Identification :Idenfication of card completed 

10:13:42: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:13:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:13:42: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:13:42: [ SetBusWidth(0x1) , Command count = 1702 ] 
10:13:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:13:42: ####CSD Registe 2.0 Values####
10:13:42: CSD_STRUCTURE                                 :0x1
10:13:42: Reserv1                                       :0x0
10:13:42: Time Access 1 TAAC                            :0xe
10:13:42: Time Access 2 NSAC*100                        :0x0
10:13:42: Data Transfer Rate TRAN_SPEED                 :0x32
10:13:42: Card Command Classess CCC                     :0x5b5
10:13:42: Max Read Data Block Length  READ_BL_LEN       :0x9
10:13:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:13:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:13:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:13:42: DSR(driver stage register)  DSR_IMP           :0x0
10:13:42: Reserv2                                       :0x0
10:13:42: Device Size C_SIZE                            :0xedc8
10:13:42: Reserv3                                       :0x0
10:13:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:13:42: Erase Sector Size SECTOR_SIZE                 :0x7f
10:13:42: Write Protect Group Size WP_GRP_SIZE          :0x0
10:13:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:13:42: Reserv4                                       :0x0
10:13:42: Write Speed Factor R2W_FACTOR                 :0x2
10:13:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:13:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:13:42: FILE_FORMAT_GRP                               :0x0
10:13:42: COPY flag                                     :0x1
10:13:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:13:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:13:42: File_Format                                   :0x0
10:13:42: CRC                                           :0x0
10:13:42: ####CSD Registe Values####  

10:13:42: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:13:42: ProductSerialNumber = 0x23482900
10:13:42: CardMaximumLBA      = 0x3b72400
10:13:42: CardCapacity        = 32G
10:13:42: Is card secure      = 0
10:13:42: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:13:42: [DVTCommonLib]###  LogicalWrite called
10:13:44: [ WriteLba(0x652A4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1703 ] 
10:13:44: [DVTCommonLib]###  LogicalWrite Completed 

10:13:44: [DVTCommonLib]###  LogicalRead called
10:13:45: [ ReadLba(0x652A4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1704 ] 
10:13:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:13:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:13:45: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 189 times 

10:13:45: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:13:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:13:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1705 ] 
10:13:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:13:45: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:13:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:13:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:13:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:13:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:13:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE3F0>, <py_sfcl.CommandDataDefinition object at 0x066A6A50>) , Command count = 1706 ] 
10:13:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:13:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6A80>, <py_sfcl.CommandDataDefinition object at 0x066A6B40>) , Command count = 1707 ] 
10:13:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:13:45: [ SetCardRCA(0x1, 0xD555) , Command count = 1708 ] 
10:13:45: [DVTCommonLib]### Identification :Idenfication of card completed 

10:13:45: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:13:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:13:45: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:13:45: [ SetBusWidth(0x1) , Command count = 1709 ] 
10:13:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:13:45: ####CSD Registe 2.0 Values####
10:13:45: CSD_STRUCTURE                                 :0x1
10:13:45: Reserv1                                       :0x0
10:13:45: Time Access 1 TAAC                            :0xe
10:13:45: Time Access 2 NSAC*100                        :0x0
10:13:45: Data Transfer Rate TRAN_SPEED                 :0x32
10:13:45: Card Command Classess CCC                     :0x5b5
10:13:45: Max Read Data Block Length  READ_BL_LEN       :0x9
10:13:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:13:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:13:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:13:45: DSR(driver stage register)  DSR_IMP           :0x0
10:13:45: Reserv2                                       :0x0
10:13:45: Device Size C_SIZE                            :0xedc8
10:13:45: Reserv3                                       :0x0
10:13:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:13:45: Erase Sector Size SECTOR_SIZE                 :0x7f
10:13:45: Write Protect Group Size WP_GRP_SIZE          :0x0
10:13:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:13:45: Reserv4                                       :0x0
10:13:45: Write Speed Factor R2W_FACTOR                 :0x2
10:13:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:13:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:13:45: FILE_FORMAT_GRP                               :0x0
10:13:45: COPY flag                                     :0x1
10:13:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:13:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:13:45: File_Format                                   :0x0
10:13:45: CRC                                           :0x0
10:13:45: ####CSD Registe Values####  

10:13:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:13:45: ProductSerialNumber = 0x23482900
10:13:45: CardMaximumLBA      = 0x3b72400
10:13:45: CardCapacity        = 32G
10:13:45: Is card secure      = 0
10:13:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:13:45: [DVTCommonLib]###  LogicalWrite called
10:13:47: [ WriteLba(0x30E28C7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1710 ] 
10:13:47: [DVTCommonLib]###  LogicalWrite Completed 

10:13:47: [DVTCommonLib]###  LogicalRead called
10:13:49: [ ReadLba(0x30E28C7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1711 ] 
10:13:49: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:13:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:13:49: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 190 times 

10:13:49: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:13:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:13:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1712 ] 
10:13:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:13:49: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:13:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:13:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:13:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:13:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:13:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6A20>, <py_sfcl.CommandDataDefinition object at 0x066A67E0>) , Command count = 1713 ] 
10:13:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:13:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A66C0>, <py_sfcl.CommandDataDefinition object at 0x066A6030>) , Command count = 1714 ] 
10:13:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:13:49: [ SetCardRCA(0x1, 0xD555) , Command count = 1715 ] 
10:13:49: [DVTCommonLib]### Identification :Idenfication of card completed 

10:13:49: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:13:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:13:49: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:13:49: [ SetBusWidth(0x1) , Command count = 1716 ] 
10:13:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:13:49: ####CSD Registe 2.0 Values####
10:13:49: CSD_STRUCTURE                                 :0x1
10:13:49: Reserv1                                       :0x0
10:13:49: Time Access 1 TAAC                            :0xe
10:13:49: Time Access 2 NSAC*100                        :0x0
10:13:49: Data Transfer Rate TRAN_SPEED                 :0x32
10:13:49: Card Command Classess CCC                     :0x5b5
10:13:49: Max Read Data Block Length  READ_BL_LEN       :0x9
10:13:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:13:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:13:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:13:49: DSR(driver stage register)  DSR_IMP           :0x0
10:13:49: Reserv2                                       :0x0
10:13:49: Device Size C_SIZE                            :0xedc8
10:13:49: Reserv3                                       :0x0
10:13:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:13:49: Erase Sector Size SECTOR_SIZE                 :0x7f
10:13:49: Write Protect Group Size WP_GRP_SIZE          :0x0
10:13:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:13:49: Reserv4                                       :0x0
10:13:49: Write Speed Factor R2W_FACTOR                 :0x2
10:13:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:13:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:13:49: FILE_FORMAT_GRP                               :0x0
10:13:49: COPY flag                                     :0x1
10:13:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:13:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:13:49: File_Format                                   :0x0
10:13:49: CRC                                           :0x0
10:13:49: ####CSD Registe Values####  

10:13:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:13:49: ProductSerialNumber = 0x23482900
10:13:49: CardMaximumLBA      = 0x3b72400
10:13:49: CardCapacity        = 32G
10:13:49: Is card secure      = 0
10:13:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:13:49: [DVTCommonLib]###  LogicalWrite called
10:13:50: [ WriteLba(0x193AF67, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1717 ] 
10:13:50: [DVTCommonLib]###  LogicalWrite Completed 

10:13:50: [DVTCommonLib]###  LogicalRead called
10:13:52: [ ReadLba(0x193AF67, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1718 ] 
10:13:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:13:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:13:52: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 191 times 

10:13:52: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:13:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:13:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1719 ] 
10:13:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:13:52: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:13:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:13:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:13:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:13:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:13:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663ACF0>, <py_sfcl.CommandDataDefinition object at 0x066A63C0>) , Command count = 1720 ] 
10:13:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:13:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6480>, <py_sfcl.CommandDataDefinition object at 0x066A62D0>) , Command count = 1721 ] 
10:13:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:13:52: [ SetCardRCA(0x1, 0xD555) , Command count = 1722 ] 
10:13:52: [DVTCommonLib]### Identification :Idenfication of card completed 

10:13:52: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:13:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:13:52: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:13:52: [ SetBusWidth(0x1) , Command count = 1723 ] 
10:13:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:13:52: ####CSD Registe 2.0 Values####
10:13:52: CSD_STRUCTURE                                 :0x1
10:13:52: Reserv1                                       :0x0
10:13:52: Time Access 1 TAAC                            :0xe
10:13:52: Time Access 2 NSAC*100                        :0x0
10:13:52: Data Transfer Rate TRAN_SPEED                 :0x32
10:13:52: Card Command Classess CCC                     :0x5b5
10:13:52: Max Read Data Block Length  READ_BL_LEN       :0x9
10:13:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:13:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:13:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:13:52: DSR(driver stage register)  DSR_IMP           :0x0
10:13:52: Reserv2                                       :0x0
10:13:52: Device Size C_SIZE                            :0xedc8
10:13:52: Reserv3                                       :0x0
10:13:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:13:52: Erase Sector Size SECTOR_SIZE                 :0x7f
10:13:52: Write Protect Group Size WP_GRP_SIZE          :0x0
10:13:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:13:52: Reserv4                                       :0x0
10:13:52: Write Speed Factor R2W_FACTOR                 :0x2
10:13:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:13:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:13:52: FILE_FORMAT_GRP                               :0x0
10:13:52: COPY flag                                     :0x1
10:13:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:13:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:13:52: File_Format                                   :0x0
10:13:52: CRC                                           :0x0
10:13:52: ####CSD Registe Values####  

10:13:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:13:52: ProductSerialNumber = 0x23482900
10:13:52: CardMaximumLBA      = 0x3b72400
10:13:52: CardCapacity        = 32G
10:13:52: Is card secure      = 0
10:13:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:13:52: [DVTCommonLib]###  LogicalWrite called
10:13:54: [ WriteLba(0x1CBCE1F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1724 ] 
10:13:54: [DVTCommonLib]###  LogicalWrite Completed 

10:13:54: [DVTCommonLib]###  LogicalRead called
10:13:55: [ ReadLba(0x1CBCE1F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1725 ] 
10:13:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:13:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:13:55: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 192 times 

10:13:55: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:13:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:13:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1726 ] 
10:13:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:13:56: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:13:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:13:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:13:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:13:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:13:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6150>, <py_sfcl.CommandDataDefinition object at 0x066A6660>) , Command count = 1727 ] 
10:13:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:13:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A67B0>, <py_sfcl.CommandDataDefinition object at 0x066A6750>) , Command count = 1728 ] 
10:13:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:13:56: [ SetCardRCA(0x1, 0xD555) , Command count = 1729 ] 
10:13:56: [DVTCommonLib]### Identification :Idenfication of card completed 

10:13:56: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:13:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:13:56: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:13:56: [ SetBusWidth(0x1) , Command count = 1730 ] 
10:13:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:13:56: ####CSD Registe 2.0 Values####
10:13:56: CSD_STRUCTURE                                 :0x1
10:13:56: Reserv1                                       :0x0
10:13:56: Time Access 1 TAAC                            :0xe
10:13:56: Time Access 2 NSAC*100                        :0x0
10:13:56: Data Transfer Rate TRAN_SPEED                 :0x32
10:13:56: Card Command Classess CCC                     :0x5b5
10:13:56: Max Read Data Block Length  READ_BL_LEN       :0x9
10:13:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:13:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:13:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:13:56: DSR(driver stage register)  DSR_IMP           :0x0
10:13:56: Reserv2                                       :0x0
10:13:56: Device Size C_SIZE                            :0xedc8
10:13:56: Reserv3                                       :0x0
10:13:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:13:56: Erase Sector Size SECTOR_SIZE                 :0x7f
10:13:56: Write Protect Group Size WP_GRP_SIZE          :0x0
10:13:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:13:56: Reserv4                                       :0x0
10:13:56: Write Speed Factor R2W_FACTOR                 :0x2
10:13:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:13:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:13:56: FILE_FORMAT_GRP                               :0x0
10:13:56: COPY flag                                     :0x1
10:13:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:13:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:13:56: File_Format                                   :0x0
10:13:56: CRC                                           :0x0
10:13:56: ####CSD Registe Values####  

10:13:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:13:56: ProductSerialNumber = 0x23482900
10:13:56: CardMaximumLBA      = 0x3b72400
10:13:56: CardCapacity        = 32G
10:13:56: Is card secure      = 0
10:13:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:13:56: [DVTCommonLib]###  LogicalWrite called
10:13:57: [ WriteLba(0x1E007F2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1731 ] 
10:13:57: [DVTCommonLib]###  LogicalWrite Completed 

10:13:57: [DVTCommonLib]###  LogicalRead called
10:13:59: [ ReadLba(0x1E007F2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1732 ] 
10:13:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:13:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:13:59: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 193 times 

10:13:59: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:13:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:13:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1733 ] 
10:13:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:13:59: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:13:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:13:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:13:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:13:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:13:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E0F0>, <py_sfcl.CommandDataDefinition object at 0x066A6300>) , Command count = 1734 ] 
10:13:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:13:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6BA0>, <py_sfcl.CommandDataDefinition object at 0x066A68A0>) , Command count = 1735 ] 
10:13:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:13:59: [ SetCardRCA(0x1, 0xD555) , Command count = 1736 ] 
10:13:59: [DVTCommonLib]### Identification :Idenfication of card completed 

10:13:59: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:13:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:13:59: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:13:59: [ SetBusWidth(0x1) , Command count = 1737 ] 
10:13:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:13:59: ####CSD Registe 2.0 Values####
10:13:59: CSD_STRUCTURE                                 :0x1
10:13:59: Reserv1                                       :0x0
10:13:59: Time Access 1 TAAC                            :0xe
10:13:59: Time Access 2 NSAC*100                        :0x0
10:13:59: Data Transfer Rate TRAN_SPEED                 :0x32
10:13:59: Card Command Classess CCC                     :0x5b5
10:13:59: Max Read Data Block Length  READ_BL_LEN       :0x9
10:13:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:13:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:13:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:13:59: DSR(driver stage register)  DSR_IMP           :0x0
10:13:59: Reserv2                                       :0x0
10:13:59: Device Size C_SIZE                            :0xedc8
10:13:59: Reserv3                                       :0x0
10:13:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:13:59: Erase Sector Size SECTOR_SIZE                 :0x7f
10:13:59: Write Protect Group Size WP_GRP_SIZE          :0x0
10:13:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:13:59: Reserv4                                       :0x0
10:13:59: Write Speed Factor R2W_FACTOR                 :0x2
10:13:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:13:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:13:59: FILE_FORMAT_GRP                               :0x0
10:13:59: COPY flag                                     :0x1
10:13:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:13:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:13:59: File_Format                                   :0x0
10:13:59: CRC                                           :0x0
10:13:59: ####CSD Registe Values####  

10:13:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:13:59: ProductSerialNumber = 0x23482900
10:13:59: CardMaximumLBA      = 0x3b72400
10:13:59: CardCapacity        = 32G
10:13:59: Is card secure      = 0
10:13:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:13:59: [DVTCommonLib]###  LogicalWrite called
10:14:01: [ WriteLba(0x2234823, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1738 ] 
10:14:01: [DVTCommonLib]###  LogicalWrite Completed 

10:14:01: [DVTCommonLib]###  LogicalRead called
10:14:02: [ ReadLba(0x2234823, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1739 ] 
10:14:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:14:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:14:02: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 194 times 

10:14:02: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:14:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1740 ] 
10:14:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:02: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:14:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE1E0>, <py_sfcl.CommandDataDefinition object at 0x066AE210>) , Command count = 1741 ] 
10:14:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6E40>, <py_sfcl.CommandDataDefinition object at 0x066A6DE0>) , Command count = 1742 ] 
10:14:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:14:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1743 ] 
10:14:02: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:02: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:14:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:14:02: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:14:02: [ SetBusWidth(0x1) , Command count = 1744 ] 
10:14:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:02: ####CSD Registe 2.0 Values####
10:14:02: CSD_STRUCTURE                                 :0x1
10:14:02: Reserv1                                       :0x0
10:14:02: Time Access 1 TAAC                            :0xe
10:14:02: Time Access 2 NSAC*100                        :0x0
10:14:02: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:02: Card Command Classess CCC                     :0x5b5
10:14:02: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:02: DSR(driver stage register)  DSR_IMP           :0x0
10:14:02: Reserv2                                       :0x0
10:14:02: Device Size C_SIZE                            :0xedc8
10:14:02: Reserv3                                       :0x0
10:14:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:02: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:02: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:02: Reserv4                                       :0x0
10:14:02: Write Speed Factor R2W_FACTOR                 :0x2
10:14:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:02: FILE_FORMAT_GRP                               :0x0
10:14:02: COPY flag                                     :0x1
10:14:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:02: File_Format                                   :0x0
10:14:02: CRC                                           :0x0
10:14:02: ####CSD Registe Values####  

10:14:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:14:03: ProductSerialNumber = 0x23482900
10:14:03: CardMaximumLBA      = 0x3b72400
10:14:03: CardCapacity        = 32G
10:14:03: Is card secure      = 0
10:14:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:14:03: [DVTCommonLib]###  LogicalWrite called
10:14:04: [ WriteLba(0x1E80A9D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1745 ] 
10:14:04: [DVTCommonLib]###  LogicalWrite Completed 

10:14:04: [DVTCommonLib]###  LogicalRead called
10:14:06: [ ReadLba(0x1E80A9D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1746 ] 
10:14:06: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:14:06: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:14:06: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 195 times 

10:14:06: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:14:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1747 ] 
10:14:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:06: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:14:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E360>, <py_sfcl.CommandDataDefinition object at 0x066A6E70>) , Command count = 1748 ] 
10:14:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE180>, <py_sfcl.CommandDataDefinition object at 0x066AE360>) , Command count = 1749 ] 
10:14:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:14:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1750 ] 
10:14:06: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:06: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:14:06: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:14:06: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:14:06: [ SetBusWidth(0x1) , Command count = 1751 ] 
10:14:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:06: ####CSD Registe 2.0 Values####
10:14:06: CSD_STRUCTURE                                 :0x1
10:14:06: Reserv1                                       :0x0
10:14:06: Time Access 1 TAAC                            :0xe
10:14:06: Time Access 2 NSAC*100                        :0x0
10:14:06: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:06: Card Command Classess CCC                     :0x5b5
10:14:06: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:06: DSR(driver stage register)  DSR_IMP           :0x0
10:14:06: Reserv2                                       :0x0
10:14:06: Device Size C_SIZE                            :0xedc8
10:14:06: Reserv3                                       :0x0
10:14:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:06: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:06: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:06: Reserv4                                       :0x0
10:14:06: Write Speed Factor R2W_FACTOR                 :0x2
10:14:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:06: FILE_FORMAT_GRP                               :0x0
10:14:06: COPY flag                                     :0x1
10:14:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:06: File_Format                                   :0x0
10:14:06: CRC                                           :0x0
10:14:06: ####CSD Registe Values####  

10:14:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:14:06: ProductSerialNumber = 0x23482900
10:14:06: CardMaximumLBA      = 0x3b72400
10:14:06: CardCapacity        = 32G
10:14:06: Is card secure      = 0
10:14:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:14:06: [DVTCommonLib]###  LogicalWrite called
10:14:08: [ WriteLba(0x8A712C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1752 ] 
10:14:08: [DVTCommonLib]###  LogicalWrite Completed 

10:14:08: [DVTCommonLib]###  LogicalRead called
10:14:09: [ ReadLba(0x8A712C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1753 ] 
10:14:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:14:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:14:09: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 196 times 

10:14:09: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:14:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1754 ] 
10:14:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:09: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:14:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E5D0>, <py_sfcl.CommandDataDefinition object at 0x066A63F0>) , Command count = 1755 ] 
10:14:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE570>, <py_sfcl.CommandDataDefinition object at 0x066AE270>) , Command count = 1756 ] 
10:14:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:14:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1757 ] 
10:14:09: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:09: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:14:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:14:09: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:14:09: [ SetBusWidth(0x1) , Command count = 1758 ] 
10:14:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:09: ####CSD Registe 2.0 Values####
10:14:09: CSD_STRUCTURE                                 :0x1
10:14:09: Reserv1                                       :0x0
10:14:09: Time Access 1 TAAC                            :0xe
10:14:09: Time Access 2 NSAC*100                        :0x0
10:14:09: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:09: Card Command Classess CCC                     :0x5b5
10:14:09: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:09: DSR(driver stage register)  DSR_IMP           :0x0
10:14:09: Reserv2                                       :0x0
10:14:09: Device Size C_SIZE                            :0xedc8
10:14:09: Reserv3                                       :0x0
10:14:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:09: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:09: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:09: Reserv4                                       :0x0
10:14:09: Write Speed Factor R2W_FACTOR                 :0x2
10:14:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:09: FILE_FORMAT_GRP                               :0x0
10:14:09: COPY flag                                     :0x1
10:14:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:09: File_Format                                   :0x0
10:14:09: CRC                                           :0x0
10:14:09: ####CSD Registe Values####  

10:14:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:14:09: ProductSerialNumber = 0x23482900
10:14:09: CardMaximumLBA      = 0x3b72400
10:14:09: CardCapacity        = 32G
10:14:09: Is card secure      = 0
10:14:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:14:09: [DVTCommonLib]###  LogicalWrite called
10:14:11: [ WriteLba(0x1C5F073, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1759 ] 
10:14:11: [DVTCommonLib]###  LogicalWrite Completed 

10:14:11: [DVTCommonLib]###  LogicalRead called
10:14:13: [ ReadLba(0x1C5F073, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1760 ] 
10:14:13: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:14:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:14:13: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 197 times 

10:14:13: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:14:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1761 ] 
10:14:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:13: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:14:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1CC0>, <py_sfcl.CommandDataDefinition object at 0x066A6270>) , Command count = 1762 ] 
10:14:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE960>, <py_sfcl.CommandDataDefinition object at 0x066AE6F0>) , Command count = 1763 ] 
10:14:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:14:13: [ SetCardRCA(0x1, 0xD555) , Command count = 1764 ] 
10:14:13: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:13: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:14:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:14:13: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:14:13: [ SetBusWidth(0x1) , Command count = 1765 ] 
10:14:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:13: ####CSD Registe 2.0 Values####
10:14:13: CSD_STRUCTURE                                 :0x1
10:14:13: Reserv1                                       :0x0
10:14:13: Time Access 1 TAAC                            :0xe
10:14:13: Time Access 2 NSAC*100                        :0x0
10:14:13: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:13: Card Command Classess CCC                     :0x5b5
10:14:13: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:13: DSR(driver stage register)  DSR_IMP           :0x0
10:14:13: Reserv2                                       :0x0
10:14:13: Device Size C_SIZE                            :0xedc8
10:14:13: Reserv3                                       :0x0
10:14:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:13: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:13: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:13: Reserv4                                       :0x0
10:14:13: Write Speed Factor R2W_FACTOR                 :0x2
10:14:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:13: FILE_FORMAT_GRP                               :0x0
10:14:13: COPY flag                                     :0x1
10:14:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:13: File_Format                                   :0x0
10:14:13: CRC                                           :0x0
10:14:13: ####CSD Registe Values####  

10:14:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:14:13: ProductSerialNumber = 0x23482900
10:14:13: CardMaximumLBA      = 0x3b72400
10:14:13: CardCapacity        = 32G
10:14:13: Is card secure      = 0
10:14:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:14:13: [DVTCommonLib]###  LogicalWrite called
10:14:14: [ WriteLba(0xA032AA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1766 ] 
10:14:14: [DVTCommonLib]###  LogicalWrite Completed 

10:14:14: [DVTCommonLib]###  LogicalRead called
10:14:16: [ ReadLba(0xA032AA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1767 ] 
10:14:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:14:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:14:16: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 198 times 

10:14:16: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:14:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1768 ] 
10:14:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:16: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:14:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE7A80>, <py_sfcl.CommandDataDefinition object at 0x066B1120>) , Command count = 1769 ] 
10:14:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AED50>, <py_sfcl.CommandDataDefinition object at 0x066AEB70>) , Command count = 1770 ] 
10:14:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:14:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1771 ] 
10:14:16: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:16: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:14:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:14:16: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:14:16: [ SetBusWidth(0x1) , Command count = 1772 ] 
10:14:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:16: ####CSD Registe 2.0 Values####
10:14:16: CSD_STRUCTURE                                 :0x1
10:14:16: Reserv1                                       :0x0
10:14:16: Time Access 1 TAAC                            :0xe
10:14:16: Time Access 2 NSAC*100                        :0x0
10:14:16: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:16: Card Command Classess CCC                     :0x5b5
10:14:16: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:16: DSR(driver stage register)  DSR_IMP           :0x0
10:14:16: Reserv2                                       :0x0
10:14:16: Device Size C_SIZE                            :0xedc8
10:14:16: Reserv3                                       :0x0
10:14:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:16: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:16: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:16: Reserv4                                       :0x0
10:14:16: Write Speed Factor R2W_FACTOR                 :0x2
10:14:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:16: FILE_FORMAT_GRP                               :0x0
10:14:16: COPY flag                                     :0x1
10:14:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:16: File_Format                                   :0x0
10:14:16: CRC                                           :0x0
10:14:16: ####CSD Registe Values####  

10:14:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:14:16: ProductSerialNumber = 0x23482900
10:14:16: CardMaximumLBA      = 0x3b72400
10:14:16: CardCapacity        = 32G
10:14:16: Is card secure      = 0
10:14:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:14:16: [DVTCommonLib]###  LogicalWrite called
10:14:18: [ WriteLba(0x245330E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1773 ] 
10:14:18: [DVTCommonLib]###  LogicalWrite Completed 

10:14:18: [DVTCommonLib]###  LogicalRead called
10:14:19: [ ReadLba(0x245330E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1774 ] 
10:14:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:14:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:14:19: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 199 times 

10:14:19: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:14:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1775 ] 
10:14:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:20: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:14:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE8A0>, <py_sfcl.CommandDataDefinition object at 0x066AEDB0>) , Command count = 1776 ] 
10:14:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1030>, <py_sfcl.CommandDataDefinition object at 0x05FDBC60>) , Command count = 1777 ] 
10:14:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:14:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1778 ] 
10:14:20: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:20: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:14:20: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:14:20: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:14:20: [ SetBusWidth(0x1) , Command count = 1779 ] 
10:14:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:20: ####CSD Registe 2.0 Values####
10:14:20: CSD_STRUCTURE                                 :0x1
10:14:20: Reserv1                                       :0x0
10:14:20: Time Access 1 TAAC                            :0xe
10:14:20: Time Access 2 NSAC*100                        :0x0
10:14:20: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:20: Card Command Classess CCC                     :0x5b5
10:14:20: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:20: DSR(driver stage register)  DSR_IMP           :0x0
10:14:20: Reserv2                                       :0x0
10:14:20: Device Size C_SIZE                            :0xedc8
10:14:20: Reserv3                                       :0x0
10:14:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:20: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:20: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:20: Reserv4                                       :0x0
10:14:20: Write Speed Factor R2W_FACTOR                 :0x2
10:14:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:20: FILE_FORMAT_GRP                               :0x0
10:14:20: COPY flag                                     :0x1
10:14:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:20: File_Format                                   :0x0
10:14:20: CRC                                           :0x0
10:14:20: ####CSD Registe Values####  

10:14:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:14:20: ProductSerialNumber = 0x23482900
10:14:20: CardMaximumLBA      = 0x3b72400
10:14:20: CardCapacity        = 32G
10:14:20: Is card secure      = 0
10:14:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:14:20: [DVTCommonLib]###  LogicalWrite called
10:14:21: [ WriteLba(0x12831D9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1780 ] 
10:14:21: [DVTCommonLib]###  LogicalWrite Completed 

10:14:21: [DVTCommonLib]###  LogicalRead called
10:14:23: [ ReadLba(0x12831D9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1781 ] 
10:14:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:14:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:14:23: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 200 times 

10:14:23: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:14:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1782 ] 
10:14:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:23: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:14:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC51B0>, <py_sfcl.CommandDataDefinition object at 0x05FC5090>) , Command count = 1783 ] 
10:14:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1180>, <py_sfcl.CommandDataDefinition object at 0x066B12D0>) , Command count = 1784 ] 
10:14:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:14:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1785 ] 
10:14:23: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:23: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:14:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:14:23: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:14:23: [ SetBusWidth(0x1) , Command count = 1786 ] 
10:14:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:23: ####CSD Registe 2.0 Values####
10:14:23: CSD_STRUCTURE                                 :0x1
10:14:23: Reserv1                                       :0x0
10:14:23: Time Access 1 TAAC                            :0xe
10:14:23: Time Access 2 NSAC*100                        :0x0
10:14:23: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:23: Card Command Classess CCC                     :0x5b5
10:14:23: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:23: DSR(driver stage register)  DSR_IMP           :0x0
10:14:23: Reserv2                                       :0x0
10:14:23: Device Size C_SIZE                            :0xedc8
10:14:23: Reserv3                                       :0x0
10:14:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:23: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:23: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:23: Reserv4                                       :0x0
10:14:23: Write Speed Factor R2W_FACTOR                 :0x2
10:14:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:23: FILE_FORMAT_GRP                               :0x0
10:14:23: COPY flag                                     :0x1
10:14:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:23: File_Format                                   :0x0
10:14:23: CRC                                           :0x0
10:14:23: ####CSD Registe Values####  

10:14:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:14:23: ProductSerialNumber = 0x23482900
10:14:23: CardMaximumLBA      = 0x3b72400
10:14:23: CardCapacity        = 32G
10:14:23: Is card secure      = 0
10:14:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:14:23: [DVTCommonLib]###  LogicalWrite called
10:14:25: [ WriteLba(0x27B47BF, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1787 ] 
10:14:25: [DVTCommonLib]###  LogicalWrite Completed 

10:14:25: [DVTCommonLib]###  LogicalRead called
10:14:26: [ ReadLba(0x27B47BF, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1788 ] 
10:14:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:14:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:14:26: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 201 times 

10:14:26: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:14:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1789 ] 
10:14:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:26: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:14:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FC5300>, <py_sfcl.CommandDataDefinition object at 0x05FCB210>) , Command count = 1790 ] 
10:14:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1390>, <py_sfcl.CommandDataDefinition object at 0x066B10C0>) , Command count = 1791 ] 
10:14:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:14:26: [ SetCardRCA(0x1, 0xD555) , Command count = 1792 ] 
10:14:26: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:26: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:14:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:14:26: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:14:26: [ SetBusWidth(0x1) , Command count = 1793 ] 
10:14:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:26: ####CSD Registe 2.0 Values####
10:14:26: CSD_STRUCTURE                                 :0x1
10:14:26: Reserv1                                       :0x0
10:14:26: Time Access 1 TAAC                            :0xe
10:14:26: Time Access 2 NSAC*100                        :0x0
10:14:26: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:26: Card Command Classess CCC                     :0x5b5
10:14:26: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:26: DSR(driver stage register)  DSR_IMP           :0x0
10:14:26: Reserv2                                       :0x0
10:14:26: Device Size C_SIZE                            :0xedc8
10:14:26: Reserv3                                       :0x0
10:14:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:26: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:26: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:26: Reserv4                                       :0x0
10:14:26: Write Speed Factor R2W_FACTOR                 :0x2
10:14:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:26: FILE_FORMAT_GRP                               :0x0
10:14:26: COPY flag                                     :0x1
10:14:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:26: File_Format                                   :0x0
10:14:26: CRC                                           :0x0
10:14:26: ####CSD Registe Values####  

10:14:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:14:26: ProductSerialNumber = 0x23482900
10:14:26: CardMaximumLBA      = 0x3b72400
10:14:26: CardCapacity        = 32G
10:14:26: Is card secure      = 0
10:14:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:14:26: [DVTCommonLib]###  LogicalWrite called
10:14:28: [ WriteLba(0x1AFD059, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1794 ] 
10:14:28: [DVTCommonLib]###  LogicalWrite Completed 

10:14:28: [DVTCommonLib]###  LogicalRead called
10:14:30: [ ReadLba(0x1AFD059, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1795 ] 
10:14:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:14:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:14:30: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 202 times 

10:14:30: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:14:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1796 ] 
10:14:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:30: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:14:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE7C30>, <py_sfcl.CommandDataDefinition object at 0x05FE7330>) , Command count = 1797 ] 
10:14:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1660>, <py_sfcl.CommandDataDefinition object at 0x066B13F0>) , Command count = 1798 ] 
10:14:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:14:30: [ SetCardRCA(0x1, 0xD555) , Command count = 1799 ] 
10:14:30: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:30: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:14:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:14:30: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:14:30: [ SetBusWidth(0x1) , Command count = 1800 ] 
10:14:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:30: ####CSD Registe 2.0 Values####
10:14:30: CSD_STRUCTURE                                 :0x1
10:14:30: Reserv1                                       :0x0
10:14:30: Time Access 1 TAAC                            :0xe
10:14:30: Time Access 2 NSAC*100                        :0x0
10:14:30: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:30: Card Command Classess CCC                     :0x5b5
10:14:30: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:30: DSR(driver stage register)  DSR_IMP           :0x0
10:14:30: Reserv2                                       :0x0
10:14:30: Device Size C_SIZE                            :0xedc8
10:14:30: Reserv3                                       :0x0
10:14:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:30: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:30: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:30: Reserv4                                       :0x0
10:14:30: Write Speed Factor R2W_FACTOR                 :0x2
10:14:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:30: FILE_FORMAT_GRP                               :0x0
10:14:30: COPY flag                                     :0x1
10:14:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:30: File_Format                                   :0x0
10:14:30: CRC                                           :0x0
10:14:30: ####CSD Registe Values####  

10:14:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:14:30: ProductSerialNumber = 0x23482900
10:14:30: CardMaximumLBA      = 0x3b72400
10:14:30: CardCapacity        = 32G
10:14:30: Is card secure      = 0
10:14:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:14:30: [DVTCommonLib]###  LogicalWrite called
10:14:31: [ WriteLba(0x2CD6A4B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1801 ] 
10:14:31: [DVTCommonLib]###  LogicalWrite Completed 

10:14:31: [DVTCommonLib]###  LogicalRead called
10:14:33: [ ReadLba(0x2CD6A4B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1802 ] 
10:14:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:14:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:14:33: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 203 times 

10:14:33: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:14:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1803 ] 
10:14:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:33: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:14:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05F8E780>, <py_sfcl.CommandDataDefinition object at 0x06033540>) , Command count = 1804 ] 
10:14:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1900>, <py_sfcl.CommandDataDefinition object at 0x066B17B0>) , Command count = 1805 ] 
10:14:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:14:33: [ SetCardRCA(0x1, 0xD555) , Command count = 1806 ] 
10:14:33: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:33: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:14:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:14:33: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:14:33: [ SetBusWidth(0x1) , Command count = 1807 ] 
10:14:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:33: ####CSD Registe 2.0 Values####
10:14:33: CSD_STRUCTURE                                 :0x1
10:14:33: Reserv1                                       :0x0
10:14:33: Time Access 1 TAAC                            :0xe
10:14:33: Time Access 2 NSAC*100                        :0x0
10:14:33: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:33: Card Command Classess CCC                     :0x5b5
10:14:33: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:33: DSR(driver stage register)  DSR_IMP           :0x0
10:14:33: Reserv2                                       :0x0
10:14:33: Device Size C_SIZE                            :0xedc8
10:14:33: Reserv3                                       :0x0
10:14:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:33: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:33: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:33: Reserv4                                       :0x0
10:14:33: Write Speed Factor R2W_FACTOR                 :0x2
10:14:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:33: FILE_FORMAT_GRP                               :0x0
10:14:33: COPY flag                                     :0x1
10:14:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:33: File_Format                                   :0x0
10:14:33: CRC                                           :0x0
10:14:33: ####CSD Registe Values####  

10:14:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:14:33: ProductSerialNumber = 0x23482900
10:14:33: CardMaximumLBA      = 0x3b72400
10:14:33: CardCapacity        = 32G
10:14:33: Is card secure      = 0
10:14:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:14:33: [DVTCommonLib]###  LogicalWrite called
10:14:35: [ WriteLba(0x268DE64, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1808 ] 
10:14:35: [DVTCommonLib]###  LogicalWrite Completed 

10:14:35: [DVTCommonLib]###  LogicalRead called
10:14:36: [ ReadLba(0x268DE64, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1809 ] 
10:14:36: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:14:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:14:36: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 204 times 

10:14:36: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:14:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1810 ] 
10:14:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:37: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:14:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEF2A0>, <py_sfcl.CommandDataDefinition object at 0x05FDBBD0>) , Command count = 1811 ] 
10:14:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1BA0>, <py_sfcl.CommandDataDefinition object at 0x066B1960>) , Command count = 1812 ] 
10:14:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:14:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1813 ] 
10:14:37: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:37: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:14:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:14:37: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:14:37: [ SetBusWidth(0x1) , Command count = 1814 ] 
10:14:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:37: ####CSD Registe 2.0 Values####
10:14:37: CSD_STRUCTURE                                 :0x1
10:14:37: Reserv1                                       :0x0
10:14:37: Time Access 1 TAAC                            :0xe
10:14:37: Time Access 2 NSAC*100                        :0x0
10:14:37: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:37: Card Command Classess CCC                     :0x5b5
10:14:37: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:37: DSR(driver stage register)  DSR_IMP           :0x0
10:14:37: Reserv2                                       :0x0
10:14:37: Device Size C_SIZE                            :0xedc8
10:14:37: Reserv3                                       :0x0
10:14:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:37: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:37: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:37: Reserv4                                       :0x0
10:14:37: Write Speed Factor R2W_FACTOR                 :0x2
10:14:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:37: FILE_FORMAT_GRP                               :0x0
10:14:37: COPY flag                                     :0x1
10:14:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:37: File_Format                                   :0x0
10:14:37: CRC                                           :0x0
10:14:37: ####CSD Registe Values####  

10:14:37: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:14:37: ProductSerialNumber = 0x23482900
10:14:37: CardMaximumLBA      = 0x3b72400
10:14:37: CardCapacity        = 32G
10:14:37: Is card secure      = 0
10:14:37: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:14:37: [DVTCommonLib]###  LogicalWrite called
10:14:38: [ WriteLba(0x289F67F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1815 ] 
10:14:38: [DVTCommonLib]###  LogicalWrite Completed 

10:14:38: [DVTCommonLib]###  LogicalRead called
10:14:40: [ ReadLba(0x289F67F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1816 ] 
10:14:40: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:14:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:14:40: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 205 times 

10:14:40: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:14:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1817 ] 
10:14:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:40: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:14:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038930>, <py_sfcl.CommandDataDefinition object at 0x060389F0>) , Command count = 1818 ] 
10:14:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1EA0>, <py_sfcl.CommandDataDefinition object at 0x066B1C00>) , Command count = 1819 ] 
10:14:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:14:40: [ SetCardRCA(0x1, 0xD555) , Command count = 1820 ] 
10:14:40: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:40: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:14:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:14:40: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:14:40: [ SetBusWidth(0x1) , Command count = 1821 ] 
10:14:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:40: ####CSD Registe 2.0 Values####
10:14:40: CSD_STRUCTURE                                 :0x1
10:14:40: Reserv1                                       :0x0
10:14:40: Time Access 1 TAAC                            :0xe
10:14:40: Time Access 2 NSAC*100                        :0x0
10:14:40: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:40: Card Command Classess CCC                     :0x5b5
10:14:40: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:40: DSR(driver stage register)  DSR_IMP           :0x0
10:14:40: Reserv2                                       :0x0
10:14:40: Device Size C_SIZE                            :0xedc8
10:14:40: Reserv3                                       :0x0
10:14:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:40: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:40: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:40: Reserv4                                       :0x0
10:14:40: Write Speed Factor R2W_FACTOR                 :0x2
10:14:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:40: FILE_FORMAT_GRP                               :0x0
10:14:40: COPY flag                                     :0x1
10:14:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:40: File_Format                                   :0x0
10:14:40: CRC                                           :0x0
10:14:40: ####CSD Registe Values####  

10:14:40: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:14:40: ProductSerialNumber = 0x23482900
10:14:40: CardMaximumLBA      = 0x3b72400
10:14:40: CardCapacity        = 32G
10:14:40: Is card secure      = 0
10:14:40: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:14:40: [DVTCommonLib]###  LogicalWrite called
10:14:42: [ WriteLba(0x213496F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1822 ] 
10:14:42: [DVTCommonLib]###  LogicalWrite Completed 

10:14:42: [DVTCommonLib]###  LogicalRead called
10:14:43: [ ReadLba(0x213496F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1823 ] 
10:14:43: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:14:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:14:43: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 206 times 

10:14:43: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:14:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1824 ] 
10:14:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:43: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:14:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038A20>, <py_sfcl.CommandDataDefinition object at 0x065921B0>) , Command count = 1825 ] 
10:14:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1DE0>, <py_sfcl.CommandDataDefinition object at 0x0662DD80>) , Command count = 1826 ] 
10:14:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:14:43: [ SetCardRCA(0x1, 0xD555) , Command count = 1827 ] 
10:14:43: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:43: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:14:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:14:43: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:14:43: [ SetBusWidth(0x1) , Command count = 1828 ] 
10:14:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:43: ####CSD Registe 2.0 Values####
10:14:43: CSD_STRUCTURE                                 :0x1
10:14:43: Reserv1                                       :0x0
10:14:43: Time Access 1 TAAC                            :0xe
10:14:43: Time Access 2 NSAC*100                        :0x0
10:14:43: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:43: Card Command Classess CCC                     :0x5b5
10:14:43: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:43: DSR(driver stage register)  DSR_IMP           :0x0
10:14:43: Reserv2                                       :0x0
10:14:43: Device Size C_SIZE                            :0xedc8
10:14:43: Reserv3                                       :0x0
10:14:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:43: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:43: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:43: Reserv4                                       :0x0
10:14:43: Write Speed Factor R2W_FACTOR                 :0x2
10:14:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:43: FILE_FORMAT_GRP                               :0x0
10:14:43: COPY flag                                     :0x1
10:14:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:43: File_Format                                   :0x0
10:14:43: CRC                                           :0x0
10:14:43: ####CSD Registe Values####  

10:14:43: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:14:43: ProductSerialNumber = 0x23482900
10:14:43: CardMaximumLBA      = 0x3b72400
10:14:43: CardCapacity        = 32G
10:14:43: Is card secure      = 0
10:14:43: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:14:43: [DVTCommonLib]###  LogicalWrite called
10:14:45: [ WriteLba(0x1FC5BE8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1829 ] 
10:14:45: [DVTCommonLib]###  LogicalWrite Completed 

10:14:45: [DVTCommonLib]###  LogicalRead called
10:14:47: [ ReadLba(0x1FC5BE8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1830 ] 
10:14:47: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:14:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:14:47: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 207 times 

10:14:47: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:14:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1831 ] 
10:14:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:14:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FEF030>, <py_sfcl.CommandDataDefinition object at 0x06038ED0>) , Command count = 1832 ] 
10:14:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1E40>, <py_sfcl.CommandDataDefinition object at 0x066B1C30>) , Command count = 1833 ] 
10:14:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:14:47: [ SetCardRCA(0x1, 0xD555) , Command count = 1834 ] 
10:14:47: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:47: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:14:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:14:47: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:14:47: [ SetBusWidth(0x1) , Command count = 1835 ] 
10:14:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:47: ####CSD Registe 2.0 Values####
10:14:47: CSD_STRUCTURE                                 :0x1
10:14:47: Reserv1                                       :0x0
10:14:47: Time Access 1 TAAC                            :0xe
10:14:47: Time Access 2 NSAC*100                        :0x0
10:14:47: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:47: Card Command Classess CCC                     :0x5b5
10:14:47: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:47: DSR(driver stage register)  DSR_IMP           :0x0
10:14:47: Reserv2                                       :0x0
10:14:47: Device Size C_SIZE                            :0xedc8
10:14:47: Reserv3                                       :0x0
10:14:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:47: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:47: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:47: Reserv4                                       :0x0
10:14:47: Write Speed Factor R2W_FACTOR                 :0x2
10:14:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:47: FILE_FORMAT_GRP                               :0x0
10:14:47: COPY flag                                     :0x1
10:14:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:47: File_Format                                   :0x0
10:14:47: CRC                                           :0x0
10:14:47: ####CSD Registe Values####  

10:14:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:14:47: ProductSerialNumber = 0x23482900
10:14:47: CardMaximumLBA      = 0x3b72400
10:14:47: CardCapacity        = 32G
10:14:47: Is card secure      = 0
10:14:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:14:47: [DVTCommonLib]###  LogicalWrite called
10:14:49: [ WriteLba(0x35EA7D7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1836 ] 
10:14:49: [DVTCommonLib]###  LogicalWrite Completed 

10:14:49: [DVTCommonLib]###  LogicalRead called
10:14:50: [ ReadLba(0x35EA7D7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1837 ] 
10:14:50: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:14:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:14:50: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 208 times 

10:14:50: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:14:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1838 ] 
10:14:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:50: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:14:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x065920C0>, <py_sfcl.CommandDataDefinition object at 0x0662DE70>) , Command count = 1839 ] 
10:14:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A5A0>, <py_sfcl.CommandDataDefinition object at 0x0663A630>) , Command count = 1840 ] 
10:14:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:14:50: [ SetCardRCA(0x1, 0xD555) , Command count = 1841 ] 
10:14:50: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:50: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:14:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:14:50: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:14:50: [ SetBusWidth(0x1) , Command count = 1842 ] 
10:14:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:50: ####CSD Registe 2.0 Values####
10:14:50: CSD_STRUCTURE                                 :0x1
10:14:50: Reserv1                                       :0x0
10:14:50: Time Access 1 TAAC                            :0xe
10:14:50: Time Access 2 NSAC*100                        :0x0
10:14:50: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:50: Card Command Classess CCC                     :0x5b5
10:14:50: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:50: DSR(driver stage register)  DSR_IMP           :0x0
10:14:50: Reserv2                                       :0x0
10:14:50: Device Size C_SIZE                            :0xedc8
10:14:50: Reserv3                                       :0x0
10:14:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:50: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:50: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:50: Reserv4                                       :0x0
10:14:50: Write Speed Factor R2W_FACTOR                 :0x2
10:14:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:50: FILE_FORMAT_GRP                               :0x0
10:14:50: COPY flag                                     :0x1
10:14:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:50: File_Format                                   :0x0
10:14:50: CRC                                           :0x0
10:14:50: ####CSD Registe Values####  

10:14:50: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:14:50: ProductSerialNumber = 0x23482900
10:14:50: CardMaximumLBA      = 0x3b72400
10:14:50: CardCapacity        = 32G
10:14:50: Is card secure      = 0
10:14:50: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:14:50: [DVTCommonLib]###  LogicalWrite called
10:14:52: [ WriteLba(0x204414E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1843 ] 
10:14:52: [DVTCommonLib]###  LogicalWrite Completed 

10:14:52: [DVTCommonLib]###  LogicalRead called
10:14:54: [ ReadLba(0x204414E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1844 ] 
10:14:54: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:14:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:14:54: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 209 times 

10:14:54: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:14:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1845 ] 
10:14:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:14:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1D50>, <py_sfcl.CommandDataDefinition object at 0x0662DCF0>) , Command count = 1846 ] 
10:14:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AF60>, <py_sfcl.CommandDataDefinition object at 0x0663AE40>) , Command count = 1847 ] 
10:14:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:14:54: [ SetCardRCA(0x1, 0xD555) , Command count = 1848 ] 
10:14:54: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:54: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:14:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:14:54: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:14:54: [ SetBusWidth(0x1) , Command count = 1849 ] 
10:14:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:54: ####CSD Registe 2.0 Values####
10:14:54: CSD_STRUCTURE                                 :0x1
10:14:54: Reserv1                                       :0x0
10:14:54: Time Access 1 TAAC                            :0xe
10:14:54: Time Access 2 NSAC*100                        :0x0
10:14:54: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:54: Card Command Classess CCC                     :0x5b5
10:14:54: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:54: DSR(driver stage register)  DSR_IMP           :0x0
10:14:54: Reserv2                                       :0x0
10:14:54: Device Size C_SIZE                            :0xedc8
10:14:54: Reserv3                                       :0x0
10:14:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:54: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:54: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:54: Reserv4                                       :0x0
10:14:54: Write Speed Factor R2W_FACTOR                 :0x2
10:14:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:54: FILE_FORMAT_GRP                               :0x0
10:14:54: COPY flag                                     :0x1
10:14:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:54: File_Format                                   :0x0
10:14:54: CRC                                           :0x0
10:14:54: ####CSD Registe Values####  

10:14:54: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:14:54: ProductSerialNumber = 0x23482900
10:14:54: CardMaximumLBA      = 0x3b72400
10:14:54: CardCapacity        = 32G
10:14:54: Is card secure      = 0
10:14:54: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:14:54: [DVTCommonLib]###  LogicalWrite called
10:14:55: [ WriteLba(0x1279138, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1850 ] 
10:14:55: [DVTCommonLib]###  LogicalWrite Completed 

10:14:55: [DVTCommonLib]###  LogicalRead called
10:14:57: [ ReadLba(0x1279138, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1851 ] 
10:14:57: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:14:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:14:57: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 210 times 

10:14:57: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:14:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:14:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1852 ] 
10:14:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:14:57: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:14:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:14:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:14:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:14:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:14:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06592090>, <py_sfcl.CommandDataDefinition object at 0x0663E210>) , Command count = 1853 ] 
10:14:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:14:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E180>, <py_sfcl.CommandDataDefinition object at 0x0663A570>) , Command count = 1854 ] 
10:14:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:14:57: [ SetCardRCA(0x1, 0xD555) , Command count = 1855 ] 
10:14:57: [DVTCommonLib]### Identification :Idenfication of card completed 

10:14:57: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:14:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:14:57: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:14:57: [ SetBusWidth(0x1) , Command count = 1856 ] 
10:14:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:14:57: ####CSD Registe 2.0 Values####
10:14:57: CSD_STRUCTURE                                 :0x1
10:14:57: Reserv1                                       :0x0
10:14:57: Time Access 1 TAAC                            :0xe
10:14:57: Time Access 2 NSAC*100                        :0x0
10:14:57: Data Transfer Rate TRAN_SPEED                 :0x32
10:14:57: Card Command Classess CCC                     :0x5b5
10:14:57: Max Read Data Block Length  READ_BL_LEN       :0x9
10:14:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:14:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:14:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:14:57: DSR(driver stage register)  DSR_IMP           :0x0
10:14:57: Reserv2                                       :0x0
10:14:57: Device Size C_SIZE                            :0xedc8
10:14:57: Reserv3                                       :0x0
10:14:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:14:57: Erase Sector Size SECTOR_SIZE                 :0x7f
10:14:57: Write Protect Group Size WP_GRP_SIZE          :0x0
10:14:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:14:57: Reserv4                                       :0x0
10:14:57: Write Speed Factor R2W_FACTOR                 :0x2
10:14:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:14:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:14:57: FILE_FORMAT_GRP                               :0x0
10:14:57: COPY flag                                     :0x1
10:14:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:14:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:14:57: File_Format                                   :0x0
10:14:57: CRC                                           :0x0
10:14:57: ####CSD Registe Values####  

10:14:57: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:14:57: ProductSerialNumber = 0x23482900
10:14:57: CardMaximumLBA      = 0x3b72400
10:14:57: CardCapacity        = 32G
10:14:57: Is card secure      = 0
10:14:57: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:14:57: [DVTCommonLib]###  LogicalWrite called
10:14:59: [ WriteLba(0xBD7666, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1857 ] 
10:14:59: [DVTCommonLib]###  LogicalWrite Completed 

10:14:59: [DVTCommonLib]###  LogicalRead called
10:15:00: [ ReadLba(0xBD7666, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1858 ] 
10:15:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:15:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:15:00: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 211 times 

10:15:00: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:15:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:15:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1859 ] 
10:15:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:15:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:15:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:15:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:15:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:15:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:15:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A4B0>, <py_sfcl.CommandDataDefinition object at 0x0663ADE0>) , Command count = 1860 ] 
10:15:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:15:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E480>, <py_sfcl.CommandDataDefinition object at 0x0663E060>) , Command count = 1861 ] 
10:15:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:15:00: [ SetCardRCA(0x1, 0xD555) , Command count = 1862 ] 
10:15:00: [DVTCommonLib]### Identification :Idenfication of card completed 

10:15:00: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:15:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:15:00: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:15:00: [ SetBusWidth(0x1) , Command count = 1863 ] 
10:15:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:15:00: ####CSD Registe 2.0 Values####
10:15:00: CSD_STRUCTURE                                 :0x1
10:15:00: Reserv1                                       :0x0
10:15:00: Time Access 1 TAAC                            :0xe
10:15:00: Time Access 2 NSAC*100                        :0x0
10:15:00: Data Transfer Rate TRAN_SPEED                 :0x32
10:15:00: Card Command Classess CCC                     :0x5b5
10:15:00: Max Read Data Block Length  READ_BL_LEN       :0x9
10:15:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:15:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:15:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:15:00: DSR(driver stage register)  DSR_IMP           :0x0
10:15:00: Reserv2                                       :0x0
10:15:00: Device Size C_SIZE                            :0xedc8
10:15:00: Reserv3                                       :0x0
10:15:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:15:00: Erase Sector Size SECTOR_SIZE                 :0x7f
10:15:00: Write Protect Group Size WP_GRP_SIZE          :0x0
10:15:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:15:00: Reserv4                                       :0x0
10:15:00: Write Speed Factor R2W_FACTOR                 :0x2
10:15:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:15:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:15:00: FILE_FORMAT_GRP                               :0x0
10:15:00: COPY flag                                     :0x1
10:15:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:15:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:15:00: File_Format                                   :0x0
10:15:00: CRC                                           :0x0
10:15:00: ####CSD Registe Values####  

10:15:01: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:15:01: ProductSerialNumber = 0x23482900
10:15:01: CardMaximumLBA      = 0x3b72400
10:15:01: CardCapacity        = 32G
10:15:01: Is card secure      = 0
10:15:01: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:15:01: [DVTCommonLib]###  LogicalWrite called
10:15:02: [ WriteLba(0x28B8A62, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1864 ] 
10:15:02: [DVTCommonLib]###  LogicalWrite Completed 

10:15:02: [DVTCommonLib]###  LogicalRead called
10:15:04: [ ReadLba(0x28B8A62, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1865 ] 
10:15:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:15:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:15:04: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 212 times 

10:15:04: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:15:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:15:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1866 ] 
10:15:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:15:04: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:15:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:15:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:15:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:15:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:15:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E1E0>, <py_sfcl.CommandDataDefinition object at 0x0663E420>) , Command count = 1867 ] 
10:15:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:15:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E870>, <py_sfcl.CommandDataDefinition object at 0x0663E600>) , Command count = 1868 ] 
10:15:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:15:04: [ SetCardRCA(0x1, 0xD555) , Command count = 1869 ] 
10:15:04: [DVTCommonLib]### Identification :Idenfication of card completed 

10:15:04: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:15:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:15:04: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:15:04: [ SetBusWidth(0x1) , Command count = 1870 ] 
10:15:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:15:04: ####CSD Registe 2.0 Values####
10:15:04: CSD_STRUCTURE                                 :0x1
10:15:04: Reserv1                                       :0x0
10:15:04: Time Access 1 TAAC                            :0xe
10:15:04: Time Access 2 NSAC*100                        :0x0
10:15:04: Data Transfer Rate TRAN_SPEED                 :0x32
10:15:04: Card Command Classess CCC                     :0x5b5
10:15:04: Max Read Data Block Length  READ_BL_LEN       :0x9
10:15:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:15:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:15:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:15:04: DSR(driver stage register)  DSR_IMP           :0x0
10:15:04: Reserv2                                       :0x0
10:15:04: Device Size C_SIZE                            :0xedc8
10:15:04: Reserv3                                       :0x0
10:15:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:15:04: Erase Sector Size SECTOR_SIZE                 :0x7f
10:15:04: Write Protect Group Size WP_GRP_SIZE          :0x0
10:15:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:15:04: Reserv4                                       :0x0
10:15:04: Write Speed Factor R2W_FACTOR                 :0x2
10:15:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:15:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:15:04: FILE_FORMAT_GRP                               :0x0
10:15:04: COPY flag                                     :0x1
10:15:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:15:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:15:04: File_Format                                   :0x0
10:15:04: CRC                                           :0x0
10:15:04: ####CSD Registe Values####  

10:15:04: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:15:04: ProductSerialNumber = 0x23482900
10:15:04: CardMaximumLBA      = 0x3b72400
10:15:04: CardCapacity        = 32G
10:15:04: Is card secure      = 0
10:15:04: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:15:04: [DVTCommonLib]###  LogicalWrite called
10:15:06: [ WriteLba(0x1116DC8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1871 ] 
10:15:06: [DVTCommonLib]###  LogicalWrite Completed 

10:15:06: [DVTCommonLib]###  LogicalRead called
10:15:07: [ ReadLba(0x1116DC8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1872 ] 
10:15:07: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:15:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:15:07: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 213 times 

10:15:07: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:15:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:15:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1873 ] 
10:15:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:15:07: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:15:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:15:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:15:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:15:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:15:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AEA0>, <py_sfcl.CommandDataDefinition object at 0x0663E1B0>) , Command count = 1874 ] 
10:15:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:15:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663EAB0>, <py_sfcl.CommandDataDefinition object at 0x0663EA80>) , Command count = 1875 ] 
10:15:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:15:07: [ SetCardRCA(0x1, 0xD555) , Command count = 1876 ] 
10:15:07: [DVTCommonLib]### Identification :Idenfication of card completed 

10:15:07: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:15:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:15:07: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:15:07: [ SetBusWidth(0x1) , Command count = 1877 ] 
10:15:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:15:07: ####CSD Registe 2.0 Values####
10:15:07: CSD_STRUCTURE                                 :0x1
10:15:07: Reserv1                                       :0x0
10:15:07: Time Access 1 TAAC                            :0xe
10:15:07: Time Access 2 NSAC*100                        :0x0
10:15:07: Data Transfer Rate TRAN_SPEED                 :0x32
10:15:07: Card Command Classess CCC                     :0x5b5
10:15:07: Max Read Data Block Length  READ_BL_LEN       :0x9
10:15:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:15:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:15:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:15:07: DSR(driver stage register)  DSR_IMP           :0x0
10:15:07: Reserv2                                       :0x0
10:15:07: Device Size C_SIZE                            :0xedc8
10:15:07: Reserv3                                       :0x0
10:15:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:15:07: Erase Sector Size SECTOR_SIZE                 :0x7f
10:15:07: Write Protect Group Size WP_GRP_SIZE          :0x0
10:15:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:15:07: Reserv4                                       :0x0
10:15:07: Write Speed Factor R2W_FACTOR                 :0x2
10:15:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:15:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:15:07: FILE_FORMAT_GRP                               :0x0
10:15:07: COPY flag                                     :0x1
10:15:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:15:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:15:07: File_Format                                   :0x0
10:15:07: CRC                                           :0x0
10:15:07: ####CSD Registe Values####  

10:15:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:15:07: ProductSerialNumber = 0x23482900
10:15:07: CardMaximumLBA      = 0x3b72400
10:15:07: CardCapacity        = 32G
10:15:07: Is card secure      = 0
10:15:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:15:07: [DVTCommonLib]###  LogicalWrite called
10:15:09: [ WriteLba(0x9AB02A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1878 ] 
10:15:09: [DVTCommonLib]###  LogicalWrite Completed 

10:15:09: [DVTCommonLib]###  LogicalRead called
10:15:11: [ ReadLba(0x9AB02A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1879 ] 
10:15:11: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:15:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:15:11: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 214 times 

10:15:11: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:15:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:15:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1880 ] 
10:15:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:15:11: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:15:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:15:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:15:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:15:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:15:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A4E0>, <py_sfcl.CommandDataDefinition object at 0x066B1C90>) , Command count = 1881 ] 
10:15:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:15:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A0C0>, <py_sfcl.CommandDataDefinition object at 0x0663E630>) , Command count = 1882 ] 
10:15:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:15:11: [ SetCardRCA(0x1, 0xD555) , Command count = 1883 ] 
10:15:11: [DVTCommonLib]### Identification :Idenfication of card completed 

10:15:11: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:15:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:15:11: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:15:11: [ SetBusWidth(0x1) , Command count = 1884 ] 
10:15:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:15:11: ####CSD Registe 2.0 Values####
10:15:11: CSD_STRUCTURE                                 :0x1
10:15:11: Reserv1                                       :0x0
10:15:11: Time Access 1 TAAC                            :0xe
10:15:11: Time Access 2 NSAC*100                        :0x0
10:15:11: Data Transfer Rate TRAN_SPEED                 :0x32
10:15:11: Card Command Classess CCC                     :0x5b5
10:15:11: Max Read Data Block Length  READ_BL_LEN       :0x9
10:15:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:15:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:15:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:15:11: DSR(driver stage register)  DSR_IMP           :0x0
10:15:11: Reserv2                                       :0x0
10:15:11: Device Size C_SIZE                            :0xedc8
10:15:11: Reserv3                                       :0x0
10:15:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:15:11: Erase Sector Size SECTOR_SIZE                 :0x7f
10:15:11: Write Protect Group Size WP_GRP_SIZE          :0x0
10:15:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:15:11: Reserv4                                       :0x0
10:15:11: Write Speed Factor R2W_FACTOR                 :0x2
10:15:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:15:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:15:11: FILE_FORMAT_GRP                               :0x0
10:15:11: COPY flag                                     :0x1
10:15:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:15:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:15:11: File_Format                                   :0x0
10:15:11: CRC                                           :0x0
10:15:11: ####CSD Registe Values####  

10:15:11: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:15:11: ProductSerialNumber = 0x23482900
10:15:11: CardMaximumLBA      = 0x3b72400
10:15:11: CardCapacity        = 32G
10:15:11: Is card secure      = 0
10:15:11: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:15:11: [DVTCommonLib]###  LogicalWrite called
10:15:12: [ WriteLba(0x39A3B13, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1885 ] 
10:15:12: [DVTCommonLib]###  LogicalWrite Completed 

10:15:12: [DVTCommonLib]###  LogicalRead called
10:15:14: [ ReadLba(0x39A3B13, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1886 ] 
10:15:14: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:15:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:15:14: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 215 times 

10:15:14: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:15:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:15:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1887 ] 
10:15:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:15:14: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:15:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:15:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:15:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:15:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:15:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663ADB0>, <py_sfcl.CommandDataDefinition object at 0x0663AD80>) , Command count = 1888 ] 
10:15:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:15:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6330>, <py_sfcl.CommandDataDefinition object at 0x0663EA50>) , Command count = 1889 ] 
10:15:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:15:14: [ SetCardRCA(0x1, 0xD555) , Command count = 1890 ] 
10:15:14: [DVTCommonLib]### Identification :Idenfication of card completed 

10:15:14: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:15:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:15:14: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:15:14: [ SetBusWidth(0x1) , Command count = 1891 ] 
10:15:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:15:14: ####CSD Registe 2.0 Values####
10:15:14: CSD_STRUCTURE                                 :0x1
10:15:14: Reserv1                                       :0x0
10:15:14: Time Access 1 TAAC                            :0xe
10:15:14: Time Access 2 NSAC*100                        :0x0
10:15:14: Data Transfer Rate TRAN_SPEED                 :0x32
10:15:14: Card Command Classess CCC                     :0x5b5
10:15:14: Max Read Data Block Length  READ_BL_LEN       :0x9
10:15:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:15:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:15:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:15:14: DSR(driver stage register)  DSR_IMP           :0x0
10:15:14: Reserv2                                       :0x0
10:15:14: Device Size C_SIZE                            :0xedc8
10:15:14: Reserv3                                       :0x0
10:15:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:15:14: Erase Sector Size SECTOR_SIZE                 :0x7f
10:15:14: Write Protect Group Size WP_GRP_SIZE          :0x0
10:15:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:15:14: Reserv4                                       :0x0
10:15:14: Write Speed Factor R2W_FACTOR                 :0x2
10:15:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:15:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:15:14: FILE_FORMAT_GRP                               :0x0
10:15:14: COPY flag                                     :0x1
10:15:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:15:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:15:14: File_Format                                   :0x0
10:15:14: CRC                                           :0x0
10:15:14: ####CSD Registe Values####  

10:15:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:15:14: ProductSerialNumber = 0x23482900
10:15:14: CardMaximumLBA      = 0x3b72400
10:15:14: CardCapacity        = 32G
10:15:14: Is card secure      = 0
10:15:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:15:14: [DVTCommonLib]###  LogicalWrite called
10:15:16: [ WriteLba(0x3A0F98E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1892 ] 
10:15:16: [DVTCommonLib]###  LogicalWrite Completed 

10:15:16: [DVTCommonLib]###  LogicalRead called
10:15:17: [ ReadLba(0x3A0F98E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1893 ] 
10:15:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:15:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:15:17: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 216 times 

10:15:17: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:15:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:15:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1894 ] 
10:15:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:15:17: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:15:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:15:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:15:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:15:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:15:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AED0>, <py_sfcl.CommandDataDefinition object at 0x0663AF00>) , Command count = 1895 ] 
10:15:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:15:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1B40>, <py_sfcl.CommandDataDefinition object at 0x0663E780>) , Command count = 1896 ] 
10:15:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:15:17: [ SetCardRCA(0x1, 0xD555) , Command count = 1897 ] 
10:15:18: [DVTCommonLib]### Identification :Idenfication of card completed 

10:15:18: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:15:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:15:18: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:15:18: [ SetBusWidth(0x1) , Command count = 1898 ] 
10:15:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:15:18: ####CSD Registe 2.0 Values####
10:15:18: CSD_STRUCTURE                                 :0x1
10:15:18: Reserv1                                       :0x0
10:15:18: Time Access 1 TAAC                            :0xe
10:15:18: Time Access 2 NSAC*100                        :0x0
10:15:18: Data Transfer Rate TRAN_SPEED                 :0x32
10:15:18: Card Command Classess CCC                     :0x5b5
10:15:18: Max Read Data Block Length  READ_BL_LEN       :0x9
10:15:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:15:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:15:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:15:18: DSR(driver stage register)  DSR_IMP           :0x0
10:15:18: Reserv2                                       :0x0
10:15:18: Device Size C_SIZE                            :0xedc8
10:15:18: Reserv3                                       :0x0
10:15:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:15:18: Erase Sector Size SECTOR_SIZE                 :0x7f
10:15:18: Write Protect Group Size WP_GRP_SIZE          :0x0
10:15:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:15:18: Reserv4                                       :0x0
10:15:18: Write Speed Factor R2W_FACTOR                 :0x2
10:15:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:15:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:15:18: FILE_FORMAT_GRP                               :0x0
10:15:18: COPY flag                                     :0x1
10:15:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:15:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:15:18: File_Format                                   :0x0
10:15:18: CRC                                           :0x0
10:15:18: ####CSD Registe Values####  

10:15:18: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:15:18: ProductSerialNumber = 0x23482900
10:15:18: CardMaximumLBA      = 0x3b72400
10:15:18: CardCapacity        = 32G
10:15:18: Is card secure      = 0
10:15:18: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:15:18: [DVTCommonLib]###  LogicalWrite called
10:15:19: [ WriteLba(0x3540DD0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1899 ] 
10:15:19: [DVTCommonLib]###  LogicalWrite Completed 

10:15:19: [DVTCommonLib]###  LogicalRead called
10:15:21: [ ReadLba(0x3540DD0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1900 ] 
10:15:21: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:15:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:15:21: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 217 times 

10:15:21: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:15:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:15:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1901 ] 
10:15:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:15:21: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:15:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:15:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:15:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:15:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:15:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663A540>, <py_sfcl.CommandDataDefinition object at 0x0663EE70>) , Command count = 1902 ] 
10:15:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:15:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1AB0>, <py_sfcl.CommandDataDefinition object at 0x066B1A80>) , Command count = 1903 ] 
10:15:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:15:21: [ SetCardRCA(0x1, 0xD555) , Command count = 1904 ] 
10:15:21: [DVTCommonLib]### Identification :Idenfication of card completed 

10:15:21: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:15:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:15:21: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:15:21: [ SetBusWidth(0x1) , Command count = 1905 ] 
10:15:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:15:21: ####CSD Registe 2.0 Values####
10:15:21: CSD_STRUCTURE                                 :0x1
10:15:21: Reserv1                                       :0x0
10:15:21: Time Access 1 TAAC                            :0xe
10:15:21: Time Access 2 NSAC*100                        :0x0
10:15:21: Data Transfer Rate TRAN_SPEED                 :0x32
10:15:21: Card Command Classess CCC                     :0x5b5
10:15:21: Max Read Data Block Length  READ_BL_LEN       :0x9
10:15:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:15:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:15:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:15:21: DSR(driver stage register)  DSR_IMP           :0x0
10:15:21: Reserv2                                       :0x0
10:15:21: Device Size C_SIZE                            :0xedc8
10:15:21: Reserv3                                       :0x0
10:15:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:15:21: Erase Sector Size SECTOR_SIZE                 :0x7f
10:15:21: Write Protect Group Size WP_GRP_SIZE          :0x0
10:15:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:15:21: Reserv4                                       :0x0
10:15:21: Write Speed Factor R2W_FACTOR                 :0x2
10:15:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:15:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:15:21: FILE_FORMAT_GRP                               :0x0
10:15:21: COPY flag                                     :0x1
10:15:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:15:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:15:21: File_Format                                   :0x0
10:15:21: CRC                                           :0x0
10:15:21: ####CSD Registe Values####  

10:15:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:15:21: ProductSerialNumber = 0x23482900
10:15:21: CardMaximumLBA      = 0x3b72400
10:15:21: CardCapacity        = 32G
10:15:21: Is card secure      = 0
10:15:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:15:21: [DVTCommonLib]###  LogicalWrite called
10:15:23: [ WriteLba(0x31466BA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1906 ] 
10:15:23: [DVTCommonLib]###  LogicalWrite Completed 

10:15:23: [DVTCommonLib]###  LogicalRead called
10:15:24: [ ReadLba(0x31466BA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1907 ] 
10:15:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:15:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:15:24: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 218 times 

10:15:24: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:15:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:15:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1908 ] 
10:15:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:15:24: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:15:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:15:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:15:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:15:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:15:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663EED0>, <py_sfcl.CommandDataDefinition object at 0x066B18A0>) , Command count = 1909 ] 
10:15:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:15:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1750>, <py_sfcl.CommandDataDefinition object at 0x066B1930>) , Command count = 1910 ] 
10:15:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:15:24: [ SetCardRCA(0x1, 0xD555) , Command count = 1911 ] 
10:15:24: [DVTCommonLib]### Identification :Idenfication of card completed 

10:15:24: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:15:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:15:24: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:15:24: [ SetBusWidth(0x1) , Command count = 1912 ] 
10:15:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:15:24: ####CSD Registe 2.0 Values####
10:15:24: CSD_STRUCTURE                                 :0x1
10:15:24: Reserv1                                       :0x0
10:15:24: Time Access 1 TAAC                            :0xe
10:15:24: Time Access 2 NSAC*100                        :0x0
10:15:24: Data Transfer Rate TRAN_SPEED                 :0x32
10:15:24: Card Command Classess CCC                     :0x5b5
10:15:24: Max Read Data Block Length  READ_BL_LEN       :0x9
10:15:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:15:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:15:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:15:24: DSR(driver stage register)  DSR_IMP           :0x0
10:15:24: Reserv2                                       :0x0
10:15:24: Device Size C_SIZE                            :0xedc8
10:15:24: Reserv3                                       :0x0
10:15:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:15:24: Erase Sector Size SECTOR_SIZE                 :0x7f
10:15:24: Write Protect Group Size WP_GRP_SIZE          :0x0
10:15:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:15:24: Reserv4                                       :0x0
10:15:24: Write Speed Factor R2W_FACTOR                 :0x2
10:15:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:15:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:15:24: FILE_FORMAT_GRP                               :0x0
10:15:24: COPY flag                                     :0x1
10:15:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:15:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:15:24: File_Format                                   :0x0
10:15:24: CRC                                           :0x0
10:15:24: ####CSD Registe Values####  

10:15:24: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:15:24: ProductSerialNumber = 0x23482900
10:15:24: CardMaximumLBA      = 0x3b72400
10:15:24: CardCapacity        = 32G
10:15:24: Is card secure      = 0
10:15:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:15:24: [DVTCommonLib]###  LogicalWrite called
10:15:26: [ WriteLba(0x2E94105, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1913 ] 
10:15:26: [DVTCommonLib]###  LogicalWrite Completed 

10:15:26: [DVTCommonLib]###  LogicalRead called
10:15:28: [ ReadLba(0x2E94105, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1914 ] 
10:15:28: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:15:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:15:28: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 219 times 

10:15:28: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:15:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:15:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1915 ] 
10:15:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:15:28: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:15:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:15:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:15:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:15:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:15:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663AD20>, <py_sfcl.CommandDataDefinition object at 0x0663ECC0>) , Command count = 1916 ] 
10:15:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:15:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1570>, <py_sfcl.CommandDataDefinition object at 0x066B1630>) , Command count = 1917 ] 
10:15:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:15:28: [ SetCardRCA(0x1, 0xD555) , Command count = 1918 ] 
10:15:28: [DVTCommonLib]### Identification :Idenfication of card completed 

10:15:28: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:15:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:15:28: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:15:28: [ SetBusWidth(0x1) , Command count = 1919 ] 
10:15:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:15:28: ####CSD Registe 2.0 Values####
10:15:28: CSD_STRUCTURE                                 :0x1
10:15:28: Reserv1                                       :0x0
10:15:28: Time Access 1 TAAC                            :0xe
10:15:28: Time Access 2 NSAC*100                        :0x0
10:15:28: Data Transfer Rate TRAN_SPEED                 :0x32
10:15:28: Card Command Classess CCC                     :0x5b5
10:15:28: Max Read Data Block Length  READ_BL_LEN       :0x9
10:15:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:15:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:15:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:15:28: DSR(driver stage register)  DSR_IMP           :0x0
10:15:28: Reserv2                                       :0x0
10:15:28: Device Size C_SIZE                            :0xedc8
10:15:28: Reserv3                                       :0x0
10:15:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:15:28: Erase Sector Size SECTOR_SIZE                 :0x7f
10:15:28: Write Protect Group Size WP_GRP_SIZE          :0x0
10:15:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:15:28: Reserv4                                       :0x0
10:15:28: Write Speed Factor R2W_FACTOR                 :0x2
10:15:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:15:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:15:28: FILE_FORMAT_GRP                               :0x0
10:15:28: COPY flag                                     :0x1
10:15:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:15:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:15:28: File_Format                                   :0x0
10:15:28: CRC                                           :0x0
10:15:28: ####CSD Registe Values####  

10:15:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:15:28: ProductSerialNumber = 0x23482900
10:15:28: CardMaximumLBA      = 0x3b72400
10:15:28: CardCapacity        = 32G
10:15:28: Is card secure      = 0
10:15:28: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:15:28: [DVTCommonLib]###  LogicalWrite called
10:15:29: [ WriteLba(0x2093312, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1920 ] 
10:15:29: [DVTCommonLib]###  LogicalWrite Completed 

10:15:29: [DVTCommonLib]###  LogicalRead called
10:15:31: [ ReadLba(0x2093312, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1921 ] 
10:15:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:15:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:15:31: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 220 times 

10:15:31: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:15:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:15:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1922 ] 
10:15:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:15:31: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:15:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:15:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:15:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:15:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:15:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0662DD20>, <py_sfcl.CommandDataDefinition object at 0x0663ED80>) , Command count = 1923 ] 
10:15:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:15:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEF60>, <py_sfcl.CommandDataDefinition object at 0x066B12A0>) , Command count = 1924 ] 
10:15:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:15:31: [ SetCardRCA(0x1, 0xD555) , Command count = 1925 ] 
10:15:31: [DVTCommonLib]### Identification :Idenfication of card completed 

10:15:31: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:15:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:15:31: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:15:31: [ SetBusWidth(0x1) , Command count = 1926 ] 
10:15:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:15:31: ####CSD Registe 2.0 Values####
10:15:31: CSD_STRUCTURE                                 :0x1
10:15:31: Reserv1                                       :0x0
10:15:31: Time Access 1 TAAC                            :0xe
10:15:31: Time Access 2 NSAC*100                        :0x0
10:15:31: Data Transfer Rate TRAN_SPEED                 :0x32
10:15:31: Card Command Classess CCC                     :0x5b5
10:15:31: Max Read Data Block Length  READ_BL_LEN       :0x9
10:15:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:15:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:15:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:15:31: DSR(driver stage register)  DSR_IMP           :0x0
10:15:31: Reserv2                                       :0x0
10:15:31: Device Size C_SIZE                            :0xedc8
10:15:31: Reserv3                                       :0x0
10:15:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:15:31: Erase Sector Size SECTOR_SIZE                 :0x7f
10:15:31: Write Protect Group Size WP_GRP_SIZE          :0x0
10:15:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:15:31: Reserv4                                       :0x0
10:15:31: Write Speed Factor R2W_FACTOR                 :0x2
10:15:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:15:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:15:31: FILE_FORMAT_GRP                               :0x0
10:15:31: COPY flag                                     :0x1
10:15:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:15:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:15:31: File_Format                                   :0x0
10:15:31: CRC                                           :0x0
10:15:31: ####CSD Registe Values####  

10:15:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:15:31: ProductSerialNumber = 0x23482900
10:15:31: CardMaximumLBA      = 0x3b72400
10:15:31: CardCapacity        = 32G
10:15:31: Is card secure      = 0
10:15:31: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:15:31: [DVTCommonLib]###  LogicalWrite called
10:15:33: [ WriteLba(0x261DF35, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1927 ] 
10:15:33: [DVTCommonLib]###  LogicalWrite Completed 

10:15:33: [DVTCommonLib]###  LogicalRead called
10:15:34: [ ReadLba(0x261DF35, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1928 ] 
10:15:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:15:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:15:34: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 221 times 

10:15:34: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:15:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:15:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1929 ] 
10:15:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:15:35: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:15:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:15:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:15:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:15:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:15:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1360>, <py_sfcl.CommandDataDefinition object at 0x066B1330>) , Command count = 1930 ] 
10:15:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:15:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AED80>, <py_sfcl.CommandDataDefinition object at 0x066AEF90>) , Command count = 1931 ] 
10:15:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:15:35: [ SetCardRCA(0x1, 0xD555) , Command count = 1932 ] 
10:15:35: [DVTCommonLib]### Identification :Idenfication of card completed 

10:15:35: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:15:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:15:35: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:15:35: [ SetBusWidth(0x1) , Command count = 1933 ] 
10:15:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:15:35: ####CSD Registe 2.0 Values####
10:15:35: CSD_STRUCTURE                                 :0x1
10:15:35: Reserv1                                       :0x0
10:15:35: Time Access 1 TAAC                            :0xe
10:15:35: Time Access 2 NSAC*100                        :0x0
10:15:35: Data Transfer Rate TRAN_SPEED                 :0x32
10:15:35: Card Command Classess CCC                     :0x5b5
10:15:35: Max Read Data Block Length  READ_BL_LEN       :0x9
10:15:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:15:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:15:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:15:35: DSR(driver stage register)  DSR_IMP           :0x0
10:15:35: Reserv2                                       :0x0
10:15:35: Device Size C_SIZE                            :0xedc8
10:15:35: Reserv3                                       :0x0
10:15:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:15:35: Erase Sector Size SECTOR_SIZE                 :0x7f
10:15:35: Write Protect Group Size WP_GRP_SIZE          :0x0
10:15:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:15:35: Reserv4                                       :0x0
10:15:35: Write Speed Factor R2W_FACTOR                 :0x2
10:15:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:15:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:15:35: FILE_FORMAT_GRP                               :0x0
10:15:35: COPY flag                                     :0x1
10:15:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:15:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:15:35: File_Format                                   :0x0
10:15:35: CRC                                           :0x0
10:15:35: ####CSD Registe Values####  

10:15:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:15:35: ProductSerialNumber = 0x23482900
10:15:35: CardMaximumLBA      = 0x3b72400
10:15:35: CardCapacity        = 32G
10:15:35: Is card secure      = 0
10:15:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:15:35: [DVTCommonLib]###  LogicalWrite called
10:15:36: [ WriteLba(0xA83E50, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1934 ] 
10:15:36: [DVTCommonLib]###  LogicalWrite Completed 

10:15:36: [DVTCommonLib]###  LogicalRead called
10:15:38: [ ReadLba(0xA83E50, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1935 ] 
10:15:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:15:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:15:38: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 222 times 

10:15:38: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:15:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:15:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1936 ] 
10:15:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:15:38: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:15:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:15:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:15:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:15:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:15:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1300>, <py_sfcl.CommandDataDefinition object at 0x066B1270>) , Command count = 1937 ] 
10:15:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:15:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEAB0>, <py_sfcl.CommandDataDefinition object at 0x066AEA20>) , Command count = 1938 ] 
10:15:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:15:38: [ SetCardRCA(0x1, 0xD555) , Command count = 1939 ] 
10:15:38: [DVTCommonLib]### Identification :Idenfication of card completed 

10:15:38: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:15:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:15:38: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:15:38: [ SetBusWidth(0x1) , Command count = 1940 ] 
10:15:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:15:38: ####CSD Registe 2.0 Values####
10:15:38: CSD_STRUCTURE                                 :0x1
10:15:38: Reserv1                                       :0x0
10:15:38: Time Access 1 TAAC                            :0xe
10:15:38: Time Access 2 NSAC*100                        :0x0
10:15:38: Data Transfer Rate TRAN_SPEED                 :0x32
10:15:38: Card Command Classess CCC                     :0x5b5
10:15:38: Max Read Data Block Length  READ_BL_LEN       :0x9
10:15:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:15:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:15:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:15:38: DSR(driver stage register)  DSR_IMP           :0x0
10:15:38: Reserv2                                       :0x0
10:15:38: Device Size C_SIZE                            :0xedc8
10:15:38: Reserv3                                       :0x0
10:15:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:15:38: Erase Sector Size SECTOR_SIZE                 :0x7f
10:15:38: Write Protect Group Size WP_GRP_SIZE          :0x0
10:15:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:15:38: Reserv4                                       :0x0
10:15:38: Write Speed Factor R2W_FACTOR                 :0x2
10:15:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:15:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:15:38: FILE_FORMAT_GRP                               :0x0
10:15:38: COPY flag                                     :0x1
10:15:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:15:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:15:38: File_Format                                   :0x0
10:15:38: CRC                                           :0x0
10:15:38: ####CSD Registe Values####  

10:15:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:15:38: ProductSerialNumber = 0x23482900
10:15:38: CardMaximumLBA      = 0x3b72400
10:15:38: CardCapacity        = 32G
10:15:38: Is card secure      = 0
10:15:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:15:38: [DVTCommonLib]###  LogicalWrite called
10:15:40: [ WriteLba(0x2466FC8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1941 ] 
10:15:40: [DVTCommonLib]###  LogicalWrite Completed 

10:15:40: [DVTCommonLib]###  LogicalRead called
10:15:41: [ ReadLba(0x2466FC8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1942 ] 
10:15:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:15:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:15:41: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 223 times 

10:15:41: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:15:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:15:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1943 ] 
10:15:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:15:41: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:15:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:15:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:15:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:15:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:15:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A66F0>, <py_sfcl.CommandDataDefinition object at 0x066AEE10>) , Command count = 1944 ] 
10:15:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:15:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE450>, <py_sfcl.CommandDataDefinition object at 0x066AE720>) , Command count = 1945 ] 
10:15:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:15:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1946 ] 
10:15:41: [DVTCommonLib]### Identification :Idenfication of card completed 

10:15:41: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:15:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:15:41: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:15:41: [ SetBusWidth(0x1) , Command count = 1947 ] 
10:15:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:15:41: ####CSD Registe 2.0 Values####
10:15:41: CSD_STRUCTURE                                 :0x1
10:15:41: Reserv1                                       :0x0
10:15:41: Time Access 1 TAAC                            :0xe
10:15:41: Time Access 2 NSAC*100                        :0x0
10:15:41: Data Transfer Rate TRAN_SPEED                 :0x32
10:15:41: Card Command Classess CCC                     :0x5b5
10:15:41: Max Read Data Block Length  READ_BL_LEN       :0x9
10:15:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:15:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:15:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:15:41: DSR(driver stage register)  DSR_IMP           :0x0
10:15:41: Reserv2                                       :0x0
10:15:41: Device Size C_SIZE                            :0xedc8
10:15:41: Reserv3                                       :0x0
10:15:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:15:41: Erase Sector Size SECTOR_SIZE                 :0x7f
10:15:41: Write Protect Group Size WP_GRP_SIZE          :0x0
10:15:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:15:41: Reserv4                                       :0x0
10:15:41: Write Speed Factor R2W_FACTOR                 :0x2
10:15:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:15:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:15:41: FILE_FORMAT_GRP                               :0x0
10:15:41: COPY flag                                     :0x1
10:15:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:15:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:15:41: File_Format                                   :0x0
10:15:41: CRC                                           :0x0
10:15:41: ####CSD Registe Values####  

10:15:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:15:41: ProductSerialNumber = 0x23482900
10:15:41: CardMaximumLBA      = 0x3b72400
10:15:41: CardCapacity        = 32G
10:15:41: Is card secure      = 0
10:15:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:15:41: [DVTCommonLib]###  LogicalWrite called
10:15:43: [ WriteLba(0x2513886, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1948 ] 
10:15:43: [DVTCommonLib]###  LogicalWrite Completed 

10:15:43: [DVTCommonLib]###  LogicalRead called
10:15:45: [ ReadLba(0x2513886, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1949 ] 
10:15:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:15:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:15:45: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 224 times 

10:15:45: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:15:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:15:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1950 ] 
10:15:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:15:45: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:15:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:15:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:15:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:15:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:15:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6F30>, <py_sfcl.CommandDataDefinition object at 0x066AE8D0>) , Command count = 1951 ] 
10:15:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:15:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6D50>, <py_sfcl.CommandDataDefinition object at 0x066AE330>) , Command count = 1952 ] 
10:15:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:15:45: [ SetCardRCA(0x1, 0xD555) , Command count = 1953 ] 
10:15:45: [DVTCommonLib]### Identification :Idenfication of card completed 

10:15:45: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:15:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:15:45: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:15:45: [ SetBusWidth(0x1) , Command count = 1954 ] 
10:15:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:15:45: ####CSD Registe 2.0 Values####
10:15:45: CSD_STRUCTURE                                 :0x1
10:15:45: Reserv1                                       :0x0
10:15:45: Time Access 1 TAAC                            :0xe
10:15:45: Time Access 2 NSAC*100                        :0x0
10:15:45: Data Transfer Rate TRAN_SPEED                 :0x32
10:15:45: Card Command Classess CCC                     :0x5b5
10:15:45: Max Read Data Block Length  READ_BL_LEN       :0x9
10:15:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:15:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:15:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:15:45: DSR(driver stage register)  DSR_IMP           :0x0
10:15:45: Reserv2                                       :0x0
10:15:45: Device Size C_SIZE                            :0xedc8
10:15:45: Reserv3                                       :0x0
10:15:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:15:45: Erase Sector Size SECTOR_SIZE                 :0x7f
10:15:45: Write Protect Group Size WP_GRP_SIZE          :0x0
10:15:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:15:45: Reserv4                                       :0x0
10:15:45: Write Speed Factor R2W_FACTOR                 :0x2
10:15:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:15:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:15:45: FILE_FORMAT_GRP                               :0x0
10:15:45: COPY flag                                     :0x1
10:15:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:15:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:15:45: File_Format                                   :0x0
10:15:45: CRC                                           :0x0
10:15:45: ####CSD Registe Values####  

10:15:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:15:45: ProductSerialNumber = 0x23482900
10:15:45: CardMaximumLBA      = 0x3b72400
10:15:45: CardCapacity        = 32G
10:15:45: Is card secure      = 0
10:15:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:15:45: [DVTCommonLib]###  LogicalWrite called
10:15:46: [ WriteLba(0x240ACBA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1955 ] 
10:15:46: [DVTCommonLib]###  LogicalWrite Completed 

10:15:46: [DVTCommonLib]###  LogicalRead called
10:15:48: [ ReadLba(0x240ACBA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1956 ] 
10:15:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:15:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:15:48: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 225 times 

10:15:48: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:15:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:15:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1957 ] 
10:15:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:15:48: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:15:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:15:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:15:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:15:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE5A0>, <py_sfcl.CommandDataDefinition object at 0x066AE3F0>) , Command count = 1958 ] 
10:15:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A69F0>, <py_sfcl.CommandDataDefinition object at 0x066A6ED0>) , Command count = 1959 ] 
10:15:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:15:48: [ SetCardRCA(0x1, 0xD555) , Command count = 1960 ] 
10:15:48: [DVTCommonLib]### Identification :Idenfication of card completed 

10:15:48: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:15:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:15:48: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:15:48: [ SetBusWidth(0x1) , Command count = 1961 ] 
10:15:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:15:48: ####CSD Registe 2.0 Values####
10:15:48: CSD_STRUCTURE                                 :0x1
10:15:48: Reserv1                                       :0x0
10:15:48: Time Access 1 TAAC                            :0xe
10:15:48: Time Access 2 NSAC*100                        :0x0
10:15:48: Data Transfer Rate TRAN_SPEED                 :0x32
10:15:48: Card Command Classess CCC                     :0x5b5
10:15:48: Max Read Data Block Length  READ_BL_LEN       :0x9
10:15:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:15:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:15:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:15:48: DSR(driver stage register)  DSR_IMP           :0x0
10:15:48: Reserv2                                       :0x0
10:15:48: Device Size C_SIZE                            :0xedc8
10:15:48: Reserv3                                       :0x0
10:15:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:15:48: Erase Sector Size SECTOR_SIZE                 :0x7f
10:15:48: Write Protect Group Size WP_GRP_SIZE          :0x0
10:15:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:15:48: Reserv4                                       :0x0
10:15:48: Write Speed Factor R2W_FACTOR                 :0x2
10:15:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:15:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:15:48: FILE_FORMAT_GRP                               :0x0
10:15:48: COPY flag                                     :0x1
10:15:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:15:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:15:48: File_Format                                   :0x0
10:15:48: CRC                                           :0x0
10:15:48: ####CSD Registe Values####  

10:15:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:15:48: ProductSerialNumber = 0x23482900
10:15:48: CardMaximumLBA      = 0x3b72400
10:15:48: CardCapacity        = 32G
10:15:48: Is card secure      = 0
10:15:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:15:48: [DVTCommonLib]###  LogicalWrite called
10:15:50: [ WriteLba(0xCCA60D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1962 ] 
10:15:50: [DVTCommonLib]###  LogicalWrite Completed 

10:15:50: [DVTCommonLib]###  LogicalRead called
10:15:51: [ ReadLba(0xCCA60D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1963 ] 
10:15:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:15:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:15:51: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 226 times 

10:15:51: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:15:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:15:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1964 ] 
10:15:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:15:52: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:15:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:15:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:15:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:15:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:15:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6FC0>, <py_sfcl.CommandDataDefinition object at 0x066A6A20>) , Command count = 1965 ] 
10:15:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:15:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6060>, <py_sfcl.CommandDataDefinition object at 0x066A60C0>) , Command count = 1966 ] 
10:15:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:15:52: [ SetCardRCA(0x1, 0xD555) , Command count = 1967 ] 
10:15:52: [DVTCommonLib]### Identification :Idenfication of card completed 

10:15:52: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:15:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:15:52: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:15:52: [ SetBusWidth(0x1) , Command count = 1968 ] 
10:15:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:15:52: ####CSD Registe 2.0 Values####
10:15:52: CSD_STRUCTURE                                 :0x1
10:15:52: Reserv1                                       :0x0
10:15:52: Time Access 1 TAAC                            :0xe
10:15:52: Time Access 2 NSAC*100                        :0x0
10:15:52: Data Transfer Rate TRAN_SPEED                 :0x32
10:15:52: Card Command Classess CCC                     :0x5b5
10:15:52: Max Read Data Block Length  READ_BL_LEN       :0x9
10:15:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:15:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:15:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:15:52: DSR(driver stage register)  DSR_IMP           :0x0
10:15:52: Reserv2                                       :0x0
10:15:52: Device Size C_SIZE                            :0xedc8
10:15:52: Reserv3                                       :0x0
10:15:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:15:52: Erase Sector Size SECTOR_SIZE                 :0x7f
10:15:52: Write Protect Group Size WP_GRP_SIZE          :0x0
10:15:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:15:52: Reserv4                                       :0x0
10:15:52: Write Speed Factor R2W_FACTOR                 :0x2
10:15:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:15:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:15:52: FILE_FORMAT_GRP                               :0x0
10:15:52: COPY flag                                     :0x1
10:15:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:15:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:15:52: File_Format                                   :0x0
10:15:52: CRC                                           :0x0
10:15:52: ####CSD Registe Values####  

10:15:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:15:52: ProductSerialNumber = 0x23482900
10:15:52: CardMaximumLBA      = 0x3b72400
10:15:52: CardCapacity        = 32G
10:15:52: Is card secure      = 0
10:15:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:15:52: [DVTCommonLib]###  LogicalWrite called
10:15:53: [ WriteLba(0x1D8381B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1969 ] 
10:15:53: [DVTCommonLib]###  LogicalWrite Completed 

10:15:53: [DVTCommonLib]###  LogicalRead called
10:15:55: [ ReadLba(0x1D8381B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1970 ] 
10:15:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:15:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:15:55: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 227 times 

10:15:55: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:15:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:15:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1971 ] 
10:15:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:15:55: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:15:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:15:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:15:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:15:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:15:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663ACF0>, <py_sfcl.CommandDataDefinition object at 0x066A6A80>) , Command count = 1972 ] 
10:15:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:15:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6390>, <py_sfcl.CommandDataDefinition object at 0x066A6240>) , Command count = 1973 ] 
10:15:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:15:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1974 ] 
10:15:55: [DVTCommonLib]### Identification :Idenfication of card completed 

10:15:55: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:15:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:15:55: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:15:55: [ SetBusWidth(0x1) , Command count = 1975 ] 
10:15:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:15:55: ####CSD Registe 2.0 Values####
10:15:55: CSD_STRUCTURE                                 :0x1
10:15:55: Reserv1                                       :0x0
10:15:55: Time Access 1 TAAC                            :0xe
10:15:55: Time Access 2 NSAC*100                        :0x0
10:15:55: Data Transfer Rate TRAN_SPEED                 :0x32
10:15:55: Card Command Classess CCC                     :0x5b5
10:15:55: Max Read Data Block Length  READ_BL_LEN       :0x9
10:15:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:15:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:15:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:15:55: DSR(driver stage register)  DSR_IMP           :0x0
10:15:55: Reserv2                                       :0x0
10:15:55: Device Size C_SIZE                            :0xedc8
10:15:55: Reserv3                                       :0x0
10:15:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:15:55: Erase Sector Size SECTOR_SIZE                 :0x7f
10:15:55: Write Protect Group Size WP_GRP_SIZE          :0x0
10:15:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:15:55: Reserv4                                       :0x0
10:15:55: Write Speed Factor R2W_FACTOR                 :0x2
10:15:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:15:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:15:55: FILE_FORMAT_GRP                               :0x0
10:15:55: COPY flag                                     :0x1
10:15:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:15:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:15:55: File_Format                                   :0x0
10:15:55: CRC                                           :0x0
10:15:55: ####CSD Registe Values####  

10:15:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:15:55: ProductSerialNumber = 0x23482900
10:15:55: CardMaximumLBA      = 0x3b72400
10:15:55: CardCapacity        = 32G
10:15:55: Is card secure      = 0
10:15:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:15:55: [DVTCommonLib]###  LogicalWrite called
10:15:57: [ WriteLba(0x141AE9C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1976 ] 
10:15:57: [DVTCommonLib]###  LogicalWrite Completed 

10:15:57: [DVTCommonLib]###  LogicalRead called
10:15:58: [ ReadLba(0x141AE9C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1977 ] 
10:15:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:15:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:15:58: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 228 times 

10:15:58: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:15:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:15:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1978 ] 
10:15:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:15:58: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:15:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:15:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:15:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:15:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:15:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A66C0>, <py_sfcl.CommandDataDefinition object at 0x066A6150>) , Command count = 1979 ] 
10:15:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:15:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6690>, <py_sfcl.CommandDataDefinition object at 0x066A6090>) , Command count = 1980 ] 
10:15:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:15:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1981 ] 
10:15:58: [DVTCommonLib]### Identification :Idenfication of card completed 

10:15:58: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:15:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:15:58: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:15:58: [ SetBusWidth(0x1) , Command count = 1982 ] 
10:15:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:15:58: ####CSD Registe 2.0 Values####
10:15:58: CSD_STRUCTURE                                 :0x1
10:15:58: Reserv1                                       :0x0
10:15:58: Time Access 1 TAAC                            :0xe
10:15:58: Time Access 2 NSAC*100                        :0x0
10:15:58: Data Transfer Rate TRAN_SPEED                 :0x32
10:15:58: Card Command Classess CCC                     :0x5b5
10:15:58: Max Read Data Block Length  READ_BL_LEN       :0x9
10:15:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:15:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:15:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:15:58: DSR(driver stage register)  DSR_IMP           :0x0
10:15:58: Reserv2                                       :0x0
10:15:58: Device Size C_SIZE                            :0xedc8
10:15:58: Reserv3                                       :0x0
10:15:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:15:58: Erase Sector Size SECTOR_SIZE                 :0x7f
10:15:58: Write Protect Group Size WP_GRP_SIZE          :0x0
10:15:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:15:58: Reserv4                                       :0x0
10:15:58: Write Speed Factor R2W_FACTOR                 :0x2
10:15:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:15:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:15:58: FILE_FORMAT_GRP                               :0x0
10:15:58: COPY flag                                     :0x1
10:15:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:15:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:15:58: File_Format                                   :0x0
10:15:58: CRC                                           :0x0
10:15:58: ####CSD Registe Values####  

10:15:58: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:15:58: ProductSerialNumber = 0x23482900
10:15:58: CardMaximumLBA      = 0x3b72400
10:15:58: CardCapacity        = 32G
10:15:58: Is card secure      = 0
10:15:58: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:15:58: [DVTCommonLib]###  LogicalWrite called
10:16:00: [ WriteLba(0x3917C5B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1983 ] 
10:16:00: [DVTCommonLib]###  LogicalWrite Completed 

10:16:00: [DVTCommonLib]###  LogicalRead called
10:16:02: [ ReadLba(0x3917C5B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1984 ] 
10:16:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:16:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:16:02: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 229 times 

10:16:02: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:16:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:16:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1985 ] 
10:16:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:16:02: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:16:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:16:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:16:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:16:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:16:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E0F0>, <py_sfcl.CommandDataDefinition object at 0x066A6480>) , Command count = 1986 ] 
10:16:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:16:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A68D0>, <py_sfcl.CommandDataDefinition object at 0x066A6930>) , Command count = 1987 ] 
10:16:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:16:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1988 ] 
10:16:02: [DVTCommonLib]### Identification :Idenfication of card completed 

10:16:02: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:16:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:16:02: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:16:02: [ SetBusWidth(0x1) , Command count = 1989 ] 
10:16:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:16:02: ####CSD Registe 2.0 Values####
10:16:02: CSD_STRUCTURE                                 :0x1
10:16:02: Reserv1                                       :0x0
10:16:02: Time Access 1 TAAC                            :0xe
10:16:02: Time Access 2 NSAC*100                        :0x0
10:16:02: Data Transfer Rate TRAN_SPEED                 :0x32
10:16:02: Card Command Classess CCC                     :0x5b5
10:16:02: Max Read Data Block Length  READ_BL_LEN       :0x9
10:16:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:16:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:16:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:16:02: DSR(driver stage register)  DSR_IMP           :0x0
10:16:02: Reserv2                                       :0x0
10:16:02: Device Size C_SIZE                            :0xedc8
10:16:02: Reserv3                                       :0x0
10:16:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:16:02: Erase Sector Size SECTOR_SIZE                 :0x7f
10:16:02: Write Protect Group Size WP_GRP_SIZE          :0x0
10:16:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:16:02: Reserv4                                       :0x0
10:16:02: Write Speed Factor R2W_FACTOR                 :0x2
10:16:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:16:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:16:02: FILE_FORMAT_GRP                               :0x0
10:16:02: COPY flag                                     :0x1
10:16:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:16:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:16:02: File_Format                                   :0x0
10:16:02: CRC                                           :0x0
10:16:02: ####CSD Registe Values####  

10:16:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:16:02: ProductSerialNumber = 0x23482900
10:16:02: CardMaximumLBA      = 0x3b72400
10:16:02: CardCapacity        = 32G
10:16:02: Is card secure      = 0
10:16:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:16:02: [DVTCommonLib]###  LogicalWrite called
10:16:03: [ WriteLba(0x4D6858, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1990 ] 
10:16:03: [DVTCommonLib]###  LogicalWrite Completed 

10:16:03: [DVTCommonLib]###  LogicalRead called
10:16:05: [ ReadLba(0x4D6858, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1991 ] 
10:16:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:16:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:16:05: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 230 times 

10:16:05: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:16:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:16:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1992 ] 
10:16:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:16:05: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:16:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:16:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:16:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:16:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:16:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE1E0>, <py_sfcl.CommandDataDefinition object at 0x066AE210>) , Command count = 1993 ] 
10:16:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:16:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066A6CC0>, <py_sfcl.CommandDataDefinition object at 0x066A6AB0>) , Command count = 1994 ] 
10:16:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:16:05: [ SetCardRCA(0x1, 0xD555) , Command count = 1995 ] 
10:16:05: [DVTCommonLib]### Identification :Idenfication of card completed 

10:16:05: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:16:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:16:05: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:16:05: [ SetBusWidth(0x1) , Command count = 1996 ] 
10:16:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:16:05: ####CSD Registe 2.0 Values####
10:16:05: CSD_STRUCTURE                                 :0x1
10:16:05: Reserv1                                       :0x0
10:16:05: Time Access 1 TAAC                            :0xe
10:16:05: Time Access 2 NSAC*100                        :0x0
10:16:05: Data Transfer Rate TRAN_SPEED                 :0x32
10:16:05: Card Command Classess CCC                     :0x5b5
10:16:05: Max Read Data Block Length  READ_BL_LEN       :0x9
10:16:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:16:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:16:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:16:05: DSR(driver stage register)  DSR_IMP           :0x0
10:16:05: Reserv2                                       :0x0
10:16:05: Device Size C_SIZE                            :0xedc8
10:16:05: Reserv3                                       :0x0
10:16:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:16:05: Erase Sector Size SECTOR_SIZE                 :0x7f
10:16:05: Write Protect Group Size WP_GRP_SIZE          :0x0
10:16:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:16:05: Reserv4                                       :0x0
10:16:05: Write Speed Factor R2W_FACTOR                 :0x2
10:16:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:16:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:16:05: FILE_FORMAT_GRP                               :0x0
10:16:05: COPY flag                                     :0x1
10:16:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:16:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:16:05: File_Format                                   :0x0
10:16:05: CRC                                           :0x0
10:16:05: ####CSD Registe Values####  

10:16:05: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:16:05: ProductSerialNumber = 0x23482900
10:16:05: CardMaximumLBA      = 0x3b72400
10:16:05: CardCapacity        = 32G
10:16:05: Is card secure      = 0
10:16:05: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:16:05: [DVTCommonLib]###  LogicalWrite called
10:16:07: [ WriteLba(0x3A2BB09, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1997 ] 
10:16:07: [DVTCommonLib]###  LogicalWrite Completed 

10:16:07: [DVTCommonLib]###  LogicalRead called
10:16:08: [ ReadLba(0x3A2BB09, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1998 ] 
10:16:08: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:16:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:16:08: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 231 times 

10:16:08: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:16:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:16:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1999 ] 
10:16:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:16:09: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:16:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:16:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:16:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:16:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:16:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E360>, <py_sfcl.CommandDataDefinition object at 0x066A6BA0>) , Command count = 2000 ] 
10:16:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:16:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE240>, <py_sfcl.CommandDataDefinition object at 0x066AE060>) , Command count = 2001 ] 
10:16:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:16:09: [ SetCardRCA(0x1, 0xD555) , Command count = 2002 ] 
10:16:09: [DVTCommonLib]### Identification :Idenfication of card completed 

10:16:09: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:16:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:16:09: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:16:09: [ SetBusWidth(0x1) , Command count = 2003 ] 
10:16:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:16:09: ####CSD Registe 2.0 Values####
10:16:09: CSD_STRUCTURE                                 :0x1
10:16:09: Reserv1                                       :0x0
10:16:09: Time Access 1 TAAC                            :0xe
10:16:09: Time Access 2 NSAC*100                        :0x0
10:16:09: Data Transfer Rate TRAN_SPEED                 :0x32
10:16:09: Card Command Classess CCC                     :0x5b5
10:16:09: Max Read Data Block Length  READ_BL_LEN       :0x9
10:16:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:16:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:16:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:16:09: DSR(driver stage register)  DSR_IMP           :0x0
10:16:09: Reserv2                                       :0x0
10:16:09: Device Size C_SIZE                            :0xedc8
10:16:09: Reserv3                                       :0x0
10:16:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:16:09: Erase Sector Size SECTOR_SIZE                 :0x7f
10:16:09: Write Protect Group Size WP_GRP_SIZE          :0x0
10:16:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:16:09: Reserv4                                       :0x0
10:16:09: Write Speed Factor R2W_FACTOR                 :0x2
10:16:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:16:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:16:09: FILE_FORMAT_GRP                               :0x0
10:16:09: COPY flag                                     :0x1
10:16:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:16:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:16:09: File_Format                                   :0x0
10:16:09: CRC                                           :0x0
10:16:09: ####CSD Registe Values####  

10:16:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:16:09: ProductSerialNumber = 0x23482900
10:16:09: CardMaximumLBA      = 0x3b72400
10:16:09: CardCapacity        = 32G
10:16:09: Is card secure      = 0
10:16:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:16:09: [DVTCommonLib]###  LogicalWrite called
10:16:10: [ WriteLba(0x2698949, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2004 ] 
10:16:10: [DVTCommonLib]###  LogicalWrite Completed 

10:16:10: [DVTCommonLib]###  LogicalRead called
10:16:12: [ ReadLba(0x2698949, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2005 ] 
10:16:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:16:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:16:12: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 232 times 

10:16:12: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:16:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:16:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2006 ] 
10:16:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:16:12: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:16:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:16:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:16:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:16:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:16:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0663E5D0>, <py_sfcl.CommandDataDefinition object at 0x066A6E40>) , Command count = 2007 ] 
10:16:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:16:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE2A0>, <py_sfcl.CommandDataDefinition object at 0x066AE300>) , Command count = 2008 ] 
10:16:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:16:12: [ SetCardRCA(0x1, 0xD555) , Command count = 2009 ] 
10:16:12: [DVTCommonLib]### Identification :Idenfication of card completed 

10:16:12: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:16:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:16:12: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:16:12: [ SetBusWidth(0x1) , Command count = 2010 ] 
10:16:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:16:12: ####CSD Registe 2.0 Values####
10:16:12: CSD_STRUCTURE                                 :0x1
10:16:12: Reserv1                                       :0x0
10:16:12: Time Access 1 TAAC                            :0xe
10:16:12: Time Access 2 NSAC*100                        :0x0
10:16:12: Data Transfer Rate TRAN_SPEED                 :0x32
10:16:12: Card Command Classess CCC                     :0x5b5
10:16:12: Max Read Data Block Length  READ_BL_LEN       :0x9
10:16:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:16:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:16:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:16:12: DSR(driver stage register)  DSR_IMP           :0x0
10:16:12: Reserv2                                       :0x0
10:16:12: Device Size C_SIZE                            :0xedc8
10:16:12: Reserv3                                       :0x0
10:16:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:16:12: Erase Sector Size SECTOR_SIZE                 :0x7f
10:16:12: Write Protect Group Size WP_GRP_SIZE          :0x0
10:16:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:16:12: Reserv4                                       :0x0
10:16:12: Write Speed Factor R2W_FACTOR                 :0x2
10:16:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:16:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:16:12: FILE_FORMAT_GRP                               :0x0
10:16:12: COPY flag                                     :0x1
10:16:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:16:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:16:12: File_Format                                   :0x0
10:16:12: CRC                                           :0x0
10:16:12: ####CSD Registe Values####  

10:16:12: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:16:12: ProductSerialNumber = 0x23482900
10:16:12: CardMaximumLBA      = 0x3b72400
10:16:12: CardCapacity        = 32G
10:16:12: Is card secure      = 0
10:16:12: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:16:12: [DVTCommonLib]###  LogicalWrite called
10:16:14: [ WriteLba(0x16AC6E7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2011 ] 
10:16:14: [DVTCommonLib]###  LogicalWrite Completed 

10:16:14: [DVTCommonLib]###  LogicalRead called
10:16:15: [ ReadLba(0x16AC6E7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2012 ] 
10:16:15: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:16:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:16:15: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 233 times 

10:16:15: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:16:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:16:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2013 ] 
10:16:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:16:15: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:16:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:16:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:16:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:16:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:16:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1CC0>, <py_sfcl.CommandDataDefinition object at 0x066A6C90>) , Command count = 2014 ] 
10:16:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:16:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE690>, <py_sfcl.CommandDataDefinition object at 0x066AE780>) , Command count = 2015 ] 
10:16:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:16:15: [ SetCardRCA(0x1, 0xD555) , Command count = 2016 ] 
10:16:15: [DVTCommonLib]### Identification :Idenfication of card completed 

10:16:15: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:16:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:16:15: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:16:15: [ SetBusWidth(0x1) , Command count = 2017 ] 
10:16:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:16:15: ####CSD Registe 2.0 Values####
10:16:15: CSD_STRUCTURE                                 :0x1
10:16:15: Reserv1                                       :0x0
10:16:15: Time Access 1 TAAC                            :0xe
10:16:15: Time Access 2 NSAC*100                        :0x0
10:16:15: Data Transfer Rate TRAN_SPEED                 :0x32
10:16:15: Card Command Classess CCC                     :0x5b5
10:16:15: Max Read Data Block Length  READ_BL_LEN       :0x9
10:16:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:16:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:16:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:16:15: DSR(driver stage register)  DSR_IMP           :0x0
10:16:15: Reserv2                                       :0x0
10:16:15: Device Size C_SIZE                            :0xedc8
10:16:15: Reserv3                                       :0x0
10:16:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:16:15: Erase Sector Size SECTOR_SIZE                 :0x7f
10:16:15: Write Protect Group Size WP_GRP_SIZE          :0x0
10:16:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:16:15: Reserv4                                       :0x0
10:16:15: Write Speed Factor R2W_FACTOR                 :0x2
10:16:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:16:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:16:15: FILE_FORMAT_GRP                               :0x0
10:16:15: COPY flag                                     :0x1
10:16:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:16:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:16:15: File_Format                                   :0x0
10:16:15: CRC                                           :0x0
10:16:15: ####CSD Registe Values####  

10:16:15: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:16:15: ProductSerialNumber = 0x23482900
10:16:15: CardMaximumLBA      = 0x3b72400
10:16:15: CardCapacity        = 32G
10:16:15: Is card secure      = 0
10:16:15: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:16:15: [DVTCommonLib]###  LogicalWrite called
10:16:17: [ WriteLba(0x7EE2A0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2018 ] 
10:16:17: [DVTCommonLib]###  LogicalWrite Completed 

10:16:17: [DVTCommonLib]###  LogicalRead called
10:16:19: [ ReadLba(0x7EE2A0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2019 ] 
10:16:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:16:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:16:19: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 234 times 

10:16:19: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:16:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:16:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2020 ] 
10:16:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:16:19: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:16:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:16:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:16:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:16:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:16:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE7A80>, <py_sfcl.CommandDataDefinition object at 0x066B1120>) , Command count = 2021 ] 
10:16:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:16:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEA80>, <py_sfcl.CommandDataDefinition object at 0x066AE870>) , Command count = 2022 ] 
10:16:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:16:19: [ SetCardRCA(0x1, 0xD555) , Command count = 2023 ] 
10:16:19: [DVTCommonLib]### Identification :Idenfication of card completed 

10:16:19: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:16:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:16:19: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:16:19: [ SetBusWidth(0x1) , Command count = 2024 ] 
10:16:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:16:19: ####CSD Registe 2.0 Values####
10:16:19: CSD_STRUCTURE                                 :0x1
10:16:19: Reserv1                                       :0x0
10:16:19: Time Access 1 TAAC                            :0xe
10:16:19: Time Access 2 NSAC*100                        :0x0
10:16:19: Data Transfer Rate TRAN_SPEED                 :0x32
10:16:19: Card Command Classess CCC                     :0x5b5
10:16:19: Max Read Data Block Length  READ_BL_LEN       :0x9
10:16:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:16:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:16:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:16:19: DSR(driver stage register)  DSR_IMP           :0x0
10:16:19: Reserv2                                       :0x0
10:16:19: Device Size C_SIZE                            :0xedc8
10:16:19: Reserv3                                       :0x0
10:16:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:16:19: Erase Sector Size SECTOR_SIZE                 :0x7f
10:16:19: Write Protect Group Size WP_GRP_SIZE          :0x0
10:16:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:16:19: Reserv4                                       :0x0
10:16:19: Write Speed Factor R2W_FACTOR                 :0x2
10:16:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:16:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:16:19: FILE_FORMAT_GRP                               :0x0
10:16:19: COPY flag                                     :0x1
10:16:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:16:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:16:19: File_Format                                   :0x0
10:16:19: CRC                                           :0x0
10:16:19: ####CSD Registe Values####  

10:16:19: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:16:19: ProductSerialNumber = 0x23482900
10:16:19: CardMaximumLBA      = 0x3b72400
10:16:19: CardCapacity        = 32G
10:16:19: Is card secure      = 0
10:16:19: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:16:19: [DVTCommonLib]###  LogicalWrite called
10:16:21: [ WriteLba(0x3650377, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2025 ] 
10:16:21: [DVTCommonLib]###  LogicalWrite Completed 

10:16:21: [DVTCommonLib]###  LogicalRead called
10:16:22: [ ReadLba(0x3650377, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2026 ] 
10:16:22: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:16:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:16:22: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 235 times 

10:16:22: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:16:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:16:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2027 ] 
10:16:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:16:22: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:16:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:16:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:16:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:16:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:16:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AE960>, <py_sfcl.CommandDataDefinition object at 0x066AE8A0>) , Command count = 2028 ] 
10:16:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:16:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066AEE40>, <py_sfcl.CommandDataDefinition object at 0x066AEB70>) , Command count = 2029 ] 
10:16:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:16:22: [ SetCardRCA(0x1, 0xD555) , Command count = 2030 ] 
10:16:22: [DVTCommonLib]### Identification :Idenfication of card completed 

10:16:22: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:16:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:16:22: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:16:22: [ SetBusWidth(0x1) , Command count = 2031 ] 
10:16:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:16:22: ####CSD Registe 2.0 Values####
10:16:22: CSD_STRUCTURE                                 :0x1
10:16:22: Reserv1                                       :0x0
10:16:22: Time Access 1 TAAC                            :0xe
10:16:22: Time Access 2 NSAC*100                        :0x0
10:16:22: Data Transfer Rate TRAN_SPEED                 :0x32
10:16:22: Card Command Classess CCC                     :0x5b5
10:16:22: Max Read Data Block Length  READ_BL_LEN       :0x9
10:16:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:16:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:16:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:16:22: DSR(driver stage register)  DSR_IMP           :0x0
10:16:22: Reserv2                                       :0x0
10:16:22: Device Size C_SIZE                            :0xedc8
10:16:22: Reserv3                                       :0x0
10:16:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:16:22: Erase Sector Size SECTOR_SIZE                 :0x7f
10:16:22: Write Protect Group Size WP_GRP_SIZE          :0x0
10:16:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:16:22: Reserv4                                       :0x0
10:16:22: Write Speed Factor R2W_FACTOR                 :0x2
10:16:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:16:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:16:22: FILE_FORMAT_GRP                               :0x0
10:16:22: COPY flag                                     :0x1
10:16:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:16:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:16:22: File_Format                                   :0x0
10:16:22: CRC                                           :0x0
10:16:22: ####CSD Registe Values####  

10:16:22: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:16:22: ProductSerialNumber = 0x23482900
10:16:22: CardMaximumLBA      = 0x3b72400
10:16:22: CardCapacity        = 32G
10:16:22: Is card secure      = 0
10:16:22: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:16:22: [DVTCommonLib]###  LogicalWrite called
10:16:24: [ WriteLba(0x285AED3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2032 ] 
10:16:24: [DVTCommonLib]###  LogicalWrite Completed 

10:16:24: [DVTCommonLib]###  LogicalRead called
10:16:26: [ ReadLba(0x285AED3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2033 ] 
10:16:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:16:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:16:26: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 236 times 

10:16:26: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:16:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:16:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2034 ] 
10:16:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:16:26: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:16:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:16:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:16:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:16:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:16:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05EC0A20>, <py_sfcl.CommandDataDefinition object at 0x05FC51B0>) , Command count = 2035 ] 
10:16:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:16:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B10F0>, <py_sfcl.CommandDataDefinition object at 0x066B1150>) , Command count = 2036 ] 
10:16:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:16:26: [ SetCardRCA(0x1, 0xD555) , Command count = 2037 ] 
10:16:26: [DVTCommonLib]### Identification :Idenfication of card completed 

10:16:26: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:16:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:16:26: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:16:26: [ SetBusWidth(0x1) , Command count = 2038 ] 
10:16:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:16:26: ####CSD Registe 2.0 Values####
10:16:26: CSD_STRUCTURE                                 :0x1
10:16:26: Reserv1                                       :0x0
10:16:26: Time Access 1 TAAC                            :0xe
10:16:26: Time Access 2 NSAC*100                        :0x0
10:16:26: Data Transfer Rate TRAN_SPEED                 :0x32
10:16:26: Card Command Classess CCC                     :0x5b5
10:16:26: Max Read Data Block Length  READ_BL_LEN       :0x9
10:16:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:16:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:16:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:16:26: DSR(driver stage register)  DSR_IMP           :0x0
10:16:26: Reserv2                                       :0x0
10:16:26: Device Size C_SIZE                            :0xedc8
10:16:26: Reserv3                                       :0x0
10:16:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:16:26: Erase Sector Size SECTOR_SIZE                 :0x7f
10:16:26: Write Protect Group Size WP_GRP_SIZE          :0x0
10:16:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:16:26: Reserv4                                       :0x0
10:16:26: Write Speed Factor R2W_FACTOR                 :0x2
10:16:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:16:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:16:26: FILE_FORMAT_GRP                               :0x0
10:16:26: COPY flag                                     :0x1
10:16:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:16:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:16:26: File_Format                                   :0x0
10:16:26: CRC                                           :0x0
10:16:26: ####CSD Registe Values####  

10:16:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:16:26: ProductSerialNumber = 0x23482900
10:16:26: CardMaximumLBA      = 0x3b72400
10:16:26: CardCapacity        = 32G
10:16:26: Is card secure      = 0
10:16:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:16:26: [DVTCommonLib]###  LogicalWrite called
10:16:27: [ WriteLba(0x2DBCA35, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2039 ] 
10:16:27: [DVTCommonLib]###  LogicalWrite Completed 

10:16:27: [DVTCommonLib]###  LogicalRead called
10:16:29: [ ReadLba(0x2DBCA35, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2040 ] 
10:16:29: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:16:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:16:29: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 237 times 

10:16:29: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:16:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:16:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2041 ] 
10:16:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:16:29: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:16:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:16:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:16:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:16:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:16:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FDBC60>, <py_sfcl.CommandDataDefinition object at 0x05FC5300>) , Command count = 2042 ] 
10:16:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:16:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1060>, <py_sfcl.CommandDataDefinition object at 0x066B12D0>) , Command count = 2043 ] 
10:16:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:16:29: [ SetCardRCA(0x1, 0xD555) , Command count = 2044 ] 
10:16:29: [DVTCommonLib]### Identification :Idenfication of card completed 

10:16:29: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:16:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:16:29: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:16:29: [ SetBusWidth(0x1) , Command count = 2045 ] 
10:16:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:16:29: ####CSD Registe 2.0 Values####
10:16:29: CSD_STRUCTURE                                 :0x1
10:16:29: Reserv1                                       :0x0
10:16:29: Time Access 1 TAAC                            :0xe
10:16:29: Time Access 2 NSAC*100                        :0x0
10:16:29: Data Transfer Rate TRAN_SPEED                 :0x32
10:16:29: Card Command Classess CCC                     :0x5b5
10:16:29: Max Read Data Block Length  READ_BL_LEN       :0x9
10:16:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:16:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:16:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:16:29: DSR(driver stage register)  DSR_IMP           :0x0
10:16:29: Reserv2                                       :0x0
10:16:29: Device Size C_SIZE                            :0xedc8
10:16:29: Reserv3                                       :0x0
10:16:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:16:29: Erase Sector Size SECTOR_SIZE                 :0x7f
10:16:29: Write Protect Group Size WP_GRP_SIZE          :0x0
10:16:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:16:29: Reserv4                                       :0x0
10:16:29: Write Speed Factor R2W_FACTOR                 :0x2
10:16:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:16:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:16:29: FILE_FORMAT_GRP                               :0x0
10:16:29: COPY flag                                     :0x1
10:16:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:16:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:16:29: File_Format                                   :0x0
10:16:29: CRC                                           :0x0
10:16:29: ####CSD Registe Values####  

10:16:29: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:16:29: ProductSerialNumber = 0x23482900
10:16:29: CardMaximumLBA      = 0x3b72400
10:16:29: CardCapacity        = 32G
10:16:29: Is card secure      = 0
10:16:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:16:29: [DVTCommonLib]###  LogicalWrite called
10:16:31: [ WriteLba(0x7188CD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2046 ] 
10:16:31: [DVTCommonLib]###  LogicalWrite Completed 

10:16:31: [DVTCommonLib]###  LogicalRead called
10:16:32: [ ReadLba(0x7188CD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2047 ] 
10:16:32: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:16:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:16:32: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 238 times 

10:16:32: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:16:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:16:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2048 ] 
10:16:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:16:32: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:16:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:16:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:16:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:16:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:16:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05FE7D80>, <py_sfcl.CommandDataDefinition object at 0x05FE7C30>) , Command count = 2049 ] 
10:16:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:16:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1480>, <py_sfcl.CommandDataDefinition object at 0x066B11B0>) , Command count = 2050 ] 
10:16:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:16:32: [ SetCardRCA(0x1, 0xD555) , Command count = 2051 ] 
10:16:32: [DVTCommonLib]### Identification :Idenfication of card completed 

10:16:32: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:16:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:16:32: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:16:32: [ SetBusWidth(0x1) , Command count = 2052 ] 
10:16:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:16:33: ####CSD Registe 2.0 Values####
10:16:33: CSD_STRUCTURE                                 :0x1
10:16:33: Reserv1                                       :0x0
10:16:33: Time Access 1 TAAC                            :0xe
10:16:33: Time Access 2 NSAC*100                        :0x0
10:16:33: Data Transfer Rate TRAN_SPEED                 :0x32
10:16:33: Card Command Classess CCC                     :0x5b5
10:16:33: Max Read Data Block Length  READ_BL_LEN       :0x9
10:16:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:16:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:16:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:16:33: DSR(driver stage register)  DSR_IMP           :0x0
10:16:33: Reserv2                                       :0x0
10:16:33: Device Size C_SIZE                            :0xedc8
10:16:33: Reserv3                                       :0x0
10:16:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:16:33: Erase Sector Size SECTOR_SIZE                 :0x7f
10:16:33: Write Protect Group Size WP_GRP_SIZE          :0x0
10:16:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:16:33: Reserv4                                       :0x0
10:16:33: Write Speed Factor R2W_FACTOR                 :0x2
10:16:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:16:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:16:33: FILE_FORMAT_GRP                               :0x0
10:16:33: COPY flag                                     :0x1
10:16:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:16:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:16:33: File_Format                                   :0x0
10:16:33: CRC                                           :0x0
10:16:33: ####CSD Registe Values####  

10:16:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:16:33: ProductSerialNumber = 0x23482900
10:16:33: CardMaximumLBA      = 0x3b72400
10:16:33: CardCapacity        = 32G
10:16:33: Is card secure      = 0
10:16:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:16:33: [DVTCommonLib]###  LogicalWrite called
10:16:34: [ WriteLba(0x184E616, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2053 ] 
10:16:34: [DVTCommonLib]###  LogicalWrite Completed 

10:16:34: [DVTCommonLib]###  LogicalRead called
10:16:36: [ ReadLba(0x184E616, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2054 ] 
10:16:36: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:16:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:16:36: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 239 times 

10:16:36: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:16:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:16:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2055 ] 
10:16:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:16:36: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:16:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:16:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:16:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:16:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:16:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05F8E780>, <py_sfcl.CommandDataDefinition object at 0x06033930>) , Command count = 2056 ] 
10:16:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:16:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B1720>, <py_sfcl.CommandDataDefinition object at 0x066B16C0>) , Command count = 2057 ] 
10:16:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:16:36: [ SetCardRCA(0x1, 0xD555) , Command count = 2058 ] 
10:16:36: [DVTCommonLib]### Identification :Idenfication of card completed 

10:16:36: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:16:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:16:36: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:16:36: [ SetBusWidth(0x1) , Command count = 2059 ] 
10:16:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:16:36: ####CSD Registe 2.0 Values####
10:16:36: CSD_STRUCTURE                                 :0x1
10:16:36: Reserv1                                       :0x0
10:16:36: Time Access 1 TAAC                            :0xe
10:16:36: Time Access 2 NSAC*100                        :0x0
10:16:36: Data Transfer Rate TRAN_SPEED                 :0x32
10:16:36: Card Command Classess CCC                     :0x5b5
10:16:36: Max Read Data Block Length  READ_BL_LEN       :0x9
10:16:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:16:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:16:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:16:36: DSR(driver stage register)  DSR_IMP           :0x0
10:16:36: Reserv2                                       :0x0
10:16:36: Device Size C_SIZE                            :0xedc8
10:16:36: Reserv3                                       :0x0
10:16:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:16:36: Erase Sector Size SECTOR_SIZE                 :0x7f
10:16:36: Write Protect Group Size WP_GRP_SIZE          :0x0
10:16:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:16:36: Reserv4                                       :0x0
10:16:36: Write Speed Factor R2W_FACTOR                 :0x2
10:16:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:16:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:16:36: FILE_FORMAT_GRP                               :0x0
10:16:36: COPY flag                                     :0x1
10:16:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:16:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:16:36: File_Format                                   :0x0
10:16:36: CRC                                           :0x0
10:16:36: ####CSD Registe Values####  

10:16:36: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:16:36: ProductSerialNumber = 0x23482900
10:16:36: CardMaximumLBA      = 0x3b72400
10:16:36: CardCapacity        = 32G
10:16:36: Is card secure      = 0
10:16:36: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:16:36: [DVTCommonLib]###  LogicalWrite called
10:16:38: [ WriteLba(0x25862B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2060 ] 
10:16:38: [DVTCommonLib]###  LogicalWrite Completed 

10:16:38: [DVTCommonLib]###  LogicalRead called
10:16:39: [ ReadLba(0x25862B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2061 ] 
10:16:39: [DVTCommonLib]###  LogicalRead Completed with Verification 

10:16:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
10:16:39: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 240 times 

10:16:39: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
10:16:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
10:16:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2062 ] 
10:16:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
10:16:39: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
10:16:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
10:16:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
10:16:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
10:16:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
10:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06038810>, <py_sfcl.CommandDataDefinition object at 0x05FEF2A0>) , Command count = 2063 ] 
10:16:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
10:16:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B19C0>, <py_sfcl.CommandDataDefinition object at 0x066B17B0>) , Command count = 2064 ] 
10:16:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
10:16:39: [ SetCardRCA(0x1, 0xD555) , Command count = 2065 ] 
10:16:39: [DVTCommonLib]### Identification :Idenfication of card completed 

10:16:39: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
10:16:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
10:16:39: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

10:16:39: [ SetBusWidth(0x1) , Command count = 2066 ] 
10:16:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
10:16:39: ####CSD Registe 2.0 Values####
10:16:39: CSD_STRUCTURE                                 :0x1
10:16:39: Reserv1                                       :0x0
10:16:39: Time Access 1 TAAC                            :0xe
10:16:39: Time Access 2 NSAC*100                        :0x0
10:16:39: Data Transfer Rate TRAN_SPEED                 :0x32
10:16:39: Card Command Classess CCC                     :0x5b5
10:16:39: Max Read Data Block Length  READ_BL_LEN       :0x9
10:16:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
10:16:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
10:16:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
10:16:39: DSR(driver stage register)  DSR_IMP           :0x0
10:16:39: Reserv2                                       :0x0
10:16:39: Device Size C_SIZE                            :0xedc8
10:16:39: Reserv3                                       :0x0
10:16:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
10:16:39: Erase Sector Size SECTOR_SIZE                 :0x7f
10:16:39: Write Protect Group Size WP_GRP_SIZE          :0x0
10:16:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
10:16:39: Reserv4                                       :0x0
10:16:39: Write Speed Factor R2W_FACTOR                 :0x2
10:16:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
10:16:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
10:16:39: FILE_FORMAT_GRP                               :0x0
10:16:39: COPY flag                                     :0x1
10:16:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
10:16:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
10:16:39: File_Format                                   :0x0
10:16:39: CRC                                           :0x0
10:16:39: ####CSD Registe Values####  

10:16:39: [DVTCommonLib]### CardInfo :###****CARD INFO****
10:16:39: ProductSerialNumber = 0x23482900
10:16:39: CardMaximumLBA      = 0x3b72400
10:16:39: CardCapacity        = 32G
10:16:39: Is card secure      = 0
10:16:39: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

10:16:39: [DVTCommonLib]###  LogicalWrite called
10:16:41: [ WriteLba(0x2EB5EFD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2067 ] 
10:16:41: [DVTCommonLib]###  LogicalWrite Completed 

10:16:41: [DVTCommonLib]###  LogicalRead called
