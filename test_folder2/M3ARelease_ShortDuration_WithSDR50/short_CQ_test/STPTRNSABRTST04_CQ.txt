14:42:36: Sata Disconnector Board found in COM1.
14:42:40: ***************************************************** 

14:42:40: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   * 

14:42:40: *                                                   * 

14:42:40: *  Compatibility with this version is not verified! * 

14:42:40: ***************************************************** 

14:42:43: [ DeviceSetupCompletion() , Command count = 7 ] 
14:42:43: Testname Mapping: ScriptName=[STPTRNSABRTST04_4_Call_All_PL] -> TestId=[STPTRNSABRTST04]
14:42:43: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 8 ] 
14:42:43: [ GetPhysicalChipsInfo() , Command count = 9 ] 
14:42:43: [ GetFileSize(0xEA) , Command count = 10 ] 
14:42:43: [ ReadFile(<0xA00/0x200, Arb>, 0xEA, 0x1) , Command count = 11 ] 
14:42:43: [ GetFileSize(0x16) , Command count = 12 ] 
14:42:43: [ GetCardStatus() , Command count = 13 ] 
14:42:43: [ GetFileSize(0x18) , Command count = 14 ] 
14:42:43: [ ReadFile(<0x1000/0x200, Arb>, 0x18, 0x8) , Command count = 15 ] 
14:42:43: [ GetFileSize(0x15) , Command count = 16 ] 
14:42:43: [ ReadFile(<0x1000/0x200, Arb>, 0x15, 0x1) , Command count = 17 ] 
14:42:45: Can not find revision of File 21 in file 'config.xml' or card is in the ROM mode
14:42:45: [ GetFileSize(0xE) , Command count = 18 ] 
14:42:45: [ ReadFile(<0x1000/0x200, Arb>, 0xE, 0x1) , Command count = 19 ] 
14:42:45: [ GetFileSize(0x1E) , Command count = 20 ] 
14:42:45: [ GetCardStatus() , Command count = 21 ] 
14:42:45: [ GetFileSize(0x21) , Command count = 22 ] 
14:42:45: [ GetCardStatus() , Command count = 23 ] 
14:42:46: [ GetFileSize(0x33) , Command count = 24 ] 
14:42:46: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x33, 0x1) , Command count = 25 ] 
14:42:46: [ GetFileSize(0x1F) , Command count = 26 ] 
14:42:46: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x1F, 0x1) , Command count = 27 ] 
14:42:46: [ GetFileSize(0x2A) , Command count = 28 ] 
14:42:46: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x2A, 0x1) , Command count = 29 ] 
14:42:46: [ ReadCfgConf(<0x1000/0x200, Spc, pat:0x0>, 0x1) , Command count = 30 ] 
14:42:46: [ ReadFirmwareParameter(<0x1000/0x200, Spc, pat:0x0>, 0x2) , Command count = 31 ] 
14:42:46: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_BE) , Command count = 32 ] 
14:42:46: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_PRODUCT) , Command count = 33 ] 
14:42:46: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_FE_SD) , Command count = 34 ] 
14:42:46: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, 0x0) , Command count = 35 ] 
14:42:46: [ GetFileSize(0x33) , Command count = 36 ] 
14:42:46: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 37 ] 
14:42:46: [ GetFileSize(0x33) , Command count = 38 ] 
14:42:46: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 39 ] 
14:42:46: [ GetIpVersionInfo() , Command count = 40 ] 
14:42:46: [ GetPhysicalChipsInfo() , Command count = 41 ] 
14:42:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0664D210>, <0x200/0x200, Arb>) , Command count = 42 ] 
14:42:46: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 43 ] 

<<<<<<<<<<<<<<<         TEST HEADER          >>>>>>>>>>>>>>>

Application                :  TestRunner.py
Application version        :  SD_DVT_CQ_Spec 6.0.0
Application folder         :  C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT
Command line               :  --protocol=sd --sdtestid=STPTRNSABRTST04 --dbconnection=none --adapter=SD05412_9ADT --sdConfiguration=SDR50 --projectconfig=C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB --paramsfile=C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB\Colibri_SD_HC_I059_SDR104_Prem_C10_U1.txt --logfilename=C:\Results\STPTRNSABRTST04_CQ.txt --CQ=1
Protocol                   :  sd
Serial number (CInfo)      :  sdin1091
Adapter                    :  SDR Tester (S#: SD05412_9ADT): (Slot#:0)
Adapter serial number      :  SD05412_9ADT
Adapter type               :  USD
Capacity                   :  32G
Firmware revision          :  6RB C030
Flashware revision         :  6RB C030
IP Version Info            :  '' 01.04.00... ID 0x20
                           :  '' 00.01.00... ID 0x10
Memory ID                  :  453CA9A27A510B140000000000000000
Controller                 :  81
Trim settings              :  <Unavailable>
Model revision             :  <Unavailable>
Stream name                :  <Unavailable>
FE IP                      :  1
Romware revision           :  RRBZ1152
Architecture               :  Gen 6
Model                      :  SanDisk   COLIBRI
Memory type                :  Unknown Device Type-2LC x 1
ASIC id                    :  81
Controller type            :  Unknown Controller   UMC-J
Driver version (actual)    :  10.0.0.1 (0x a.0.0.1)
Driver version (released)  :  7.1.4.3 (0x 7.1.4.3)
Date and time              :  2016-11-28 14:42:46
Host name                  :  SDDVT_Test2
Host IP address            :  10.65.153.121
Operating system           :  Microsoft Windows [Version 6.1.7601] Service Pack 1
SanDisk Python version     :  1.17.5rc3
CTF/PySFCL build number    :  1.3.217491.217491
PySFCL version             :  1.3.217491
CTF version                :  1.3
Python version             :  2.4.2
Project Name(Validation)   :  <None>


<<<<<<<<<<<<<<<      SFCL CONFIGURATION      >>>>>>>>>>>>>>>

[SD enumeration]
cmdtiming=0
useRelay=0
autocompare=0
relayPolarity=1
relaySleep=500
measureCmdLatency=1
logicalChunkSize=0
diagDisabled=0
diagCmdTimeout=800
useVddf=on
nethostloglevel=
nethostautoCompare=on
CmdManShowProgress=off
nethostsendtimeout=240000
nethostreceivetimeout=240000
countOfRetryCmdIfCrc=3
enableOORPatch=
lbaForSctpCommands=0x100
subProtocol=0
doDle=0
diagnosticChunkSize=128
logmsgformat=timeMessage
logtimeformat=time
relaySlot=0
unloadDll=on
hardTimeoutUnloadDll=on
minDuration=7200
remoteDevice=
skipProduction=0
ishighspeedmode=0
highfreqinhz=500
modeldelaytimeindiagnostic=0
cqDataTransferPollingShortInterval=1000
cqDataStatusPollingLongInterval=1800000
sataPort0ToRelaySlot=0
sataPort1ToRelaySlot=0
sataPort2ToRelaySlot=0
sataPort3ToRelaySlot=0
relayToComportMapping=1
sdbToComportMapping=1
sataAdapterPort0=0
sataAdapterPort1=0
sataAdapterPort2=0
sataAdapterPort3=0
sataPort0ToMubIndx=1
sataPort1ToMubIndx=1
sataPort2ToMubIndx=1
sataPort3ToMubIndx=1

[Common]
enableChunkTraces=off
enablePythonTraceback=1
sctpPhaseDelay=0
printcommandcount=on
debugfilepath=
initXMLPath=\\regression.lab.sandisk.com\shared\configurations
delayBeforePwrCycle=0
delayAfterPwrCycle=0
reportCountStatistics=1
reportPackage=0
sfclConfig=Common

<<<<<<<<<<<<<<<          CARD INFO           >>>>>>>>>>>>>>>

Number Of LBAs  :  0x3b72400
Card Is Locked  :  No
Secure Area     :  0x28000
Card Secure     :  No
WP map          :

<<<<<<<<<<<<<<<           CID INFO           >>>>>>>>>>>>>>>

Manufacturer Id  :  0x3
Card/BGA         :  0
Application Id   :  0x5344
ProductName      :  AGGCD
ProductRev       :  0x80
SerialNumber     :  0x23482900
Reserved         :  0x23482900
Year             :  2000
Month            :  11
CRC Check Sum    :  0x5
Not Used         :

<<<<<<<<<<<<<<<           CSD INFO           >>>>>>>>>>>>>>>

CSD Structure                     :  0x1
reserv. 1                         :  0x0
TAAC                              :  0xe
NSAC*100                          :  0x0
data transfer rate                :  0x32
card command classes CCC          :  0x5b5
max. read data Blk. length        :  0x9
partial blocks for read allowed   :  0x0
write block misalignment          :  0x0
read block misalignment           :  0x0
DSR implemented                   :  0x0
reserved 2                        :  0x0
device size                       :  0xedc8
Reserv3                           :  0x0
SD Erase Blk Len En               :  0x1
SD Sec Size                       :  0x7f
write protect group size          :  0x0
write protect group enable        :  0x0
Reserv4                           :  0x0
write speed factor                :  0x2
max. write data blk. length       :  0x9
partial blocks for write allowed  :  0x0
File Format Group                 :  0x0
copy flag(OTP)                    :  0x1
permanent write protection        :  0x0
temporary write protection        :  0x0
File Format                       :  0x0
CRC                               :  0x0
<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

<<<<<<<<<<<<<<<    COMMAND LINE ARGUMENTS    >>>>>>>>>>>>>>>


Processed command-line options:
   --protocol                                       : sd
   --adapterspecifier                               : ain:-1,desc:SD05412_9ADT
   --extcmdset                                      : FBCC
   --sdtestid                                       : STPTRNSABRTST04
   --sdconfiguration                                : SDR50
   --cyclecount                                     : 1
   --testduration                                   : 20h
   --writereadpercent                               : 100
   --paramsfile                                     : 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB\Colibri_SD_HC_I059_SDR104_Prem_C10_U1.txt'
   --randomseed                                     : 101884198398
   --projectconfig                                  : C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\Projects_configuration\Colibri_32GB
   --logfiledir                                     : C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\DvtTestLogs
   --hostlog                                        : 0
   --cq                                             : 1
   --dbconnection                                   : 'none'
   --temperature                                    : 25
   --voltage                                        : 0.00
   --logfilename                                    : 'C:\Results\STPTRNSABRTST04_CQ.txt'
   --logtostdout                                    : Y
   --overwriteexistinglogfile                       : Y
   --logrotationspecifier                           : NoRotation
   --loglevel                                       : <4, INFO>
   --testcomment                                    : None
   --dbproject                                      : CTFW_QA
   --mdfwprojectid                                  : None
   --mdconfigid                                     : None
   --mdtestid                                       : None
   --valid                                          : True
   --waitTime                                       : None
   --jitter                                         : F
   --testlimits                                     : <None>-<None>
   --LabID                                          : None
   --DutID                                          : None
   --LaunchId                                       : None
   --TestQueueId                                    : None
   --xfermode                                       : <N>
   --networkperiod                                  : <N>
   --networkpath                                    : <N>
   --dumpfile                                       : 
   --printcommandcount                              : N
   --debugfilepath                                  : <N>
   --chpfilename                                    : <N>
   --enablecmdhistory                               : Y
   --cmdhistextfilename                             : <N>
   --cmdhistcsvfilename                             : <N>
   --histdisplaysizes                               : 0,250
   --stoponcommands                                 : <N>
   --notifyemailid                                  : <N>
   --spyoncommands                                  : <N>
   --notifyoncommands                               : <N>
   --CmdManShowProgress                             : 'off'
   --enablePowerCycle                               : '1'
   --measureCmdLatency                              : '1'
   --useVddf                                        : 'on'
   --gvi                                            : 'off'
   --gviOnFly                                       : 'off'
   --gviEncryption                                  : '0'
   --remoteDevice                                   : ''
   --skipProduction                                 : '0'
   --forceMultipleMode                              : 'off'
   --countOfRetryCmdIfCrc                           : '3'
   --enableOORPatch                                 : 'on'
   --connectonly                                    : 'off'
   --nethostautocompare                             : 'on'
   --nethostpowercycle                              : '0'
   --nethostloglevel                                : '3'
   --nethostlogconsole                              : '0'
   --nethostsanitychecks                            : '0'
   --nethostsendtimeout                             : '240000'
   --nethostreceivetimeout                          : '240000'
   --subProtocol                                    : '0'
   --useVccq                                        : '3.3'
   --maxprotocoloverhead                            : '0'
   --maxprotocoltimingmode                          : '0'
   --isHighSpeedMode                                : '0'
   --highFreqInHz                                   : '500'
   --doDle                                          : '0'
   --lbaForSctpCommands                             : '0x100'
   --cmdfilename                                    : ''
   --cmdtofilewrites                                : '0'
   --cmdtiming                                      : '0'
   --cmdtocsv                                       : '0'
   --logicalChunkSize                               : '0'
   --diagnosticChunkSize                            : '128'
   --readChunkSize                                  : '0'
   --writeChunkSize                                 : '0'
   --useRelay                                       : '0'
   --sataPort0ToRelaySlot                           : '0'
   --sataPort1ToRelaySlot                           : '0'
   --sataPort2ToRelaySlot                           : '0'
   --sataPort3ToRelaySlot                           : '0'
   --relayToComportMapping                          : '1'
   --useSDB                                         : '0'
   --sdbToComportMapping                            : '1'
   --sataAdapterPort0                               : '0'
   --sataAdapterPort1                               : '0'
   --sataAdapterPort2                               : '0'
   --sataAdapterPort3                               : '0'
   --relayPolarity                                  : '1'
   --relaySleep                                     : '500'
   --diagCmdTimeout                                 : '800'
   --diagDisabled                                   : '0'
   --hardTimeout                                    : '30000'
   --commandscriptfolder                            : ''
   --commandscriptstart                             : '0'
   --logmsgformat                                   : 'timeMessage'
   --logtimeformat                                  : 'time'
   --relaySlot                                      : '0'
   --atbuRelaySlot                                  : '3'
   --diskCacheStore                                 : ''
   --stopOnStart                                    : '0'
   --notifyserver                                   : ''
   --notifyretry                                    : '2'
   --notifytimeout                                  : '60'
   --failonnotifytimeout                            : '0'
   --revertactions                                  : ''
   --timechangedetection                            : '0'
   --timechangecondition                            : '600'
   --timechangecheckinterval                        : '1000'
   --inputmonitor                                   : '1'
   --logtimeprecision                               : '2'
   --nonSndkDevEnumeration                          : '0'
   --modelini                                       : 'C:\Program Files\SanDisk\CTF\Dlls\model.ini'
   --sfclini                                        : 'C:\Program Files\SanDisk\CTF\Dlls\sfcl.ini'
   --relayForceDownload                             : 'off'
   --powercycleoninit                               : 'off'
   --stopBgOperationOnFail                          : 'off'
   --autocompare                                    : '0'
   --autocompareRandomseed                          : '12345678'
   --modeldelaytimeindiagnostic                     : '0'
   --ForceDownloadMechanism                         : '0'
   --EnableUARTDebugLog                             : '0'
   --UARTBaudRate                                   : '230400'
   --SerialUARTToCom                                : '0'
   --UARTDebugFilePath                              : ''
   --sataPort0ToMubIndx                             : '1'
   --sataPort1ToMubIndx                             : '1'
   --sataPort2ToMubIndx                             : '1'
   --sataPort3ToMubIndx                             : '1'
   --fclStep                                        : '0'
   --fclCollectReads                                : '0'
   --fclCollectWrites                               : '0'
   --fclCollectErases                               : '0'
   --fclCollectAOMReads                             : '0'
   --fclAomBase                                     : '10'
   --aomStep                                        : '0'
   --aomMapFile                                     : '0'
   --fclAomSaveFilesStep                            : '1000'
   --gfa                                            : '0'
   --atbuSoftwareLocation                           : ''
   --atbuMemoryName                                 : ''
   --atbuProfilesLocation                           : ''
   --atbuThresholdValue                             : '0'
   --atbuTransitionTime                             : '0'
   --atbuDcCompensation                             : ''


<<<<<<<<<<<<<<< RUNNING TEST: STPTRNSABRTST04_4_Call_All_PL >>>>>>>>>>>>>>>



14:42:46: ###### Running call_All_PL_4 scripts  ######
14:42:53: FPGA Image Downloaded Is:C:\Program Files\SanDisk\CTF\FPGA\SD_CQ_SDR2_2-20-00-0002.bin
14:42:53: MaxLba of the card: 0x3B72400 
14:42:55: [GO7_globalPreTestingSettings]### Default Initialization Start
14:42:55: [DVTCommonLib]###  SwitchHostVoltageRegion called
14:42:55: [ SwitchHostVoltageRegion(False) , Command count = 44 ] 
14:42:55: [DVTCommonLib]###  SwitchHostVoltageRegion Completed 

14:42:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 45 ] 
14:42:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 46 ] 
14:42:57: [ CardInit() , Command count = 47 ] 
14:42:57: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 48 ] 

<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165829
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

14:42:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:57: ####CSD Registe 2.0 Values####
14:42:57: CSD_STRUCTURE                                 :0x1
14:42:57: Reserv1                                       :0x0
14:42:57: Time Access 1 TAAC                            :0xe
14:42:57: Time Access 2 NSAC*100                        :0x0
14:42:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:57: Card Command Classess CCC                     :0x5b5
14:42:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:57: DSR(driver stage register)  DSR_IMP           :0x0
14:42:57: Reserv2                                       :0x0
14:42:57: Device Size C_SIZE                            :0xedc8
14:42:57: Reserv3                                       :0x0
14:42:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:57: Reserv4                                       :0x0
14:42:57: Write Speed Factor R2W_FACTOR                 :0x2
14:42:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:57: FILE_FORMAT_GRP                               :0x0
14:42:57: COPY flag                                     :0x1
14:42:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:57: File_Format                                   :0x0
14:42:57: CRC                                           :0x0
14:42:57: ####CSD Registe Values####  

14:42:57: [DVTCommonLib]### CardInfo :###****CARD INFO****
14:42:57: ProductSerialNumber = 0x23482900
14:42:57: CardMaximumLBA      = 0x3b72400
14:42:57: CardCapacity        = 32G
14:42:57: Is card secure      = 0
14:42:57: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

14:42:57: [GO7_globalPreTestingSettings]### Default Initialization Completed 


14:42:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:59: Host Frequency set to 25000 KHz
14:42:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x06786870>, 0x0, True) , Command count = 49 ] 
14:42:59: [GO18_globalSetVolt]### Host voltage value is set.
14:42:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x06786DE0>, 0x0, False) , Command count = 50 ] 
14:42:59: [GO18_globalSetVolt]### Host voltage value is set.
14:42:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 51 ] 
14:42:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 52 ] 
14:42:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 53 ] 
14:42:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06786540>, <py_sfcl.CommandDataDefinition object at 0x067868A0>) , Command count = 54 ] 
14:42:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067867E0>, <py_sfcl.CommandDataDefinition object at 0x067866F0>) , Command count = 55 ] 
14:42:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:59: [ SetCardRCA(0x1, 0xD555) , Command count = 56 ] 
14:43:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:00: Host Frequency set to 25000 KHz
14:43:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:00: ####CSD Registe 2.0 Values####
14:43:00: CSD_STRUCTURE                                 :0x1
14:43:00: Reserv1                                       :0x0
14:43:00: Time Access 1 TAAC                            :0xe
14:43:00: Time Access 2 NSAC*100                        :0x0
14:43:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:00: Card Command Classess CCC                     :0x5b5
14:43:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:00: DSR(driver stage register)  DSR_IMP           :0x0
14:43:00: Reserv2                                       :0x0
14:43:00: Device Size C_SIZE                            :0xedc8
14:43:00: Reserv3                                       :0x0
14:43:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:00: Reserv4                                       :0x0
14:43:00: Write Speed Factor R2W_FACTOR                 :0x2
14:43:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:00: FILE_FORMAT_GRP                               :0x0
14:43:00: COPY flag                                     :0x1
14:43:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:00: File_Format                                   :0x0
14:43:00: CRC                                           :0x0
14:43:00: ####CSD Registe Values####  

14:43:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:00: [GetSCRRegisterEntry] Passed
14:43:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:00: Data_Status_After Erases          : 0
14:43:00: CPRM Security Support             : No Security
14:43:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:00: Spec. Version                     : Version 3.0X
14:43:00: Extended Security Support         : Extended_Security_Not_Supported
14:43:00: Command Support                   : COMMAND_SUPPORT
14:43:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06786960>, <py_sfcl.CommandDataDefinition object at 0x06786FC0>) , Command count = 57 ] 
14:43:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067865A0>, <py_sfcl.CommandDataDefinition object at 0x06786420>) , Command count = 58 ] 
14:43:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:00: [ SetBusWidth(0x4) , Command count = 59 ] 
14:43:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x067864B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 60 ] 
14:43:00: Protected Area Size 0x28000
14:43:00: Bus Width           2
14:43:00: Secure Mode         0
14:43:00: Speed  Class        4
14:43:00: Perf Move           0
14:43:00: Au Size             9
14:43:00: Erase Size          15
14:43:00: Erase Timeout       1
14:43:00: Erase offset        1
14:43:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 61 ] 
14:43:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:00: Host Frequency set to 100000 KHz
14:43:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:00: ####CSD Registe 2.0 Values####
14:43:00: CSD_STRUCTURE                                 :0x1
14:43:00: Reserv1                                       :0x0
14:43:00: Time Access 1 TAAC                            :0xe
14:43:00: Time Access 2 NSAC*100                        :0x0
14:43:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:00: Card Command Classess CCC                     :0x5b5
14:43:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:00: DSR(driver stage register)  DSR_IMP           :0x0
14:43:00: Reserv2                                       :0x0
14:43:00: Device Size C_SIZE                            :0xedc8
14:43:00: Reserv3                                       :0x0
14:43:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:00: Reserv4                                       :0x0
14:43:00: Write Speed Factor R2W_FACTOR                 :0x2
14:43:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:00: FILE_FORMAT_GRP                               :0x0
14:43:00: COPY flag                                     :0x1
14:43:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:00: File_Format                                   :0x0
14:43:00: CRC                                           :0x0
14:43:00: ####CSD Registe Values####  

14:43:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067864E0>, <py_sfcl.CommandDataDefinition object at 0x067863F0>) , Command count = 62 ] 
14:43:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067862A0>, <py_sfcl.CommandDataDefinition object at 0x06786B40>) , Command count = 63 ] 
14:43:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06786360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 64 ] 
14:43:00: Protected Area Size 0x28000
14:43:00: Bus Width           2
14:43:00: Secure Mode         0
14:43:00: Speed  Class        4
14:43:00: Perf Move           0
14:43:00: Au Size             9
14:43:00: Erase Size          15
14:43:00: Erase Timeout       1
14:43:00: Erase offset        1
14:43:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:00: ########################################
14:43:00: Stated Running script STPTRNSABRTST62_util_LOAD_VARS 
14:43:00: ########################################
14:43:00: Failed Running script <module 'STPTRNSABRTST62_util_LOAD_VARS' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST62_util_LOAD_VARS.pyc'> with error 'module' object has no attribute 'TestProcedure' 
14:43:00: ########################################
14:43:00: ########################################
14:43:00: Stated Running script STPTRNSABRTST39_DVT_ST_PowerLoss_2_17_1_Busy_1ms_5ms_Jump 
14:43:00: ########################################
14:43:00: ###### Running STPTRNSABRTST39_DVT_ST_PowerLoss_2_17_1_Busy_1ms_5ms_Jump Test ###### 

14:43:00: STPTRNSABRTST39_DVT_ST_PowerLoss_2_17_1_Busy_1ms_5ms_Jump[INFO] ### Called STPTRNSABRTST62_util_LOAD_VARS for global values
14:43:00: STPTRNSABRTST39_DVT_ST_PowerLoss_2_17_1_Busy_1ms_5ms_Jump[INFO] ### Completed importing global values from STPTRNSABRTST62_util_LOAD_VARS

14:43:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:02: Host Frequency set to 25000 KHz
14:43:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:02: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x067BF660>, 0x0, True) , Command count = 65 ] 
14:43:02: [GO18_globalSetVolt]### Host voltage value is set.
14:43:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x067BF360>, 0x0, False) , Command count = 66 ] 
14:43:02: [GO18_globalSetVolt]### Host voltage value is set.
14:43:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 67 ] 
14:43:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 68 ] 
14:43:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 69 ] 
14:43:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BFB40>, <py_sfcl.CommandDataDefinition object at 0x067BFA80>) , Command count = 70 ] 
14:43:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BF750>, <py_sfcl.CommandDataDefinition object at 0x067BF510>) , Command count = 71 ] 
14:43:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:02: [ SetCardRCA(0x1, 0xD555) , Command count = 72 ] 
14:43:02: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:02: Host Frequency set to 25000 KHz
14:43:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:02: ####CSD Registe 2.0 Values####
14:43:02: CSD_STRUCTURE                                 :0x1
14:43:02: Reserv1                                       :0x0
14:43:02: Time Access 1 TAAC                            :0xe
14:43:02: Time Access 2 NSAC*100                        :0x0
14:43:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:02: Card Command Classess CCC                     :0x5b5
14:43:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:02: DSR(driver stage register)  DSR_IMP           :0x0
14:43:02: Reserv2                                       :0x0
14:43:02: Device Size C_SIZE                            :0xedc8
14:43:02: Reserv3                                       :0x0
14:43:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:02: Reserv4                                       :0x0
14:43:02: Write Speed Factor R2W_FACTOR                 :0x2
14:43:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:02: FILE_FORMAT_GRP                               :0x0
14:43:02: COPY flag                                     :0x1
14:43:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:02: File_Format                                   :0x0
14:43:02: CRC                                           :0x0
14:43:02: ####CSD Registe Values####  

14:43:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:02: [GetSCRRegisterEntry] Passed
14:43:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:02: Data_Status_After Erases          : 0
14:43:02: CPRM Security Support             : No Security
14:43:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:02: Spec. Version                     : Version 3.0X
14:43:02: Extended Security Support         : Extended_Security_Not_Supported
14:43:02: Command Support                   : COMMAND_SUPPORT
14:43:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0664DA20>, <py_sfcl.CommandDataDefinition object at 0x067BF870>) , Command count = 73 ] 
14:43:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BFF90>, <py_sfcl.CommandDataDefinition object at 0x067BF600>) , Command count = 74 ] 
14:43:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:02: [ SetBusWidth(0x4) , Command count = 75 ] 
14:43:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x067BF810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 76 ] 
14:43:02: Protected Area Size 0x28000
14:43:02: Bus Width           2
14:43:02: Secure Mode         0
14:43:02: Speed  Class        4
14:43:02: Perf Move           0
14:43:02: Au Size             9
14:43:02: Erase Size          15
14:43:02: Erase Timeout       1
14:43:02: Erase offset        1
14:43:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 77 ] 
14:43:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:03: Host Frequency set to 100000 KHz
14:43:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:03: ####CSD Registe 2.0 Values####
14:43:03: CSD_STRUCTURE                                 :0x1
14:43:03: Reserv1                                       :0x0
14:43:03: Time Access 1 TAAC                            :0xe
14:43:03: Time Access 2 NSAC*100                        :0x0
14:43:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:03: Card Command Classess CCC                     :0x5b5
14:43:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:03: DSR(driver stage register)  DSR_IMP           :0x0
14:43:03: Reserv2                                       :0x0
14:43:03: Device Size C_SIZE                            :0xedc8
14:43:03: Reserv3                                       :0x0
14:43:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:03: Reserv4                                       :0x0
14:43:03: Write Speed Factor R2W_FACTOR                 :0x2
14:43:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:03: FILE_FORMAT_GRP                               :0x0
14:43:03: COPY flag                                     :0x1
14:43:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:03: File_Format                                   :0x0
14:43:03: CRC                                           :0x0
14:43:03: ####CSD Registe Values####  

14:43:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BF3C0>, <py_sfcl.CommandDataDefinition object at 0x067BF5D0>) , Command count = 78 ] 
14:43:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BF480>, <py_sfcl.CommandDataDefinition object at 0x067BF9F0>) , Command count = 79 ] 
14:43:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1D4000 with Constant Pattern
14:43:36: [ WrLbaNoData(0x0, 0x1D4000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 80 ] 
14:43:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1D4000 with Constant Pattern 

14:43:36: STPTRNSABRTST39_DVT_ST_PowerLoss_2_17_1_Busy_1ms_5ms_Jump[INFO] ### Outer loop Count 1024
14:43:36: STPTRNSABRTST39_DVT_ST_PowerLoss_2_17_1_Busy_1ms_5ms_Jump[INFO] ### Inner loop Count 9
14:43:36: STPTRNSABRTST39_DVT_ST_PowerLoss_2_17_1_Busy_1ms_5ms_Jump[INFO] ### Multiple Read Stop Transmission called
14:43:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x067BF420>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x067BFF00>, <py_sfcl.PySEnhancedCmdData object at 0x067BFE10>, <None>, <py_sfcl.Command23 object at 0x067BFD80>) , Command count = 81 ] 
14:43:36: STPTRNSABRTST39_DVT_ST_PowerLoss_2_17_1_Busy_1ms_5ms_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:43:36: STPTRNSABRTST39_DVT_ST_PowerLoss_2_17_1_Busy_1ms_5ms_Jump[INFO] ### Multiple Write with PowerLoss called
14:43:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x067BF960>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x067BF240>, <py_sfcl.PySEnhancedCmdData object at 0x067BFC90>, <None>) , Command count = 82 ] 
14:43:46: [ GetCardStatus() , Command count = 83 ] 
14:43:46: Failed Running script <module 'STPTRNSABRTST39_DVT_ST_PowerLoss_2_17_1_Busy_1ms_5ms_Jump' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST39_DVT_ST_PowerLoss_2_17_1_Busy_1ms_5ms_Jump.py'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x25L (37) executing command 'EnhancedCommand'
   Description : Time out waiting for host response
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.PySReadWriteParams object at 0x067BF960>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x067BF240>, <py_sfcl.PySEnhancedCmdData object at 0x067BFC90>, <None>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No
 
14:43:46: ########################################
14:43:46: ########################################
14:43:46: Stated Running script STPTRNSABRTST40_DVT_ST_PowerLoss_2_17_2_Busy_5ms_10ms_Jump 
14:43:46: ########################################
14:43:46: ###### Running STPTRNSABRTST40_DVT_ST_PowerLoss_2_17_2_Busy_5ms_10ms_Jump Test ###### 

14:43:46: STPTRNSABRTST40_DVT_ST_PowerLoss_2_17_2_Busy_5ms_10ms_Jump[INFO] ### Called STPTRNSABRTST62_util_LOAD_VARS for global values
14:43:46: STPTRNSABRTST40_DVT_ST_PowerLoss_2_17_2_Busy_5ms_10ms_Jump[INFO] ### Completed importing global values from STPTRNSABRTST62_util_LOAD_VARS

14:43:46: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:48: Host Frequency set to 25000 KHz
14:43:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:48: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0678F210>, 0x0, True) , Command count = 84 ] 
14:43:48: [GO18_globalSetVolt]### Host voltage value is set.
14:43:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0678F0C0>, 0x0, False) , Command count = 85 ] 
14:43:48: [GO18_globalSetVolt]### Host voltage value is set.
14:43:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 86 ] 
14:43:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 87 ] 
14:43:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 88 ] 
14:43:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0678F240>, <py_sfcl.CommandDataDefinition object at 0x0678F1B0>) , Command count = 89 ] 
14:43:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0678F270>, <py_sfcl.CommandDataDefinition object at 0x0678F2A0>) , Command count = 90 ] 
14:43:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:49: [ SetCardRCA(0x1, 0xD555) , Command count = 91 ] 
14:43:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:49: Host Frequency set to 25000 KHz
14:43:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:49: ####CSD Registe 2.0 Values####
14:43:49: CSD_STRUCTURE                                 :0x1
14:43:49: Reserv1                                       :0x0
14:43:49: Time Access 1 TAAC                            :0xe
14:43:49: Time Access 2 NSAC*100                        :0x0
14:43:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:49: Card Command Classess CCC                     :0x5b5
14:43:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:49: DSR(driver stage register)  DSR_IMP           :0x0
14:43:49: Reserv2                                       :0x0
14:43:49: Device Size C_SIZE                            :0xedc8
14:43:49: Reserv3                                       :0x0
14:43:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:49: Reserv4                                       :0x0
14:43:49: Write Speed Factor R2W_FACTOR                 :0x2
14:43:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:49: FILE_FORMAT_GRP                               :0x0
14:43:49: COPY flag                                     :0x1
14:43:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:49: File_Format                                   :0x0
14:43:49: CRC                                           :0x0
14:43:49: ####CSD Registe Values####  

14:43:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:49: [GetSCRRegisterEntry] Passed
14:43:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:49: Data_Status_After Erases          : 0
14:43:49: CPRM Security Support             : No Security
14:43:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:49: Spec. Version                     : Version 3.0X
14:43:49: Extended Security Support         : Extended_Security_Not_Supported
14:43:49: Command Support                   : COMMAND_SUPPORT
14:43:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0678F510>, <py_sfcl.CommandDataDefinition object at 0x0678F330>) , Command count = 92 ] 
14:43:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0678F390>, <py_sfcl.CommandDataDefinition object at 0x0678F3C0>) , Command count = 93 ] 
14:43:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:49: [ SetBusWidth(0x4) , Command count = 94 ] 
14:43:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0678F480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 95 ] 
14:43:49: Protected Area Size 0x28000
14:43:49: Bus Width           2
14:43:49: Secure Mode         0
14:43:49: Speed  Class        4
14:43:49: Perf Move           0
14:43:49: Au Size             9
14:43:49: Erase Size          15
14:43:49: Erase Timeout       1
14:43:49: Erase offset        1
14:43:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 96 ] 
14:43:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:49: Host Frequency set to 100000 KHz
14:43:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:49: ####CSD Registe 2.0 Values####
14:43:49: CSD_STRUCTURE                                 :0x1
14:43:49: Reserv1                                       :0x0
14:43:49: Time Access 1 TAAC                            :0xe
14:43:49: Time Access 2 NSAC*100                        :0x0
14:43:49: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:49: Card Command Classess CCC                     :0x5b5
14:43:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:49: DSR(driver stage register)  DSR_IMP           :0x0
14:43:49: Reserv2                                       :0x0
14:43:49: Device Size C_SIZE                            :0xedc8
14:43:49: Reserv3                                       :0x0
14:43:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:49: Reserv4                                       :0x0
14:43:49: Write Speed Factor R2W_FACTOR                 :0x2
14:43:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:49: FILE_FORMAT_GRP                               :0x0
14:43:49: COPY flag                                     :0x1
14:43:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:49: File_Format                                   :0x0
14:43:49: CRC                                           :0x0
14:43:49: ####CSD Registe Values####  

14:43:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0678F780>, <py_sfcl.CommandDataDefinition object at 0x0678F5A0>) , Command count = 97 ] 
14:43:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0678F600>, <py_sfcl.CommandDataDefinition object at 0x0678F630>) , Command count = 98 ] 
14:43:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1D4000 with Constant Pattern
14:44:27: [ WrLbaNoData(0x0, 0x1D4000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 99 ] 
14:44:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1D4000 with Constant Pattern 

14:44:27: STPTRNSABRTST40_DVT_ST_PowerLoss_2_17_2_Busy_5ms_10ms_Jump[INFO] ### Outer loop Count 1024
14:44:27: STPTRNSABRTST40_DVT_ST_PowerLoss_2_17_2_Busy_5ms_10ms_Jump[INFO] ### Inner loop Count 9
14:44:27: STPTRNSABRTST40_DVT_ST_PowerLoss_2_17_2_Busy_5ms_10ms_Jump[INFO] ### Multiple Read Stop Transmission called
14:44:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0678F6C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0678F6F0>, <py_sfcl.PySEnhancedCmdData object at 0x0678F720>, <None>, <py_sfcl.Command23 object at 0x0678F7B0>) , Command count = 100 ] 
14:44:27: STPTRNSABRTST40_DVT_ST_PowerLoss_2_17_2_Busy_5ms_10ms_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:44:27: STPTRNSABRTST40_DVT_ST_PowerLoss_2_17_2_Busy_5ms_10ms_Jump[INFO] ### Multiple Write with PowerLoss called
14:44:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0678F8D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0678F900>, <py_sfcl.PySEnhancedCmdData object at 0x0678F930>, <None>) , Command count = 101 ] 
14:44:37: [ GetCardStatus() , Command count = 102 ] 
14:44:37: Failed Running script <module 'STPTRNSABRTST40_DVT_ST_PowerLoss_2_17_2_Busy_5ms_10ms_Jump' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST40_DVT_ST_PowerLoss_2_17_2_Busy_5ms_10ms_Jump.py'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x25L (37) executing command 'EnhancedCommand'
   Description : Time out waiting for host response
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.PySReadWriteParams object at 0x0678F8D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0678F900>, <py_sfcl.PySEnhancedCmdData object at 0x0678F930>, <None>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No
 
14:44:37: ########################################
14:44:37: ########################################
14:44:37: Stated Running script STPTRNSABRTST41_DVT_ST_PowerLoss_2_17_3_Busy_10ms_50ms_Jump 
14:44:37: ########################################
14:44:37: ###### Running STPTRNSABRTST41_DVT_ST_PowerLoss_2_17_3_Busy_10ms_50ms_Jump Test ###### 

14:44:37: STPTRNSABRTST41_DVT_ST_PowerLoss_2_17_3_Busy_10ms_50ms_Jump[INFO] ### Called STPTRNSABRTST62_util_LOAD_VARS for global values
14:44:37: STPTRNSABRTST41_DVT_ST_PowerLoss_2_17_3_Busy_10ms_50ms_Jump[INFO] ### Completed importing global values from STPTRNSABRTST62_util_LOAD_VARS

14:44:37: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:39: Host Frequency set to 25000 KHz
14:44:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:39: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x0678FED0>, 0x0, True) , Command count = 103 ] 
14:44:39: [GO18_globalSetVolt]### Host voltage value is set.
14:44:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x0678FEA0>, 0x0, False) , Command count = 104 ] 
14:44:39: [GO18_globalSetVolt]### Host voltage value is set.
14:44:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 105 ] 
14:44:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 106 ] 
14:44:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 107 ] 
14:44:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0678FE40>, <py_sfcl.CommandDataDefinition object at 0x0678FE70>) , Command count = 108 ] 
14:44:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0678FF90>, <py_sfcl.CommandDataDefinition object at 0x0678FF00>) , Command count = 109 ] 
14:44:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:39: [ SetCardRCA(0x1, 0xD555) , Command count = 110 ] 
14:44:39: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:39: Host Frequency set to 25000 KHz
14:44:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:39: ####CSD Registe 2.0 Values####
14:44:39: CSD_STRUCTURE                                 :0x1
14:44:39: Reserv1                                       :0x0
14:44:39: Time Access 1 TAAC                            :0xe
14:44:39: Time Access 2 NSAC*100                        :0x0
14:44:39: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:39: Card Command Classess CCC                     :0x5b5
14:44:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:39: DSR(driver stage register)  DSR_IMP           :0x0
14:44:39: Reserv2                                       :0x0
14:44:39: Device Size C_SIZE                            :0xedc8
14:44:39: Reserv3                                       :0x0
14:44:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:39: Reserv4                                       :0x0
14:44:39: Write Speed Factor R2W_FACTOR                 :0x2
14:44:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:39: FILE_FORMAT_GRP                               :0x0
14:44:39: COPY flag                                     :0x1
14:44:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:39: File_Format                                   :0x0
14:44:39: CRC                                           :0x0
14:44:39: ####CSD Registe Values####  

14:44:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:39: [GetSCRRegisterEntry] Passed
14:44:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:39: Data_Status_After Erases          : 0
14:44:39: CPRM Security Support             : No Security
14:44:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:39: Spec. Version                     : Version 3.0X
14:44:39: Extended Security Support         : Extended_Security_Not_Supported
14:44:39: Command Support                   : COMMAND_SUPPORT
14:44:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0678FD20>, <py_sfcl.CommandDataDefinition object at 0x0678FD80>) , Command count = 111 ] 
14:44:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06792180>, <py_sfcl.CommandDataDefinition object at 0x06792030>) , Command count = 112 ] 
14:44:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:39: [ SetBusWidth(0x4) , Command count = 113 ] 
14:44:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x067920F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 114 ] 
14:44:39: Protected Area Size 0x28000
14:44:39: Bus Width           2
14:44:39: Secure Mode         0
14:44:39: Speed  Class        4
14:44:39: Perf Move           0
14:44:39: Au Size             9
14:44:39: Erase Size          15
14:44:39: Erase Timeout       1
14:44:39: Erase offset        1
14:44:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 115 ] 
14:44:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:39: Host Frequency set to 100000 KHz
14:44:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:39: ####CSD Registe 2.0 Values####
14:44:39: CSD_STRUCTURE                                 :0x1
14:44:39: Reserv1                                       :0x0
14:44:39: Time Access 1 TAAC                            :0xe
14:44:39: Time Access 2 NSAC*100                        :0x0
14:44:39: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:39: Card Command Classess CCC                     :0x5b5
14:44:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:39: DSR(driver stage register)  DSR_IMP           :0x0
14:44:39: Reserv2                                       :0x0
14:44:39: Device Size C_SIZE                            :0xedc8
14:44:39: Reserv3                                       :0x0
14:44:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:39: Reserv4                                       :0x0
14:44:39: Write Speed Factor R2W_FACTOR                 :0x2
14:44:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:39: FILE_FORMAT_GRP                               :0x0
14:44:39: COPY flag                                     :0x1
14:44:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:39: File_Format                                   :0x0
14:44:39: CRC                                           :0x0
14:44:39: ####CSD Registe Values####  

14:44:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067923F0>, <py_sfcl.CommandDataDefinition object at 0x06792210>) , Command count = 116 ] 
14:44:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06792270>, <py_sfcl.CommandDataDefinition object at 0x067922A0>) , Command count = 117 ] 
14:44:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1D4000 with Constant Pattern
14:45:17: [ WrLbaNoData(0x0, 0x1D4000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 118 ] 
14:45:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1D4000 with Constant Pattern 

14:45:17: STPTRNSABRTST41_DVT_ST_PowerLoss_2_17_3_Busy_10ms_50ms_Jump[INFO] ### Outer loop Count 1024
14:45:17: STPTRNSABRTST41_DVT_ST_PowerLoss_2_17_3_Busy_10ms_50ms_Jump[INFO] ### Inner loop Count 9
14:45:17: STPTRNSABRTST41_DVT_ST_PowerLoss_2_17_3_Busy_10ms_50ms_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06792330>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06792360>, <py_sfcl.PySEnhancedCmdData object at 0x06792390>, <None>, <py_sfcl.Command23 object at 0x06792420>) , Command count = 119 ] 
14:45:17: STPTRNSABRTST41_DVT_ST_PowerLoss_2_17_3_Busy_10ms_50ms_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:17: STPTRNSABRTST41_DVT_ST_PowerLoss_2_17_3_Busy_10ms_50ms_Jump[INFO] ### Multiple Write with PowerLoss called
14:45:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06792540>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06792570>, <py_sfcl.PySEnhancedCmdData object at 0x067925A0>, <None>) , Command count = 120 ] 
14:45:27: [ GetCardStatus() , Command count = 121 ] 
14:45:27: Failed Running script <module 'STPTRNSABRTST41_DVT_ST_PowerLoss_2_17_3_Busy_10ms_50ms_Jump' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST41_DVT_ST_PowerLoss_2_17_3_Busy_10ms_50ms_Jump.py'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x25L (37) executing command 'EnhancedCommand'
   Description : Time out waiting for host response
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.PySReadWriteParams object at 0x06792540>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06792570>, <py_sfcl.PySEnhancedCmdData object at 0x067925A0>, <None>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No
 
14:45:27: ########################################
14:45:27: ########################################
14:45:27: Stated Running script STPTRNSABRTST42_DVT_ST_PowerLoss_2_17_4_Busy_50ms_100ms_Jump 
14:45:27: ########################################
14:45:27: ###### Running STPTRNSABRTST42_DVT_ST_PowerLoss_2_17_4_Busy_50ms_100ms_Jump Test ###### 

14:45:27: STPTRNSABRTST42_DVT_ST_PowerLoss_2_17_4_Busy_50ms_100ms_Jump[INFO] ### Called STPTRNSABRTST62_util_LOAD_VARS for global values
14:45:27: STPTRNSABRTST42_DVT_ST_PowerLoss_2_17_4_Busy_50ms_100ms_Jump[INFO] ### Completed importing global values from STPTRNSABRTST62_util_LOAD_VARS

14:45:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:29: Host Frequency set to 25000 KHz
14:45:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x067929F0>, 0x0, True) , Command count = 122 ] 
14:45:29: [GO18_globalSetVolt]### Host voltage value is set.
14:45:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x06792960>, 0x0, False) , Command count = 123 ] 
14:45:29: [GO18_globalSetVolt]### Host voltage value is set.
14:45:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 124 ] 
14:45:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 125 ] 
14:45:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 126 ] 
14:45:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06792AE0>, <py_sfcl.CommandDataDefinition object at 0x06792F60>) , Command count = 127 ] 
14:45:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06792BA0>, <py_sfcl.CommandDataDefinition object at 0x06792C60>) , Command count = 128 ] 
14:45:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:29: [ SetCardRCA(0x1, 0xD555) , Command count = 129 ] 
14:45:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:29: Host Frequency set to 25000 KHz
14:45:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:29: ####CSD Registe 2.0 Values####
14:45:29: CSD_STRUCTURE                                 :0x1
14:45:29: Reserv1                                       :0x0
14:45:29: Time Access 1 TAAC                            :0xe
14:45:29: Time Access 2 NSAC*100                        :0x0
14:45:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:29: Card Command Classess CCC                     :0x5b5
14:45:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:29: DSR(driver stage register)  DSR_IMP           :0x0
14:45:29: Reserv2                                       :0x0
14:45:29: Device Size C_SIZE                            :0xedc8
14:45:29: Reserv3                                       :0x0
14:45:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:29: Reserv4                                       :0x0
14:45:29: Write Speed Factor R2W_FACTOR                 :0x2
14:45:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:29: FILE_FORMAT_GRP                               :0x0
14:45:29: COPY flag                                     :0x1
14:45:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:29: File_Format                                   :0x0
14:45:29: CRC                                           :0x0
14:45:29: ####CSD Registe Values####  

14:45:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:29: [GetSCRRegisterEntry] Passed
14:45:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:29: Data_Status_After Erases          : 0
14:45:29: CPRM Security Support             : No Security
14:45:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:29: Spec. Version                     : Version 3.0X
14:45:29: Extended Security Support         : Extended_Security_Not_Supported
14:45:29: Command Support                   : COMMAND_SUPPORT
14:45:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06792CF0>, <py_sfcl.CommandDataDefinition object at 0x06792BD0>) , Command count = 130 ] 
14:45:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06792ED0>, <py_sfcl.CommandDataDefinition object at 0x06792CC0>) , Command count = 131 ] 
14:45:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:29: [ SetBusWidth(0x4) , Command count = 132 ] 
14:45:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06792C90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 133 ] 
14:45:29: Protected Area Size 0x28000
14:45:29: Bus Width           2
14:45:29: Secure Mode         0
14:45:29: Speed  Class        4
14:45:29: Perf Move           0
14:45:29: Au Size             9
14:45:29: Erase Size          15
14:45:29: Erase Timeout       1
14:45:29: Erase offset        1
14:45:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 134 ] 
14:45:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:30: Host Frequency set to 100000 KHz
14:45:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:30: ####CSD Registe 2.0 Values####
14:45:30: CSD_STRUCTURE                                 :0x1
14:45:30: Reserv1                                       :0x0
14:45:30: Time Access 1 TAAC                            :0xe
14:45:30: Time Access 2 NSAC*100                        :0x0
14:45:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:30: Card Command Classess CCC                     :0x5b5
14:45:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:30: DSR(driver stage register)  DSR_IMP           :0x0
14:45:30: Reserv2                                       :0x0
14:45:30: Device Size C_SIZE                            :0xedc8
14:45:30: Reserv3                                       :0x0
14:45:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:30: Reserv4                                       :0x0
14:45:30: Write Speed Factor R2W_FACTOR                 :0x2
14:45:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:30: FILE_FORMAT_GRP                               :0x0
14:45:30: COPY flag                                     :0x1
14:45:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:30: File_Format                                   :0x0
14:45:30: CRC                                           :0x0
14:45:30: ####CSD Registe Values####  

14:45:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06792FC0>, <py_sfcl.CommandDataDefinition object at 0x06792F90>) , Command count = 135 ] 
14:45:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06792E40>, <py_sfcl.CommandDataDefinition object at 0x06792AB0>) , Command count = 136 ] 
14:45:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1D4000 with Constant Pattern
14:46:07: [ WrLbaNoData(0x0, 0x1D4000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 137 ] 
14:46:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1D4000 with Constant Pattern 

14:46:07: STPTRNSABRTST42_DVT_ST_PowerLoss_2_17_4_Busy_50ms_100ms_Jump[INFO] ### Outer loop Count 1024
14:46:07: STPTRNSABRTST42_DVT_ST_PowerLoss_2_17_4_Busy_50ms_100ms_Jump[INFO] ### Inner loop Count 9
14:46:07: STPTRNSABRTST42_DVT_ST_PowerLoss_2_17_4_Busy_50ms_100ms_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06792D80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06792C00>, <py_sfcl.PySEnhancedCmdData object at 0x06794030>, <None>, <py_sfcl.Command23 object at 0x06794090>) , Command count = 138 ] 
14:46:07: STPTRNSABRTST42_DVT_ST_PowerLoss_2_17_4_Busy_50ms_100ms_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:07: STPTRNSABRTST42_DVT_ST_PowerLoss_2_17_4_Busy_50ms_100ms_Jump[INFO] ### Multiple Write with PowerLoss called
14:46:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x067941B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x067941E0>, <py_sfcl.PySEnhancedCmdData object at 0x06794210>, <None>) , Command count = 139 ] 
14:46:17: [ GetCardStatus() , Command count = 140 ] 
14:46:17: Failed Running script <module 'STPTRNSABRTST42_DVT_ST_PowerLoss_2_17_4_Busy_50ms_100ms_Jump' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST42_DVT_ST_PowerLoss_2_17_4_Busy_50ms_100ms_Jump.py'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x25L (37) executing command 'EnhancedCommand'
   Description : Time out waiting for host response
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.PySReadWriteParams object at 0x067941B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x067941E0>, <py_sfcl.PySEnhancedCmdData object at 0x06794210>, <None>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No
 
14:46:17: ########################################
14:46:17: ########################################
14:46:17: Stated Running script STPTRNSABRTST43_DVT_ST_PowerLoss_2_18_1_Busy_1ms_5ms_Overlap 
14:46:17: ########################################
14:46:17: ###### Running STPTRNSABRTST43_DVT_ST_PowerLoss_2_18_1_Busy_1ms_5ms_Overlap Test ###### 

14:46:17: STPTRNSABRTST43_DVT_ST_PowerLoss_2_18_1_Busy_1ms_5ms_Overlap[INFO] ### Called STPTRNSABRTST62_util_LOAD_VARS for global values
14:46:17: STPTRNSABRTST43_DVT_ST_PowerLoss_2_18_1_Busy_1ms_5ms_Overlap[INFO] ### Completed importing global values from STPTRNSABRTST62_util_LOAD_VARS

14:46:17: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:19: Host Frequency set to 25000 KHz
14:46:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:19: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x06794A20>, 0x0, True) , Command count = 141 ] 
14:46:19: [GO18_globalSetVolt]### Host voltage value is set.
14:46:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x06794E10>, 0x0, False) , Command count = 142 ] 
14:46:19: [GO18_globalSetVolt]### Host voltage value is set.
14:46:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 143 ] 
14:46:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 144 ] 
14:46:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 145 ] 
14:46:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067948A0>, <py_sfcl.CommandDataDefinition object at 0x06794C00>) , Command count = 146 ] 
14:46:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06794BD0>, <py_sfcl.CommandDataDefinition object at 0x06794B70>) , Command count = 147 ] 
14:46:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:20: [ SetCardRCA(0x1, 0xD555) , Command count = 148 ] 
14:46:20: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:20: Host Frequency set to 25000 KHz
14:46:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:20: ####CSD Registe 2.0 Values####
14:46:20: CSD_STRUCTURE                                 :0x1
14:46:20: Reserv1                                       :0x0
14:46:20: Time Access 1 TAAC                            :0xe
14:46:20: Time Access 2 NSAC*100                        :0x0
14:46:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:20: Card Command Classess CCC                     :0x5b5
14:46:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:20: DSR(driver stage register)  DSR_IMP           :0x0
14:46:20: Reserv2                                       :0x0
14:46:20: Device Size C_SIZE                            :0xedc8
14:46:20: Reserv3                                       :0x0
14:46:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:20: Reserv4                                       :0x0
14:46:20: Write Speed Factor R2W_FACTOR                 :0x2
14:46:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:20: FILE_FORMAT_GRP                               :0x0
14:46:20: COPY flag                                     :0x1
14:46:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:20: File_Format                                   :0x0
14:46:20: CRC                                           :0x0
14:46:20: ####CSD Registe Values####  

14:46:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:20: [GetSCRRegisterEntry] Passed
14:46:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:20: Data_Status_After Erases          : 0
14:46:20: CPRM Security Support             : No Security
14:46:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:20: Spec. Version                     : Version 3.0X
14:46:20: Extended Security Support         : Extended_Security_Not_Supported
14:46:20: Command Support                   : COMMAND_SUPPORT
14:46:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06794B10>, <py_sfcl.CommandDataDefinition object at 0x06794660>) , Command count = 149 ] 
14:46:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06794AE0>, <py_sfcl.CommandDataDefinition object at 0x06794990>) , Command count = 150 ] 
14:46:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:20: [ SetBusWidth(0x4) , Command count = 151 ] 
14:46:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06794810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 152 ] 
14:46:20: Protected Area Size 0x28000
14:46:20: Bus Width           2
14:46:20: Secure Mode         0
14:46:20: Speed  Class        4
14:46:20: Perf Move           0
14:46:20: Au Size             9
14:46:20: Erase Size          15
14:46:20: Erase Timeout       1
14:46:20: Erase offset        1
14:46:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 153 ] 
14:46:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:20: Host Frequency set to 100000 KHz
14:46:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:20: ####CSD Registe 2.0 Values####
14:46:20: CSD_STRUCTURE                                 :0x1
14:46:20: Reserv1                                       :0x0
14:46:20: Time Access 1 TAAC                            :0xe
14:46:20: Time Access 2 NSAC*100                        :0x0
14:46:20: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:20: Card Command Classess CCC                     :0x5b5
14:46:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:20: DSR(driver stage register)  DSR_IMP           :0x0
14:46:20: Reserv2                                       :0x0
14:46:20: Device Size C_SIZE                            :0xedc8
14:46:20: Reserv3                                       :0x0
14:46:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:20: Reserv4                                       :0x0
14:46:20: Write Speed Factor R2W_FACTOR                 :0x2
14:46:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:20: FILE_FORMAT_GRP                               :0x0
14:46:20: COPY flag                                     :0x1
14:46:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:20: File_Format                                   :0x0
14:46:20: CRC                                           :0x0
14:46:20: ####CSD Registe Values####  

14:46:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06794C60>, <py_sfcl.CommandDataDefinition object at 0x06794F60>) , Command count = 154 ] 
14:46:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067947E0>, <py_sfcl.CommandDataDefinition object at 0x06794F00>) , Command count = 155 ] 
14:46:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1D4000 with Constant Pattern
14:46:57: [ WrLbaNoData(0x0, 0x1D4000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 156 ] 
14:46:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1D4000 with Constant Pattern 

14:46:57: STPTRNSABRTST43_DVT_ST_PowerLoss_2_18_1_Busy_1ms_5ms_Overlap[INFO] ### EXIT_LOOP Count 1
14:46:57: STPTRNSABRTST43_DVT_ST_PowerLoss_2_18_1_Busy_1ms_5ms_Overlap[INFO] ### Multiple Write with PowerLoss called
14:47:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x067949C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06794BA0>, <py_sfcl.PySEnhancedCmdData object at 0x06794AB0>, <None>) , Command count = 157 ] 
14:47:07: [ GetCardStatus() , Command count = 158 ] 
14:47:07: Failed Running script <module 'STPTRNSABRTST43_DVT_ST_PowerLoss_2_18_1_Busy_1ms_5ms_Overlap' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST43_DVT_ST_PowerLoss_2_18_1_Busy_1ms_5ms_Overlap.py'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x25L (37) executing command 'EnhancedCommand'
   Description : Time out waiting for host response
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.PySReadWriteParams object at 0x067949C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06794BA0>, <py_sfcl.PySEnhancedCmdData object at 0x06794AB0>, <None>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No
 
14:47:07: ########################################
14:47:07: ########################################
14:47:07: Stated Running script STPTRNSABRTST44_DVT_ST_PowerLoss_2_18_2_Busy_5ms_10ms_Overlap 
14:47:07: ########################################
14:47:07: ###### Running STPTRNSABRTST44_DVT_ST_PowerLoss_2_18_2_Busy_5ms_10ms_Overlap Test ###### 

14:47:07: STPTRNSABRTST44_DVT_ST_PowerLoss_2_18_2_Busy_5ms_10ms_Overlap[INFO] ### Called STPTRNSABRTST62_util_LOAD_VARS for global values
14:47:07: STPTRNSABRTST44_DVT_ST_PowerLoss_2_18_2_Busy_5ms_10ms_Overlap[INFO] ### Completed importing global values from STPTRNSABRTST62_util_LOAD_VARS

14:47:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:47:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:10: Host Frequency set to 25000 KHz
14:47:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:47:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:47:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x067947B0>, 0x0, True) , Command count = 159 ] 
14:47:10: [GO18_globalSetVolt]### Host voltage value is set.
14:47:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:47:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x06794D80>, 0x0, False) , Command count = 160 ] 
14:47:10: [GO18_globalSetVolt]### Host voltage value is set.
14:47:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 161 ] 
14:47:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:47:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 162 ] 
14:47:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:47:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:47:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:47:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:47:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:47:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 163 ] 
14:47:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:47:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:47:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067D8120>, <py_sfcl.CommandDataDefinition object at 0x067D80C0>) , Command count = 164 ] 
14:47:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:47:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067D8150>, <py_sfcl.CommandDataDefinition object at 0x067D8180>) , Command count = 165 ] 
14:47:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:47:10: [ SetCardRCA(0x1, 0xD555) , Command count = 166 ] 
14:47:10: [DVTCommonLib]### Identification :Idenfication of card completed 

14:47:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:10: Host Frequency set to 25000 KHz
14:47:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:10: ####CSD Registe 2.0 Values####
14:47:10: CSD_STRUCTURE                                 :0x1
14:47:10: Reserv1                                       :0x0
14:47:10: Time Access 1 TAAC                            :0xe
14:47:10: Time Access 2 NSAC*100                        :0x0
14:47:10: Data Transfer Rate TRAN_SPEED                 :0x32
14:47:10: Card Command Classess CCC                     :0x5b5
14:47:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:10: DSR(driver stage register)  DSR_IMP           :0x0
14:47:10: Reserv2                                       :0x0
14:47:10: Device Size C_SIZE                            :0xedc8
14:47:10: Reserv3                                       :0x0
14:47:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:10: Reserv4                                       :0x0
14:47:10: Write Speed Factor R2W_FACTOR                 :0x2
14:47:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:10: FILE_FORMAT_GRP                               :0x0
14:47:10: COPY flag                                     :0x1
14:47:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:10: File_Format                                   :0x0
14:47:10: CRC                                           :0x0
14:47:10: ####CSD Registe Values####  

14:47:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:47:10: [GetSCRRegisterEntry] Passed
14:47:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:47:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:47:10: Data_Status_After Erases          : 0
14:47:10: CPRM Security Support             : No Security
14:47:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:47:10: Spec. Version                     : Version 3.0X
14:47:10: Extended Security Support         : Extended_Security_Not_Supported
14:47:10: Command Support                   : COMMAND_SUPPORT
14:47:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:47:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067D83F0>, <py_sfcl.CommandDataDefinition object at 0x067D8210>) , Command count = 167 ] 
14:47:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:47:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067D8270>, <py_sfcl.CommandDataDefinition object at 0x067D82A0>) , Command count = 168 ] 
14:47:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:47:10: [ SetBusWidth(0x4) , Command count = 169 ] 
14:47:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:47:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x067D8360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 170 ] 
14:47:10: Protected Area Size 0x28000
14:47:10: Bus Width           2
14:47:10: Secure Mode         0
14:47:10: Speed  Class        4
14:47:10: Perf Move           0
14:47:10: Au Size             9
14:47:10: Erase Size          15
14:47:10: Erase Timeout       1
14:47:10: Erase offset        1
14:47:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:47:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:47:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:47:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 171 ] 
14:47:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:47:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:47:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:47:10: Host Frequency set to 100000 KHz
14:47:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:47:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:10: ####CSD Registe 2.0 Values####
14:47:10: CSD_STRUCTURE                                 :0x1
14:47:10: Reserv1                                       :0x0
14:47:10: Time Access 1 TAAC                            :0xe
14:47:10: Time Access 2 NSAC*100                        :0x0
14:47:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:47:10: Card Command Classess CCC                     :0x5b5
14:47:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:10: DSR(driver stage register)  DSR_IMP           :0x0
14:47:10: Reserv2                                       :0x0
14:47:10: Device Size C_SIZE                            :0xedc8
14:47:10: Reserv3                                       :0x0
14:47:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:10: Reserv4                                       :0x0
14:47:10: Write Speed Factor R2W_FACTOR                 :0x2
14:47:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:10: FILE_FORMAT_GRP                               :0x0
14:47:10: COPY flag                                     :0x1
14:47:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:10: File_Format                                   :0x0
14:47:10: CRC                                           :0x0
14:47:10: ####CSD Registe Values####  

14:47:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067D8660>, <py_sfcl.CommandDataDefinition object at 0x067D8480>) , Command count = 172 ] 
14:47:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:47:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067D84E0>, <py_sfcl.CommandDataDefinition object at 0x067D8510>) , Command count = 173 ] 
14:47:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:47:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:47:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1D4000 with Constant Pattern
14:47:48: [ WrLbaNoData(0x0, 0x1D4000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 174 ] 
14:47:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1D4000 with Constant Pattern 

14:47:48: STPTRNSABRTST44_DVT_ST_PowerLoss_2_18_2_Busy_5ms_10ms_Overlap[INFO] ### EXIT_LOOP Count 1
14:47:48: STPTRNSABRTST44_DVT_ST_PowerLoss_2_18_2_Busy_5ms_10ms_Overlap[INFO] ### Multiple Write with PowerLoss called
14:47:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x067D85A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x067D85D0>, <py_sfcl.PySEnhancedCmdData object at 0x067D8600>, <None>) , Command count = 175 ] 
14:47:58: [ GetCardStatus() , Command count = 176 ] 
14:47:58: Failed Running script <module 'STPTRNSABRTST44_DVT_ST_PowerLoss_2_18_2_Busy_5ms_10ms_Overlap' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST44_DVT_ST_PowerLoss_2_18_2_Busy_5ms_10ms_Overlap.py'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x25L (37) executing command 'EnhancedCommand'
   Description : Time out waiting for host response
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.PySReadWriteParams object at 0x067D85A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x067D85D0>, <py_sfcl.PySEnhancedCmdData object at 0x067D8600>, <None>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No
 
14:47:58: ########################################
14:47:58: ########################################
14:47:58: Stated Running script STPTRNSABRTST45_DVT_ST_PowerLoss_2_18_3_Busy_10ms_50ms_Overlap 
14:47:58: ########################################
14:47:58: ###### Running STPTRNSABRTST45_DVT_ST_PowerLoss_2_18_3_Busy_10ms_50ms_Overlap Test ###### 

14:47:58: STPTRNSABRTST45_DVT_ST_PowerLoss_2_18_3_Busy_10ms_50ms_Overlap[INFO] ### Called STPTRNSABRTST62_util_LOAD_VARS for global values
14:47:58: STPTRNSABRTST45_DVT_ST_PowerLoss_2_18_3_Busy_10ms_50ms_Overlap[INFO] ### Completed importing global values from STPTRNSABRTST62_util_LOAD_VARS

14:47:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:48:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:48:00: Host Frequency set to 25000 KHz
14:48:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:48:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:48:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:48:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x067D8AE0>, 0x0, True) , Command count = 177 ] 
14:48:00: [GO18_globalSetVolt]### Host voltage value is set.
14:48:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:48:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x067D8A50>, 0x0, False) , Command count = 178 ] 
14:48:00: [GO18_globalSetVolt]### Host voltage value is set.
14:48:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 179 ] 
14:48:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:48:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 180 ] 
14:48:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:48:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:48:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:48:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:48:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:48:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 181 ] 
14:48:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:48:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:48:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067D8BD0>, <py_sfcl.CommandDataDefinition object at 0x067D8DB0>) , Command count = 182 ] 
14:48:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:48:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067D8C90>, <py_sfcl.CommandDataDefinition object at 0x067D8D50>) , Command count = 183 ] 
14:48:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:48:00: [ SetCardRCA(0x1, 0xD555) , Command count = 184 ] 
14:48:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:48:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:48:00: Host Frequency set to 25000 KHz
14:48:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:48:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:48:00: ####CSD Registe 2.0 Values####
14:48:00: CSD_STRUCTURE                                 :0x1
14:48:00: Reserv1                                       :0x0
14:48:00: Time Access 1 TAAC                            :0xe
14:48:00: Time Access 2 NSAC*100                        :0x0
14:48:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:48:00: Card Command Classess CCC                     :0x5b5
14:48:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:48:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:48:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:48:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:48:00: DSR(driver stage register)  DSR_IMP           :0x0
14:48:00: Reserv2                                       :0x0
14:48:00: Device Size C_SIZE                            :0xedc8
14:48:00: Reserv3                                       :0x0
14:48:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:48:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:48:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:48:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:48:00: Reserv4                                       :0x0
14:48:00: Write Speed Factor R2W_FACTOR                 :0x2
14:48:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:48:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:48:00: FILE_FORMAT_GRP                               :0x0
14:48:00: COPY flag                                     :0x1
14:48:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:48:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:48:00: File_Format                                   :0x0
14:48:00: CRC                                           :0x0
14:48:00: ####CSD Registe Values####  

14:48:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:48:00: [GetSCRRegisterEntry] Passed
14:48:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:48:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:48:00: Data_Status_After Erases          : 0
14:48:00: CPRM Security Support             : No Security
14:48:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:48:00: Spec. Version                     : Version 3.0X
14:48:00: Extended Security Support         : Extended_Security_Not_Supported
14:48:00: Command Support                   : COMMAND_SUPPORT
14:48:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:48:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067D8EA0>, <py_sfcl.CommandDataDefinition object at 0x067D8CC0>) , Command count = 185 ] 
14:48:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:48:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067D8D20>, <py_sfcl.CommandDataDefinition object at 0x067D8CF0>) , Command count = 186 ] 
14:48:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:48:00: [ SetBusWidth(0x4) , Command count = 187 ] 
14:48:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:48:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x067D8F60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 188 ] 
14:48:00: Protected Area Size 0x28000
14:48:00: Bus Width           2
14:48:00: Secure Mode         0
14:48:00: Speed  Class        4
14:48:00: Perf Move           0
14:48:00: Au Size             9
14:48:00: Erase Size          15
14:48:00: Erase Timeout       1
14:48:00: Erase offset        1
14:48:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:48:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:48:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:48:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 189 ] 
14:48:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:48:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:48:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:48:00: Host Frequency set to 100000 KHz
14:48:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:48:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:48:00: ####CSD Registe 2.0 Values####
14:48:00: CSD_STRUCTURE                                 :0x1
14:48:00: Reserv1                                       :0x0
14:48:00: Time Access 1 TAAC                            :0xe
14:48:00: Time Access 2 NSAC*100                        :0x0
14:48:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:48:00: Card Command Classess CCC                     :0x5b5
14:48:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:48:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:48:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:48:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:48:00: DSR(driver stage register)  DSR_IMP           :0x0
14:48:00: Reserv2                                       :0x0
14:48:00: Device Size C_SIZE                            :0xedc8
14:48:00: Reserv3                                       :0x0
14:48:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:48:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:48:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:48:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:48:00: Reserv4                                       :0x0
14:48:00: Write Speed Factor R2W_FACTOR                 :0x2
14:48:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:48:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:48:00: FILE_FORMAT_GRP                               :0x0
14:48:00: COPY flag                                     :0x1
14:48:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:48:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:48:00: File_Format                                   :0x0
14:48:00: CRC                                           :0x0
14:48:00: ####CSD Registe Values####  

14:48:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067D8E10>, <py_sfcl.CommandDataDefinition object at 0x067D8DE0>) , Command count = 190 ] 
14:48:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:48:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067D8F30>, <py_sfcl.CommandDataDefinition object at 0x0679B030>) , Command count = 191 ] 
14:48:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:48:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:48:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1D4000 with Constant Pattern
14:48:38: [ WrLbaNoData(0x0, 0x1D4000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 192 ] 
14:48:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1D4000 with Constant Pattern 

14:48:38: STPTRNSABRTST45_DVT_ST_PowerLoss_2_18_3_Busy_10ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 1
14:48:38: STPTRNSABRTST45_DVT_ST_PowerLoss_2_18_3_Busy_10ms_50ms_Overlap[INFO] ### Multiple Write with PowerLoss called
14:48:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0679B0C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0679B0F0>, <py_sfcl.PySEnhancedCmdData object at 0x0679B120>, <None>) , Command count = 193 ] 
14:48:48: [ GetCardStatus() , Command count = 194 ] 
14:48:48: Failed Running script <module 'STPTRNSABRTST45_DVT_ST_PowerLoss_2_18_3_Busy_10ms_50ms_Overlap' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST45_DVT_ST_PowerLoss_2_18_3_Busy_10ms_50ms_Overlap.py'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x25L (37) executing command 'EnhancedCommand'
   Description : Time out waiting for host response
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.PySReadWriteParams object at 0x0679B0C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0679B0F0>, <py_sfcl.PySEnhancedCmdData object at 0x0679B120>, <None>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No
 
14:48:48: ########################################
14:48:48: ########################################
14:48:48: Stated Running script STPTRNSABRTST46_DVT_ST_PowerLoss_2_18_4_Busy_50ms_100ms_Overlap 
14:48:48: ########################################
14:48:48: ###### Running STPTRNSABRTST46_DVT_ST_PowerLoss_2_18_4_Busy_50ms_100ms_Overlap Test ###### 

14:48:48: STPTRNSABRTST46_DVT_ST_PowerLoss_2_18_4_Busy_50ms_100ms_Overlap[INFO] ### Called STPTRNSABRTST62_util_LOAD_VARS for global values
14:48:48: STPTRNSABRTST46_DVT_ST_PowerLoss_2_18_4_Busy_50ms_100ms_Overlap[INFO] ### Completed importing global values from STPTRNSABRTST62_util_LOAD_VARS

14:48:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:48:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:48:50: Host Frequency set to 25000 KHz
14:48:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:48:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:48:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:48:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x0679BE70>, 0x0, True) , Command count = 195 ] 
14:48:50: [GO18_globalSetVolt]### Host voltage value is set.
14:48:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:48:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x0679BCC0>, 0x0, False) , Command count = 196 ] 
14:48:50: [GO18_globalSetVolt]### Host voltage value is set.
14:48:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 197 ] 
14:48:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:48:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 198 ] 
14:48:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:48:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:48:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:48:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:48:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:48:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 199 ] 
14:48:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:48:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:48:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0679B630>, <py_sfcl.CommandDataDefinition object at 0x0679BDE0>) , Command count = 200 ] 
14:48:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:48:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0679BA50>, <py_sfcl.CommandDataDefinition object at 0x0679B810>) , Command count = 201 ] 
14:48:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:48:50: [ SetCardRCA(0x1, 0xD555) , Command count = 202 ] 
14:48:50: [DVTCommonLib]### Identification :Idenfication of card completed 

14:48:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:48:50: Host Frequency set to 25000 KHz
14:48:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:48:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:48:50: ####CSD Registe 2.0 Values####
14:48:50: CSD_STRUCTURE                                 :0x1
14:48:50: Reserv1                                       :0x0
14:48:50: Time Access 1 TAAC                            :0xe
14:48:50: Time Access 2 NSAC*100                        :0x0
14:48:50: Data Transfer Rate TRAN_SPEED                 :0x32
14:48:50: Card Command Classess CCC                     :0x5b5
14:48:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:48:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:48:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:48:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:48:50: DSR(driver stage register)  DSR_IMP           :0x0
14:48:50: Reserv2                                       :0x0
14:48:50: Device Size C_SIZE                            :0xedc8
14:48:50: Reserv3                                       :0x0
14:48:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:48:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:48:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:48:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:48:50: Reserv4                                       :0x0
14:48:50: Write Speed Factor R2W_FACTOR                 :0x2
14:48:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:48:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:48:50: FILE_FORMAT_GRP                               :0x0
14:48:50: COPY flag                                     :0x1
14:48:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:48:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:48:50: File_Format                                   :0x0
14:48:50: CRC                                           :0x0
14:48:50: ####CSD Registe Values####  

14:48:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:48:50: [GetSCRRegisterEntry] Passed
14:48:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:48:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:48:50: Data_Status_After Erases          : 0
14:48:50: CPRM Security Support             : No Security
14:48:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:48:50: Spec. Version                     : Version 3.0X
14:48:50: Extended Security Support         : Extended_Security_Not_Supported
14:48:50: Command Support                   : COMMAND_SUPPORT
14:48:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:48:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0679BE10>, <py_sfcl.CommandDataDefinition object at 0x0679BC90>) , Command count = 203 ] 
14:48:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:48:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0679BB10>, <py_sfcl.CommandDataDefinition object at 0x0679B8A0>) , Command count = 204 ] 
14:48:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:48:50: [ SetBusWidth(0x4) , Command count = 205 ] 
14:48:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:48:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0679B7E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 206 ] 
14:48:50: Protected Area Size 0x28000
14:48:50: Bus Width           2
14:48:50: Secure Mode         0
14:48:50: Speed  Class        4
14:48:50: Perf Move           0
14:48:50: Au Size             9
14:48:50: Erase Size          15
14:48:50: Erase Timeout       1
14:48:50: Erase offset        1
14:48:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:48:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:48:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:48:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 207 ] 
14:48:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:48:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:48:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:48:50: Host Frequency set to 100000 KHz
14:48:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:48:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:48:50: ####CSD Registe 2.0 Values####
14:48:50: CSD_STRUCTURE                                 :0x1
14:48:50: Reserv1                                       :0x0
14:48:50: Time Access 1 TAAC                            :0xe
14:48:50: Time Access 2 NSAC*100                        :0x0
14:48:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:48:50: Card Command Classess CCC                     :0x5b5
14:48:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:48:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:48:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:48:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:48:50: DSR(driver stage register)  DSR_IMP           :0x0
14:48:50: Reserv2                                       :0x0
14:48:50: Device Size C_SIZE                            :0xedc8
14:48:50: Reserv3                                       :0x0
14:48:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:48:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:48:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:48:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:48:50: Reserv4                                       :0x0
14:48:50: Write Speed Factor R2W_FACTOR                 :0x2
14:48:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:48:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:48:50: FILE_FORMAT_GRP                               :0x0
14:48:50: COPY flag                                     :0x1
14:48:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:48:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:48:50: File_Format                                   :0x0
14:48:50: CRC                                           :0x0
14:48:50: ####CSD Registe Values####  

14:48:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0679BC30>, <py_sfcl.CommandDataDefinition object at 0x0679B6C0>) , Command count = 208 ] 
14:48:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:48:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0679B720>, <py_sfcl.CommandDataDefinition object at 0x0679B7B0>) , Command count = 209 ] 
14:48:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:48:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:48:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1D4000 with Constant Pattern
14:49:28: [ WrLbaNoData(0x0, 0x1D4000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 210 ] 
14:49:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1D4000 with Constant Pattern 

14:49:28: STPTRNSABRTST46_DVT_ST_PowerLoss_2_18_4_Busy_50ms_100ms_Overlap[INFO] ### EXIT_LOOP Count 1
14:49:28: STPTRNSABRTST46_DVT_ST_PowerLoss_2_18_4_Busy_50ms_100ms_Overlap[INFO] ### Multiple Write with PowerLoss called
14:49:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0679BAE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0679B9C0>, <py_sfcl.PySEnhancedCmdData object at 0x0679BC00>, <None>) , Command count = 211 ] 
14:49:38: [ GetCardStatus() , Command count = 212 ] 
14:49:38: Failed Running script <module 'STPTRNSABRTST46_DVT_ST_PowerLoss_2_18_4_Busy_50ms_100ms_Overlap' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST46_DVT_ST_PowerLoss_2_18_4_Busy_50ms_100ms_Overlap.py'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x25L (37) executing command 'EnhancedCommand'
   Description : Time out waiting for host response
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.PySReadWriteParams object at 0x0679BAE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0679B9C0>, <py_sfcl.PySEnhancedCmdData object at 0x0679BC00>, <None>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No
 
14:49:38: ########################################
14:49:38: ########################################
14:49:38: Stated Running script STPTRNSABRTST47_DVT_ST_PowerLoss_2_19_1_Busy_1ms_5ms_Jump_Long 
14:49:38: ########################################
14:49:38: ###### Running STPTRNSABRTST47_DVT_ST_PowerLoss_2_19_1_Busy_1ms_5ms_Jump_Long Test ###### 

14:49:38: STPTRNSABRTST47_DVT_ST_PowerLoss_2_19_1_Busy_1ms_5ms_Jump_Long[INFO] ### Called STPTRNSABRTST62_util_LOAD_VARS for global values
14:49:38: STPTRNSABRTST47_DVT_ST_PowerLoss_2_19_1_Busy_1ms_5ms_Jump_Long[INFO] ### Completed importing global values from STPTRNSABRTST62_util_LOAD_VARS

14:49:38: [GO4_globalInitCard]### Switch to Specify Card Type
14:49:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:49:40: Host Frequency set to 25000 KHz
14:49:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:49:40: [GO18_globalSetVolt]### Set Host Voltage value.
14:49:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:49:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x06812780>, 0x0, True) , Command count = 213 ] 
14:49:40: [GO18_globalSetVolt]### Host voltage value is set.
14:49:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:49:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x068123F0>, 0x0, False) , Command count = 214 ] 
14:49:40: [GO18_globalSetVolt]### Host voltage value is set.
14:49:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 215 ] 
14:49:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:49:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 216 ] 
14:49:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:49:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:49:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:49:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:49:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:49:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 217 ] 
14:49:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:49:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:49:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06812DE0>, <py_sfcl.CommandDataDefinition object at 0x068129F0>) , Command count = 218 ] 
14:49:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:49:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x068125A0>, <py_sfcl.CommandDataDefinition object at 0x06812510>) , Command count = 219 ] 
14:49:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:49:40: [ SetCardRCA(0x1, 0xD555) , Command count = 220 ] 
14:49:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:49:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:49:40: Host Frequency set to 25000 KHz
14:49:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:49:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:49:40: ####CSD Registe 2.0 Values####
14:49:40: CSD_STRUCTURE                                 :0x1
14:49:40: Reserv1                                       :0x0
14:49:40: Time Access 1 TAAC                            :0xe
14:49:40: Time Access 2 NSAC*100                        :0x0
14:49:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:49:40: Card Command Classess CCC                     :0x5b5
14:49:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:49:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:49:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:49:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:49:40: DSR(driver stage register)  DSR_IMP           :0x0
14:49:40: Reserv2                                       :0x0
14:49:40: Device Size C_SIZE                            :0xedc8
14:49:40: Reserv3                                       :0x0
14:49:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:49:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:49:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:49:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:49:40: Reserv4                                       :0x0
14:49:40: Write Speed Factor R2W_FACTOR                 :0x2
14:49:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:49:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:49:40: FILE_FORMAT_GRP                               :0x0
14:49:40: COPY flag                                     :0x1
14:49:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:49:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:49:40: File_Format                                   :0x0
14:49:40: CRC                                           :0x0
14:49:40: ####CSD Registe Values####  

14:49:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:49:40: [GetSCRRegisterEntry] Passed
14:49:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:49:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:49:40: Data_Status_After Erases          : 0
14:49:40: CPRM Security Support             : No Security
14:49:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:49:40: Spec. Version                     : Version 3.0X
14:49:40: Extended Security Support         : Extended_Security_Not_Supported
14:49:40: Command Support                   : COMMAND_SUPPORT
14:49:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:49:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06812D20>, <py_sfcl.CommandDataDefinition object at 0x06812540>) , Command count = 221 ] 
14:49:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:49:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06812870>, <py_sfcl.CommandDataDefinition object at 0x068120F0>) , Command count = 222 ] 
14:49:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:49:41: [ SetBusWidth(0x4) , Command count = 223 ] 
14:49:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:49:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x068127E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 224 ] 
14:49:41: Protected Area Size 0x28000
14:49:41: Bus Width           2
14:49:41: Secure Mode         0
14:49:41: Speed  Class        4
14:49:41: Perf Move           0
14:49:41: Au Size             9
14:49:41: Erase Size          15
14:49:41: Erase Timeout       1
14:49:41: Erase offset        1
14:49:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:49:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:49:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:49:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 225 ] 
14:49:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:49:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:49:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:49:41: Host Frequency set to 100000 KHz
14:49:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:49:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:49:41: ####CSD Registe 2.0 Values####
14:49:41: CSD_STRUCTURE                                 :0x1
14:49:41: Reserv1                                       :0x0
14:49:41: Time Access 1 TAAC                            :0xe
14:49:41: Time Access 2 NSAC*100                        :0x0
14:49:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:49:41: Card Command Classess CCC                     :0x5b5
14:49:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:49:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:49:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:49:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:49:41: DSR(driver stage register)  DSR_IMP           :0x0
14:49:41: Reserv2                                       :0x0
14:49:41: Device Size C_SIZE                            :0xedc8
14:49:41: Reserv3                                       :0x0
14:49:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:49:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:49:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:49:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:49:41: Reserv4                                       :0x0
14:49:41: Write Speed Factor R2W_FACTOR                 :0x2
14:49:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:49:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:49:41: FILE_FORMAT_GRP                               :0x0
14:49:41: COPY flag                                     :0x1
14:49:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:49:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:49:41: File_Format                                   :0x0
14:49:41: CRC                                           :0x0
14:49:41: ####CSD Registe Values####  

14:49:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06812EA0>, <py_sfcl.CommandDataDefinition object at 0x06812630>) , Command count = 226 ] 
14:49:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:49:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06812360>, <py_sfcl.CommandDataDefinition object at 0x06812D50>) , Command count = 227 ] 
14:49:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:49:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:49:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x34000 with Constant Pattern
14:49:45: [ WrLbaNoData(0x0, 0x34000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 228 ] 
14:49:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x34000 with Constant Pattern 

14:49:45: STPTRNSABRTST47_DVT_ST_PowerLoss_2_19_1_Busy_1ms_5ms_Jump_Long[INFO] ### Outer loop Count 1024
14:49:45: STPTRNSABRTST47_DVT_ST_PowerLoss_2_19_1_Busy_1ms_5ms_Jump_Long[INFO] ### Inner loop Count 1
14:49:45: STPTRNSABRTST47_DVT_ST_PowerLoss_2_19_1_Busy_1ms_5ms_Jump_Long[INFO] ### Multiple Read Stop Transmission called
14:49:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06812E40>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06812390>, <py_sfcl.PySEnhancedCmdData object at 0x06812330>, <None>, <py_sfcl.Command23 object at 0x06812450>) , Command count = 229 ] 
14:49:45: STPTRNSABRTST47_DVT_ST_PowerLoss_2_19_1_Busy_1ms_5ms_Jump_Long[INFO] ### Multiple Read Stop Transmission Completed

14:49:45: STPTRNSABRTST47_DVT_ST_PowerLoss_2_19_1_Busy_1ms_5ms_Jump_Long[INFO] ### Multiple Write with PowerLoss called
14:49:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06812120>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06812F90>, <py_sfcl.PySEnhancedCmdData object at 0x06812180>, <None>) , Command count = 230 ] 
14:49:55: [ GetCardStatus() , Command count = 231 ] 
14:49:55: Failed Running script <module 'STPTRNSABRTST47_DVT_ST_PowerLoss_2_19_1_Busy_1ms_5ms_Jump_Long' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST47_DVT_ST_PowerLoss_2_19_1_Busy_1ms_5ms_Jump_Long.py'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x25L (37) executing command 'EnhancedCommand'
   Description : Time out waiting for host response
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.PySReadWriteParams object at 0x06812120>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06812F90>, <py_sfcl.PySEnhancedCmdData object at 0x06812180>, <None>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No
 
14:49:55: ########################################
14:49:55: ########################################
14:49:55: Stated Running script STPTRNSABRTST48_DVT_ST_PowerLoss_2_19_2_Busy_5ms_50ms_Jump_Long 
14:49:55: ########################################
14:49:55: ###### Running STPTRNSABRTST48_DVT_ST_PowerLoss_2_19_2_Busy_5ms_50ms_Jump_Long Test ###### 

14:49:55: STPTRNSABRTST48_DVT_ST_PowerLoss_2_19_2_Busy_5ms_50ms_Jump_Long[INFO] ### Called STPTRNSABRTST62_util_LOAD_VARS for global values
14:49:55: STPTRNSABRTST48_DVT_ST_PowerLoss_2_19_2_Busy_5ms_50ms_Jump_Long[INFO] ### Completed importing global values from STPTRNSABRTST62_util_LOAD_VARS

14:49:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:49:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:49:57: Host Frequency set to 25000 KHz
14:49:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:49:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:49:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:49:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x06812660>, 0x0, True) , Command count = 232 ] 
14:49:57: [GO18_globalSetVolt]### Host voltage value is set.
14:49:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:49:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x068126C0>, 0x0, False) , Command count = 233 ] 
14:49:57: [GO18_globalSetVolt]### Host voltage value is set.
14:49:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 234 ] 
14:49:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:49:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 235 ] 
14:49:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:49:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:49:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:49:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:49:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:49:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 236 ] 
14:49:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:49:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:49:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06812CF0>, <py_sfcl.CommandDataDefinition object at 0x067B9060>) , Command count = 237 ] 
14:49:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:49:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067B9090>, <py_sfcl.CommandDataDefinition object at 0x067B90C0>) , Command count = 238 ] 
14:49:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:49:57: [ SetCardRCA(0x1, 0xD555) , Command count = 239 ] 
14:49:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:49:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:49:57: Host Frequency set to 25000 KHz
14:49:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:49:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:49:57: ####CSD Registe 2.0 Values####
14:49:57: CSD_STRUCTURE                                 :0x1
14:49:57: Reserv1                                       :0x0
14:49:57: Time Access 1 TAAC                            :0xe
14:49:57: Time Access 2 NSAC*100                        :0x0
14:49:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:49:57: Card Command Classess CCC                     :0x5b5
14:49:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:49:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:49:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:49:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:49:57: DSR(driver stage register)  DSR_IMP           :0x0
14:49:57: Reserv2                                       :0x0
14:49:57: Device Size C_SIZE                            :0xedc8
14:49:57: Reserv3                                       :0x0
14:49:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:49:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:49:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:49:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:49:57: Reserv4                                       :0x0
14:49:57: Write Speed Factor R2W_FACTOR                 :0x2
14:49:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:49:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:49:57: FILE_FORMAT_GRP                               :0x0
14:49:57: COPY flag                                     :0x1
14:49:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:49:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:49:57: File_Format                                   :0x0
14:49:57: CRC                                           :0x0
14:49:57: ####CSD Registe Values####  

14:49:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:49:58: [GetSCRRegisterEntry] Passed
14:49:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:49:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:49:58: Data_Status_After Erases          : 0
14:49:58: CPRM Security Support             : No Security
14:49:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:49:58: Spec. Version                     : Version 3.0X
14:49:58: Extended Security Support         : Extended_Security_Not_Supported
14:49:58: Command Support                   : COMMAND_SUPPORT
14:49:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:49:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067B9330>, <py_sfcl.CommandDataDefinition object at 0x067B9150>) , Command count = 240 ] 
14:49:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:49:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067B91B0>, <py_sfcl.CommandDataDefinition object at 0x067B91E0>) , Command count = 241 ] 
14:49:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:49:58: [ SetBusWidth(0x4) , Command count = 242 ] 
14:49:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:49:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x067B92A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 243 ] 
14:49:58: Protected Area Size 0x28000
14:49:58: Bus Width           2
14:49:58: Secure Mode         0
14:49:58: Speed  Class        4
14:49:58: Perf Move           0
14:49:58: Au Size             9
14:49:58: Erase Size          15
14:49:58: Erase Timeout       1
14:49:58: Erase offset        1
14:49:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:49:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:49:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:49:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 244 ] 
14:49:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:49:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:49:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:49:58: Host Frequency set to 100000 KHz
14:49:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:49:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:49:58: ####CSD Registe 2.0 Values####
14:49:58: CSD_STRUCTURE                                 :0x1
14:49:58: Reserv1                                       :0x0
14:49:58: Time Access 1 TAAC                            :0xe
14:49:58: Time Access 2 NSAC*100                        :0x0
14:49:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:49:58: Card Command Classess CCC                     :0x5b5
14:49:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:49:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:49:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:49:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:49:58: DSR(driver stage register)  DSR_IMP           :0x0
14:49:58: Reserv2                                       :0x0
14:49:58: Device Size C_SIZE                            :0xedc8
14:49:58: Reserv3                                       :0x0
14:49:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:49:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:49:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:49:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:49:58: Reserv4                                       :0x0
14:49:58: Write Speed Factor R2W_FACTOR                 :0x2
14:49:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:49:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:49:58: FILE_FORMAT_GRP                               :0x0
14:49:58: COPY flag                                     :0x1
14:49:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:49:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:49:58: File_Format                                   :0x0
14:49:58: CRC                                           :0x0
14:49:58: ####CSD Registe Values####  

14:49:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067B95A0>, <py_sfcl.CommandDataDefinition object at 0x067B93C0>) , Command count = 245 ] 
14:49:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:49:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067B9420>, <py_sfcl.CommandDataDefinition object at 0x067B9450>) , Command count = 246 ] 
14:49:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:49:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:49:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x34000 with Constant Pattern
14:50:02: [ WrLbaNoData(0x0, 0x34000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 247 ] 
14:50:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x34000 with Constant Pattern 

14:50:02: STPTRNSABRTST48_DVT_ST_PowerLoss_2_19_2_Busy_5ms_50ms_Jump_Long[INFO] ### Outer loop Count 1024
14:50:02: STPTRNSABRTST48_DVT_ST_PowerLoss_2_19_2_Busy_5ms_50ms_Jump_Long[INFO] ### Inner loop Count 1
14:50:02: STPTRNSABRTST48_DVT_ST_PowerLoss_2_19_2_Busy_5ms_50ms_Jump_Long[INFO] ### Multiple Read Stop Transmission called
14:50:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x067B94E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x067B9510>, <py_sfcl.PySEnhancedCmdData object at 0x067B9540>, <None>, <py_sfcl.Command23 object at 0x067B95D0>) , Command count = 248 ] 
14:50:02: STPTRNSABRTST48_DVT_ST_PowerLoss_2_19_2_Busy_5ms_50ms_Jump_Long[INFO] ### Multiple Read Stop Transmission Completed

14:50:02: STPTRNSABRTST48_DVT_ST_PowerLoss_2_19_2_Busy_5ms_50ms_Jump_Long[INFO] ### Multiple Write with PowerLoss called
14:50:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x067B96F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x067B9720>, <py_sfcl.PySEnhancedCmdData object at 0x067B9750>, <None>) , Command count = 249 ] 
14:50:12: [ GetCardStatus() , Command count = 250 ] 
14:50:12: Failed Running script <module 'STPTRNSABRTST48_DVT_ST_PowerLoss_2_19_2_Busy_5ms_50ms_Jump_Long' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST48_DVT_ST_PowerLoss_2_19_2_Busy_5ms_50ms_Jump_Long.py'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x25L (37) executing command 'EnhancedCommand'
   Description : Time out waiting for host response
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.PySReadWriteParams object at 0x067B96F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x067B9720>, <py_sfcl.PySEnhancedCmdData object at 0x067B9750>, <None>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No
 
14:50:12: ########################################
14:50:12: ########################################
14:50:12: Stated Running script STPTRNSABRTST49_DVT_ST_PowerLoss_2_19_3_Busy_50ms_100ms_Jump_Long 
14:50:12: ########################################
14:50:12: ###### Running STPTRNSABRTST49_DVT_ST_PowerLoss_2_19_3_Busy_50ms_100ms_Jump_Long Test ###### 

14:50:12: STPTRNSABRTST49_DVT_ST_PowerLoss_2_19_3_Busy_50ms_100ms_Jump_Long[INFO] ### Called STPTRNSABRTST62_util_LOAD_VARS for global values
14:50:12: STPTRNSABRTST49_DVT_ST_PowerLoss_2_19_3_Busy_50ms_100ms_Jump_Long[INFO] ### Completed importing global values from STPTRNSABRTST62_util_LOAD_VARS

14:50:12: [GO4_globalInitCard]### Switch to Specify Card Type
14:50:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:50:14: Host Frequency set to 25000 KHz
14:50:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:50:14: [GO18_globalSetVolt]### Set Host Voltage value.
14:50:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:50:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x067B9C30>, 0x0, True) , Command count = 251 ] 
14:50:14: [GO18_globalSetVolt]### Host voltage value is set.
14:50:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:50:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x06004B70>, 0x0, False) , Command count = 252 ] 
14:50:14: [GO18_globalSetVolt]### Host voltage value is set.
14:50:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 253 ] 
14:50:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:50:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 254 ] 
14:50:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:50:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:50:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:50:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:50:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:50:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 255 ] 
14:50:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:50:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:50:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060EA240>, <py_sfcl.CommandDataDefinition object at 0x060D3F90>) , Command count = 256 ] 
14:50:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:50:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060EA360>, <py_sfcl.CommandDataDefinition object at 0x067B9C00>) , Command count = 257 ] 
14:50:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:50:14: [ SetCardRCA(0x1, 0xD555) , Command count = 258 ] 
14:50:14: [DVTCommonLib]### Identification :Idenfication of card completed 

14:50:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:50:14: Host Frequency set to 25000 KHz
14:50:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:50:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:50:14: ####CSD Registe 2.0 Values####
14:50:14: CSD_STRUCTURE                                 :0x1
14:50:14: Reserv1                                       :0x0
14:50:14: Time Access 1 TAAC                            :0xe
14:50:14: Time Access 2 NSAC*100                        :0x0
14:50:14: Data Transfer Rate TRAN_SPEED                 :0x32
14:50:14: Card Command Classess CCC                     :0x5b5
14:50:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:50:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:50:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:50:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:50:14: DSR(driver stage register)  DSR_IMP           :0x0
14:50:14: Reserv2                                       :0x0
14:50:14: Device Size C_SIZE                            :0xedc8
14:50:14: Reserv3                                       :0x0
14:50:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:50:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:50:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:50:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:50:14: Reserv4                                       :0x0
14:50:14: Write Speed Factor R2W_FACTOR                 :0x2
14:50:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:50:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:50:14: FILE_FORMAT_GRP                               :0x0
14:50:14: COPY flag                                     :0x1
14:50:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:50:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:50:14: File_Format                                   :0x0
14:50:14: CRC                                           :0x0
14:50:14: ####CSD Registe Values####  

14:50:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:50:14: [GetSCRRegisterEntry] Passed
14:50:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:50:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:50:14: Data_Status_After Erases          : 0
14:50:14: CPRM Security Support             : No Security
14:50:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:50:14: Spec. Version                     : Version 3.0X
14:50:14: Extended Security Support         : Extended_Security_Not_Supported
14:50:14: Command Support                   : COMMAND_SUPPORT
14:50:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:50:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060F9270>, <py_sfcl.CommandDataDefinition object at 0x067B9C90>) , Command count = 259 ] 
14:50:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:50:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060F9300>, <py_sfcl.CommandDataDefinition object at 0x067B9CC0>) , Command count = 260 ] 
14:50:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:50:14: [ SetBusWidth(0x4) , Command count = 261 ] 
14:50:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:50:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x067B9DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 262 ] 
14:50:14: Protected Area Size 0x28000
14:50:14: Bus Width           2
14:50:14: Secure Mode         0
14:50:14: Speed  Class        4
14:50:14: Perf Move           0
14:50:14: Au Size             9
14:50:14: Erase Size          15
14:50:14: Erase Timeout       1
14:50:14: Erase offset        1
14:50:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:50:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:50:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:50:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 263 ] 
14:50:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:50:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:50:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:50:15: Host Frequency set to 100000 KHz
14:50:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:50:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:50:15: ####CSD Registe 2.0 Values####
14:50:15: CSD_STRUCTURE                                 :0x1
14:50:15: Reserv1                                       :0x0
14:50:15: Time Access 1 TAAC                            :0xe
14:50:15: Time Access 2 NSAC*100                        :0x0
14:50:15: Data Transfer Rate TRAN_SPEED                 :0xb
14:50:15: Card Command Classess CCC                     :0x5b5
14:50:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:50:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:50:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:50:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:50:15: DSR(driver stage register)  DSR_IMP           :0x0
14:50:15: Reserv2                                       :0x0
14:50:15: Device Size C_SIZE                            :0xedc8
14:50:15: Reserv3                                       :0x0
14:50:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:50:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:50:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:50:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:50:15: Reserv4                                       :0x0
14:50:15: Write Speed Factor R2W_FACTOR                 :0x2
14:50:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:50:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:50:15: FILE_FORMAT_GRP                               :0x0
14:50:15: COPY flag                                     :0x1
14:50:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:50:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:50:15: File_Format                                   :0x0
14:50:15: CRC                                           :0x0
14:50:15: ####CSD Registe Values####  

14:50:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060F9ED0>, <py_sfcl.CommandDataDefinition object at 0x067B9E10>) , Command count = 264 ] 
14:50:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:50:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060D3360>, <py_sfcl.CommandDataDefinition object at 0x067B9E40>) , Command count = 265 ] 
14:50:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:50:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:50:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x34000 with Constant Pattern
14:50:17: [ WrLbaNoData(0x0, 0x34000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 266 ] 
14:50:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x34000 with Constant Pattern 

14:50:17: STPTRNSABRTST49_DVT_ST_PowerLoss_2_19_3_Busy_50ms_100ms_Jump_Long[INFO] ### Outer loop Count 1024
14:50:18: STPTRNSABRTST49_DVT_ST_PowerLoss_2_19_3_Busy_50ms_100ms_Jump_Long[INFO] ### Inner loop Count 1
14:50:18: STPTRNSABRTST49_DVT_ST_PowerLoss_2_19_3_Busy_50ms_100ms_Jump_Long[INFO] ### Multiple Read Stop Transmission called
14:50:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060CC6F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x067B9CF0>, <py_sfcl.PySEnhancedCmdData object at 0x067B9F60>, <None>, <py_sfcl.Command23 object at 0x067B9FC0>) , Command count = 267 ] 
14:50:18: STPTRNSABRTST49_DVT_ST_PowerLoss_2_19_3_Busy_50ms_100ms_Jump_Long[INFO] ### Multiple Read Stop Transmission Completed

14:50:18: STPTRNSABRTST49_DVT_ST_PowerLoss_2_19_3_Busy_50ms_100ms_Jump_Long[INFO] ### Multiple Write with PowerLoss called
14:50:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060CC480>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x067E80F0>, <py_sfcl.PySEnhancedCmdData object at 0x067E8120>, <None>) , Command count = 268 ] 
14:50:28: [ GetCardStatus() , Command count = 269 ] 
14:50:28: Failed Running script <module 'STPTRNSABRTST49_DVT_ST_PowerLoss_2_19_3_Busy_50ms_100ms_Jump_Long' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST49_DVT_ST_PowerLoss_2_19_3_Busy_50ms_100ms_Jump_Long.py'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x25L (37) executing command 'EnhancedCommand'
   Description : Time out waiting for host response
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.PySReadWriteParams object at 0x060CC480>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x067E80F0>, <py_sfcl.PySEnhancedCmdData object at 0x067E8120>, <None>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No
 
14:50:28: ########################################
14:50:28: ########################################
14:50:28: Stated Running script STPTRNSABRTST50_DVT_ST_PowerLoss_2_20_1_Busy_1ms_5ms_Overlap_Long 
14:50:28: ########################################
14:50:28: ###### Running STPTRNSABRTST50_DVT_ST_PowerLoss_2_20_1_Busy_1ms_5ms_Overlap_Long Test ###### 

14:50:28: STPTRNSABRTST50_DVT_ST_PowerLoss_2_20_1_Busy_1ms_5ms_Overlap_Long[INFO] ### Called STPTRNSABRTST62_util_LOAD_VARS for global values
14:50:28: STPTRNSABRTST50_DVT_ST_PowerLoss_2_20_1_Busy_1ms_5ms_Overlap_Long[INFO] ### Completed importing global values from STPTRNSABRTST62_util_LOAD_VARS

14:50:28: [GO4_globalInitCard]### Switch to Specify Card Type
14:50:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:50:30: Host Frequency set to 25000 KHz
14:50:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:50:30: [GO18_globalSetVolt]### Set Host Voltage value.
14:50:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:50:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x067E8930>, 0x0, True) , Command count = 270 ] 
14:50:30: [GO18_globalSetVolt]### Host voltage value is set.
14:50:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:50:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E7C90>, 0x0, False) , Command count = 271 ] 
14:50:30: [GO18_globalSetVolt]### Host voltage value is set.
14:50:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 272 ] 
14:50:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:50:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 273 ] 
14:50:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:50:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:50:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:50:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:50:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:50:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 274 ] 
14:50:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:50:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:50:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E7DB0>, <py_sfcl.CommandDataDefinition object at 0x067E8C60>) , Command count = 275 ] 
14:50:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:50:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E7D20>, <py_sfcl.CommandDataDefinition object at 0x067E8E40>) , Command count = 276 ] 
14:50:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:50:30: [ SetCardRCA(0x1, 0xD555) , Command count = 277 ] 
14:50:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:50:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:50:30: Host Frequency set to 25000 KHz
14:50:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:50:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:50:30: ####CSD Registe 2.0 Values####
14:50:30: CSD_STRUCTURE                                 :0x1
14:50:30: Reserv1                                       :0x0
14:50:30: Time Access 1 TAAC                            :0xe
14:50:30: Time Access 2 NSAC*100                        :0x0
14:50:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:50:30: Card Command Classess CCC                     :0x5b5
14:50:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:50:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:50:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:50:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:50:30: DSR(driver stage register)  DSR_IMP           :0x0
14:50:30: Reserv2                                       :0x0
14:50:30: Device Size C_SIZE                            :0xedc8
14:50:30: Reserv3                                       :0x0
14:50:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:50:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:50:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:50:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:50:30: Reserv4                                       :0x0
14:50:30: Write Speed Factor R2W_FACTOR                 :0x2
14:50:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:50:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:50:30: FILE_FORMAT_GRP                               :0x0
14:50:30: COPY flag                                     :0x1
14:50:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:50:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:50:30: File_Format                                   :0x0
14:50:30: CRC                                           :0x0
14:50:30: ####CSD Registe Values####  

14:50:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:50:30: [GetSCRRegisterEntry] Passed
14:50:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:50:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:50:30: Data_Status_After Erases          : 0
14:50:30: CPRM Security Support             : No Security
14:50:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:50:30: Spec. Version                     : Version 3.0X
14:50:30: Extended Security Support         : Extended_Security_Not_Supported
14:50:30: Command Support                   : COMMAND_SUPPORT
14:50:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:50:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612C7E0>, <py_sfcl.CommandDataDefinition object at 0x067E8A20>) , Command count = 278 ] 
14:50:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:50:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612C810>, <py_sfcl.CommandDataDefinition object at 0x067E8720>) , Command count = 279 ] 
14:50:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:50:30: [ SetBusWidth(0x4) , Command count = 280 ] 
14:50:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:50:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x067E8690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 281 ] 
14:50:30: Protected Area Size 0x28000
14:50:30: Bus Width           2
14:50:30: Secure Mode         0
14:50:30: Speed  Class        4
14:50:30: Perf Move           0
14:50:30: Au Size             9
14:50:30: Erase Size          15
14:50:30: Erase Timeout       1
14:50:30: Erase offset        1
14:50:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:50:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:50:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:50:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 282 ] 
14:50:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:50:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:50:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:50:30: Host Frequency set to 100000 KHz
14:50:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:50:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:50:30: ####CSD Registe 2.0 Values####
14:50:30: CSD_STRUCTURE                                 :0x1
14:50:30: Reserv1                                       :0x0
14:50:30: Time Access 1 TAAC                            :0xe
14:50:30: Time Access 2 NSAC*100                        :0x0
14:50:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:50:30: Card Command Classess CCC                     :0x5b5
14:50:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:50:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:50:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:50:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:50:30: DSR(driver stage register)  DSR_IMP           :0x0
14:50:30: Reserv2                                       :0x0
14:50:30: Device Size C_SIZE                            :0xedc8
14:50:30: Reserv3                                       :0x0
14:50:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:50:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:50:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:50:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:50:30: Reserv4                                       :0x0
14:50:30: Write Speed Factor R2W_FACTOR                 :0x2
14:50:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:50:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:50:30: FILE_FORMAT_GRP                               :0x0
14:50:30: COPY flag                                     :0x1
14:50:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:50:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:50:30: File_Format                                   :0x0
14:50:30: CRC                                           :0x0
14:50:30: ####CSD Registe Values####  

14:50:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612CA80>, <py_sfcl.CommandDataDefinition object at 0x067E8870>) , Command count = 283 ] 
14:50:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:50:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612CAB0>, <py_sfcl.CommandDataDefinition object at 0x067E8AE0>) , Command count = 284 ] 
14:50:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:50:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:50:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x34000 with Constant Pattern
14:50:33: [ WrLbaNoData(0x0, 0x34000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 285 ] 
14:50:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x34000 with Constant Pattern 

14:50:33: STPTRNSABRTST50_DVT_ST_PowerLoss_2_20_1_Busy_1ms_5ms_Overlap_Long[INFO] ### Outer loop Count 212992
14:50:33: STPTRNSABRTST50_DVT_ST_PowerLoss_2_20_1_Busy_1ms_5ms_Overlap_Long[INFO] ### Multiple Read Stop Transmission called
14:50:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612CB10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x067E8660>, <py_sfcl.PySEnhancedCmdData object at 0x067E89C0>, <None>) , Command count = 286 ] 
14:50:43: [ GetCardStatus() , Command count = 287 ] 
14:50:43: Failed Running script <module 'STPTRNSABRTST50_DVT_ST_PowerLoss_2_20_1_Busy_1ms_5ms_Overlap_Long' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST50_DVT_ST_PowerLoss_2_20_1_Busy_1ms_5ms_Overlap_Long.py'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x25L (37) executing command 'EnhancedCommand'
   Description : Time out waiting for host response
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.PySReadWriteParams object at 0x0612CB10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x067E8660>, <py_sfcl.PySEnhancedCmdData object at 0x067E89C0>, <None>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No
 
14:50:43: ########################################
14:50:43: ########################################
14:50:43: Stated Running script STPTRNSABRTST51_DVT_ST_PowerLoss_2_20_2_Busy_5ms_50ms_Overlap_Long 
14:50:43: ########################################
14:50:43: ###### Running STPTRNSABRTST51_DVT_ST_PowerLoss_2_20_2_Busy_5ms_50ms_Overlap_Long Test ###### 

14:50:43: STPTRNSABRTST51_DVT_ST_PowerLoss_2_20_2_Busy_5ms_50ms_Overlap_Long[INFO] ### Called STPTRNSABRTST62_util_LOAD_VARS for global values
14:50:43: STPTRNSABRTST51_DVT_ST_PowerLoss_2_20_2_Busy_5ms_50ms_Overlap_Long[INFO] ### Completed importing global values from STPTRNSABRTST62_util_LOAD_VARS

14:50:43: [GO4_globalInitCard]### Switch to Specify Card Type
14:50:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:50:45: Host Frequency set to 25000 KHz
14:50:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:50:45: [GO18_globalSetVolt]### Set Host Voltage value.
14:50:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:50:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x067E8390>, 0x0, True) , Command count = 288 ] 
14:50:45: [GO18_globalSetVolt]### Host voltage value is set.
14:50:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:50:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612CB40>, 0x0, False) , Command count = 289 ] 
14:50:45: [GO18_globalSetVolt]### Host voltage value is set.
14:50:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 290 ] 
14:50:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:50:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 291 ] 
14:50:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:50:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:50:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:50:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:50:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:50:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 292 ] 
14:50:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:50:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:50:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0664D300>, <py_sfcl.CommandDataDefinition object at 0x0664D330>) , Command count = 293 ] 
14:50:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:50:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0664D4B0>, <py_sfcl.CommandDataDefinition object at 0x067E8840>) , Command count = 294 ] 
14:50:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:50:45: [ SetCardRCA(0x1, 0xD555) , Command count = 295 ] 
14:50:45: [DVTCommonLib]### Identification :Idenfication of card completed 

14:50:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:50:45: Host Frequency set to 25000 KHz
14:50:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:50:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:50:45: ####CSD Registe 2.0 Values####
14:50:45: CSD_STRUCTURE                                 :0x1
14:50:45: Reserv1                                       :0x0
14:50:45: Time Access 1 TAAC                            :0xe
14:50:45: Time Access 2 NSAC*100                        :0x0
14:50:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:50:45: Card Command Classess CCC                     :0x5b5
14:50:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:50:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:50:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:50:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:50:45: DSR(driver stage register)  DSR_IMP           :0x0
14:50:45: Reserv2                                       :0x0
14:50:45: Device Size C_SIZE                            :0xedc8
14:50:45: Reserv3                                       :0x0
14:50:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:50:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:50:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:50:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:50:45: Reserv4                                       :0x0
14:50:45: Write Speed Factor R2W_FACTOR                 :0x2
14:50:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:50:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:50:45: FILE_FORMAT_GRP                               :0x0
14:50:45: COPY flag                                     :0x1
14:50:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:50:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:50:45: File_Format                                   :0x0
14:50:45: CRC                                           :0x0
14:50:45: ####CSD Registe Values####  

14:50:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:50:45: [GetSCRRegisterEntry] Passed
14:50:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:50:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:50:45: Data_Status_After Erases          : 0
14:50:45: CPRM Security Support             : No Security
14:50:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:50:45: Spec. Version                     : Version 3.0X
14:50:45: Extended Security Support         : Extended_Security_Not_Supported
14:50:45: Command Support                   : COMMAND_SUPPORT
14:50:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:50:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06770F90>, <py_sfcl.CommandDataDefinition object at 0x067E8E10>) , Command count = 296 ] 
14:50:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:50:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06770DB0>, <py_sfcl.CommandDataDefinition object at 0x067E88A0>) , Command count = 297 ] 
14:50:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:50:45: [ SetBusWidth(0x4) , Command count = 298 ] 
14:50:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:50:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x067E8C30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 299 ] 
14:50:45: Protected Area Size 0x28000
14:50:45: Bus Width           2
14:50:45: Secure Mode         0
14:50:45: Speed  Class        4
14:50:45: Perf Move           0
14:50:45: Au Size             9
14:50:45: Erase Size          15
14:50:45: Erase Timeout       1
14:50:45: Erase offset        1
14:50:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:50:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:50:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:50:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 300 ] 
14:50:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:50:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:50:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:50:45: Host Frequency set to 100000 KHz
14:50:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:50:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:50:45: ####CSD Registe 2.0 Values####
14:50:45: CSD_STRUCTURE                                 :0x1
14:50:45: Reserv1                                       :0x0
14:50:45: Time Access 1 TAAC                            :0xe
14:50:45: Time Access 2 NSAC*100                        :0x0
14:50:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:50:45: Card Command Classess CCC                     :0x5b5
14:50:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:50:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:50:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:50:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:50:45: DSR(driver stage register)  DSR_IMP           :0x0
14:50:45: Reserv2                                       :0x0
14:50:45: Device Size C_SIZE                            :0xedc8
14:50:45: Reserv3                                       :0x0
14:50:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:50:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:50:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:50:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:50:45: Reserv4                                       :0x0
14:50:45: Write Speed Factor R2W_FACTOR                 :0x2
14:50:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:50:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:50:45: FILE_FORMAT_GRP                               :0x0
14:50:45: COPY flag                                     :0x1
14:50:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:50:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:50:45: File_Format                                   :0x0
14:50:45: CRC                                           :0x0
14:50:45: ####CSD Registe Values####  

14:50:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06786870>, <py_sfcl.CommandDataDefinition object at 0x06786D50>) , Command count = 301 ] 
14:50:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:50:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067866C0>, <py_sfcl.CommandDataDefinition object at 0x067E8690>) , Command count = 302 ] 
14:50:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:50:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:50:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x34000 with Constant Pattern
14:50:48: [ WrLbaNoData(0x0, 0x34000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 303 ] 
14:50:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x34000 with Constant Pattern 

14:50:48: STPTRNSABRTST51_DVT_ST_PowerLoss_2_20_2_Busy_5ms_50ms_Overlap_Long[INFO] ### Outer loop Count 212992
14:50:48: STPTRNSABRTST51_DVT_ST_PowerLoss_2_20_2_Busy_5ms_50ms_Overlap_Long[INFO] ### Multiple Read Stop Transmission called
14:50:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06786750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x067E83F0>, <py_sfcl.PySEnhancedCmdData object at 0x067E8B70>, <None>) , Command count = 304 ] 
14:50:58: [ GetCardStatus() , Command count = 305 ] 
14:50:58: Failed Running script <module 'STPTRNSABRTST51_DVT_ST_PowerLoss_2_20_2_Busy_5ms_50ms_Overlap_Long' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST51_DVT_ST_PowerLoss_2_20_2_Busy_5ms_50ms_Overlap_Long.py'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x25L (37) executing command 'EnhancedCommand'
   Description : Time out waiting for host response
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.PySReadWriteParams object at 0x06786750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x067E83F0>, <py_sfcl.PySEnhancedCmdData object at 0x067E8B70>, <None>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No
 
14:50:58: ########################################
14:50:58: ########################################
14:50:58: Stated Running script STPTRNSABRTST52_DVT_ST_PowerLoss_2_20_3_Busy_50ms_100ms_Overlap_Long 
14:50:58: ########################################
14:50:58: ###### Running STPTRNSABRTST52_DVT_ST_PowerLoss_2_20_3_Busy_5ms_50ms_Overlap_Long Test ###### 

14:50:58: STPTRNSABRTST52_DVT_ST_PowerLoss_2_20_3_Busy_5ms_50ms_Overlap_Long[INFO] ### Called STPTRNSABRTST62_util_LOAD_VARS for global values
14:50:58: STPTRNSABRTST52_DVT_ST_PowerLoss_2_20_3_Busy_5ms_50ms_Overlap_Long[INFO] ### Completed importing global values from STPTRNSABRTST62_util_LOAD_VARS

14:50:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:51:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:51:00: Host Frequency set to 25000 KHz
14:51:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:51:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:51:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:51:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x067E8D80>, 0x0, True) , Command count = 306 ] 
14:51:00: [GO18_globalSetVolt]### Host voltage value is set.
14:51:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:51:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x06786B10>, 0x0, False) , Command count = 307 ] 
14:51:00: [GO18_globalSetVolt]### Host voltage value is set.
14:51:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 308 ] 
14:51:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:51:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 309 ] 
14:51:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:51:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:51:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:51:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:51:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:51:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 310 ] 
14:51:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:51:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:51:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0664D1E0>, <py_sfcl.CommandDataDefinition object at 0x067862D0>) , Command count = 311 ] 
14:51:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:51:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06786A80>, <py_sfcl.CommandDataDefinition object at 0x06786E10>) , Command count = 312 ] 
14:51:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:51:00: [ SetCardRCA(0x1, 0xD555) , Command count = 313 ] 
14:51:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:51:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:51:00: Host Frequency set to 25000 KHz
14:51:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:51:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:51:00: ####CSD Registe 2.0 Values####
14:51:00: CSD_STRUCTURE                                 :0x1
14:51:00: Reserv1                                       :0x0
14:51:00: Time Access 1 TAAC                            :0xe
14:51:00: Time Access 2 NSAC*100                        :0x0
14:51:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:51:00: Card Command Classess CCC                     :0x5b5
14:51:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:51:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:51:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:51:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:51:00: DSR(driver stage register)  DSR_IMP           :0x0
14:51:00: Reserv2                                       :0x0
14:51:00: Device Size C_SIZE                            :0xedc8
14:51:00: Reserv3                                       :0x0
14:51:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:51:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:51:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:51:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:51:00: Reserv4                                       :0x0
14:51:00: Write Speed Factor R2W_FACTOR                 :0x2
14:51:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:51:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:51:00: FILE_FORMAT_GRP                               :0x0
14:51:00: COPY flag                                     :0x1
14:51:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:51:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:51:00: File_Format                                   :0x0
14:51:00: CRC                                           :0x0
14:51:00: ####CSD Registe Values####  

14:51:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:51:00: [GetSCRRegisterEntry] Passed
14:51:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:51:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:51:00: Data_Status_After Erases          : 0
14:51:00: CPRM Security Support             : No Security
14:51:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:51:00: Spec. Version                     : Version 3.0X
14:51:00: Extended Security Support         : Extended_Security_Not_Supported
14:51:00: Command Support                   : COMMAND_SUPPORT
14:51:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:51:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067864E0>, <py_sfcl.CommandDataDefinition object at 0x067863F0>) , Command count = 314 ] 
14:51:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:51:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06786E70>, <py_sfcl.CommandDataDefinition object at 0x06786990>) , Command count = 315 ] 
14:51:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:51:00: [ SetBusWidth(0x4) , Command count = 316 ] 
14:51:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:51:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x067BFAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 317 ] 
14:51:00: Protected Area Size 0x28000
14:51:00: Bus Width           2
14:51:00: Secure Mode         0
14:51:00: Speed  Class        4
14:51:00: Perf Move           0
14:51:00: Au Size             9
14:51:00: Erase Size          15
14:51:00: Erase Timeout       1
14:51:00: Erase offset        1
14:51:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:51:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:51:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:51:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 318 ] 
14:51:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:51:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:51:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:51:01: Host Frequency set to 100000 KHz
14:51:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:51:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:51:01: ####CSD Registe 2.0 Values####
14:51:01: CSD_STRUCTURE                                 :0x1
14:51:01: Reserv1                                       :0x0
14:51:01: Time Access 1 TAAC                            :0xe
14:51:01: Time Access 2 NSAC*100                        :0x0
14:51:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:51:01: Card Command Classess CCC                     :0x5b5
14:51:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:51:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:51:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:51:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:51:01: DSR(driver stage register)  DSR_IMP           :0x0
14:51:01: Reserv2                                       :0x0
14:51:01: Device Size C_SIZE                            :0xedc8
14:51:01: Reserv3                                       :0x0
14:51:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:51:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:51:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:51:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:51:01: Reserv4                                       :0x0
14:51:01: Write Speed Factor R2W_FACTOR                 :0x2
14:51:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:51:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:51:01: FILE_FORMAT_GRP                               :0x0
14:51:01: COPY flag                                     :0x1
14:51:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:51:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:51:01: File_Format                                   :0x0
14:51:01: CRC                                           :0x0
14:51:01: ####CSD Registe Values####  

14:51:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06786F60>, <py_sfcl.CommandDataDefinition object at 0x067867E0>) , Command count = 319 ] 
14:51:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:51:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067BF840>, <py_sfcl.CommandDataDefinition object at 0x067F1060>) , Command count = 320 ] 
14:51:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:51:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:51:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x34000 with Constant Pattern
14:51:03: [ WrLbaNoData(0x0, 0x34000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 321 ] 
14:51:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x34000 with Constant Pattern 

14:51:03: STPTRNSABRTST52_DVT_ST_PowerLoss_2_20_3_Busy_5ms_50ms_Overlap_Long[INFO] ### Outer loop Count 212992
14:51:03: STPTRNSABRTST52_DVT_ST_PowerLoss_2_20_3_Busy_5ms_50ms_Overlap_Long[INFO] ### Multiple Read Stop Transmission called
14:51:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06786B40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x067BFB40>, <py_sfcl.PySEnhancedCmdData object at 0x067BFA80>, <None>) , Command count = 322 ] 
14:51:13: [ GetCardStatus() , Command count = 323 ] 
14:51:13: Failed Running script <module 'STPTRNSABRTST52_DVT_ST_PowerLoss_2_20_3_Busy_50ms_100ms_Overlap_Long' from 'C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST52_DVT_ST_PowerLoss_2_20_3_Busy_50ms_100ms_Overlap_Long.py'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0x25L (37) executing command 'EnhancedCommand'
   Description : Time out waiting for host response
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(<py_sfcl.PySReadWriteParams object at 0x06786B40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x067BFB40>, <py_sfcl.PySEnhancedCmdData object at 0x067BFA80>, <None>)')
   Extended error information:
      Status         : 0x900
      Is busy?       : No
 
14:51:13: ########################################
14:51:13: 


14:51:13: ########################################
14:51:13: The Script <class 'STPTRNSABRTST04_4_Call_All_PL.call_All_PL_4'> had 15 error on running 
14:51:13: ########################################

2016-11-28 14:51:13: 


<<<<<<<<<<<<<<<       PYTHON TRACEBACK       >>>>>>>>>>>>>>>

   File "C:\Program Files\SanDisk\CTF\Libs\General\AppDriver.py", line 269, in _DoRunApp
     returnData = appMainFunction( *functionArgs, **functionKwArgs )
   File "C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\TestRunner.py", line 122, in Main
     testProcedureObj.RunTestProcedure(randomObj)
   File "C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST04_4_Call_All_PL.py", line 117, in RunTestProcedure
     self.call_All_PL_4Obj.Run(randomObj)
   File "C:\Program Files\SanDisk\SDDVT_CQ_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST04_4_Call_All_PL.py", line 90, in Run
     raise TestError.TestFailedError("The Script %s had %d error on running "%(self.__class__,ScriptsStatus))



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  



<<<<<<<<<<<<<<<        ERROR SUMMARY         >>>>>>>>>>>>>>>


 Test reported an error
    The Script <class 'STPTRNSABRTST<NUM>_<NUM>_Call_All_PL.call_All_PL_<NUM>'> had <NUM> error on running 



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 TestFailedError:                                   
    The Script <class 'STPTRNSABRTST04_4_Call_All_PL.call_All_PL_4'> had 15 error on running



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  


<<<<<<<<<<<<<<<       COMMAND HISTORY        >>>>>>>>>>>>>>>

The command history may not capture all of the commands going
to the card so use this information with caution. This is not meant
to be a replacement for a logic or protocol analyzer.

Last 20 commands before error:
     # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   304 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x067E87E0>, py_      491.953     10006.1   read=  0, write=  0                 25      
   305 GetCardStatus()                                                             501.959         3.5   read=  0, write=  0                 'List'  
   306 SetVolt(<py_sfcl.SDVoltage object at 0x0612CB40>, 0, T)                     504.094        18.3   read=  0, write=  0                 0       
   307 SetVolt(<py_sfcl.SDVoltage object at 0x067E8D80>, 0, F)                     504.113        28.5   read=  0, write=  0                 0       
   308 CardSetTimeOut(1F4, FA, 64)                                                 504.142         2.1   read=  0, write=  0                 0       
   309 CardReset(py_sfcl.CARD_MODE.SD, 41FF8000, 1, T, <200/200, 0>, 1, 0, 1,      504.145       214.0   read=  0, write=  0                 C1FF8000
   310 SwitchVolt_CMD11(T, 0, 5)                                                   504.361         8.8   read=  0, write=  0                 0       
   311 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067E8690>, <py      504.370         4.4   read=  0, write=  0                 0       
   312 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0664D1E0>, <py      504.375         4.0   read=  0, write=  0                 0       
   313 SetCardRCA(1, D555)                                                         504.379         1.7   read=  0, write=  0                 'Obj'   
   314 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06786A80>, <py      504.563         3.6   read=  0, write=  0                 0       
   315 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x067864E0>, <py      504.567         6.4   read=  0, write=  0                 0       
   316 SetBusWidth(4)                                                              504.574         3.9   read=  0, write=  0                 0       
   317 CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06786120>, <200/20      504.578         7.6   read=  0, write=  0                 0       
   318 CardSwitchCmd(T, [2,F,F,1,F,F], <40/200, 0>, 40)                            504.588         7.4   read=  0, write=  0                 0       
   319 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06786E70>, <py      504.698         3.5   read=  0, write=  0                 0       
   320 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06786F60>, <py      504.702         3.5   read=  0, write=  0                 0       
   321 WrLbaNoData(0, 34000, <400/200, Arb>, py_sfcl.Pattern.CONST, T, F, F,       504.706      2390.9   read=  0, write=  0                 0       
   322 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x067BFC30>, py_      507.098     10006.1   read=  0, write=  0                 25      
   323 GetCardStatus()                                                             517.105         3.5   read=  0, write=  0                 'List'  

     # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   -----------------------------------------------------------------------------------------------------------------------------------------------
   20 commands.  Total time 00:08:37


Start LBA: 0xffffffff Transferred block amount: 0xffffffff

Latency data
--------------------------------------------------
Time Interval  Reset        Read         Write        
  0 -   8 :    0            103          48           
  8 -  13 :    0            0            0            
 13 -  17 :    0            0            0            
 17 -  21 :    0            0            0            
 21 -  26 :    0            0            0            
 26 -  30 :    0            0            0            
 30 -  34 :    0            0            0            
 34 -  39 :    0            0            0            
 39 -  43 :    0            0            0            
 43 -  48 :    0            0            0            
 48 -  52 :    0            0            0            
 52 -  56 :    0            0            0            
 56 -  61 :    0            0            0            
 61 -  65 :    0            0            0            
 65 -  69 :    0            0            0            
 69 -  74 :    0            0            0            
 74 -  78 :    0            0            0            
 78 -  82 :    0            0            0            
 82 -  87 :    0            0            0            
 87 -  91 :    0            0            0            
 91 -  96 :    0            0            0            
 96 - 100 :    0            0            0            
100 - 104 :    0            0            0            
104 - 109 :    0            0            0            
109 - 113 :    0            0            0            
113 - 117 :    0            0            0            
117 - 122 :    0            0            0            
122 - 126 :    0            0            0            
126 - 131 :    0            0            0            
131 - 135 :    0            0            0            
135 - 139 :    0            0            0            
139 - 144 :    0            0            0            
144 - 148 :    0            0            0            
148 - 152 :    0            0            0            
152 - 157 :    0            0            0            
157 - 161 :    0            0            0            
161 - 165 :    0            0            0            
165 - 170 :    0            0            0            
170 - 174 :    0            0            0            
174 - 179 :    0            0            0            
179 - 183 :    0            0            0            
183 - 187 :    0            0            0            
187 - 192 :    0            0            0            
192 - 196 :    0            0            0            
196 - 200 :    0            0            0            
200 - 205 :    0            0            0            
205 - 209 :    0            0            0            
209 - 214 :    0            0            0            
214 - 218 :    0            0            0            
--------------------------------------------------


List of commands that took the most time to execute:
----------------------------------------------------
     # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

    99 WrLbaNoData(0x0, 0x1D4000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST,            NA 37554.959013   NA                                  0       
   137 WrLbaNoData(0x0, 0x1D4000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST,            NA 37548.524922   NA                                  0       
   156 WrLbaNoData(0x0, 0x1D4000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST,            NA 37537.414073   NA                                  0       
   174 WrLbaNoData(0x0, 0x1D4000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST,            NA 37503.171165   NA                                  0       
   118 WrLbaNoData(0x0, 0x1D4000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST,            NA 37488.468381   NA                                  0       
   210 WrLbaNoData(0x0, 0x1D4000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST,            NA 37405.760316   NA                                  0       
   192 WrLbaNoData(0x0, 0x1D4000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST,            NA 37318.897379   NA                                  0       
    80 WrLbaNoData(0x0, 0x1D4000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST,            NA 33702.217461   NA                                  0       
   175 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x067D8690>, py_           NA 10006.270491   NA                                  37      
   211 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0679B660>, py_           NA 10006.211330   NA                                  37      
   120 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06792420>, py_           NA 10006.125908   NA                                  37      
   250 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x067E8750>, py_           NA 10006.124399   NA                                  37      
   193 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0679B180>, py_           NA 10006.106892   NA                                  37      
   250 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x067E87E0>, py_           NA 10006.099648   NA                                  37      
   250 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x067BFC30>, py_           NA 10006.096630   NA                                  37      
   101 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0678F7B0>, py_           NA 10006.075199   NA                                  37      
   249 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x067B95D0>, py_           NA 10006.054673   NA                                  37      
    82 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x067BFD80>, py_           NA 10006.048938   NA                                  37      
   157 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06794570>, py_           NA 10006.048335   NA                                  37      
   139 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06794090>, py_           NA 10006.039279   NA                                  37      

     # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

Last resetup command number: 322


<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  

TestFailedError error at 00:08:37.


<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 TestFailedError:                                   
    The Script <class 'STPTRNSABRTST04_4_Call_All_PL.call_All_PL_4'> had 15 error on running



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




   #######    ##     ####  ####    
    ##   #   ####     ##    ##     
    ## #    ##  ##    ##    ##     
    ####    ##  ##    ##    ##     
    ## #    ######    ##    ##     
    ##      ##  ##    ##    ##  ## 
   ####     ##  ##   ####  ####### 
                                   

 

